{"title":"03 | JavaScript 如何实现继承？","context":"\n                    <p data-nodeid=\"1721\" class=\"\">\n                      JavaScript\n                      在编程语言界是个异类，它和其他编程语言很不一样，JavaScript\n                      可以在运行的时候动态地改变某个变量的类型。\n                    </p>\n                    <p data-nodeid=\"1722\">\n                      比如你永远也没法想到像<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1849\"\n                        >isTimeout</code\n                      >这样一个变量可以存在多少种类型，除了布尔值<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1851\"\n                        >true</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"1853\">false</code\n                      >，它还可能是<code data-backticks=\"1\" data-nodeid=\"1855\"\n                        >undefined</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1857\">1</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"1859\">0</code\n                      >、一个时间戳，甚至一个对象。\n                    </p>\n                    <p data-nodeid=\"1723\">\n                      又或者你的代码跑异常了，打开浏览器开始断点，发现<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1862\"\n                        >InfoList</code\n                      >这个变量第一次被赋值的时候是个数组<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1864\"\n                        >[{name: 'test1', value: '11'}, {name: 'test2', value:\n                        '22'}]</code\n                      >，过了一会竟然变成了一个对象<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1866\"\n                        >{test1:'11', test2: '22'}</code\n                      >\n                    </p>\n                    <p data-nodeid=\"1724\">\n                      除了变量可以在运行时被赋值为任何类型以外，JavaScript\n                      中也能实现继承，但它不像 Java、C++、C#\n                      这些编程语言一样基于类来实现继承，而是基于原型进行继承。\n                    </p>\n                    <p data-nodeid=\"1725\">\n                      这是因为 JavaScript\n                      中有个特殊的存在：对象。每个对象还都拥有一个原型对象，并可以从中继承方法和属性。\n                    </p>\n                    <p data-nodeid=\"1726\">\n                      提到对象和原型，你曾经是否有过这些疑惑：\n                    </p>\n                    <ol data-nodeid=\"1727\">\n                      <li data-nodeid=\"1728\">\n                        <p data-nodeid=\"1729\">\n                          JavaScript 的函数怎么也是个对象？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1730\">\n                        <p data-nodeid=\"1731\">\n                          <code data-backticks=\"1\" data-nodeid=\"1871\"\n                            >__proto__</code\n                          >和<code data-backticks=\"1\" data-nodeid=\"1873\"\n                            >prototype</code\n                          >到底是啥关系？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1732\">\n                        <p data-nodeid=\"1733\">\n                          JavaScript 中对象是怎么实现继承的？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1734\">\n                        <p data-nodeid=\"1735\">\n                          JavaScript 是怎么访问对象的方法和属性的？\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1736\">\n                      下面我们一起结合问题，来探讨下 JavaScript 对象和继承。\n                    </p>\n                    <h3 data-nodeid=\"1737\">原型对象和对象是什么关系</h3>\n                    <p data-nodeid=\"1738\">\n                      在 JavaScript 中，对象由一组或多组的属性和值组成：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  key1: value1,\n</div></li><li><div class=\"code-word\">  key2: value2,\n</div></li><li><div class=\"code-word\">  key3: value3,\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1740\">\n                      在 JavaScript\n                      中，对象的用途很是广泛，因为它的值既可以是原始类型（<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1881\"\n                        >number</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1883\"\n                        >string</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1885\"\n                        >boolean</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1887\">null</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1889\"\n                        >undefined</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1891\"\n                        >bigint</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"1893\"\n                        >symbol</code\n                      >），还可以是对象和函数。\n                    </p>\n                    <p data-nodeid=\"1741\">\n                      不管是对象，还是函数和数组，它们都是<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1896\"\n                        >Object</code\n                      >的实例，也就是说在 JavaScript\n                      中，除了原始类型以外，其余都是对象。\n                    </p>\n                    <p data-nodeid=\"1742\">\n                      这也就解答了疑惑 1：JavaScript 的函数怎么也是个对象？\n                    </p>\n                    <p data-nodeid=\"1743\">\n                      在 JavaScript\n                      中，函数也是一种特殊的对象，它同样拥有属性和值。所有的函数会有一个特别的属性<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1900\"\n                        >prototype</code\n                      >，该属性的值是一个对象，这个对象便是我们常说的“原型对象”。\n                    </p>\n                    <p data-nodeid=\"1744\">我们可以在控制台打印一下这个属性：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">Person</span><span class=\"hljs-params\">(name)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">this</span>.name = name;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">console.log(Person.prototype);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1746\">打印结果显示为：</p>\n                    <p data-nodeid=\"1747\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/34/06/CioPOWBwCzyAM-CAAAAKDg-SVug894.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1906\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1748\">\n                      可以看到，该原型对象有两个属性：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1908\"\n                        >constructor</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"1910\"\n                        >__proto__</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"1749\">\n                      到这里，我们仿佛看到疑惑 “2：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1913\"\n                        >__proto__</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"1915\"\n                        >prototype</code\n                      >到底是啥关系？”的答案要出现了。在 JavaScript 中，<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1917\"\n                        >__proto__</code\n                      >属性指向对象的原型对象，对于函数来说，它的原型对象便是<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1919\"\n                        >prototype</code\n                      >。函数的原型对象<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1921\"\n                        >prototype</code\n                      >有以下特点：\n                    </p>\n                    <ul data-nodeid=\"1750\">\n                      <li data-nodeid=\"1751\">\n                        <p data-nodeid=\"1752\">\n                          默认情况下，所有函数的原型对象（<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1924\"\n                            >prototype</code\n                          >）都拥有<code data-backticks=\"1\" data-nodeid=\"1926\"\n                            >constructor</code\n                          >属性，该属性指向与之关联的构造函数，在这里构造函数便是<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1928\"\n                            >Person</code\n                          >函数；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1753\">\n                        <p data-nodeid=\"1754\">\n                          <code data-backticks=\"1\" data-nodeid=\"1930\"\n                            >Person</code\n                          >函数的原型对象（<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1932\"\n                            >prototype</code\n                          >）同样拥有自己的原型对象，用<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1934\"\n                            >__proto__</code\n                          >属性表示。前面说过，函数是<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1936\"\n                            >Object</code\n                          >的实例，因此<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1938\"\n                            >Person.prototype</code\n                          >的原型对象为<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1940\"\n                            >Object.prototype。</code\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1755\">\n                      我们可以用这样一张图来描述<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1942\"\n                        >prototype</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1944\"\n                        >__proto__</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"1946\"\n                        >constructor</code\n                      >三个属性的关系：\n                    </p>\n                    <p data-nodeid=\"1756\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/39/C6/Cgp9HWB87hmAPbFxAACJvyE_nJI526.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"1950\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1757\">\n                      从这个图中，我们可以找到这样的关系：\n                    </p>\n                    <ul data-nodeid=\"1758\">\n                      <li data-nodeid=\"1759\">\n                        <p data-nodeid=\"1760\">\n                          在 JavaScript 中，<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1953\"\n                            >__proto__</code\n                          >属性指向对象的原型对象；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1761\">\n                        <p data-nodeid=\"1762\">\n                          对于函数来说，每个函数都有一个<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1956\"\n                            >prototype</code\n                          >属性，该属性为该函数的原型对象。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1763\">\n                      这是否就是疑惑 2 的完整答案呢？并不全是，在 JavaScript\n                      中还可以通过<code data-backticks=\"1\" data-nodeid=\"1959\"\n                        >prototype</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"1961\"\n                        >__proto__</code\n                      >实现继承。\n                    </p>\n                    <h3 data-nodeid=\"1764\">\n                      使用 prototype 和\n                      <strong data-nodeid=\"1968\">proto</strong> 实现继承\n                    </h3>\n                    <p data-nodeid=\"1765\">\n                      前面我们说过，对象之所以使用广泛，是因为对象的属性值可以为任意类型。因此，属性的值同样可以为另外一个对象，这意味着\n                      JavaScript 可以这么做：通过将对象 A 的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1970\"\n                        >__proto__</code\n                      >属性赋值为对象 B，即<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1972\"\n                        >A.__proto__ = B</code\n                      >，此时使用<code data-backticks=\"1\" data-nodeid=\"1974\"\n                        >A.__proto__</code\n                      >便可以访问 B 的属性和方法。\n                    </p>\n                    <p data-nodeid=\"1766\">\n                      这样，JavaScript\n                      可以在两个对象之间创建一个关联，使得一个对象可以访问另一个对象的属性和方法，从而实现了继承，此时疑惑\n                      “3. JavaScript 中对象是怎么实现继承的？”解答完毕。\n                    </p>\n                    <p data-nodeid=\"1767\">\n                      那么，JavaScript 又是怎样使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1978\"\n                        >prototype</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"1980\"\n                        >__proto__</code\n                      >实现继承的呢？\n                    </p>\n                    <p data-nodeid=\"1768\">\n                      继续以<code data-backticks=\"1\" data-nodeid=\"1983\"\n                        >Person</code\n                      >为例，当我们使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1985\"\n                        >new Person()</code\n                      >创建对象时，JavaScript 就会创建构造函数<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1987\"\n                        >Person</code\n                      >的实例，比如这里我们创建了一个叫“Lily”的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1989\"\n                        >Person</code\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> lily = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">\"Lily\"</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1770\">\n                      上述这段代码在运行时，JavaScript 引擎通过将<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1992\"\n                        >Person</code\n                      >的原型对象<code data-backticks=\"1\" data-nodeid=\"1994\"\n                        >prototype</code\n                      >赋值给实例对象<code data-backticks=\"1\" data-nodeid=\"1996\"\n                        >lily</code\n                      >的<code data-backticks=\"1\" data-nodeid=\"1998\"\n                        >__proto__</code\n                      >属性，实现了<code data-backticks=\"1\" data-nodeid=\"2000\"\n                        >lily</code\n                      >对<code data-backticks=\"1\" data-nodeid=\"2002\"\n                        >Person</code\n                      >的继承，即执行了以下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 实际上 JavaScript 引擎执行了以下代码</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> lily = {};\n</div></li><li><div class=\"code-word\">lily.__proto__ = Person.prototype;\n</div></li><li><div class=\"code-word\">Person.call(lily, <span class=\"hljs-string\">\"Lily\"</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1772\">\n                      我们来打印一下<code data-backticks=\"1\" data-nodeid=\"2005\"\n                        >lily</code\n                      >实例：\n                    </p>\n                    <p data-nodeid=\"1773\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/FE/Cgp9HWBwC56AVE8iAAAQagv5qXA279.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"2009\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1774\">\n                      可以看到，<code data-backticks=\"1\" data-nodeid=\"2011\"\n                        >lily</code\n                      >作为<code data-backticks=\"1\" data-nodeid=\"2013\"\n                        >Person</code\n                      >的实例对象，它的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2015\"\n                        >__proto__</code\n                      >指向了<code data-backticks=\"1\" data-nodeid=\"2017\"\n                        >Person</code\n                      >的原型对象，即<code data-backticks=\"1\" data-nodeid=\"2019\"\n                        >Person.prototype</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"1775\">这时，我们再补充下上图中的关系：</p>\n                    <p data-nodeid=\"1776\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/39/CF/CioPOWB87iuAaqLIAADOJoaQI4k669.png\"\n                        alt=\"图片2.png\"\n                        data-nodeid=\"2024\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1777\">\n                      从这幅图中，我们可以清晰地看到构造函数和<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2026\"\n                        >constructor</code\n                      >属性、原型对象（<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2028\"\n                        >prototype</code\n                      >）和<code data-backticks=\"1\" data-nodeid=\"2030\"\n                        >__proto__</code\n                      >、实例对象之间的关系，这是很多初学者容易搞混的。根据这张图，我们可以得到以下的关系：\n                    </p>\n                    <ol data-nodeid=\"1778\">\n                      <li data-nodeid=\"1779\">\n                        <p data-nodeid=\"1780\">\n                          每个函数的原型对象（<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2033\"\n                            >Person.prototype</code\n                          >）都拥有<code data-backticks=\"1\" data-nodeid=\"2035\"\n                            >constructor</code\n                          >属性，指向该原型对象的构造函数（<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2037\"\n                            >Person</code\n                          >）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1781\">\n                        <p data-nodeid=\"1782\">\n                          使用构造函数（<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2040\"\n                            >new Person()</code\n                          >）可以创建对象，创建的对象称为实例对象（<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2042\"\n                            >lily</code\n                          >）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1783\">\n                        <p data-nodeid=\"1784\">\n                          实例对象通过将<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2045\"\n                            >__proto__</code\n                          >属性指向构造函数的原型对象（<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2047\"\n                            >Person.prototype</code\n                          >），实现了该原型对象的继承。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1785\">\n                      那么现在，关于疑惑 2 中<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2050\"\n                        >__proto__</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"2052\"\n                        >prototype</code\n                      >的关系，我们可以得到这样的答案：\n                    </p>\n                    <ul data-nodeid=\"1786\">\n                      <li data-nodeid=\"1787\">\n                        <p data-nodeid=\"1788\">\n                          每个对象都有<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2055\"\n                            >__proto__</code\n                          >属性来标识自己所继承的原型对象，但只有函数才有<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2057\"\n                            >prototype</code\n                          >属性；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1789\">\n                        <p data-nodeid=\"1790\">\n                          对于函数来说，每个函数都有一个<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2060\"\n                            >prototype</code\n                          >属性，该属性为该函数的原型对象；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1791\">\n                        <p data-nodeid=\"1792\">\n                          通过将实例对象的<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2063\"\n                            >__proto__</code\n                          >属性赋值为其构造函数的原型对象<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2065\"\n                            >prototype</code\n                          >，JavaScript\n                          可以使用构造函数创建对象的方式，来实现继承。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1793\">\n                      现在我们知道，一个对象可通过<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2068\"\n                        >__proto__</code\n                      >访问原型对象上的属性和方法，而该原型同样也可通过<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2070\"\n                        >__proto__</code\n                      >访问它的原型对象，这样我们就在实例和原型之间构造了一条原型链。这里我用红色的线将<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2072\"\n                        >lily</code\n                      >实例的原型链标了出来。\n                    </p>\n                    <p data-nodeid=\"1794\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/39/CF/CioPOWB87jeAG0OeAADy6IPqiP8527.png\"\n                        alt=\"图片3.png\"\n                        data-nodeid=\"2076\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1795\">\n                      下面一起来进行疑惑 4 “JavaScript\n                      是怎么访问对象的方法和属性的？”的解答：在 JavaScript\n                      中，是通过遍历原型链的方式，来访问对象的方法和属性。\n                    </p>\n                    <h3 data-nodeid=\"1796\">通过原型链访问对象的方法和属性</h3>\n                    <p data-nodeid=\"1797\">\n                      当 JavaScript\n                      试图访问一个对象的属性时，会基于原型链进行查找。查找的过程是这样的：\n                    </p>\n                    <ul data-nodeid=\"1798\">\n                      <li data-nodeid=\"1799\">\n                        <p data-nodeid=\"1800\">\n                          首先会优先在该对象上搜寻。如果找不到，还会依次层层向上搜索该对象的原型对象、该对象的原型对象的原型对象等（套娃告警）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1801\">\n                        <p data-nodeid=\"1802\">\n                          JavaScript 中的所有对象都来自<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2082\"\n                            >Object</code\n                          >，<code data-backticks=\"1\" data-nodeid=\"2084\"\n                            >Object.prototype.__proto__ === null</code\n                          >。<code data-backticks=\"1\" data-nodeid=\"2086\"\n                            >null</code\n                          >没有原型，并作为这个原型链中的最后一个环节；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1803\">\n                        <p data-nodeid=\"1804\">\n                          JavaScript\n                          会遍历访问对象的整个原型链，如果最终依然找不到，此时会认为该对象的属性值为<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2089\"\n                            >undefined</code\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1805\">\n                      我们可以通过一个具体的例子，来表示基于原型链的对象属性的访问过程，在该例子中我们构建了一条对象的原型链，并进行属性值的访问：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 让我们假设我们有一个对象 o, 其有自己的属性 a 和 b：</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> o = {a: <span class=\"hljs-number\">1</span>, b: <span class=\"hljs-number\">2</span>};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// o 的原型 o.__proto__有属性 b 和 c：</span>\n</div></li><li><div class=\"code-word\">o.__proto__ = {b: <span class=\"hljs-number\">3</span>, c: <span class=\"hljs-number\">4</span>};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 最后, o.__proto__.__proto__ 是 null.</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 这就是原型链的末尾，即 null，</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 根据定义，null 没有__proto__.</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 综上，整个原型链如下:</span>\n</div></li><li><div class=\"code-word\">{a:<span class=\"hljs-number\">1</span>, b:<span class=\"hljs-number\">2</span>} ---&gt; {b:<span class=\"hljs-number\">3</span>, c:<span class=\"hljs-number\">4</span>} ---&gt; <span class=\"hljs-keyword\">null</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 当我们在获取属性值的时候，就会触发原型链的查找：</span>\n</div></li><li><div class=\"code-word\">console.log(o.a); <span class=\"hljs-comment\">// o.a =&gt; 1</span>\n</div></li><li><div class=\"code-word\">console.log(o.b); <span class=\"hljs-comment\">// o.b =&gt; 2</span>\n</div></li><li><div class=\"code-word\">console.log(o.c); <span class=\"hljs-comment\">// o.c =&gt; o.__proto__.c =&gt; 4</span>\n</div></li><li><div class=\"code-word\">console.log(o.d); <span class=\"hljs-comment\">// o.c =&gt; o.__proto__.d =&gt; o.__proto__.__proto__ == null =&gt; undefined</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1807\">\n                      可以看到，当我们对对象进行属性值的获取时，会触发该对象的原型链查找过程。\n                    </p>\n                    <p data-nodeid=\"1808\">\n                      既然 JavaScript\n                      中会通过遍历原型链来访问对象的属性，那么我们可以通过原型链的方式进行继承。\n                    </p>\n                    <p data-nodeid=\"1809\">\n                      也就是说，可以通过原型链去访问原型对象上的属性和方法，我们不需要在创建对象的时候给该对象重新赋值/添加方法。比如，我们调用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2095\"\n                        >lily.toString()</code\n                      >时，JavaScript 引擎会进行以下操作：\n                    </p>\n                    <ol data-nodeid=\"1810\">\n                      <li data-nodeid=\"1811\">\n                        <p data-nodeid=\"1812\">\n                          先检查<code data-backticks=\"1\" data-nodeid=\"2098\"\n                            >lily</code\n                          >对象是否具有可用的<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2100\"\n                            >toString()</code\n                          >方法；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1813\">\n                        <p data-nodeid=\"1814\">\n                          如果没有，则\\`\\`检查<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2106\"\n                            >lily</code\n                          >的原型对象（<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2108\"\n                            >Person.prototype</code\n                          >）是否具有可用的<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2110\"\n                            >toString()</code\n                          >方法；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1815\">\n                        <p data-nodeid=\"1816\">\n                          如果也没有，则检查<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2113\"\n                            >Person()</code\n                          >构造函数的<code data-backticks=\"1\" data-nodeid=\"2115\"\n                            >prototype</code\n                          >属性所指向的对象的原型对象（即<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2117\"\n                            >Object.prototype</code\n                          >）是否具有可用的<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"2119\"\n                            >toString()</code\n                          >方法，于是该方法被调用。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1817\">\n                      由于通过原型链进行属性的查找，需要层层遍历各个原型对象，此时可能会带来性能问题：\n                    </p>\n                    <ul data-nodeid=\"1818\">\n                      <li data-nodeid=\"1819\">\n                        <p data-nodeid=\"1820\">\n                          当试图访问不存在的属性时，会遍历整个原型链；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1821\">\n                        <p data-nodeid=\"1822\">\n                          在原型链上查找属性比较耗时，对性能有副作用，这在性能要求苛刻的情况下很重要。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1823\">\n                      因此，我们在设计对象的时候，需要注意代码中原型链的长度。当原型链过长时，可以选择进行分解，来避免可能带来的性能问题。\n                    </p>\n                    <p data-nodeid=\"1824\">\n                      除了通过原型链的方式实现 JavaScript 继承，JavaScript\n                      中实现继承的方式还包括经典继承(盗用构造函数)、组合继承、原型式继承、寄生式继承，等等。\n                    </p>\n                    <ul data-nodeid=\"1825\">\n                      <li data-nodeid=\"1826\">\n                        <p data-nodeid=\"1827\">\n                          原型链继承方式中引用类型的属性被所有实例共享，无法做到实例私有；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1828\">\n                        <p data-nodeid=\"1829\">\n                          经典继承方式可以实现实例属性私有，但要求类型只能通过构造函数来定义；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1830\">\n                        <p data-nodeid=\"1831\">\n                          组合继承融合原型链继承和构造函数的优点，它的实现如下：\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">Parent</span><span class=\"hljs-params\">(name)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 私有属性，不共享</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">this</span>.name = name;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 需要复用、共享的方法定义在父类原型上</span>\n</div></li><li><div class=\"code-word\">Parent.prototype.speak = function() {\n</div></li><li><div class=\"code-word\">  console.log(<span class=\"hljs-string\">\"hello\"</span>);\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">Child</span><span class=\"hljs-params\">(name)</span> </span>{\n</div></li><li><div class=\"code-word\">  Parent.call(<span class=\"hljs-keyword\">this</span>, name);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 继承方法</span>\n</div></li><li><div class=\"code-word\">Child.prototype = <span class=\"hljs-keyword\">new</span> Parent();\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"1833\">\n                      组合继承模式通过将共享属性定义在父类原型上、将私有属性通过构造函数赋值的方式，实现了按需共享对象和方法，是\n                      JavaScript 中最常用的继承模式。\n                    </p>\n                    <p data-nodeid=\"1834\">\n                      虽然在继承的实现方式上有很多种，但实际上都离不开原型对象和原型链的内容，因此掌握<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2131\"\n                        >__proto__</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"2133\"\n                        >prototype</code\n                      >、对象的继承等这些知识，是我们实现各种继承方式的前提。\n                    </p>\n                    <h3 data-nodeid=\"1835\">小结</h3>\n                    <p data-nodeid=\"1836\">\n                      关于 JavaScript\n                      的原型和继承，常常会在我们面试题中出现。随着 ES6/ES7\n                      等新语法糖的出现，我们在日常开发中可能更倾向于使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2137\"\n                        >class</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"2139\"\n                        >extends</code\n                      >等语法来编写代码，原型继承等概念逐渐变淡。\n                    </p>\n                    <p data-nodeid=\"1837\">\n                      但不管语法糖怎么先进，JavaScript\n                      的设计在本质上依然没有变化，依然是基于原型来实现继承的。如果不了解这些内容，可能在我们遇到一些超出自己认知范围的内容时，很容易束手无策。\n                    </p>\n                    <p data-nodeid=\"1838\">\n                      现在，本文开始的四个疑惑我都在文中进行解答了，现在该轮到你了：\n                    </p>\n                    <ol data-nodeid=\"1839\">\n                      <li data-nodeid=\"1840\">\n                        <p data-nodeid=\"1841\">\n                          JavaScript 的函数和对象是怎样的关系？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1842\">\n                        <p data-nodeid=\"1843\">\n                          <code data-backticks=\"1\" data-nodeid=\"2144\"\n                            >__proto__</code\n                          >和<code data-backticks=\"1\" data-nodeid=\"2146\"\n                            >prototype</code\n                          >都表示原型对象，它们有什么区别呢？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1844\">\n                        <p data-nodeid=\"1845\">\n                          JavaScript 中对象的继承和原型链是什么关系？\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1846\" class=\"\">把你的想法写在留言区~</p>\n            "}