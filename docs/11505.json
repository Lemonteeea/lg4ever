{"title":"03 | 如何构建一个简单的 RESTful 服务？","context":"\n                    <p data-nodeid=\"22200\" class=\"\">\n                      前面几讲都是一些知识点的阐述，本讲将应用前面讲到的知识点，来实现一个简单版本的\n                      RESTful 系统架构，并在此架构上实现一些简单的应用。\n                    </p>\n                    <h3 data-nodeid=\"22201\">基础技术点</h3>\n                    <p data-nodeid=\"22202\">\n                      在学习本讲时会涉及一些技术知识点：\n                    </p>\n                    <ul data-nodeid=\"22203\">\n                      <li data-nodeid=\"22204\">\n                        <p data-nodeid=\"22205\">什么是 RESTful 规范；</p>\n                      </li>\n                      <li data-nodeid=\"22206\">\n                        <p data-nodeid=\"22207\">数据库的读写处理过程；</p>\n                      </li>\n                      <li data-nodeid=\"22208\">\n                        <p data-nodeid=\"22209\">\n                          目前常用的 MVC\n                          架构模式，以及后续本专栏所应用的一套新的、独创的架构模式——MSVC\n                          架构模式。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"22210\">RESTful</h4>\n                    <p data-nodeid=\"22211\">\n                      RESTful（Representational State\n                      Transfer）是一种架构的<strong data-nodeid=\"22416\"\n                        >约束条件</strong\n                      >和<strong data-nodeid=\"22417\">规则</strong\n                      >。在倡导前后端分离后，该架构规范的应用愈加广泛。具体知识点，<a\n                        href=\"https://github.com/aisuhua/restful-api-design-references\"\n                        data-nodeid=\"22414\"\n                        >你可以参考这里进行学习</a\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"22212\">MongoDB</h4>\n                    <p data-nodeid=\"22213\">\n                      由于本讲涉及数据库的操作，本专栏主要使用<strong\n                        data-nodeid=\"22436\"\n                        >非关系型数据库</strong\n                      >——MongoDB，因此这里需要先了解下 MongoDB\n                      的相关操作，以及安装配置方法，你可以参考<a\n                        href=\"https://www.runoob.com/mongodb/mongodb-osx-install.html\"\n                        data-nodeid=\"22426\"\n                        >官网的文档来安装</a\n                      >，这里就不细讲。为了使用便利，我们可以直接在官网创建\n                      MongoDB 云服务远程连接，具体请参照<a\n                        href=\"https://cloud.mongodb.com/\"\n                        data-nodeid=\"22430\"\n                        >官网</a\n                      >，以及\n                      <a\n                        href=\"https://mongodb.github.io/node-mongodb-native/2.0/api/index.html\"\n                        data-nodeid=\"22434\"\n                        >API 文档请参考这里</a\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"22214\">MVC→MSVC</h4>\n                    <p data-nodeid=\"22215\">\n                      我们应该都比较熟知 MVC\n                      架构，它在前后端分离中起到了非常重要的作用，我们先来看下传统的\n                      MVC 架构的模式，如图 1 所示。\n                    </p>\n                    <p data-nodeid=\"22216\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/08/CioPOWBHMl-ASR4aAAAg3opNISU640.png\"\n                        alt=\"图片 2.png\"\n                        data-nodeid=\"22441\"\n                      />\n                    </p>\n                    <p data-nodeid=\"22217\">此模式中：</p>\n                    <ul data-nodeid=\"22218\">\n                      <li data-nodeid=\"22219\">\n                        <p data-nodeid=\"22220\">\n                          M（Model）层处理数据库相关的操作（只有数据库操作时）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22221\">\n                        <p data-nodeid=\"22222\">\n                          C（Controller）层处理业务逻辑；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22223\">\n                        <p data-nodeid=\"22224\">\n                          V（View）层则是页面显示和交互（本讲不涉及）。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"22225\">\n                      但是在目前服务划分较细的情况下，M\n                      层不仅仅是数据库操作，因此这种架构模式显得有些力不从心，导致开发的数据以及业务逻辑有时候在\n                      M 层，有时候却在 C 层。出现这类情况的核心原因是 C 与 C\n                      之间无法进行复用，如果需要复用则需要放到 M\n                      层，那么业务逻辑就会冗余在 M，代码会显得非常繁杂，如图 2\n                      所示。\n                    </p>\n                    <p data-nodeid=\"22226\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/0C/Cgp9HWBHMnaAG42WAAA3-AZ5WeM867.png\"\n                        alt=\"图片 4.png\"\n                        data-nodeid=\"22449\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22227\">\n                      <p style=\"text-align: center\">图 2 MVC 模式问题</p>\n                    </div>\n                    <p data-nodeid=\"22228\">\n                      为了解决以上问题，在经过一些实践后，我在研发过程中提出了一套新的架构模式，当然也有他人提到过（比如\n                      Eggjs\n                      框架中的模式）。这种模式也会应用在本专栏的整个架构体系中，我们暂且叫作\n                      MSVC（Model、Service、View、Controller）。\n                    </p>\n                    <p data-nodeid=\"22229\">\n                      我们先来看下 MSVC 的架构模式，如图 3 所示。\n                    </p>\n                    <p data-nodeid=\"22230\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/09/CioPOWBHMomAfpfmAABDDmUKgC4829.png\"\n                        alt=\"图片 6.png\"\n                        data-nodeid=\"22454\"\n                      />\n                    </p>\n                    <p data-nodeid=\"22231\">\n                      将所有数据相关的操作都集中于 M 层，而 M\n                      层复用的业务逻辑则转到新的 S 层，C\n                      层则负责核心业务处理，可以调用 M 和 S\n                      层。以上是相关知识点，接下来我们进行架构的实践设计。\n                    </p>\n                    <h3 data-nodeid=\"22232\">系统实践</h3>\n                    <p data-nodeid=\"22233\">\n                      我们先实现一个简单版本的 RESTful\n                      服务，其次为了能够更清晰地了解 MVC 架构和 MSVC\n                      架构的优缺点，我们也会分别实现两个版本的 RESTful 服务。\n                    </p>\n                    <p data-nodeid=\"22234\">\n                      我们要实现的是一个<strong data-nodeid=\"22463\"\n                        >获取用户发帖的列表信息 API</strong\n                      >，该 API\n                      列表的内容包含两部分，一部分是从数据库获取的发帖内容，但是这部分只包含用户\n                      ID，另外一部分则是需要通过 ID 批量拉取用户信息。\n                    </p>\n                    <p data-nodeid=\"22235\">\n                      我们先来设计 RESTful\n                      API，由于是拉取列表内容接口，因此这里设计为一个 GET\n                      接口，根据 RESTful 约束规则设计为：GET\n                      /v1/contents；另外还需要设计一个独立的服务用来获取用户信息，将接口设计为：GET\n                      /v1/userinfos。\n                    </p>\n                    <p data-nodeid=\"22236\">\n                      为了更清晰些，我绘制了一个时序图来表示，如图 4 所示。\n                    </p>\n                    <p data-nodeid=\"22237\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/0C/Cgp9HWBHMpOASLZ7AACJ0Un2XOA103.png\"\n                        alt=\"图片 7.png\"\n                        data-nodeid=\"22468\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22238\">\n                      <p style=\"text-align: center\">图 4 例子系统时序图</p>\n                    </div>\n                    <p data-nodeid=\"22239\">在图 4 中详细的过程是：</p>\n                    <ul data-nodeid=\"22240\">\n                      <li data-nodeid=\"22241\">\n                        <p data-nodeid=\"22242\">\n                          用户先调用 /v1/contents API 拉取 restful server\n                          的内容；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22243\">\n                        <p data-nodeid=\"22244\">\n                          restful server 会首先去 MongoDB 中获取 contents；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22245\">\n                        <p data-nodeid=\"22246\">\n                          拿到 contents 后解析出其中的 userIds；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22247\">\n                        <p data-nodeid=\"22248\">\n                          然后再通过 /v1/userinfos API 调用 API server\n                          的服务获取用户信息列表；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22249\">\n                        <p data-nodeid=\"22250\">\n                          API server 同样需要和 MongoDB 交互查询到所需要的\n                          userinfos；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22251\">\n                        <p data-nodeid=\"22252\">\n                          拿到 userinfos 后通过 addUserinfo 将用户信息整合到\n                          contents 中去；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22253\">\n                        <p data-nodeid=\"22254\">\n                          最后将 contents 返回给到调用方。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"22255\">\n                      在不考虑任何架构模式的情况下，我们来实现一个简单版本的\n                      restful 服务，上面分析了需要实现 2 个 server，这里分别叫作\n                      <strong data-nodeid=\"22486\">API server</strong> 和\n                      <strong data-nodeid=\"22487\">restful server</strong>。\n                    </p>\n                    <h4 data-nodeid=\"22256\">API server</h4>\n                    <p data-nodeid=\"22257\">\n                      server 包含 2 个部分：<strong data-nodeid=\"22498\"\n                        >解析请求路径</strong\n                      >和<strong data-nodeid=\"22499\">解析请求参数</strong>，在\n                      Node.js 中我们可以用以下代码来解析：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> * 创建 http 服务，简单返回\n</div></li><li><div class=\"code-word\"> */\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 获取 get 参数</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> pathname = url.parse(req.url).pathname;\n</div></li><li><div class=\"code-word\">    paramStr = url.parse(req.url).query,\n</div></li><li><div class=\"code-word\">    param = querystring.parse(paramStr);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 过滤非拉取用户信息请求</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-string\">'/v1/userinfos'</span> != pathname) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> setResInfo(res, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'path not found'</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 参数校验，没有包含参数时返回错误</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>(!param || !param[<span class=\"hljs-string\">'user_ids'</span>]) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> setResInfo(res, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'params error'</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22259\">\n                      上面代码中使用 Node.js 的 url 模块来获取请求路径和 GET\n                      字符串，拿到 GET 的字符串后还需要使用 Node.js 的\n                      querystring 将字符串解析为参数的 JSON 对象。\n                    </p>\n                    <p data-nodeid=\"22260\">\n                      参数和请求路径解析成功后，再进行路径的判断和校验，如果不满足我们当前的要求，调用\n                      setResInfo 报错返回相应的数据给到前端。setResInfo\n                      这个函数实现比较简单，使用 res\n                      对象来设置返回的数据，具体你可以前往\n                      <a\n                        href=\"https://github.com/love-flutter/nodejs-column\"\n                        data-nodeid=\"22504\"\n                        >GitHub 源码</a\n                      >中查看。\n                    </p>\n                    <p data-nodeid=\"22261\">\n                      路径和参数解析成功后，我们再根据当前参数查询 MongoDB 中的\n                      userinfo 数据，具体代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> baseMongo = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./lib/baseMongodb'</span>)();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ...省略上面部分代码</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 从 db 查询数据，并获取，有可能返回空数据</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> userInfo = <span class=\"hljs-keyword\">await</span> queryData({<span class=\"hljs-string\">'id'</span> : { <span class=\"hljs-attr\">$in</span> : param[<span class=\"hljs-string\">'user_ids'</span>].split(<span class=\"hljs-string\">','</span>)}});\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> setResInfo(res, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'success'</span>, userInfo);\n</div></li><li><div class=\"code-word\">});\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> * @description db 数据查询\n</div></li><li><div class=\"code-word\"> * @param object queryOption \n</div></li><li><div class=\"code-word\"> */\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">queryData</span>(<span class=\"hljs-params\">queryOption</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> client = <span class=\"hljs-keyword\">await</span> baseMongo.getClient();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> collection = client.db(<span class=\"hljs-string\">\"nodejs_cloumn\"</span>).collection(<span class=\"hljs-string\">\"user\"</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> queryArr = <span class=\"hljs-keyword\">await</span> collection.find(queryOption).toArray();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> queryArr;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22263\">\n                      这一代码中使用了 baseMongodb\n                      这个自己封装的库，该库主要基于 mongo\n                      的基础库进行了本地封装处理。在 queryData 中通过 mongo\n                      来查询 nodejs_cloumn 库中的 user\n                      表，并带上查询条件，查询语法你可以参考\n                      <a\n                        href=\"https://mongodb.github.io/node-mongodb-native/2.0/api/index.html\"\n                        data-nodeid=\"22512\"\n                        >API 文档</a\n                      >。\n                    </p>\n                    <blockquote data-nodeid=\"22264\">\n                      <p data-nodeid=\"22265\">\n                        注意上面代码中，find 查询返回的数据需要使用 toArray\n                        进行转化处理。拿到 MongoDB 查询结果后，再调用 setResInfo\n                        返回查询结果给到前端。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"22266\">\n                      接下来我们继续实现 restful server。\n                    </p>\n                    <h4 data-nodeid=\"22267\">restful server</h4>\n                    <p data-nodeid=\"22268\">\n                      和 API server 相似，前面 2\n                      个过程是解析请求路径和请求参数，解析成功后，根据时序图先从\n                      MongoDB 中拉取 10 条 content 数据，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 获取 get 参数</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> pathname = url.parse(req.url).pathname;\n</div></li><li><div class=\"code-word\">    paramStr = url.parse(req.url).query,\n</div></li><li><div class=\"code-word\">    param = querystring.parse(paramStr);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 过滤非拉取用户信息请求</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-string\">'/v1/contents'</span> != pathname) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> setResInfo(res, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'path not found'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">'404'</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 从 db 查询数据，并获取，有可能返回空数据</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-keyword\">await</span> queryData({}, {<span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">10</span>});\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    contents = <span class=\"hljs-keyword\">await</span> filterUserinfo(contents);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> setResInfo(res, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'success'</span>, contents);\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22270\">\n                      在 MongoDB 中查询到具体的 contents 后，再调用\n                      filterUserinfo 这个函数将 contents 中的 user_id 转化为\n                      userinfo，具体代码如图 5\n                      所示（为了代码简洁，我使用了截图，源代码请参考\n                      <a\n                        href=\"https://github.com/love-flutter/nodejs-column\"\n                        data-nodeid=\"22523\"\n                        >GitHub</a\n                      >\n                      上的）：\n                    </p>\n                    <p data-nodeid=\"22271\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/17/09/CioPOWBHMqSAeQfTAAF5ba4WuFA603.png\"\n                        alt=\"图片 8.png\"\n                        data-nodeid=\"22527\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22272\">\n                      <p style=\"text-align: center\">\n                        图 5 filterUserinfo 代码实现\n                      </p>\n                    </div>\n                    <p data-nodeid=\"22273\">\n                      在上面代码中的第 52 行是调用 API server 将用户的 userIds\n                      转化为 userinfos，最后在 64 行，将获取的 userinfos 添加到\n                      contents 中。\n                    </p>\n                    <p data-nodeid=\"22274\">\n                      最后我们打开两个命令行窗口，分别进入到两个 server\n                      下，运行如下命令启动服务。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">node index\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22276\">\n                      运行成功后，我们在浏览器中打开如下地址：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:5000/v1/userinfos?user_ids=1001,1002</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22278\">\n                      你将会看到一个 JSON 的返回结构，如图 6 所示。\n                    </p>\n                    <p data-nodeid=\"22279\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/0D/Cgp9HWBHMqyAFEfxAACiD747m4U810.png\"\n                        alt=\"图片 9.png\"\n                        data-nodeid=\"22534\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22280\">\n                      <p style=\"text-align: center\">图 6 API server 返回信息</p>\n                    </div>\n                    <p data-nodeid=\"22281\">\n                      接下来我们访问如下地址，并且打开 chrome 的控制台的 network\n                      状态栏。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:5000/v1/test</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22283\">\n                      你将会看到返回的状态码是 404，如图 7 所示，这也是 restful\n                      的规范之一，即正确地使用 http 状态码。\n                    </p>\n                    <p data-nodeid=\"22284\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/17/0D/Cgp9HWBHMrWAHu5_AAFIdt9MME4795.png\"\n                        alt=\"图片 10.png\"\n                        data-nodeid=\"22539\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22285\">\n                      <p style=\"text-align: center\">图 7 异常响应返回</p>\n                    </div>\n                    <p data-nodeid=\"22286\">\n                      接下来我们请求 restful server 的\n                      API，同样使用浏览器打开如下接口地址：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:4000/v1/contents</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22288\">你将会看到如图 8 所示的响应结果。</p>\n                    <p data-nodeid=\"22289\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/17/0D/Cgp9HWBHMr-AKdSMAAFW1ay8vPI075.png\"\n                        alt=\"图片 11.png\"\n                        data-nodeid=\"22544\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22290\">\n                      <p style=\"text-align: center\">图 8 contents 响应结果</p>\n                    </div>\n                    <p data-nodeid=\"22291\">\n                      以上就实现了一个简单 restful\n                      服务的功能，你可以看到代码都堆积在 index.js\n                      中，并且代码逻辑还比较简单，如果稍微复杂一些，这种架构模式根本没法进行团队合作，或者后期维护，因此就需要\n                      MVC 和 MVCS 架构模式来优化这种场景。\n                    </p>\n                    <p data-nodeid=\"22292\">\n                      接下来我们先来看看使用 MVC 来优化。\n                    </p>\n                    <h3 data-nodeid=\"22293\">进阶实现</h3>\n                    <p data-nodeid=\"22294\">\n                      没有架构模式虽然也能按照需求满足接口要求，但是代码是<strong\n                        data-nodeid=\"22553\"\n                        >不可维护</strong\n                      >的。而 MVC\n                      已经被实践证明是非常好的架构模式，但是在现阶段也存在一些问题，接下来我们就逐步进行优化，让我们的架构和代码更加优秀。\n                    </p>\n                    <h4 data-nodeid=\"22295\">MVC</h4>\n                    <p data-nodeid=\"22296\">\n                      既然是 M 和 C，我们就先思考下，上面的 restful server\n                      中哪些是 M 层的逻辑，哪些是 C 层的逻辑。\n                    </p>\n                    <p data-nodeid=\"22297\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/17/0D/Cgp9HWBHMsyAF-PaAAB-xAx-32s648.png\"\n                        alt=\"图片 12.png\"\n                        data-nodeid=\"22558\"\n                      />\n                    </p>\n                    <p data-nodeid=\"22298\">\n                      以上是所有的逻辑，根据表格，我们首先创建两个目录分别是\n                      <strong data-nodeid=\"22568\">model</strong> 和\n                      <strong data-nodeid=\"22569\">Controller</strong>：\n                    </p>\n                    <ul data-nodeid=\"22299\">\n                      <li data-nodeid=\"22300\">\n                        <p data-nodeid=\"22301\">\n                          在 model 中创建一个 content.js 用来处理 content model\n                          逻辑；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22302\">\n                        <p data-nodeid=\"22303\">\n                          在 Controller 中也创建一个 content.js 用来处理 content\n                          的 Controller 逻辑。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"22304\">\n                      在源代码中有一个 index.js\n                      文件，在没有架构模式时，基本上处理了所有的业务，但是根据当前架构模式，如表\n                      1 所示，只适合处理 url\n                      路径解析、路由判断及转发，因此需要简化原来的逻辑，和第一部分代码一样，我们就不再列举了，主要看路由判断。首先需要根据\n                      restful url 路由配置一份路由转发逻辑，配置如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> routerMapping = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'/v1/contents'</span> : {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">'Controller'</span> : <span class=\"hljs-string\">'content'</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">'method'</span> : <span class=\"hljs-string\">'list'</span>\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'/v1/test'</span> : {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">'Controller'</span> : <span class=\"hljs-string\">'content'</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">'method'</span> : <span class=\"hljs-string\">'test'</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22306\">上面代码的意思是：</p>\n                    <ul data-nodeid=\"22307\">\n                      <li data-nodeid=\"22308\">\n                        <p data-nodeid=\"22309\">\n                          如果请求路径是 /v1/contents 就转发到 content.js 这个\n                          Controller，并且调用其 list 方法；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22310\">\n                        <p data-nodeid=\"22311\">\n                          如果是 /v1/test 则也转发到 content.js 这个\n                          Controller，但调用的是 test 方法。\n                        </p>\n                      </li>\n                    </ul>\n                    <blockquote data-nodeid=\"22312\">\n                      <p data-nodeid=\"22313\">\n                        注意：其中 test 是一个同步方法，list 是一个异步方法。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"22314\">\n                      路由配置完成以后，就需要根据路由配置，将请求路径、转发到处理相应功能的模块或者类、函数中去，代码如图\n                      9 所示。\n                    </p>\n                    <p data-nodeid=\"22315\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/17/0D/Cgp9HWBHMtiAAs7YAAJNxih_ssE949.png\"\n                        alt=\"图片 13.png\"\n                        data-nodeid=\"22580\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22316\">\n                      <p style=\"text-align: center\">图 9 index 核心逻辑</p>\n                    </div>\n                    <ul data-nodeid=\"22317\">\n                      <li data-nodeid=\"22318\">\n                        <p data-nodeid=\"22319\">\n                          第一个红色框内的部分，判断的是路由是否在配置内，不存在则返回\n                          404；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22320\">\n                        <p data-nodeid=\"22321\">\n                          第二个红色框内的部分，加载对应的 Controller 模块；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22322\">\n                        <p data-nodeid=\"22323\">\n                          第三个红色框内的部分，表示判断所调用的方法类型是异步还是同步，如果是异步使用\n                          await\n                          来获取执行结果，如果是同步则直接调用获取返回结果。\n                        </p>\n                      </li>\n                    </ul>\n                    <blockquote data-nodeid=\"22324\">\n                      <p data-nodeid=\"22325\">\n                        注意：这里使用 try catch 的目的是确保调用安全，避免\n                        crash 问题。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"22326\">\n                      接下来我们实现一个\n                      Controller，为了合理性，我们先实现一个基类，然后让每个\n                      Controller 继承这个基类：\n                    </p>\n                    <ul data-nodeid=\"22327\">\n                      <li data-nodeid=\"22328\">\n                        <p data-nodeid=\"22329\">\n                          在项目根目录下我们创建一个 core 文件夹，并创建一个\n                          Controller.js 作为基类；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22330\">\n                        <p data-nodeid=\"22331\">\n                          然后我们把一些相同的功能放入这个基类，比如 res 和 req\n                          的赋值，以及通用返回处理，还有 url 参数解析等。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"22332\">\n                      我们来看下这部分代码，如图 10 所示。\n                    </p>\n                    <p data-nodeid=\"22333\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/17/0B/CioPOWBHMxSAAxc8AAF_MvEbU10031.png\"\n                        alt=\"图片 14.png\"\n                        data-nodeid=\"22591\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22334\">\n                      <p style=\"text-align: center\">图 10 Controller 基类</p>\n                    </div>\n                    <p data-nodeid=\"22335\">\n                      功能还是比较简单的，只是提炼了一些 Controller\n                      共同的部分。接下来我们再来实现 content.js 这个\n                      Controller，代码如图 11 所示：\n                    </p>\n                    <p data-nodeid=\"22336\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/17/0E/Cgp9HWBHMwaAMQK8AAD-onTOdVQ611.png\"\n                        alt=\"图片 15.png\"\n                        data-nodeid=\"22595\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22337\">\n                      <p style=\"text-align: center\">\n                        图 11 content.js Controller\n                      </p>\n                    </div>\n                    <p data-nodeid=\"22338\">\n                      我们在初次实现时，可以不关注图 11 中的第 2 和 3\n                      行，实现红色框内的代码即可。可以将 list\n                      暂时设置为空，实现完成后，我们在根目录运行以下命令，启动服务。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">node index\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22340\">接下来打开浏览器访问：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/v1/test</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22342\">\n                      你就可以看到响应了一个 JSON 数据，这样就实现了 Controller\n                      部分了。如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  ret:&nbsp;0,\n</div></li><li><div class=\"code-word\">  message:&nbsp;\"good\",\n</div></li><li><div class=\"code-word\">  data: { }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22344\">\n                      接下来我们再来实现 Model 层部分，和 Controller\n                      类似，我们也需要一个基类来处理 Model\n                      层相似的逻辑，然后其他 Model 来继承这个基类，这部分如图 12\n                      所示。\n                    </p>\n                    <p data-nodeid=\"22345\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/0B/CioPOWBHMx2AHsKzAAEYhjLBhO4974.png\"\n                        alt=\"图片 16.png\"\n                        data-nodeid=\"22602\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22346\">\n                      <p style=\"text-align: center\">图 12 Model 基类</p>\n                    </div>\n                    <p data-nodeid=\"22347\">\n                      这个基类首先设置了 db 名称，其次定义了一个 GET\n                      方法来获取表的操作句柄，这部分代码与上面简单 restful\n                      服务的类似。完成基类后，我们再来完善 model 中的 content.js\n                      逻辑。\n                    </p>\n                    <p data-nodeid=\"22348\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/17/0E/Cgp9HWBHMyeAPElfAAEk45BmKsI006.png\"\n                        alt=\"图片 17.png\"\n                        data-nodeid=\"22606\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22349\">\n                      <p style=\"text-align: center\">\n                        图 13 model content.js 代码实现\n                      </p>\n                    </div>\n                    <p data-nodeid=\"22684\" class=\"te-preview-highlight\">\n                      这部分代码主要方法是\n                      <strong data-nodeid=\"22690\">getList</strong>，原理和简单\n                      restful server 中的查询类似，在第 11 行通过父类的 GET\n                      方法获取表 content 的操作句柄，再调用 MongoDB 的 find\n                      方法查询 contents。有了 model content 后，我们再回去完善\n                      content.js Controller 中的 list\n                      函数部分逻辑，代码封装的比较简洁，如下所示：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">    <span class=\"hljs-keyword\">async</span> list() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> contentList = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> ContentModel().getList();\n</div></li><li><div class=\"code-word\">        contentList = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>._filterUserinfo(contentList);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.resAPI(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'success'</span>, contentList);\n</div></li><li><div class=\"code-word\">    }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22352\">\n                      上面代码中的第 4 行，只能在当前 Controller\n                      下实现一个私有方法 _filterUserinfo\n                      来处理用户信息部分，这部分逻辑也和简单 restful\n                      服务的一样。\n                    </p>\n                    <p data-nodeid=\"22353\">\n                      这样就实现了一个 MVC\n                      的架构，将原来的复杂不可扩展性的代码，转化为<strong\n                        data-nodeid=\"22629\"\n                        >可扩展</strong\n                      >、<strong data-nodeid=\"22630\">易维护</strong\n                      >的代码，这部分核心代码可以参考\n                      <a\n                        href=\"https://github.com/love-flutter/nodejs-column\"\n                        data-nodeid=\"22627\"\n                        >GitHub 源码</a\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"22354\">MVCS</h4>\n                    <p data-nodeid=\"22355\">\n                      在上面的代码中存在一个问题，就是 _filterUserinfo 是放在\n                      Controller 来处理，这个方法又会涉及调用 API server\n                      的逻辑，看起来也是数据处理部分，从原理上说这部分不适合放在\n                      Controller。其次在其他 Controller 也需要 _filterUserinfo\n                      时，这时候就比较懵逼了，比如我们现在有另外一个 Controller\n                      叫作 recommend.js，这里面也是拉取推荐的\n                      content，也需要这个 _filterUserinfo 方法，如图 14 所示。\n                    </p>\n                    <p data-nodeid=\"22356\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/0B/CioPOWBHMzCANv2nAAFcFfow9m4167.png\"\n                        alt=\"图片 18.png\"\n                        data-nodeid=\"22641\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22357\">\n                      <p style=\"text-align: center\">图 14 MVC 复用性问题例子</p>\n                    </div>\n                    <p data-nodeid=\"22358\">\n                      其中左边是存在的矛盾，因为 _filterUserinfo 在 Controller\n                      是私有方法，recommend Controller\n                      调用不到，那么为了复用，我们只能将该方法封装到\n                      content-model 中，并且将数据也集中在 Model 层去。\n                    </p>\n                    <p data-nodeid=\"22359\">虽然解决了问题，但是你会发现：</p>\n                    <ul data-nodeid=\"22360\">\n                      <li data-nodeid=\"22361\">\n                        <p data-nodeid=\"22362\">\n                          Model\n                          层不干净了，它现在既要负责数据处理，又要负责业务逻辑；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22363\">\n                        <p data-nodeid=\"22364\">\n                          Controller\n                          层的业务减少了，但是分层不明确了，有些业务放在\n                          Model，有些又在 Controller\n                          层，对于后期代码的维护或者扩展都非常困难了。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"22365\">\n                      为了解决这个问题，有一个新的概念——Service 层，具体如图 15\n                      所示。\n                    </p>\n                    <p data-nodeid=\"22366\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/0E/Cgp9HWBHMzqAc1JJAAFspSJGcu8417.png\"\n                        alt=\"图片 19.png\"\n                        data-nodeid=\"22651\"\n                      />\n                    </p>\n                    <div data-nodeid=\"22367\">\n                      <p style=\"text-align: center\">图 15 MSVC 优化效果</p>\n                    </div>\n                    <ul data-nodeid=\"22368\">\n                      <li data-nodeid=\"22369\">\n                        <p data-nodeid=\"22370\">\n                          图中的浅红色框内，就是新架构模式的 M 层；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22371\">\n                        <p data-nodeid=\"22372\">两个绿色框内为 C 层；</p>\n                      </li>\n                      <li data-nodeid=\"22373\">\n                        <p data-nodeid=\"22374\">\n                          最上面的浅蓝色框则为 Service 层。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"22375\">\n                      这样就可以复用 _filterUserinfo，并解决 M 与 C\n                      层不明确的问题。接下来我们来实践这部分代码：\n                    </p>\n                    <ul data-nodeid=\"22376\">\n                      <li data-nodeid=\"22377\">\n                        <p data-nodeid=\"22378\">\n                          首先我们需要创建一个文件夹 service 来存放相应的\n                          Service 层代码；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22379\">\n                        <p data-nodeid=\"22380\">\n                          然后创建一个 content.js 来表示 content-service\n                          这个模块；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22381\">\n                        <p data-nodeid=\"22382\">\n                          再将原来代码中的 _filterUserinfo 逻辑转到\n                          content-service 中去；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22383\">\n                        <p data-nodeid=\"22384\">最后修改 Controller 代码。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"22385\">如下代码所示：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"> <span class=\"hljs-keyword\">async</span> list() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> contentList = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> ContentModel().getList();\n</div></li><li><div class=\"code-word\">        contentList = <span class=\"hljs-keyword\">await</span> contentService.filterUserinfo(contentList);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.resAPI(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'success'</span>, contentList);\n</div></li><li><div class=\"code-word\">    }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22387\">\n                      注意代码中的第 4 行，从原来调用本类的方法，修改为调用\n                      contentService 的 filterUserinfo。\n                    </p>\n                    <h3 data-nodeid=\"22388\">总结</h3>\n                    <p data-nodeid=\"22389\">\n                      本讲最开始介绍了一些技术知识点，这些是你开始学习本专栏必需巩固的技术，接下来根据实践开发了一个微型的\n                      restful\n                      服务，由于代码的不可维护性以及不可扩展性，我们接下来就应用了\n                      MVC 架构设计模式进行了优化，最后由于 MVC\n                      的缺陷，进而提出了使用 MSVC 来解决 MVC 中 M 和 C\n                      业务界定不清晰的问题。\n                    </p>\n                    <p data-nodeid=\"22390\">\n                      学完本讲后，你就能自己写一个 restful API 了，并且能够掌握\n                      MVC 和 MSVC\n                      的架构原理，同时能够开发出轻量版本的框架。在实践过程中有任何问题或者心得，都可以在留言区留言。\n                    </p>\n                    <p data-nodeid=\"22391\">\n                      讲解完我们自身设计的简版框架后，在下一讲要介绍 Node.js\n                      目前业界使用最广的三个框架，并且进行深入对比分析其优缺点。\n                    </p>\n                    <hr data-nodeid=\"22392\" />\n                    <p data-nodeid=\"22393\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"22674\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image6/M00/12/FA/CioPOWBBrAKAAod-AASyC72ZqWw233.png\"\n                          alt=\"Drawing 2.png\"\n                          data-nodeid=\"22673\"\n                      /></a>\n                    </p>\n                    <p data-nodeid=\"22394\">\n                      <strong data-nodeid=\"22678\">《大前端高薪训练营》</strong>\n                    </p>\n                    <p data-nodeid=\"22395\" class=\"\">\n                      对标阿里 P7 技术需求 + 每月大厂内推，6\n                      个月助你斩获名企高薪 Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"22682\"\n                        >点击链接</a\n                      >，快来领取！\n                    </p>\n            "}