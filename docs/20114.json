{"title":"13 | 参数传递：值、引用及指针之间的区别？","context":"\n                    <p data-nodeid=\"4650\" class=\"\">\n                      上节课我留了一个思考题，关于指向接口的指针的思考。在<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=536#/detail/pc?id=5232\"\n                        data-nodeid=\"4745\"\n                        >“第 6 讲| struct 和\n                        interface：结构体与接口都实现了哪些功能？”</a\n                      >中，你已经知道了如何实现一个接口，并且也知道如果值接收者实现了接口，那么值的指针也就实现了该接口。现在我们再一起来复习一下接口实现的知识，然后再解答关于指向接口的指针的思考题。\n                    </p>\n                    <p data-nodeid=\"4651\">\n                      在下面的代码中，值类型 address 作为接收者实现了接口\n                      fmt.Stringer，那么它的指针类型 *address 也就实现了接口\n                      fmt.Stringer。\n                    </p>\n                    <p data-nodeid=\"4652\">\n                      <em data-nodeid=\"4754\"\n                        ><strong data-nodeid=\"4753\">ch13/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> address <span class=\"hljs-keyword\">struct</span> {\n</div></li><li><div class=\"code-word\">   province <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">   city <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(addr address)</span> <span class=\"hljs-title\">String</span><span class=\"hljs-params\">()</span>  <span class=\"hljs-title\">string</span></span>{\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">\"the addr is %s%s\"</span>,addr.province,addr.city)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4654\">\n                      在下面的代码示例中，我定义了值类型的变量\n                      add，然后把它和它的指针 &amp;add 都作为参数传给函数\n                      printString，发现都是可以的，并且代码可以成功运行。这也证明了当值类型作为接收者实现了某接口时，它的指针类型也同样实现了该接口。\n                    </p>\n                    <p data-nodeid=\"4655\">\n                      <em data-nodeid=\"4762\"\n                        ><strong data-nodeid=\"4761\">ch13/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   add := address{province: <span class=\"hljs-string\">\"北京\"</span>, city: <span class=\"hljs-string\">\"北京\"</span>}\n</div></li><li><div class=\"code-word\">   printString(add)\n</div></li><li><div class=\"code-word\">   printString(&amp;add)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">printString</span><span class=\"hljs-params\">(s fmt.Stringer)</span></span> {\n</div></li><li><div class=\"code-word\">   fmt.Println(s.String())\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4657\">\n                      基于以上结论，我们继续分析，看是否可以定义一个指向接口的指针。如下所示：\n                    </p>\n                    <p data-nodeid=\"4658\">\n                      <em data-nodeid=\"4768\"\n                        ><strong data-nodeid=\"4767\">ch13/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> si fmt.Stringer =address{province: <span class=\"hljs-string\">\"上海\"</span>,city: <span class=\"hljs-string\">\"上海\"</span>}\n</div></li><li><div class=\"code-word\">printString(si)\n</div></li><li><div class=\"code-word\">sip:=&amp;si\n</div></li><li><div class=\"code-word\">printString(sip)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4660\">\n                      在这个示例中，因为类型 address 已经实现了接口\n                      fmt.Stringer，所以它的值可以被赋予变量 si，而且 si\n                      也可以作为参数传递给函数 printString。\n                    </p>\n                    <p data-nodeid=\"4661\">\n                      接着你可以使用 sip:=&amp;si\n                      这样的操作获得一个指向接口的指针，这是没有问题的。不过最终你无法把指向接口的指针\n                      sip 作为参数传递给函数 printString，Go\n                      语言的编译器会提示你如下错误信息：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">./main.go:<span class=\"hljs-number\">42</span>:<span class=\"hljs-number\">13</span>: <span class=\"hljs-function\">cannot use <span class=\"hljs-title\">sip</span> <span class=\"hljs-params\">(type *fmt.Stringer)</span> as type fmt.Stringer in argument to printString:\n</span></div></li><li><div class=\"code-word\">\t*fmt.Stringer is pointer to interface, not interface\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4663\">\n                      于是可以总结为：虽然指向具体类型的指针可以实现一个接口，但是指向接口的指针永远不可能实现该接口。\n                    </p>\n                    <p data-nodeid=\"4664\">\n                      所以你几乎从不需要一个指向接口的指针，把它忘掉吧，不要让它在你的代码中出现。\n                    </p>\n                    <p data-nodeid=\"4665\">\n                      通过这个思考题，相信你也对 Go\n                      语言的值类型、引用类型和指针等概念有了一定的了解，但可能也存在一些迷惑。这节课我将更深入地分析这些概念。\n                    </p>\n                    <h3 data-nodeid=\"4666\">修改参数</h3>\n                    <p data-nodeid=\"4667\">\n                      假设你定义了一个函数，并在函数里对参数进行修改，想让调用者可以通过参数获取你最新修改的值。我仍然以前面课程用到的\n                      person 结构体举例，如下所示：\n                    </p>\n                    <p data-nodeid=\"4668\">\n                      <em data-nodeid=\"4782\"\n                        ><strong data-nodeid=\"4781\">ch13/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   p:=person{name: <span class=\"hljs-string\">\"张三\"</span>,age: <span class=\"hljs-number\">18</span>}\n</div></li><li><div class=\"code-word\">   modifyPerson(p)\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"person name:\"</span>,p.name,<span class=\"hljs-string\">\",age:\"</span>,p.age)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifyPerson</span><span class=\"hljs-params\">(p person)</span></span>  {\n</div></li><li><div class=\"code-word\">   p.name = <span class=\"hljs-string\">\"李四\"</span>\n</div></li><li><div class=\"code-word\">   p.age = <span class=\"hljs-number\">20</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> person <span class=\"hljs-keyword\">struct</span> {\n</div></li><li><div class=\"code-word\">   name <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">   age <span class=\"hljs-keyword\">int</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4670\">\n                      在这个示例中，我期望通过 modifyPerson 函数把参数 p 中的\n                      name 修改为李四，把 age 修改为 20\n                      。代码没有错误，但是运行一下，你会看到如下打印输出：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">person name: 张三 ,age: <span class=\"hljs-number\">18</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4672\">\n                      怎么还是张三与 18\n                      呢？我换成指针参数试试，因为在上节课中我们已经知道可以通过指针修改指向的对象数据，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">modifyPerson(&amp;p)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifyPerson</span><span class=\"hljs-params\">(p *person)</span></span>  {\n</div></li><li><div class=\"code-word\">   p.name = <span class=\"hljs-string\">\"李四\"</span>\n</div></li><li><div class=\"code-word\">   p.age = <span class=\"hljs-number\">20</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4674\">\n                      这些代码用于满足指针参数的修改，把接收的参数改为指针参数，以及在调用\n                      modifyPerson\n                      函数时，通过&amp;取地址符传递一个指针。现在再运行程序，就可以看到期望的输出了，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">person name: 李四 ,age: <span class=\"hljs-number\">20</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"4676\">值类型</h3>\n                    <p data-nodeid=\"4677\">\n                      在上面的小节中，我定义的普通变量 p 是 person 类型的。在 Go\n                      语言中，person 是一个值类型，而 &amp;p 获取的指针是\n                      *person\n                      类型的，即指针类型。那么为什么值类型在参数传递中无法修改呢？这也要从内存讲起。\n                    </p>\n                    <p data-nodeid=\"4678\">\n                      在上节课中，我们已经知道变量的值是存储在内存中的，而内存都有一个编号，称为内存地址。所以要想修改内存中的数据，就要找到这个内存地址。现在，我来对比值类型变量在函数内外的内存地址，如下所示：\n                    </p>\n                    <p data-nodeid=\"4679\">\n                      <em data-nodeid=\"4799\"\n                        ><strong data-nodeid=\"4798\">ch13/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   p:=person{name: <span class=\"hljs-string\">\"张三\"</span>,age: <span class=\"hljs-number\">18</span>}\n</div></li><li><div class=\"code-word\">   fmt.Printf(<span class=\"hljs-string\">\"main函数：p的内存地址为%p\\n\"</span>,&amp;p)\n</div></li><li><div class=\"code-word\">   modifyPerson(p)\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"person name:\"</span>,p.name,<span class=\"hljs-string\">\",age:\"</span>,p.age)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifyPerson</span><span class=\"hljs-params\">(p person)</span></span>  {\n</div></li><li><div class=\"code-word\">   fmt.Printf(<span class=\"hljs-string\">\"modifyPerson函数：p的内存地址为%p\\n\"</span>,&amp;p)\n</div></li><li><div class=\"code-word\">   p.name = <span class=\"hljs-string\">\"李四\"</span>\n</div></li><li><div class=\"code-word\">   p.age = <span class=\"hljs-number\">20</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4681\">\n                      其中，我把原来的示例代码做了更改，分别打印出在 main\n                      函数中变量 p 的内存地址，以及在 modifyPerson 函数中参数 p\n                      的内存地址。运行以上程序，可以看到如下结果：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">main函数：p的内存地址为<span class=\"hljs-number\">0xc0000a6020</span>\n</div></li><li><div class=\"code-word\">modifyPerson函数：p的内存地址为<span class=\"hljs-number\">0xc0000a6040</span>\n</div></li><li><div class=\"code-word\">person name: 张三 ,age: <span class=\"hljs-number\">18</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4683\">\n                      你会发现它们的内存地址都不一样，这就意味着，在\n                      modifyPerson 函数中修改的参数 p 和 main 函数中的变量 p\n                      不是同一个，这也是我们在 modifyPerson 函数中修改参数\n                      p，但是在 main 函数中打印后发现并没有修改的原因。\n                    </p>\n                    <p data-nodeid=\"5363\">\n                      导致这种结果的原因是\n                      <strong data-nodeid=\"5371\"\n                        >Go 语言中的函数传参都是值传递。</strong\n                      >\n                      值传递指的是传递原来数据的一份拷贝，而不是原来的数据本身。\n                    </p>\n                    <p data-nodeid=\"5364\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/33/Cip5yF_q72OAUnC-AACn4vk4lVU354.png\"\n                        alt=\"go语言13金句.png\"\n                        data-nodeid=\"5374\"\n                      />\n                    </p>\n                    <div data-nodeid=\"5365\">\n                      <p style=\"text-align: center\">\n                        （main 函数调用 modifyPerson 函数传参内存示意图）\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"4687\">\n                      以 modifyPerson 函数来说，在调用 modifyPerson 函数传递变量\n                      p 的时候，Go 语言会拷贝一个 p 放在一个新的内存中，这样新的\n                      p 的内存地址就和原来不一样了，但是里面的 name 和 age\n                      是一样的，还是张三和\n                      18。这就是副本的意思，变量里的数据一样，但是存放的内存地址不一样。\n                    </p>\n                    <p data-nodeid=\"4688\">\n                      除了 struct\n                      外，还有浮点型、整型、字符串、布尔、数组，这些都是值类型。\n                    </p>\n                    <h3 data-nodeid=\"4689\">指针类型</h3>\n                    <p data-nodeid=\"4690\">\n                      指针类型的变量保存的值就是数据对应的内存地址，所以在函数参数传递是传值的原则下，拷贝的值也是内存地址。现在对以上示例稍做修改，修改后的代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   p:=person{name: <span class=\"hljs-string\">\"张三\"</span>,age: <span class=\"hljs-number\">18</span>}\n</div></li><li><div class=\"code-word\">   fmt.Printf(<span class=\"hljs-string\">\"main函数：p的内存地址为%p\\n\"</span>,&amp;p)\n</div></li><li><div class=\"code-word\">   modifyPerson(&amp;p)\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"person name:\"</span>,p.name,<span class=\"hljs-string\">\",age:\"</span>,p.age)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifyPerson</span><span class=\"hljs-params\">(p *person)</span></span>  {\n</div></li><li><div class=\"code-word\">   fmt.Printf(<span class=\"hljs-string\">\"modifyPerson函数：p的内存地址为%p\\n\"</span>,p)\n</div></li><li><div class=\"code-word\">   p.name = <span class=\"hljs-string\">\"李四\"</span>\n</div></li><li><div class=\"code-word\">   p.age = <span class=\"hljs-number\">20</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4692\">\n                      运行这个示例，你会发现打印出的内存地址一致，并且数据也被修改成功了，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">main函数：p的内存地址为<span class=\"hljs-number\">0xc0000a6020</span>\n</div></li><li><div class=\"code-word\">modifyPerson函数：p的内存地址为<span class=\"hljs-number\">0xc0000a6020</span>\n</div></li><li><div class=\"code-word\">person name: 李四 ,age: <span class=\"hljs-number\">20</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4694\">\n                      所以指针类型的参数是永远可以修改原数据的，因为在参数传递时，传递的是内存地址。\n                    </p>\n                    <blockquote data-nodeid=\"4695\">\n                      <p data-nodeid=\"4696\">\n                        小提示：值传递的是指针，也是内存地址。通过内存地址可以找到原数据的那块内存，所以修改它也就等于修改了原数据。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"4697\">引用类型</h3>\n                    <p data-nodeid=\"4698\">\n                      下面要介绍的是引用类型，包括 map 和 chan。\n                    </p>\n                    <h4 data-nodeid=\"4699\">map</h4>\n                    <p data-nodeid=\"4700\">\n                      对于上面的例子，假如我不使用自定义的 person\n                      结构体和指针，能不能用 map 达到修改的目的呢？\n                    </p>\n                    <p data-nodeid=\"4701\">下面我来试验一下，如下所示：</p>\n                    <p data-nodeid=\"4702\">\n                      <em data-nodeid=\"4827\"\n                        ><strong data-nodeid=\"4826\">ch13/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   m:=<span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>)\n</div></li><li><div class=\"code-word\">   m[<span class=\"hljs-string\">\"飞雪无情\"</span>] = <span class=\"hljs-number\">18</span>\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"飞雪无情的年龄为\"</span>,m[<span class=\"hljs-string\">\"飞雪无情\"</span>])\n</div></li><li><div class=\"code-word\">   modifyMap(m)\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"飞雪无情的年龄为\"</span>,m[<span class=\"hljs-string\">\"飞雪无情\"</span>])\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifyMap</span><span class=\"hljs-params\">(p <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>)</span></span>  {\n</div></li><li><div class=\"code-word\">   p[<span class=\"hljs-string\">\"飞雪无情\"</span>] =<span class=\"hljs-number\">20</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4704\">\n                      我定义了一个 map[string]int 类型的变量 m，存储一个 Key\n                      为飞雪无情、Value 为 18 的键值对，然后把这个变量 m\n                      传递给函数 modifyMap。modifyMap\n                      函数所做的事情就是把对应的值修改为\n                      20。现在运行这段代码，通过打印输出来看是否修改成功，结果如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">飞雪无情的年龄为 <span class=\"hljs-number\">18</span>\n</div></li><li><div class=\"code-word\">飞雪无情的年龄为 <span class=\"hljs-number\">20</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4706\">\n                      确实修改成功了。你是不是有不少疑惑？没有使用指针，只是用了\n                      map 类型的参数，按照 Go 语言值传递的原则，modifyMap\n                      函数中的 map 是一个副本，怎么会修改成功呢？\n                    </p>\n                    <p data-nodeid=\"4707\">\n                      要想解答这个问题，就要从 make 这个 Go\n                      语言内建的函数说起。在 Go 语言中，任何创建 map\n                      的代码（不管是字面量还是 make 函数）最终调用的都是\n                      runtime.makemap 函数。\n                    </p>\n                    <blockquote data-nodeid=\"4708\">\n                      <p data-nodeid=\"4709\">\n                        小提示：用字面量或者 make 函数的方式创建 map，并转换成\n                        makemap 函数的调用，这个转换是 Go\n                        语言编译器自动帮我们做的。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"4710\">\n                      从下面的代码可以看到，makemap 函数返回的是一个 *hmap\n                      类型，也就是说返回的是一个指针，所以我们创建的 map\n                      其实就是一个 *hmap。\n                    </p>\n                    <p data-nodeid=\"4711\">\n                      <em data-nodeid=\"4845\"\n                        ><strong data-nodeid=\"4844\"\n                          >src/runtime/map.go</strong\n                        ></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// makemap implements Go map creation for make(map[k]v, hint).</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">makemap</span><span class=\"hljs-params\">(t *maptype, hint <span class=\"hljs-keyword\">int</span>, h *hmap)</span> *<span class=\"hljs-title\">hmap</span></span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">//省略无关代码</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4713\">\n                      因为 Go 语言的 map 类型本质上就是\n                      *hmap，所以根据替换的原则，我刚刚定义的 modifyMap(p map)\n                      函数其实就是 modifyMap(p\n                      *hmap)。这是不是和上一小节讲的指针类型的参数调用一样了？这也是通过\n                      map\n                      类型的参数可以修改原始数据的原因，因为它本质上就是个指针。\n                    </p>\n                    <p data-nodeid=\"4714\">\n                      为了进一步验证创建的 map\n                      就是一个指针，我修改上述示例，打印 map\n                      类型的变量和参数对应的内存地址，如下面的代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">//省略其他没有修改的代码</span>\n</div></li><li><div class=\"code-word\">  fmt.Printf(<span class=\"hljs-string\">\"main函数：m的内存地址为%p\\n\"</span>,m)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modifyMap</span><span class=\"hljs-params\">(p <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>)</span></span>  {\n</div></li><li><div class=\"code-word\">   fmt.Printf(<span class=\"hljs-string\">\"modifyMap函数：p的内存地址为%p\\n\"</span>,p)\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">//省略其他没有修改的代码</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4716\">\n                      例子中的两句打印代码是新增的，其他代码没有修改，这里就不再贴出来了。运行修改后的程序，你可以看到如下输出：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">飞雪无情的年龄为 <span class=\"hljs-number\">18</span>\n</div></li><li><div class=\"code-word\">main函数：m的内存地址为<span class=\"hljs-number\">0xc000060180</span>\n</div></li><li><div class=\"code-word\">modifyMap函数：p的内存地址为<span class=\"hljs-number\">0xc000060180</span>\n</div></li><li><div class=\"code-word\">飞雪无情的年龄为 <span class=\"hljs-number\">20</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4718\">\n                      从输出结果可以看到，它们的内存地址一模一样，所以才可以修改原始数据，得到年龄是\n                      20 的结果。而且我在打印指针的时候，直接使用的是变量 m 和\n                      p，并没有用到取地址符\n                      &amp;，这是因为它们本来就是指针，所以就没有必要再使用\n                      &amp; 取地址了。\n                    </p>\n                    <p data-nodeid=\"4719\">\n                      所以在这里，Go 语言通过 make\n                      函数或字面量的包装为我们省去了指针的操作，让我们可以更容易地使用\n                      map。其实就是语法糖，这是编程界的老传统了。\n                    </p>\n                    <blockquote data-nodeid=\"4720\">\n                      <p data-nodeid=\"4721\">\n                        注意：这里的 map\n                        可以理解为引用类型，但是它本质上是个指针，只是可以叫作引用类型而已。在参数传递时，它还是值传递，并不是其他编程语言中所谓的引用传递。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"4722\">chan</h4>\n                    <p data-nodeid=\"4723\">\n                      还记得我们在 Go 语言并发模块中学的 channel\n                      吗？它也可以理解为引用类型，而它本质上也是个指针。\n                    </p>\n                    <p data-nodeid=\"4724\">\n                      通过下面的源代码可以看到，所创建的 chan 其实是个\n                      *hchan，所以它在参数传递中也和 map 一样。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">makechan</span><span class=\"hljs-params\">(t *chantype, size <span class=\"hljs-keyword\">int64</span>)</span> *<span class=\"hljs-title\">hchan</span></span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//省略无关代码</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4726\">\n                      <strong data-nodeid=\"4869\"\n                        >严格来说，Go 语言没有引用类型</strong\n                      >，但是我们可以把 map、chan\n                      称为引用类型，这样便于理解。除了 map、chan 之外，Go\n                      语言中的函数、接口、slice 切片都可以称为引用类型。\n                    </p>\n                    <blockquote data-nodeid=\"4727\">\n                      <p data-nodeid=\"4728\">\n                        小提示：指针类型也可以理解为是一种引用类型。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"4729\">类型的零值</h3>\n                    <p data-nodeid=\"4730\">\n                      在 Go 语言中，定义变量要么通过声明、要么通过 make 和 new\n                      函数，不一样的是 make 和 new\n                      函数属于显式声明并初始化。如果我们声明的变量没有显式声明初始化，那么该变量的默认值就是对应类型的零值。\n                    </p>\n                    <p data-nodeid=\"4731\">\n                      从下面的表格可以看到，可以称为引用类型的零值都是 nil。\n                    </p>\n                    <p data-nodeid=\"4732\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/80/61/Ciqc1F_QqlyAItQJAABQMWd6pSU650.png\"\n                        alt=\"112.png\"\n                        data-nodeid=\"4876\"\n                      />\n                    </p>\n                    <div data-nodeid=\"4733\">\n                      <p style=\"text-align: center\">(各种类型的零值)</p>\n                    </div>\n                    <h3 data-nodeid=\"4734\">总结</h3>\n                    <p data-nodeid=\"4735\">\n                      在 Go 语言中，<strong data-nodeid=\"4883\"\n                        >函数的参数传递只有值传递</strong\n                      >，而且传递的实参都是原始数据的一份拷贝。如果拷贝的内容是值类型的，那么在函数中就无法修改原始数据；如果拷贝的内容是指针（或者可以理解为引用类型\n                      map、chan 等），那么就可以在函数中修改原始数据。\n                    </p>\n                    <p data-nodeid=\"4736\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/80/6C/CgqCHl_QqryAEqYQAAVkYmbnDIM013.png\"\n                        alt=\"Lark20201209-184447.png\"\n                        data-nodeid=\"4886\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4737\">\n                      所以我们在创建一个函数的时候，要根据自己的真实需求决定参数的类型，以便更好地服务于我们的业务。\n                    </p>\n                    <p data-nodeid=\"4738\">\n                      这节课中，我讲解 chan\n                      的时候没有举例，你自己可以自定义一个有 chan\n                      参数的函数，作为练习题。\n                    </p>\n                    <p data-nodeid=\"4739\" class=\"\">\n                      下节课我将介绍“内存分配：new 还是\n                      make？什么情况下该用谁？”记得来听课！\n                    </p>\n            "}