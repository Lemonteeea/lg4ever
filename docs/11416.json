{"title":"14 | DP：我是怎么治好“DP&nbsp;头痛症”的？","context":"\n                    <p data-nodeid=\"11761\" class=\"\">\n                      动态规划（Dynamic\n                      Programming，DP）是求解决策过程最优化的过程，通过把原问题分解为相对简单的子问题的方式求解复杂问题，在数学、管理科学、计算机科学、经济学和生物信息学等领域被广泛使用。\n                    </p>\n                    <p data-nodeid=\"11762\">\n                      它的基本思想非常简单，若要求解一个给定问题，我们需要求解其不同部分（即<strong\n                        data-nodeid=\"12468\"\n                        >子问题</strong\n                      >），再根据<strong data-nodeid=\"12469\"\n                        >子问题的解得出原问题的解</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"11763\">\n                      通常许多子问题非常相似，为了减少计算量，<strong\n                        data-nodeid=\"12479\"\n                        >动态规划法试图每个子问题仅解决一次</strong\n                      >，一旦算出某个给定<strong data-nodeid=\"12480\"\n                        >子问题的解，则将其记忆化存储</strong\n                      >，以便下次求解同一个子问题解时可以直接查表。因此具有天然剪枝的功能。\n                    </p>\n                    <h3 data-nodeid=\"11764\">DP 题目的特点</h3>\n                    <p data-nodeid=\"11765\">\n                      首先我们一起来看一下，什么样的题目可能需要使用动态规划。一般而言（并不绝对），如果题目如出现以下特点，你就可以考虑（有一定概率）使用动态规划。\n                    </p>\n                    <p data-nodeid=\"11766\">\n                      <strong data-nodeid=\"12486\">特点一：计数</strong>\n                    </p>\n                    <ul data-nodeid=\"11767\">\n                      <li data-nodeid=\"11768\">\n                        <p data-nodeid=\"11769\">\n                          题目问：有<strong data-nodeid=\"12496\">多少种</strong\n                          >方法？有<strong data-nodeid=\"12497\">多少种</strong\n                          >走法？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11770\">\n                        <p data-nodeid=\"11771\">\n                          关键字：<strong data-nodeid=\"12503\">多少</strong>！\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11772\">\n                      <strong data-nodeid=\"12507\">特点二：最大值/最小值</strong>\n                    </p>\n                    <ul data-nodeid=\"11773\">\n                      <li data-nodeid=\"11774\">\n                        <p data-nodeid=\"11775\">\n                          题目问：某种选择的最大值是什么？完成任务的最小时间是什么？数组的最长子序列是什么？达到目标最少操作多少次等。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11776\">\n                        <p data-nodeid=\"11777\">\n                          关键字：<strong data-nodeid=\"12513\">最！</strong>\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11778\">\n                      <strong data-nodeid=\"12517\">特点三：可能性</strong>\n                    </p>\n                    <ul data-nodeid=\"11779\">\n                      <li data-nodeid=\"11780\">\n                        <p data-nodeid=\"11781\">\n                          题目问：是否有可能出现某种情况？是否有可能在游戏中胜出？是否可以取出\n                          k 个数满足条件？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11782\">\n                        <p data-nodeid=\"11783\">\n                          关键字：<strong data-nodeid=\"12524\">是否</strong>！\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11784\">\n                      通常而言，看到这三类题目，就可以尝试往 DP 解法上靠。\n                    </p>\n                    <h3 data-nodeid=\"11785\">DP 的 6 步破题法</h3>\n                    <p data-nodeid=\"11786\">\n                      找到题目的特点，确定可以使用 DP\n                      之后，接下来就可以准备逐步破题了。\n                    </p>\n                    <p data-nodeid=\"11787\">\n                      下面我们以一道题目为例，详细介绍破解 DP\n                      问题的思考过程与解题步骤。其实这道题不难，我相信你们都见过，不过我还是希望你能跟着我的思维重新再思考一遍。\n                    </p>\n                    <p data-nodeid=\"11788\">\n                      【<strong data-nodeid=\"12534\">题目</strong\n                      >】给定不同面额的硬币 coins 和一个总金额\n                      amount，需要你编写一个函数计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，则返回\n                      -1。你可以认为每种硬币的数量是无限的。\n                    </p>\n                    <p data-nodeid=\"11789\">\n                      输入：coins = [1, 2, 5]，amount = 11\n                    </p>\n                    <p data-nodeid=\"11790\">输出：3</p>\n                    <p data-nodeid=\"11791\">\n                      解释：11 元可以拆分为 5 + 5 + 1，这是最少的硬币数目。\n                    </p>\n                    <p data-nodeid=\"11792\">\n                      【<strong data-nodeid=\"12555\">分析</strong\n                      >】首先我们看到关键字“<strong data-nodeid=\"12556\"\n                        >最少</strong\n                      >”，因此可以尝试往 DP 上面想。在 DP\n                      问题上，很多人都存在一个思维误区，这里我们称为<strong\n                        data-nodeid=\"12557\"\n                        >误区 1</strong\n                      >：\n                    </p>\n                    <blockquote data-nodeid=\"11793\">\n                      <p data-nodeid=\"11794\">\n                        利用 DP 求解问题时，一开始就去想第一步具体做什么！\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11795\">\n                      你之所以没有思路，往往是因为采用了一种顺应题意的方法去求解问题。比如题目问：\n                    </p>\n                    <blockquote data-nodeid=\"11796\">\n                      <p data-nodeid=\"11797\">\n                        如何求“最少步数”，你就去想“从头开始怎么走”；<br />\n                        如何选择可以“达到最大收益”，你就真的开始去想“怎么选择”。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11798\">\n                      这恰恰是 DP\n                      题目给你下的一个“套”，这样思考很容易带你陷入暴力求解的方法，找不到优化的思路。因此，<strong\n                        data-nodeid=\"12568\"\n                        >千万不要从第一步开始思考</strong\n                      >。就这道题而言，就是不要去想，我的第一个硬币怎么选！\n                    </p>\n                    <p data-nodeid=\"11799\">\n                      那么我们应该从哪里着手呢？答案是：<strong\n                        data-nodeid=\"12574\"\n                        >最后一步</strong\n                      >！\n                    </p>\n                    <h4 data-nodeid=\"11800\">1. 最后一步</h4>\n                    <p data-nodeid=\"11801\">\n                      以这道题为例，最后一步指的是：兑换硬币的时候，假设每一步操作总是选择一个硬币，那么我们看一下最后一步如何达到\n                      amount？\n                    </p>\n                    <p data-nodeid=\"11802\">以给定的输入为例：</p>\n                    <blockquote data-nodeid=\"11803\">\n                      <p data-nodeid=\"11804\">coins = [1, 2, 5], amount = 11</p>\n                    </blockquote>\n                    <p data-nodeid=\"11805\">\n                      最后一步可以通过以下 3 个选项得到：\n                    </p>\n                    <ul data-nodeid=\"11806\">\n                      <li data-nodeid=\"11807\">\n                        <p data-nodeid=\"11808\">\n                          已经用硬币兑换好了 10 元，再添加 1 个 1 元的硬币，凑成\n                          11 元；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11809\">\n                        <p data-nodeid=\"11810\">\n                          已经用硬币兑换好了 9 元，再添加 1 个 2 元的硬币，凑成\n                          11 元；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11811\">\n                        <p data-nodeid=\"11812\">\n                          已经用硬币兑换好了 6 元，再添加 1 个 5 元的硬币，凑成\n                          11 元。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11813\">\n                      接下来，应该立即将以上 3 个选项中的<strong\n                        data-nodeid=\"12598\"\n                        >未知项</strong\n                      >展开成<strong data-nodeid=\"12599\">子问题</strong>！\n                    </p>\n                    <p data-nodeid=\"11814\">\n                      注意：如果你找的最后一步，待处理的问题规模仍然没有减小，那么说明你只找到了<strong\n                        data-nodeid=\"12605\"\n                        >原始问题的等价问题</strong\n                      >，并没有找到真正的最后一步。\n                    </p>\n                    <h4 data-nodeid=\"11815\">2. 子问题</h4>\n                    <p data-nodeid=\"11816\">\n                      拿到 3 个选项之后，你可能会想：[10元，9元，6元]\n                      是如何得到？到此时，一定<strong data-nodeid=\"12618\"\n                        >不要尝试递归</strong\n                      >地去求解 10 元、9 元、6 元，正确的做法是将它们表达为 3\n                      个子问题：\n                    </p>\n                    <ul data-nodeid=\"11817\">\n                      <li data-nodeid=\"11818\">\n                        <p data-nodeid=\"11819\">\n                          如何利用最少的硬币组成 10 元？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11820\">\n                        <p data-nodeid=\"11821\">如何利用最少的硬币组成 9 元？</p>\n                      </li>\n                      <li data-nodeid=\"11822\">\n                        <p data-nodeid=\"11823\">如何利用最少的硬币组成 6 元？</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11824\">\n                      我们原来的问题是，如何用最少的硬币组成 11 元。\n                    </p>\n                    <p data-nodeid=\"11825\">\n                      不难发现，如果用 f(x) 表示如何利用最少的硬币组成 x\n                      元，就可以用 f(x) 将原问题与 3\n                      个子问题统一起来，得到如下内容：\n                    </p>\n                    <ul data-nodeid=\"11826\">\n                      <li data-nodeid=\"11827\">\n                        <p data-nodeid=\"11828\">原问题表达为 f(11)；</p>\n                      </li>\n                      <li data-nodeid=\"11829\">\n                        <p data-nodeid=\"11830\">\n                          3 个子问题分别表达为 f(10)、f(9)、f(6)。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11831\">\n                      接下来我们再利用 f(x) 表示<strong data-nodeid=\"12631\"\n                        >最后一步</strong\n                      >的 3 个选项：\n                    </p>\n                    <ul data-nodeid=\"11832\">\n                      <li data-nodeid=\"11833\">\n                        <p data-nodeid=\"11834\">f(10) + 1 个 1 元得到 f(11)；</p>\n                      </li>\n                      <li data-nodeid=\"11835\">\n                        <p data-nodeid=\"11836\">f(9) + 1 个 2 元得到 f(11)；</p>\n                      </li>\n                      <li data-nodeid=\"11837\">\n                        <p data-nodeid=\"11838\">f(6) + 1 个 5 元得到 f(11)。</p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"11839\">3. 递推关系</h4>\n                    <p data-nodeid=\"11840\">\n                      递推关系，一般需要通过<strong data-nodeid=\"12643\"\n                        >两次替换</strong\n                      >得到。\n                    </p>\n                    <p data-nodeid=\"11841\">\n                      最后一步，可以通过 3\n                      个选项得到。哪一个选项才是最少的步骤呢？这个时候，我们可以采用一个\n                      min 函数来从这 3 个选项中得到最小值。\n                    </p>\n                    <blockquote data-nodeid=\"11842\">\n                      <p data-nodeid=\"11843\">\n                        f(11) = min(f(11-1), f(11-2), f(11-5)) + 1\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11844\">\n                      接下来，<strong data-nodeid=\"12651\">第一次替换</strong\n                      >：只需要将 11\n                      换成一个更普通的值，就可以得到更加通用的递推关系：\n                    </p>\n                    <blockquote data-nodeid=\"11845\">\n                      <p data-nodeid=\"11846\">\n                        f(x) = min(f(x-1), f(x-2), f(x-5)) + 1\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11847\">\n                      当然，这里 [1, 2, 5] 我们依然使用的是输入示例，进行<strong\n                        data-nodeid=\"12662\"\n                        >第二次</strong\n                      >替换：\n                    </p>\n                    <blockquote data-nodeid=\"11848\">\n                      <p data-nodeid=\"11849\">\n                        f(x) = min(f(x-y), y in coins) + 1\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11850\">写成伪代码就是：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">f(x) = inf\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> y in coins:\n</div></li><li><div class=\"code-word\">    f(x) = min(f(x), f(x-y) + <span class=\"hljs-number\">1</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"11852\">4. f(x) 的表达</h4>\n                    <p data-nodeid=\"11853\">\n                      接下来我们要做的就是在写代码的时候，如何表达 f(x)？\n                    </p>\n                    <p data-nodeid=\"11854\">\n                      这里有一个<strong data-nodeid=\"12678\">小窍门</strong>。\n                    </p>\n                    <blockquote data-nodeid=\"11855\">\n                      <p data-nodeid=\"11856\">\n                        直接把 f(x) 当成一个哈希函数。那么 f 就是一个 HashMap。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11857\">\n                      对于大部分 DP 题目而言，如果用 HashMap 替换 f\n                      函数都是可以工作的。如果遇到 f(x, y) 类似的函数，就需要用\n                      Map&lt;Integer/<em data-nodeid=\"12693\">x</em>/,\n                      Map&lt;Integer/<em data-nodeid=\"12694\">y</em>/,\n                      Integer&gt;&gt; 这种嵌套的方式来表达 f(x, y)。\n                    </p>\n                    <p data-nodeid=\"11858\">\n                      <strong data-nodeid=\"12699\"\n                        >当然，有时候，用数组作为哈希函数是一种更加简单高效的做法</strong\n                      >。具体来说：\n                    </p>\n                    <ul data-nodeid=\"11859\">\n                      <li data-nodeid=\"11860\">\n                        <p data-nodeid=\"11861\">\n                          如果要表达的是一维的信息，就用一维数组 dp[] 表示\n                          f(x)；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11862\">\n                        <p data-nodeid=\"11863\">\n                          如果要表达的是二维的信息，就用二维数组 dp[][] 表示\n                          f(x, y)\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11864\">\n                      这就是为什么很多 DP\n                      代码里面可以看到很多dp数组的原因。但是，现在你<strong\n                        data-nodeid=\"12720\"\n                        >要知道</strong\n                      >：\n                    </p>\n                    <blockquote data-nodeid=\"11865\">\n                      <p data-nodeid=\"11866\">\n                        用 dp[] 数组并不是求解 DP 问题的核心。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11867\">\n                      <strong data-nodeid=\"12729\"\n                        >因为，数组只是信息表达的一种方式。而题目总是千万变化的，有时候可能还需要使用其他数据结构来表达\n                        f(x)、f(x, y) 这些信息</strong\n                      >。比如：\n                    </p>\n                    <blockquote data-nodeid=\"11868\">\n                      <p data-nodeid=\"11869\">\n                        f(x)、f(x, y) 里面的 x, y\n                        都不是整数怎么办？是字符串怎么办？是结构体怎么办？\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11870\">\n                      当然，就这个题而言，可以发现有两个特点：\n                    </p>\n                    <p data-nodeid=\"11871\">1）f(x) 中的 x 是一个整数；</p>\n                    <p data-nodeid=\"11872\">2）f(x) 要表达的信息是一维信息。</p>\n                    <p data-nodeid=\"11873\">\n                      那么，针对这道题而言言，我们可以使用一维数组，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[amount + <span class=\"hljs-number\">1</span>];\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11875\">\n                      数组下标 i 表示 x，而数组元素的值 dp[i] 就表示 f(x)。\n                    </p>\n                    <p data-nodeid=\"11876\">那么递推关系可以表示如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">dp[x] = inf;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> y in coins:\n</div></li><li><div class=\"code-word\">  dp[x] = min(dp[x], dp[x-y] + <span class=\"hljs-number\">1</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"11878\">5. 初始条件与边界</h4>\n                    <p data-nodeid=\"11879\">\n                      那么，如何得到初始条件与边界呢？这里我分享一个<strong\n                        data-nodeid=\"12753\"\n                        >小技巧：</strong\n                      >\n                      你从问题的起始输入开始调用这个递归函数，如果递归函数出现“<strong\n                        data-nodeid=\"12754\"\n                        >不正确/无法计算/越界</strong\n                      >”的情况，那么这就是你需要处理的初始条件和边界。\n                    </p>\n                    <p data-nodeid=\"11880\">\n                      比如，如果我们去调用以下两个递归函数。\n                    </p>\n                    <ul data-nodeid=\"11881\">\n                      <li data-nodeid=\"11882\">\n                        <p data-nodeid=\"11883\">\n                          coinChange(0)：可以发现给定 0 元的时候，dp[amount-x]\n                          会导致数组越界，因此需要<strong data-nodeid=\"12769\"\n                            >特别处理</strong\n                          >dp[0]。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11884\">\n                        <p data-nodeid=\"11885\">\n                          coinChange(-1) 或者 coinChange(-2)\n                          的调用也是会遇到数组越界，说明这些情况都需要做<strong\n                            data-nodeid=\"12775\"\n                            >特别处理</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11886\">\n                      <strong data-nodeid=\"12784\"\n                        >那么什么情况作为初始条件</strong\n                      >？<strong data-nodeid=\"12785\">什么情况作为边界</strong\n                      >？答案就是：\n                    </p>\n                    <ul data-nodeid=\"11887\">\n                      <li data-nodeid=\"11888\">\n                        <p data-nodeid=\"11889\">\n                          如果结果本身的存放不越界，只是计算过程中出现越界，那么应该作为初始条件。比如\n                          dp[0]、dp[1]；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11890\">\n                        <p data-nodeid=\"11891\">\n                          如果结果本身的存放是越界的，那么需要作为边界来处理，比如\n                          dp[-1]。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11892\">\n                      当然，就这道题而言，初始条件是 dp[0] = 0，因为当只有 0\n                      元钱需要兑换的时候，应该是只需 0 个硬币。\n                    </p>\n                    <h4 data-nodeid=\"11893\">6. 计算顺序</h4>\n                    <p data-nodeid=\"11894\">\n                      说来有趣，计算顺序最简单，我们只需要在初始条件的基础上使用<strong\n                        data-nodeid=\"12813\"\n                        >正向推导多走两步</strong\n                      >可以了。比如：\n                    </p>\n                    <blockquote data-nodeid=\"11895\">\n                      <p data-nodeid=\"11896\">初始条件：dp[0] = 0</p>\n                    </blockquote>\n                    <p data-nodeid=\"11897\">\n                      那么接下来的示例中的输入：coins[] = [1, 2,\n                      5]。我们已经知道 dp[0] = 0，再加上可以做的 3\n                      个选项，那么可以得到：\n                    </p>\n                    <p data-nodeid=\"11898\">dp[1] = dp[0] + 1 元硬币 = 1</p>\n                    <p data-nodeid=\"11899\">dp[2] = dp[0] + 2 元硬币 = 1</p>\n                    <p data-nodeid=\"11900\">dp[5] = dp[0] + 5 元硬币 = 1</p>\n                    <p data-nodeid=\"11901\">\n                      到这里，递推关系好像还没有用到。那什么时候用呢？我们来看下面两种情况：\n                    </p>\n                    <ul data-nodeid=\"11902\">\n                      <li data-nodeid=\"11903\">\n                        <p data-nodeid=\"11904\">\n                          如下图所示，第一种情况，dp[5] 可以直接通过 dp[0]\n                          得到，值为 1。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11905\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/60/CioPOWB2zBuAOaffAAB34BpuEyM913.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"12870\"\n                      />\n                    </p>\n                    <ul data-nodeid=\"11906\">\n                      <li data-nodeid=\"11907\">\n                        <p data-nodeid=\"11908\">\n                          如下图所示，第二种，dp[5] 可以通过 dp[3] 得到，值为\n                          3。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11909\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/60/CioPOWB2zCaAHlLsAAB8MadAE-U569.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"12882\"\n                      />\n                    </p>\n                    <p data-nodeid=\"11910\">\n                      此时可以发现，判断具体取哪个值时，就需要用到前面的递推关系了。\n                    </p>\n                    <blockquote data-nodeid=\"11911\">\n                      <p data-nodeid=\"11912\">\n                        f(x) = min(f(x-1), f(x-2), f(x-5)) + 1\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11913\">我们只需要取较小的值就可以了。</p>\n                    <p data-nodeid=\"11914\">\n                      【<strong data-nodeid=\"12891\">代码</strong\n                      >】到这里，你应该可以写出 DP 的代码了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span>\n</span></div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">coinChange</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] coins, <span class=\"hljs-keyword\">int</span> amount)</span>\n</span></div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 没有解的时候，设置一个较大的值</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> INF = Integer.MAX_VALUE / <span class=\"hljs-number\">4</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[amount + <span class=\"hljs-number\">1</span>];\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 一开始给所有的数设置为不可解。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= amount; i++) {\n</div></li><li><div class=\"code-word\">      dp[i] = INF;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// DP的初始条件</span>\n</div></li><li><div class=\"code-word\">    dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; amount; i++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> y : coins) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 注意边界的处理，不要越界</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (y &lt;= amount &amp;&amp; i + y &lt; amount + <span class=\"hljs-number\">1</span> &amp;&amp; i + y &gt;= <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 正向推导时的递推公式!</span>\n</div></li><li><div class=\"code-word\">          dp[i + y] = Math.min(dp[i + y], dp[i] + <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> dp[amount] &gt;= INF ? -<span class=\"hljs-number\">1</span> : dp[amount];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"11916\">\n                      <p data-nodeid=\"11917\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/322.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"12895\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/322.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"12899\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/322.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"12903\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11918\">\n                      <strong data-nodeid=\"12910\">复杂度分析</strong\n                      >：一共两层循环，外层需要循环 O(Amount) 次，内层需要循环\n                      O(N) 次（如果有 N 种硬币）。那么时间复杂度为 O(Amount *\n                      N)。由于申请了数组，那么空间复杂度为 O(Amount)。\n                    </p>\n                    <p data-nodeid=\"11919\">\n                      这里我利用一个例题，深入地讲解了 DP\n                      的破题法的几个步骤。后面我将利用这个方法带你依次切开每一道难啃的\n                      DP 题。\n                    </p>\n                    <p data-nodeid=\"11920\">\n                      这里，我再分享一个小技巧，需要注意：\n                    </p>\n                    <blockquote data-nodeid=\"11921\">\n                      <p data-nodeid=\"11922\">\n                        当求最小值的时候，我们往往将不可能的情况设置为\n                        Integer.MAX_VALUE / 4。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11923\">\n                      因为如果设置为\n                      Integer.MAX_VALUE，那么一旦涉及加法，立马就溢出了，导致程序出错。所以我们尽量设置一个足够大的数，避免进行加法的时候溢出。\n                    </p>\n                    <p data-nodeid=\"11924\">\n                      这里我已经将 DP 的思路整理成如下图中展示的 6\n                      步。尽管我现在处理 DP\n                      问题已经很熟练了，但有时候，碰到一些特别难处理的 DP\n                      题目，依然会回到这 6 步分析法，一步一步踏踏实实地分析。\n                    </p>\n                    <p data-nodeid=\"11925\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/37/58/Cgp9HWB2zDKAQUFhAADATI1rcXE556.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"12922\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"11926\">DP 的分类</h3>\n                    <p data-nodeid=\"11927\">\n                      经过前面的讨论，我们学会了 DP 的通用解法，不过 DP\n                      实际上还可以分成很多种类别。比如：\n                    </p>\n                    <ul data-nodeid=\"11928\">\n                      <li data-nodeid=\"11929\">\n                        <p data-nodeid=\"11930\">线性 DP</p>\n                      </li>\n                      <li data-nodeid=\"11931\">\n                        <p data-nodeid=\"11932\">区间 DP</p>\n                      </li>\n                      <li data-nodeid=\"11933\">\n                        <p data-nodeid=\"11934\">背包 DP</p>\n                      </li>\n                      <li data-nodeid=\"11935\">\n                        <p data-nodeid=\"11936\">树形 DP</p>\n                      </li>\n                      <li data-nodeid=\"11937\">\n                        <p data-nodeid=\"11938\">状态压缩 DP</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11939\">\n                      在练习和准备面试的时候，多看看这些题型，对面试会很有帮助。下面我们一个一个介绍。\n                    </p>\n                    <h4 data-nodeid=\"11940\">线性 DP</h4>\n                    <p data-nodeid=\"33283\" class=\"te-preview-highlight\">\n                      我们在读书的时候，遇到的很多 DP\n                      题目，比如最长公共子序列、最长递增子序列等，这类题目实际上都是线性\n                      DP。不过今天我们不再介绍这类经典的 DP\n                      题目，而是介绍一些在面试中经常出现的<strong\n                        data-nodeid=\"33289\"\n                        >线性 DP</strong\n                      >\n                      题目。\n                    </p>\n\n                    <h4 data-nodeid=\"11942\">例 1：打劫</h4>\n                    <p data-nodeid=\"11943\">\n                      【<strong data-nodeid=\"12944\">题目</strong\n                      >】你是一个专业的小偷，计划去沿街的住户家里偷盗。每间房内都藏有一定的现金，影响你偷盗的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。给定一个代表每个房屋存放金额的非负整数数组，要求你计算不触动警报装置的情况下\n                      ，一夜之内能够偷窃到的最高金额。\n                    </p>\n                    <p data-nodeid=\"11944\">输入：nums = [1,2,3,1]</p>\n                    <p data-nodeid=\"11945\">输出：4</p>\n                    <p data-nodeid=\"11946\">\n                      解释：偷窃 nums[0] 号房屋 （金额 = 1），然后偷窃\n                      nums[2]号房屋（金额 = 3）。偷窃到的最高金额 = 1 + 3 = 4 。\n                    </p>\n                    <p data-nodeid=\"11947\">\n                      【<strong data-nodeid=\"12964\">分析</strong\n                      >】接下来，我们就照着 DP 的 6\n                      步分析法（千万别顺着题意去想要偷那些房间！！）。我们把思维放慢，一步一步分析。\n                    </p>\n                    <h4 data-nodeid=\"11948\">1. 最后一步</h4>\n                    <p data-nodeid=\"11949\">\n                      就这道题而言，最后一步就是处理第 N-1\n                      个房间（我们假设一共有 N 个房间，并且从 0 开始）。\n                    </p>\n                    <p data-nodeid=\"11950\">那么第 N-1 个房间，有两个选项。</p>\n                    <ul data-nodeid=\"11951\">\n                      <li data-nodeid=\"11952\">\n                        <p data-nodeid=\"11953\">\n                          偷：如果要偷第 N-1 个房间，那么收益就是处理前 N-3\n                          个房间之后，再偷第 N-1 房间。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11954\">\n                        <p data-nodeid=\"11955\">\n                          不偷：那么只需要处理到第 N-2\n                          个房间，那么收益就是处理前 N-2 个房间之后的收益。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"11956\">2. 子问题</h4>\n                    <p data-nodeid=\"11957\">\n                      最后一步的 2\n                      个选项中都有未知项，我们可以将它们展开为子问题：\n                    </p>\n                    <ul data-nodeid=\"11958\">\n                      <li data-nodeid=\"11959\">\n                        <p data-nodeid=\"11960\">\n                          处理完 [0, ..., N-3] 之后，最大收益是多少？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11961\">\n                        <p data-nodeid=\"11962\">\n                          处理完 [0, ..., N-2] 之后，最大收益是多少？\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11963\">下面我们可以统一问题的表示：</p>\n                    <blockquote data-nodeid=\"11964\">\n                      <p data-nodeid=\"11965\">\n                        f(x) 表示处理完 [0, ..., x] 这些房间之后的<strong\n                          data-nodeid=\"12996\"\n                          >最高收益</strong\n                        >。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"11966\">3. 递推关系</h4>\n                    <p data-nodeid=\"11967\">\n                      统一问题的表示之后，首先来表示一下最后一步：\n                    </p>\n                    <blockquote data-nodeid=\"11968\">\n                      <p data-nodeid=\"11969\">\n                        f(N-1) = max(f(N-2), f(N-3) + nums[N-1])\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"11970\">\n                      这里需要采用替换法，将 N-1 换为 x。可以得到：\n                    </p>\n                    <blockquote data-nodeid=\"11971\">\n                      <p data-nodeid=\"11972\">\n                        f(x) = max(f(x-1), f(x-2) + nums[x])\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"11973\">4. f(x) 的表达</h4>\n                    <p data-nodeid=\"11974\">\n                      这里 x 表示的是原数组 [0, ..., x] 这个区间范围。由于所有的\n                      x 表示的区间都是从 0\n                      开始的，所以这个区间的起始点信息没有必要保留，因此只需要保存区间端点\n                      x。我们发现：\n                    </p>\n                    <ul data-nodeid=\"11975\">\n                      <li data-nodeid=\"11976\">\n                        <p data-nodeid=\"11977\">x 是个整数；</p>\n                      </li>\n                      <li data-nodeid=\"11978\">\n                        <p data-nodeid=\"11979\">\n                          x 的范围刚好是 nums 数组的长度。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11980\">\n                      尽管 f(x)\n                      可以用哈希来表示，但如果用数组来表达这个函数映射关系，更加直接和高效。因此，我们也用\n                      dp[] 数组来表达 f(x)。并且利用元素 i 表示 x，可以让 i 与\n                      nums 数组的下标对应起来。\n                    </p>\n                    <h4 data-nodeid=\"11981\">5. 初始条件与边界</h4>\n                    <p data-nodeid=\"11982\">\n                      <strong data-nodeid=\"13041\">初始条件</strong\n                      >：首先我们看“<strong data-nodeid=\"13042\"\n                        >无法计算/越界</strong\n                      >”的情况：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">dp[<span class=\"hljs-number\">0</span>] = max(dp[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">1</span>], dp[<span class=\"hljs-number\">0</span>-<span class=\"hljs-number\">2</span>] + nums[<span class=\"hljs-number\">0</span>]); <span class=\"hljs-comment\">// &lt;-- 越界!</span>\n</div></li><li><div class=\"code-word\">dp[<span class=\"hljs-number\">1</span>] = max(dp[<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">1</span>], dp[<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">2</span>] + nums[<span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// &lt;-- 越界 </span>\n</div></li><li><div class=\"code-word\">dp[<span class=\"hljs-number\">2</span>] = max(dp[<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">1</span>], dp[<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">2</span>] + nums[<span class=\"hljs-number\">2</span>]);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11984\">\n                      我们发现 dp[0], dp[1]\n                      会在计算过程中出现越界，所以需要优先处理这两项。\n                    </p>\n                    <ul data-nodeid=\"11985\">\n                      <li data-nodeid=\"11986\">\n                        <p data-nodeid=\"11987\">\n                          dp[0]：当只有 nums[0] 可以偷的时候，其值肯定为 max(0,\n                          nums[0])。\n                        </p>\n                      </li>\n                    </ul>\n                    <blockquote data-nodeid=\"11988\">\n                      <p data-nodeid=\"11989\">\n                        注意陷阱，有的题可能会给你的带负数值的情况，不要直接写成\n                        nums[0]。\n                      </p>\n                    </blockquote>\n                    <ul data-nodeid=\"11990\">\n                      <li data-nodeid=\"11991\">\n                        <p data-nodeid=\"11992\">\n                          dp[1]：当有 0 号，1\n                          号房间可以偷的时候，由于不能连续偷盗，那么只需要在\n                          0、nums[0]、nums[1] 里面选最大值就可以了。所以 dp[1] =\n                          max(0, nums[0], nums[1])。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"11993\">\n                      <strong data-nodeid=\"13099\">边界</strong\n                      >：要保证不能越过数组的边界！\n                    </p>\n                    <h4 data-nodeid=\"11994\">6. 计算顺序</h4>\n                    <p data-nodeid=\"11995\">\n                      拿到初始条件与边界之后，只需要再多走两步，就知道代码怎么写了。接下来我们开始求解\n                      dp[2], dp[3]。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">dp[<span class=\"hljs-number\">2</span>] = max(dp[<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">1</span>], dp[<span class=\"hljs-number\">2</span>-<span class=\"hljs-number\">2</span>] + nums[<span class=\"hljs-number\">2</span>]);\n</div></li><li><div class=\"code-word\">dp[<span class=\"hljs-number\">3</span>] = max(dp[<span class=\"hljs-number\">3</span>-<span class=\"hljs-number\">1</span>], dp[<span class=\"hljs-number\">3</span>-<span class=\"hljs-number\">2</span>] + nums[<span class=\"hljs-number\">3</span>]);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11997\">\n                      【<strong data-nodeid=\"13117\">代码</strong\n                      >】利用前面分析过的初始条件和递推关系，可以写出如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span>\n</span></div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">rob</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums)</span>\n</span></div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = nums == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : nums.length;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (N &lt;= <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[N];\n</div></li><li><div class=\"code-word\">    dp[<span class=\"hljs-number\">0</span>] = Math.max(<span class=\"hljs-number\">0</span>, nums[<span class=\"hljs-number\">0</span>]);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (N == <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">0</span>];\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    dp[<span class=\"hljs-number\">1</span>] = Math.max(<span class=\"hljs-number\">0</span>, Math.max(nums[<span class=\"hljs-number\">0</span>], nums[<span class=\"hljs-number\">1</span>]));\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">      dp[i] = Math.max(dp[i - <span class=\"hljs-number\">1</span>], dp[i - <span class=\"hljs-number\">2</span>] + nums[i]);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> dp[N - <span class=\"hljs-number\">1</span>];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"11999\">\n                      <p data-nodeid=\"12000\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13121\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13125\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13129\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12001\">\n                      <strong data-nodeid=\"13134\">复杂度分析</strong\n                      >：时间复杂度 O(N)，空间复杂度 O(N)。\n                    </p>\n                    <p data-nodeid=\"12002\">\n                      【<strong data-nodeid=\"13140\">小结</strong>】通过 6\n                      步分析法，我们很快就搞定来这道经典的 DP 题目。\n                    </p>\n                    <p data-nodeid=\"12003\">\n                      这道题还有一个小变形，我想你可以尝试求解下面的练习题 1。\n                    </p>\n                    <p data-nodeid=\"12004\">\n                      <strong data-nodeid=\"13146\">练习题 1</strong\n                      >：你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方的所有房屋都围成一圈\n                      ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警\n                      。给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下\n                      ，能够偷窃到的最高金额。\n                    </p>\n                    <p data-nodeid=\"12005\">输入：nums = [2,3,2]</p>\n                    <p data-nodeid=\"12006\">输出：3</p>\n                    <p data-nodeid=\"12007\">\n                      解释：你不能先偷窃 nums[0] 号房屋（金额 = 2），然后偷窃\n                      nums[2] 号房屋（金额 = 2）,\n                      因为他们是相邻的。最大收益是偷取nums[1]=3。\n                    </p>\n                    <blockquote data-nodeid=\"12008\">\n                      <p data-nodeid=\"12009\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/213.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-ii.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13168\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/213.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-ii.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13172\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/213.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-ii.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13176\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"12010\">区间 DP</h4>\n                    <p data-nodeid=\"12011\">\n                      还有一类 DP\n                      题目，看起来像是一个线性的数组，但是如果仔细分析，就会发现要处理的却是一个一个的子区间。下面我们依然通过一道例题，使用\n                      6 步破题法进行求解。\n                    </p>\n                    <h4 data-nodeid=\"12012\">例 2：扰乱字符串</h4>\n                    <p data-nodeid=\"12013\">\n                      【<strong data-nodeid=\"13185\">题目</strong\n                      >】使用下面描述的算法可以扰乱字符串 s 得到字符串 t 。\n                    </p>\n                    <p data-nodeid=\"12014\">\n                      Step 1. 如果字符串的长度为 1 ，算法停止。\n                    </p>\n                    <p data-nodeid=\"12015\">\n                      Step 2. 如果字符串的长度 &gt; 1 ，执行下述步骤：\n                    </p>\n                    <ul data-nodeid=\"12016\">\n                      <li data-nodeid=\"12017\">\n                        <p data-nodeid=\"12018\">\n                          在一个随机下标处将字符串分割成两个<strong\n                            data-nodeid=\"13193\"\n                            >非空</strong\n                          >的子字符串。即如果已知字符串 s\n                          ，则可以将其分成两个子字符串 x 和 y ，且满足 s = x + y\n                          。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"12019\">\n                        <p data-nodeid=\"12020\">\n                          随机决定是“交换两个子字符串”还是“保持这两个子字符串的顺序不变”。即在执行这一步骤之后，s\n                          可能是 s = x + y 或者 s = y + x 。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12021\">\n                      Step 3. 在 x 和 y 这两个<strong data-nodeid=\"13200\"\n                        >子字符串</strong\n                      >上继续从 Step 1 开始递归执行此算法。\n                    </p>\n                    <p data-nodeid=\"12022\">\n                      有两个长度相等的字符串 s1 和 s2，判断 s2 是否是 s1\n                      的扰乱字符串。如果是，返回 true ；否则，返回 false 。\n                    </p>\n                    <p data-nodeid=\"12023\">输入：s1 = \"great\", s2 = \"rgeat\"</p>\n                    <p data-nodeid=\"12024\">输出：true</p>\n                    <p data-nodeid=\"12025\">\n                      解释：经过如下操作即可从 s1 得到 s2：\n                    </p>\n                    <p data-nodeid=\"12026\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/37/58/Cgp9HWB2zFWABT97AABr3D8VE1U754.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"13214\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12027\">\n                      【<strong data-nodeid=\"13220\">分析</strong\n                      >】当拿到这个题目的时候，我们看到\n                      true/false，可以联想到这应该是个 DP\n                      题的信号。因为题目也没有要求输出具体怎么操作。\n                    </p>\n                    <p data-nodeid=\"12028\">\n                      因此，你可以由此想到使用 6\n                      步破题法，而不是立马跟着题意开始切分字符串。\n                    </p>\n                    <h4 data-nodeid=\"12029\">1. 最后一步</h4>\n                    <p data-nodeid=\"12030\">\n                      首先看最后一步，题目中给定两个字符串 s1，s2，那么 s1\n                      在最后一步操作之后是否可以得到 s2 呢？（假设 s1 的长度为\n                      N，下标从 0 开始）\n                    </p>\n                    <p data-nodeid=\"12031\">\n                      我们分析一下，s1 在操作的时候，可以有以下步骤：\n                    </p>\n                    <p data-nodeid=\"12032\">\n                      1）在位置 p 处进行切分，将 s1 切分为 x = [0, ... p] 和 y =\n                      [p + 1, N)；\n                    </p>\n                    <p data-nodeid=\"12033\">\n                      2）然后再分别处理 s1 = x + y 和 s1 = y + x 能否拼成 s2。\n                    </p>\n                    <p data-nodeid=\"12034\">\n                      其中 p 的取值范围是 [0 ~ N-2]，所以一共有 N-1 种选项。\n                    </p>\n                    <p data-nodeid=\"12035\">\n                      但是这样操作并不能降低处理的数据规模，无法将一个大问题切分为更多的小问题，也就是说我们只是找到了原始问题的一个等价问题。\n                    </p>\n                    <p data-nodeid=\"12036\">\n                      这说明我们最后一步找得不准！需要重新思考。如果 s1 是 s2\n                      的扰乱字符串，那么在最后一步的时候，存在以下 2\n                      种情况（判断的时候，只需要判断对应颜色相同的部分）：\n                    </p>\n                    <p data-nodeid=\"12037\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/37/58/Cgp9HWB2zGaANoGhAAeB2NdVgKc054.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"13246\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12038\">\n                      Case 1. 找到某个位置，将 s1, s2 都切成两半，其中 s1 = x +\n                      y，而 s2 = c + d，那么我们只需要保证 x 是 c\n                      的扰乱字符串，y 是 d 的扰乱字符串。\n                    </p>\n                    <p data-nodeid=\"12039\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/61/CioPOWB2zGyAOitSAAeBHGBc82w657.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"13250\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12040\">\n                      Case 2. 找到某个位置，切分后，使得 s1 = x + y，s2 = c +\n                      d，并且 x 是 d 的扰乱字符串，而 y 是 c 的扰乱字符串。\n                    </p>\n                    <p data-nodeid=\"12041\">\n                      我们发现，找准最后一步之后，原始问题的规模减小了很多。\n                    </p>\n                    <h4 data-nodeid=\"12042\">2. 子问题</h4>\n                    <p data-nodeid=\"12043\">起初要求解的问题是：</p>\n                    <blockquote data-nodeid=\"12044\">\n                      <p data-nodeid=\"12045\">\n                        判断 s1 是不是 s2 的扰乱字符串。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12046\">\n                      经过最后一步的处理之后，需要处理的问题被拆分为两种情况：\n                    </p>\n                    <ul data-nodeid=\"12047\">\n                      <li data-nodeid=\"12048\">\n                        <p data-nodeid=\"12049\">\n                          Case 1. s1 = x + y, s2 = c + d，判断 &lt;x, c&gt; 和\n                          &lt;y,d&gt; 是不是扰乱字符串；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"12050\">\n                        <p data-nodeid=\"12051\">\n                          Case 2. s1 = x + y, s2 = c + d，判断 &lt;x, d&gt; 和\n                          &lt; y, c&gt; 是不是扰乱字符串。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12052\">\n                      到这里，我们可以将原问题表示如下：\n                    </p>\n                    <blockquote data-nodeid=\"12053\">\n                      <p data-nodeid=\"12054\">\n                        f(s1, s2) = true，表示 s1 是 s2 的扰乱字符串，false\n                        则表示不是。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12055\">那么最后一步就可以表示为：</p>\n                    <blockquote data-nodeid=\"12056\">\n                      <p data-nodeid=\"12057\">\n                        f(s1, s2) = f(x, c) &amp;&amp; f(y, d) || f(x, d)\n                        &amp;&amp; f(y, c)<br />\n                        其中 s1 = x + y, s2 = c + d\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"12058\">3. 递推关系式</h4>\n                    <p data-nodeid=\"12059\">\n                      我们可以用<strong data-nodeid=\"13325\">伪代码表示</strong\n                      >一下这个<strong data-nodeid=\"13326\">递推关系式</strong\n                      >，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isScramble</span><span class=\"hljs-params\">(s1, s2)</span> </span>{\n</div></li><li><div class=\"code-word\">  N = len(s1)\n</div></li><li><div class=\"code-word\">  f(s1, s2) = <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">for</span> cutPos in <span class=\"hljs-title\">range</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, N)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 第一种切分方式</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// s1 = x + y</span>\n</div></li><li><div class=\"code-word\">    x = s1[<span class=\"hljs-number\">0</span>:cutPos]\n</div></li><li><div class=\"code-word\">    y = s1[cutPos+<span class=\"hljs-number\">1</span>, N)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// s2 = c + d</span>\n</div></li><li><div class=\"code-word\">    c = s2[<span class=\"hljs-number\">0</span>:cutPos]\n</div></li><li><div class=\"code-word\">    d = s2[cutPos+<span class=\"hljs-number\">1</span>,N)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 看第一种是否满足条件</span>\n</div></li><li><div class=\"code-word\">    f(s1,s2) = f(x,c) &amp;&amp; f(y,d);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (f(s1,s2)) <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 第二种切分方式</span>\n</div></li><li><div class=\"code-word\">    c = s2[<span class=\"hljs-number\">0</span>:N-cutPos-<span class=\"hljs-number\">1</span>]\n</div></li><li><div class=\"code-word\">    d = s2[N-cutPos:N)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 看第二种是否满足条件 </span>\n</div></li><li><div class=\"code-word\">    f(s1, s2) = f(x,d) &amp;&amp; f(y, c);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (f(s1,s2)) <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"12061\">4. f(x) 的表示</h4>\n                    <p data-nodeid=\"12062\">\n                      接下来，我们需要看一下 f(s1, s2) 的表示。\n                    </p>\n                    <p data-nodeid=\"12063\">\n                      如果简单一点，我们当然可以使用\n                      HashMap&lt;String,HashMap&lt;String, Boolean&gt;&gt;\n                      双层哈希函数来处理（难办一点，可以用 s1+\"#\"+s2 作为\n                      key，然后只使用一层哈希函数）。\n                    </p>\n                    <p data-nodeid=\"12064\">\n                      但是就这道题而言，我们还有更好的表达方式。观察题目可以发现：子问题里面的\n                      &lt;x, y&gt; 和 &lt;c, d&gt; 都是原字符串的子串。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">    <span class=\"hljs-comment\">// s1 = x + y</span>\n</div></li><li><div class=\"code-word\">    x = s1[<span class=\"hljs-number\">0</span>:cutPos]\n</div></li><li><div class=\"code-word\">    y = s1[cutPos+<span class=\"hljs-number\">1</span>, N)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// s2 = c + d</span>\n</div></li><li><div class=\"code-word\">    c = s2[<span class=\"hljs-number\">0</span>:cutPos]\n</div></li><li><div class=\"code-word\">    d = s2[cutPos+<span class=\"hljs-number\">1</span>,N)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12066\">\n                      那么可以用起始位置与终止位置来表示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">f(s1, s2) = f([s1_start, s1_end], [s2_start, s2_end])\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12068\">\n                      到这里，我们可以认为信息已经变成了 f(s1_start, s1_end,\n                      s2_start, s2_end)。针对这个 4 维的信息，可以通过建立一个 4\n                      维数组来处理。比如：dp[s1_start][s1_end][s2_start][s2_end]。\n                    </p>\n                    <p data-nodeid=\"12069\">\n                      但是，如果 s1 字符串要是 s2\n                      字符串的扰动字符串，那么这两者的长度应该是相等的。因此，应该满足如下的关系：\n                    </p>\n                    <blockquote data-nodeid=\"12070\">\n                      <p data-nodeid=\"12071\">\n                        s1_end - s1_start = s2_end - s2_start\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12072\">\n                      也就是说，两个字符串的长度总是相等的，那么我们可以把 4\n                      维的信息压缩为 3 维：\n                    </p>\n                    <ul data-nodeid=\"12073\">\n                      <li data-nodeid=\"12074\">\n                        <p data-nodeid=\"12075\">s1_start</p>\n                      </li>\n                      <li data-nodeid=\"12076\">\n                        <p data-nodeid=\"12077\">s2_start</p>\n                      </li>\n                      <li data-nodeid=\"12078\">\n                        <p data-nodeid=\"12079\">length</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12080\">\n                      因为 s1_end = s1_start + length，而 s2_end = s2_start +\n                      length。也就是说，3 维的信息与 4\n                      维的信息完全是等价的。那么，我们可以把原来 4 维的数组\n                      dp，更改为 3 维的数组 dp[s1_start][s2_start][length]。\n                    </p>\n                    <h4 data-nodeid=\"12081\">5. 初始条件与边界</h4>\n                    <p data-nodeid=\"12082\">\n                      虽然有了第 3\n                      步中的递推关系，但是我们很快可以发现，有那么几项需要提前处理，否则无法计算结果。\n                    </p>\n                    <ul data-nodeid=\"12083\">\n                      <li data-nodeid=\"12084\">\n                        <p data-nodeid=\"12085\">\n                          都是空字符串：s1 = empty，s2 =\n                          empty。（就本题而言，题目已给定了不会出现空字符串）。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"12086\">\n                        <p data-nodeid=\"12087\">\n                          两个字符串长度都是 1：len(s1) = 1, len(s2) = 1。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12088\">\n                      还有一些可以提前处理的操作，比如 s1 与 s2\n                      的字符串长度不相等，这种直接可以返回\n                      False，因为扰动字符串需要两个字符串长度相等。\n                    </p>\n                    <h4 data-nodeid=\"12089\">6. 计算顺序</h4>\n                    <p data-nodeid=\"12090\">\n                      我们在初始条件中，已经处理了长度为 0（空字符串），长度为 1\n                      的子串的情况。如果再<strong data-nodeid=\"13450\"\n                        >接着走两步</strong\n                      >，那么应该再去计算长度为 2\n                      的任意子串是不是相互为扰动字符串。然后再计算长度为\n                      3，长度为 4，直到长度为 N 的子串。\n                    </p>\n                    <p data-nodeid=\"12091\">\n                      可以肯定，当计算到长度为 N 的时候，我们就能得到最终解。\n                    </p>\n                    <p data-nodeid=\"12092\">\n                      【<strong data-nodeid=\"13457\">分析</strong>】经过了前面的\n                      DP 分析 6\n                      步法，现在应该可以写出如下代码了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isScramble</span><span class=\"hljs-params\">(String s1, String s2)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> s1len = s1 == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : s1.length();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> s2len = s2 == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : s2.length();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (s1len != slen2) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// N表示后面字符串的长度</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = s1len;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">boolean</span>[][][] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[N + <span class=\"hljs-number\">1</span>][N + <span class=\"hljs-number\">1</span>][N + <span class=\"hljs-number\">1</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始条件是长度为1的情况</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> s1start = <span class=\"hljs-number\">0</span>; s1start &lt; N; s1start++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> s2start = <span class=\"hljs-number\">0</span>; s2start &lt; N; s2start++) {\n</div></li><li><div class=\"code-word\">      dp[s1start][s2start][<span class=\"hljs-number\">1</span>] = s1.charAt(s1start) == s2.charAt(s2start);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 那么再通过递推公式计算其他长度的情况</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 子串的截取，这里我们采用开闭原则[start, end)</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 也就是说，end是可以取到N的。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> len = <span class=\"hljs-number\">2</span>; len &lt;= N; len++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> s1start = <span class=\"hljs-number\">0</span>; s1start + len &lt;= N; s1start++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> s2start = <span class=\"hljs-number\">0</span>; s2start + len &lt;= N; s2start++) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 现在我们需要计算两个子串</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// X = s1[s1start, s1start+len)</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// Y = s2[s2start, s2start+len)</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 这两个子串是否是扰动字符串</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 那么根据递推公式，我们需要找切分点</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 切分子串的时候</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// X 切分为 X = a + b, 分为左右两半</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// Y 切分为 Y = c + d，同样分为左右两半</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 左边的长度为leftLen, 右边的长度就是len - leftLen</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> leftLen = <span class=\"hljs-number\">1</span>; leftLen &lt; len &amp;&amp; !dp[s1start][s2start][len];\n</div></li><li><div class=\"code-word\">             leftLen++) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 第一种切分，case 1</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// X = a + b, Y = c + d</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// [s1start, s1start + leftLen) &lt;- a</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// [s2start, s2start + leftLen) &lt;- c</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// [s1start + leftLen, s1start + len) &lt;- b</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// [s2start + leftLen, s2start + len) &lt;- d</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">boolean</span> c1 =\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// &lt;a, c&gt;</span>\n</div></li><li><div class=\"code-word\">            dp[s1start][s2start][leftLen] &amp;&amp;\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// &lt;b, d&gt;</span>\n</div></li><li><div class=\"code-word\">            dp[s1start + leftLen][s2start + leftLen][len - leftLen];\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 第2种切分</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// X = a + b, Y = c + d</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// [s1start, s1start + leftLen) &lt;- a</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// [s2start + len - leftLen, s2start + len) &lt;- d</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// [s1start + leftLen, s1start + len) &lt;- b</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// [s2start, s2start + len - leftLen) &lt;- c</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">boolean</span> c2 =\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// &lt;a, d&gt;</span>\n</div></li><li><div class=\"code-word\">            dp[s1start][s2start + len - leftLen][leftLen] &amp;&amp;\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// &lt;b, c&gt;</span>\n</div></li><li><div class=\"code-word\">            dp[s1start + leftLen][s2start][len - leftLen];\n</div></li><li><div class=\"code-word\">          dp[s1start][s2start][len] = c1 || c2;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>][N];\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"12094\">\n                      <p data-nodeid=\"12095\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13461\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13465\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13469\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12096\">\n                      <strong data-nodeid=\"13482\">复杂度分析</strong\n                      >：时间复杂度\n                      O(N<sup>4</sup>)，空间复杂度O(N<sup>3</sup>)。\n                    </p>\n                    <p data-nodeid=\"12097\">\n                      【<strong data-nodeid=\"13488\">小结</strong>】除了前面的 DP\n                      6 步破题法之外，这道题的重点考点在于：\n                    </p>\n                    <ul data-nodeid=\"12098\">\n                      <li data-nodeid=\"12099\">\n                        <p data-nodeid=\"12100\">\n                          最后一步的正确理解与选择——要保证最后一步得到的<strong\n                            data-nodeid=\"13493\"\n                            >子问题是收缩的；</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"12101\">\n                        <p data-nodeid=\"12102\">\n                          哈希函数空间的优化——我们一步一步推导了从哈希函数到 4\n                          维数组，最后到 3 维数组。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12103\">\n                      这道题还可以使用记忆化 DFS\n                      来进行搜索，你可以当作练习题试一下吗？\n                    </p>\n                    <p data-nodeid=\"12104\">\n                      <strong data-nodeid=\"13500\">练习题 2</strong\n                      >：请使用记忆化搜索求解例 2。\n                    </p>\n                    <blockquote data-nodeid=\"12105\">\n                      <p data-nodeid=\"12106\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.rec.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13504\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.rec.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13508\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.rec.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13512\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"12107\">背包型 DP</h4>\n                    <p data-nodeid=\"12108\">\n                      背包型 DP，这个称呼实际上是来自一个比较经典的 DP\n                      问题：“背包问题”，在面试中比较出名的是“背包九讲”。但是我个人认为“背包九讲”对于很多只需要参加面试的同学来说，内容有些偏难，并且大部分面试只会涉及\n                      01 背包和完全背包。因此，接下来我会带你用 6\n                      步分析法处理面试中常常出现的高频背包问题。\n                    </p>\n                    <p data-nodeid=\"12109\">\n                      注意：如果你没有学习过背包问题，甚至从来没有听说过，也不影响你接下来的学习。\n                    </p>\n                    <h4 data-nodeid=\"12110\">例 3：分割等和子集</h4>\n                    <p data-nodeid=\"12111\">\n                      【<strong data-nodeid=\"13522\">题目</strong\n                      >】一个只包含正整数的非空数组。是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。\n                    </p>\n                    <p data-nodeid=\"12112\">\n                      注意: 1）每个数组中的元素不会超过\n                      100；2）数组的大小不会超过 200\n                    </p>\n                    <p data-nodeid=\"12113\">输入：A = [2, 2]</p>\n                    <p data-nodeid=\"12114\">输出：true</p>\n                    <p data-nodeid=\"12115\">\n                      解释：可以将这个数组分成 [2], [2] 这两个子集和是相等的。\n                    </p>\n                    <p data-nodeid=\"12116\">\n                      【<strong data-nodeid=\"13543\">分析</strong\n                      >】由于分出来的两个子集和要求是相等的，如果整个数组和为奇数，那么没有讨论的必要。这里我们只讨论\n                      sum(A) = 2 x V 的情况。也就是分出来的两个子集，其和分别为\n                      V。\n                    </p>\n                    <p data-nodeid=\"12117\">这个问题，也可以想象成：</p>\n                    <blockquote data-nodeid=\"12118\">\n                      <p data-nodeid=\"12119\">\n                        有一个容量为 V 的背包，给你一些石头，石头的大小放在数组\n                        A[] 中，现在需要捡一些石头，刚好装满容量为 V\n                        的背包。（你可以不去考虑填充的时候的缝隙）\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12120\">\n                      那么，在这个场景下，每个石头就只有选和不选两种情况。下面我们具体看一下如何利用6\n                      步分析法处理这个问题。\n                    </p>\n                    <h4 data-nodeid=\"12121\">1. 最后一步</h4>\n                    <p data-nodeid=\"12122\">\n                      这个问题里面，比较难以想到的是最后一步，我们先把最后一步的来龙去脉讲清楚。\n                    </p>\n                    <p data-nodeid=\"12123\">\n                      首先，假设给定的数组 A[] = {1, 2,\n                      3}，然后看一下利用这个数组可以组合出哪些数。在一开始，如果我们什么元素都不取，肯定可以走到的点为\n                      0。因此，可以将 0 设置为起点。\n                    </p>\n                    <p data-nodeid=\"12124\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/37/58/Cgp9HWB2zJmAW8HqAAm_mP67WDc578.gif\"\n                        alt=\"1.gif\"\n                        data-nodeid=\"13560\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12125\">\n                      至此，你应该已经分析出最后一步应该如何操作。它依赖两点：\n                    </p>\n                    <ul data-nodeid=\"12126\">\n                      <li data-nodeid=\"12127\">\n                        <p data-nodeid=\"12128\">\n                          已经可以访问到的点集\n                          X（后面我们把可以访问到的数均称为<strong\n                            data-nodeid=\"13567\"\n                            >点集</strong\n                          >）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"12129\">\n                        <p data-nodeid=\"12130\">A[n-1] 元素。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12131\">\n                      最后一步操作可以用伪代码表示如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">Y = {....}; <span class=\"hljs-comment\">// 旧有的点集的状态</span>\n</div></li><li><div class=\"code-word\">Z = <span class=\"hljs-keyword\">new</span> HashSet(Y); <span class=\"hljs-comment\">// 新的可以访问的点集</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 生成新的可以访问的点</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> node in Y:\n</div></li><li><div class=\"code-word\">  Z.insert(node + A[n-<span class=\"hljs-number\">1</span>])\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 查看V是否在N点集中</span>\n</div></li><li><div class=\"code-word\">Z.contains(V) -&gt; <span class=\"hljs-keyword\">true</span> / <span class=\"hljs-keyword\">false</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12133\">\n                      两个点集之间的关系可以简略表示如下：\n                    </p>\n                    <p data-nodeid=\"12134\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/61/CioPOWB2zMOAbGNlAABqNw0YfrM582.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"13577\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"12135\">2. 子问题</h4>\n                    <p data-nodeid=\"12136\">\n                      通过观察最后一步，可以发现它就是在可访问点集 Y\n                      的基础上，通过<strong data-nodeid=\"13590\">加入边</strong\n                      >A[n-1] ，然后生成点集 Z。如果引入更早一点的可访问点集\n                      X，可以将点集的扩展顺序表示如下：\n                    </p>\n                    <p data-nodeid=\"12137\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/37/58/Cgp9HWB2zMuAH3SUAABi4JG4bTk857.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"13593\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12138\">那么更进一步，它的子问题就是：</p>\n                    <blockquote data-nodeid=\"12139\">\n                      <p data-nodeid=\"12140\">\n                        在一个可访问点集 X 里面，通过加入A[i] 元素之后，<br />\n                        是否可以访问 y1？<br />\n                        是否可以访问 y2？<br />\n                        ……<br />\n                        是否可以访问 ym?\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"12141\">3. 递推关系</h4>\n                    <p data-nodeid=\"12142\">\n                      如果我们用 f()函数表示这一层关系，可以表示为：\n                    </p>\n                    <blockquote data-nodeid=\"12143\">\n                      <p data-nodeid=\"12144\">\n                        f(X, A[n-2]) =&gt; Y<br />\n                        f(Y, A[n-1]) =&gt; Z\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12145\">\n                      需要注意的是， f()\n                      函数并不表示一个数是否可以生成，其输出表示的是一个点集。因此，这个例子告诉我们：有时候，<strong\n                        data-nodeid=\"13628\"\n                        >f(x) 的输出与我们想要的结果并不直接相关</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"12146\">\n                      比如，在这道题中，我们<strong data-nodeid=\"13634\"\n                        >最终想要的答案是</strong\n                      >：\n                    </p>\n                    <blockquote data-nodeid=\"12147\">\n                      <p data-nodeid=\"12148\">值 V 是否出现在了点集 Z 中？</p>\n                    </blockquote>\n                    <p data-nodeid=\"12149\">\n                      但是，f()\n                      函数并没有直接回答这个问题，而是通过以下方式来回答最终问题:\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">f(Y, A[n-<span class=\"hljs-number\">1</span>]) =&gt; Z\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">return</span> Z.contains(V)\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"12151\">4. f(x) 的表示</h4>\n                    <p data-nodeid=\"12152\">\n                      在这道题目里面，f() 函数更一般的写法为：f(S, A[i])。其中 S\n                      是已知的点集，而这个函数的输出得到的是一个新的点集。\n                    </p>\n                    <p data-nodeid=\"12153\">\n                      那么，我们在写程序的时候，应该用什么去表达 f()\n                      函数呢？在之前的代码里面，我们要么用数组，要么用哈希函数。但是在这里，S\n                      表示的是可以访问的点集。像这样，如何进行哈希呢？\n                    </p>\n                    <p data-nodeid=\"12154\">\n                      <strong data-nodeid=\"13653\">优化 1</strong>\n                    </p>\n                    <p data-nodeid=\"12155\">\n                      不过，如果我们根据前面数组 A[] = {1, 2, 3}\n                      给出的示例，可以用 f() 函数表示如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">S0 = {<span class=\"hljs-number\">0</span>}\n</div></li><li><div class=\"code-word\">S1 = f(S0, A[<span class=\"hljs-number\">0</span>])\n</div></li><li><div class=\"code-word\">S2 = f(S1, A[<span class=\"hljs-number\">1</span>])\n</div></li><li><div class=\"code-word\">S3 = f(S2, A[<span class=\"hljs-number\">2</span>])\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">return</span> S3.contains(V)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12157\">\n                      我们发现，这个步骤可以很轻松地写成两个点集迭代的形式：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">old = {<span class=\"hljs-number\">0</span>}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> x in A:\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">new</span> = f(old, x)\n</div></li><li><div class=\"code-word\">    old = <span class=\"hljs-keyword\">new</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">return</span> old.contains(V)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12159\">\n                      <strong data-nodeid=\"13662\">优化 2</strong>\n                    </p>\n                    <p data-nodeid=\"12160\">\n                      尽管只用两个点集迭代就可以完成计算过程。但是，我们还有一个条件没用上，就是给定的数组里面的元素都是<strong\n                        data-nodeid=\"13668\"\n                        >正整数</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"12161\">\n                      这就意味着， f(S, A[i])\n                      在进行迭代的时候，新生成的数，必然会更大。这对于我们的迭代有什么帮助呢？这种递增方向是否可以使我们只使用<strong\n                        data-nodeid=\"13678\"\n                        >一个集合</strong\n                      >就完成工作呢？\n                    </p>\n                    <p data-nodeid=\"12162\">\n                      假设 S = {0, 5}，A[i] = 2\n                      现在要原地完成一个集合的迭代，我们从小到大开始迭代，如下图所示：\n                    </p>\n                    <p data-nodeid=\"12163\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/61/CioPOWB2zN2Af9neAAQiPWUjU6c193.gif\"\n                        alt=\"2.gif\"\n                        data-nodeid=\"13686\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12164\">\n                      但是，如果按上图这样操作，就会出错。因为 A[i] = 2\n                      被使用了两次，而题目要求只能使用一次。\n                    </p>\n                    <p data-nodeid=\"12165\">\n                      出现这个问题的原因是<strong data-nodeid=\"13697\"\n                        >我们无法区分旧有的数，新加入的数</strong\n                      >。使用另外一个数组标记旧有的数，新生成的数本质上就与两个集合完成迭代没有区别了。那么有什么办法可以帮助我们区分旧有的数和新生成的数呢？\n                    </p>\n                    <p data-nodeid=\"12166\">\n                      如果我们试试从大往小更新呢？从大往小更新主要是基于这样一个条件：\n                    </p>\n                    <blockquote data-nodeid=\"12167\">\n                      <p data-nodeid=\"12168\">\n                        新生成的数总是要更大一些的。如果我们先让大的数加上了\n                        A[i]，这些更大的数会放在后面，再次遍历，我们总是不会遇到这些新生成的数。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12169\">迭代步骤如下图所示：</p>\n                    <p data-nodeid=\"12170\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/61/CioPOWB2zPGAEM2YAARohJntves709.gif\"\n                        alt=\"3.gif\"\n                        data-nodeid=\"13707\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12171\">\n                      我们发现，如果采用从大往小的方向遍历，就可以利用一个点集完成迭代。\n                    </p>\n                    <h4 data-nodeid=\"12172\">5. 初始条件与边界</h4>\n                    <p data-nodeid=\"12173\">\n                      首先，当我们什么都不选的时候，肯定可以得到\n                      0，所以一开始的点集就是 {0}。\n                    </p>\n                    <p data-nodeid=\"12174\">\n                      其次，我们要得到的数是 V。如果旧有的点集中，已经有数比 V\n                      大了，比如 R，那么可以直接把 R\n                      扔掉。因为在后面的迭代过程中，A[i]\n                      都是正数，迭代之后，只会让 R 越来越大，所以保留 R\n                      没有意义。\n                    </p>\n                    <p data-nodeid=\"12175\">因此动态规划的边界就是 [0, V]。</p>\n                    <h4 data-nodeid=\"12176\">6. 计算顺序</h4>\n                    <p data-nodeid=\"12177\">有两个计算顺序需要注意：</p>\n                    <ul data-nodeid=\"12178\">\n                      <li data-nodeid=\"12179\">\n                        <p data-nodeid=\"12180\">\n                          迭代的时候，需要用 A[0], A[1],…, A[n-1]\n                          依次去更新点集；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"12181\">\n                        <p data-nodeid=\"12182\">\n                          当我们更新点集的时候，需要按从大到小的顺序更新。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12183\">\n                      当 f()\n                      函数在整个迭代过程中只需要一个点集，并且这个点集的范围已经是固定\n                      [0, V] 的时候，就可以用 boolean 数组来表示这个点集。\n                    </p>\n                    <p data-nodeid=\"12184\">\n                      【<strong data-nodeid=\"13751\">代码</strong\n                      >】经过前面的分析，我们已经可以写出如下代码了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">canPartition</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (N &lt;= <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 数组求和</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">int</span> s = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> x : A) {\n</div></li><li><div class=\"code-word\">            s += x;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 如果为奇数， 肯定是没有办法切分</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> ((s &amp; <span class=\"hljs-number\">0x01</span>) == <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 分割为等和，那么相当于要取同值的一半</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> V = s &gt;&gt; <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 这个dp表示着一开始可以访问的点集</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 我们用true表示这个点存在于点集中</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// false表示这个点不存在点集中</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">boolean</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[V + <span class=\"hljs-number\">1</span>];\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 首先初始集合肯定是s0={0}</span>\n</div></li><li><div class=\"code-word\">        dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 开始利用a[i]来进行推导</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> x : A) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 注意这里更新的方向</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> node = V; node - x &gt;= <span class=\"hljs-number\">0</span>; node--) {\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> newNode = node;\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> oldExistsNode = node - x;\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-keyword\">if</span> (dp[oldExistsNode]) {\n</div></li><li><div class=\"code-word\">                    dp[newNode] = <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">                }\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> dp[V];\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"12186\">\n                      <p data-nodeid=\"12187\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13755\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13759\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13763\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12188\">\n                      <strong data-nodeid=\"13768\">复杂度分析</strong\n                      >：时间复杂度 O(NV)，空间复杂度 O(V)。\n                    </p>\n                    <p data-nodeid=\"12189\">\n                      【<strong data-nodeid=\"13774\">小结</strong\n                      >】在这道题目里面，我们再次利用 DP 的 6\n                      步分析法求解问题。在求解的过程中，可以发现有两个有意思的地方：\n                    </p>\n                    <ul data-nodeid=\"12190\">\n                      <li data-nodeid=\"12191\">\n                        <p data-nodeid=\"12192\">利用 A[i] 逐步进行迭代；</p>\n                      </li>\n                      <li data-nodeid=\"12193\">\n                        <p data-nodeid=\"12194\">\n                          dp[]\n                          数组的更新方向，需要从大到小更新的根本原因是数组里面面的数都是正整数。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12195\">\n                      这个题目，实际上是一个 01 背包问题的变形。那么真正的 01\n                      背包问题是什么样呢？这里我给你留了一道练习题，你可以尝试求解一下。\n                    </p>\n                    <p data-nodeid=\"12196\">\n                      <strong data-nodeid=\"13789\">练习题 3</strong>：（0/1\n                      背包）有 N 件物品和一个容量是 V\n                      的背包，每件物品只能使用一次。\n                    </p>\n                    <p data-nodeid=\"12197\">\n                      第 i 件物品的体积是 vi，价值是\n                      wi。求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。输出最大价值。\n                    </p>\n                    <blockquote data-nodeid=\"12198\">\n                      <p data-nodeid=\"12199\">\n                        代码:<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.01.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13794\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.01.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13798\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.01.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13802\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12200\">\n                      <strong data-nodeid=\"13807\">练习题 4</strong>：有 N\n                      种物品和一个容量是 V 的背包，每种物品都有无限件可用。第 i\n                      种物品的体积是 vi，价值是\n                      wi。求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。输出最大价值。\n                    </p>\n                    <blockquote data-nodeid=\"12201\">\n                      <p data-nodeid=\"12202\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.full.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13811\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.full.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13815\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.full.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13819\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12203\">\n                      <strong data-nodeid=\"13824\">练习题 5</strong\n                      >：给定一个非负整数数组，a1, a2,…, an, 和一个目标数\n                      S。现在你有两个符号 + 和\n                      -。对于数组中的任意一个整数，你都可以从 + 或 -\n                      中选择一个符号添加在前面。返回可以使最终数组和为目标数 S\n                      的所有添加符号的方法数。\n                    </p>\n                    <p data-nodeid=\"12204\">输入：nums: [1, 1, 1, 1, 1], S: 3</p>\n                    <p data-nodeid=\"12205\">输出：5</p>\n                    <p data-nodeid=\"12206\">解释：</p>\n                    <p data-nodeid=\"12207\">-1+1+1+1+1 = 3</p>\n                    <p data-nodeid=\"12208\">+1-1+1+1+1 = 3</p>\n                    <p data-nodeid=\"12209\">+1+1-1+1+1 = 3</p>\n                    <p data-nodeid=\"12210\">+1+1+1-1+1 = 3</p>\n                    <p data-nodeid=\"12211\">+1+1+1+1-1 = 3</p>\n                    <blockquote data-nodeid=\"12212\">\n                      <p data-nodeid=\"12213\">\n                        解法 1：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13840\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13844\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13848\"\n                          >Python</a\n                        ><br />\n                        解法 2：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.backtrace.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13853\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.backtrace.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13857\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.backtrace.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13861\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"12214\">树型 DP</h4>\n                    <p data-nodeid=\"12215\">\n                      树型\n                      DP，顾名思义，这一类题目会在一棵二叉树，或者多叉树上进行\n                      DP。虽然看起来是一个二叉树问题，但本质上需要用到 DP\n                      的知识才能求解。不过有了我们的 6 步破解法，这种树型 DP\n                      题目也没有那么难。接下来我们一起通过题目学习一下。\n                    </p>\n                    <h4 data-nodeid=\"12216\">例 4：二叉树抢劫</h4>\n                    <p data-nodeid=\"12217\">\n                      【<strong data-nodeid=\"13870\">题目</strong\n                      >】在上次打劫完一条街道之后和一圈房屋后，小偷又发现一个新的可行窃的地区。这个地区只有一个入口，我们称为“根”。\n                      除了“根”之外，每栋房子有且只有一个“父”房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。\n                      如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。\n                    </p>\n                    <p data-nodeid=\"12218\">输入：[3,2,3,null,3,null,1]</p>\n                    <p data-nodeid=\"12219\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/37/58/Cgp9HWB2zQeANJDtAAAi-wCtZjQ178.png\"\n                        alt=\"Drawing 11.png\"\n                        data-nodeid=\"13877\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12220\">输出：7</p>\n                    <p data-nodeid=\"12221\">\n                      解释：小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.\n                    </p>\n                    <p data-nodeid=\"12222\">\n                      【<strong data-nodeid=\"13885\">分析</strong\n                      >】我们看到“最高”两字，应该可以想到使用 DP\n                      方法来试一试。首先还是使出我们的绝招，最后一步。\n                    </p>\n                    <h4 data-nodeid=\"12223\">1. 最后一步</h4>\n                    <p data-nodeid=\"12224\">\n                      假设小偷在抢劫的时候，总是先抢树的子树，那么最后一步肯定就是二叉树的根结点。根结点只有两种可能：\n                    </p>\n                    <ul data-nodeid=\"12225\">\n                      <li data-nodeid=\"12226\">\n                        <p data-nodeid=\"12227\">抢根结点</p>\n                      </li>\n                      <li data-nodeid=\"12228\">\n                        <p data-nodeid=\"12229\">不抢根结点</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12230\">\n                      得到这两种可能之后，我们只需要在这两种情况中取最大值就可以了。\n                    </p>\n                    <h4 data-nodeid=\"12231\">2. 子问题</h4>\n                    <p data-nodeid=\"12232\">\n                      如果我们进一步展开根结点的 2 种情况，可以发现：\n                    </p>\n                    <ul data-nodeid=\"12233\">\n                      <li data-nodeid=\"12234\">\n                        <p data-nodeid=\"12235\">\n                          抢根结点，此时<strong data-nodeid=\"13906\">不能</strong\n                          >抢左右<strong data-nodeid=\"13907\"\n                            >两棵子树的根结点</strong\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"12236\">\n                        <p data-nodeid=\"12237\">\n                          不抢根结点，此时<strong data-nodeid=\"13920\"\n                            >可以抢</strong\n                          >左右<strong data-nodeid=\"13922\"\n                            >两棵子树的根结点，<strong data-nodeid=\"13921\"\n                              >也</strong\n                            >可以不抢两棵子树的根结点。</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12238\">\n                      我们发现，根结点需要得到两个信息：&lt;抢 root\n                      的最大收益,不抢 root\n                      的最大收益&gt;，并且左右子树也是需要这两个信息。\n                    </p>\n                    <p data-nodeid=\"12239\">\n                      那么我们可以定义一个函数\n                      f(x)，来描述最后一步的需求，以及子问题的需求：\n                    </p>\n                    <blockquote data-nodeid=\"12240\">\n                      <p data-nodeid=\"12241\">\n                        f(x) = &lt;抢 x 的最大收益, 不抢 x 的最大收益&gt;\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12242\">\n                      为了后面描述的方便，我们会用到以下缩写表示上述两个维度的信息：\n                    </p>\n                    <blockquote data-nodeid=\"12243\">\n                      <p data-nodeid=\"12244\">\n                        f(x) = &lt;抢,不抢&gt; = &lt;抢 x 的最大收益, 不抢 x\n                        的最大收益&gt;<br />\n                        max(f(x)) = max&lt;f(x).抢,f(x).不抢&gt;\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"12245\">3. 递推关系</h4>\n                    <p data-nodeid=\"12246\">\n                      到这里，我们可以根据最后一步和子问题写出递推关系：\n                    </p>\n                    <blockquote data-nodeid=\"12247\">\n                      <p data-nodeid=\"12248\">\n                        f(root).抢 = root.val + f(root.left).不抢 +\n                        f(root.right).不抢<br />\n                        f(root).不抢 = max(f(root.left)) + max(f(root.right)))\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"12249\">4. f(x) 的表示</h4>\n                    <p data-nodeid=\"12250\">\n                      首先我们看一下 f(x)\n                      的返回值，由于返回值只有两个。这比较好处理，对于 Python\n                      来说，可以直接返回两个值，而对于 Java 来说，可以直接返回\n                      long[2] 数组。\n                    </p>\n                    <p data-nodeid=\"12251\">\n                      然后再看一下 f(x)\n                      的表示。我们从底层开始往上抢的时候，应该只有相邻的两层才会有相互的依赖，如下图所示：\n                    </p>\n                    <p data-nodeid=\"12252\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/61/CioPOWB2zTyAErOsAACsCnIj2ck114.png\"\n                        alt=\"Drawing 12.png\"\n                        data-nodeid=\"13962\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12253\">\n                      相隔更远的层间信息不需要保留，所以 f(x)\n                      函数并不需要一个哈希或者数组来记录 [x]\n                      的信息。相当于直接使用 DFS，而不需要记忆化 DFS。\n                    </p>\n                    <h4 data-nodeid=\"12254\">5. 初始条件与边界</h4>\n                    <p data-nodeid=\"12255\">\n                      当遇到一棵空树的时候，只需要返回 long[2] = {0, 0}\n                      就可以了，也就是收益为 0。\n                    </p>\n                    <h4 data-nodeid=\"12256\">6. 计算顺序</h4>\n                    <p data-nodeid=\"12257\">\n                      这里我们采用的是先抢树的子树，因此，顺序上需要使用后序遍历。\n                    </p>\n                    <p data-nodeid=\"12258\">\n                      【<strong data-nodeid=\"13985\">代码</strong\n                      >】到这里，我们已经可以写出如下代码了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 返回值是一个pair</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ans[0]表示抢当前根结点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ans[1]表示不能抢当前结点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span>[] postOrder(TreeNode root) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-keyword\">null</span>) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">long</span>[] { <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> };\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">long</span>[] l = postOrder(root.left);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">long</span>[] r = postOrder(root.right);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 如果要抢当前结点</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">long</span> get = root.val;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 那么两个子结点必然不能抢</span>\n</div></li><li><div class=\"code-word\">        get += l[<span class=\"hljs-number\">1</span>] + r[<span class=\"hljs-number\">1</span>];\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 如果不抢当前结点</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">long</span> skip = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 那么两个子结点可以抢，也可以不抢</span>\n</div></li><li><div class=\"code-word\">        skip += Math.max(l[<span class=\"hljs-number\">0</span>], l[<span class=\"hljs-number\">1</span>]) + Math.max(r[<span class=\"hljs-number\">0</span>], r[<span class=\"hljs-number\">1</span>]);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">long</span>[] { get, skip };\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">rob</span><span class=\"hljs-params\">(TreeNode root)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">long</span>[] ans = postOrder(root);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">int</span>) Math.max(ans[<span class=\"hljs-number\">0</span>], ans[<span class=\"hljs-number\">1</span>]);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"12260\">\n                      <p data-nodeid=\"12261\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-iii.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13989\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-iii.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13993\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-iii.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"13997\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12262\">\n                      <strong data-nodeid=\"14002\">复杂度分析</strong\n                      >：时间复杂度，本质上这就是一个后序遍历，所以为\n                      O(N)。算上栈占用的空间，空间复杂度为 O(H)，其中 H\n                      表示树的高度。\n                    </p>\n                    <p data-nodeid=\"12263\">\n                      【<strong data-nodeid=\"14008\">小结</strong\n                      >】最后我们再总结一下这个题目的考点：\n                    </p>\n                    <ul data-nodeid=\"12264\">\n                      <li data-nodeid=\"12265\">\n                        <p data-nodeid=\"12266\">DP 的 6 步分析法</p>\n                      </li>\n                      <li data-nodeid=\"12267\">\n                        <p data-nodeid=\"12268\">后序遍历</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12269\">\n                      此外，在处理这道题的最后返回值时，后序遍历的返回值并不是直接返回了我们想要的答案，而是带上了子树的信息，然后留给根结点把这部分信息做整合。你可以联系到我们在“<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6695&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"14016\"\n                        >06 | 树：如何深度运用树的遍历？</a\n                      >”里，学习二叉树的后序遍历时讲过的“项庄舞剑，意在沛公”解法，不难发现，树型\n                      DP\n                      与**后序遍历中“项庄舞剑，意在沛公”**的解法基本上是一样的。\n                    </p>\n                    <p data-nodeid=\"12270\">\n                      接下来，我给你留了一道练习题，你可以再体会一下树型 DP\n                      方法。\n                    </p>\n                    <p data-nodeid=\"12271\">\n                      <strong data-nodeid=\"14029\">练习题 6</strong\n                      >：给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n                    </p>\n                    <p data-nodeid=\"12272\">示例 :</p>\n                    <p data-nodeid=\"12273\">给定二叉树</p>\n                    <p data-nodeid=\"12274\">1</p>\n                    <p data-nodeid=\"12275\">/ \\</p>\n                    <p data-nodeid=\"12276\">\n                      2 3<br />\n                      / \\\n                    </p>\n                    <p data-nodeid=\"12277\">4 5</p>\n                    <p data-nodeid=\"12278\">\n                      返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\n                    </p>\n                    <blockquote data-nodeid=\"12279\">\n                      <p data-nodeid=\"12280\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/543.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14052\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/543.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14056\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/543.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14060\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"12281\">状态压缩型 DP</h4>\n                    <p data-nodeid=\"12282\">\n                      状态压缩型 DP 的关键就是如何表达 f(x)\n                      函数。这类题目有几个特点：\n                    </p>\n                    <ul data-nodeid=\"12283\">\n                      <li data-nodeid=\"12284\">\n                        <p data-nodeid=\"12285\">\n                          x 往往表示一个数组，并且这个数组是原始数组 A[]\n                          的一个子集：即 A[]\n                          数组中的每个元素可以选，也可以不选；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"12286\">\n                        <p data-nodeid=\"12287\">\n                          直接用哈希或者数组表达 f(x) 都不是特别方便；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"12288\">\n                        <p data-nodeid=\"12289\">原始数组 A[] 并不会特别长。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12290\">\n                      基于这样的一个特点，我们在设计 f(x)\n                      函数的时候，就需要根据以下两个点进行破题：\n                    </p>\n                    <ul data-nodeid=\"12291\">\n                      <li data-nodeid=\"12292\">\n                        <p data-nodeid=\"12293\">A[i] 元素可以选，也可以不选；</p>\n                      </li>\n                      <li data-nodeid=\"12294\">\n                        <p data-nodeid=\"12295\">原始数组 A[] 不会特别长。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12296\">\n                      选和不选，可以用 0/1 来表示，虽然 x\n                      表示的是一个数组，但是我们可以用一个与原始数组等长（或者更长一些）的二进制整数\n                      y 来表示<strong data-nodeid=\"14097\"\n                        >第 i 个 bit 位：0 表示不选 A[i]，1 表示选 A[i]</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"12297\">\n                      这样，就可以通过一个整数 y 表达 x 数组，然后利用数组 dp[y]\n                      表达 f(x)\n                      的状态。下面我们看一下例题。这里用了一个非常简单的整数表示一个数组的信息，所以这种\n                      DP 也被叫作状态压缩 DP。\n                    </p>\n                    <h4 data-nodeid=\"12298\">例 5：N 次操作的最大分数和</h4>\n                    <p data-nodeid=\"12299\">\n                      【<strong data-nodeid=\"14114\">题目</strong>】给你 A[]\n                      ，它是一个大小为 2 * n 的正整数数组。你必须对这个数组执行\n                      n 次操作。在第 i 次操作时（操作编号从 1 开始），你需要：\n                    </p>\n                    <p data-nodeid=\"12300\">Step 1. 选择两个元素 x 和 y 。</p>\n                    <p data-nodeid=\"12301\">Step 2. 获得分数 i * gcd(x, y) 。</p>\n                    <p data-nodeid=\"12302\">Step 3. 将 x 和 y 从 A[] 中删除。</p>\n                    <p data-nodeid=\"12303\">\n                      返回 n 次操作后，请你求解获得的分数和最大为多少。函数\n                      gcd(x, y) 是 x 和 y 的最大公约数。\n                    </p>\n                    <p data-nodeid=\"12304\">输入：A = [3,4,6,8]</p>\n                    <p data-nodeid=\"12305\">输出：11</p>\n                    <p data-nodeid=\"12306\">解释：最优操作是：</p>\n                    <p data-nodeid=\"12307\">\n                      (1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11\n                    </p>\n                    <p data-nodeid=\"12308\">\n                      <strong data-nodeid=\"14139\">注意</strong>：数组最大长度为\n                      14。\n                    </p>\n                    <p data-nodeid=\"12309\">\n                      【<strong data-nodeid=\"14145\">分析</strong\n                      >】当拿到这道题的时候，我们首先进行一下简化，把这个问题转化为一个等价的问题。\n                    </p>\n                    <p data-nodeid=\"12310\">\n                      虽然题目中给定的是删除操作，我们可以把这个删除之后的元素，放到一个数组\n                      C[] 中，操作步骤如下：\n                    </p>\n                    <blockquote data-nodeid=\"12311\">\n                      <p data-nodeid=\"12312\">\n                        (1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12313\">也可以认为是：</p>\n                    <blockquote data-nodeid=\"12314\">\n                      <p data-nodeid=\"12315\">\n                        第 1 次添加：&lt;3, 6&gt; = 1 * gcd(3, 6)), C = [3,\n                        6]<br />\n                        第 2 次添加：&lt;4, 8&gt; = (2 * gcd(4, 8), C = [3, 6,\n                        4, 8]<br />\n                        最终收益 = 11\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12316\">题目就可以简化成如下这样。</p>\n                    <blockquote data-nodeid=\"12317\">\n                      <p data-nodeid=\"12318\">\n                        一开始你有一个空数组 C，以及有元素的数组\n                        A[]，你需要如下操作：\n                      </p>\n                      <ol data-nodeid=\"12319\">\n                        <li data-nodeid=\"12320\">\n                          <p data-nodeid=\"12321\">\n                            从 A 数组中选择两个数 x,y，然后将这两个数从 A[]\n                            中删除；\n                          </p>\n                        </li>\n                        <li data-nodeid=\"12322\">\n                          <p data-nodeid=\"12323\">将这两个数放到 C 中；</p>\n                        </li>\n                        <li data-nodeid=\"12324\">\n                          <p data-nodeid=\"12325\">\n                            获得分数 len(C) / 2 * gcd(x, y)。\n                          </p>\n                        </li>\n                      </ol>\n                      <blockquote data-nodeid=\"12326\">\n                        <p data-nodeid=\"12327\">求如何操作，得到最大分数。</p>\n                      </blockquote>\n                    </blockquote>\n                    <p data-nodeid=\"12328\">\n                      这样<strong data-nodeid=\"14194\">处理的好处</strong\n                      >在于：我们不再需要记录步数信息，只需要看当前数组 C\n                      的大小，就可以得到当前是第几步。即步数 = C 数组大小 / 2。\n                    </p>\n                    <p data-nodeid=\"12329\">\n                      接下来，我们就基于这个稍做改动的等价题目来分析。需要注意两个信息：\n                    </p>\n                    <ul data-nodeid=\"12330\">\n                      <li data-nodeid=\"12331\">\n                        <p data-nodeid=\"12332\">最大值</p>\n                      </li>\n                      <li data-nodeid=\"12333\">\n                        <p data-nodeid=\"12334\">数组本身不会太大</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12335\">\n                      我们首先分析第一个信息，求<strong data-nodeid=\"14207\"\n                        >最大值</strong\n                      >，那么这里我们尝试一下\n                      DP。而第二个信息告诉我们，如果进行暴力搜索，其实状态空间也只有\n                      2<sup>N</sup> 种。并不算特别大。\n                    </p>\n                    <p data-nodeid=\"12336\">\n                      下面我们看一下如何运用好题意给出的这两个重要信息。\n                    </p>\n                    <h4 data-nodeid=\"12337\">1. 最后一步</h4>\n                    <p data-nodeid=\"12338\">\n                      当我们执行到最后一步的时候，数组中肯定只会剩下两个数了。假设这两个数是\n                      &lt;x, y&gt;，那么<strong data-nodeid=\"14219\"\n                        >最后一步</strong\n                      >，得到的收益就是：\n                    </p>\n                    <blockquote data-nodeid=\"12339\">\n                      <p data-nodeid=\"12340\">\n                        last_step = len(C) + 2 / 2；<br />\n                        last_income = 形成数组 C[] 的最大收益 + last_step *\n                        gcd(x,y)。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12341\">\n                      但是，最终余下的两个数 &lt;x, y&gt;，可以是原始数组 A[]\n                      的任意的两个数。所以我们可以用伪代码表示如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">last_income = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; N; j++): <span class=\"hljs-comment\">//  x = a[j]</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = j + <span class=\"hljs-number\">1</span>; k &lt; N; k++): <span class=\"hljs-comment\">// y = A[k] </span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 数组C[], 再加上最后一步加入的&lt;x,y&gt;，那么长度必然与原始数组A一样长</span>\n</div></li><li><div class=\"code-word\">    last_step = len(C) + <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">2</span> 即 len(A) / <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\">    last_income = max((计算C[]数组的收益 + last_step * gcd(A[j], A[k]), \n</div></li><li><div class=\"code-word\">                       last_income);\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"12343\">2. 子问题</h4>\n                    <p data-nodeid=\"12344\">\n                      研究最后一步之后，可以发现，要递归计算的是数组 C[] 和数组\n                      A[] 的最大收益，那么子问题可以表示如下：\n                    </p>\n                    <blockquote data-nodeid=\"12345\">\n                      <p data-nodeid=\"12346\">\n                        f(A) 表示数组 A[] 的最大收益；<br />\n                        f(C) 表示数组 C[] 的最大收益。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12347\">\n                      我们可以统一用 f(x) 表示最终问题与子问题：\n                    </p>\n                    <blockquote data-nodeid=\"12348\">\n                      <p data-nodeid=\"12349\">\n                        f(x) 表示 x[] 数组的最大收益；<br />\n                        其中，x[] 是原始数组 A[ ]的子序列。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"12350\">3. 递推关系</h4>\n                    <p data-nodeid=\"12351\">\n                      我们可以利用伪代码，重新表达一下这个递推关系，代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(x[])</span> </span>{ <span class=\"hljs-comment\">// 形成数组x[]的最大收益</span>\n</div></li><li><div class=\"code-word\">  ans = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; N; j++):\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = j + <span class=\"hljs-number\">1</span>; k &lt; N; k++):\n</div></li><li><div class=\"code-word\">      C[] = x.remove_index_item(j, k)\n</div></li><li><div class=\"code-word\">      L = len(x) / <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// C[]数组加入&lt;x,y&gt;之后形成x数组</span>\n</div></li><li><div class=\"code-word\">      ans = max((f(C) + L * gcd(A[j], A[k]), ans);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"12353\">4. f(x) 的表达</h4>\n                    <p data-nodeid=\"12354\">\n                      由于 x 数组肯定是 A 数组的一个子集，并且 A\n                      数组并不是特别大。那么我们可以用二进制串来表示 A[i]\n                      元素是否存在于 x 数组这个关系：\n                    </p>\n                    <ul data-nodeid=\"12355\">\n                      <li data-nodeid=\"12356\">\n                        <p data-nodeid=\"12357\">1 表示 A[i] 存在于 x 数组中；</p>\n                      </li>\n                      <li data-nodeid=\"12358\">\n                        <p data-nodeid=\"12359\">\n                          0 表示 A[i] 不存在于 x 数组中。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"12360\">\n                      在这种情况下，我们可以申请一个数组：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">1</span>&lt;&lt;(len(A))];\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12362\">\n                      然后用 dp[i] 表示 f(x)。其中i这个整数的二进制串表示：A[]\n                      数组的子序列 x[]。\n                    </p>\n                    <h4 data-nodeid=\"12363\">5. 初始条件与边界</h4>\n                    <p data-nodeid=\"12364\">\n                      首先，当数组为空的时候，肯定是没有什么收益的。所以此时\n                      dp[0] = 0。并且，由于我们总是成对地添加元素，所以当 dp[i]\n                      中的下标 i 里面的 bit 1 的个数为奇数（表示 x[]\n                      数组有奇数个元素），这种情况应该是不可能出现的，不需要进行处理。\n                    </p>\n                    <h4 data-nodeid=\"12365\">6. 计算顺序</h4>\n                    <p data-nodeid=\"12366\">\n                      当我们使用更改之后的题目进行处理的时候，就可以直接从 dp[0]\n                      开始计算了。\n                    </p>\n                    <p data-nodeid=\"12367\">\n                      【<strong data-nodeid=\"14339\">代码</strong\n                      >】得到状态压缩之后，我们可以写出代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span></span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">bitCount</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span> ret = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (x != <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      ret += (x &amp; <span class=\"hljs-number\">0x01</span>) == <span class=\"hljs-number\">1</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">      x &gt;&gt;= <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> ret;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">gcd</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span> </span>{ <span class=\"hljs-keyword\">return</span> b == <span class=\"hljs-number\">0</span> ? a : gcd(b, a % b); }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">maxScore</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> total_steps = N &gt;&gt; <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 一共有N个数</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 每个数可以表示存在，或者不存在</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 那么只有两种状态0/1</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 因此，我们可以用二进制位来进行表示</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 由于题目中已经说明n &lt;= 7</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 所以，最多只需要14 bits</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 那么用一个int位，我们就可以表示了</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 所以这里我们申请dp[array_size]</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> array_size = <span class=\"hljs-number\">1</span> &lt;&lt; N;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span>[] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[array_size];\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// dp[0] = 0</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 表示当没有任何数的时候，那么收益肯定为0</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 已经设置过了，这里不用再设置</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 那么接下来就是从余下两个数的时候开始</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 往前推导</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">3</span>; i &lt; array_size; i++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 这里利用GCC内置的计算整的二进制中1的个数的函数</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">int</span> cnt = bitCount(i);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 由于每次需要去掉两个数，当i里面的二进制1的数目为</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 奇数的时候，没有必要计算!</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> ((cnt &amp; <span class=\"hljs-number\">0x01</span>) == <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 当前步数</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 即: 当前我是第几步</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> cur_step = cnt &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 那么我们需要从i里面选两个数</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; N; j++) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 如果i中没有A[j]这个数</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> ((i &amp; (<span class=\"hljs-number\">1</span> &lt;&lt; j)) == <span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = j + <span class=\"hljs-number\">1</span>; k &lt; N; k++) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 如果i中没有A[k]这个数</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> ((i &amp; (<span class=\"hljs-number\">1</span> &lt;&lt; k)) == <span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 这里我们选择A[j], A[k]</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> g = gcd(A[j], A[k]);\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 得分</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> score = cur_step * g;\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 得到去掉i,j之后的状态</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> mask = (<span class=\"hljs-number\">1</span> &lt;&lt; j) | (<span class=\"hljs-number\">1</span> &lt;&lt; k);\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> pre_status = i &amp; ~mask;\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> total = dp[pre_status] + score;\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 选择最大值dp[i]</span>\n</div></li><li><div class=\"code-word\">          dp[i] = Math.max(dp[i], total);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> dp[array_size - <span class=\"hljs-number\">1</span>];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"12369\">\n                      <p data-nodeid=\"12370\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1799.n-%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%86%E6%95%B0%E5%92%8C.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14343\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1799.n-%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%86%E6%95%B0%E5%92%8C.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14347\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1799.n-%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%86%E6%95%B0%E5%92%8C.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14351\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12371\">\n                      <strong data-nodeid=\"14370\">复杂度分析</strong>：当给定 N\n                      个数的时候，一共需要表达 2<sup>N</sup>\n                      种状态，而每种状态在处理时候，需要遍历 N x N\n                      次，所以时间复杂度为 O(2<sup>N</sup> x N x\n                      N)，空间复杂度为\n                      O(2<sup>N</sup>)。虽然看起来很大，但是题目中已经明确说了数组的长度\n                      &lt;= 14（最多只有 7 对数）。\n                    </p>\n                    <p data-nodeid=\"12372\">\n                      【<strong data-nodeid=\"14376\">小结</strong\n                      >】如果你已经掌握了 6 步破解法，相信你可以明白，这道 DP\n                      题目的关键就是 f(x) 的表示。\n                    </p>\n                    <p data-nodeid=\"12373\">\n                      实际上，所有状态压缩题的核心与关键都是在 f (x)\n                      的表示上。为了让你深入学习这种方法，这里我还给你留了一道练习题，希望你可以尝试思考并动手解答。\n                    </p>\n                    <p data-nodeid=\"12374\">\n                      <strong data-nodeid=\"14396\">练习题 7</strong>：给你一个 m\n                      * n 的矩阵 seats\n                      表示教室中的座位分布。如果座位是坏的（不可用），就用 '#'\n                      表示；否则，用 '.' 表示。学生可以看到<strong\n                        data-nodeid=\"14397\"\n                        >左侧、右侧、左上、右上</strong\n                      >这四个方向上紧邻他的学生的答卷，但是看不到直接坐在他前面或者后面的学生的答卷。请你计算并返回该考场可以容纳的一起参加考试且无法作弊的最大学生人数。学生必须坐在状况良好的座位上。\n                    </p>\n                    <p data-nodeid=\"12375\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/61/CioPOWB2zYiAaRzEAAAr6bp4N30004.png\"\n                        alt=\"Drawing 13.png\"\n                        data-nodeid=\"14400\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12376\">输出：4</p>\n                    <p data-nodeid=\"12377\">\n                      解释：教师最多可以让 4\n                      个学生坐在可用的座位上，这样他们就无法在考试中作弊。\n                    </p>\n                    <blockquote data-nodeid=\"12378\">\n                      <p data-nodeid=\"12379\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1349.%E5%8F%82%E5%8A%A0%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14406\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1349.%E5%8F%82%E5%8A%A0%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14410\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1349.%E5%8F%82%E5%8A%A0%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14414\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"12380\">总结</h3>\n                    <p data-nodeid=\"12381\">\n                      在本讲中，我们介绍了通用的 DP 的 6\n                      步破解法，并且罗列了面试中常出现的几种 DP\n                      型题目。这里我还总结了其他一些类型的 DP\n                      题目，你可以参考下图进行专项练习，逐一击破个类型的DP\n                      问题。\n                    </p>\n                    <p data-nodeid=\"12382\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/61/CioPOWB2zZ2AJiVSAARePu3Wkh8895.png\"\n                        alt=\"Drawing 14.png\"\n                        data-nodeid=\"14419\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12383\">\n                      DP 求解的套路基本就是 6\n                      步。不过要熟练运用这种求解方法，你还需要花更多的时间练习。\n                    </p>\n                    <h3 data-nodeid=\"12384\">思考题</h3>\n                    <p data-nodeid=\"12385\">在这里，我再给你留一道思考题。</p>\n                    <p data-nodeid=\"12386\">\n                      <strong data-nodeid=\"14431\">思考题</strong\n                      >：爱丽丝参与一个大致基于纸牌游戏 “21 点”\n                      规则的游戏，描述如下：爱丽丝以 0 分开始，并在她的得分少于\n                      K 分时抽取数字。 抽取时，她从 [1, W]\n                      的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。\n                      每次抽取都是独立的，其结果具有相同的概率。当爱丽丝获得不少于\n                      K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N\n                      的概率是多少？\n                    </p>\n                    <p data-nodeid=\"12387\">输入：N = 10, K = 1, W = 10</p>\n                    <p data-nodeid=\"12388\">输出：1.00000</p>\n                    <p data-nodeid=\"12389\">\n                      说明：爱丽丝得到一张卡，然后停止。\n                    </p>\n                    <blockquote data-nodeid=\"12390\">\n                      <p data-nodeid=\"12391\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/837.%E6%96%B0-21-%E7%82%B9.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14438\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/837.%E6%96%B0-21-%E7%82%B9.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14442\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/837.%E6%96%B0-21-%E7%82%B9.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"14446\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"12392\">\n                      DP 虽然看起来很难，不过掌握我们的 6\n                      步破解法之后，学习起来是不是要更轻松一点了呢？接下来我们将要学习15\n                      | 字符串查找：为什么我最终选择了 BM 算法？记得按时来探险。\n                    </p>\n                    <h3 data-nodeid=\"12393\">附录：题目出处和代码汇总</h3>\n                    <table data-nodeid=\"27090\">\n                      <thead data-nodeid=\"27091\">\n                        <tr data-nodeid=\"27092\">\n                          <th data-nodeid=\"27094\">兑换硬币</th>\n                          <th data-nodeid=\"27095\">\n                            <a\n                              href=\"https://leetcode-cn.com/problems/coin-change/description/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27156\"\n                              >测试平台</a\n                            >\n                          </th>\n                          <th data-nodeid=\"27096\">\n                            代码：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/322.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27160\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/322.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27164\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/322.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27168\"\n                              >Python</a\n                            >\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody data-nodeid=\"27100\">\n                        <tr data-nodeid=\"27101\">\n                          <td data-nodeid=\"27102\">例 1：打劫</td>\n                          <td data-nodeid=\"27103\">\n                            <a\n                              href=\"https://leetcode-cn.com/problems/house-robber/description/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27172\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27104\">\n                            代码：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27176\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27180\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27184\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27105\">\n                          <td data-nodeid=\"27106\">练习题 1</td>\n                          <td data-nodeid=\"27107\">\n                            <a\n                              href=\"https://leetcode-cn.com/problems/house-robber-ii/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27188\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27108\">\n                            代码：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/213.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-ii.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27192\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/213.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-ii.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27196\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/213.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-ii.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27200\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27109\">\n                          <td data-nodeid=\"27110\">例 2：扰乱字符串</td>\n                          <td data-nodeid=\"27111\">\n                            <a\n                              href=\"https://leetcode-cn.com/problems/scramble-string/description/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27204\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27112\">\n                            解法 1：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27208\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27212\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27216\"\n                              >Python</a\n                            ><br />解法 2：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.rec.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27221\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.rec.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27225\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.rec.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27229\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27113\">\n                          <td data-nodeid=\"27114\">练习题 2</td>\n                          <td data-nodeid=\"27115\">\n                            <a\n                              href=\"https://leetcode-cn.com/problems/scramble-string/description/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27233\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27116\">\n                            代码：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.rec.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27237\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.rec.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27241\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/87.%E6%89%B0%E4%B9%B1%E5%AD%97%E7%AC%A6%E4%B8%B2.rec.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27245\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27117\">\n                          <td data-nodeid=\"27118\">例 3</td>\n                          <td data-nodeid=\"27119\">\n                            <a\n                              href=\"https://www.acwing.com/problem/content/2/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27249\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27120\">\n                            代码：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27253\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27257\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27261\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27121\">\n                          <td data-nodeid=\"27122\">练习题 4</td>\n                          <td data-nodeid=\"27123\">\n                            <a\n                              href=\"https://www.acwing.com/problem/content/2/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27265\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27124\">\n                            代码:<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.01.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27269\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.01.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27273\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.01.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27277\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27125\">\n                          <td data-nodeid=\"27126\" class=\"\">练习题 5</td>\n                          <td data-nodeid=\"27127\">\n                            <a\n                              href=\"https://www.acwing.com/problem/content/3/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27281\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27128\">\n                            代码：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.full.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27285\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.full.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27289\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/acwing.full.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27293\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27129\">\n                          <td data-nodeid=\"27130\">练习题 6</td>\n                          <td data-nodeid=\"27131\">\n                            <a\n                              href=\"https://leetcode-cn.com/problems/target-sum/description/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27297\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27132\">\n                            解法 1：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27301\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27305\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27309\"\n                              >Python</a\n                            ><br />解法 2：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.backtrace.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27314\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.backtrace.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27318\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/494.%E7%9B%AE%E6%A0%87%E5%92%8C.backtrace.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27322\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27133\">\n                          <td data-nodeid=\"27134\">例 4</td>\n                          <td data-nodeid=\"27135\">\n                            <a\n                              href=\"https://leetcode-cn.com/problems/house-robber-iii/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27326\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27136\">\n                            代码：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-iii.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27330\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-iii.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27334\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D-iii.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27338\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27137\">\n                          <td data-nodeid=\"27138\">练习题 7</td>\n                          <td data-nodeid=\"27139\">\n                            <a\n                              href=\"https://leetcode-cn.com/problems/diameter-of-binary-tree/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27342\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27140\">\n                            代码：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/543.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27346\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/543.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27350\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/543.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27354\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27141\">\n                          <td data-nodeid=\"27142\">例 5</td>\n                          <td data-nodeid=\"27143\">\n                            <a\n                              href=\"https://leetcode-cn.com/problems/maximize-score-after-n-operations/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27358\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27144\">\n                            代码：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1799.n-%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%86%E6%95%B0%E5%92%8C.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27362\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1799.n-%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%86%E6%95%B0%E5%92%8C.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27366\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1799.n-%E6%AC%A1%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%86%E6%95%B0%E5%92%8C.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27370\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27145\">\n                          <td data-nodeid=\"27146\">练习题 8</td>\n                          <td data-nodeid=\"27147\">\n                            <a\n                              href=\"https://leetcode-cn.com/problems/maximum-students-taking-exam/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27374\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27148\">\n                            代码：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1349.%E5%8F%82%E5%8A%A0%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27378\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1349.%E5%8F%82%E5%8A%A0%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27382\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/1349.%E5%8F%82%E5%8A%A0%E8%80%83%E8%AF%95%E7%9A%84%E6%9C%80%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%95%B0.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27386\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27149\">\n                          <td data-nodeid=\"27150\">思考题</td>\n                          <td data-nodeid=\"27151\">\n                            <a\n                              href=\"https://leetcode-cn.com/problems/new-21-game/description/?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27390\"\n                              >测试平台</a\n                            >\n                          </td>\n                          <td data-nodeid=\"27152\">\n                            代码：<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/837.%E6%96%B0-21-%E7%82%B9.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27394\"\n                              >Java</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/837.%E6%96%B0-21-%E7%82%B9.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27398\"\n                              >C++</a\n                            >/<a\n                              href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/14.DP/837.%E6%96%B0-21-%E7%82%B9.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                              data-nodeid=\"27402\"\n                              >Python</a\n                            >\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n            "}