{"title":"04 | 横向对比主流构建工具，了解构建工具的设计考量","context":"\n                    <p data-nodeid=\"1033\" class=\"\">\n                      现代化前端架构离不开构建工具的加持。构建工具的选择、理解和应用决定了是否能够打造一个流畅且接近完美的开发体验。这一讲，我们通过“横向对比构建工具”这个非常新颖的角度，来了解构建工具背后的架构理念。\n                    </p>\n                    <p data-nodeid=\"1034\">\n                      提到构建工具，作为经验丰富的前端开发者，相信你能列举出不同时代的代表：从\n                      Browserify + Gulp 到 Parcel，从 Webpack 到\n                      Rollup，甚至尤雨溪最近编写的\n                      Vite，相信你也并不陌生。没错，前端发展到现在，构建工具琳琅满目，且已经成熟稳定下来。但这些构建工具的实现和设计非常复杂，甚至出现了“面向构建工具编程”的调侃。\n                    </p>\n                    <p data-nodeid=\"1035\">\n                      事实上，能够熟悉并精通构建工具的开发者凤毛麟角。请注意，<strong\n                        data-nodeid=\"1116\"\n                        >这里的“熟悉并精通”并不是要求你对不同构建工具的配置项目如数家珍，而是真正能把握构建流程</strong\n                      >。在“6\n                      个月就会出现一批新的技术潮流”的前端领域，能始终把握构建工具的奥秘——这也是区分资深架构师和程序员的一个重要标志。\n                    </p>\n                    <p data-nodeid=\"1036\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/03/BB/CgpVE1_hlvWAZJNsAAVR01sbE8E875.png\"\n                        alt=\"Lark20201222-144850.png\"\n                        data-nodeid=\"1119\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1037\">\n                      如何真正了解构建流程，甚至能够自己开发一个构建工具呢？这里我先通过横向比较不同构建工具，让你有一个整体的把控和认知，能够明白构建工具要做什么、怎么做。\n                    </p>\n                    <h3 data-nodeid=\"1038\">\n                      从 Tooling.Report 中，我们能学到什么\n                    </h3>\n                    <p data-nodeid=\"2855\" class=\"te-preview-highlight\">\n                      <a\n                        href=\"https://bundlers.tooling.report/\"\n                        data-nodeid=\"2858\"\n                        >Tooling.Report</a\n                      >\n                      是由 Chrome core team\n                      核心成员以及业内著名开发者打造的构建工具比对平台，其对应\n                      GitHub 地址为：<a\n                        href=\"https://github.com/GoogleChromeLabs/tooling.report\"\n                        data-nodeid=\"2862\"\n                        >GoogleChromeLabs tooling.report</a\n                      >。\n                    </p>\n\n                    <p data-nodeid=\"1040\">\n                      这个平台对比了 Webpack v4、Rollup v2、Parcel\n                      v2、Browserify + Gulp 在不同维度下的表现，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1041\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/03/A8/CgpVE1_gVd-AKiMRAAFXHtN1HLk529.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1133\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1042\">\n                      <p style=\"text-align: center\">构建工具测评对比图</p>\n                    </div>\n                    <p data-nodeid=\"1043\">\n                      我们先看看评测数据：Rollup 得分最高，Parcel\n                      得分最低，Webpack 和 Rollup 得分接近。测评通过的 test\n                      得分只是一个方面，实际情况也和不同构建工具的设计目标有关。\n                    </p>\n                    <p data-nodeid=\"1044\">\n                      比如，Webpack 的构建主要依赖了插件和\n                      loader，因此它的能力虽然强大，但配置信息较为烦琐。而\n                      Parcel\n                      的设计目标之一就是零配置，开箱即用，但是在功能的集成上相对有限。\n                    </p>\n                    <p data-nodeid=\"1045\">\n                      从横向发展来看，各大构建工具之间也在互相借鉴发展。比如，以\n                      <strong data-nodeid=\"1153\">Webpack</strong>\n                      为首的工具中，历史上编译构建速度较慢，<strong\n                        data-nodeid=\"1154\"\n                        >即便监听文件启动增量构建，也无法解决初始时构建时间过长的问题</strong\n                      >。而\n                      <strong data-nodeid=\"1155\"\n                        >Parcel 主要内置了多核并行构建</strong\n                      >，利用多线程实现编译能力，在初始构建阶段就能获得较理想的构建速度。同时\n                      Parcel 还<strong data-nodeid=\"1156\"\n                        >内置了文件系统缓存</strong\n                      >，可以保存每个文件的编译结果。这一方面 Webpack\n                      新版本（v5）也都有相应跟进。\n                    </p>\n                    <p data-nodeid=\"1046\">\n                      因此，在构建工具的横向对比上，功能是否强大是一方面，而<strong\n                        data-nodeid=\"1162\"\n                        >构建效率</strong\n                      >也将会是开发者考虑的核心指标。\n                    </p>\n                    <p data-nodeid=\"1047\">\n                      那么对于构建工具来说，在一个现代化的项目中，哪些功能是“必备”的呢？从这些功能上，我们能学习到哪些基建和工程化知识呢？\n                    </p>\n                    <p data-nodeid=\"1048\">\n                      我们还是从上面的分数出发，分析具体的测试维度。\n                    </p>\n                    <p data-nodeid=\"1049\">这些分数来自以下 6 个维度的评测：</p>\n                    <ul data-nodeid=\"1050\">\n                      <li data-nodeid=\"1051\">\n                        <p data-nodeid=\"1052\">Code Splitting</p>\n                      </li>\n                      <li data-nodeid=\"1053\">\n                        <p data-nodeid=\"1054\">Hashing</p>\n                      </li>\n                      <li data-nodeid=\"1055\">\n                        <p data-nodeid=\"1056\">Importing Modules</p>\n                      </li>\n                      <li data-nodeid=\"1057\">\n                        <p data-nodeid=\"1058\">Non-JavaScript Resources</p>\n                      </li>\n                      <li data-nodeid=\"1059\">\n                        <p data-nodeid=\"1060\">Output Module Formats</p>\n                      </li>\n                      <li data-nodeid=\"1061\">\n                        <p data-nodeid=\"1062\">Transformations</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1063\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8B/D0/CgqCHl_gVeyAEgAmAAH_-9zFwV8373.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1174\"\n                      />\n                    </p>\n                    <ul data-nodeid=\"1064\">\n                      <li data-nodeid=\"1065\">\n                        <p data-nodeid=\"1066\">\n                          在 Code Splitting 方面，Rollup 表现最好，这是 Rollup\n                          现代化的一个重要体现，而 Browserify 表层最差；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1067\">\n                        <p data-nodeid=\"1068\">\n                          在 Hashing、Importing Modules 以及 Transformation\n                          方面，各大构建工具表现相对趋近；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1069\">\n                        <p data-nodeid=\"1070\">\n                          在 Output Module Formats 上，除了\n                          Browserify，其他工具表现相对一致。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1811\" class=\"\">\n                      这里需要你深入思考：这 6\n                      个维度到底是什么，为什么它们能作为考量指标被选取为评测参考标准？实际上，这个问题反映的技术信息是：<strong\n                        data-nodeid=\"1817\"\n                        >一个现代化构建工具或构建方案，需要重点考量/实现哪些环节</strong\n                      >？\n                    </p>\n\n                    <p data-nodeid=\"1072\">下面我们逐一进行分析。</p>\n                    <h4 data-nodeid=\"1073\">Code Splitting</h4>\n                    <p data-nodeid=\"1074\">\n                      <strong data-nodeid=\"1198\"\n                        >Code Splitting，即代码分割</strong\n                      >。这意味着在构建打包时，能够<strong data-nodeid=\"1199\"\n                        >导出公共模块，避免重复打包</strong\n                      >，以及<strong data-nodeid=\"1200\"\n                        >在页面加载运行时，实现最合理的按需加载策略</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1075\">\n                      实际上，Code Splitting\n                      是一个很大的话题。比如：不同模块间的代码分割机制能否支持不同的上下文环境（Web\n                      worker 环境等特殊上下文情况），如何实现对 Dynamic Import\n                      语法特性的支持，应用配置多入口/单入口时是否支持重复模块的抽取并打包，代码模块间是否支持\n                      Living Bindings（如果被依赖的 module\n                      中的值发生了变化，则会映射到所有依赖该值的模块中）。\n                    </p>\n                    <p data-nodeid=\"1076\">\n                      Code Splitting 是现代化构建工具的标配，因为它<strong\n                        data-nodeid=\"1207\"\n                        >直接决定了前端的静态资源产出情况</strong\n                      >，影响着项目应用的性能表现。这方面的更多内容，我将会在“代码拆分和按需加载：缩减\n                      bundle size，把性能做到极致”一讲中深入分析。\n                    </p>\n                    <h4 data-nodeid=\"1077\">Hashing</h4>\n                    <p data-nodeid=\"1078\">\n                      <strong data-nodeid=\"1221\"\n                        >Hashing，即对打包资源进行版本信息映射</strong\n                      >。这个话题背后的重要技术点是<strong data-nodeid=\"1222\"\n                        >最大化地利用缓存机制</strong\n                      >。我们知道有效的缓存策略将直接影响页面加载表现，决定用户体验。那么对于构建工具来说，为了实现更合理的\n                      hash\n                      机制，构建工具就需要分析各种打包资源，导出模块间依赖关系，依据依赖关系上下文决定产出包的哈希值。因为一个资源的变动，将会引起其依赖下游的关联资源变动，因此<strong\n                        data-nodeid=\"1223\"\n                        >构建工具进行打包的前提就是对各个模块依赖关系进行分析，并根据依赖关系，支持开发者自行定义哈希策略</strong\n                      >（比如，Webpack 提供的不同类型 hash\n                      的区别：hash/chunkhash/contenthash）。\n                    </p>\n                    <p data-nodeid=\"1079\">\n                      这就涉及一个知识点：如何区分 Webpack 中的\n                      hash/chunkhash/contenthash？\n                    </p>\n                    <ul data-nodeid=\"1080\">\n                      <li data-nodeid=\"1081\">\n                        <p data-nodeid=\"1082\">\n                          <strong data-nodeid=\"1229\"\n                            >hash 反映了项目的构建版本</strong\n                          >，因此同一次构建过程中生成的 hash\n                          都是一样的。换句话说，如果项目里某个模块发生更改，触发项目的重新构建，那么文件的\n                          hash 值将会相应地改变。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1083\">\n                        <p data-nodeid=\"1084\">\n                          如果使用 hash\n                          策略，存在一个问题：即使某个模块的内容压根没有改变，但是重新构建后会产生一个新的\n                          hash 值，使得缓存命中率较低。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1085\">\n                        <p data-nodeid=\"1086\">\n                          针对以上问题，chunkhash 和 contenthash\n                          就不一样了，<strong data-nodeid=\"1236\"\n                            >chunkhash\n                            会根据入口文件（Entry）进行依赖解析</strong\n                          >。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1087\">\n                        <p data-nodeid=\"1088\">\n                          contenthash 则会根据文件具体内容，生成 hash 值。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1089\">\n                      我们来具体分析下，假设我们的应用项目中做到了把公共库和业务项目入口文件区分开单独进行打包，<strong\n                        data-nodeid=\"1243\"\n                        >采用 chunkhash\n                        策略，如果改动了业务项目入口文件，就不会引起公共库的\n                        hash 值改变</strong\n                      >。对应以下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">entry:{\n</div></li><li><div class=\"code-word\">    main: path.join(__dirname,<span class=\"hljs-string\">'./main.js'</span>),\n</div></li><li><div class=\"code-word\">    vendor: [<span class=\"hljs-string\">'react'</span>]\n</div></li><li><div class=\"code-word\">},\n</div></li><li><div class=\"code-word\">output:{\n</div></li><li><div class=\"code-word\">    path:path.join(__dirname,<span class=\"hljs-string\">'./build'</span>),\n</div></li><li><div class=\"code-word\">    publicPath: <span class=\"hljs-string\">'/build/'</span>,\n</div></li><li><div class=\"code-word\">    filname: <span class=\"hljs-string\">'bundle.[chunkhash].js'</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1091\">\n                      我们再看一个例子，在 index.js 中出现了对 index.css\n                      的引用：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">require(<span class=\"hljs-string\">'./index.css'</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1093\">\n                      此时因为 index.js 和 index.css\n                      具有依赖关系，所以共用相同的 chunkhash 值。如果 index.js\n                      内容发生变化，index.css 即使没有改动，在使用 chunkhash\n                      策略时，被单独拆分的 index.css 的 hash\n                      值也发生了变化。如果想让 index.css 完全根据文件内容来确定\n                      hash 值，就可以使用 contenthash 策略了。\n                    </p>\n                    <p data-nodeid=\"1094\">\n                      实际上，Webpack 的 hash\n                      策略已经变得比较完善和成熟了。更多内容我在这里只做启发和串联，其中具体的设计思路，你可以参考：<a\n                        href=\"https://medium.com/@sahilkkrazy/hash-vs-chunkhash-vs-contenthash-e94d38a32208\"\n                        data-nodeid=\"1249\"\n                        >Hash vs chunkhash vs ContentHash</a\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"1095\">Importing Modules</h4>\n                    <p data-nodeid=\"1096\">\n                      <strong data-nodeid=\"1258\"\n                        >Importing Modules，即依赖机制</strong\n                      >。当然它对于一个构建流程或工具来说非常重要，因为历史和设计原因，前端开发者一般要面对包括\n                      ESM、CommonJS\n                      等不同模块化方案。而一个构建工具的设计当然也就要兼容不同类型的\n                      modules importing 方案。除此之外，由于 Node.js 的 npm\n                      机制设计，构建工具也要支持对从 node_modules\n                      引入公共包的支持。\n                    </p>\n                    <h4 data-nodeid=\"1097\">Non-JavaScript Resources</h4>\n                    <p data-nodeid=\"1098\">\n                      <strong data-nodeid=\"1264\"\n                        >Non-JavaScript Resources，是指对其他非 JavaScript\n                        类型资源导入的支持能力</strong\n                      >。这里的 Non-JavaScript Resources 可以是 HTML 文档、CSS\n                      样式资源、JSON\n                      资源、富媒体资源等。这些资源也是构成一个应用的关键内容，构建流程/工具当然要进行理解和支持。\n                    </p>\n                    <h4 data-nodeid=\"1099\">Output Module Formats</h4>\n                    <p data-nodeid=\"1100\">\n                      Output Module Formats 对应上面的 Importing Modules\n                      话题。构建输出内容的模块化方式也需要更加灵活，比如开发者可配置\n                      ESM、CommonJS\n                      等规范的构建内容导出。这方面内容我也会在“现代化前端开发和架构生态篇”中带你做更深入的分析。\n                    </p>\n                    <h4 data-nodeid=\"1101\">Transformations</h4>\n                    <p data-nodeid=\"1102\">\n                      Transformations，现代化前端开发离不开编译/转义过程。比如对\n                      JavaScript\n                      代码的压缩、对无用代码的删除（DCE）等。这里需要注意的是，<strong\n                        data-nodeid=\"1273\"\n                        >我们在设计构建工具时，对于类似 JSX 的编译、.vue\n                        文件的编译，不会内置到构建工具当中，而是利用 Babel\n                        等社区能力，“无缝融合”到构建流程里</strong\n                      >。构建工具只做构建分内的事情，其他扩展能力通过插件化机制来完成，显然是一个合理而必要的设计。\n                    </p>\n                    <p data-nodeid=\"1103\">\n                      以上 6\n                      个维度内容，都能展开作为一个独立且丰富的话题深入。设计这节内容是因为我希望你能从大局观上，对构建流程和构建工具要做哪些事情、为什么要做这些事情有一个更清晰的认知。你也可以在<a\n                        href=\"https://bundlers.tooling.report/\"\n                        data-nodeid=\"1277\"\n                        >Tooling.Report</a\n                      >中挖掘到更多内容。\n                    </p>\n                    <h3 data-nodeid=\"1104\">总结</h3>\n                    <p data-nodeid=\"1105\">\n                      这一节我们从<a\n                        href=\"https://bundlers.tooling.report/\"\n                        data-nodeid=\"1283\"\n                        >Tooling.Report</a\n                      >入手，根据其集成分析的结果，横向对比了各大构建工具。\n                    </p>\n                    <p data-nodeid=\"1106\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8B/C5/Ciqc1F_gVo-AS0nFAADyzXOR718143.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"1287\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1107\">\n                      其实对比只是一方面，更重要的是我们需要通过对比结果，去了解各构建工具需要做哪些事情？基础建设和工程化要考虑哪些事情？搞清楚这些信息，我们就能站在更高的视角，进行技术选型，审视工程化和基础建设。下一讲，我将带你深入\n                      Vite 实现源码，来了解当下前端构建工具的“风口浪尖”。\n                    </p>\n                    <p data-nodeid=\"1108\" class=\"\">\n                      这里也给大家留一个思考题：Tooling.Report\n                      的跑分代码是如何实现的？欢迎在留言区和我分享你的观点。我们下一讲再见。\n                    </p>\n            "}