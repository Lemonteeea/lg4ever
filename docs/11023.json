{"title":"第20讲：详解组件通信之状态管理","context":"\n                    <p data-nodeid=\"2155\">\n                      在第 18 讲中我们详细分析了组件的 3\n                      个要素：数据模型、渲染和视图。虽然通过组件化的方式能够有效地将\n                      Web\n                      页面进行解耦，但另一个问题也随之出现，组件之间如何进行通信。这一讲我们就来分析组件化\n                      Web 应用中的组件通信问题。\n                    </p>\n\n                    <h3 data-nodeid=\"1316\">全局状态</h3>\n                    <p data-nodeid=\"1317\">\n                      对于父子组件通信，框架都已给出可行的解决方案：父组件通过\n                      prop(s)\n                      属性向子组件传参，子组件通过自定义事件来向父组件发送消息。而非父子组件之间，如果通过层层传递，这个过程就会变得相当麻烦。最简单的直接解决方式就是设置一个供多个组件共享的全局变量，但如果直接使用全局变量会存在一些问题，比如：\n                    </p>\n                    <ul data-nodeid=\"1318\">\n                      <li data-nodeid=\"1319\">\n                        <p data-nodeid=\"1320\">\n                          可能多个组件会同时修改变量值，这个过程无法追踪，调试问题也会变得很麻烦；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1321\">\n                        <p data-nodeid=\"1322\">\n                          当全局变量值发生变化时，如何通知引用它的每一个组件？\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"1323\">1.状态管理库的特点</h4>\n                    <p data-nodeid=\"1324\">\n                      针对这些问题，一些状态管理库出现了，我们重点分析用于 Vue\n                      的 Vuex 和用于 React 的\n                      Redux，所谓的“状态”，就是不同组件之间传递和引用的数据模型。状态管理库具有\n                      3 个特点：<strong data-nodeid=\"1386\"\n                        >可预测、中心化、可调式</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1325\">\n                      <strong data-nodeid=\"1390\">可预测</strong>\n                    </p>\n                    <p data-nodeid=\"1326\">\n                      可预测性指的是，如果状态 A 经过操作 B 会生成状态\n                      C，那么不论在任何时刻、任何平台（客户端、服务端、App\n                      端），只要 A 和 B 不发生变化，就能得到同样的结果\n                      C。比如下面代码中的函数就是不可预测的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getTime</span>(<span class=\"hljs-params\"></span>) </span>{ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getDom</span>(<span class=\"hljs-params\">id</span>) </span>{ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">document</span>.getElementById(id) \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1328\">\n                      getTime() 函数在不同时刻会得到不同的值，getDom()\n                      函数只能在网页上运行，所以结果都是不可预测的。而下面的函数都是可预测的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">nextDay</span>(<span class=\"hljs-params\">time</span>) </span>{ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(time + <span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">24</span>) \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">filter</span>(<span class=\"hljs-params\">a, b</span>) </span>{ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> a + b \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1330\">\n                      可预测性只是纯函数的优势之一，后面我们在讲函数式编程的时候再详细介绍纯函数相关的内容。\n                    </p>\n                    <p data-nodeid=\"1331\">\n                      <strong data-nodeid=\"1397\">中心化</strong>\n                    </p>\n                    <p data-nodeid=\"1332\">\n                      Vuex 和 Redux\n                      都只会构建一棵中心化的状态树，所有的状态数据都会作为子属性挂载到这棵树上，非常有默契。\n                    </p>\n                    <p data-nodeid=\"1333\">\n                      <strong data-nodeid=\"1402\">可调式</strong>\n                    </p>\n                    <p data-nodeid=\"1334\">\n                      可调式指的是可以利用浏览器插件，对状态的变化和使用情况进行追踪和调试。Vuex\n                      提供了\n                      <a\n                        href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd\"\n                        data-nodeid=\"1406\"\n                        >Vue.js devtools</a\n                      >插件，Redux 也提供了\n                      <a\n                        href=\"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\"\n                        data-nodeid=\"1410\"\n                        >Redux DevTools</a\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"1335\">2.状态管理库实现原理</h4>\n                    <p data-nodeid=\"1336\">\n                      了解状态管理库特性之后，我们再对<strong data-nodeid=\"1422\"\n                        >写</strong\n                      >和<strong data-nodeid=\"1423\">读</strong\n                      >这两个核心操作的源码进行分析。\n                    </p>\n                    <p data-nodeid=\"1337\">\n                      <strong data-nodeid=\"1427\"\n                        >Vuex（3.5.1）中修改状态</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1338\">\n                      下面是一段简单的示例代码，从代码中我们可以看到，通过执行\n                      store.commit('increment') 来调用 mutation 中的 increment()\n                      函数，从而达到修改状态的操作。所以我们来分析 commit()\n                      函数的实现原理。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-keyword\">new</span> Vuex.Store({ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">state</span>: { \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">  }, \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">mutations</span>: { \n</div></li><li><div class=\"code-word\">    increment(state,&nbsp;payload)&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.count&nbsp;+=&nbsp;payload \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">}) \n</div></li><li><div class=\"code-word\">store.commit(<span class=\"hljs-string\">'increment'</span>, <span class=\"hljs-number\">1</span>) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(store.state.count) <span class=\"hljs-comment\">// -&gt; 1 </span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1340\">\n                      commit 部分源码如下所示，从代码中可以看出，首先通过\n                      mutations[type] 获取 store 初始化时 mutations\n                      对象下的属性（以下简称为“mutations”），在示例代码中，type\n                      的值为 increment。因为 Vuex\n                      提供了模块机制，不同模块下可能出现相同名称的\n                      mutations，所以保存为数组的形式。\n                    </p>\n                    <p data-nodeid=\"1341\">\n                      然后调用 _withCommit() 函数，将当前变量 _committing 赋值为\n                      true，执行完回调函数后再还原为之前的值。这个回调函数则会遍历执行\n                      mutations。其中 payload 为调用 commit\n                      时传入的参数，对应示例代码中的数值 1。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">Store.prototype.commit = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">commit</span> (<span class=\"hljs-params\">_type, _payload, _options</span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">var</span> this$<span class=\"hljs-number\">1</span> = <span class=\"hljs-built_in\">this</span>; \n</div></li><li><div class=\"code-word\">  ... \n</div></li><li><div class=\"code-word\">&nbsp; var mutation = { <span class=\"hljs-attr\">type</span>: type, <span class=\"hljs-attr\">payload</span>: payload }; \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">var</span> entry = <span class=\"hljs-built_in\">this</span>._mutations[type]; \n</div></li><li><div class=\"code-word\">  ... \n</div></li><li><div class=\"code-word\">&nbsp; this._withCommit(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; entry.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">commitIterator</span> (<span class=\"hljs-params\">handler</span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; handler(payload); \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }); \n</div></li><li><div class=\"code-word\">&nbsp; }); \n</div></li><li><div class=\"code-word\">&nbsp; ... \n</div></li><li><div class=\"code-word\">}; \n</div></li><li><div class=\"code-word\">Store.prototype._withCommit = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_withCommit</span> (<span class=\"hljs-params\">fn</span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">var</span> committing = <span class=\"hljs-built_in\">this</span>._committing; \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>._committing = <span class=\"hljs-literal\">true</span>; \n</div></li><li><div class=\"code-word\">&nbsp; fn(); \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>._committing = committing; \n</div></li><li><div class=\"code-word\">}; \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1343\">\n                      <strong data-nodeid=\"1446\"\n                        >Vuex（3.5.1）中读取状态</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1344\">\n                      Vuex 在进行初始化的时候会在内部创建一个 Vue\n                      实例，并且赋值给 store._vm\n                      属性，在这个实例中创建了数据模型 $$state，$$state\n                      的初始值即为我们在初始化 store 时的 state\n                      属性，对应示例代码中的对象 {count: 1}。这个 $$state 属性在\n                      mutations 中以及通过 store.state 访问时都会用到。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">store._vm = <span class=\"hljs-keyword\">new</span> Vue({ \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-attr\">data</span>: { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">$$state</span>: state \n</div></li><li><div class=\"code-word\">&nbsp; }, \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-attr\">computed</span>: computed \n</div></li><li><div class=\"code-word\">}); \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1346\">\n                      然后对原型对象 Store.prototype 的属性 state\n                      进行劫持，当读取 store.state 时将返回\n                      _vm._data.$$state。这样当通过 mutations\n                      修改它的时候，就能即时返回最新的值了。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.defineProperties( Store.prototype, prototypeAccessors$<span class=\"hljs-number\">1</span> ); \n</div></li><li><div class=\"code-word\">prototypeAccessors$<span class=\"hljs-number\">1.</span>state.get = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._vm._data.$$state \n</div></li><li><div class=\"code-word\">}; \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1348\">\n                      <strong data-nodeid=\"1458\"\n                        >Redux（4.0.5）中修改状态</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1349\">\n                      下面是官方给出的一段简单的 Redux\n                      示例代码，从中可以看到，通过 store.dispatch()\n                      函数来触发状态更新，通过 store.getState()\n                      函数来获取当前状态信息。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">counter</span>(<span class=\"hljs-params\">state = <span class=\"hljs-number\">0</span>, action</span>) </span>{ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">switch</span> (action.type) { \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'INCREMENT'</span>: \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> state + <span class=\"hljs-number\">1</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'DECREMENT'</span>: \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> state - <span class=\"hljs-number\">1</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">default</span>: \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> state \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> store = createStore(counter) \n</div></li><li><div class=\"code-word\">store.subscribe(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(store.getState())) \n</div></li><li><div class=\"code-word\">store.dispatch({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'INCREMENT'</span> })<span class=\"hljs-comment\">// 1 </span>\n</div></li><li><div class=\"code-word\">store.dispatch({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'INCREMENT'</span> })<span class=\"hljs-comment\">// 2 </span>\n</div></li><li><div class=\"code-word\">store.dispatch({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'DECREMENT'</span> })<span class=\"hljs-comment\">// 1 </span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1351\">\n                      dispatch() 函数是用来分发 action\n                      的，可以把它理解成用于触发数据更新的方法。它的实现非常简单，部分源码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">dispatch</span>(<span class=\"hljs-params\">action</span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; ... \n</div></li><li><div class=\"code-word\">    try { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; isDispatching = <span class=\"hljs-literal\">true</span>; \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; currentState = currentReducer(currentState, action); \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } <span class=\"hljs-keyword\">finally</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; isDispatching = <span class=\"hljs-literal\">false</span>; \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; ... \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; return action; \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1353\">\n                      dispatch() 函数会以当前的状态 currentState\n                      以及我们定义的动作 action 作为参数来调用 currentReducer()\n                      函数，该函数对应示例代码中的 counter() 函数。\n                    </p>\n                    <p data-nodeid=\"1354\">\n                      <strong data-nodeid=\"1465\"\n                        >Redux（4.0.5）中读取状态</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1355\">\n                      getState()\n                      函数的代码实现比较简单，首先判断是否为分发状态，如果是则抛出错误，否则直接返回\n                      currentState，而 currentState 的值在 dispatch()\n                      函数执行时就已经被更新了。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getState</span>(<span class=\"hljs-params\"></span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (isDispatching) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'You may not call store.getState() while the reducer is executing. '</span> + <span class=\"hljs-string\">'The reducer has already received the state as an argument. '</span> + <span class=\"hljs-string\">'Pass it down from the top reducer instead of reading it from the store.'</span>); \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> currentState; \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"1357\">其他组件通信方式</h3>\n                    <p data-nodeid=\"1358\">\n                      选用状态管理库并不是解决跨组件传递数据的唯一方式，下面再介绍\n                      2 种方式也能提供跨组件通信，以 Vue 为例进行讲解。\n                    </p>\n                    <h4 data-nodeid=\"1359\">1.全局上下文</h4>\n                    <p data-nodeid=\"1360\">\n                      在 Vue 中，提供了一组 API\n                      用来解决祖先组件与子孙组件的通信问题，那就是 provide 和\n                      inject。provide\n                      可以在祖先组件中指定我们想要提供给子孙组件的数据或方法，而在任何子孙组件中，我们都可以使用\n                      inject 来接收 provide 提供的数据或方法。\n                    </p>\n                    <p data-nodeid=\"1361\">\n                      下面的示例代码中，根组件通过 provide()\n                      函数将数据模型的属性 o 暴露给子孙组件，子孙组件则通过\n                      inject 属性来声明对属性 o\n                      的引用。这样相当于组件之间共享了属性\n                      o，因为只要任何一处修改了 o.count\n                      属性，其他各处也会随之发生变化。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">&lt;div&nbsp;id=<span class=\"hljs-string\">\"app\"</span>&gt; \n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&nbsp;<span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">\"o.count++\"</span>&gt;</span>{{o.count}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span> \n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter</span>&gt;</span></span> \n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter</span>&gt;</span></span> \n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter</span>&gt;</span></span> \n</div></li><li><div class=\"code-word\">&lt;/div&gt; \n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"> \n</span></span></div></li><li><div class=\"code-word\">Vue.component(<span class=\"hljs-string\">'button-counter'</span>,&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-attr\">inject</span>:&nbsp;[<span class=\"hljs-string\">'o'</span>], \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-attr\">methods</span>:&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;click()&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">this</span>.o.count++ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;}, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-attr\">template</span>:&nbsp;<span class=\"hljs-string\">'&lt;button&nbsp;v-on:click=\"click\"&gt;You&nbsp;clicked&nbsp;me&nbsp;{{&nbsp;o.count&nbsp;}}&nbsp;times.&lt;/button&gt;'</span> \n</div></li><li><div class=\"code-word\">}) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;app&nbsp;=&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;Vue({ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-attr\">el</span>:&nbsp;<span class=\"hljs-string\">'#app'</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-attr\">data</span>:&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">o</span>:&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">count</span>:&nbsp;<span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;}, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;provide()&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">o</span>:&nbsp;<span class=\"hljs-built_in\">this</span>.o \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">}) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> \n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"1363\">2.事件监听</h4>\n                    <p data-nodeid=\"1364\">\n                      事件监听则是利用组件库本身的事件机制，设置一个全局事件代理，用来负责向各个组件传递数据。\n                    </p>\n                    <p data-nodeid=\"1365\">\n                      下面是一个简单的示例。创建一个 Vue 实例 eventBus，然后通过\n                      Object.defineProperty 将其注入 Vue\n                      组件中，这样在组件中就可以通过 this.$bus 来访问这个 Vue\n                      实例了。当任何一个组件按钮被点击时，通过事件冒泡\n                      this.$bus.$emit 来传入新的状态，其他组件则通过事件监听\n                      this.$bus.$on 来获取最新的状态。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">&lt;div&nbsp;id=<span class=\"hljs-string\">\"app\"</span>&gt; \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&nbsp;<span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">\"click()\"</span>&gt;</span>{{this.count}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter</span>&gt;</span></span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter</span>&gt;</span></span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button-counter</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button-counter</span>&gt;</span></span> \n</div></li><li><div class=\"code-word\">&lt;/div&gt; \n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"> \n</span></span></div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">var</span>&nbsp;EventBus&nbsp;=&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;Vue(); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-built_in\">Object</span>.defineProperties(Vue.prototype,&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">$bus</span>:&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">get</span>:&nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;(<span class=\"hljs-params\"></span>)&nbsp;</span>{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;EventBus \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;}) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;Vue.component(<span class=\"hljs-string\">'button-counter'</span>,&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;mounted()&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">this</span>.$bus.$on(<span class=\"hljs-string\">'count'</span>,&nbsp;<span class=\"hljs-function\"><span class=\"hljs-params\">c</span>&nbsp;=&gt;</span>&nbsp;<span class=\"hljs-built_in\">this</span>.count&nbsp;=&nbsp;c) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;}, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;data()&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">count</span>:&nbsp;<span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;}, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">methods</span>:&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;click()&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">this</span>.$bus.$emit(<span class=\"hljs-string\">'count'</span>,&nbsp;<span class=\"hljs-built_in\">this</span>.count&nbsp;+&nbsp;<span class=\"hljs-number\">1</span>) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;}, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">template</span>:&nbsp;<span class=\"hljs-string\">'&lt;button&nbsp;v-on:click=\"click\"&gt;You&nbsp;clicked&nbsp;me&nbsp;{{&nbsp;this.count&nbsp;}}&nbsp;times.&lt;/button&gt;'</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;}) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">const</span>&nbsp;app&nbsp;=&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;Vue({ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">el</span>:&nbsp;<span class=\"hljs-string\">'#app'</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">data</span>:&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">count</span>:&nbsp;<span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;}, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;mounted()&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">this</span>.$bus.$on(<span class=\"hljs-string\">'count'</span>,&nbsp;<span class=\"hljs-function\"><span class=\"hljs-params\">c</span>&nbsp;=&gt;</span>&nbsp;<span class=\"hljs-built_in\">this</span>.count&nbsp;=&nbsp;c) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;}, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">methods</span>:&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;click()&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">this</span>.$bus.$emit(<span class=\"hljs-string\">'count'</span>,&nbsp;<span class=\"hljs-built_in\">this</span>.count&nbsp;+&nbsp;<span class=\"hljs-number\">1</span>) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;}) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span> \n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"1367\">总结</h3>\n                    <p data-nodeid=\"1368\">\n                      本讲介绍了 3\n                      种不同的跨组件通信方式。由于通信双方不属于父子组件，也就是没有直接的依赖/引用关系，所以需要借助“第三方”来进行传递数据，这些“第三方”既包括视图库（Vue\n                      和\n                      React）本身提供的事件机制或全局上下文，也包括面向其进行开发的状态管理库。\n                    </p>\n                    <p data-nodeid=\"1369\">\n                      对于最常用的全局状态管理库 Vuex 和\n                      Redux，通过深入分析其源码，理解了其实现原理。Vuex\n                      内部会创建一个 Vue\n                      实例，并使用这个实例的数据模型来做状态更新；而 Redux\n                      则采用了无副作用的纯函数来生成不可变数据。\n                    </p>\n                    <p data-nodeid=\"1370\">\n                      组件库默认提供了全局上下文的方式来解决跨组件通信问题，非常轻量，适合在小型\n                      Web\n                      应用中使用，缺点是追踪调试状态变化比较困难。事件监听的方式也可以不依赖额外的第三方库来实现，但在监听到事件改变时需要在组件内部手动触发视图更新。\n                    </p>\n                    <p data-nodeid=\"2485\">\n                      最后布置一道思考题：你还知道哪些跨组件通信的方式？\n                    </p>\n            "}