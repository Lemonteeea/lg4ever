{"title":"17 | 特别的事件系统：React 事件与 DOM 事件有何不同？","context":"\n                    <p data-nodeid=\"2361\" class=\"\">\n                      相信不少小伙伴在进阶 React\n                      的过程中都会或多或少地了解到这样一件事情：<strong\n                        data-nodeid=\"2497\"\n                        >React 有着自成一派的事件系统</strong\n                      >，它和 DOM\n                      原生事件系统不一样。但到底哪里不一样，却很少有人能够一五一十地说清楚。\n                    </p>\n                    <p data-nodeid=\"2362\">\n                      开篇我们曾经说过，对于不同的知识，需要采取不同的学习策略。就\n                      React\n                      事件系统来说，它涉及的源码量不算小，相关逻辑也不够内聚，整体的理解成本相对较高，可能不少人都被劝退过。\n                    </p>\n                    <p data-nodeid=\"2363\">\n                      幸运的是，无论是在面试场景下，还是在实际的开发中，React\n                      事件相关的问题都更倾向于考验我们对事件工作流、事件特征等<strong\n                        data-nodeid=\"2504\"\n                        >逻辑层面问题</strong\n                      >的理解，而非对源码细节的把握。而事件工作流、事件特征等逻辑层面的“主要矛盾”，正是我们本讲探讨的重点。\n                    </p>\n                    <p data-nodeid=\"2364\">\n                      不管你曾经被 React\n                      源码劝退过多少次，我想只要能好好把握住这一讲，拿下事件系统对你来说仍将是小菜一碟。所以说大家不要怕，跟着我的思路走就完了。\n                    </p>\n                    <p data-nodeid=\"2365\">\n                      作为团队前端框架方向的负责人，我曾经在自研框架的初期，从\n                      React\n                      事件系统相关的设计思想中受益良多。在这一讲，我将基于自己对源码的理解，为你介绍\n                      React 事件系统的工作逻辑。\n                    </p>\n                    <blockquote data-nodeid=\"2366\">\n                      <p data-nodeid=\"2367\">\n                        注：本文逻辑提取自 React 16.13.x。随着 React\n                        版本的更迭，事件系统的实现细节难免有调整，但其设计思想总是一脉相承的，你只要把握住核心逻辑即可。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"2368\">回顾原生 DOM 下的事件流</h3>\n                    <p data-nodeid=\"2369\">\n                      这些年在考察候选人的过程中，我发现了一件非常有趣的事情：一些同学提起前端框架时能够滔滔不绝，可说到\n                      DOM\n                      基础时却开始胡言乱语。这或许只有在当下这个前端发展阶段才会有的魔幻现实主义现象，但<strong\n                        data-nodeid=\"2514\"\n                        >要想理解好 React 事件机制，就必须对原生 DOM\n                        事件流有扎实的掌握</strong\n                      >。因此在文章的开篇，我们先来简单复习一下 DOM\n                      事件流是如何工作的。\n                    </p>\n                    <p data-nodeid=\"2370\">\n                      在浏览器中，我们通过事件监听来实现 JS 和 HTML\n                      之间的交互。一个页面往往会被绑定许许多多的事件，而页面接收事件的顺序，就是<strong\n                        data-nodeid=\"2520\"\n                        >事件流</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2371\">\n                      W3C 标准约定了一个事件的传播过程要经过以下 3 个阶段：\n                    </p>\n                    <ol data-nodeid=\"2372\">\n                      <li data-nodeid=\"2373\">\n                        <p data-nodeid=\"2374\">事件捕获阶段</p>\n                      </li>\n                      <li data-nodeid=\"2375\">\n                        <p data-nodeid=\"2376\">目标阶段</p>\n                      </li>\n                      <li data-nodeid=\"2377\">\n                        <p data-nodeid=\"2378\">事件冒泡阶段</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2379\">\n                      理解这个过程最好的方式就是读图了，下图是一棵 DOM\n                      树的结构简图，图中的箭头就代表着事件的“穿梭”路径。\n                    </p>\n                    <p data-nodeid=\"2380\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/7B/Ciqc1F_KCc2AH3SuAADAfZ2rEXk066.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"2528\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2381\">\n                      当事件被触发时，首先经历的是一个捕获过程：事件会从最外层的元素开始“穿梭”，逐层“穿梭”到最内层元素，这个过程会持续到事件抵达它目标的元素（也就是真正触发这个事件的元素）为止；此时事件流就切换到了“目标阶段”——事件被目标元素所接收；然后事件会被“回弹”，进入到冒泡阶段——它会沿着来时的路“逆流而上”，一层一层再走回去。\n                    </p>\n                    <p data-nodeid=\"2382\">\n                      这个过程很像我们小时候玩的蹦床：从高处下落，触达蹦床后再弹起、回到高处，整个过程呈一个对称的“V”字形。\n                    </p>\n                    <p data-nodeid=\"2383\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/8F/Ciqc1F_KGs2AQ6VHAABqyZCa5L0820.png\"\n                        alt=\"图片15.png\"\n                        data-nodeid=\"2533\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"2384\">\n                      DOM 事件流下的性能优化思路：事件委托\n                    </h3>\n                    <p data-nodeid=\"2385\">\n                      在原生 DOM\n                      中，事件委托（也叫事件代理）是一种重要的性能优化手段。这里我通过一道面试题，来快速地帮你回忆相关的知识。\n                    </p>\n                    <p data-nodeid=\"2386\">请看下面这段代码：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;!DOCTYPE html&gt;\n</div></li><li><div class=\"code-word\">&lt;html lang=\"en\"&gt;\n</div></li><li><div class=\"code-word\">&lt;head&gt;\n</div></li><li><div class=\"code-word\">  &lt;meta charset=\"UTF-8\"&gt;\n</div></li><li><div class=\"code-word\">  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n</div></li><li><div class=\"code-word\">  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"&gt;\n</div></li><li><div class=\"code-word\">  &lt;title&gt;Document&lt;/title&gt;\n</div></li><li><div class=\"code-word\">&lt;/head&gt;\n</div></li><li><div class=\"code-word\">&lt;body&gt;\n</div></li><li><div class=\"code-word\">  &lt;ul id=\"poem\"&gt;\n</div></li><li><div class=\"code-word\">    &lt;li&gt;床前明月光&lt;/li&gt;\n</div></li><li><div class=\"code-word\">    &lt;li&gt;疑是地上霜&lt;/li&gt;\n</div></li><li><div class=\"code-word\">    &lt;li&gt;举头望明月&lt;/li&gt;\n</div></li><li><div class=\"code-word\">    &lt;li&gt;低头思故乡&lt;/li&gt;\n</div></li><li><div class=\"code-word\">    &lt;li&gt;锄禾日当午&lt;/li&gt;\n</div></li><li><div class=\"code-word\">    &lt;li&gt;汗滴禾下土&lt;/li&gt;\n</div></li><li><div class=\"code-word\">    &lt;li&gt;谁知盘中餐&lt;/li&gt;\n</div></li><li><div class=\"code-word\">    &lt;li&gt;粒粒皆辛苦&lt;/li&gt;\n</div></li><li><div class=\"code-word\">    &lt;li&gt;背不动了&lt;/li&gt;\n</div></li><li><div class=\"code-word\">    &lt;li&gt;我背不动了&lt;/li&gt;\n</div></li><li><div class=\"code-word\">  &lt;/ul&gt;\n</div></li><li><div class=\"code-word\">&lt;/body&gt;\n</div></li><li><div class=\"code-word\">&lt;/html&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2388\">\n                      问：<strong data-nodeid=\"2542\"\n                        >在这段 HTML 渲染出的界面里，我希望做到点击每一个 li\n                        元素，都能输出它内在的文本内容。你会怎么做</strong\n                      >？\n                    </p>\n                    <p data-nodeid=\"2389\">\n                      一个比较直观的思路是让每一个 li\n                      元素都去监听一个点击动作，按照这个思路写出来的代码是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;script&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 获取 li 列表</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> liList = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'li'</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 逐个安装监听函数</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; liList.length; i++) {\n</div></li><li><div class=\"code-word\">    liList[i].addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-built_in\">console</span>.log(e.target.innerHTML)\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&lt;/script&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2391\">\n                      我们当然可以像这样给 10 个 li 安装 10\n                      次监听函数，但这样不仅累，开销也大。10\n                      个监听函数做的还都是一模一样的事情，也不够优雅。怎么办呢？<strong\n                        data-nodeid=\"2549\"\n                        >事件冒泡</strong\n                      >！\n                    </p>\n                    <p data-nodeid=\"2392\">\n                      对于这 10 个 li 来说，无论点击动作发生在哪个 li\n                      上，点击事件最终都会被冒泡到它们共同的父亲——ul\n                      元素上去，所以我们完全可以让 ul 来帮忙感知这个点击事件。\n                    </p>\n                    <p data-nodeid=\"2393\">\n                      既然 ul\n                      可以帮忙感知事件，那它能不能帮忙处理事件呢？答案是能，因为我们有<strong\n                        data-nodeid=\"2556\"\n                        >e.target</strong\n                      >。ul 元素可以通过事件对象中的 target\n                      属性，拿到实际触发事件的那个元素，针对这个元素分发事件处理的逻辑，做到真正的“委托”。\n                    </p>\n                    <p data-nodeid=\"2394\">\n                      按照这个思路，我们就可以丢掉 for\n                      循环来写代码了，以下是用事件代理来实现同样效果的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> ul = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'poem'</span>)\n</div></li><li><div class=\"code-word\">ul.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(e.target.innerHTML)\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2396\">\n                      这里再强调一下 e.target\n                      这个属性，它指的是触发事件的具体目标，它记录着<strong\n                        data-nodeid=\"2563\"\n                        >事件的源头</strong\n                      >。所以说，不管咱们的监听函数在哪一层执行，只要我拿到这个\n                      e.target，就相当于拿到了真正触发事件的那个元素。拿到这个元素后，我们完全可以模拟出它的行为，实现无差别的监听效果。\n                    </p>\n                    <p data-nodeid=\"2397\">\n                      像这样利用事件的冒泡特性，<strong data-nodeid=\"2569\"\n                        >把多个子元素的同一类型的监听逻辑，合并到父元素上通过一个监听函数来管理的行为，就是事件委托</strong\n                      >。通过事件委托，我们可以减少内存开销、简化注册步骤，大大提高开发效率。\n                    </p>\n                    <p data-nodeid=\"2398\">\n                      这绝妙的事件委托，正是 React<strong data-nodeid=\"2575\"\n                        >合成事件</strong\n                      >的灵感源泉。\n                    </p>\n                    <h3 data-nodeid=\"2399\">React 事件系统是如何工作的</h3>\n                    <p data-nodeid=\"2400\">\n                      React 的事件系统沿袭了事件委托的思想。在 React\n                      中，除了少数特殊的不可冒泡的事件（比如媒体类型的事件）无法被事件系统处理外，绝大部分的事件都不会被绑定在具体的元素上，而是统一被绑定在页面的\n                      document 上。<strong data-nodeid=\"2582\"\n                        >当事件在具体的 DOM 节点上被触发后，最终都会冒泡到\n                        document 上，document\n                        上所绑定的统一事件处理程序会将事件分发到具体的组件实例</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2401\">\n                      在分发事件之前，React 首先会对事件进行包装，把原生 DOM\n                      事件包装成<strong data-nodeid=\"2588\">合成事件</strong>。\n                    </p>\n                    <h4 data-nodeid=\"2402\">认识 React 合成事件</h4>\n                    <p data-nodeid=\"2403\">\n                      合成事件是 React 自定义的事件对象，它符合<a\n                        href=\"https://www.w3.org/TR/DOM-Level-3-Events/\"\n                        data-nodeid=\"2593\"\n                        >W3C</a\n                      >规范，<strong data-nodeid=\"2603\"\n                        >在底层抹平了不同浏览器的差异</strong\n                      >，<strong data-nodeid=\"2604\"\n                        >在上层面向开发者暴露统一的、稳定的、与 DOM\n                        原生事件相同的事件接口</strong\n                      >。开发者们由此便不必再关注烦琐的兼容性问题，可以专注于业务逻辑的开发。\n                    </p>\n                    <p data-nodeid=\"4142\" class=\"\">\n                      <strong data-nodeid=\"4151\"\n                        >虽然合成事件并不是原生 DOM 事件，但它保存了原生 DOM\n                        事件的引用</strong\n                      >。当你需要访问原生 DOM 事件对象时，可以通过合成事件对象的\n                      <strong data-nodeid=\"4152\">e.nativeEvent</strong>\n                      属性获取到它，如下图所示：\n                    </p>\n\n                    <p data-nodeid=\"2405\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/86/CgqCHl_KCfyAEJw8AAFeUK36DtI133.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"2617\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2406\">\n                      e.nativeEvent 将会输出 MouseEvent\n                      这个原生事件，如下图所示：\n                    </p>\n                    <p data-nodeid=\"2407\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/86/CgqCHl_KCgOAZixsAACyXDjo4cs933.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"2621\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2408\">\n                      到这里，大家就对 React\n                      事件系统的基本原理，包括合成事件的基本概念有了一定的了解。接下来，我们将在此基础上结合\n                      React 源码和调用栈，对事件系统的工作流进行深入的拆解。\n                    </p>\n                    <h3 data-nodeid=\"2409\">React 事件系统工作流拆解</h3>\n                    <p data-nodeid=\"2410\">\n                      既然是事件系统，那就逃不出“事件绑定”和“事件触发”这两个关键动作。首先让我们一起来看看事件的绑定是如何实现的。\n                    </p>\n                    <h4 data-nodeid=\"2411\">事件的绑定</h4>\n                    <p data-nodeid=\"2412\">\n                      事件的绑定是在组件的挂载过程中完成的，具体来说，<strong\n                        data-nodeid=\"2631\"\n                        >是在 completeWork 中完成的</strong\n                      >。关于 completeWork，我们已经在第 15\n                      讲中学习过它的工作原理，这里需要你回忆起来的是\n                      completeWork 中的以下三个动作：\n                    </p>\n                    <blockquote data-nodeid=\"5333\">\n                      <p data-nodeid=\"5334\" class=\"\">\n                        completeWork 内部有三个关键动作：<strong\n                          data-nodeid=\"5348\"\n                          >创建</strong\n                        >\n                        DOM 节点（createInstance）、将 DOM 节点<strong\n                          data-nodeid=\"5349\"\n                          >插入</strong\n                        >到 DOM 树中（appendAllChildren）、为 DOM 节点<strong\n                          data-nodeid=\"5350\"\n                          >设置属性</strong\n                        >（finalizeInitialChildren）。\n                      </p>\n                    </blockquote>\n\n                    <p data-nodeid=\"2415\">\n                      其中“为 DOM 节点**设置属性”**这个环节，会遍历 FiberNode 的\n                      props key。当遍历到事件相关的 props\n                      时，就会触发事件的注册链路。整个过程涉及的函数调用栈如下图所示：\n                    </p>\n                    <p data-nodeid=\"2416\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/7B/Ciqc1F_KCi-ANLdOAACnuwItpnA575.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"2657\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2417\">\n                      这些函数之间是如何各司其职、打好“配合”的呢？请看下面这张工作流大图：\n                    </p>\n                    <p data-nodeid=\"2418\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/87/CgqCHl_KCjaALFKsAAHNjlT3rrw342.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"2661\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2419\">\n                      从图中可以看出，<strong data-nodeid=\"2667\"\n                        >事件的注册过程是由 ensureListeningTo 函数开启的</strong\n                      >。在 ensureListeningTo 中，会尝试获取当前 DOM\n                      结构中的根节点（这里指的是 document 对象），然后通过调用\n                      legacyListenToEvent，将统一的事件监听函数注册到 document\n                      上面。\n                    </p>\n                    <p data-nodeid=\"2420\">\n                      在 legacyListenToEvent 中，实际上是通过调用\n                      legacyListenToTopLevelEvent 来处理事件和 document\n                      之间的关系的。 legacyListenToTopLevelEvent\n                      直译过来是“监听顶层的事件”，这里的“顶层”就可以理解为事件委托的最上层，也就是\n                      document 节点。在 legacyListenToTopLevelEvent\n                      中，有这样一段逻辑值得我们注意，请看下图：\n                    </p>\n                    <p data-nodeid=\"2421\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/7C/Ciqc1F_KCj6ABv8CAAMpWS1ws8Q056.png\"\n                        alt=\"Drawing 9.png\"\n                        data-nodeid=\"2671\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2422\">\n                      listenerMap 是在 legacyListenToEvent\n                      里创建/获取的一个数据结构，它将记录<strong\n                        data-nodeid=\"2677\"\n                        >当前 document 已经监听了哪些事件</strong\n                      >。在 legacyListenToTopLevelEvent 逻辑的起点，会首先判断\n                      listenerMap.has(topLevelType) 这个条件是否为 true。\n                    </p>\n                    <p data-nodeid=\"2423\">\n                      这里插播一个小的前置知识：topLevelType 在\n                      legacyListenToTopLevelEvent 的函数上下文中代表<strong\n                        data-nodeid=\"2683\"\n                        >事件的类型</strong\n                      >，比如说我尝试监听的是一个点击事件，那么 topLevelType\n                      的值就会是 click，如下图所示：\n                    </p>\n                    <p data-nodeid=\"2424\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/87/CgqCHl_KCkWACHkwAACydURG2fM056.png\"\n                        alt=\"Drawing 10.png\"\n                        data-nodeid=\"2686\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2425\">\n                      若事件系统识别到 listenerMap.has(topLevelType) 为\n                      true，也就是当前这个事件 document\n                      已经监听过了，那么就会直接跳过对这个事件的处理，否则才会进入具体的事件监听逻辑。如此一来，<strong\n                        data-nodeid=\"2692\"\n                        >即便我们在 React\n                        项目中多次调用了对同一个事件的监听，也只会在 document\n                        上触发一次注册</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2426\">\n                      <strong data-nodeid=\"2701\"\n                        >为什么针对同一个事件，即便可能会存在多个回调，document\n                        也只需要注册一次监听</strong\n                      >？因为 React<strong data-nodeid=\"2702\"\n                        >最终注册到 document 上的并不是某一个 DOM\n                        节点上对应的具体回调逻辑，而是一个统一的事件分发函数</strong\n                      >。这里我将断点打在事件监听函数的绑定动作上，请看下图：\n                    </p>\n                    <p data-nodeid=\"2427\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/7C/Ciqc1F_KCk-Afe7QAADMlUnc-KU093.png\"\n                        alt=\"Drawing 11.png\"\n                        data-nodeid=\"2705\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2428\">\n                      在这段逻辑中，element 就是 document 这个 DOM\n                      元素，如下图所示，它在 legacyListenToEvent\n                      阶段被获取后，又被层层的逻辑传递到了这个位置。\n                    </p>\n                    <p data-nodeid=\"2429\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/7C/Ciqc1F_KClaATXVLAAAhVJ6fu48519.png\"\n                        alt=\"Drawing 12.png\"\n                        data-nodeid=\"2709\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2430\">\n                      addEventListener 就更不用多说了，它是<a\n                        href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener\"\n                        data-nodeid=\"2713\"\n                        >原生 DOM 里专门用来注册事件监听器的接口</a\n                      >。我们真正需要关注的是图中这个函数的前两个入参，首先看\n                      eventType，它表示事件的类型，这里我监听的是一个点击事件，因此\n                      eventType 就是 click（见下图的运行时输出结果）。\n                    </p>\n                    <p data-nodeid=\"2431\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/7C/Ciqc1F_KCl-AQUfuAAA3s44GMaI290.png\"\n                        alt=\"Drawing 13.png\"\n                        data-nodeid=\"2717\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2432\">\n                      重点在 listener 上，前面刚说过，最终注册到 document\n                      上的是一个<strong data-nodeid=\"2723\"\n                        >统一的事件分发函数</strong\n                      >，这个函数到底长啥样？我们来看看，以下是运行时的 listener\n                      输出结果：\n                    </p>\n                    <p data-nodeid=\"2433\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/7C/Ciqc1F_KCmeARunyAACxP1sCnKY948.png\"\n                        alt=\"Drawing 14.png\"\n                        data-nodeid=\"2726\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2434\">\n                      可以看到，<strong data-nodeid=\"2732\"\n                        >listener 本体是一个名为 dispatchDiscreteEvent\n                        的函数</strong\n                      >。事实上，根据情况的不同，listener 可能是以下 3\n                      个函数中的任意一个：\n                    </p>\n                    <ol data-nodeid=\"2435\">\n                      <li data-nodeid=\"2436\">\n                        <p data-nodeid=\"2437\">dispatchDiscreteEvent</p>\n                      </li>\n                      <li data-nodeid=\"2438\">\n                        <p data-nodeid=\"2439\">dispatchUserBlockingUpdate</p>\n                      </li>\n                      <li data-nodeid=\"2440\">\n                        <p data-nodeid=\"2441\">dispatchEvent</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2442\">\n                      dispatchDiscreteEvent 和 dispatchUserBlockingUpdate\n                      的不同，主要体现在对优先级的处理上，对事件分发动作倒没什么影响。无论是\n                      dispatchDiscreteEvent 还是\n                      dispatchUserBlockingUpdate，它们最后都是通过调用\n                      dispatchEvent 来执行事件分发的。<strong data-nodeid=\"2741\"\n                        >因此可以认为，最后绑定到 document\n                        上的这个统一的事件分发函数，其实就是\n                        dispatchEvent</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2443\">\n                      那么 dispatchEvent 是如何实现事件分发的呢？\n                    </p>\n                    <h4 data-nodeid=\"2444\">事件的触发</h4>\n                    <p data-nodeid=\"2445\">\n                      事件触发的本质是对 dispatchEvent 函数的调用。由于\n                      dispatchEvent\n                      触发的调用链路较长，中间涉及的要素也过多，因此我们这里不再逐个跟踪函数的调用栈，直接来看核心工作流，请看下图：\n                    </p>\n                    <p data-nodeid=\"2446\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/7C/Ciqc1F_KCneAfMZbAAE9PxK7X3w813.png\"\n                        alt=\"Drawing 15.png\"\n                        data-nodeid=\"2747\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2447\">\n                      工作流中前三步我们在前面都有所提及，对你来说相对难以理解的应该是\n                      4、5、6 这三步，这三步也是我们接下来讲解的重点。\n                    </p>\n                    <h4 data-nodeid=\"2448\">事件回调的收集与执行</h4>\n                    <p data-nodeid=\"2449\">\n                      我们借助一个 Demo 来理解这个过程，Demo 组件代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> [state, setState] = useState(<span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"container\"</span> <span class=\"hljs-attr\">onClickCapture</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> console.log('捕获经过 div')} onClick={() =&gt; console.log('冒泡经过 div')} className=\"container\"&gt;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">128</span>, <span class=\"hljs-attr\">textAlign:</span> '<span class=\"hljs-attr\">center</span>' }}&gt;</span>\n</div></li><li><div class=\"code-word\">          {state}\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">width:</span> <span class=\"hljs-attr\">128</span> }} <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> { setState(state + 1) }}&gt;点击+1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2451\">这个组件对应的界面如下图所示：</p>\n                    <p data-nodeid=\"2452\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/87/CgqCHl_KCoaAHCSUAAAdOFZY7GY194.png\"\n                        alt=\"Drawing 16.png\"\n                        data-nodeid=\"2754\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2453\">\n                      界面中渲染出来的是一行数字文本和一个按钮，每点击一下按钮，数字文本会\n                      +1。在 JSX 结构中，监听点击事件的除了 button 按钮外，还有\n                      id 为 container 的 div 元素，这个 div\n                      元素同时监听了点击事件的冒泡和捕获。\n                    </p>\n                    <p data-nodeid=\"2454\">\n                      App 组件对应的 Fiber 树结构如下图所示：\n                    </p>\n                    <p data-nodeid=\"2455\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/87/CgqCHl_KCuSAdlxpAADdtt6LkCw620.png\"\n                        alt=\"Drawing 18.png\"\n                        data-nodeid=\"2759\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2456\">\n                      接下来我们借助这张 Fiber\n                      树结构图来理解事件回调的收集过程。\n                    </p>\n                    <p data-nodeid=\"2457\">\n                      首先我们来看收集过程对应的源码逻辑，这部分逻辑在\n                      traverseTwoPhase 函数中，源码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">traverseTwoPhase</span>(<span class=\"hljs-params\">inst, fn, arg</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 定义一个 path 数组</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> path = [];\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">while</span> (inst) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 将当前节点收集进 path 数组</span>\n</div></li><li><div class=\"code-word\">    path.push(inst);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 向上收集 tag===HostComponent 的父节点</span>\n</div></li><li><div class=\"code-word\">    inst = getParent(inst);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> i;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 从后往前，收集 path 数组中会参与捕获过程的节点与对应回调</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (i = path.length; i-- &gt; <span class=\"hljs-number\">0</span>;) {\n</div></li><li><div class=\"code-word\">    fn(path[i], <span class=\"hljs-string\">'captured'</span>, arg);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 从前往后，收集 path 数组中会参与冒泡过程的节点与对应回调</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; path.length; i++) {\n</div></li><li><div class=\"code-word\">    fn(path[i], <span class=\"hljs-string\">'bubbled'</span>, arg);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2459\">\n                      traverseTwoPhase 函数做了以下三件事情。\n                    </p>\n                    <p data-nodeid=\"2460\">\n                      <strong data-nodeid=\"2768\"\n                        >1. 循环收集符合条件的父节点，存进 path 数组中</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"2461\">\n                      traverseTwoPhase<strong data-nodeid=\"2774\"\n                        >会以当前节点（触发事件的目标节点）为起点，不断向上寻找\n                        tag===HostComponent 的父节点，并将这些节点按顺序收集进\n                        path 数组中</strong\n                      >。其中 tag===HostComponent 这个条件是在 getParent()\n                      函数中管控的。\n                    </p>\n                    <p data-nodeid=\"2462\">\n                      <strong data-nodeid=\"2787\"\n                        >为什么一定要求 tag===HostComponent 呢</strong\n                      >？前面介绍渲染链路时，我们曾经讲过，<strong\n                        data-nodeid=\"2788\"\n                        >HostComponent 是 DOM 元素对应的 Fiber 节点类型</strong\n                      >。此处限制 tag===HostComponent，也就是说<strong\n                        data-nodeid=\"2789\"\n                        >只收集 DOM 元素对应的 Fiber 节点</strong\n                      >。之所以这样做，是因为浏览器只认识 DOM\n                      节点，浏览器事件也只会在 DOM\n                      节点之间传播，收集其他节点是没有意义的。\n                    </p>\n                    <p data-nodeid=\"30173\" class=\"\">\n                      将这个过程对应到 Demo 示例的 Fiber 树中来看，button\n                      节点是事件触发的起点，在它的父节点中，符合\n                      tag===HostComponent 这个条件的只有 div#container 和\n                      div.App（即下图高亮处）。\n                    </p>\n\n                    <p data-nodeid=\"2464\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/7C/Ciqc1F_KCz6AFPppAADdoA4lHx0444.png\"\n                        alt=\"image (5).png\"\n                        data-nodeid=\"2793\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2465\">\n                      因此最后收集上来的 path 数组内容就是\n                      div#container、div.App 及 button 节点自身（button\n                      节点别忘了，它是 while 循环的起点，一开始就会被推进 path\n                      数组），如下图所示：\n                    </p>\n                    <p data-nodeid=\"2466\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/7C/Ciqc1F_KC0SAHu4MAAC4V-Al5nU582.png\"\n                        alt=\"Drawing 20.png\"\n                        data-nodeid=\"2797\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2467\">\n                      <strong data-nodeid=\"2803\"\n                        >2.\n                        模拟事件在捕获阶段的传播顺序，收集捕获阶段相关的节点实例与回调函数</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"2468\">\n                      接下来，traverseTwoPhase 会<strong data-nodeid=\"2809\"\n                        >从后往前遍历 path\n                        数组，模拟事件的捕获顺序，收集事件在捕获阶段对应的回调与实例</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2469\">\n                      前面咱们说 path\n                      数组是从子节点出发，向上收集得来的。所以说<strong\n                        data-nodeid=\"2815\"\n                        >path 数组中子节点在前，祖先节点在后</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2470\">\n                      从后往前遍历 path 数组，<strong data-nodeid=\"2837\"\n                        >其实就是从父节点往下遍历子节点，直至遍历到目标节点的过程</strong\n                      >，<strong data-nodeid=\"2838\"\n                        >这个遍历顺序和事件在捕获阶段的传播顺序是一致的</strong\n                      >。在遍历的过程中，fn\n                      函数会对每个节点的回调情况进行检查，若该节点上对应当前事件的<strong\n                        data-nodeid=\"2839\"\n                        >捕获回调</strong\n                      >不为空，那么节点实例会被收集到合成事件的\n                      _dispatchInstances 属性（也就是\n                      SyntheticEvent._dispatchInstances）中去，事件回调则会被收集到合成事件的\n                      _dispatchListeners 属性（也就是\n                      SyntheticEvent._dispatchListeners） 中去，等待后续的执行。\n                    </p>\n                    <p data-nodeid=\"2471\">\n                      <strong data-nodeid=\"2845\"\n                        >3.\n                        模拟事件在冒泡阶段的传播顺序，收集冒泡阶段相关的节点实例与回调函数</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"2472\">\n                      捕获阶段的工作完成后，traverseTwoPhase 会<strong\n                        data-nodeid=\"2851\"\n                        >从后往前遍历 path\n                        数组，模拟事件的冒泡顺序，收集事件在捕获阶段对应的回调与实例</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2473\">\n                      这个过程和步骤 2 基本是一样的，唯一的区别是对 path\n                      数组的<strong data-nodeid=\"2869\"\n                        >倒序遍历变成了正序遍历</strong\n                      >。既然倒序遍历模拟的是捕获阶段的事件传播顺序，那么正序遍历自然模拟的就是<strong\n                        data-nodeid=\"2870\"\n                        >冒泡阶段</strong\n                      >的事件传播顺序。在正序遍历的过程中，同样会对每个节点的回调情况进行检查，若该节点上对应当前事件的<strong\n                        data-nodeid=\"2871\"\n                        >冒泡回调</strong\n                      >不为空，那么节点实例和事件回调同样会分别被收集到\n                      SyntheticEvent._dispatchInstances 和\n                      SyntheticEvent._dispatchListeners 中去。\n                    </p>\n                    <blockquote data-nodeid=\"2474\">\n                      <p data-nodeid=\"2475\">\n                        需要注意的是，当前事件对应的 SyntheticEvent\n                        实例有且仅有一个，因此在模拟捕获和模拟冒泡这两个过程中，收集到的实例会被推入同一个\n                        SyntheticEvent._dispatchInstances，收集到的事件回调也会被推入同一个\n                        SyntheticEvent._dispatchListeners。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"33747\" class=\"\">\n                      这样一来，我们在事件回调的执行阶段，只需要按照顺序执行\n                      SyntheticEvent._dispatchListeners\n                      数组中的回调函数，就能够一口气模拟出整个完整的 DOM\n                      事件流，也就是\n                      <strong data-nodeid=\"33755\"\n                        >“捕获-目标-冒泡”这三个阶段</strong\n                      >。\n                    </p>\n\n                    <p data-nodeid=\"2477\">\n                      接下来仍然是以 Demo 为例，我们来看看 button\n                      上触发的点击事件对应的 SyntheticEvent 对象上的\n                      _dispatchInstances 和 _dispatchListeners\n                      各是什么内容，请看下图：\n                    </p>\n                    <p data-nodeid=\"2478\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/87/CgqCHl_KC1GAecTRAAFEgV7Sms0914.png\"\n                        alt=\"Drawing 21.png\"\n                        data-nodeid=\"2893\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2479\">\n                      可以看出，<strong data-nodeid=\"2906\"\n                        >_dispatchInstances 和 _dispatchListeners\n                        两个数组中的元素是严格的一一对应关系</strong\n                      >，这确保了在回调的执行阶段，我们可以简单地通过索引来将实例与监听函数关联起来，实现事件委托的效果。同时，<strong\n                        data-nodeid=\"2907\"\n                        >两个数组中元素的排序，完美地契合了 DOM\n                        标准中“捕获-目标-冒泡”这三个阶段的事件传播顺序</strong\n                      >，真是妙啊！\n                    </p>\n                    <h3 data-nodeid=\"2480\">总结</h3>\n                    <p data-nodeid=\"2481\">\n                      本讲我们在回顾原生 DOM 事件流的基础上，对 React\n                      事件系统的工作流进行了学习。行文至此，相信你已经对 React\n                      事件机制的实现原理有了通透的理解，此时不妨尝试问自己一个问题：既然到头来不过是基于合成事件在模拟\n                      DOM 事件流，React 为什么不直接使用原生 DOM\n                      提供的事件机制呢？\n                    </p>\n                    <p data-nodeid=\"2482\">\n                      或者换个问法：<strong data-nodeid=\"2915\"\n                        >React 事件系统的设计动机是什么</strong\n                      >？\n                    </p>\n                    <p data-nodeid=\"2483\">\n                      这里我结合个人的理解，给出两个思考的角度，希望能给你带来一些启发。\n                    </p>\n                    <ol data-nodeid=\"2484\">\n                      <li data-nodeid=\"2485\">\n                        <p data-nodeid=\"2486\">\n                          首先一定要说的，也是 React\n                          官方说明过的一点是：合成事件符合<a\n                            href=\"https://www.w3.org/TR/DOM-Level-3-Events/\"\n                            data-nodeid=\"2920\"\n                            >W3C</a\n                          >规范，<strong data-nodeid=\"2930\"\n                            >在底层抹平了不同浏览器的差异</strong\n                          >，<strong data-nodeid=\"2931\"\n                            >在上层面向开发者暴露统一的、稳定的、与 DOM\n                            原生事件相同的事件接口</strong\n                          >。开发者们由此便不必再关注烦琐的底层兼容问题，可以专注于业务逻辑的开发。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2487\">\n                        <p data-nodeid=\"2488\">\n                          此外，<strong data-nodeid=\"2941\"\n                            >自研事件系统使 React\n                            牢牢把握住了事件处理的主动权</strong\n                          >：这一点其实和我们平时造轮子是一样的。我在牵头自研团队前端框架之前，首先问自己的问题也是“为什么需要自研？React\n                          不好用吗？Vue 不香吗？”。<strong data-nodeid=\"2942\"\n                            >我们造轮子，很多时候并不是因为别人家的轮子不好，而是因为别人家的轮子没有办法\n                            Match 我们的场景</strong\n                          >。拿 React\n                          来说，举两个大家都比较熟悉的例子，比如说它想在事件系统中处理\n                          Fiber\n                          相关的优先级概念，或者想把多个事件揉成一个事件（比如\n                          onChange 事件），原生 DOM\n                          会帮它做吗？不会，因为原生讲究的就是个通用性。而 React\n                          想要的则是“量体裁衣”，通过自研事件系统，React\n                          能够从很大程度上干预事件的表现，使其符合自身的需求。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2489\">\n                      我在社区的一些讨论中，曾经见到过“合成事件性能更好”这样的结论，该结论的推导过程往往是这样的：事件委托可以节省内存开销\n                      → React 合成事件承袭了事件委托的思想 →\n                      合成事件性能更好。对于这类观点，个人目前持保留意见。\n                    </p>\n                    <p data-nodeid=\"34934\" class=\"te-preview-highlight\">\n                      React\n                      合成事件虽然承袭了事件委托的思想，但它的实现过程比传统的事件委托复杂太多。个人愚见，对\n                      React 来说，事件委托主要的作用应该在于帮助 React\n                      <strong data-nodeid=\"34940\"\n                        >实现了对所有事件的中心化管控</strong\n                      >。至于 React 事件是否比不使用事件委托的原生 DOM\n                      事件性能更好？没有严格的对比和大量测试数据做支撑，我们很难下结论，React\n                      官方也从没有给出过类似的说法。严谨起见，这里不推荐大家以性能为切入点去把握合成事件的特征。\n                    </p>\n\n                    <p data-nodeid=\"2491\" class=\"\">\n                      关于 React\n                      事件系统，就介绍到这里。从下一讲开始，我们将进入 Redux\n                      的世界。\n                    </p>\n            "}