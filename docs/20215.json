{"title":"14 | 案例：如何在 Go-kit 和 Service Mesh                  中进行服务注册与发现？","context":"\n                    <p data-nodeid=\"117349\" class=\"\">\n                      今天我和你分享的是如何在 Go-kit 和 Service Mesh\n                      中进行服务注册与发现的案例。\n                    </p>\n                    <p data-nodeid=\"117350\">\n                      在上一课时中，我们基于搭建好的 Consul 集群，通过 Consul\n                      中提供的 HTTP API 实现了 register\n                      的服务注册与发现功能。我们采用手动构造 HTTP\n                      请求的方式，在服务启动时发送服务实例数据到 Consul\n                      中完成服务注册，在服务关闭时向 Consul 请求服务注销，并通过\n                      Consul\n                      提供的服务发现接口根据服务名获取可用的服务实例信息列表。\n                    </p>\n                    <p data-nodeid=\"117351\">\n                      在本课时，我们将使用 Go-kit\n                      提供的服务注册与发现工具包完成服务注册与发现，并介绍\n                      Service Mesh 中 Istio 是如何进行服务注册与发现的。\n                    </p>\n                    <h3 data-nodeid=\"117352\">\n                      使用 Go-kit 服务注册与发现工具包\n                    </h3>\n                    <p data-nodeid=\"117353\">\n                      自主开发服务注册与发现客户端固然能够加深我们对<strong\n                        data-nodeid=\"117452\"\n                        >微服务</strong\n                      >和<strong data-nodeid=\"117453\">服务注册与发现中心</strong\n                      >交互流程的理解，但同样会增加开发人员的理解成本，比如要了解服务注册与发现中心对外提供的接口、提交数据的具体细节，以及在服务注册与发现中心版本升级迭代或者\n                      API\n                      发生更新时，还需要持续维护客户端代码以避免不可用情况的发生，等等。\n                    </p>\n                    <p data-nodeid=\"119131\" class=\"te-preview-highlight\">\n                      <strong data-nodeid=\"119136\"\n                        >Go-kit 作为一套微服务工具集</strong\n                      >，意在帮助开发人员解决微服务开发中遇到的绝大多数问题，让他们更专注于业务开发。\n                    </p>\n\n                    <p data-nodeid=\"117355\">\n                      Go-kit 提供了诸多服务注册与发现组件的客户端实现，支持包括\n                      Consul、Etcd、ZooKeeper和 Eureka\n                      在内的多种服务注册与发现中心。下面我们以 Consul\n                      为例，实践如何使用 Go-kit 的 sd 包<strong\n                        data-nodeid=\"117464\"\n                        >简化</strong\n                      >微服务服务注册与发现的实现。\n                    </p>\n                    <p data-nodeid=\"117356\">\n                      sd 包中提供如下注册和注销接口，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> Registrar <span class=\"hljs-keyword\">interface</span> { \n</div></li><li><div class=\"code-word\">\tRegister() <span class=\"hljs-comment\">// 服务注册 </span>\n</div></li><li><div class=\"code-word\">\tDeregister() <span class=\"hljs-comment\">// 服务注销 </span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"117358\">\n                      在 Go-kit 中，我们根据选定的服务注册和发现组件，实例化\n                      Registrar\n                      接口对应的结构体实现，即可使用同样的接口进行服务注册和服务注销。接下来我们实例化\n                      sd/consul 包下的 Registrar 用于完成与 Consul\n                      的交互，实例化代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewDiscoveryClient</span><span class=\"hljs-params\">(host <span class=\"hljs-keyword\">string</span>, port <span class=\"hljs-keyword\">int</span>, registration *api.AgentServiceRegistration)</span> <span class=\"hljs-params\">(*DiscoveryClient, error)</span></span> { \n</div></li><li><div class=\"code-word\">\tconfig := api.DefaultConfig() \n</div></li><li><div class=\"code-word\">\tconfig.Address = host + <span class=\"hljs-string\">\":\"</span> + strconv.Itoa(port) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 生成 hashicorp client </span>\n</div></li><li><div class=\"code-word\">\tclient, err := api.NewClient(config) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{ \n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err \n</div></li><li><div class=\"code-word\">\t} \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 使用 hashicorp client 生成 sd consul client </span>\n</div></li><li><div class=\"code-word\">\tsdClient := consul.NewClient(client) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> &amp;DiscoveryClient{ \n</div></li><li><div class=\"code-word\">\t\tclient: sdClient, \n</div></li><li><div class=\"code-word\">\t\tconfig: config, \n</div></li><li><div class=\"code-word\">\t\tregistration: registration, \n</div></li><li><div class=\"code-word\">\t\tregister: consul.NewRegistrar(sdClient, registration, log.NewLogfmtLogger(os.Stderr)), \n</div></li><li><div class=\"code-word\">\t}, <span class=\"hljs-literal\">nil</span> \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"117360\">\n                      DiscoveryClient.register 即最终实例化的 Consul\n                      注册器。从实例化的过程可以发现 Consul Registrar\n                      的实现依赖于 sd.consul.Client，而 sd.consul.Client\n                      实现依赖于 hashicorp client，即 Consul\n                      的官方实现客户端。深入 hashicorp client\n                      客户端中的服务注册与发现的实现，会发现它也是通过请求\n                      Consul Agent 提供的 HTTP API\n                      完成的，实现的方式与我们在上一课时中的实践大同小异。api.AgentServiceRegistration\n                      结构体即需要提交到 Consul\n                      中的服务实例信息，包含服务名、服务实例\n                      ID、服务地址和服务端口等基本信息。\n                    </p>\n                    <p data-nodeid=\"117361\">\n                      然后我们的服务注册和服务注销实现就可以委托给 Register\n                      执行，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(consulClient *DiscoveryClient)</span> <span class=\"hljs-title\">Register</span><span class=\"hljs-params\">(ctx context.Context)</span></span> { \n</div></li><li><div class=\"code-word\">\tconsulClient.register.Register() \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(consulClient *DiscoveryClient)</span> <span class=\"hljs-title\">Deregister</span><span class=\"hljs-params\">(ctx context.Context)</span></span> { \n</div></li><li><div class=\"code-word\">\tconsulClient.register.Deregister() \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"117363\">\n                      服务发现的实现也是直接调用 sd.consul.Client\n                      提供的相关方法。通过使用 Go-kit 提供的 Consul\n                      工具包，可以在不了解微服务与 Consul\n                      具体交互逻辑的基础上，通过简单调用包中提供的方法即可完成服务注册与发现，大大减轻业务人员的开发工作。\n                    </p>\n                    <h3 data-nodeid=\"117364\">\n                      Service Mesh 中 Istio 服务注册与发现\n                    </h3>\n                    <p data-nodeid=\"117365\">\n                      Service Mesh\n                      作为下一代的微服务架构，它将服务间的通信从基础设施中抽离出来，达到交付更可靠的应用请求、监控和控制流量的目的。Service\n                      Mesh\n                      一般与应用程序一同部署，作为“数据平面”代理网络以及“控制平面”代替应用与其他代理交互。Service\n                      Mesh\n                      的出现让业务开发人员从基础架构的底层细节中解放出来，从而把更多的精力放在业务开发上，提高需求迭代的效率。\n                    </p>\n                    <p data-nodeid=\"117366\">\n                      <strong data-nodeid=\"117476\"\n                        >Istio 作为 Service Mesh 的落地产品之一，依托 Kubernetes\n                        快速发展，已经成为最受欢迎的 Service Mesh 之一</strong\n                      >。Istio 在逻辑上分为数据平面和控制平面。\n                    </p>\n                    <ul data-nodeid=\"117367\">\n                      <li data-nodeid=\"117368\">\n                        <p data-nodeid=\"117369\">\n                          <strong data-nodeid=\"117481\">数据平面</strong\n                          >，由一组高性能的智能代理（基于 Envoy 改进的\n                          istio-proxy）组成，它们控制和协调了被代理服务的所有网络通信，同时也负责收集和上报相关的监控数据。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117370\">\n                        <p data-nodeid=\"117371\">\n                          <strong data-nodeid=\"117486\">控制平面</strong\n                          >，负责制定应用策略来控制网络流量的路由。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"117372\">\n                      Istio 由多个组件组成，核心组件及其作用为如下：\n                    </p>\n                    <ul data-nodeid=\"117373\">\n                      <li data-nodeid=\"117374\">\n                        <p data-nodeid=\"117375\">\n                          <strong data-nodeid=\"117492\">Ingressgateway</strong\n                          >，控制外部流量访问 Istio 内部的服务。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117376\">\n                        <p data-nodeid=\"117377\">\n                          <strong data-nodeid=\"117497\">Egressgateway</strong\n                          >，控制 Istio 内部访问外部服务的流量。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117378\">\n                        <p data-nodeid=\"117379\">\n                          <strong data-nodeid=\"117502\">Pilot</strong\n                          >，负责管理服务网格内部的服务和流量策略。它将服务信息和流量控制的高级路由规则在运行时传播给\n                          Proxy，并将特定平台的服务发现机制抽象为 Proxy\n                          可使用的标准格式。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117380\">\n                        <p data-nodeid=\"117381\">\n                          <strong data-nodeid=\"117507\">Citadel</strong\n                          >，提供身份认证和凭证管理。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117382\">\n                        <p data-nodeid=\"117383\">\n                          <strong data-nodeid=\"117512\">Galley</strong\n                          >，负责验证、提取、处理和分发配置。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117384\">\n                        <p data-nodeid=\"117385\">\n                          <strong data-nodeid=\"117517\">Proxy</strong\n                          >，作为服务代理，调节所有 Service Mesh\n                          单元的入口和出口流量。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"117386\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/41/DA/CgqCHl82RMaAO4wvAARr5zliZpw337.png\"\n                        alt=\"image.png\"\n                        data-nodeid=\"117520\"\n                      />\n                    </p>\n                    <div data-nodeid=\"117387\">\n                      <p style=\"text-align: center\">Istio 架构图</p>\n                    </div>\n                    <p data-nodeid=\"117388\">\n                      这其中 Proxy 属于数据平面，以 Sidecar\n                      的方式与应用程序一同部署到 Pod 中，而 Pilot、Citadel 和\n                      Galley 属于控制平面。除此之外，Istio\n                      中还提供一些额外的插件，如 grafana、istio-tracing、kiali\n                      和\n                      prometheus，用于进行可视化的数据查看、流量监控和链路追踪等。\n                    </p>\n                    <p data-nodeid=\"117389\">\n                      Istio 默认提供了以下几种安装 profile\n                      形式，它们开启的组件配置如下表所示（+\n                      表示开启，空白表示未开启，- 表示未知）：\n                    </p>\n                    <p data-nodeid=\"117390\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/41/CE/Ciqc1F82RNKADQe4AACin_AYfxg655.png\"\n                        alt=\"图片7.png\"\n                        data-nodeid=\"117525\"\n                      />\n                    </p>\n                    <p data-nodeid=\"117391\">\n                      这其中，istiod 组件封装了 Pilot、Citadel 和 Galley\n                      等控制平面组件，将它们进行统一打包部署，降低多组件维护和管理的困难性。从上表可以看出，demo\n                      profile\n                      是功能最全的配置清单，适合于学习和功能演示。preview\n                      profile\n                      将可能使用一些开发阶段的测试组件，开启的组件不定。官方推荐使用\n                      default profile\n                      进行安装，因为它在核心组件和插件上做到了最优的选择，比如组件只开启了\n                      Ingressgateway 和 istiod，插件只开启了 prometheus。\n                    </p>\n                    <p data-nodeid=\"117392\">\n                      当然我们也可以根据实践的需求选择合适的 profile\n                      进行安装启动，比如下面的安装命令我们使用的是 demo\n                      profile：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">istioctl manifest apply --set profile=demo\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"117394\">\n                      上述命令以 demo profile 部署 Istio，该配置下的 Istio\n                      能够通过可视化界面监控 Istio 中应用的方方面面。Istio 以\n                      Sidecar 的方式在应用程序运行的 Pod 中注入\n                      Proxy，全面接管应用程序的网络流入流出。我们可以通过标记\n                      Kubernetes 命名空间的方式，让 Sidecar 注入器自动将 Proxy\n                      注入在该命名空间下启动的 Pod 中，开启标记的命令如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">kubectl label namespace <span class=\"hljs-keyword\">default</span> istio-injection=enabled\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"117396\">\n                      上述命令中，我们将 default 命名空间标记为\n                      istio-injection。如果不想开启命令空间的标记，也可以通过\n                      istioctl kube-inject 为 Pod 注入 Proxy Sidecar\n                      容器。接下来，我们就为 register 服务所在的 Pod 注入\n                      Proxy，启动命令如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">istioctl kube-inject -f register-service.yaml | kubectl apply -f -\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"117398\">register 服务的 yaml 配置如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">selector:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">matchLabels:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">template:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">register</span>  <span class=\"hljs-comment\"># 添加 app 标签 </span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">containers:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">ports:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">12312</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">imagePullPolicy:</span> <span class=\"hljs-string\">IfNotPresent</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\"># ... 省略环境配置 </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">---</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\"># 添加 Service 资源 </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register-service</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register-service</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">selector:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">ports:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">12312</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">12312</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register-service-http</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"117400\">\n                      这主要的改动有：为 register 服务添加 Deployment\n                      Controller，添加了新的标签 app，以及为 register 添加相应的\n                      Service 资源。如果在部署 Istio 时启动了 kiali 插件，即可在\n                      kiali 平台中查看到 register\n                      服务的相关信息，通过以下命令即可打开 kiali\n                      控制面板，默认账户和密码都为 admin：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">istioctl dashboard kiali\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"117402\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/41/CF/Ciqc1F82RT2AaFOvAABX9ZrCcO8542.png\"\n                        alt=\"image (1).png\"\n                        data-nodeid=\"117534\"\n                      />\n                    </p>\n                    <div data-nodeid=\"117403\">\n                      <p style=\"text-align: center\">kiali 控制台</p>\n                    </div>\n                    <p data-nodeid=\"117404\">\n                      从上图可以看出在 kiali 控制台中存在多个维度查看 Istio\n                      中部署的应用：\n                    </p>\n                    <ul data-nodeid=\"117405\">\n                      <li data-nodeid=\"117406\">\n                        <p data-nodeid=\"117407\">\n                          <strong data-nodeid=\"117540\"\n                            >Overview，网格概述</strong\n                          >，展示 Istio 内具有服务的所有命名空间；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117408\">\n                        <p data-nodeid=\"117409\">\n                          <strong data-nodeid=\"117545\">Graph，服务拓扑图</strong\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117410\">\n                        <p data-nodeid=\"117411\">\n                          <strong data-nodeid=\"117550\"\n                            >Applications，应用维度</strong\n                          >，识别设置了 app 标签的应用；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117412\">\n                        <p data-nodeid=\"117413\">\n                          <strong data-nodeid=\"117555\"\n                            >Workloads，负载维度</strong\n                          >，检测 Kubernetes 中的资源，包括\n                          Deployment、Job、DaemonSet 等，无论这些资源有没有加入\n                          Istio 中都能检测到；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117414\">\n                        <p data-nodeid=\"117415\">\n                          <strong data-nodeid=\"117560\"\n                            >Services，服务维度</strong\n                          >，检测 Kubernetes 的 Service；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117416\">\n                        <p data-nodeid=\"117417\">\n                          <strong data-nodeid=\"117565\"\n                            >Istio Config，配置维度</strong\n                          >，查看 Istio 相关配置类信息。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"117418\">\n                      register 服务启动后，我们在\n                      Applications、Workloads、Services 维度中均可查看到\n                      register 的身影，如下 Applications 维度图所示：\n                    </p>\n                    <p data-nodeid=\"117419\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/41/DA/CgqCHl82RTKAGJclAABrWEPqyEA895.png\"\n                        alt=\"QQ20200813-103436.png\"\n                        data-nodeid=\"117569\"\n                      />\n                    </p>\n                    <div data-nodeid=\"117420\">\n                      <p style=\"text-align: center\">\n                        kiali Applications 维度下的 register\n                      </p>\n                    </div>\n                    <p data-nodeid=\"117421\">\n                      Istio 依托 Kubernetes 的快速发展和推广，对 Kubernetes\n                      有着极强的依赖性，其服务注册与发现的实现也主要依赖于\n                      Kubernetes 的 Service 管理。我们可以通过以下这张图理解\n                      Istio 的服务注册与发现。\n                    </p>\n                    <p data-nodeid=\"117422\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/41/DA/CgqCHl82RSqALb27AARr5zliZpw854.png\"\n                        alt=\"image.png\"\n                        data-nodeid=\"117573\"\n                      />\n                    </p>\n                    <div data-nodeid=\"117423\">\n                      <p style=\"text-align: center\">\n                        Istio 服务注册与发现逻辑图\n                      </p>\n                    </div>\n                    <p data-nodeid=\"117424\">\n                      通过该逻辑图，我们可以看到 Istio\n                      服务注册与发现主要有以下模块参与。\n                    </p>\n                    <ul data-nodeid=\"117425\">\n                      <li data-nodeid=\"117426\">\n                        <p data-nodeid=\"117427\">\n                          <strong data-nodeid=\"117579\">ConfigController</strong\n                          >：负责管理配置数据，包括用户配置的流量管理和路由规则。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117428\">\n                        <p data-nodeid=\"117429\">\n                          <strong data-nodeid=\"117584\">ServiceController</strong\n                          >：负责加载各类 ServiceRegistry，从 ServiceRegistry\n                          中同步需要在网格中管理的服务。主要包含：①KubeServiceRegistry，从\n                          Kubernetes 同步 Service 和 Endpoint 到\n                          Istio；②ConsulServiceRegistry，从 Consul\n                          中同步服务信息到 Istio；③ExternalServiceRegistry，监听\n                          ConfigController 中的配置变化，获取 ServiceEntry 和\n                          WorkloadEntry 资源并封装成服务数据提供给\n                          ServiceController。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"117430\">\n                        <p data-nodeid=\"117431\">\n                          <strong data-nodeid=\"117589\">DiscoveryServer</strong\n                          >：负责将 ConfigController 中的路由配置信息和\n                          ServiceController 中的服务信息封装成 Proxy\n                          可以理解的标准格式，并下发到 Proxy 中。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"117432\">\n                      Pilot 组件会从各个 Service Registry，比如 Kubernetes 中的\n                      Service 和 Consul 中注册的服务，采集可用的服务数据到 Istio\n                      中，并将这些服务转换为 Proxy 可理解的标准服务格式，下发到\n                      Proxy，同时下发的还有用户预先配置的路由规则和流量控制策略。在被代理的应用根据服务标识发起\n                      HTTP 通信时，Proxy\n                      将会从拦截的网络请求中根据服务标识获取对应的服务数据，并根据下发的路由规则选择合适的实例转发请求。\n                    </p>\n                    <p data-nodeid=\"117433\">\n                      基于 Kubernetes 迅速发展的 Istio\n                      在服务注册与发现组件上支持最完善的自然也为\n                      Kubernetes，这依托于 Kubernetes 对 Pod、Service\n                      等资源的监控，为服务之间的调用提供弹性、负载均衡、重试、熔断和限流等诸多保障。\n                    </p>\n                    <p data-nodeid=\"117434\">\n                      而对第三方服务注册与发现组件的集成和支持，比如 Consul\n                      等，Istio\n                      官方的实现仅仅是基本可用的级别，在性能和易用性方面仍需要不断进行打磨和测试。<strong\n                        data-nodeid=\"117596\"\n                        >因此，在 Istio 的落地实践中，建议是与 Kubernetes\n                        强绑定使用，以达到功能的最优化发挥。</strong\n                      >\n                    </p>\n                    <h3 data-nodeid=\"117435\">小结</h3>\n                    <p data-nodeid=\"117436\">\n                      服务注册与发现是微服务架构落地实践的基石之一，因为有中心化的服务注册与发现中心管理大量动态变化的服务实例，使得应用服务可以在无太大压力的条件下进行微服务拆分和横向扩展，大大提升了微服务架构的灵活性和伸缩性。\n                    </p>\n                    <p data-nodeid=\"117437\">\n                      在本课时，我们首先介绍了 Go-kit\n                      中服务注册与发现工具包，并使用其中的 Consul 工具包改善了\n                      register 服务的服务注册与发现的实现。接着我们介绍了\n                      Service Mesh 中的佼佼者\n                      Istio，以及其服务注册与发现的实现。Istio\n                      本身并不提供服务发现的能力，但是它可以依托 Kubernetes\n                      或者第三方的服务注册中心获取服务信息列表，并根据设定的路由规则进行有效的动态调用。希望通过本课时的学习，不仅能加深你对\n                      Go 微服务中服务注册与发现的认识，也能了解到 Istio\n                      是如何在代理层实现服务注册与发现。\n                    </p>\n                    <p data-nodeid=\"117438\" class=\"\">\n                      最后，关于 Go-kit 和 Service Mesh\n                      的服务注册与发现，你还有什么独到的见解？欢迎在评论区与我分享。\n                    </p>\n            "}