{"title":"07 | 接口类型与类型别名：这两者的用法与区别分别是什么？","context":"\n                    <p data-nodeid=\"26025\">\n                      前面我们学习了 TypeScript\n                      的基础类型、函数类型和类类型，它们都有一个共性——在\n                      JavaScript 中都有对应的语法。\n                    </p>\n\n                    <p data-nodeid=\"25190\">\n                      这一讲我们将学习 TypeScript 与 JavaScript\n                      不一样却堪称精华之一的特性——接口类型与类型别名。这些特性让\n                      TypeScript 具备了 JavaScript\n                      所缺少的、描述较为复杂数据结构的能力。在使用 TypeScript\n                      之前，可能我们只能通过文档或大量的注释来做这件事。\n                    </p>\n                    <blockquote data-nodeid=\"27150\">\n                      <p data-nodeid=\"27151\">\n                        <strong data-nodeid=\"27160\">学习建议</strong>：<br />\n                        请使用 VS Code 新建一个 07.InterfaceAndType.ts\n                        文件，并尝试课程中的所有示例。\n                      </p>\n                      <p data-nodeid=\"27152\" class=\"\">\n                        <strong data-nodeid=\"27165\">注意</strong\n                        >：为了避免同一作用域下同名冲突报错，在示例中我们使用了一对花括符\n                        {} 创建块级作用域。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"27153\">Interface 接口类型</h3>\n\n                    <p data-nodeid=\"25196\">\n                      TypeScript\n                      不仅能帮助前端改变思维方式，还能强化面向接口编程的思维和能力，而这正是得益于\n                      Interface\n                      接口类型。通过接口类型，我们可以清晰地定义模块内、跨模块、跨项目代码的通信规则。\n                    </p>\n                    <p data-nodeid=\"25197\">\n                      TypeScript\n                      对对象的类型检测遵循一种被称之为“鸭子类型”（duck\n                      typing）或者“结构化类型（structural\n                      subtyping）”的准则，即只要两个对象的结构一致，属性和方法的类型一致，则它们的类型就是一致的。\n                    </p>\n                    <p data-nodeid=\"25198\">\n                      下面我们先通过 05\n                      讲中介绍的函数类型的示例来初识一下接口类型，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Study</span>(<span class=\"hljs-params\">language: { name: <span class=\"hljs-built_in\">string</span>; age: () =&gt; <span class=\"hljs-built_in\">number</span> }</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\\`ProgramLanguage <span class=\"hljs-subst\">${language.name}</span> created <span class=\"hljs-subst\">${language.age()}</span> years ago.\\`</span>);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">Study({\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-string\">'TypeScript'</span>,\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-number\">2012</span>\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25200\">\n                      在上述代码中，我们定义了一个拥有 string\n                      类型属性name、函数类型属性age的对象 language\n                      作为参数（形参 Parameter）的函数。同时，我们还使用类似定义\n                      JavaScript\n                      对象字面量的语法定义了一个内联接口类型来约束参数对象的类型。\n                    </p>\n                    <p data-nodeid=\"25201\">\n                      然后，我们传递了一个 name 属性为 'TypeScript'\n                      的字符串、age\n                      属性为计算年份差函数的对象字面量作为参数（argument）来调用这个函数。\n                    </p>\n                    <p data-nodeid=\"25202\">\n                      在调用函数的过程中，TypeScript\n                      静态类型检测到传递的对象字面量类型为 string 的 name\n                      属性和类型为() =&gt; number 的 age\n                      属性与函数参数定义的类型一致，于是不会抛出一个类型错误。\n                    </p>\n                    <p data-nodeid=\"25203\">\n                      如果我们传入一个 name 属性是 number\n                      类型或者缺少age属性的对象字面量，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">Study({\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-number\">2</span>,\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-number\">2012</span>\n</div></li><li><div class=\"code-word\">});\n</div></li><li><div class=\"code-word\">Study({\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-string\">'TypeScript'</span>\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25205\">\n                      这时，第 2 行会提示错误： ts(2322) number 不能赋值给\n                      string，第 7 行也会提示错误： ts(2345)\n                      实参(Argument)与形参(Parameter)类型不兼容，缺少必需的属性\n                      age。\n                    </p>\n                    <p data-nodeid=\"25206\">\n                      同样，如果我们传入一个包含了形参类型定义里没有的 id\n                      属性的对象字面量作为实参，也会得到一个类型错误\n                      ts(2345)，实参（Argument）与形参（Parameter）类型不兼容，不存在的属性\n                      id，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/** ts(2345) 实参(Argument)与形参(Parameter)类型不兼容，不存在的属性 id */</span>\n</div></li><li><div class=\"code-word\">Study({\n</div></li><li><div class=\"code-word\">  id: <span class=\"hljs-number\">2</span>,\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-string\">'TypeScript'</span>,\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-number\">2012</span>\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25208\">\n                      有意思的是，在上边的示例中，如果我们先把这个对象字面量赋值给一个变量，然后再把变量传递给函数进行调用，那么\n                      TypeScript\n                      静态类型检测就会仅仅检测形参类型中定义过的属性类型，而包容地忽略任何多余的属性，此时也不会抛出一个\n                      ts(2345) 类型错误。\n                    </p>\n                    <p data-nodeid=\"25209\">\n                      如下代码所示，第 6 行不会提示错误。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> ts = {\n</div></li><li><div class=\"code-word\">  id: <span class=\"hljs-number\">2</span>,\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-string\">'TypeScript'</span>,\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-number\">2012</span>\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\">Study(ts); <span class=\"hljs-comment\">// ok</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25211\">\n                      这并非一个疏忽或\n                      bug，而是有意为之地将对象字面量和变量进行区别对待，我们把这种情况称之为对象字面量的\n                      freshness（在 12 讲中会再次详细介绍）。\n                    </p>\n                    <p data-nodeid=\"25212\">\n                      因为这种内联形式的接口类型定义在语法层面与熟知的\n                      JavaScript\n                      解构颇为神似，所以很容易让我们产生混淆。下面我们通过如下示例对比一下解构语法与内联接口类型混用的效果。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 纯 JavaScript 解构语法 */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">StudyJavaScript</span>(<span class=\"hljs-params\">{name, age}</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(name, age);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/** TypeScript 里解构与内联类型混用 */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">StudyTypeScript</span>(<span class=\"hljs-params\">{name, age}: {name: <span class=\"hljs-built_in\">string</span>, age: () =&gt; <span class=\"hljs-built_in\">number</span>}</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(name, age);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 纯 JavaScript 解构语法，定义别名 */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">StudyJavaScript</span>(<span class=\"hljs-params\">{name: aliasName}</span>) </span>{ <span class=\"hljs-comment\">// 定义name的别名</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(aliasName);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/** TypeScript */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">StudyTypeScript</span>(<span class=\"hljs-params\">language: {name: <span class=\"hljs-built_in\">string</span>}</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// console.log(name); // 不能直接打印name</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(language.name);  \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25214\">\n                      从上述代码中我们可以看到，在函数中，对象解构和定义接口类型的语法很类似（如第\n                      12 行和 17\n                      行所示），注意不要混淆。实际上，定义内联的接口类型是不可复用的，所以我们应该更多地使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"25345\"\n                        >interface</code\n                      >关键字来抽离可复用的接口类型。\n                    </p>\n                    <p data-nodeid=\"25215\">\n                      在 TypeScript\n                      中，接口的语法和其他类型的语言并没有太大区别，我们通过如下所示代码一起看看接口是如何定义的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">/ ** 关键字 接口名称 */\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> ProgramLanguage {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 语言名称 */</span>\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 使用年限 */</span>\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25217\">\n                      在上述代码中，我们定义了一个描述编程语言的接口，它包含一个字符类型的属性\n                      name 和一个函数类型的属性 age 。\n                      从中我们发现接口的语法格式是在 interface\n                      关键字的空格后+接口名字，然后属性与属性类型的定义用花括弧包裹。\n                    </p>\n                    <p data-nodeid=\"25218\">\n                      在前边示例中，通过内联参数类型定义的 Study\n                      函数就可以直接使用 ProgramLanguage 接口来定义参数 language\n                      的类型了。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">NewStudy</span>(<span class=\"hljs-params\">language: ProgramLanguage</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\\`ProgramLanguage <span class=\"hljs-subst\">${language.name}</span> created <span class=\"hljs-subst\">${language.age()}</span> years ago.\\`</span>);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25220\">\n                      我们还可以通过复用接口类型定义来约束其他逻辑。比如，我们通过如下所示代码定义了一个类型为\n                      ProgramLanguage 的变量 TypeScript 。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> TypeScript: ProgramLanguage;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25222\">\n                      接着，我们把满足接口类型约定的一个对象字面量赋值给了这个变量，如下代码所示，此时也不会提示类型错误。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">TypeScript = {\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-string\">'TypeScript'</span>,\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-number\">2012</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25224\">\n                      而任何不符合约定的情况，都会提示类型错误。比如我们通过如下所示代码输入了一个空对象字面量，此时也会提示一个对象字面量类型\n                      {} 缺少 name 和 age 属性的 ts(2739) 错误。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">TypeScript = {\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25226\">\n                      按照如下所示代码添加 name\n                      属性后，还是会提示一个对象字面量类型 { name: string; }\n                      缺少必需的 age 属性的 ts( 2741) 错误。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">TypeScript = {\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-string\">'TypeScript'</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25228\">\n                      此外，如下代码所示，如果我们把一个 name 属性是 2、age\n                      属性是 'Wrong Type' 的对象赋值给 TypeScript ，在第 2\n                      行会提示错误：ts(2322) number 类型不能赋值给 string，第 3\n                      行会提示错误：ts(2322)string 不能赋值给函数类型。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">TypeScript = {\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-number\">2</span>,\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-string\">'Wrong Type'</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25230\">\n                      又或者如以下示例中额外多出了一个接口并未定义的属性\n                      id，也会提示一个 ts(2322) 错误：对象字面量不能赋值给\n                      ProgramLanguage 类型的变量 TypeScript。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">TypeScript = {\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-string\">'TypeScript'</span>,\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-number\">2012</span>,\n</div></li><li><div class=\"code-word\">  id: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"25232\">可缺省属性</h4>\n                    <p data-nodeid=\"25233\">\n                      在前边的例子中，如果我们希望缺少 age\n                      属性的对象字面量也能符合约定且不抛出类型错误，确切地说在接口类型中\n                      age\n                      属性可缺省，那么我们可以在属性名之后通过添加如下所示的?\n                      语法来标注可缺省的属性或方法。如以下示例中，OptionalProgramLanguage\n                      接口就拥有一个可缺省的函数类型的 age 属性。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 关键字 接口名称 */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> OptionalProgramLanguage {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 语言名称 */</span>\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 使用年限 */</span>\n</div></li><li><div class=\"code-word\">  age?: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> OptionalTypeScript: OptionalProgramLanguage = {\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-string\">'TypeScript'</span>\n</div></li><li><div class=\"code-word\">}; <span class=\"hljs-comment\">// ok</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25235\">\n                      当属性被标注为可缺省后，它的类型就变成了显式指定的类型与\n                      undefined 类型组成的联合类型（详见 08 讲），比如示例中\n                      OptionalTypeScript 的 age 属性类型就变成了如下所示内容：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">number</span>) | <span class=\"hljs-literal\">undefined</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25237\">\n                      既然如此，我们就来发散思考一下：你觉得如下所示的接口类型\n                      OptionalTypeScript2 和 OptionalTypeScript 等价吗？\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 关键字 接口名称 */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> OptionalProgramLanguage2 {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 语言名称 */</span>\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 使用年限 */</span>\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-function\">(<span class=\"hljs-params\">(<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-built_in\">number</span></span>) | <span class=\"hljs-params\">undefined</span>;\n</span></div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25239\">\n                      答案当然是不等价，这与 05\n                      讲中提到函数可缺省参数和参数类型可以是 undefined\n                      一样，可缺省意味着可以不设置属性键名，类型是 undefined\n                      意味着属性键名不可缺省。\n                    </p>\n                    <p data-nodeid=\"25240\">\n                      既然值可能是 undefined\n                      ，如果我们需要对该对象的属性或方法进行操作，就可以使用类型守卫（详见\n                      11 讲）或 Optional Chain（在第 5 行的属性名后加 ?\n                      ），如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> OptionalTypeScript.age === <span class=\"hljs-string\">'function'</span>) {\n</div></li><li><div class=\"code-word\">  OptionalTypeScript.age();\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">OptionalTypeScript.age?.();\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25242\">\n                      通过第 1 行所示的 typeof 条件判断，在确保了 age\n                      属性是函数的情况下我们才会调用，这样就避免了运行时提示 age\n                      不是函数的错误。\n                    </p>\n                    <h4 data-nodeid=\"25243\">只读属性</h4>\n                    <p data-nodeid=\"25244\">\n                      我们可能还会碰到这样的场景，希望对对象的某个属性或方法锁定写操作，比如前面例子中，定义了\n                      TypeScriptLanguage 变量之后，name\n                      属性的值肯定是稳定不可变更的 'TypeScript'\n                      ，而不能再被变更为 'JavaScript' 或 'AnyScript'\n                      。这时，我们可以在属性名前通过添加 readonly\n                      修饰符的语法来标注 name 为只读属性。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> ReadOnlyProgramLanguage {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 语言名称 */</span>\n</div></li><li><div class=\"code-word\">  readonly name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 使用年限 */</span>\n</div></li><li><div class=\"code-word\">  readonly age: <span class=\"hljs-function\">(<span class=\"hljs-params\">(<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-built_in\">number</span></span>) | <span class=\"hljs-params\">undefined</span>;\n</span></div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-params\">let</span> <span class=\"hljs-params\">ReadOnlyTypeScript</span>: <span class=\"hljs-params\">ReadOnlyProgramLanguage</span> = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-params\">name</span>: '<span class=\"hljs-params\">TypeScript</span>',\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-params\">age</span>: <span class=\"hljs-params\">undefined</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">/** <span class=\"hljs-params\">ts</span>(<span class=\"hljs-params\">2540</span>)错误，<span class=\"hljs-params\">name</span> 只读 */\n</div></li><li><div class=\"code-word\"><span class=\"hljs-params\">ReadOnlyTypeScript</span>.<span class=\"hljs-params\">name</span> = '<span class=\"hljs-params\">JavaScript</span>';\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25246\">\n                      需要注意的是，这仅仅是静态类型检测层面的只读，实际上并不能阻止对对象的篡改。因为在转译为\n                      JavaScript 之后，readonly\n                      修饰符会被抹除。因此，任何时候与其直接修改一个对象，不如返回一个新的对象，这会是一种比较安全的实践。\n                    </p>\n                    <h4 data-nodeid=\"25247\">定义函数类型</h4>\n                    <p data-nodeid=\"28835\" class=\"\">\n                      在以上示例中，你可能会觉得接口类型仅能用来定义对象的类型，但是如\n                      05 讲中提到接口类型还可以用来定义函数的类型\n                      <strong data-nodeid=\"28841\"\n                        >（备注：仅仅是定义函数的类型，而不包含函数的实现）</strong\n                      >，具体示例如下。\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> StudyLanguage {\n</div></li><li><div class=\"code-word\">  (language: ProgramLanguage): <span class=\"hljs-built_in\">void</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 单独的函数实践 */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> StudyInterface: StudyLanguage \n</div></li><li><div class=\"code-word\">  = <span class=\"hljs-function\"><span class=\"hljs-params\">language</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\\`<span class=\"hljs-subst\">${language.name}</span> <span class=\"hljs-subst\">${language.age()}</span>\\`</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25250\">\n                      在示例第 1~3 行，我们定义了一个接口类型\n                      StudyLanguage，它有一个函数类型的匿名成员，函数参数类型\n                      ProgramLanguage，返回值的类型是\n                      void，通过这样的格式定义的接口类型又被称之为可执行类型，也就是一个函数类型。\n                    </p>\n                    <p data-nodeid=\"25251\">\n                      在第 6 行中，我们声明了一个 StudyLanguage\n                      类型的变量，并赋给它一个箭头函数作为值。回想一下 04\n                      讲中提到的上下文类型推断，赋值操作左侧的 StudyLanguage\n                      类型是可以约束箭头函数的类型，所以即便我们没有显式指定函数参数\n                      language 的类型，TypeScript 也能推断出它的类型就是\n                      ProgramLanguage。\n                    </p>\n                    <p data-nodeid=\"25252\">\n                      实际上，我们很少使用接口类型来定义函数的类型，更多使用内联类型或类型别名（本讲后半部分讲解）配合箭头函数语法来定义函数类型，具体示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> StudyLanguageType = <span class=\"hljs-function\">(<span class=\"hljs-params\">language: ProgramLanguage</span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25254\">\n                      我们给箭头函数类型指定了一个别名\n                      StudyLanguageType，在其他地方就可以直接复用\n                      StudyLanguageType，而不用重新声明新的箭头函数类型定义。\n                    </p>\n                    <h4 data-nodeid=\"25255\">索引签名</h4>\n                    <p data-nodeid=\"25256\">\n                      在实际工作中，使用接口类型较多的地方是对象，比如 React\n                      组件的 Props &amp; State、HTMLElement 的\n                      Props，这些对象有一个共性，即所有的属性名、方法名都确定。\n                    </p>\n                    <p data-nodeid=\"25257\">\n                      实际上，我们经常会把对象当 Map\n                      映射使用，比如下边代码示例中定义了索引是任意数字的对象\n                      LanguageRankMap 和索引是任意字符串的对象 LanguageMap。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> LanguageRankMap = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">'TypeScript'</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-number\">2</span>: <span class=\"hljs-string\">'JavaScript'</span>,\n</div></li><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> LanguageMap = {\n</div></li><li><div class=\"code-word\">  TypeScript: <span class=\"hljs-number\">2012</span>,\n</div></li><li><div class=\"code-word\">  JavaScript: <span class=\"hljs-number\">1995</span>,\n</div></li><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25259\">\n                      这个时候，我们需要使用索引签名来定义上边提到的对象映射结构，并通过\n                      “[索引名: 类型]”的格式约束索引的类型。\n                    </p>\n                    <p data-nodeid=\"25260\">\n                      索引名称的类型分为 string 和 number 两种，通过如下定义的\n                      LanguageRankInterface 和 LanguageYearInterface\n                      两个接口，我们可以用来描述索引是任意数字或任意字符串的对象。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> LanguageRankInterface {\n</div></li><li><div class=\"code-word\">  [rank: <span class=\"hljs-built_in\">number</span>]: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> LanguageYearInterface {\n</div></li><li><div class=\"code-word\">  [name: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> LanguageRankMap: LanguageRankInterface = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">'TypeScript'</span>, <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-number\">2</span>: <span class=\"hljs-string\">'JavaScript'</span>, <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'WrongINdex'</span>: <span class=\"hljs-string\">'2012'</span> <span class=\"hljs-comment\">// ts(2322) 不存在的属性名</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> LanguageMap: LanguageYearInterface = {\n</div></li><li><div class=\"code-word\">    TypeScript: <span class=\"hljs-number\">2012</span>, <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">    JavaScript: <span class=\"hljs-number\">1995</span>, <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">1970</span> <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25262\">\n                      <strong data-nodeid=\"25412\"\n                        >注意：在上述示例中，数字作为对象索引时，它的类型既可以与数字兼容，也可以与字符串兼容，这与\n                        JavaScript 的行为一致。因此，使用 0 或 '0'\n                        索引对象时，这两者等价。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"25263\">\n                      同样，我们可以使用 readonly\n                      注解索引签名，此时将对应属性设置为只读就行，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> LanguageRankInterface {\n</div></li><li><div class=\"code-word\">    readonly [rank: <span class=\"hljs-built_in\">number</span>]: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> LanguageYearInterface {\n</div></li><li><div class=\"code-word\">    readonly [name: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25265\">\n                      在上述示例中，LanguageRankInterface 和\n                      LanguageYearInterface\n                      任意的数字或者字符串类型的属性都是只读的。\n                    </p>\n                    <p data-nodeid=\"25266\">\n                      <strong data-nodeid=\"25418\"\n                        >注意：虽然属性可以与索引签名进行混用，但是属性的类型必须是对应的数字索引或字符串索引的类型的子集，否则会出现错误提示。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"25267\">\n                      下面我们通过如下所示的示例具体来看一下。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> StringMap {\n</div></li><li><div class=\"code-word\">    [prop: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">    age: <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// ts(2411) name 属性的 string 类型不能赋值给字符串索引类型 number</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> NumberMap {\n</div></li><li><div class=\"code-word\">    [rank: <span class=\"hljs-built_in\">number</span>]: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-number\">1</span>: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-number\">0</span>: <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// ts(2412) 0 属性的 number 类型不能赋值给数字索引类型 string</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> LanguageRankInterface {\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-number\">0</span>: <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">    [rank: <span class=\"hljs-built_in\">number</span>]: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">    [name: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25269\">\n                      在上述示例中，因为接口 StringMap 属性 name 的类型 string\n                      不是它所对应的字符串索引（第 3 行定义的 prop: string）类型\n                      number 的子集，所以会提示一个错误。同理，因为接口\n                      NumberMap 属性 0 的类型 number 不是它所对应的数字索引（第\n                      8 行定义的 rank: number）类型 string\n                      的子集，所以也会提示一个错误。\n                    </p>\n                    <p data-nodeid=\"25270\">\n                      另外，由于上边提到了数字类型索引的特殊性，所以我们不能约束数字索引属性与字符串索引属性拥有截然不同的类型，具体示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> LanguageRankInterface {\n</div></li><li><div class=\"code-word\">    [rank: <span class=\"hljs-built_in\">number</span>]: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// ts(2413) 数字索引类型 string 类型不能赋值给字符串索引类型 number</span>\n</div></li><li><div class=\"code-word\">    [prop: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25272\">\n                      这里我们定义了 LanguageRankInterface 的数字索引 rank\n                      的类型是 string，与定义的字符串索引 prop 的类型 number\n                      不兼容，所以会提示一个 ts(2413) 错误。\n                    </p>\n                    <p data-nodeid=\"25273\">\n                      <strong data-nodeid=\"25427\">这里埋个伏笔</strong\n                      >：如果我们确实需要使用 age 是 number 类型、其他属性类型是\n                      string\n                      的对象数据结构，应该如何定义它的类型且不提示错误呢？\n                    </p>\n                    <p data-nodeid=\"25274\">\n                      比如如下示例中定义的 age\n                      属性是数字、其他任意属性是字符串的对象，我们应该怎么定义它的类型呢？\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// 数字类型</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">anyProperty</span>: <span class=\"hljs-string\">'str'</span>, <span class=\"hljs-comment\">// 字符串</span>\n</div></li><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25276\">\n                      由于属性和索引签名的类型限制，使得我们不能通过单一的接口来描述这个对象，这时我们该怎么办呢？请继续保持你的好奇心，08\n                      讲中我们会解决这个问题。\n                    </p>\n                    <h4 data-nodeid=\"25277\">继承与实现</h4>\n                    <p data-nodeid=\"25278\">\n                      在面向接口编程时，我们怎么能少得了继承与实现？\n                    </p>\n                    <p data-nodeid=\"25279\">\n                      在 TypeScript\n                      中，接口类型可以继承和被继承，比如我们可以使用如下所示的\n                      extends 关键字实现接口的继承。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> DynamicLanguage <span class=\"hljs-keyword\">extends</span> ProgramLanguage {\n</div></li><li><div class=\"code-word\">    rank: <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// 定义新属性</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> TypeSafeLanguage <span class=\"hljs-keyword\">extends</span> ProgramLanguage {\n</div></li><li><div class=\"code-word\">    typeChecker: <span class=\"hljs-built_in\">string</span>; <span class=\"hljs-comment\">// 定义新的属性</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 继承多个 */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> TypeScriptLanguage <span class=\"hljs-keyword\">extends</span> DynamicLanguage, TypeSafeLanguage {\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-string\">'TypeScript'</span>; <span class=\"hljs-comment\">// 用原属性类型的兼容的类型(比如子集)重新定义属性</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25281\">\n                      在上述示例中，从第 2~8 行我们定义了两个继承了\n                      ProgramLanguage 的接口 DynamicLanguage 和\n                      TypeSafeLanguage，它们会继承 ProgramLanguage\n                      所有的属性定义。第 11 行我们定义了同时继承了\n                      DynamicLanguage 和 TypeSafeLanguage 的接口\n                      TypeScriptLanguage，它会继承 DynamicLanguage 和\n                      TypeSafeLanguage 所有的属性定义，并且使用同名的 name\n                      属性定义覆盖了继承过来的 name 属性定义。\n                    </p>\n                    <p data-nodeid=\"25282\">\n                      <strong data-nodeid=\"25440\"\n                        >注意：我们仅能使用兼容的类型覆盖继承的属性</strong\n                      >，如下代码所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** ts(6196) 错误的继承，name 属性不兼容 */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> WrongTypeLanguage <span class=\"hljs-keyword\">extends</span> ProgramLanguage {\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25284\">\n                      在上述代码中，因为 ProgramLanguage 的 name 属性是 string\n                      类型，WrongTypeLanguage 的 name 属性是\n                      number，二者不兼容，所以不能继承，也会提示一个 ts(6196)\n                      错误。\n                    </p>\n                    <p data-nodeid=\"25285\">\n                      如 06\n                      讲中提到，我们既可以使用接口类型来约束类，反过来也可以使用类实现接口，那两者之间的关系到底是什么呢？这里，我们通过使用如下所示的\n                      implements 关键字描述一下类和接口之间的关系。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 类实现接口 */</span>\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">class</span> LanguageClass <span class=\"hljs-keyword\">implements</span> ProgramLanguage {\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">''</span>;\n</div></li><li><div class=\"code-word\">    age = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getFullYear() - <span class=\"hljs-number\">2012</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25287\">\n                      在上述代码中，类 LanguageClass 实现了 ProgramLanguage\n                      接口约定的 name、age 等属性和方法，如果我们移除 name 或者\n                      age 的实现，将会提示一个类型错误。\n                    </p>\n                    <h3 data-nodeid=\"25288\">Type 类型别名</h3>\n                    <p data-nodeid=\"25289\">\n                      接口类型的一个作用是将内联类型抽离出来，从而实现类型可复用。其实，我们也可以使用类型别名接收抽离出来的内联类型实现复用。\n                    </p>\n                    <p data-nodeid=\"25290\">\n                      此时，我们可以通过如下所示“<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"25447\"\n                        >type</code\n                      >别名名字 = 类型定义”的格式来定义类型别名。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 类型别名 */</span>\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> LanguageType = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/** 以下是接口属性 */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/** 语言名称 */</span>\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/** 使用年限 */</span>\n</div></li><li><div class=\"code-word\">    age: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"29396\">\n                      在上述代码中，乍看上去有点像是在定义变量，只不过这里我们把\n                      let 、const 、var 关键字换成了 type 罢了。\n                    </p>\n                    <p data-nodeid=\"29397\">\n                      此外，针对接口类型无法覆盖的场景，比如组合类型、交叉类型（详见\n                      08 讲），我们只能使用类型别名来接收，如下代码所示：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 联合 */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> MixedType = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 交叉 */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> IntersectionType = { id: <span class=\"hljs-built_in\">number</span>; name: <span class=\"hljs-built_in\">string</span>; } \n</div></li><li><div class=\"code-word\">    &amp; { age: <span class=\"hljs-built_in\">number</span>; name: <span class=\"hljs-built_in\">string</span> };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 提取接口属性类型 */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> AgeType = ProgramLanguage[<span class=\"hljs-string\">'age'</span>];  \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25294\">\n                      在上述代码中，我们定义了一个 IntersectionType\n                      类型别名，表示两个匿名接口类型交叉出的类型；同时定义了一个\n                      AgeType 类型别名，表示抽取的 ProgramLanguage age\n                      属性的类型。\n                    </p>\n                    <blockquote data-nodeid=\"25295\">\n                      <p data-nodeid=\"25296\">\n                        注意：类型别名，诚如其名，即我们仅仅是给类型取了一个新的名字，并不是创建了一个新的类型。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"25297\">Interface 与 Type 的区别</h3>\n                    <p data-nodeid=\"25298\">\n                      通过以上介绍，我们已经知道适用接口类型标注的地方大都可以使用类型别名进行替代，这是否意味着在相应的场景中这两者等价呢？\n                    </p>\n                    <p data-nodeid=\"25299\">\n                      实际上，在大多数的情况下使用接口类型和类型别名的效果等价，但是在某些特定的场景下这两者还是存在很大区别。比如，重复定义的接口类型，它的属性会叠加，这个特性使得我们可以极其方便地对全局变量、第三方库的类型做扩展，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> Language {\n</div></li><li><div class=\"code-word\">    id: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> Language {\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> lang: Language = {\n</div></li><li><div class=\"code-word\">    id: <span class=\"hljs-number\">1</span>, <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-string\">'name'</span> <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25301\">\n                      在上述代码中，先后定义的两个 Language\n                      接口属性被叠加在了一起，此时我们可以赋值给 lang\n                      变量一个同时包含 id 和 name 属性的对象。\n                    </p>\n                    <p data-nodeid=\"25302\">\n                      不过，如果我们重复定义类型别名，如下代码所示，则会提示一个\n                      ts(2300) 错误。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** ts(2300) 重复的标志 */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> Language = {\n</div></li><li><div class=\"code-word\">    id: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** ts(2300) 重复的标志 */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> Language = {\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> lang: Language = {\n</div></li><li><div class=\"code-word\">    id: <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-string\">'name'</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25304\">\n                      在上述代码中，我们重复定义了一个类型别名 Language\n                      ，此时就提示了一个错误。\n                    </p>\n                    <h3 data-nodeid=\"25305\">小结与预告</h3>\n                    <p data-nodeid=\"25306\">\n                      接口类型是 TypeScript\n                      最核心的知识点之一，掌握好接口类型，养成面向接口编程思维方式和惯性，将让我们的编程之路愈发顺利、高效。\n                    </p>\n                    <p data-nodeid=\"25307\">\n                      类型别名使得类型可以像值一样能赋予另外一个变量（别名），大大提升了类型复用性，最终也提升了我们的编程效率。\n                    </p>\n                    <p data-nodeid=\"25308\">\n                      这里插播一个思考题：接口类型和类型别名的区别是什么？欢迎你在留言区进行互动、交流。\n                    </p>\n                    <p data-nodeid=\"25309\">\n                      08\n                      讲我们将介绍提升类型复用性的另外两个利器——联合和交叉类型，敬请期待吧~\n                    </p>\n                    <p data-nodeid=\"25310\">\n                      另外，如果你觉得本专栏有价值，欢迎分享给更多好友哦。\n                    </p>\n            "}