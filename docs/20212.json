{"title":"11 | 案例：如何结合 Jenkins 完成持续化集成和自动化测试？","context":"\n                    <p data-nodeid=\"71617\" class=\"\">\n                      今天我们主要来介绍如何结合 Jenkins\n                      完成持续化集成和自动化测试的案例。\n                    </p>\n\n                    <p data-nodeid=\"70896\">\n                      在微服务开发团队中，一般会采用敏捷开发这类增长式的开发方式，这能有效提高各个微服务的迭代效率。为了让完成的代码能够尽快得到反馈，我们建议<strong\n                        data-nodeid=\"70980\"\n                        >尽早将完成的代码提交到代码库中被集成部署</strong\n                      >，每天一次甚至一天多次，通过自动构建和自动化测试，尽早检测出集成的错误，从而确保错误被尽快发现和纠正。\n                    </p>\n                    <p data-nodeid=\"70897\">\n                      在上一课时中，我们已经学习了如何通过 Docker 和 Kubernetes\n                      部署和运行微服务；在本课时，我们将介绍如何<strong\n                        data-nodeid=\"70986\"\n                        >使用 Jenkins 进行持续集成和自动化测试</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"72097\" class=\"\">\n                      持续集成与 Jenkins Pipeline\n                    </h3>\n\n                    <p data-nodeid=\"73051\">\n                      在敏捷开发中，<strong data-nodeid=\"73058\">持续集成</strong\n                      >（CI，Continuous\n                      Integration）是为了更快地发现和修复系统集成遇到的各类问题，它建议开发人员一天最少提交一次或者多次代码到代码库中，让自动化工具对提交的代码进行集成部署，并使用自动化测试工具检验代码是否正常运行，从而更快地发现代码中存在的问题并进行修复。\n                    </p>\n                    <p data-nodeid=\"73544\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/3D/B2/CgqCHl8qbbqAISHvAADBs7kPsgA183.png\"\n                        alt=\"1.png\"\n                        data-nodeid=\"73548\"\n                      />\n                    </p>\n                    <div data-nodeid=\"74027\" class=\"\">\n                      <p style=\"text-align: center\">CI 简易流程图</p>\n                    </div>\n\n                    <p data-nodeid=\"70901\">\n                      一般来说，业务系统经过微服务划分后，每一个微服务都是由独立的小团队进行开发和维护，在系统集成时，考虑到微服务之间存在大量的互相调用，这就要求我们不仅要验证微服务内模块的集成结果，还需要验证微服务之间的集成结果。因此，持续集成能够加快各个小团队之间的协作，及早发现系统集成中遇到的问题，进而提升整个项目的开发效率。\n                    </p>\n                    <p data-nodeid=\"70902\">\n                      <strong data-nodeid=\"71003\"\n                        >Jenkins 是常用的持续集成工具</strong\n                      >。它采用 Java 开发，提供 Web\n                      界面简化操作，并支持插件式扩展，可以处理几乎任何类型的构建和持续集成。Jenkins\n                      中提供多种方式进行构建工作，其中 Pipeline\n                      是最为常用的方式之一。\n                    </p>\n                    <p data-nodeid=\"70903\">\n                      <strong data-nodeid=\"71012\"\n                        >Pipeline 是一套运行在 Jenkins 上的工作框架</strong\n                      >。它能够将多个节点中的任务连接起来，实现单个节点难以完成的复杂流程的编排和可视化工作。Pipeline\n                      以代码的形式实现，它将一个流水线划分为多个 Stage，每个\n                      Stage 代表了一组操作，比如构建、测试、部署等；而 Stage\n                      内部又由多个 Step 组成，每一个 Step\n                      就是基本的操作命令，比如打印日志 \"echo\" 等命令。\n                    </p>\n                    <p data-nodeid=\"70904\">\n                      在本课时的后半部分，我们将通过一个 Pipeline 完成 user\n                      服务从 GitHub 中拉取代码，到编译打包成镜像，再到部署到\n                      Kubernetes 的流程。\n                    </p>\n                    <h3 data-nodeid=\"74506\" class=\"\">Go 的单元测试</h3>\n\n                    <p data-nodeid=\"70906\">\n                      在前面的“CI\n                      简易流程图”中，我们可以看到服务在经过构建和部署之后，会进行相应的测试来验证部署的代码是否合理。Go\n                      本身提供了一套轻量级的测试框架，用于对 Go\n                      程序进行单元测试和基准测试。go test\n                      命令是一个按照一定的约定和组织来测试代码的程序，它执行的文件都是以“_test.go”\n                      作为后缀，这部分文件不会包含在 go build 的代码构建中。\n                    </p>\n                    <p data-nodeid=\"70907\">\n                      在测试文件中主要存在以下三种函数类型：\n                    </p>\n                    <ol data-nodeid=\"70908\">\n                      <li data-nodeid=\"70909\">\n                        <p data-nodeid=\"70910\">\n                          以 Test\n                          作为函数名前缀的测试函数，一般用作单元测试，测试函数的逻辑行为是否正确；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"70911\">\n                        <p data-nodeid=\"70912\">\n                          以 Benchmark\n                          作为函数名前缀的基准测试函数，一般用来衡量函数的性能；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"70913\">\n                        <p data-nodeid=\"70914\">\n                          以 Example\n                          作为函数名前缀的示例函数，主要用于提供示例文档。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"70915\">\n                      接下来我们通过 user_dao_test.go 测试文件介绍如何编写 Go\n                      的单元测试用例，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> dao \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> ( \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"testing\"</span> \n</div></li><li><div class=\"code-word\">) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestUserDAOImpl_Save</span><span class=\"hljs-params\">(t *testing.T)</span></span> { \n</div></li><li><div class=\"code-word\">\tuserDAO := &amp;UserDAOImpl{} \n</div></li><li><div class=\"code-word\">\terr := InitMysql(<span class=\"hljs-string\">\"127.0.0.1\"</span>, <span class=\"hljs-string\">\"3306\"</span>, <span class=\"hljs-string\">\"root\"</span>, <span class=\"hljs-string\">\"123456\"</span>, <span class=\"hljs-string\">\"user\"</span>) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{ \n</div></li><li><div class=\"code-word\">\t\tt.Error(err) \n</div></li><li><div class=\"code-word\">\t\tt.FailNow() \n</div></li><li><div class=\"code-word\">\t} \n</div></li><li><div class=\"code-word\">\tuser := &amp;UserEntity{ \n</div></li><li><div class=\"code-word\">\t\tUsername:<span class=\"hljs-string\">\"aoho\"</span>, \n</div></li><li><div class=\"code-word\">\t\tPassword:<span class=\"hljs-string\">\"aoho\"</span>, \n</div></li><li><div class=\"code-word\">\t\tEmail:<span class=\"hljs-string\">\"aoho@mail.com\"</span>, \n</div></li><li><div class=\"code-word\">\t} \n</div></li><li><div class=\"code-word\">\terr = userDAO.Save(user) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{ \n</div></li><li><div class=\"code-word\">\t\tt.Error(err) \n</div></li><li><div class=\"code-word\">\t\tt.FailNow() \n</div></li><li><div class=\"code-word\">\t} \n</div></li><li><div class=\"code-word\">\tt.Logf(<span class=\"hljs-string\">\"new User ID is %d\"</span>, user.ID) \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestUserDAOImpl_SelectByEmail</span><span class=\"hljs-params\">(t *testing.T)</span></span> { \n</div></li><li><div class=\"code-word\">\tuserDAO := &amp;UserDAOImpl{} \n</div></li><li><div class=\"code-word\">\terr := InitMysql(<span class=\"hljs-string\">\"127.0.0.1\"</span>, <span class=\"hljs-string\">\"3306\"</span>, <span class=\"hljs-string\">\"root\"</span>, <span class=\"hljs-string\">\"123456\"</span>, <span class=\"hljs-string\">\"user\"</span>) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{ \n</div></li><li><div class=\"code-word\">\t\tt.Error(err) \n</div></li><li><div class=\"code-word\">\t\tt.FailNow() \n</div></li><li><div class=\"code-word\">\t} \n</div></li><li><div class=\"code-word\">\tuser, err := userDAO.SelectByEmail(<span class=\"hljs-string\">\"aoho@mail.com\"</span>) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{ \n</div></li><li><div class=\"code-word\">\t\tt.Error(err) \n</div></li><li><div class=\"code-word\">\t\tt.FailNow() \n</div></li><li><div class=\"code-word\">\t} \n</div></li><li><div class=\"code-word\">\tt.Logf(<span class=\"hljs-string\">\"result uesrname is %s\"</span>, user.Username) \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"70917\">\n                      一般来说，测试文件会以“<strong data-nodeid=\"71042\"\n                        >待测试文件名 + _test.go</strong\n                      >” 的方式命名，比如 user_dao_test.go，说明是对 user_dao.go\n                      文件的测试用例。类似的，测试函数也是以 “Test +\n                      待测试函数”的方式进行命名，比如\n                      TestUserDAOImpl_SelectByEmail 是对 UserDAOImpl 结构体的\n                      SelectByEmail\n                      方法进行测试，你也可以根据测试路径的不同，添加额外的修饰语。\n                    </p>\n                    <p data-nodeid=\"70918\">\n                      测试文件需要导入 testing 包，测试函数中的 *testing.T\n                      参数用于报告测试结果和附加的日志信息。我们可以通过 go test\n                      命令运行测试用例，在 user_dao_test.go 所在目录下执行 go\n                      test 命令，即可执行 user_dao_test.go\n                      内所有的测试函数，并在命令行打印相应的执行结果。\n                    </p>\n                    <h3 data-nodeid=\"74986\" class=\"\">\n                      使用 Pipeline 构建部署服务\n                    </h3>\n\n                    <p data-nodeid=\"70920\">\n                      在部署 Pipeline 服务之前，我们首先将 user 服务依赖的 MySQL\n                      和 Redis 独立部署到 Kubernetes 上，这里我们以 Redis 的\n                      yaml 配置为例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-redis</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-redis</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">strategy:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">RollingUpdate</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">selector:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">matchLabels:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-redis</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">template:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-redis</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">containers:</span>                    <span class=\"hljs-comment\">#定义Redis容器，开放6379端口 </span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-redis</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">redis:5.0</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">ports:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">6379</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">imagePullPolicy:</span> <span class=\"hljs-string\">IfNotPresent</span> \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"70922\">\n                      user-redis.yaml 文件通过 Deployment Controller 管理\n                      Pod，当 Controller 中的 Pod 出现异常被重启时，很可能导致\n                      Pod 的 IP 发生变化。如果此时 user 服务通过固定 IP\n                      的方式访问\n                      Redis，很可能会访问失败。为了避免这种情况，我们可以为\n                      user-redis Pod 定义一个 Service，配置文件描述如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span>  \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">metadata:</span>  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-redis-service</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">selector:</span>  \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-redis</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">ports:</span>   \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">6379</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-redis-tcp</span> \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"70924\">\n                      在创建好 Pod 后，再执行 kubectl create -f\n                      user-redis-service.yaml 命令，即可为 user-redis Pod\n                      生成一个 Service。Service 定义了一组 Pod\n                      的逻辑集合和一个用于访问它们的策略，Kubernetes 集群会为\n                      Service 分配一个固定的 Cluster\n                      IP，用于集群内部的访问。我们可以通过以下命令查看 Service\n                      的信息，包括 Cluster IP 等信息：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">kubectl get services \n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"70926\">\n                      通过 Cluster IP 访问 MySQL 和 Redis 等服务，我们就无须担心\n                      Pod IP 的变化。\n                    </p>\n                    <p data-nodeid=\"70927\">\n                      通过 Pipeline 部署服务到 Kubernetes 集群，主要有以下步骤：\n                    </p>\n                    <ol data-nodeid=\"70928\">\n                      <li data-nodeid=\"70929\">\n                        <p data-nodeid=\"70930\">从 GitHub 中拉取代码；</p>\n                      </li>\n                      <li data-nodeid=\"70931\">\n                        <p data-nodeid=\"70932\">构建 Docker 镜像；</p>\n                      </li>\n                      <li data-nodeid=\"70933\">\n                        <p data-nodeid=\"70934\">\n                          上传 Docker 镜像到 Docker Hub；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"70935\">\n                        <p data-nodeid=\"70936\">将应用部署 Kubernetes；</p>\n                      </li>\n                      <li data-nodeid=\"70937\">\n                        <p data-nodeid=\"70938\">接口测试。</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"70939\">\n                      <strong data-nodeid=\"71069\"\n                        >在 Pipeline 中，我们将上述步骤组织成相应的\n                        Stage</strong\n                      >，让 Jenkins\n                      为我们完成服务的持续集成和自动化测试，接下来我们以 user\n                      服务的部署作为例子。\n                    </p>\n                    <p data-nodeid=\"70940\">\n                      Pipeline 脚本是由 Groovy 语言实现，支持\n                      Declarative（声明式）和\n                      Scripted（脚本式）语法，我们接下来的演示就基于脚本式语法进行介绍。\n                    </p>\n                    <p data-nodeid=\"70941\">\n                      <strong data-nodeid=\"71075\">第一步，拉取代码</strong\n                      >。Stage 的声明如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"groovy\"><ol><li><div class=\"code-word\">stage(<span class=\"hljs-string\">'clone code from github'</span>) { \n</div></li><li><div class=\"code-word\">    echo <span class=\"hljs-string\">\"first stage: clone code\"</span> \n</div></li><li><div class=\"code-word\">    git <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">\"https://github.com/longjoy/micro-go-course.git\"</span> \n</div></li><li><div class=\"code-word\">    script { \n</div></li><li><div class=\"code-word\">        commit_id = sh(<span class=\"hljs-attr\">returnStdout:</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">script:</span> <span class=\"hljs-string\">'git rev-parse --short HEAD'</span>).trim() \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"70943\">\n                      我们通过 git url 命令从 GitHub 中获取 user\n                      服务的代码，并将本次提交记录的 commit_id\n                      提取出来作为变量使用。\n                    </p>\n                    <p data-nodeid=\"70944\">\n                      接下来是<strong data-nodeid=\"71084\"\n                        >第二步，使用 user 服务中的 Dockfile 定义构建相应的 user\n                        镜像</strong\n                      >。Stage 声明如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"groovy\"><ol><li><div class=\"code-word\">stage(<span class=\"hljs-string\">'build image'</span>) { \n</div></li><li><div class=\"code-word\">    echo <span class=\"hljs-string\">\"second stage: build docker image\"</span> \n</div></li><li><div class=\"code-word\">    sh <span class=\"hljs-string\">\"docker build -t aoho/user:${commit_id} section11/user/\"</span> \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"70946\">\n                      为了方便在排查问题时可以根据对应的代码记录定位代码，我们采用了\n                      GitHub 的提交记录 commit_id 作为镜像的 tag。同时为了将\n                      MySQL 和 Redis 的地址作为参数传入，修改 user 服务的\n                      Dockerfile 为如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"groovy\"><ol><li><div class=\"code-word\">FROM <span class=\"hljs-attr\">golang:</span>latest \n</div></li><li><div class=\"code-word\">WORKDIR <span class=\"hljs-regexp\">/root/</span>micro-go-course<span class=\"hljs-regexp\">/section10/</span>user \n</div></li><li><div class=\"code-word\">COPY <span class=\"hljs-regexp\">/ /</span>root<span class=\"hljs-regexp\">/micro-go-course/</span>section10/user \n</div></li><li><div class=\"code-word\">RUN go env -w GOPROXY=<span class=\"hljs-attr\">https:</span><span class=\"hljs-comment\">//goproxy.cn,direct </span>\n</div></li><li><div class=\"code-word\">RUN go build -o user \n</div></li><li><div class=\"code-word\">EXPOSE <span class=\"hljs-number\">10086</span> \n</div></li><li><div class=\"code-word\">ENTRYPOINT ./user -mysql.addr $mysqlAddr -redis.addr $redisAddr \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"77871\">\n                      mysqlAddr 和 redisAddr 将在 user.yaml\n                      配置文件中以环境变量的方式指定 MySQL 和 Redis 的地址。\n                    </p>\n                    <p data-nodeid=\"77872\">\n                      <strong data-nodeid=\"77882\">第三步</strong>，为了方便\n                      Kubernetes 拉取服务的镜像，我们<strong data-nodeid=\"77883\"\n                        >将第二步构建好的 Docker 镜像推送到镜像仓库中</strong\n                      >。如下声明所示：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"groovy\"><ol><li><div class=\"code-word\">stage(<span class=\"hljs-string\">'push image'</span>) { \n</div></li><li><div class=\"code-word\">    echo <span class=\"hljs-string\">\"third stage: push docker image to registry\"</span> \n</div></li><li><div class=\"code-word\">    sh <span class=\"hljs-string\">\"docker login -u eoho -p xxxxxx\"</span> \n</div></li><li><div class=\"code-word\">    sh <span class=\"hljs-string\">\"docker push aoho/user:${commit_id}\"</span> \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"77382\">\n                      Docker 中默认的镜像仓库为 Docker Hub，上述声明中就将 user\n                      镜像推送到 Docker Hub\n                      中，当然你也可以选择将镜像推送到私有仓库中。往 Docker Hub\n                      中推送镜像需要提交账号密码，这需要我们预先注册申请一个\n                      Docker Hub 账户。\n                    </p>\n                    <p data-nodeid=\"77383\">\n                      然后<strong data-nodeid=\"77392\"\n                        >在第四步中，我们使用 kubectl 将 user 服务部署到\n                        Kubernetes 中</strong\n                      >。为了保证部署到正确版本的镜像，我们需要将 commit_id\n                      替换到 user.yaml 文件中，以及将 mysqlAddr 和 redisAddr\n                      作为环境变量输入，user.yaml 的配置如下：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-service</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-service</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">strategy:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">RollingUpdate</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">selector:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">matchLabels:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-service</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">template:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-service</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">containers:</span>                    <span class=\"hljs-comment\">#定义User容器，开放10086端口 </span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">aoho/user:&lt;COMMIT_ID_TAG&gt;</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">ports:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">10086</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">imagePullPolicy:</span> <span class=\"hljs-string\">IfNotPresent</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">env:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">mysqlAddr</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&lt;MYSQL_ADDR_TAG&gt;</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">redisAddr</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">value:</span> <span class=\"hljs-string\">&lt;REDIS_ADDR_TAG&gt;</span> \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"70952\">\n                      在上述配置文件中，我们使用 Deployment Controller 来管理\n                      Pod，创建 Pod 的模板为第二步中构建的 user\n                      镜像。构建第四步的 Stage 声明如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"groovy\"><ol><li><div class=\"code-word\">stage(<span class=\"hljs-string\">'deploy to Kubernetes'</span>) { \n</div></li><li><div class=\"code-word\">    echo <span class=\"hljs-string\">\"forth stage: deploy to Kubernetes\"</span> \n</div></li><li><div class=\"code-word\">    sh <span class=\"hljs-string\">\"sed -i 's/&lt;COMMIT_ID_TAG&gt;/${commit_id}/' user.yaml\"</span> \n</div></li><li><div class=\"code-word\">    sh <span class=\"hljs-string\">\"sed -i 's/&lt;MYSQL_ADDR_TAG&gt;/${mysql_addr}/' user.yaml\"</span> \n</div></li><li><div class=\"code-word\">    sh <span class=\"hljs-string\">\"sed -i 's/&lt;REDIS_ADDR_TAG&gt;/${redis_addr}/' user.yaml\"</span> \n</div></li><li><div class=\"code-word\">    sh <span class=\"hljs-string\">\"kubectl apply -f user.yaml\"</span> \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"70954\">\n                      在上述声明中，我们首先使用 sed 命令将 yaml\n                      文件中标识替换为对应的变量，再通过 kubectl apply\n                      命令重新部署了 user-service Pod。\n                    </p>\n                    <p data-nodeid=\"70955\">\n                      为了让 user 服务的接口在 Kubernetes\n                      集群外也能够访问，我们通过 NodePort 的方式将 user\n                      服务的端口暴露到 Node 节点的相应端口，定义\n                      user-service.yaml 配置如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\"> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-service-http</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\"> <span class=\"hljs-attr\">selector:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-service</span> \n</div></li><li><div class=\"code-word\"> <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span> \n</div></li><li><div class=\"code-word\"> <span class=\"hljs-attr\">ports:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">10086</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">10086</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">30036</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">user-service-tcp</span> \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"70957\">\n                      在上述配置中，我们指定的 Service 的类型为 NodePort，并将\n                      user 服务的接口通过 Node 节点的 30036\n                      暴露出去，对此，我们就可以在集群外部通过 NodeIP:NodePort\n                      的方式访问 user 服务了。\n                    </p>\n                    <p data-nodeid=\"70958\">\n                      <strong data-nodeid=\"71118\"\n                        >最后一步，我们通过 go test 对 user 中的 HTTP\n                        接口进行接口测试，验证代码集成的效果</strong\n                      >。Stage 声明如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"groovy\"><ol><li><div class=\"code-word\">stage(<span class=\"hljs-string\">'http test'</span>) { \n</div></li><li><div class=\"code-word\">    echo <span class=\"hljs-string\">\"fifth stage: http test\"</span> \n</div></li><li><div class=\"code-word\">    sh <span class=\"hljs-string\">\"cd section11/user/transport &amp;&amp; go test -args ${user_addr}\"</span> \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"70960\">\n                      上述 Stage 中 user_addr 变量即 NodeIP:NodePort，user\n                      服务通过 NodePort 暴露到 Kubernetes\n                      集群外的可访问端口。我们使用 go test 命令运行了 transport\n                      包下的测试文件用于测试 HTTP 接口。\n                    </p>\n                    <p data-nodeid=\"70961\">\n                      到此，我们通过 Pipeline 对 user\n                      服务进行持续集成和测试的整个流程就已经完成了，其完整的\n                      Pipeline 脚本如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"groovy\"><ol><li><div class=\"code-word\">node { \n</div></li><li><div class=\"code-word\">    script { \n</div></li><li><div class=\"code-word\">        mysql_addr = <span class=\"hljs-string\">'127.0.0.1'</span> <span class=\"hljs-comment\">// service cluster ip </span>\n</div></li><li><div class=\"code-word\">        redis_addr = <span class=\"hljs-string\">'127.0.0.1'</span> <span class=\"hljs-comment\">// service cluster ip </span>\n</div></li><li><div class=\"code-word\">        user_addr = <span class=\"hljs-string\">'127.0.0.1:30036'</span> <span class=\"hljs-comment\">// nodeIp : port </span>\n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">    stage(<span class=\"hljs-string\">'clone code from github'</span>) { \n</div></li><li><div class=\"code-word\">        echo <span class=\"hljs-string\">\"first stage: clone code\"</span> \n</div></li><li><div class=\"code-word\">        git <span class=\"hljs-attr\">url:</span> <span class=\"hljs-string\">\"https://github.com/longjoy/micro-go-course.git\"</span> \n</div></li><li><div class=\"code-word\">        script { \n</div></li><li><div class=\"code-word\">            commit_id = sh(<span class=\"hljs-attr\">returnStdout:</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">script:</span> <span class=\"hljs-string\">'git rev-parse --short HEAD'</span>).trim() \n</div></li><li><div class=\"code-word\">        } \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">    stage(<span class=\"hljs-string\">'build image'</span>) { \n</div></li><li><div class=\"code-word\">        echo <span class=\"hljs-string\">\"second stage: build docker image\"</span> \n</div></li><li><div class=\"code-word\">        sh <span class=\"hljs-string\">\"docker build -t aoho/user:${commit_id} section11/user/\"</span> \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">    stage(<span class=\"hljs-string\">'push image'</span>) { \n</div></li><li><div class=\"code-word\">        echo <span class=\"hljs-string\">\"third stage: push docker image to registry\"</span> \n</div></li><li><div class=\"code-word\">        sh <span class=\"hljs-string\">\"docker login -u aoho -p xxxxxx\"</span> \n</div></li><li><div class=\"code-word\">        sh <span class=\"hljs-string\">\"docker push aoho/user:${commit_id}\"</span> \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">    stage(<span class=\"hljs-string\">'deploy to Kubernetes'</span>) { \n</div></li><li><div class=\"code-word\">        echo <span class=\"hljs-string\">\"forth stage: deploy to Kubernetes\"</span> \n</div></li><li><div class=\"code-word\">        sh <span class=\"hljs-string\">\"sed -i 's/&lt;COMMIT_ID_TAG&gt;/${commit_id}/' user-service.yaml\"</span> \n</div></li><li><div class=\"code-word\">        sh <span class=\"hljs-string\">\"sed -i 's/&lt;MYSQL_ADDR_TAG&gt;/${mysql_addr}/' user-service.yaml\"</span> \n</div></li><li><div class=\"code-word\">        sh <span class=\"hljs-string\">\"sed -i 's/&lt;REDIS_ADDR_TAG&gt;/${redis_addr}/' user-service.yaml\"</span> \n</div></li><li><div class=\"code-word\">        sh <span class=\"hljs-string\">\"kubectl apply -f user.yaml\"</span> \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">    stage(<span class=\"hljs-string\">'http test'</span>) { \n</div></li><li><div class=\"code-word\">        echo <span class=\"hljs-string\">\"fifth stage: http test\"</span> \n</div></li><li><div class=\"code-word\">        sh <span class=\"hljs-string\">\"cd section11/user/transport &amp;&amp; go test  -args ${user_addr}\"</span> \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"70963\">\n                      我们可以在 Jenkins 中创建一个 Pipeline\n                      任务，将上述脚本复制到 Script\n                      区域中，保存后触发构建，不过在这之前需要在 Jenkins\n                      中安装和配置好 Kubernetes Plugin 和 Docker\n                      Plugin。在实际的开发中，我们可以将上述 Pipeline 脚本放入到\n                      Jenkinsfile 中，与代码一同提交到代码库，将 Pipeline\n                      任务的脚本配置类型修改为 Pipeline Script from\n                      SCM，引用代码库中 Pipeline 脚本进行构建。\n                    </p>\n                    <p data-nodeid=\"78834\">\n                      下图为在 Pipeline 中构建 user 服务的结果视图，绿色表示该\n                      Stage 执行成功。\n                    </p>\n                    <p data-nodeid=\"80790\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/3D/A7/Ciqc1F8qbhyAEIumAAFlU8qnllQ650.png\"\n                        alt=\"2.png\"\n                        data-nodeid=\"80794\"\n                      />\n                    </p>\n                    <div data-nodeid=\"80791\" class=\"\">\n                      <p style=\"text-align: center\">\n                        Pipeline 中构建 user 服务的结果视图\n                      </p>\n                    </div>\n                    <p></p>\n                    <br />\n                    Pipeline 中构建 user 服务的结果视图\n                    <p></p>\n                    <p></p>\n                    <p></p>\n\n                    <h3 data-nodeid=\"81271\" class=\"\">小结</h3>\n\n                    <p data-nodeid=\"70968\">\n                      持续集成和自动化测试能够对开发代码进行快速校验和反馈，帮助开发人员更早地发现代码中的集成\n                      Bug 并进行修改，有效提高团队的开发效率。\n                    </p>\n                    <p data-nodeid=\"70969\">\n                      在本课时，我们主要介绍了如何通过 Jenkins\n                      对服务进行持续集成和自动化测试。我们借助了 Jenkins\n                      Pipeline 的能力， 把 user 服务的代码从代码库拉取出来打包成\n                      user 镜像，并将镜像部署到 Kubernetes 集群，最后还通过 go\n                      test 对 user 服务中提供的 HTTP 接口进行测试。\n                    </p>\n                    <p data-nodeid=\"70970\">\n                      其实除了手动触发构建外，Jenkins\n                      中还支持多种触发器，比如通过 Webhook\n                      监听代码库中代码的变化，在代码库发生提交或者合并时自动触发一次构建任务，这能大大提升持续集成的效率。自动化测试也存在其他多种多样的方式，比如借助\n                      JMeter 和 Jenkins 对服务进行性能测试等。\n                    </p>\n                    <p data-nodeid=\"70971\">\n                      希望通过本课时的学习能够帮助你了解持续集成和自动化测试的基本流程，并掌握使用\n                      Jenkins 进行持续集成的能力。\n                    </p>\n                    <p data-nodeid=\"70972\">\n                      最后，关于该课时的内容，如果你有什么独到的见解，欢迎在留言区与我分享。\n                    </p>\n            "}