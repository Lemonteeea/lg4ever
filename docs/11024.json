{"title":"第21讲：你的代码到底是怎么编译的？","context":"\n                    <p data-nodeid=\"226992\">\n                      Node.js 的出现，越来越多前端自动化工具涌现出来，包括早期的\n                      Grunt、Gulp 以及现在流行的\n                      webpack。随着这些工具的功能愈发强大，其重要性也在不断提升，成熟的框架都已经将这些工具封装成专用的命令行工具，比如\n                      angular-cli 和\n                      vue-cli。这一课时我们将继续承接前面课程的“硬核”风格，通过分析\n                      webpack(5.0.0-beta.23) 的源码来深入理解其原理。\n                    </p>\n\n                    <p data-nodeid=\"226497\">\n                      webpack 有两个执行入口，分别是通过命令行调用的\n                      bin/webpack.js，以及直接在代码中引用的\n                      lib/webpack.js。我们避开命令参数解析以及进程调用的过程来分析\n                      lib/webpack.js，下面是部分源码（省去了数组型配置及 watch\n                      功能）。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// lib/webpack.js </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;webpack&nbsp;=&nbsp;(<span class=\"hljs-function\">(<span class=\"hljs-params\">&nbsp;options,&nbsp;callback&nbsp;</span>)&nbsp;=&gt;</span>&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;validateSchema(webpackOptionsSchema,&nbsp;options); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">let</span>&nbsp;compiler; \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;compiler&nbsp;=&nbsp;createCompiler(options); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>&nbsp;(callback)&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;compiler.run(<span class=\"hljs-function\">(<span class=\"hljs-params\">err,&nbsp;stats</span>)&nbsp;=&gt;</span>&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;compiler.close(<span class=\"hljs-function\"><span class=\"hljs-params\">err2</span>&nbsp;=&gt;</span>&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback(err&nbsp;||&nbsp;err2,&nbsp;stats); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;}); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;compiler; \n</div></li><li><div class=\"code-word\">}); \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"229023\" class=\"\">\n                      从源码中可以看到，webpack() 函数内部有 3\n                      个重要的操作：<strong data-nodeid=\"229037\"\n                        >校验配置项</strong\n                      >、<strong data-nodeid=\"229038\">创建编译器</strong\n                      >、<strong data-nodeid=\"229039\">执行编译</strong>。\n                    </p>\n\n                    <h3 data-nodeid=\"226500\">校验配置项</h3>\n                    <p data-nodeid=\"226501\">\n                      校验配置项是通过调用 validateSchema()\n                      函数来实现的，这个函数的内部其实是调用的\n                      <a\n                        href=\"https://www.npmjs.com/package/schema-utils\"\n                        data-nodeid=\"226580\"\n                        >schema-utils</a\n                      >\n                      模块的 validate () 函数 ，validate() 函数支持通过\n                      JSONSchema 规则来校验 json 对象。这些 JSONSchema\n                      规则保存在 schemas/WebpackOptions.json\n                      文件中，对应代码中的 webpackOptionsSchema 变量。\n                    </p>\n                    <p data-nodeid=\"226502\">\n                      这里简单介绍一下 JSONSchema，它是通过 JSON 文件来描述 JSON\n                      文件 ，可以用来校验 JSON 对象、生成 mock 数据及描述 JSON\n                      对象结构。下面是一个对 output 参数的部分校验规则。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">\"Output\"</span>:&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-string\">\"description\"</span>:&nbsp;<span class=\"hljs-string\">\"Options&nbsp;affecting&nbsp;the&nbsp;output&nbsp;of&nbsp;the&nbsp;compilation.&nbsp;\\`output\\`&nbsp;options&nbsp;tell&nbsp;webpack&nbsp;how&nbsp;to&nbsp;write&nbsp;the&nbsp;compiled&nbsp;files&nbsp;to&nbsp;disk.\"</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-string\">\"type\"</span>:&nbsp;<span class=\"hljs-string\">\"object\"</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-string\">\"properties\"</span>:&nbsp;{ \n</div></li><li><div class=\"code-word\">     ... \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"path\"</span>:&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"$ref\"</span>:&nbsp;<span class=\"hljs-string\">\"#/definitions/Path\"</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\">... \n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">\"definitions\"</span>: { \n</div></li><li><div class=\"code-word\">&nbsp;<span class=\"hljs-string\">\"Path\"</span>:&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"description\"</span>:&nbsp;<span class=\"hljs-string\">\"The&nbsp;output&nbsp;directory&nbsp;as&nbsp;**absolute&nbsp;path**&nbsp;(required).\"</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\">\"type\"</span>:&nbsp;<span class=\"hljs-string\">\"string\"</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"226504\">\n                      从 \"type\": \"object\" 可以看到 Output 是一个对象，它拥有属性\n                      Path，而这个 P ath 类型定义在 definitions 对象的 Path\n                      属性中，通过 \"type\": \"string\"\n                      可以看到，它是一个字符串类型。WebpackOptions.json\n                      文件内容比较多，有 3000\n                      多行，这里就不多介绍了，有兴趣的同学可以仔细研究。\n                    </p>\n                    <p data-nodeid=\"226505\">\n                      一句话概括，validateSchema() 函数通过 JSONSchema 对\n                      options\n                      进行校验，如果不符合配置规则，则退出并在控制台输出格式化的错误信息。这样就能避免因为选项参数不正确而导致程序运行出错。\n                    </p>\n                    <h3 data-nodeid=\"226506\">创建编译器</h3>\n                    <p data-nodeid=\"226507\">\n                      创建编译器操作是在 compiler.compile() 函数中调用\n                      createCompiler() 函数来实现的，该函数会返回一个 Compiler\n                      实例。createCompiler() 函数源码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// lib/webpack.js </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;createCompiler&nbsp;=&nbsp;<span class=\"hljs-function\"><span class=\"hljs-params\">rawOptions</span>&nbsp;=&gt;</span>&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">const</span>&nbsp;options&nbsp;=&nbsp;getNormalizedWebpackOptions(rawOptions); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;applyWebpackOptionsBaseDefaults(options); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">const</span>&nbsp;compiler&nbsp;=&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;Compiler(options.context); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;compiler.options&nbsp;=&nbsp;options; \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;NodeEnvironmentPlugin({ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">infrastructureLogging</span>:&nbsp;options.infrastructureLogging \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;}).apply(compiler); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>&nbsp;(<span class=\"hljs-built_in\">Array</span>.isArray(options.plugins))&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">for</span>&nbsp;(<span class=\"hljs-keyword\">const</span>&nbsp;plugin&nbsp;<span class=\"hljs-keyword\">of</span>&nbsp;options.plugins)&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>&nbsp;(<span class=\"hljs-keyword\">typeof</span>&nbsp;plugin&nbsp;===&nbsp;<span class=\"hljs-string\">\"function\"</span>)&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plugin.call(compiler,&nbsp;compiler); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\">else</span>&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plugin.apply(compiler); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;applyWebpackOptionsDefaults(options); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;compiler.hooks.environment.call(); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;compiler.hooks.afterEnvironment.call(); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;WebpackOptionsApply().process(options,&nbsp;compiler); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;compiler.hooks.initialize.call(); \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;compiler; \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"230996\" class=\"\">\n                      在 createCompiler() 函数内部可以看到，首先会通过\n                      getNormalizedWebpackOptions()\n                      函数将默认的配置参数与自定义的配置参数 rawOptions\n                      进行合成，赋值给变量\n                      options。applyWebpackOptionsBaseDefaults()\n                      函数则将程序当前执行路径赋值给 options.context 属性。\n                    </p>\n\n                    <p data-nodeid=\"226510\">\n                      经过以上处理之后，变量 options 才会作为参数传递给类\n                      Compiler\n                      来生成实例。在构造函数中，实例的很多属性进行了初始化操作，其中比较重要的是\n                      hooks 属性。下面是截取的部分源码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// lib/Compiler.js </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">constructor</span>(context)&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">this</span>.hooks&nbsp;=&nbsp;<span class=\"hljs-built_in\">Object</span>.freeze({ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">initialize</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">shouldEmit</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncBailHook([<span class=\"hljs-string\">\"compilation\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">done</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncSeriesHook([<span class=\"hljs-string\">\"stats\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">afterDone</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([<span class=\"hljs-string\">\"stats\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">additionalPass</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncSeriesHook([]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">beforeRun</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncSeriesHook([<span class=\"hljs-string\">\"compiler\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">run</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncSeriesHook([<span class=\"hljs-string\">\"compiler\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">emit</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncSeriesHook([<span class=\"hljs-string\">\"compilation\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">assetEmitted</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncSeriesHook([<span class=\"hljs-string\">\"file\"</span>,&nbsp;<span class=\"hljs-string\">\"info\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">afterEmit</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncSeriesHook([<span class=\"hljs-string\">\"compilation\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">thisCompilation</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([<span class=\"hljs-string\">\"compilation\"</span>,&nbsp;<span class=\"hljs-string\">\"params\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">compilation</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([<span class=\"hljs-string\">\"compilation\"</span>,&nbsp;<span class=\"hljs-string\">\"params\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">normalModuleFactory</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([<span class=\"hljs-string\">\"normalModuleFactory\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">contextModuleFactory</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([<span class=\"hljs-string\">\"contextModuleFactory\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">beforeCompile</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncSeriesHook([<span class=\"hljs-string\">\"params\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">compile</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([<span class=\"hljs-string\">\"params\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">make</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncParallelHook([<span class=\"hljs-string\">\"compilation\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">finishMake</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncSeriesHook([<span class=\"hljs-string\">\"compilation\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">afterCompile</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncSeriesHook([<span class=\"hljs-string\">\"compilation\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">watchRun</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;AsyncSeriesHook([<span class=\"hljs-string\">\"compiler\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">failed</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([<span class=\"hljs-string\">\"error\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">invalid</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([<span class=\"hljs-string\">\"filename\"</span>,&nbsp;<span class=\"hljs-string\">\"changeTime\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">watchClose</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">infrastructureLog</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncBailHook([<span class=\"hljs-string\">\"origin\"</span>,&nbsp;<span class=\"hljs-string\">\"type\"</span>,&nbsp;<span class=\"hljs-string\">\"args\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">environment</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">afterEnvironment</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">afterPlugins</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([<span class=\"hljs-string\">\"compiler\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">afterResolvers</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([<span class=\"hljs-string\">\"compiler\"</span>]), \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">entryOption</span>:&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncBailHook([<span class=\"hljs-string\">\"context\"</span>,&nbsp;<span class=\"hljs-string\">\"entry\"</span>]) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;}); \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"231322\" class=\"\">\n                      为了防止 hooks 属性被修改，这里使用 Object.freeze()\n                      函数来创建对象。简单介绍一下 object.freeze()\n                      函数，它可以冻结一个对象。一个被冻结的对象再也不能被修改了；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。\n                    </p>\n\n                    <p data-nodeid=\"231974\" class=\"\">\n                      这里一共创建了 4\n                      种类型的钩子（hook），它们的名称和作用如下：\n                    </p>\n\n                    <ul data-nodeid=\"233359\">\n                      <li data-nodeid=\"233360\">\n                        <p data-nodeid=\"233361\">\n                          <strong data-nodeid=\"233372\"\n                            >SyncHook（同步钩子）</strong\n                          >，当钩子触发时，会依次调用钩子队列中的回调函数；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"233362\">\n                        <p data-nodeid=\"233363\">\n                          <strong data-nodeid=\"233377\"\n                            >SyncBailHook（同步钩子）</strong\n                          >，当钩子触发时，会依次调用钩子队列中的回调函数，如果遇到有返回值的函数则停止继续调用；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"233364\">\n                        <p data-nodeid=\"233365\">\n                          <strong data-nodeid=\"233382\"\n                            >AsyncSeriesHook（异步串行钩子）</strong\n                          >，如果钩子队列中有异步回调函数，则会等其执行完成后再执行剩余的回调函数；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"233366\">\n                        <p data-nodeid=\"233367\" class=\"\">\n                          <strong data-nodeid=\"233387\"\n                            >AsyncParallelHook（异步并行钩子）</strong\n                          >，可以异步执行钩子队列中的所有异步回调函数。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"226523\">\n                      下面一段代码是钩子函数的简单用法。通过 new\n                      关键字创建钩子实例，然后调用 tap() 函数来监听钩子，向 hook\n                      的钩子队列中添加一个回调函数 。 当执行 hook.call()\n                      函数时，会依次调用队列中的回调函数，并将参数传递给这些回调函数\n                      。 需要注意的是，\n                      参数的数量必须与实例化的数组长度一致。在下面的例子中，只能传递\n                      1 个参数。\n                    </p>\n                    <p data-nodeid=\"226524\">\n                      tapable\n                      模块提供了十多种钩子，这里就不一一详细介绍了，我们只要知道它实现了一些特殊的订阅机制即可，对钩子有兴趣的同学可以参看其\n                      <a\n                        href=\"https://www.npmjs.com/package/tapable\"\n                        data-nodeid=\"226631\"\n                        >文档</a\n                      >。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;{&nbsp;SyncHook&nbsp;}&nbsp;=&nbsp;<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'tapable'</span>); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;hook&nbsp;=&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;SyncHook([<span class=\"hljs-string\">'whatever'</span>]); \n</div></li><li><div class=\"code-word\">hook.tap(<span class=\"hljs-string\">'1'</span>,&nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;(<span class=\"hljs-params\">arg1</span>)&nbsp;</span>{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-built_in\">console</span>.log(arg1); \n</div></li><li><div class=\"code-word\">}); \n</div></li><li><div class=\"code-word\">hook.call(<span class=\"hljs-string\">'lagou'</span>); \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"226526\">\n                      接着继续往下看，会发现这样一行代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// lib/webpack.js </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">new</span> NodeEnvironmentPlugin({ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">infrastructureLogging</span>: options.infrastructureLogging \n</div></li><li><div class=\"code-word\">}).apply(compiler); \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"226528\" class=\"\">\n                      这种调用插件（plugin）的 apply() 函数的写法在 webpack\n                      中很常见，主要作用就是监听 compiler\n                      钩子事件，或者说是向钩子队列中插入一个回调函数，当对应的钩子事件触发时调用。\n                    </p>\n                    <p data-nodeid=\"226529\">\n                      钩子初始化完成后会调用 3 个钩子事件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// lib/webpack.js </span>\n</div></li><li><div class=\"code-word\">compiler.hooks.environment.call(); \n</div></li><li><div class=\"code-word\">compiler.hooks.afterEnvironment.call(); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">new</span> WebpackOptionsApply().process(options, compiler); \n</div></li><li><div class=\"code-word\">compiler.hooks.initialize.call(); \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"226531\">\n                      其中，process()\n                      函数会根据不同的执行环境引入一些默认的插件并调用它的\n                      apply() 函数，比如 Node 环境下会引入下面的插件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// lib/WebpackOptionsApply.js </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;NodeTemplatePlugin&nbsp;=&nbsp;<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./node/NodeTemplatePlugin\"</span>); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;ReadFileCompileWasmPlugin&nbsp;=&nbsp;<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./node/ReadFileCompileWasmPlugin\"</span>); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;ReadFileCompileAsyncWasmPlugin&nbsp;=&nbsp;<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./node/ReadFileCompileAsyncWasmPlugin\"</span>); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;NodeTargetPlugin&nbsp;=&nbsp;<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./node/NodeTargetPlugin\"</span>); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">new</span>&nbsp;NodeTemplatePlugin({ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-attr\">asyncChunkLoading</span>:&nbsp;options.target&nbsp;===&nbsp;<span class=\"hljs-string\">\"async-node\"</span> \n</div></li><li><div class=\"code-word\">}).apply(compiler); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">new</span>&nbsp;ReadFileCompileWasmPlugin({ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-attr\">mangleImports</span>:&nbsp;options.optimization.mangleWasmImports \n</div></li><li><div class=\"code-word\">}).apply(compiler); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">new</span>&nbsp;ReadFileCompileAsyncWasmPlugin().apply(compiler); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">new</span>&nbsp;NodeTargetPlugin().apply(compiler); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">new</span>&nbsp;LoaderTargetPlugin(<span class=\"hljs-string\">\"node\"</span>).apply(compiler); \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"226533\">\n                      至此，编译器已经创建完成。小结一下创建编译器步骤的主要逻辑，首先会将配置参数进行修改，比如加入一些默认配置项；然后创建一个编译器实例\n                      compiler，这个实例的构造函数会初始化一些钩子；最后就是调用插件的\n                      apply() 函数来监听钩子，同时也会主动触发一些钩子事件。\n                    </p>\n                    <h3 data-nodeid=\"226534\">执行编译</h3>\n                    <p data-nodeid=\"226535\">\n                      调用 compiler.compile()\n                      函数标志着进入编译阶段，该阶段非常依赖钩子，\n                      代码跳跃比较大，理解起来会有一定难度 。下面是 compile()\n                      函数的部分代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// lib/Compiler.js </span>\n</div></li><li><div class=\"code-word\">compile(callback) { \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> params = <span class=\"hljs-built_in\">this</span>.newCompilationParams(); \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">this</span>.hooks.beforeCompile.callAsync(params, <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> { \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> callback(err); \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">this</span>.hooks.compile.call(params); \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> compilation = <span class=\"hljs-built_in\">this</span>.newCompilation(params); \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">this</span>.hooks.make.callAsync(compilation, <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> { \n</div></li><li><div class=\"code-word\">    }) \n</div></li><li><div class=\"code-word\">  }) \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"226537\">\n                      首先是触发了 compiler.hooks.compile\n                      钩子，触发后，一些插件将进行初始化操作，为编译做好准备，比如\n                      LoaderTargetPlugin 插件将会加载需要的加载器。\n                    </p>\n                    <p data-nodeid=\"226538\">\n                      调用 newCompilation() 函数则会创建了一个 Compilation\n                      实例。注意，这里的 Compilation 和前面创建的 Compiler\n                      是有区别的：Compiler\n                      是全局唯一的，包含了配置参数、加载器、插件这些信息，它会一直存在\n                      webpack 的生命周期中；而 Compilation\n                      包含了当前模块的信息，只是代表一次编译过程。\n                    </p>\n                    <p data-nodeid=\"226539\">\n                      在创建 compilation 完成后会触发\n                      compiler.hooks.thisCompilation 钩子和\n                      compiler.hooks.compilation，激活 JavaScriptModulesPlugin\n                      插件的监听函数，从而加载 JavaScript 的解析模块 acorn 。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// lib/Compiler.j s </span>\n</div></li><li><div class=\"code-word\">newCompilation(params) { \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> compilation = <span class=\"hljs-keyword\">this</span>.createCompilation(); \n</div></li><li><div class=\"code-word\">  compilation.fileTimestamps = <span class=\"hljs-keyword\">this</span>.fileTimestamps; \n</div></li><li><div class=\"code-word\">  compilation.contextTimestamps = <span class=\"hljs-keyword\">this</span>.contextTimestamps; \n</div></li><li><div class=\"code-word\">  compilation.name = <span class=\"hljs-keyword\">this</span>.name; \n</div></li><li><div class=\"code-word\">  compilation.records = <span class=\"hljs-keyword\">this</span>.records; \n</div></li><li><div class=\"code-word\">  compilation.compilationDependencies = params.compilationDependencies; \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">this</span>.hooks.thisCompilation.call(compilation, params); \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">this</span>.hooks.compilation.call(compilation, params); \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> compilation; \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"234355\">\n                      在 compiler.compile() 函数中触发 compiler.hooks.make\n                      钩子标志着编译操作正式开始。那么哪些函数监听了 make\n                      钩子呢？通过搜索代码可以发现有 7 个插件监听了它。\n                    </p>\n                    <p data-nodeid=\"235044\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/3E/C3/CgqCHl8tItSAI1KMAABz6uawvig252.png\"\n                        alt=\"image (2).png\"\n                        data-nodeid=\"235052\"\n                      />\n                    </p>\n                    <div data-nodeid=\"235045\" class=\"\">\n                      <p style=\"text-align: center\">监听了 make 钩子的插件</p>\n                    </div>\n                    <p></p>\n\n                    <p data-nodeid=\"226544\">\n                      其中 EntryPlugin\n                      插件负责分析入口文件，下面是截取的部分代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// lib/EntryPlugin.js </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EntryPlugin</span> </span>{ \n</div></li><li><div class=\"code-word\">  apply(compiler) { \n</div></li><li><div class=\"code-word\">    compiler.hooks.make.tapAsync(<span class=\"hljs-string\">\"EntryPlugin\"</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">compilation, callback</span>) =&gt;</span> { \n</div></li><li><div class=\"code-word\">    \t<span class=\"hljs-keyword\">const</span> { entry, options, context } = <span class=\"hljs-built_in\">this</span>; \n</div></li><li><div class=\"code-word\">    \t<span class=\"hljs-keyword\">const</span> dep = EntryPlugin.createDependency(entry, options); \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 开始入口解析 </span>\n</div></li><li><div class=\"code-word\">    \tcompilation.addEntry(context, dep, options, <span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> { \n</div></li><li><div class=\"code-word\">    \t\tcallback(err); \n</div></li><li><div class=\"code-word\">    \t}); \n</div></li><li><div class=\"code-word\">    }); \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"226546\">\n                      EntryPlugin 插件中调用了 compilation 对象的 addEntry()\n                      函数，该函数中又调用了 _addEntryItem()\n                      函数将入口模块添加到模块依赖列表中，部分源码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">_addEntryItem(context, entry, target, options, callback) { \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">this</span>.addModuleChain(context, entry, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, <span class=\"hljs-built_in\">module</span></span>) =&gt;</span> { \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (err) { \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-built_in\">this</span>.hooks.failedEntry.call(entry, options, err); \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> callback(err); \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">this</span>.hooks.succeedEntry.call(entry, options, <span class=\"hljs-built_in\">module</span>); \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> callback(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-built_in\">module</span>); \n</div></li><li><div class=\"code-word\">  }); \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"226548\">\n                      在 addModuleChain() 函数中会调用 compilation 的\n                      handleModuleCreation() 函数，该函数代码比较多，其中会调用\n                      compilation 的 buildModule() 函数来构建模块。\n                    </p>\n                    <p data-nodeid=\"226549\">\n                      模块构建完成过后，通过 acorn\n                      生成模块代码的抽象语法树，根据抽象语法树分析这个模块是否还有依赖的模块，如果有则继续解析每个依赖的模块，直到所有依赖解析完成，最后合并生成输出文件。这个过程和前面几讲提到的编译器执行过程类似，就不再赘述了。\n                    </p>\n                    <h3 data-nodeid=\"226550\">总结</h3>\n                    <p data-nodeid=\"226551\">\n                      这一课时从源码层面分析了 webpack 的工作原理，webpack\n                      的执行过程大体上可以分为 3\n                      个步骤，包括：检验配置项、创建编译器、执行编译。\n                    </p>\n                    <p data-nodeid=\"226552\">\n                      在 检验 配置项时使用了 JSONSchema\n                      来校验配置参数。在创建编译器时，用到了 tapable\n                      模块提供的钩子机制，通过触发适当的钩子事件来让对应的插件进行初始化。\n                    </p>\n                    <p data-nodeid=\"226553\">\n                      在执行编译阶段，以 compiler.hooks.make\n                      钩子事件为起始点，触发入口文件的解析工作，并调用加载器对资源进行处理，然后构建成抽象语法树，将最终的抽象语法树转换成目标文件并输出到配置项指定的目录。\n                    </p>\n                    <p data-nodeid=\"235383\">\n                      最后布置一道思考题：尝试一下 tapable\n                      模块的各种钩子事件，分析比较一下它们的使用区别。\n                    </p>\n            "}