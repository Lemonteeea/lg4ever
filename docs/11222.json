{"title":"20 | 如何理解前端中面向对象的思想？","context":"\n                    <p data-nodeid=\"25256\" class=\"\">\n                      “对象”——这个概念在编程中非常重要，任何语言和领域的开发者都应该具有面向对象思维，才能够有效运用对象。良好的面向对象系统设计将是应用强健性、可维护性和可扩展性的关键；反之，如果面向对象环节有失误，将成为项目的灾难。\n                    </p>\n                    <p data-nodeid=\"25257\">\n                      说到 JavaScript\n                      面向对象，它实质是基于原型的对象系统，而不是基于类的。这是设计之初，由语言设计所决定的。随着\n                      ES Next 标准的进化和新特性的添加，使得 JavaScript\n                      面向对象更加贴近其他传统面向对象型语言。有幸目睹语言的发展和变迁，伴随着某种语言的成长，我认为是开发者之幸。\n                    </p>\n                    <p data-nodeid=\"25258\">\n                      这一讲就让我们深入对象和原型，理解 JavaScript\n                      在这个方向上的能力。请注意，今天的内容我们不再过多赘述基础，而是面向进阶，需要你具有一定的知识准备。\n                    </p>\n                    <h3 data-nodeid=\"25259\">实现 new 没有那么容易</h3>\n                    <p data-nodeid=\"25260\">\n                      说起 JavaScript 当中的 new\n                      关键字，有一段很有趣的历史。其实 JavaScript 创造者 Brendan\n                      Eich 实现 new 是为了获得更高的流行度，它是强行学习 Java\n                      的一个残留产出，创造者想让 JavaScript 成为 Java\n                      的小弟。当然，也有很多人认为这个设计掩盖了 JavaScript\n                      中真正的原型继承，只是表面上看，更像是基于类的继承。\n                    </p>\n                    <p data-nodeid=\"25261\">\n                      这样的误会使得很多传统 Java 开发者并不能很好理解\n                      JavaScript。实际上，我们前端工程师应该明白，new\n                      关键字到底做了什么事情。\n                    </p>\n                    <p data-nodeid=\"25262\">\n                      step1：创建一个空对象，这个对象将会作为执行 new 构造函数()\n                      之后，返回的对象实例。\n                    </p>\n                    <p data-nodeid=\"25263\">\n                      step2：将上面创建的空对象的原型（<strong\n                        data-nodeid=\"25387\"\n                        >proto</strong\n                      >），指向构造函数的 prototype 属性。\n                    </p>\n                    <p data-nodeid=\"25264\">\n                      step3：将这个空对象赋值给构造函数内部的\n                      this，并执行构造函数逻辑。\n                    </p>\n                    <p data-nodeid=\"25265\">\n                      step4：根据构造函数执行逻辑，返回第一步创建的对象或者构造函数的显式返回值。\n                    </p>\n                    <p data-nodeid=\"25266\">\n                      因为 new 是 JavaScript\n                      的关键字，我们不能直接覆盖，实现一个 newFunc\n                      来进行模拟，预计使用方式：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">Person</span><span class=\"hljs-params\">(name)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">this</span>.name = name\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> newFunc(Person, <span class=\"hljs-string\">'lucas'</span>)\n</div></li><li><div class=\"code-word\">console.log(person)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// {name: \"lucas\"}</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25268\">实现为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">newFunc</span><span class=\"hljs-params\">(...args)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 取出 args 数组第一个参数，即目标构造函数</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> constructor = args.shift()\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建一个空对象，且这个空对象继承构造函数的 prototype 属性</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 即实现 obj.__proto__ === constructor.prototype</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> obj = Object.create(constructor.prototype)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 执行构造函数，得到构造函数返回结果</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 注意这里我们使用 apply，将构造函数内的 this 指向为 obj</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> result = constructor.apply(obj, args)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 如果构造函数执行后，返回结果是对象类型，就直接返回，否则返回 obj 对象</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (typeof result === <span class=\"hljs-string\">'object'</span> &amp;&amp; result != <span class=\"hljs-keyword\">null</span>) ? result : obj\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25270\">\n                      上述代码并不复杂，几个关键点需要注意：\n                    </p>\n                    <ul data-nodeid=\"25271\">\n                      <li data-nodeid=\"25272\">\n                        <p data-nodeid=\"25273\">\n                          使用 Object.create 将 obj 的\n                          <strong data-nodeid=\"25398\">proto</strong>\n                          指向为构造函数的原型；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25274\">\n                        <p data-nodeid=\"25275\">\n                          使用 apply 方法，将构造函数内的 this 指向为 obj；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25276\">\n                        <p data-nodeid=\"25277\">\n                          在 newFunc 返回时，使用三目运算符决定返回结果。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"25278\">\n                      我们知道，<strong data-nodeid=\"25406\"\n                        >构造函数如果有显式返回值，且返回值为对象类型</strong\n                      >，那么构造函数返回结果不再是目标实例。\n                    </p>\n                    <p data-nodeid=\"25279\">如下代码：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">Person</span><span class=\"hljs-params\">(name)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">this</span>.name = name\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">1</span>}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> Person(Person, <span class=\"hljs-string\">'lucas'</span>)\n</div></li><li><div class=\"code-word\">console.log(person)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// {1: 1}</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25281\">\n                      了解这些注意点，对于理解 newFunc 的实现就不再困难了。\n                    </p>\n                    <h3 data-nodeid=\"25282\">如何优雅地实现继承</h3>\n                    <p data-nodeid=\"25283\">\n                      实现继承式是面向对象的一个重点概念。我们前面提到过\n                      JavaScript\n                      的面向对象系统是基于原型的，它的继承不同于其他大多数语言。\n                    </p>\n                    <p data-nodeid=\"25284\">\n                      社区上对于 JavaScript\n                      继承讲解的资料不在少数，这里我不再赘述每一种继承方式的实现过程，还需要你提前了解。\n                    </p>\n                    <h4 data-nodeid=\"25285\">ES5 相对可用的继承方案</h4>\n                    <p data-nodeid=\"25286\">\n                      我们仅总结以下 JavaScript 中实现继承的关键点。\n                    </p>\n                    <p data-nodeid=\"25287\">\n                      如果想使 Child 继承\n                      Parent，那么采用原型链实现继承最关键的要点是：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">Child.prototype = <span class=\"hljs-keyword\">new</span> Parent()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25289\">\n                      这样的实现，不同的 Child 实例的\n                      <strong data-nodeid=\"25420\">proto</strong> 会引用同一\n                      Parent 的实例。\n                    </p>\n                    <p data-nodeid=\"25290\">构造函数实现继承的要点是：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">Child</span> <span class=\"hljs-params\">(args)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">    Parent.call(<span class=\"hljs-keyword\">this</span>, args)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25292\">\n                      这样的实现，问题也比较大，其实只是实现了实例属性继承，<strong\n                        data-nodeid=\"25427\"\n                        >Parent 原型的方法在 Child 实例中并不可用</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"25293\">\n                      组合继承的实现才基本可用，其要点是：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">Child</span> <span class=\"hljs-params\">(args1, args2)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.args2 = args2\n</div></li><li><div class=\"code-word\">    Parent.call(<span class=\"hljs-keyword\">this</span>, args1)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">Child.prototype = <span class=\"hljs-keyword\">new</span> Parent()\n</div></li><li><div class=\"code-word\">Child.prototype.constrcutor = Child\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25295\">\n                      它的问题在于，Child 实例会存在 Parent\n                      的实例属性。因为我们在 Child 构造函数中执行了 Parent\n                      构造函数。同时，Child.<strong data-nodeid=\"25438\"\n                        >proto</strong\n                      >\n                      也会存在同样的 Parent 的实例属性，且所有 Child 实例的\n                      <strong data-nodeid=\"25439\">proto</strong>\n                      指向同一内存地址。同时上述实现也都没有对静态属性的继承。\n                    </p>\n                    <p data-nodeid=\"25296\">\n                      还有一些其他不完美的继承方式，我们这里不再过多介绍。\n                    </p>\n                    <p data-nodeid=\"25297\">\n                      下面我们给出一个比较完整的方案，它解决了上面一系列的问题，我们先看代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">inherit</span><span class=\"hljs-params\">(Child, Parent)</span> </span>{\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-comment\">// 继承原型上的属性 </span>\n</div></li><li><div class=\"code-word\">    Child.prototype = Object.create(Parent.prototype)\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-comment\">// 修复 constructor</span>\n</div></li><li><div class=\"code-word\">    Child.prototype.constructor = Child\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 存储超类</span>\n</div></li><li><div class=\"code-word\">    Child.<span class=\"hljs-keyword\">super</span> = Parent\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 静态属性继承</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (Object.setPrototypeOf) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// setPrototypeOf es6</span>\n</div></li><li><div class=\"code-word\">        Object.setPrototypeOf(Child, Parent)\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (Child.__proto__) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// __proto__ es6 引入，但是部分浏览器早已支持</span>\n</div></li><li><div class=\"code-word\">        Child.__proto__ = Parent\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 兼容 IE10 等陈旧浏览器</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 将 Parent 上的静态属性和方法拷贝一份到 Child 上，不会覆盖 Child 上的方法</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k in Parent) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (Parent.hasOwnProperty(k) &amp;&amp; !(k in Child)) {\n</div></li><li><div class=\"code-word\">                Child[k] = Parent[k]\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25299\">\n                      具体原理已经包含在了注释当中。需要指出的是，上述静态属性继承仍然存在一个问题：在陈旧浏览器中，属性和方法的继承我们是静态拷贝的，继承完后续父类的改动不会自动同步到子类。这是不同于正常面向对象思想的，但是这种组合式继承，已经相对完美、优雅。\n                    </p>\n                    <h4 data-nodeid=\"25300\">继承 Date</h4>\n                    <p data-nodeid=\"25301\">\n                      值得一提的一个小细节是：前面几种继承方式<strong\n                        data-nodeid=\"25449\"\n                        >无法实现对 Date 对象的继承</strong\n                      >。我们来进行测试：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">DateConstructor</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    Date.apply(<span class=\"hljs-keyword\">this</span>, arguments)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.foo = <span class=\"hljs-string\">'bar'</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">inherit(DateConstructor, Date)\n</div></li><li><div class=\"code-word\">DateConstructor.prototype.getMyTime = function() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.getTime()\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">let date = <span class=\"hljs-keyword\">new</span> DateConstructor()\n</div></li><li><div class=\"code-word\">console.log(date.getMyTime())\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25303\">\n                      将会得到报错：<code data-backticks=\"1\" data-nodeid=\"25451\"\n                        >Uncaught TypeError: this is not a Date object.</code\n                      >\n                    </p>\n                    <p data-nodeid=\"25304\">\n                      究其原因，是因为 JavaScript 的日期对象只能通过 JavaScript\n                      Date 作为构造函数来实例化得到。因此 v8\n                      引擎实现代码中就一定有所限制，如果发现调用 getTime()\n                      方法的对象不是 Date 构造函数构造出来的实例，则抛出错误。\n                    </p>\n                    <p data-nodeid=\"25305\">那么如何实现对 Date 的继承呢？</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">DateConstructor</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> dateObj = <span class=\"hljs-keyword\">new</span>(Function.prototype.bind.apply(Date, [Date].concat(Array.prototype.slice.call(arguments))))()\n</div></li><li><div class=\"code-word\">    Object.setPrototypeOf(dateObj, DateConstructor.prototype)\n</div></li><li><div class=\"code-word\">    dateObj.foo = <span class=\"hljs-string\">'bar'</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> dateObj\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">Object.setPrototypeOf(DateConstructor.prototype, Date.prototype)\n</div></li><li><div class=\"code-word\">DateConstructor.prototype.getMyTime = <span class=\"hljs-function\">function <span class=\"hljs-title\">getTime</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.getTime()\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">let date = <span class=\"hljs-keyword\">new</span> DateConstructor()\n</div></li><li><div class=\"code-word\">console.log(date.getMyTime())\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25307\">\n                      我们来分析一下代码，调用构造函数 DateConstructor\n                      返回的对象 dateObj 有：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">dateObj.__proto__ === DateConstructor.prototype\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25309\">而我们通过：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">Object.setPrototypeOf(DateConstructor.prototype, Date.prototype)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25311\">实现了：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">DateConstructor.prototype.__proto__ === Date.prototype\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25313\">所以连起来就是：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">date.__proto__.__proto__ === Date.prototype\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25315\">\n                      继续分析，DateConstructor 构造函数里，返回的 dateObj\n                      是一个真正的 Date 对象，因为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> dateObj = <span class=\"hljs-keyword\">new</span>(Function.prototype.bind.apply(Date, [Date].concat(Array.prototype.slice.call(arguments))))()<span class=\"hljs-keyword\">var</span> dateObj = <span class=\"hljs-keyword\">new</span>(Function.prototype.bind.apply(Date, [Date].concat(Array.prototype.slice.call(arguments))))()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25317\">\n                      它终归还是由 Date 构造函数实例化出来的，因此它有权调用\n                      Date 原型上的方法，而不会被引擎限制。\n                    </p>\n                    <p data-nodeid=\"25318\">\n                      整个实现过程通过<strong data-nodeid=\"25469\"\n                        >更改原型关系</strong\n                      >，在构造函数里调用原生构造函数\n                      Date，并返回其实例的方法，“欺骗了”浏览器。当然这样的做法比较取巧，其<strong\n                        data-nodeid=\"25470\"\n                        >副作用是更改了原型关系</strong\n                      >，这样也会干扰浏览器某些优化操作。\n                    </p>\n                    <p data-nodeid=\"25319\">那么有没有更加“体面”的方式呢？</p>\n                    <p data-nodeid=\"25320\">\n                      其实随着 ES6 class 的推出，我们完全可以直接使用 extends\n                      关键字了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DateConstructor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Date</span> </span>{\n</div></li><li><div class=\"code-word\">    constructor() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>()\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.foo =<span class=\"hljs-string\">'bar'</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    getMyTime() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.getTime()\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">let date = <span class=\"hljs-keyword\">new</span> DateConstructor()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25322\">上面的方法可以完美执行：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">date.getMyTime()\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 1558921640586</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25324\">\n                      直接在支持 ES6 class\n                      的浏览器中使用完全没有问题，可是我们项目大部分都是使用\n                      Babel 进行编译。按照 Babel 编译 class\n                      的方法，运行其产出后，仍然会得到报错“Uncaught TypeError:\n                      this is not a Date object.”，因此我们可以得知：Babel\n                      并没有对继承 Date 进行特殊处理，无法做到兼容。\n                    </p>\n                    <h3 data-nodeid=\"25325\">jQuery 中的对象思想</h3>\n                    <p data-nodeid=\"25326\">\n                      可能你会有这样的问题：“所有的面试官都那么注重面向对象，可是我在工作中很少涉及啊？面向对象到底有什么用？”\n                    </p>\n                    <p data-nodeid=\"25327\">\n                      对于这个问题我想说，“如果你没有开发大型复杂项目的经验，不具备封装抽象的思想，也许确实用不到面向对象，也很难解释为什么要有面向对象的设计和考察。”接下来，我就从\n                      jQuery\n                      源码架构设计入手，分析一下基本的原型以及原型链知识如何在\n                      jQuery 源码中发挥作用。\n                    </p>\n                    <p data-nodeid=\"25328\">\n                      “什么，这都哪一年了你还在说 jQuery？”\n                    </p>\n                    <p data-nodeid=\"25329\">\n                      其实优秀的思想是永远不过时的，研究清楚 jQuery\n                      的设计思想，你仍然会会受益匪浅。\n                    </p>\n                    <p data-nodeid=\"25330\">我们从一个问题开始：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> pNodes = $(<span class=\"hljs-string\">'p'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 我们得到一个数组</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> divNodes= $(<span class=\"hljs-string\">'div'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 我们得到一个数组</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25332\">但是我们又可以：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> pNodes = $(<span class=\"hljs-string\">'p'</span>)\n</div></li><li><div class=\"code-word\">pNodes.addClass(<span class=\"hljs-string\">'className'</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25334\">\n                      数组上可是没有 addClass 方法的吧？\n                    </p>\n                    <p data-nodeid=\"25335\">\n                      这个问题先放一边。我们想一想<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"25484\"\n                        >$</code\n                      >是什么？你的第一反应可能是一个函数，因此我们可以这样调用执行：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">$(<span class=\"hljs-string\">'p'</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25337\">但是你一定又见过这样的使用：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">$.ajax()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25339\">\n                      那么<code data-backticks=\"1\" data-nodeid=\"25488\">$</code\n                      >又是一个对象，它有 Ajax 的静态方法。\n                    </p>\n                    <p data-nodeid=\"25340\">类似：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 构造函数</span>\n</div></li><li><div class=\"code-word\">function $() {\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">$.ajax = function () {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25342\">\n                      实际上，我们翻看\n                      <a\n                        href=\"https://github.com/jquery/jquery/\"\n                        data-nodeid=\"25494\"\n                        >jQuery 源码架构</a\n                      >会发现（具体内容有删减和改动）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> jQuery = (function(){\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> $\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">    $ = function(selector, context) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> function (selector, context) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">var</span> dom = []\n</div></li><li><div class=\"code-word\">            dom.__proto__ = $.fn\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> dom\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    $.fn = {\n</div></li><li><div class=\"code-word\">        addClass: function() {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">        },\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    $.ajax = function() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> $\n</div></li><li><div class=\"code-word\">})()\n</div></li><li><div class=\"code-word\">window.jQuery = jQuery\n</div></li><li><div class=\"code-word\">window.$ === undefined &amp;&amp; (window.$ = jQuery)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25344\">\n                      我们顺着源码分析，当调用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"25497\"\n                        >$('p')</code\n                      >时，最终返回的是 dom，而 dom.<strong data-nodeid=\"25509\"\n                        >proto</strong\n                      >\n                      指向了<code data-backticks=\"1\" data-nodeid=\"25503\"\n                        >$.fn</code\n                      >，<code data-backticks=\"1\" data-nodeid=\"25505\">$.fn</code\n                      >是包含了多种方法的对象集合。因此返回的结果（dom）可以在其原型链上找到\n                      addClass 这样的方法。同理，<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"25507\"\n                        >$('span')</code\n                      >也不例外，任何实例都不例外。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">$(<span class=\"hljs-string\">'span'</span>).__proto__ === $.fn\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25346\">\n                      同时 Ajax 方法直接挂载在构造函数<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"25511\"\n                        >$</code\n                      >上，它是一个<strong data-nodeid=\"25517\">静态属性</strong\n                      >方法。\n                    </p>\n                    <p data-nodeid=\"25347\">\n                      请你仔细体会整个 jQuery 的架构，其实翻译成 ES class\n                      就很好理解了（不完全对等）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> $ </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title\">ajax</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  constructor(selector, context) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.selector = selector\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.context = context\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  addClass() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//  ...</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25349\">\n                      这个应用虽然并不复杂，但还是很微妙地表现出来了面向对象的精妙设计。\n                    </p>\n                    <h3 data-nodeid=\"25350\">类继承和原型继承的区别</h3>\n                    <p data-nodeid=\"25351\">\n                      上面我们已经了解了 JavaScript\n                      中的原型继承，那么它和传统面向对象语言的类继承有什么不同呢？这就涉及编程语言范畴了，传统的面向对象语言的类继承，会引发一些问题：\n                    </p>\n                    <ul data-nodeid=\"25352\">\n                      <li data-nodeid=\"25353\">\n                        <p data-nodeid=\"25354\">紧耦合问题</p>\n                      </li>\n                      <li data-nodeid=\"25355\">\n                        <p data-nodeid=\"25356\">脆弱基类问题</p>\n                      </li>\n                      <li data-nodeid=\"25357\">\n                        <p data-nodeid=\"25358\">层级僵化问题</p>\n                      </li>\n                      <li data-nodeid=\"25359\">\n                        <p data-nodeid=\"25360\">必然重复性问题</p>\n                      </li>\n                      <li data-nodeid=\"25361\">\n                        <p data-nodeid=\"25362\">大猩猩—香蕉问题</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"25363\">\n                      以上这些内容属于纯理论，下面我借用 Eric Elliott\n                      的著名文章“<a\n                        href=\"https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9?utm_source=tuicool&amp;utm_medium=referral\"\n                        data-nodeid=\"25530\"\n                        >Difference between class prototypal inheritance</a\n                      >”，来展开说明类继承和原型继承的优劣。我们先看下图：\n                    </p>\n                    <p data-nodeid=\"25554\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/04/83/CioPOWAs1oqAK7n6AAD_bt3FABw414.png\"\n                        alt=\"2021217-163948.png\"\n                        data-nodeid=\"25557\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"25365\">\n                      通过上图，我们看出一些问题（单一继承、紧耦合以及层级分类问题），对于类\n                      8，只想继承五边形的属性，却得到了继承链上其他并不需要的属性，比如五角星，正方形属性。这就是大猩猩/香蕉问题，“我只想要一个香蕉，但是你给我了整个森林”。\n                    </p>\n                    <p data-nodeid=\"25366\">\n                      对于类\n                      9，对比其父类，我只需要把五角星属性修改成四角星，但是五角星继承自基类\n                      1，如果要去修改，那就会影响整个继承树（脆弱基类/层级僵化问题）；好吧，我不去修改，那就需要给类\n                      9 新建一个基类（必然重复性问题）。\n                    </p>\n                    <p data-nodeid=\"25367\">\n                      那么基于原型的继承如何解决上述问题呢？\n                    </p>\n                    <p data-nodeid=\"26154\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/04/83/CioPOWAs1quAXIdzAC9wcK4g428951.gif\"\n                        alt=\"2021217-163944.gif\"\n                        data-nodeid=\"26157\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"25369\">\n                      采用原型继承，其实<strong data-nodeid=\"25546\"\n                        >本质是对象组合</strong\n                      >，可以避免复杂纵深的层级关系。当类 1\n                      需要四角星特性的时候，只需要组合新特性即可，不会影响到其他实例。\n                    </p>\n                    <h3 data-nodeid=\"25370\">总结</h3>\n                    <p data-nodeid=\"25371\">\n                      面向对象是一个永远说不完的话题，更是一个永远不会过时的话题，具备良好的面向对象架构能力，对于开发者来说至关重要。同时由于\n                      JavaScript\n                      面向对象的特殊性，它区别于其他语言，显得“与众不同”。我们在了解\n                      JavaScript\n                      原型、原型链知识的前提下，对比其他语言的思想，就变得非常重要和有意义了。\n                    </p>\n                    <p data-nodeid=\"25372\">本讲内容总结如下：</p>\n                    <p data-nodeid=\"25373\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/03/02/Cgp9HWAeXoaAKvD-AAG_qfSV0Ls210.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"25552\"\n                      />\n                    </p>\n                    <p data-nodeid=\"25374\" class=\"\">\n                      从下一讲开始，我们将深入数据结构这个话题。数据结构是算法的基础，其本身也包含了算法的部分内容。如果你想要掌握算法，一定要先有一个巩固的数据结构基础。下一讲我们将用\n                      JavaScript\n                      实现几个常见的数据结构，帮助你在不同的场景中，找到最为适合的数据结构处理问题。\n                    </p>\n            "}