{"title":"07 | 数组原理（上）：帮你梳理眼花缭乱的数组 API","context":"\n                    <p data-nodeid=\"2084\" class=\"\">\n                      欢迎来到第二个模块“深入数组篇”的学习。\n                    </p>\n                    <p data-nodeid=\"2085\">\n                      JavaScript 数组的 API 经常会被 JS 开发者频繁使用，在整个\n                      JavaScript 的学习过程中尤为重要。\n                    </p>\n                    <p data-nodeid=\"2086\">\n                      数组作为一个最基础的一维数据结构，在各种编程语言中都充当着至关重要的角色，你很难想象没有数组的编程语言会是什么模样。特别是\n                      JavaScript，它天生的灵活性，又进一步发挥了数组的特长，丰富了数组的使用场景。<strong\n                        data-nodeid=\"2221\"\n                        >可以毫不夸张地说，不深入地了解数组，就不足以写好\n                        JavaScript。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"2087\">\n                      随着前端框架的不断演进，React 和 Vue 等 MVVM\n                      框架的流行，数据更新的同时视图也会随之更新。在通过前端框架实现大量的业务代码中，开发者都会用数组来进行数据的存储和各种“增删改查”等操作，从而实现对应前端视图层的更新。可见熟练掌握数组各种方法，并深入了解数组是很有必要的。\n                    </p>\n                    <p data-nodeid=\"2088\">\n                      因此，我希望这一模块，能让你对数组有更深一步的理解，更加得心应手地运用数组的各种\n                      API，并可以轻松实现面试中遇到的数组题目。\n                    </p>\n                    <p data-nodeid=\"2089\">\n                      据不完全统计，在 LeetCode 题库的 1800\n                      多道题目中，和数组相关的题目是最多的，有 300\n                      多道，例如“合并两个有序数组”“两个数组的交集”等。其中有个别题目是大厂的面试题目，如果你有兴趣可以自己尝试去解答，我也会在课程中穿插讲解其中的一些数组类题目，帮助你更好地理解这部分知识。\n                    </p>\n                    <p data-nodeid=\"2090\">\n                      那么，在课程开始前请你先思考几个问题。\n                    </p>\n                    <ol data-nodeid=\"2091\">\n                      <li data-nodeid=\"2092\">\n                        <p data-nodeid=\"2093\">数组的构造器有哪几种？</p>\n                      </li>\n                      <li data-nodeid=\"2094\">\n                        <p data-nodeid=\"2095\">哪些是改变自身的方法？</p>\n                      </li>\n                      <li data-nodeid=\"2096\">\n                        <p data-nodeid=\"2097\">哪些是不改变自身的方法？</p>\n                      </li>\n                      <li data-nodeid=\"2098\">\n                        <p data-nodeid=\"2099\">遍历的方法有哪些？</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2100\">\n                      不知道这几个问题你是否能够准确地回答出来？那么我们就带着以上几个思考，开始这一讲的学习。\n                    </p>\n                    <h3 data-nodeid=\"2101\">数组概念的探究</h3>\n                    <p data-nodeid=\"2102\">\n                      截至 ES7 规范，数组共包含 33 个标准的 API\n                      方法和一个非标准的 API\n                      方法，使用场景和使用方案纷繁复杂，其中还有不少坑。为了方便你可以循序渐进地学习这部分的内容，下面我将从数组的概念开始讲起。\n                    </p>\n                    <p data-nodeid=\"2103\">\n                      由于数组的 API\n                      较多，很多相近的名字也容易导致混淆，所以在这里我按照“会改变自身值的”“不会改变自身值的”“遍历方法”这三种类型分开讲解，让你对这些\n                      API 形成更结构化的认识。\n                    </p>\n                    <h4 data-nodeid=\"2104\">Array 的构造器</h4>\n                    <p data-nodeid=\"2105\">\n                      Array\n                      构造器用于创建一个新的数组。通常，我们推荐使用对象字面量的方式创建一个数组，例如\n                      var a = []\n                      就是一个比较好的写法。但是，总有对象字面量表述乏力的时候，比如，我想创建一个长度为\n                      6\n                      的空数组，用对象字面量的方式是无法创建的，因此只能写成下述代码这样。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 使用 Array 构造器，可以自定义长度</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// [empty × 6]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 使用对象字面量</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> b = [];\n</div></li><li><div class=\"code-word\">b.length = <span class=\"hljs-number\">6</span>; <span class=\"hljs-comment\">// [undefined × 6]</span>\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"2107\" class=\"te-preview-highlight\">\n                      Array 构造器根据参数长度的不同，有如下两种不同的处理方式：\n                    </p>\n                    <ul data-nodeid=\"2108\">\n                      <li data-nodeid=\"2109\">\n                        <p data-nodeid=\"2110\">\n                          <strong data-nodeid=\"2244\"\n                            >new Array(arg1, arg2,…)</strong\n                          >，参数长度为 0 或长度大于等于 2\n                          时，传入的参数将按照顺序依次成为新数组的第 0 至第 N\n                          项（参数长度为 0 时，返回空数组）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2111\">\n                        <p data-nodeid=\"2112\">\n                          <strong data-nodeid=\"2249\">new Array(len)</strong>，当\n                          len 不是数值时，处理同上，返回一个只包含 len\n                          元素一项的数组；当 len 为数值时，len 最大不能超过 32\n                          位无符号整型，即需要小于 2 的 32 次方（len 最大为\n                          Math.pow(2,32)），否则将抛出 RangeError。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2113\">\n                      以上就是 Array 构造器的基本情况，我们来看下 ES6\n                      新增的几个构造方法。\n                    </p>\n                    <h4 data-nodeid=\"2114\">\n                      ES6 新增的构造方法：Array.of 和 Array.from\n                    </h4>\n                    <p data-nodeid=\"2115\">\n                      鉴于数组的常用性，ES6 专门扩展了数组构造器\n                      Array&nbsp;，新增了 2\n                      个方法：Array.of、Array.from。其中，Array.of\n                      整体用得比较少；而 Array.from\n                      具有灵活性，你在平常开发中应该会经常使用。那么关于两者的使用细节你真的了解吗？下面展开来聊下这两个方法。\n                    </p>\n                    <p data-nodeid=\"2116\">\n                      <strong data-nodeid=\"2256\">Array.of</strong>\n                    </p>\n                    <p data-nodeid=\"2117\">\n                      Array.of\n                      用于将参数依次转化为数组中的一项，然后返回这个新数组，而不管这个参数是数字还是其他。它基本上与\n                      Array 构造器功能一致，唯一的区别就在单个数字参数的处理上。\n                    </p>\n                    <p data-nodeid=\"2118\">\n                      比如，在下面的这几行代码中，你可以看到区别：当参数为两个时，返回的结果是一致的；当参数是一个时，Array.of\n                      会把参数变成数组里的一项，而构造器则会生成长度和第一个参数相同的空数组。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code><ol><li><div class=\"code-word\">Array.of(8.0); // [8]\n</div></li><li><div class=\"code-word\">Array(8.0); // [empty × 8]\n</div></li><li><div class=\"code-word\">Array.of(8.0, 5); // [8, 5]\n</div></li><li><div class=\"code-word\">Array(8.0, 5); // [8, 5]\n</div></li><li><div class=\"code-word\">Array.of('8'); // [\"8\"]\n</div></li><li><div class=\"code-word\">Array('8'); // [\"8\"]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2120\">\n                      <strong data-nodeid=\"2262\">Array.from</strong>\n                    </p>\n                    <p data-nodeid=\"2121\">\n                      Array.from\n                      的设计初衷是快速便捷地基于其他对象创建新数组，准确来说就是从一个类似数组的可迭代对象中创建一个新的数组实例。其实就是，只要一个对象有迭代器，Array.from\n                      就能把它变成一个数组（注意：是返回新的数组，不改变原对象）。\n                    </p>\n                    <p data-nodeid=\"2122\">\n                      从语法上看，Array.from 拥有 3 个参数：\n                    </p>\n                    <ol data-nodeid=\"2123\">\n                      <li data-nodeid=\"2124\">\n                        <p data-nodeid=\"2125\">类似数组的对象，必选；</p>\n                      </li>\n                      <li data-nodeid=\"2126\">\n                        <p data-nodeid=\"2127\">\n                          加工函数，新生成的数组会经过该函数的加工再返回；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2128\">\n                        <p data-nodeid=\"2129\">\n                          this 作用域，表示加工函数执行时 this 的值。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2130\">\n                      这三个参数里面第一个参数是必选的，后两个参数都是可选的。我们通过一段代码来看看它的用法。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-number\">0</span>: <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-number\">2</span>:<span class=\"hljs-string\">'c'</span>, <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">3</span>};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Array</span>.from(obj, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value, index</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(value, index, <span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>.length);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> value.repeat(<span class=\"hljs-number\">3</span>);   <span class=\"hljs-comment\">//必须指定返回值，否则返回 undefined</span>\n</div></li><li><div class=\"code-word\">}, obj);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2132\">\n                      结果如下图所示。<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/09/B2/CgpVE2APjSiAGLqXAAB5v09b2C4966.png\"\n                        alt=\"WechatIMG13.png\"\n                        data-nodeid=\"2273\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2133\">\n                      结果中可以看出 console.log(value, index, this,\n                      arguments.length) 对应的四个值，并且看到 return 的 value\n                      重复了三遍，最后返回的数组为 [\"aaa\",\"bbb\",\"ccc\"]。\n                    </p>\n                    <p data-nodeid=\"2134\">\n                      这表明了通过 Array.from\n                      这个方法可以自己定义加工函数的处理方式，从而返回想要得到的值；如果不确定返回值，则会返回\n                      undefined，最终生成的也是一个包含若干个 undefined\n                      元素的空数组。\n                    </p>\n                    <p data-nodeid=\"2135\">\n                      实际上，如果这里不指定 this\n                      的话，加工函数完全可以是一个箭头函数。上述代码可以简写为如下形式。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">Array</span>.from(obj, (value) =&gt; value.repeat(<span class=\"hljs-number\">3</span>));\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// &nbsp;控制台返回 (3) [\"aaa\", \"bbb\", \"ccc\"]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2137\">\n                      除了上述 obj 对象以外，拥有迭代器的对象还包括\n                      String、Set、Map&nbsp;等，Array.from\n                      统统可以处理，请看下面的代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// String</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-string\">'abc'</span>);         <span class=\"hljs-comment\">// [\"a\", \"b\", \"c\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// Set</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-string\">'abc'</span>, <span class=\"hljs-string\">'def'</span>])); <span class=\"hljs-comment\">// [\"abc\", \"def\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// Map</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'ab'</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'de'</span>]])); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// [[1, 'ab'], [2, 'de']]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2139\">\n                      关于数组构造器\n                      Array&nbsp;新增的两个方法就讲解到这，下面接着介绍如何进行\n                      Array 的判断。\n                    </p>\n                    <h4 data-nodeid=\"2140\">Array 的判断</h4>\n                    <p data-nodeid=\"2141\">\n                      Array.isArray 用来判断一个变量是否为数组类型，我们在“<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=601#/detail/pc?id=6174\"\n                        data-nodeid=\"2299\"\n                        >01 | 代码基本功测试（上）：JS 的数据类型你了解多少</a\n                      >”中也讲过如何判断数据类型，不过那时只是针对 JS\n                      的所有数据类型做一个判断，数组的判断当时并未详细讲解，那么我们现在来学习一下。\n                    </p>\n                    <p data-nodeid=\"2142\">\n                      在 ES5 提供该方法之前，我们至少有如下 5\n                      种方式去判断一个变量是否为数组。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = [];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 1.基于instanceof</span>\n</div></li><li><div class=\"code-word\">a <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Array</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 2.基于constructor</span>\n</div></li><li><div class=\"code-word\">a.constructor === <span class=\"hljs-built_in\">Array</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 3.基于Object.prototype.isPrototypeOf</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Array</span>.prototype.isPrototypeOf(a);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 4.基于getPrototypeOf</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.getPrototypeOf(a) === <span class=\"hljs-built_in\">Array</span>.prototype;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 5.基于Object.prototype.toString</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.apply(a) === <span class=\"hljs-string\">'[object Array]'</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2144\">\n                      上面这 5 个判断全部为\n                      True，这里应该没什么疑问。实际上，通过\n                      Object.prototype.toString 去判断一个值的类型，也是模块一的\n                      01 讲判断数据类型中我给你推荐的方法。\n                    </p>\n                    <p data-nodeid=\"2145\">\n                      ES6 之后新增了一个 Array.isArray\n                      方法，能直接判断数据类型是否为数组，但是如果 isArray\n                      不存在，那么 Array.isArray 的 polyfill 通常可以这样写：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">Array</span>.isArray){\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">Array</span>.isArray = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">arg</span>)</span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(arg) === <span class=\"hljs-string\">'[object Array]'</span>;\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2147\">\n                      数组的基本概念到这里基本讲得差不多了，下面我们就来看看让人眼花缭乱的\n                      30 多个数组的基本方法。\n                    </p>\n                    <h3 data-nodeid=\"2148\">改变自身的方法</h3>\n                    <p data-nodeid=\"2149\">\n                      基于 ES6，会改变自身值的方法一共有 9 个，分别为\n                      pop、push、reverse、shift、sort、splice、unshift，以及两个\n                      ES6 新增的方法 copyWithin 和 fill。\n                    </p>\n                    <p data-nodeid=\"2150\">\n                      接下来我们看一段代码，快速了解这些方法最基本的用法。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// pop方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">\"cat\"</span>, <span class=\"hljs-string\">\"dog\"</span>, <span class=\"hljs-string\">\"cow\"</span>, <span class=\"hljs-string\">\"chicken\"</span>, <span class=\"hljs-string\">\"mouse\"</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> item = array.pop();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array); <span class=\"hljs-comment\">// [\"cat\", \"dog\", \"cow\", \"chicken\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(item); <span class=\"hljs-comment\">// mouse</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// push方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">\"football\"</span>, <span class=\"hljs-string\">\"basketball\"</span>,  <span class=\"hljs-string\">\"badminton\"</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> i = array.push(<span class=\"hljs-string\">\"golfball\"</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// [\"football\", \"basketball\", \"badminton\", \"golfball\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(i); <span class=\"hljs-comment\">// 4</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// reverse方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array2 = array.reverse();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array); <span class=\"hljs-comment\">// [5,4,3,2,1]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array2===array); <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// shift方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> item = array.shift();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array); <span class=\"hljs-comment\">// [2,3,4,5]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(item); <span class=\"hljs-comment\">// 1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// unshift方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"green\"</span>, <span class=\"hljs-string\">\"blue\"</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> length = array.unshift(<span class=\"hljs-string\">\"yellow\"</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array); <span class=\"hljs-comment\">// [\"yellow\", \"red\", \"green\", \"blue\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(length); <span class=\"hljs-comment\">// 4</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// sort方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">\"apple\"</span>,<span class=\"hljs-string\">\"Boy\"</span>,<span class=\"hljs-string\">\"Cat\"</span>,<span class=\"hljs-string\">\"dog\"</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array2 = array.sort();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array); <span class=\"hljs-comment\">// [\"Boy\", \"Cat\", \"apple\", \"dog\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array2 == array); <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// splice方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">\"apple\"</span>,<span class=\"hljs-string\">\"boy\"</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> splices = array.splice(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array); <span class=\"hljs-comment\">// [\"apple\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(splices); <span class=\"hljs-comment\">// [\"boy\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// copyWithin方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]; \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array2 = array.copyWithin(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array===array2,array2);  <span class=\"hljs-comment\">// true [4, 5, 3, 4, 5]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// fill方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array2 = array.fill(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array===array2,array2); \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// true [10, 10, 10, 4, 5], 可见数组区间[0,3]的元素全部替换为10</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2152\">\n                      我希望你能通过上面的代码，对这些方法形成一个直观的印象，并且能自己进行一定的实践来加深印象。不过上面的\n                      sort() 方法的内涵比较多，在第 11\n                      讲我会专门讲解，这里先不做过多的介绍了。\n                    </p>\n                    <p data-nodeid=\"2153\">\n                      下面为了让你对这些 API 方法有更深刻的印象，我结合 Leetcode\n                      中的第 88 题\n                      《合并两个有序数组》，带你看下如何利用数组的多个改变自身的方法来解决这道题，题目是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">给你两个有序整数数组&nbsp;nums1&nbsp;和&nbsp;nums2，请你将&nbsp;nums2&nbsp;合并到&nbsp;nums1&nbsp;中，使&nbsp;nums1&nbsp;成为一个有序数组。\n</div></li><li><div class=\"code-word\">输入:\n</div></li><li><div class=\"code-word\">nums1 = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>]； m = <span class=\"hljs-number\">3</span>\n</div></li><li><div class=\"code-word\">nums2 = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]；&nbsp; &nbsp; &nbsp; &nbsp;n = <span class=\"hljs-number\">3</span>\n</div></li><li><div class=\"code-word\">输出: [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2155\">你可以仔细看下题目要求：</p>\n                    <ul data-nodeid=\"2156\">\n                      <li data-nodeid=\"2157\">\n                        <p data-nodeid=\"2158\">\n                          首先是将 nums2 合并到 nums1\n                          里面，不新开数组，否则将无法通过；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2159\">\n                        <p data-nodeid=\"2160\">\n                          其次是合并完了之后 nums1\n                          还是一个有序数组，这里也是需要注意的；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2161\">\n                        <p data-nodeid=\"2162\">\n                          另外样例里面 nums1 和 nums2\n                          都有“2”这个数，也都需要将重复的合并进去。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2163\">\n                      我们看上面这三点，可以思考下，既然要求不能新开数组，那么就需要利用数组改变自身的方法完成这个题目，应该怎么做呢？你可以试着先将想法写下来，之后再来看我提供的答案。\n                    </p>\n                    <p data-nodeid=\"2164\">\n                      答案就是巧妙地利用数组的 API 中的 splice、push、sort\n                      这三个方法，在原数组上进行操作，最终完成如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span>&nbsp;merge&nbsp;=&nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums1,&nbsp;m,&nbsp;nums2,&nbsp;n</span>)&nbsp;</span>{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;nums1.splice(m);\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;nums2.splice(n);\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;nums1.push(...nums2);\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;nums1.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>)&nbsp;=&gt;</span>&nbsp;a - b);  <span class=\"hljs-comment\">// nums1从小到大排列，所以是a-b</span>\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2166\">\n                      我上面提供的这段代码是可以在 LeetCode 88 题提交 AC\n                      通过的，没写出来的话你可以试着再敲一遍，最后提交完成通过。\n                    </p>\n                    <p data-nodeid=\"2167\">\n                      改变数组自身的 9\n                      个方法理解起来并不复杂，只要你对上面这些代码理解了，并且多加实践就够了，因此就讲解到这里。下面我们再来看看那些不改变自身的方法都是怎么使用的。\n                    </p>\n                    <h3 data-nodeid=\"2168\">不改变自身的方法</h3>\n                    <p data-nodeid=\"2169\">\n                      基于 ES7，不会改变自身的方法也有 9 个，分别为\n                      concat、join、slice、toString、toLocaleString、indexOf、lastIndexOf、未形成标准的\n                      toSource，以及 ES7 新增的方法 includes。\n                    </p>\n                    <p data-nodeid=\"2170\">\n                      我们还是通过代码，快速了解这些方法的最基本用法。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// concat方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array2 = array.concat(<span class=\"hljs-number\">4</span>,[<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>],[<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>]);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array2); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array); <span class=\"hljs-comment\">// [1, 2, 3], 可见原数组并未被修改</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// join方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">'We'</span>, <span class=\"hljs-string\">'are'</span>, <span class=\"hljs-string\">'Chinese'</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.join()); <span class=\"hljs-comment\">// \"We,are,Chinese\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.join(<span class=\"hljs-string\">'+'</span>)); <span class=\"hljs-comment\">// \"We+are+Chinese\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// slice方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">\"one\"</span>, <span class=\"hljs-string\">\"two\"</span>, <span class=\"hljs-string\">\"three\"</span>,<span class=\"hljs-string\">\"four\"</span>, <span class=\"hljs-string\">\"five\"</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.slice()); <span class=\"hljs-comment\">// [\"one\", \"two\", \"three\",\"four\", \"five\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.slice(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// [\"three\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// toString方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">'Jan'</span>, <span class=\"hljs-string\">'Feb'</span>, <span class=\"hljs-string\">'Mar'</span>, <span class=\"hljs-string\">'Apr'</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> str = array.toString();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(str); <span class=\"hljs-comment\">// Jan,Feb,Mar,Apr</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// tolocalString方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array= [{<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">'zz'</span>}, <span class=\"hljs-number\">123</span>, <span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> str = array.toLocaleString();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(str); <span class=\"hljs-comment\">// [object Object],123,abc,2016/1/5 下午1:06:23</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// indexOf方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">'abc'</span>, <span class=\"hljs-string\">'def'</span>, <span class=\"hljs-string\">'ghi'</span>,<span class=\"hljs-string\">'123'</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.indexOf(<span class=\"hljs-string\">'def'</span>)); <span class=\"hljs-comment\">// 1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// includes方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">-0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.includes(+<span class=\"hljs-number\">0</span>)); <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.includes(<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-literal\">NaN</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.includes(<span class=\"hljs-literal\">NaN</span>)); <span class=\"hljs-comment\">// true</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2172\">\n                      上面我把不会改变数组的几个方法大致做了一个回顾，其中\n                      includes 方法需要注意的是，如果元素中有\n                      0，那么在判断过程中不论是 +0 还是 -0 都会判断为\n                      True，这里的 includes 忽略了 +0 和 -0。\n                    </p>\n                    <p data-nodeid=\"2173\">\n                      另外还有一个值得强调的是<strong data-nodeid=\"2344\"\n                        >slice 不改变自身，而 splice 会改变自身</strong\n                      >，你还是需要注意不要记错了。其中，slice\n                      的语法是：arr.slice([start[, end]])，而 splice\n                      的语法是：arr.splice(start,deleteCount[, item1[, item2[,\n                      …]]])。我们可以看到从第二个参数开始，二者就已经有区别了，splice\n                      第二个参数是删除的个数，而 slice 的第二个参数是 end\n                      的坐标（可选）。\n                    </p>\n                    <p data-nodeid=\"2174\">\n                      此外，lastIndexOf 和 indexOf 基本功能差不多，不过\n                      lastIndexOf 是从后面寻找元素的下标；而 toSource\n                      方法还未形成标准，因此在这里不做过多介绍了。\n                    </p>\n                    <p data-nodeid=\"2175\">\n                      不改变数组自身的 9\n                      个方法到这里也基本回顾差不多了，下面我们接着看看数组遍历的方法都是怎么用的。\n                    </p>\n                    <h3 data-nodeid=\"2176\">数组遍历的方法</h3>\n                    <p data-nodeid=\"2177\">\n                      基于 ES6，不会改变自身的遍历方法一共有 12 个，分别为\n                      forEach、every、some、filter、map、reduce、reduceRight，以及\n                      ES6 新增的方法 entries、find、findIndex、keys、values。\n                    </p>\n                    <p data-nodeid=\"2178\">\n                      我们还是先看一段代码，快速了解它们的基本用法。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// forEach方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">'cc'</span>};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> sReturn = array.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value, index, array</span>)</span>{\n</div></li><li><div class=\"code-word\">  array[index] = value;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name); <span class=\"hljs-comment\">// cc被打印了三次, this指向obj</span>\n</div></li><li><div class=\"code-word\">},obj);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array); <span class=\"hljs-comment\">// [1, 3, 5]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(sReturn); <span class=\"hljs-comment\">// undefined, 可见返回值为undefined</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// every方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> o = {<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">25</span>, <span class=\"hljs-attr\">length</span>:<span class=\"hljs-number\">3</span>};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> bool = <span class=\"hljs-built_in\">Array</span>.prototype.every.call(o,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value, index, obj</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> value &gt;= <span class=\"hljs-number\">8</span>;\n</div></li><li><div class=\"code-word\">},o);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(bool); <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// some方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">80</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> isExist = array.some(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value, index, array</span>)</span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">20</span>;\n</div></li><li><div class=\"code-word\">});\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(isExist); <span class=\"hljs-comment\">// true </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// map 方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">80</span>];\n</div></li><li><div class=\"code-word\">array.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item + <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array);  <span class=\"hljs-comment\">// [19, 10, 11, 36, 81]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// filter 方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">80</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array2 = array.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value, index, array</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">20</span>;\n</div></li><li><div class=\"code-word\">});\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array2); <span class=\"hljs-comment\">// [35, 80]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// reduce方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> s = array.reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">previousValue, value, index, array</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> previousValue * value;\n</div></li><li><div class=\"code-word\">},<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(s); <span class=\"hljs-comment\">// 24</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// ES6写法更加简洁</span>\n</div></li><li><div class=\"code-word\">array.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">p, v</span>) =&gt;</span> p * v); <span class=\"hljs-comment\">// 24</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// reduceRight方法 (和reduce的区别就是从后往前累计)</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n</div></li><li><div class=\"code-word\">array.reduceRight(<span class=\"hljs-function\">(<span class=\"hljs-params\">p, v</span>) =&gt;</span> p * v); <span class=\"hljs-comment\">// 24</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// entries方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">\"a\"</span>, <span class=\"hljs-string\">\"b\"</span>, <span class=\"hljs-string\">\"c\"</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> iterator = array.entries();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(iterator.next().value); <span class=\"hljs-comment\">// [0, \"a\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(iterator.next().value); <span class=\"hljs-comment\">// [1, \"b\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(iterator.next().value); <span class=\"hljs-comment\">// [2, \"c\"]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(iterator.next().value); <span class=\"hljs-comment\">// undefined, 迭代器处于数组末尾时, 再迭代就会返回undefined</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// find &amp; findIndex方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">value, index, array</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> value%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span>;     <span class=\"hljs-comment\">// 返回偶数</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f2</span>(<span class=\"hljs-params\">value, index, array</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> value &gt; <span class=\"hljs-number\">20</span>;     <span class=\"hljs-comment\">// 返回大于20的数</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.find(f)); <span class=\"hljs-comment\">// 8</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.find(f2)); <span class=\"hljs-comment\">// undefined</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.findIndex(f)); <span class=\"hljs-comment\">// 4</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(array.findIndex(f2)); <span class=\"hljs-comment\">// -1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// keys方法</span>\n</div></li><li><div class=\"code-word\">[...Array(<span class=\"hljs-number\">10</span>).keys()];     <span class=\"hljs-comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n</div></li><li><div class=\"code-word\">[...new <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">10</span>).keys()]; <span class=\"hljs-comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// values方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-string\">\"xyz\"</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> iterator = array.values();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(iterator.next().value);<span class=\"hljs-comment\">//abc</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(iterator.next().value);<span class=\"hljs-comment\">//xyz</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2180\">\n                      其中，要注意有些遍历方法不会返回处理之后的数组，比如\n                      forEach；有些方法会返回处理之后的数组，比如\n                      filter。这个细节你需要牢记，这样才会在面试过程中正确作答。\n                    </p>\n                    <p data-nodeid=\"2181\">\n                      reduce\n                      方法也需要重点关注，其参数复杂且多，通常一些复杂的逻辑处理，其实使用\n                      reduce 很容易就可以解决。我们重点看一下，reduce\n                      到底能解决什么问题呢？先看下 reduce 的两个参数。\n                    </p>\n                    <p data-nodeid=\"2182\">\n                      首先是\n                      callback（一个在数组的每一项中调用的函数，接受四个参数）：\n                    </p>\n                    <ol data-nodeid=\"2183\">\n                      <li data-nodeid=\"2184\">\n                        <p data-nodeid=\"2185\">\n                          previousValue（上一次调用回调函数时的返回值，或者初始值）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2186\">\n                        <p data-nodeid=\"2187\">\n                          currentValue（当前正在处理的数组元素）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2188\">\n                        <p data-nodeid=\"2189\">\n                          currentIndex（当前正在处理的数组元素下标）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2190\">\n                        <p data-nodeid=\"2191\">\n                          array（调用 reduce() 方法的数组）\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2192\">\n                      然后是\n                      initialValue（可选的初始值，作为第一次调用回调函数时传给\n                      previousValue 的值）。\n                    </p>\n                    <p data-nodeid=\"2193\">\n                      光靠文字描述其实看着会比较懵，我们还是通过一个例子来说明\n                      reduce 的功能到底有多么强大。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/* 题目：数组 arr = [1,2,3,4] 求数组的和：*/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 第一种方法：</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{sum += e;}); <span class=\"hljs-comment\">// sum = 10</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//&nbsp;第二种方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obj</span>)</span>{sum += obj});\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//&nbsp;第三种方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>];\n</div></li><li><div class=\"code-word\">arr.reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">pre,cur</span>)</span>{<span class=\"hljs-keyword\">return</span> pre + cur});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2195\">\n                      从上面代码可以看出，我们分别用了 forEach 和 map\n                      都能实现数组的求和，其中需要另外新定义一个变量\n                      sum，再进行累加求和，最后再来看 sum 的值，而 reduce\n                      不仅可以少定义一个变量，而且也会直接返回最后累加的结果，是不是问题就可以轻松解决了？\n                    </p>\n                    <p data-nodeid=\"2196\">\n                      那么我们结合一道题目来看看 reduce 怎么用。\n                    </p>\n                    <p data-nodeid=\"2197\">\n                      <strong data-nodeid=\"2380\">题目：</strong> var arr = [\n                      {name: 'brick1'}, {name: 'brick2'}, {name: 'brick3'} ]\n                    </p>\n                    <p data-nodeid=\"2198\">\n                      希望最后返回到 arr 里面每个对象的 name 拼接数据为 'brick1,\n                      brick2 &amp; brick3' ，如果用 reduce 如何实现呢？\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arr =  [ {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'one'</span>}, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'two'</span>}, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'three'</span>} ];\n</div></li><li><div class=\"code-word\">arr.reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">prev, current, index, array</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (index === <span class=\"hljs-number\">0</span>){\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> current.name;\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (index === array.length - <span class=\"hljs-number\">1</span>){\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> prev + <span class=\"hljs-string\">' &amp; '</span> + current.name;\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> prev + <span class=\"hljs-string\">', '</span> + current.name;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}, <span class=\"hljs-string\">''</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 返回结果 \"one, two &amp; three\"</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2200\">\n                      从上面的答案也可以看出来，用 reduce\n                      就能很轻松地对数组进行遍历，然后进行一些复杂的累加处理操作即可。<br />\n                      到这里，数组遍历的方法也基本讲解差不多了，这一讲也将告一段落。\n                    </p>\n                    <h3 data-nodeid=\"2201\">总结</h3>\n                    <p data-nodeid=\"2202\">\n                      下面我将令人“眼花缭乱”的数组的基础 API\n                      简单做了个总结表格，方便你更清晰地回顾本课时所讲的内容。\n                    </p>\n                    <p data-nodeid=\"2203\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/09/CC/Cip5yGAP1k2ACVqpAAE5zFVPD7o375.png\"\n                        alt=\"Lark20210126-164334.png\"\n                        data-nodeid=\"2395\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2204\">\n                      以上，数组的各方法基本讲解完毕，这些方法之间存在很多共性，如下：\n                    </p>\n                    <ul data-nodeid=\"2205\">\n                      <li data-nodeid=\"2206\">\n                        <p data-nodeid=\"2207\">\n                          所有插入元素的方法，比如 push、unshift\n                          一律返回数组新的长度；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2208\">\n                        <p data-nodeid=\"2209\">\n                          所有删除元素的方法，比如 pop、shift、splice\n                          一律返回删除的元素，或者返回删除的多个元素组成的数组；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2210\">\n                        <p data-nodeid=\"2211\">\n                          部分遍历方法，比如\n                          forEach、every、some、filter、map、find、findIndex，它们都包含\n                          function(value,index,array){}&nbsp;和&nbsp;thisArg&nbsp;这样两个形参。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2212\">\n                      在日常的前端开发工作中，开发者往往会忽视对数组 API\n                      方法的系统性学习，但其实因为数组的方法较多，每个方法的参数和细节也比较零散，很多开发者很难有一个系统的、整体的认识，在开发过程中还要频繁地查询\n                      MDN 文档，造成效率低下以及代码能力难以进一步提升等问题。\n                    </p>\n                    <p data-nodeid=\"2213\">\n                      因此我希望通过这一讲的学习，你能很好地掌握数组的 API\n                      方法，以便在开发中规避我所说的这些问题。\n                    </p>\n                    <p data-nodeid=\"2214\" class=\"\">\n                      在后续的课程中，我将继续带领你尝试一些数组 API\n                      方法的手工实现。同时希望你多动手练习以熟练使用所学的知识点，也欢迎你在下方留言讨论自己在学习过程中遇到的困惑，以及学习感悟等，让我们共同进步。\n                    </p>\n            "}