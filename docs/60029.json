{"title":"28 | 代理模式：如何控制和管理对象的访问？","context":"\n                    <p data-nodeid=\"1045\" class=\"\">\n                      代理模式的原理非常简单，它和装饰模式很类似，都是在不改变同一个接口功能的前提下，对原有接口功能做扩展。但是<strong\n                        data-nodeid=\"1149\"\n                        >代理模式的应用却比装饰模式更为广泛</strong\n                      >，因为代理模式并不执着于链式结构，而是采用更为灵活的单一结构，在很多框架和组件的设计里都能看到代理模式的身影，比如，JDK\n                      的动态代理机制、Spring 的 AOP 机制、Dubbo 框架等。\n                    </p>\n                    <p data-nodeid=\"1046\">\n                      那么，为什么代理模式能够获得如此广泛的应用呢？\n                    </p>\n                    <p data-nodeid=\"1047\">\n                      话不多说，现在就让我们带着这个疑问开始今天的学习吧。\n                    </p>\n                    <h3 data-nodeid=\"1048\">模式原理分析</h3>\n                    <p data-nodeid=\"1049\">\n                      代理模式的原始定义是：让你能够提供对象的替代品或其占位符。代理控制着对于原对象的访问，并允许将请求提交给对象前后进行一些处理。\n                    </p>\n                    <p data-nodeid=\"1050\">\n                      从这个定义中我们能看出，<strong data-nodeid=\"1159\"\n                        >代理模式是作为对象之间的一种中间结构来使用的，通过构建一个代理对象来对原始的功能进行委托处理，其中有一个很重要的功能就是控制对象的访问</strong\n                      >。拿现实中的例子来说，假设你有一套房子要卖，可你却正好在外地出差，你不能亲自处理带人看房、过户等购房手续，这时你就可以找一个房产中介来作为你的代理人，委托他来帮你带人看房、处理过户手续。这就是现实中经典的代理模式的例子。\n                    </p>\n                    <p data-nodeid=\"1051\">我们先来看看代理模式的 UML 图：</p>\n                    <p data-nodeid=\"1052\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/46/48/CioPOWDJxHCAY9xZAABCXltsvGM588.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1163\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"1054\">\n                      从这个 UML 图中，我们能看出代理模式的三个关键角色。\n                    </p>\n                    <ul data-nodeid=\"1055\">\n                      <li data-nodeid=\"1056\">\n                        <p data-nodeid=\"1057\">\n                          <strong data-nodeid=\"1169\"\n                            >抽象主题类（RealObject）</strong\n                          >：声明公用的方法，定义可供客户端使用的统一功能。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1058\">\n                        <p data-nodeid=\"1059\">\n                          <strong data-nodeid=\"1174\"\n                            >主题实现类（RealObjectImpl）</strong\n                          >：实现了抽象主题类的所有方法。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1060\">\n                        <p data-nodeid=\"1061\">\n                          <strong data-nodeid=\"1179\">代理类（Proxy）</strong\n                          >：实现了抽象主题类的方法，并隐藏在代理后面可能其他类的实现。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1062\">\n                      在图中这三个角色都有相互依赖的关系，代理类采用继承的方式来获取抽象主题类的公共方法定义，在代理类内可以进行相关的扩展操作，但最终还是需要执行主题实现类的方法。这是和适配器模式很不同的地方，适配器模式是转换为新的接口，而代理模式不会改变原有接口。\n                    </p>\n                    <p data-nodeid=\"1063\">\n                      接下来，我们再来看看该 UML 对应的代码实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">RealObject</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doSomething</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RealObjectImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">RealObject</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doSomething</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"=== 真实对象输出打印\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Proxy</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">RealObjectImpl</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doSomething</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//这里做一些代理操作或额外的操作</span>\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"== 通过代理类来执行真实对象\"</span>);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>.doSomething();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//单元测试</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">        RealObject realObjectProxy = <span class=\"hljs-keyword\">new</span> Proxy();\n</div></li><li><div class=\"code-word\">        realObjectProxy.doSomething();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">输出：\n</div></li><li><div class=\"code-word\">== 通过代理类来执行真实对象\n</div></li><li><div class=\"code-word\">=== 真实对象输出打印\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1065\">\n                      在上面的这段代码实现中，RealObjectImpl 实现了接口\n                      RealObject 的功能\n                      doSomething，这时我们又创建了一个代理对象 Proxy，它继承了\n                      RealObjectImpl，目的是在使用 RealObject\n                      时可以做一些额外的操作。\n                    </p>\n                    <p data-nodeid=\"1066\">\n                      代码实现虽然简单，但是却展现了代理模式的基本理念——<strong\n                        data-nodeid=\"1188\"\n                        >作为一个外包装的中间层，享有控制住访问对象的权利，同时也能扩展一些功能</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1067\">为什么使用代理模式？</h3>\n                    <p data-nodeid=\"1068\">\n                      虽然代理模式的基本原理非常简单，但是你可能会问：为什么不直接使用已有对象的功能，而非要在中间加一层代理呢？其实主要有三个原因。\n                    </p>\n                    <p data-nodeid=\"1069\">\n                      <strong data-nodeid=\"1195\"\n                        >第一个，客户端有时无法直接操作某些对象。</strong\n                      >\n                      比如，在分布式应用中，你需要调用的对象可能是运行在另外一台服务器上的，当你访问它时，就必须要通过网络才能访问。如果你让客户端直接去调用，那么就意味着客户端需要处理网络服务，包括连接、打包、传包、解包等复杂操作；而这时如果你使用代理模式，在客户端和远程服务端之间建立一个网络代理对象，那么客户端只需要调用代理对象就能跟远程对象建立联系，甚至就像调用本地对象一样。这其实就是我们常说的\n                      RPC 服务的基本原理，本质上就是代理模式。\n                    </p>\n                    <p data-nodeid=\"1070\">\n                      <strong data-nodeid=\"1200\"\n                        >第二个，客户端执行某些耗时操作容易造成服务端阻塞。</strong\n                      >\n                      比如，在类似有道、石墨、语雀这样的云编辑器里进行文案编写时，拷贝多张图片可能就是一件非常耗时的操作，使用者并不希望在执行拷贝图片的操作后，打字就无法正常操作甚至无法查看其他页面。这时，对于软件设计者来说，图片的加载就可以通过代理模式来解决：标示图片所在位置，然后使用代理对象去读取图片资源，这样就不会影响其他客户端与服务端之间的操作了。\n                    </p>\n                    <p data-nodeid=\"1071\">\n                      <strong data-nodeid=\"1205\"\n                        >第三个，服务端需要控制客户端的访问权限。</strong\n                      >\n                      代理模式除了前面提到的扩展功能外，另一个更为重要的功能是做权限控制。比如，某一项业务由于安全原因只能让一部分特定的用户去访问，如果在原有功能的基础上再增加权限过滤功能就会增加代码的耦合性，并且也不方便组件的复用。其实，这时做一个代理类就可以解决该问题，对于特定的接口来说，只需要指定所有请求必须通过该代理类，然后由该代理类做权限判断即可。\n                    </p>\n                    <h3 data-nodeid=\"1072\">使用场景分析</h3>\n                    <p data-nodeid=\"1073\">\n                      通过分析选择代理模式的原因，我们不难发现，代理模式的核心能力在于对某一个具体的功能进行增强和补充。\n                    </p>\n                    <p data-nodeid=\"1074\">\n                      为了更好地帮助你理解代理模式的使用场景，下面我们还是结合一个简单的例子来说明。在\n                      Spring 中，我们经常会使用 @Transactional\n                      注解来做事务控制，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-meta\">@Service</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestInfo</span> </span>{\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Autowired</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> TestService testService;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Transactional</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> TestData <span class=\"hljs-title\">create</span><span class=\"hljs-params\">(String <span class=\"hljs-keyword\">case</span>)</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(testService.getClass().getName());\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> testService.create(author);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1076\">\n                      在 TestInfo 类中，@Transactional 注解了 create\n                      方法，这个注解表示 Spring 会使用事务的方式来执行代码中的\n                      create\n                      方法。那什么是事务呢？简单来说，事务是指程序中一系列关联的逻辑操作，所有操作必须全部完成后才算一次操作成功，否则所有的操作变更都会被撤销。在上面的代码中，为了完成一次事务，Spring\n                      便采用了代理模式的方式来解决，也就是 @Transactional\n                      注解的实现。\n                    </p>\n                    <p data-nodeid=\"1077\">\n                      这里我们也简单复习一下 @Transactional\n                      注解实现的原理。在一次请求调用的事务开始后，Transactional\n                      的注解实现类会生成一个代理对象 connection，通过 AOP\n                      机制将其放入 Spring 的 Bean 资源池中与\n                      DataSource、DataSourceTransactionManager\n                      相关的对象容器中。在接下来的整个事务中的代码，都会通过该\n                      connection\n                      对象连接数据库，执行所有数据库命令。事务结束时，回到最初的代理\n                      connection 对象上返回操作，并关闭代理对象 connection。\n                    </p>\n                    <p data-nodeid=\"1078\">\n                      你发现没，@Transactional\n                      注解的实现过程其实就是代理模式的一种最佳实践。\n                    </p>\n                    <p data-nodeid=\"1079\">\n                      通过上面的示例，想必你已经大致了解代理模式的使用场景了。实际上，代理模式应用非常广泛，目前的使用场景大致可总结为以下五大类。\n                    </p>\n                    <p data-nodeid=\"1080\">\n                      <strong data-nodeid=\"1217\"\n                        >第一类，虚拟代理，适用于延迟初始化，用小对象表示大对象的场景</strong\n                      >。这个“大对象”会包含大量 IO\n                      资源，比如图片、大文件、模型文件等。我们都知道，大对象通常很占用内存空间，一直保持其运行会很消耗系统资源，这时就可以使用代理模式。那怎么来做呢？可以先创建一个消耗相对较小的对象来代理这个大对象的创建，而实际上真实的大对象只会在真正需要时才会被创建，这样的代理方式就被称为虚拟代理。比如，在\n                      Java 中的 CopyOnWriteArrayList\n                      数组对象的实现就是使用了虚拟代理的方式，目的就是要让操作延迟，只有对象被真正用到的时候才会被克隆。\n                    </p>\n                    <p data-nodeid=\"1081\">\n                      <strong data-nodeid=\"1222\"\n                        >第二类，保护代理，适用于服务端对客户端的访问控制场景</strong\n                      >。代理模式有一个非常重要的应用场景就是控制一个对象对另一个对象的访问与使用权限。当客户端通过代理对象访问服务端的原始对象时，代理对象会根据具体的规则来判断客户端是否有访问权限。比如，防火墙其实就是一种保护代理的具体实践。\n                    </p>\n                    <p data-nodeid=\"1082\">\n                      <strong data-nodeid=\"1227\"\n                        >第三类，远程代理，适用于需要本地执行远程服务代码的场景。</strong\n                      >\n                      在这种场景中，代理对象会隐藏处理所有与网络相关的复杂细节。随着微服务架构的流行，越来越多的程序应用部署在多台服务器上，各自服务都更专注于各自的业务，当需要使用其他服务时就会频繁进行远程服务调用，但不可能所有的业务都要自己实现网络调用，于是就出现了的远程代理框架，比如，gRpc、Dubbo\n                      等。\n                    </p>\n                    <p data-nodeid=\"1083\">\n                      <strong data-nodeid=\"1232\"\n                        >第四类，日志记录代理，适用于需要保存请求对象历史记录的场景</strong\n                      >，比如，日志监控。客户端在调用请求时，并不会感知到日志记录，这是因为代理对象在原始对象周围添加了监控功能。\n                    </p>\n                    <p data-nodeid=\"1084\">\n                      <strong data-nodeid=\"1237\"\n                        >第五类，缓存代理，适用于缓存客户请求结果并对缓存生命周期进行管理的场景</strong\n                      >。比如，商品详情页通常包含大量图片和文字介绍，代理对象可以对重复请求相同的结果进行缓存。\n                    </p>\n                    <h3 data-nodeid=\"1085\">收益什么？损失什么？</h3>\n                    <p data-nodeid=\"1086\">\n                      从上面的使用场景分析中，我们可以总结提炼出代理模式的优点和缺点。\n                    </p>\n                    <p data-nodeid=\"1087\">其中，代理模式的优点主要有以下。</p>\n                    <ul data-nodeid=\"1088\">\n                      <li data-nodeid=\"1089\">\n                        <p data-nodeid=\"1090\">\n                          作为接口的特定中间层，能够降低对象间的直接耦合。代理对象很好地解耦了客户端与服务端之间的调用关系，即使客户端在使用服务端对象还未准备好或不存在时，代理也可以正常工作。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1091\">\n                        <p data-nodeid=\"1092\">\n                          虚拟代理通过延迟加载以及使用小对象代表大对象的方式，帮助减少系统资源的损耗，提升系统运行速度。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1093\">\n                        <p data-nodeid=\"1094\">\n                          保护代理可以控制客户端对服务端的访问权限。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1095\">\n                        <p data-nodeid=\"1096\">\n                          远程代理帮助客户端快速访问分布式机器上的对象，分布式服务器通常可以提供集群负载均衡、故障容错和高性能的计算能力。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1097\">\n                        <p data-nodeid=\"1098\">\n                          日志记录代理能记录每次操作的信息，对于用户使用轨迹跟踪、数据统计、定位问题等都有重要作用。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1099\">\n                        <p data-nodeid=\"1100\">\n                          缓存代理能够提供各式各样的缓存结果，对于需要高频读取重复数据的系统来说，能极大地提升系统性能。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1101\">而代理模式的缺点有如下几个。</p>\n                    <ul data-nodeid=\"1102\">\n                      <li data-nodeid=\"1103\">\n                        <p data-nodeid=\"1104\">\n                          因为在客户端和服务端之间增加了代理对象，所以也增加了系统的复杂度。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1105\">\n                        <p data-nodeid=\"1106\">\n                          实现了代理模式的服务，如果处理请求的时间过长，就容易造成多个服务调用阻塞而影响整体系统的处理速度。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1107\">\n                        <p data-nodeid=\"1108\">\n                          对于一些偏操作系统或标准协议等底层的代理服务而言，代码实现可能很复杂。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"1109\">总结</h3>\n                    <p data-nodeid=\"1110\">\n                      这里我们总结一下代理模式试图解决的问题：\n                    </p>\n                    <ul data-nodeid=\"1111\">\n                      <li data-nodeid=\"1112\">\n                        <p data-nodeid=\"1113\">无法直接调用某些对象；</p>\n                      </li>\n                      <li data-nodeid=\"1114\">\n                        <p data-nodeid=\"1115\">耗时的操作；</p>\n                      </li>\n                      <li data-nodeid=\"1116\">\n                        <p data-nodeid=\"1117\">\n                          某个接口可能需要外部额外操作，如日志记录、权限管控、重复操作等；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1118\">\n                        <p data-nodeid=\"1119\">一直保存大对象；</p>\n                      </li>\n                      <li data-nodeid=\"1120\">\n                        <p data-nodeid=\"1121\">需要控制访问权限。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1122\">\n                      对于这些问题，代理模式通过建立一个代理对象，在原始对象的外围来封装这些问题可能引起的代码变化。\n                    </p>\n                    <p data-nodeid=\"1123\">\n                      代理模式的原理虽然简单，但是应用却非常广泛，特别是在<strong\n                        data-nodeid=\"1264\"\n                        >中间件领域</strong\n                      >随处可见代理模式，比如 Dubbo、gRPC\n                      都是代理模式的优秀实践。\n                    </p>\n                    <p data-nodeid=\"1124\">\n                      到此，我们就学习完结构型模式的所有内容了，现在我们来回顾和总结下结构型模式的相关内容。\n                    </p>\n                    <ul data-nodeid=\"1125\">\n                      <li data-nodeid=\"1126\">\n                        <p data-nodeid=\"1127\">\n                          <strong data-nodeid=\"1270\">适配器模式</strong\n                          >，实现了不同接口功能之间的转换，为组件的快速复用提供了直接的解决办法。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1128\">\n                        <p data-nodeid=\"1129\">\n                          <strong data-nodeid=\"1275\">桥接模式</strong\n                          >，实现了抽象实体和抽象行为之间的永久绑定，可以理解为在基于已有的构件上设计可能会发生变化的行为。它往往与抽象工厂模式共同用于跨平台设计的场景。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1130\">\n                        <p data-nodeid=\"1131\">\n                          <strong data-nodeid=\"1280\">组合模式</strong\n                          >，用于表达整体和部分的关系，可以忽略单个对象和合成对象之间的差别。它实际采用的是一种树状结构。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1132\">\n                        <p data-nodeid=\"1133\">\n                          <strong data-nodeid=\"1285\">装饰模式</strong\n                          >，与继承不同，通过代理方式实现了接口功能的多态，避免了大量子类的派生。它适用于链状和树状的结构，但容易造成对象与装饰器之间耦合度过高。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1134\">\n                        <p data-nodeid=\"1135\">\n                          <strong data-nodeid=\"1290\">门面模式</strong\n                          >，用于对子系统提供统一的接口。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1136\">\n                        <p data-nodeid=\"1137\">\n                          <strong data-nodeid=\"1295\">享元模式</strong\n                          >，用于解决大对象重复创建损耗资源的问题，通过共享对象池来复用对象。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1138\">\n                        <p data-nodeid=\"1139\">\n                          <strong data-nodeid=\"1300\">代理模式</strong\n                          >，模式的结构与装饰模式非常相似，但侧重点不同，一种是修改对象的行为，另一种是控制访问。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1140\">\n                      总体来说，这七种结构型模式重点关注的都是对象与对象之间的结构关系，以及如何更好地组合以扩展代码整体结构的灵活性。\n                    </p>\n                    <h3 data-nodeid=\"1141\">课后思考</h3>\n                    <p data-nodeid=\"1142\">\n                      学习了代理模式后，你能找出门面模式和代理模式的区别和联系是什么吗？欢迎你在留言区与我分享。\n                    </p>\n                    <p data-nodeid=\"1143\" class=\"\">\n                      在下一讲，我会接着与你分享访问者模式的相关内容，记得按时来听课！\n                    </p>\n            "}