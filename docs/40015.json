{"title":"14 | 如何避免重复渲染？","context":"\n                    <p data-nodeid=\"1729\" class=\"\">\n                      上一讲讲到，React 的性能问题通常有两类：一类是<strong\n                        data-nodeid=\"1885\"\n                        >长列表</strong\n                      >，一类是<strong data-nodeid=\"1886\">重复渲染</strong\n                      >。这里再提一下长列表，它指的是你的页面渲染了很长的列表，通常有上百甚至上千行数据。长列表本身不是\n                      React\n                      特有的问题，无论是什么技术栈，都可能遇到。它的通用解决方案是采用<strong\n                        data-nodeid=\"1887\"\n                        >虚拟滚动</strong\n                      >，业界做得比较好的解决方案有<strong data-nodeid=\"1888\"\n                        >react-virtualized</strong\n                      >和<strong data-nodeid=\"1889\">react-window</strong\n                      >，已经非常成熟了。\n                    </p>\n                    <p data-nodeid=\"1730\">\n                      那重复渲染的解决方案有没有这么成熟呢？不仅没有，甚至还存在一些误区。所以这一讲我们就这个主题来讲解下。\n                    </p>\n                    <h3 data-nodeid=\"1731\">破题</h3>\n                    <p data-nodeid=\"1732\">\n                      在前面的生命周期与渲染流程等章节中都有提过避免重复渲染的具体方案，但为什么还是会发生重复渲染呢？因为当业务复杂度与项目规模还没有上升到引发页面性能下降时，这个问题不值得探讨，因为即使处理了也会白费功夫。这就让我想起了这句话：\n                    </p>\n                    <blockquote data-nodeid=\"1733\">\n                      <p data-nodeid=\"1734\">\n                        过早的优化是万恶之源。<br />\n                        —— Donald Knuth 《计算机编程艺术》\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1735\">\n                      互联网时代，是一个追求快速交付的时代。保证业务快速上线远比代码质量更为重要。只要业务能跑，性能往往是相对靠后的要求。这就需要我们明确优化时机的问题，即什么时候该做，什么时候不该做。\n                    </p>\n                    <p data-nodeid=\"1736\">\n                      其次需要讨论如何排查问题页面，借助什么工具去定位？\n                    </p>\n                    <p data-nodeid=\"1737\">\n                      然后就是一些常见忽略的点，即有哪些我们以为不会引发重渲染的写法，实际上会有问题？又该如何避免？\n                    </p>\n                    <p data-nodeid=\"1738\">\n                      最后就是如何设计优化方案，有什么好的实践，以及有什么反面的做法。\n                    </p>\n                    <h3 data-nodeid=\"1739\">审题</h3>\n                    <p data-nodeid=\"1740\">\n                      那么基于这样一个思路，可以整理下答题方式：\n                    </p>\n                    <ul data-nodeid=\"1741\">\n                      <li data-nodeid=\"1742\">\n                        <p data-nodeid=\"1743\">\n                          <strong data-nodeid=\"1906\">优化时机</strong\n                          >，说明应该在什么时候做优化，这样做的理由是什么；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1744\">\n                        <p data-nodeid=\"1745\">\n                          <strong data-nodeid=\"1911\">定位方式</strong\n                          >，用什么方式可以快速地定位相关问题；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1746\">\n                        <p data-nodeid=\"1747\">\n                          <strong data-nodeid=\"1916\">常见的坑</strong\n                          >，明确哪些常见的问题会被我们忽略，从而导致重渲染；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1748\">\n                        <p data-nodeid=\"1749\">\n                          <strong data-nodeid=\"1921\">处理方案</strong\n                          >，有哪些方案可以帮助我们解决这个问题。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1750\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/10/Ciqc1F_4LCOAM1yTAABLaS6Gj1s774.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1924\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1751\">\n                      这里需要强调一个问题，通常我们认为制定<strong\n                        data-nodeid=\"1934\"\n                        >处理方案</strong\n                      >是整个过程的重点，但对于大厂而言，更重要的是先证明这件事是否有做的必要性。这就要求我们具备洞察力，能辨别矛盾的主次关系，合理安排人力与资源，往<strong\n                        data-nodeid=\"1935\"\n                        >要害处</strong\n                      >下手。所以这就需要我们先想清楚为什么要优化，以及什么时候做优化。\n                    </p>\n                    <h3 data-nodeid=\"1752\">入手</h3>\n                    <h4 data-nodeid=\"1753\">优化时机</h4>\n                    <p data-nodeid=\"1754\">\n                      正如开篇所讲，重新渲染可以是一个问题，也可以不是。在厘清问题之前，不妨先回顾下重新渲染时会发生什么。\n                    </p>\n                    <p data-nodeid=\"1755\">\n                      <strong data-nodeid=\"1942\">原理</strong>\n                    </p>\n                    <p data-nodeid=\"1756\">\n                      React 会构建并维护一套内部的虚拟 DOM 树，因为操作 DOM\n                      相对操作 JavaScript 对象更慢，所以根据虚拟 DOM\n                      树生成的差异更新真实 DOM。那么每当一个组件的 props 或者\n                      state 发生变更时，React\n                      都会将最新返回的元素与之前渲染的元素进行对比，以此决定是否有必要更新真实的\n                      DOM。当它们不相同时，React 会更新该\n                      DOM。这个过程被称为<strong data-nodeid=\"1948\">协调</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1757\">\n                      协调的成本非常昂贵，如果一次性引发的重新渲染层级足够多、足够深，就会阻塞\n                      UI 主线程的执行，造成卡顿，引起页面帧率下降。\n                    </p>\n                    <p data-nodeid=\"1758\">\n                      <strong data-nodeid=\"1953\">时机</strong>\n                    </p>\n                    <p data-nodeid=\"1759\">\n                      虽然重新渲染会带来额外的性能负担，但这并不意味着我们就需要立刻优化它。正如上一讲所说，任何结论应该建立在业务标准与数据基础上分析。数据基础很好理解，上一讲提过，那业务标准是什么呢？\n                    </p>\n                    <p data-nodeid=\"1760\">\n                      比如，当前的前端页面有 10 个，其中有 9\n                      个页面经过数据采集后 TP99 在 52 FPS 左右，其中有 1 个页面\n                      TP99 在 29 FPS 左右。\n                    </p>\n                    <p data-nodeid=\"1761\">\n                      既然 52 FPS 没到 60，那有必要优化吗？\n                    </p>\n                    <ul data-nodeid=\"1762\">\n                      <li data-nodeid=\"1763\">\n                        <p data-nodeid=\"1764\">\n                          一般 50 ~ 60 FPS，就相当流畅了；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1765\">\n                        <p data-nodeid=\"1766\">\n                          在 30 ~ 50 FPS\n                          之间就因人而异了，通常属于尚可接受的范畴；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1767\">\n                        <p data-nodeid=\"1768\">\n                          在 30 FPS 以下属于有明显卡顿，会令人不适。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1769\">\n                      依照上面的标准，其中的 9\n                      个页面都没有优化的必要，完全可以放任自流，只需要聚焦 29\n                      FPS 的页面即可。但在开展优化工作之前，还需要调查<strong\n                        data-nodeid=\"1969\"\n                        >客观运行环境</strong\n                      >的情况，比如浏览器与运行设备等。\n                    </p>\n                    <ul data-nodeid=\"1770\">\n                      <li data-nodeid=\"1771\">\n                        <p data-nodeid=\"1772\">\n                          如果该用户将页面运行在 IE 中，而你的业务不需要支持\n                          IE，低帧率需要优化吗？显然也是不需要的。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1773\">\n                        <p data-nodeid=\"1774\">\n                          如果该用户的手机是 5\n                          年前的旧机型，配置相当低，运行内存只有 512\n                          MB，那还需要优化吗？你的业务如果需要兼容这部分用户的机型，那就要去做。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1775\">\n                      所以<strong data-nodeid=\"1977\"\n                        >你的业务在目标群体中的运行环境标准就是业务标准</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1776\">\n                      有数据有标准才能分析是否有做的必要，是否能产生业务价值。\n                    </p>\n                    <h4 data-nodeid=\"1777\">定位方式</h4>\n                    <p data-nodeid=\"1778\">\n                      通过数据采集，确认页面在 TP99 帧率不足 30\n                      FPS，然后就需要开始定位该页面的问题。定位的第一步应该是<strong\n                        data-nodeid=\"1989\"\n                        >还原场景</strong\n                      >、<strong data-nodeid=\"1990\">完整复现</strong>。\n                    </p>\n                    <p data-nodeid=\"1779\">\n                      <strong data-nodeid=\"1994\">复现</strong>\n                    </p>\n                    <p data-nodeid=\"1780\">\n                      如果你能直接在设备上成功复现该问题，那是最好的，这个问题就没有什么探讨的价值了。而在实际工作中常常会出现一种截然相反的情况，就是无法复现。那首要采取的行动就是寻找运行该页面的<strong\n                        data-nodeid=\"2004\"\n                        >设备机型</strong\n                      >与<strong data-nodeid=\"2005\">浏览器版本</strong\n                      >，确保能在相同环境下复现。如果还是不能，就需要确认影响范围，是否只是在特定的设备或者特定的浏览器版本才会出现该问题，这样就需要转入长期作战，增加埋点日志，采集更多的数据进行复现方式的分析。\n                    </p>\n                    <p data-nodeid=\"1781\">\n                      <strong data-nodeid=\"2009\">工具</strong>\n                    </p>\n                    <p data-nodeid=\"1782\">\n                      成功复现后，就需要通过工具定位问题点。通常通过两个工具去处理：\n                    </p>\n                    <ul data-nodeid=\"1783\">\n                      <li data-nodeid=\"1784\">\n                        <p data-nodeid=\"1785\">\n                          通过 Chrome 自带的 Performance 分析，主要用于查询\n                          JavaScript\n                          执行栈中的耗时，确认函数卡顿点，由于和重复渲染关联度不高，你可以自行查阅使用文档；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1786\">\n                        <p data-nodeid=\"1787\">\n                          通过 React Developer Tools 中的 Profiler\n                          分析组件渲染次数、开始时间及耗时。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1788\">\n                      如果需要查看页面上的组件是否有重新渲染，可以在配置项里直接开启<strong\n                        data-nodeid=\"2018\"\n                        >Highlight updates when components render</strong\n                      >。此时，有组件渲染了，就会直接高亮。\n                    </p>\n                    <p data-nodeid=\"1789\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/10/Ciqc1F_4LC-AY-tlAAJ1NiFv3y0123.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"2021\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1790\">\n                      打开录制功能，在操作一段时间后暂停，就能看见具体的渲染情况：\n                    </p>\n                    <ul data-nodeid=\"1791\">\n                      <li data-nodeid=\"1792\">\n                        <p data-nodeid=\"1793\">\n                          不渲染的内容，会直接标记为<strong data-nodeid=\"2028\"\n                            >Did not render</strong\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1794\">\n                        <p data-nodeid=\"1795\">\n                          重复渲染的内容可直接查看渲染耗时等消息。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1796\">如下图所示：</p>\n                    <p data-nodeid=\"1797\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/1B/CgqCHl_4LDaAJYLZAAF8Ok2N4c0224.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"2033\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1798\">\n                      React Profiler 的详细使用方式建议阅读<a\n                        href=\"https://zh-hans.reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html\"\n                        data-nodeid=\"2037\"\n                        >官方文档</a\n                      >，在排查重复渲染上没有比这更好的工具了。\n                    </p>\n                    <h4 data-nodeid=\"1799\">常见的坑</h4>\n                    <p data-nodeid=\"1800\">\n                      在 React Profiler\n                      的运行结果中，我们可以看出，避免重复渲染并不是不让它去渲染。\n                    </p>\n                    <ul data-nodeid=\"1801\">\n                      <li data-nodeid=\"1802\">\n                        <p data-nodeid=\"1803\">\n                          如果页面有显示信息变化的需求，那就要重新渲染；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1804\">\n                        <p data-nodeid=\"1805\">\n                          但如果仅仅是更新单个组件，却触发了大量无关组件更新，那就有问题了。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1806\">\n                      所以我们避免的是无效的重复渲染，毕竟协调成本很昂贵。\n                    </p>\n                    <p data-nodeid=\"1807\">\n                      比如有一个这样的列表，内部元素的顺序可以上移下移。代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> initListData = []\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n</div></li><li><div class=\"code-word\">  initListData.push({ <span class=\"hljs-attr\">text</span>: i, <span class=\"hljs-attr\">id</span>: i });\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> LisItem = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ text, id, onMoveUp, onMoveDown }</span>) =&gt;</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      {text}\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> onMoveUp(id)}&gt;\n</div></li><li><div class=\"code-word\">        上移\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> onMoveDown(id)}&gt;\n</div></li><li><div class=\"code-word\">        下移\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">List</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">   state = {\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-attr\">listData</span>: initListData,\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">   handleMoveUp = <span class=\"hljs-function\">(<span class=\"hljs-params\">id</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">   handleMoveDown = <span class=\"hljs-function\">(<span class=\"hljs-params\">id</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">   render() {\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-keyword\">const</span> {\n</div></li><li><div class=\"code-word\">       listData\n</div></li><li><div class=\"code-word\">     } = <span class=\"hljs-keyword\">this</span>.state\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">       <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">           {\n</div></li><li><div class=\"code-word\">               list.map(({ text, id }, index) =&gt; (\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ListItem</span>\n</span></div></li><li><div class=\"code-word\">                  <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{id}</span>\n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">{id}</span>\n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">{text}</span>\n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-attr\">onMoveUp</span>=<span class=\"hljs-string\">{this.handleMoveUp}</span>\n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-attr\">onMoveDown</span>=<span class=\"hljs-string\">{this.handleMoveDown}</span>\n</div></li><li><div class=\"code-word\">                /&gt;\n</div></li><li><div class=\"code-word\">              ))\n</div></li><li><div class=\"code-word\">           }\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">     )\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1809\">这段代码分为两个部分：</p>\n                    <ul data-nodeid=\"1810\">\n                      <li data-nodeid=\"1811\">\n                        <p data-nodeid=\"1812\">\n                          <strong data-nodeid=\"2050\">List</strong\n                          >组件用于展示列表，执行上下移动的逻辑；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1813\">\n                        <p data-nodeid=\"1814\">\n                          <strong data-nodeid=\"2055\">ListItem</strong\n                          >，也就是列表中展示的行，渲染每行的内容。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1815\">\n                      执行这段代码后，如果你点击某行的 ListItem 进行上下移动，在\n                      React Profile 中你会发现其他行也会重新渲染。\n                    </p>\n                    <p data-nodeid=\"1816\">\n                      如果应用我们前面所学的知识，为 ListItem 添加 React.memo\n                      就可以阻止每行内容重新渲染。如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> LisItem = React.memo(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ text, onMoveUp, onMoveDown }</span>) =&gt;</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      {text}\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> onMoveUp(item)}&gt;\n</div></li><li><div class=\"code-word\">        上移\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> onMoveDown(item)}&gt;\n</div></li><li><div class=\"code-word\">        下移\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">))\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1818\">\n                      要知道无论是 React.memo 还是 PureComponent 都是通过<strong\n                        data-nodeid=\"2063\"\n                        >浅比较</strong\n                      >的方式对比变化前后的 props 与\n                      state，对比过程就是下面这段摘抄于 React 源码的代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"> <span class=\"hljs-keyword\">if</span> (type.prototype &amp;&amp; type.prototype.isPureReactComponent) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">        !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n</div></li><li><div class=\"code-word\">      );\n</div></li><li><div class=\"code-word\">    }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1820\">\n                      那是否存在<strong data-nodeid=\"2069\">失效的情况</strong\n                      >呢？\n                    </p>\n                    <p data-nodeid=\"1821\">\n                      最常见的情况莫过于使用<strong data-nodeid=\"2075\"\n                        >箭头函数</strong\n                      >，比如像下面这样的写法，通过箭头函数取代原有的\n                      handleMoveUp 函数。 那么此时再打开 React\n                      Profile，你会发现每次移动某行时，其他无关行又开始重复渲染了。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"> &lt;ListItem\n</div></li><li><div class=\"code-word\">    key={id}\n</div></li><li><div class=\"code-word\">    id={id}\n</div></li><li><div class=\"code-word\">    text={text}\n</div></li><li><div class=\"code-word\">    onMoveUp={(id) =&gt; { <span class=\"hljs-comment\">//... }}</span>\n</div></li><li><div class=\"code-word\">    onMoveDown={<span class=\"hljs-keyword\">this</span>.handleMoveDown}\n</div></li><li><div class=\"code-word\">  /&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1823\">\n                      这是因为箭头函数在 List 每次调用 render\n                      时都会动态生成一个新的函数，函数的引用变化了，这时即便使用\n                      React.memo 也是无效的。\n                    </p>\n                    <p data-nodeid=\"2161\" class=\"\">\n                      JSX\n                      的问题比较好解决，将整个函数提取为一个类属性的函数就可以了，但还有一类问题并不好解决，比如在\n                      React Native 中，有个错误的使用案例是这样的：FlatList\n                      是一个 PureComponent，但每次调用 render\n                      函数都会生成一个新的 data 对象，与上面同理，PureComponent\n                      就破防了，如果下层的子组件没有设置防护，那就层层击穿，开始昂贵的协调了。如下代码所示：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">render() {\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">this</span>.props.list.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> { <span class=\"hljs-comment\">/*... */</span> })\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FlatList</span>\n</span></span></div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{data}</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">renderItem</span>=<span class=\"hljs-string\">{this.renderItem}</span>\n</div></li><li><div class=\"code-word\">        /&gt;\n</div></li><li><div class=\"code-word\">     )\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1826\">\n                      所以在使用组件缓存的 API 时，一定要避开这些问题。\n                    </p>\n                    <h4 data-nodeid=\"1827\">处理方案</h4>\n                    <p data-nodeid=\"1828\">\n                      那怎么解决呢？React 在设计上是通过<strong\n                        data-nodeid=\"2090\"\n                        >数据的变化引发视图层的更新</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1829\">\n                      <strong data-nodeid=\"2094\">缓存</strong>\n                    </p>\n                    <p data-nodeid=\"1830\">\n                      <strong data-nodeid=\"2103\">性能不够</strong>，<strong\n                        data-nodeid=\"2104\"\n                        >缓存来凑</strong\n                      >，第一类方案是添加缓存来处理，常见的解决方案有 Facebook\n                      自研的 reselect。让我们回到 FlatList 的案例，虽然\n                      this.props.list 每次必须经过转换后才能使用，但我们只要保证\n                      list 不变时转换后的 data 不变，就可以避免重复渲染。\n                    </p>\n                    <p data-nodeid=\"1831\">\n                      reselect\n                      会将输入与输出建立映射，缓存函数产出结果。只要输入一致，那么会直接吐出对应的输出结果，从而保证计算结果不变，以此来保证\n                      pureComponent 不会被破防。如以下案例所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { createSelector } fr om <span class=\"hljs-string\">'reselect'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> listSelector = <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =&gt;</span> props.list || []\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> dataSelector = createSelector(\n</div></li><li><div class=\"code-word\">  listSelector,\n</div></li><li><div class=\"code-word\">  list =&gt; list.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> { <span class=\"hljs-comment\">/*... */</span> })\n</div></li><li><div class=\"code-word\">)\n</div></li><li><div class=\"code-word\">render() {\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">FlatList</span>\n</span></span></div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{dataSelector(this.props)}</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">renderItem</span>=<span class=\"hljs-string\">{this.renderItem}</span>\n</div></li><li><div class=\"code-word\">        /&gt;\n</div></li><li><div class=\"code-word\">     )\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1833\">\n                      <strong data-nodeid=\"2109\">不可变数据</strong>\n                    </p>\n                    <p data-nodeid=\"1834\">\n                      第二类方案的心智成本相对比较高，是使用<strong\n                        data-nodeid=\"2119\"\n                        >不可变数据</strong\n                      >，最早的方案是使用<strong data-nodeid=\"2120\"\n                        >ImmutableJS</strong\n                      >。如果我们无法将 props 或者 state\n                      扁平化，存在多级嵌套且足够深，那么每次修改指定节点时，可能会导致其他节点被更新为新的引用，而ImmutableJS\n                      可以保证修改操作返回一个新引用，并且只修改需要修改的节点。\n                    </p>\n                    <p data-nodeid=\"1835\">\n                      ImmutableJS\n                      常见的一个错误使用方式就是下面这样的，即在传参时，使用\n                      toJS 函数生成新的对象，那就又破防了。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"> &lt;FlatList\n</div></li><li><div class=\"code-word\">        data={immutableList.toJS()}\n</div></li><li><div class=\"code-word\">        renderItem={<span class=\"hljs-keyword\">this</span>.renderItem}\n</div></li><li><div class=\"code-word\">  /&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1837\">\n                      这样的错误写法太常见了，存在于大量的 ImmutableJS\n                      项目中。造成的原因是 ImmutableJS 本身的数据遍历 API\n                      使用麻烦，且不符合直觉，所以如今 immerjs 更为流行。\n                    </p>\n                    <p data-nodeid=\"1838\">\n                      <strong data-nodeid=\"2126\">手动控制</strong>\n                    </p>\n                    <p data-nodeid=\"1839\">\n                      最后一种解决方案就是<strong data-nodeid=\"2132\"\n                        >自己手动控制</strong\n                      >，通过使用 shouldComponentUpdate API\n                      来处理，在生命周期一讲中有详细介绍过，这里就不赘述了。\n                    </p>\n                    <p data-nodeid=\"1840\">\n                      需要注意，使用 shouldComponentUpdate 可能会带来意想不到的\n                      Bug，所以这个方案应该放到最后考虑。\n                    </p>\n                    <h3 data-nodeid=\"1841\">答题</h3>\n                    <blockquote data-nodeid=\"1842\">\n                      <p data-nodeid=\"1843\">\n                        如何避免重复渲染分为三个步骤：选择优化时机、定位重复渲染的问题、引入解决方案。\n                      </p>\n                      <p data-nodeid=\"1844\">\n                        优化时机需要根据当前业务标准与页面性能数据分析，来决定是否有必要。如果卡顿的情况在业务要求范围外，那确实没有必要做；如果有需要，那就进入下一步——定位。\n                      </p>\n                      <p data-nodeid=\"1845\">\n                        定位问题首先需要复现问题，通常采用还原用户使用环境的方式进行复现，然后使用\n                        Performance 与 React Profiler\n                        工具进行分析，对照卡顿点与组件重复渲染次数及耗时排查性能问题。\n                      </p>\n                      <p data-nodeid=\"1846\">\n                        通常的解决方案是加 PureComponent 或者使用 React.memo\n                        等组件缓存\n                        API，减少重新渲染。但错误的使用方式会使其完全无效，比如在\n                        JSX\n                        的属性中使用箭头函数，或者每次都生成新的对象，那基本就破防了。\n                      </p>\n                      <p data-nodeid=\"1847\">针对这样的情况有三个解决方案：</p>\n                      <ol data-nodeid=\"1848\">\n                        <li data-nodeid=\"1849\">\n                          <p data-nodeid=\"1850\">\n                            缓存，通常使用 reselect\n                            缓存函数执行结果，来避免产生新的对象；\n                          </p>\n                        </li>\n                        <li data-nodeid=\"1851\">\n                          <p data-nodeid=\"1852\">\n                            不可变数据，使用数据 ImmutableJS 或者 immerjs\n                            转换数据结构；\n                          </p>\n                        </li>\n                        <li data-nodeid=\"1853\">\n                          <p data-nodeid=\"1854\">\n                            手动控制，自己实现 shouldComponentUpdate\n                            函数，但这类方案一般不推荐，因为容易带来意想不到的\n                            Bug，可以作为保底手段使用。\n                          </p>\n                        </li>\n                      </ol>\n                      <p data-nodeid=\"1855\">\n                        通过以上的手段就可以避免无效渲染带来的性能问题了。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1856\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/F6/CgpVE1_4LHOAYmuIAADInUKQ548136.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"2146\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"1857\">总结</h3>\n                    <p data-nodeid=\"1858\">\n                      本讲中并没有出现实际的案例，但如果你在项目中有重复渲染案例，不妨根据第\n                      13\n                      讲“如何分析和调优性能瓶颈？”中的流程，自己再总结一份答案，看看是否会有新的收获。\n                    </p>\n                    <p data-nodeid=\"1859\">\n                      在介绍完 React\n                      的性能相关问题后，下一讲我会为你介绍如何提升 React\n                      代码的可维护性。\n                    </p>\n                    <hr data-nodeid=\"1860\" />\n                    <p data-nodeid=\"1861\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"2154\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image/M00/72/94/Ciqc1F_EZ0eANc6tAASyC72ZqWw643.png\"\n                          alt=\"Drawing 2.png\"\n                          data-nodeid=\"2153\"\n                      /></a>\n                    </p>\n                    <p data-nodeid=\"1862\">《大前端高薪训练营》</p>\n                    <p data-nodeid=\"1863\" class=\"\">\n                      对标阿里 P7 技术需求 + 每月大厂内推，6\n                      个月助你斩获名企高薪 Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"2159\"\n                        >点击链接</a\n                      >，快来领取！\n                    </p>\n            "}