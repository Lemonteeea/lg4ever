{"title":"29 | 统一认证与授权如何保障服务安全？","context":"\n                    <p data-nodeid=\"10493\" class=\"\">\n                      认证与授权对于当前的互联网应用是非常重要的基础功能：<strong\n                        data-nodeid=\"10771\"\n                        >认证</strong\n                      >用于验证当前用户的身份，而<strong data-nodeid=\"10772\"\n                        >授权</strong\n                      >意味着用户在认证成功后，会被系统授予访问系统资源的权限。只有具备相应身份和权限的人才能访问系统中的相应资源，比如在购物网站中你只能支付你自己购物车内的商品，这就保护了用户和系统的信息安全。\n                    </p>\n                    <p data-nodeid=\"10494\">\n                      微服务架构不同于单体应用的架构，单体应用的认证和授权非常集中，但是当服务被拆分之后，对各个微服务的认证与授权就会变得非常分散，因此，在微服务架构中，就将集成统一认证与授权的功能作为横切关注点，为应用服务提供信息安全保障。\n                    </p>\n                    <h3 data-nodeid=\"10495\">微服务安全的挑战和现状</h3>\n                    <p data-nodeid=\"10496\">\n                      在单体应用中，开发者可以通过简单的拦截器以及 Session\n                      机制对用户的访问进行控制和记录。但是，在目前微服务盛行的架构体系下，服务的数量在业务分解后急剧增加，其中每个微服务都需要对用户的行为进行认证和许可，明确当前访问用户的身份与权限级别。与此同时，整个系统可能还需对外提供一定的服务，比如第三方登录授权等。\n                    </p>\n                    <p data-nodeid=\"10497\">\n                      在这种情况下，如果要求每个微服务都实现各自的用户信息管理系统，那不仅增加了开发的工作量，而且出错的概率也会大大增加。对此而言，统一的认证与授权就显得尤为必要和有效了。\n                    </p>\n                    <p data-nodeid=\"10498\">\n                      <strong data-nodeid=\"10780\"\n                        >目前主流的统一认证和授权方式有 OAuth2、分布式 Session\n                        和 JWT 等，其中又以 OAuth2\n                        方案使用最为广泛，已经成为当前授权的行业标准。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"10499\">\n                      由于统一认证与授权方案会将用户信息进行统一管理和使用，这就很可能出现系统性能瓶颈的问题，甚至在认证和授权服务宕机后，整个系统将无法正常运行。与此同时，整合当前系统中各个服务的用户信息管理系统也存在一定的难度，所以在实践时需要根据项目的现状理智选择统一认证与授权方案。\n                    </p>\n                    <p data-nodeid=\"10500\">\n                      常见的认证与授权方案有 OAuth2、分布式 Session 和 JWT\n                      等，下面我们就来分别介绍这 3\n                      种方案，看看这些方案是如何保障微服务安全的。\n                    </p>\n                    <h3 data-nodeid=\"10501\">当前行业授权标准 OAuth2</h3>\n                    <p data-nodeid=\"10502\">\n                      OAuth 协议目前已经发展到 OAuth2 版本，之前的 OAuth1\n                      由于不被 OAuth2\n                      兼容，且签名逻辑过于复杂和授权流程过于单一，所以这里我们就不过多讨论它。\n                    </p>\n                    <p data-nodeid=\"10503\">\n                      下面我们重点关注的是 OAuth2 认证流程，它是当前 Web\n                      应用中的主流授权流程。\n                    </p>\n                    <p data-nodeid=\"10504\">\n                      OAuth2 是当前授权的行业标准，其重点在于为 Web\n                      应用程序、桌面应用程序、移动设备以及室内设备的授权流程提供简单的客户端开发方式。它为第三方应用提供对\n                      HTTP\n                      服务的有限访问，既可以是资源拥有者通过授权允许第三方应用获取\n                      HTTP 服务，也可以是第三方应用以自己的名义获取访问权限。\n                    </p>\n                    <p data-nodeid=\"10505\">\n                      接下来我们会首先介绍 OAuth2 协议的参与角色，然后阐述\n                      OAuth2 协议认证授权的基本流程，最后再对 OAuth2\n                      中客户端授权类型进行讲解。\n                    </p>\n                    <h4 data-nodeid=\"10506\">1. 角色</h4>\n                    <p data-nodeid=\"12119\">\n                      OAuth2 中主要分为了 4 种角色，如下表所示：\n                    </p>\n                    <table data-nodeid=\"27607\">\n                      <thead data-nodeid=\"27608\">\n                        <tr data-nodeid=\"27609\">\n                          <th data-org-content=\"**角色**\" data-nodeid=\"27611\">\n                            <strong data-nodeid=\"27649\">角色</strong>\n                          </th>\n                          <th\n                            data-org-content=\"**中文名称**\"\n                            data-nodeid=\"27612\"\n                          >\n                            <strong data-nodeid=\"27653\">中文名称</strong>\n                          </th>\n                          <th\n                            data-org-content=\"**说明**\"\n                            data-nodeid=\"27613\"\n                            class=\"\"\n                          >\n                            <strong data-nodeid=\"27657\">说明</strong>\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody data-nodeid=\"27617\">\n                        <tr data-nodeid=\"27618\">\n                          <td\n                            data-org-content=\"resource owner\"\n                            data-nodeid=\"27619\"\n                          >\n                            resource owner\n                          </td>\n                          <td data-org-content=\"资源所有者\" data-nodeid=\"27620\">\n                            资源所有者\n                          </td>\n                          <td\n                            data-org-content=\"是能够对受保护的资源授予访问权限的实体。可以是一个用户，这时被称为 end-user。\"\n                            data-nodeid=\"27621\"\n                          >\n                            是能够对受保护的资源授予访问权限的实体。可以是一个用户，这时被称为\n                            end-user。\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27625\">\n                          <td data-org-content=\"client\" data-nodeid=\"27626\">\n                            client\n                          </td>\n                          <td data-org-content=\"客户端\" data-nodeid=\"27627\">\n                            客户端\n                          </td>\n                          <td\n                            data-org-content=\"持有资源所有者的授权，代表资源所有者对受保护资源进行访问。\"\n                            data-nodeid=\"27628\"\n                          >\n                            持有资源所有者的授权，代表资源所有者对受保护资源进行访问。\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27632\">\n                          <td\n                            data-org-content=\"resource server\"\n                            data-nodeid=\"27633\"\n                          >\n                            resource server\n                          </td>\n                          <td data-org-content=\"资源服务器\" data-nodeid=\"27634\">\n                            资源服务器\n                          </td>\n                          <td\n                            data-org-content=\"持有受保护的资源，允许持有访问令牌的请求访问受保护资源。\"\n                            data-nodeid=\"27635\"\n                          >\n                            持有受保护的资源，允许持有访问令牌的请求访问受保护资源。\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"27639\">\n                          <td\n                            data-org-content=\"authorization server\"\n                            data-nodeid=\"27640\"\n                          >\n                            authorization server\n                          </td>\n                          <td data-org-content=\"授权服务器\" data-nodeid=\"27641\">\n                            授权服务器\n                          </td>\n                          <td\n                            data-org-content=\"对资源所有者的授权进行认证，成功后向客户端发送访问令牌。\"\n                            data-nodeid=\"27642\"\n                          >\n                            对资源所有者的授权进行认证，成功后向客户端发送访问令牌。\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n\n                    <p data-nodeid=\"10551\">\n                      在多数情况下，资源服务器和授权服务器是合二为一的：在授权交互时是授权服务器，在请求资源交互时是资源服务器。当授权服务器是单独的实体时，它可以发出被多个资源服务器接受的访问令牌。\n                    </p>\n                    <h4 data-nodeid=\"10552\">2. 协议流程</h4>\n                    <p data-nodeid=\"10553\">\n                      我们来看一张 OAuth2 的流程图，如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">  \t +--------+                               +---------------+\n</div></li><li><div class=\"code-word\">     |        |--(<span class=\"hljs-number\">1</span>)- Authorization Request -&gt;|   Resource    |\n</div></li><li><div class=\"code-word\">     |        |                               |     Owner     |\n</div></li><li><div class=\"code-word\">     |        |&lt;-(<span class=\"hljs-number\">2</span>)-- Authorization Grant ---|               |\n</div></li><li><div class=\"code-word\">     |        |                               +---------------+\n</div></li><li><div class=\"code-word\">     |        |\n</div></li><li><div class=\"code-word\">     |        |                               +---------------+\n</div></li><li><div class=\"code-word\">     |        |--(<span class=\"hljs-number\">3</span>)-- Authorization Grant --&gt;| Authorization |\n</div></li><li><div class=\"code-word\">     | Client |                               |     Server    |\n</div></li><li><div class=\"code-word\">     |        |&lt;-(<span class=\"hljs-number\">4</span>)----- Access Token -------|               |\n</div></li><li><div class=\"code-word\">     |        |                               +---------------+\n</div></li><li><div class=\"code-word\">     |        |\n</div></li><li><div class=\"code-word\">     |        |                               +---------------+\n</div></li><li><div class=\"code-word\">     |        |--(<span class=\"hljs-number\">5</span>)----- Access Token ------&gt;|    Resource   |\n</div></li><li><div class=\"code-word\">     |        |                               |     Server    |\n</div></li><li><div class=\"code-word\">     |        |&lt;-(<span class=\"hljs-number\">6</span>)--- Protected Resource ---|               |\n</div></li><li><div class=\"code-word\">     +--------+                               +---------------+\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"10555\">\n                      OAuth2 角色的抽象交互流程图<br />\n                      这是一张关于 OAuth2 角色的抽象交互流程图，主要包含以下 6\n                      个步骤。\n                    </p>\n                    <ul data-nodeid=\"10556\">\n                      <li data-nodeid=\"10557\">\n                        <p data-nodeid=\"10558\">①客户端请求资源所有者的授权。</p>\n                      </li>\n                      <li data-nodeid=\"10559\">\n                        <p data-nodeid=\"10560\">\n                          ②资源所有者同意授权，返回授权许可（Authorization\n                          Grant），这代表了资源所有者的授权凭证。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10561\">\n                        <p data-nodeid=\"10562\">\n                          ③客户端携带授权许可要求授权服务器进行认证，请求访问令牌。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10563\">\n                        <p data-nodeid=\"10564\">\n                          ④授权服务器会同时验证客户端身份和认证客户端携带的授权许可的有效性，如果有效，则返回访问令牌。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10565\">\n                        <p data-nodeid=\"10566\">\n                          ⑤客户端获取到授权服务器颁发的访问令牌后，就可以携带访问令牌访问资源服务器中受保护的资源。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10567\">\n                        <p data-nodeid=\"10568\">\n                          ⑥资源服务器验证访问令牌，如果有效，则接受访问请求，返回受保护资源。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"10569\">3. 客户端授权类型</h4>\n                    <p data-nodeid=\"10570\">\n                      客户端只有在获取到资源所有者的授权许可后，才能向授权服务器请求访问令牌。OAuth2\n                      默认定义了 4\n                      种授权类型，当然也提供了用于定义额外的授权类型的扩展机制。默认的\n                      4 种授权类型如下表所示：\n                    </p>\n                    <p data-nodeid=\"18177\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5B/A5/CgqCHl9_zxuAKzwlAACE5_eVSis959.png\"\n                        alt=\"1.png\"\n                        data-nodeid=\"18180\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"17115\">\n                      其中<strong data-nodeid=\"17124\"\n                        >经常使用的授权类型为授权码类型和密码类型</strong\n                      >。简化类型是由于省略了授权码类型流程中的“授权码”步骤而得名；而客户端类型是客户端以自己的名义直接向授权服务器请求访问令牌，不需要用户授权即可请求访问令牌。\n                    </p>\n\n                    <p data-nodeid=\"10604\">\n                      我们接下来就只对常用的授权码类型和密码类型的流程做详细的介绍。\n                    </p>\n                    <p data-nodeid=\"10605\">\n                      <strong data-nodeid=\"10860\">（1）授权码类型</strong>\n                    </p>\n                    <p data-nodeid=\"10606\">\n                      授权码类型是 OAuth2\n                      默认授权类型中功能最完整、流程最严密的授权类型。授权码类型要求客户端能够与资源所有者的代理（如\n                      Web\n                      浏览器等）进行交互，它通过重定向资源所有者的代理，让资源所有者与授权服务器直接交互授权，避免资源所有者的信息被泄漏，并将授权通过后生成的授权码以重定向的方式返回给客户端。\n                    </p>\n                    <p data-nodeid=\"10607\">其授权流程图如下图所示：</p>\n                    <p data-nodeid=\"20593\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5B/A5/CgqCHl9_z1qAO1lbAACN7fUBGB4934.png\"\n                        alt=\"2.png\"\n                        data-nodeid=\"20596\"\n                      />\n                    </p>\n\n                    <div data-nodeid=\"19621\">\n                      <p style=\"text-align: center\">授权码类型流程图</p>\n                    </div>\n\n                    <p data-nodeid=\"10610\">\n                      结合该流程图，我们来分析一下授权码类型的整个工作流程。\n                    </p>\n                    <ul data-nodeid=\"10611\">\n                      <li data-nodeid=\"10612\">\n                        <p data-nodeid=\"10613\">\n                          ①客户端将资源所有者的代理重定向到授权服务器的端点，客户端会在重定向的地址中提交自身的客户端标识、请求范围、本地状态和用于接收授权码的重定向地址等信息。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10614\">\n                        <p data-nodeid=\"10615\">\n                          ②资源所有者通过代理与授权服务器直接交互，授权服务器认证资源所有者的身份，并确认资源所有者同意还是拒绝访问授权。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10616\">\n                        <p data-nodeid=\"10617\">\n                          ③在资源所有者同意授予客户端访问权限后，授权服务器会回调客户端在第一步中提交的重定向地址，并在重定向地址中携带生成的授权码和原先提交的本地状态。否则直接返回资源所有者拒绝授权。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10618\">\n                        <p data-nodeid=\"10619\">\n                          ④获取到授权码的客户端可以携带授权码和用于获取授权码的重定向地址，向授权服务器请求访问令牌。授权服务器会对客户端身份和授权码同时进行认证。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10620\">\n                        <p data-nodeid=\"10621\">\n                          ⑤授权服务器认证客户端身份和授权码，并对客户端提交的重定向地址和获取授权码的重定向地址进行匹配。如果信息一致，则返回访问令牌，并有可能同时返回刷新令牌。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"10622\">\n                      <strong data-nodeid=\"10875\">（2）密码类型</strong>\n                    </p>\n                    <p data-nodeid=\"10623\">\n                      在密码类型中，资源所有者会将自身的密码凭证直接交予客户端，客户端通过自己持有的信息直接从授权服务器获取授权。在这种情况下，需要资源所有者对客户端高度信任，同时客户端不允许保存密码凭证。这种授权类型适用于能够获取资源所有者凭证（如用户名和密码）的客户端。授权流程图如下所示：\n                    </p>\n                    <p data-nodeid=\"23009\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5B/A6/CgqCHl9_z2aANQVaAACfSJf6Wpc520.png\"\n                        alt=\"3.png\"\n                        data-nodeid=\"23012\"\n                      />\n                    </p>\n\n                    <div data-nodeid=\"22037\">\n                      <p style=\"text-align: center\">密码类型授权流程图</p>\n                    </div>\n\n                    <p data-nodeid=\"10626\">\n                      同样，我们还结合授权流程图来分析一下密码类型的授权流程。\n                    </p>\n                    <ul data-nodeid=\"10627\">\n                      <li data-nodeid=\"10628\">\n                        <p data-nodeid=\"10629\">\n                          ①资源所有者向客户端提供其用户名和密码等凭证。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10630\">\n                        <p data-nodeid=\"10631\">\n                          ②客户端携带资源所有者的凭证（用户名和密码），向授权服务器请求访问令牌。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10632\">\n                        <p data-nodeid=\"10633\">\n                          ③授权服务器认证客户端身份和携带的资源所有者凭证，如果有效，则返回访问令牌，并可能同时返回刷新令牌。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"10634\">\n                      <strong data-nodeid=\"10887\">（3）刷新令牌</strong>\n                    </p>\n                    <p data-nodeid=\"10635\">\n                      以上两种类型中，你可能也注意到了，响应结果中可能会同时返回刷新令牌。那什么是刷新令牌呢？刷新令牌是授权服务器提供给客户端在访问令牌失效时重新向授权服务器申请访问令牌的凭证。\n                    </p>\n                    <p data-nodeid=\"10636\">\n                      客户端从授权服务器中获取的访问令牌一般是具备时效性的，在访问令牌过期的情况下，持有有效用户凭证的客户端可以再次向授权服务器请求访问令牌，而持有刷新令牌的客户端也可以向授权服务器请求新的访问令牌，也就是令牌刷新操作。\n                    </p>\n                    <h3 data-nodeid=\"10637\">数据共享的分布式 Session</h3>\n                    <p data-nodeid=\"10638\">\n                      在 Web 服务盛行的当下，我们一般会通过 Session 和 Cookie\n                      来维护访问用户的登录状态。同时，随着分布式系统的快速发展，原本在单个服务器上的\n                      Session 管理也逐渐发展为分布式 Session 管理。\n                    </p>\n                    <p data-nodeid=\"10639\">\n                      接下来我们就来介绍会话跟踪技术 Session 和\n                      Cookie，以及分布式 Session 的作用和相关实现方案。\n                    </p>\n                    <h4 data-nodeid=\"10640\">\n                      1. 会话跟踪技术 Session 和 Cookie\n                    </h4>\n                    <p data-nodeid=\"10641\">\n                      会话是指用户登录网站后的一系列操作，比如查看列表、收藏商品和购买商品等。一次会话中一般会存在多次的\n                      HTTP 请求。而 HTTP\n                      协议作为一种无状态协议，在连接关闭之后，服务器就无法继续跟踪用户的会话，从而丢失了用户操作的上下文信息。\n                    </p>\n                    <p data-nodeid=\"10642\">\n                      对此，我们需要会话跟踪技术管理和跟踪用户的整个会话，在多次\n                      HTTP 操作中将用户与用户关联起来。而<strong\n                        data-nodeid=\"10902\"\n                        >Session 和 Cookie 就是最常用的会话跟踪技术</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"10643\">\n                      Session 和 Cookie\n                      是一种记录用户状态信息的机制，它们分别被保存在服务器端和客户端浏览器中。当客户端浏览器访问服务器的时候，服务器会把当前的用户信息以某种形式记录在服务器上，这就是\n                      Session。客户端浏览器在访问时可以通过 Session\n                      查找该用户的状态。\n                    </p>\n                    <p data-nodeid=\"10644\">\n                      Cookie\n                      实际上是在客户端浏览器请求服务器时，如果服务器需要记录当前用户的状态，就会在响应中向客户端浏览器颁发一小段的文本信息用于标记当前的用户状态，这段文本信息与服务器中的\n                      Session 一一对应，被称为\n                      Cookie。当浏览器再次请求该网站时，会把请求的网址连同该\n                      Cookie 提交给服务器。服务器根据 Cookie 中的信息查找\n                      Session，从 Session\n                      中获取用户信息，以此来辨认用户状态。服务器还可以根据需要修改\n                      Cookie 中的内容。\n                    </p>\n                    <p data-nodeid=\"10645\">\n                      简单来说，<strong data-nodeid=\"10910\"\n                        >Cookie 被用在客户端中记录用户身份信息，而 Session\n                        被用在服务器端中记录用户身份信息</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"10646\">2. 分布式 Session 的作用</h4>\n                    <p data-nodeid=\"10647\">\n                      在单体应用时代，应用部署在同一个 Web\n                      服务器上，可以使用同一个 Web 服务器对 Session\n                      进行管理。随着系统架构的演进，在分布式架构或者微服务架构中，会存在多个\n                      Web\n                      服务器，用户的请求根据负载均衡转发到不同的机器上，这就有可能导致\n                      Session 丢失的情况出现。\n                    </p>\n                    <p data-nodeid=\"10648\">\n                      比如，一开始用户在 A\n                      机器上登录并发起请求，后来由于负载均衡请求被转发到 B\n                      机器上，那这时会出现什么问题呢？因为用户的 Session 保存在\n                      A 机器的 Web 服务器上，在 B 机器的 Web\n                      服务器上是无法查找到的，所以导致 B\n                      机器认为用户没有登录，返回了用户未登录的异常，引起了用户的费解。\n                    </p>\n                    <p data-nodeid=\"10649\">\n                      因此，在分布式架构或微服务架构下，就需要保证在一个 Web\n                      服务器上保存 Session 后，其他 Web 服务器可以同步或共享这个\n                      Session，达到用户一次登录、多处可访问的效果。这就是分布式\n                      Session 要做的事。\n                    </p>\n                    <h4 data-nodeid=\"10650\">3. 分布式 Session 的实现方案</h4>\n                    <p data-nodeid=\"24986\" class=\"\">\n                      分布式 Session 有如下几种实现方式，如下表所示：<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5B/A5/CgqCHl9_zyaAXi9uAAMQlnqNtDg368.png\"\n                        alt=\"4.png\"\n                        data-nodeid=\"25055\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"10717\">\n                      综合对比这 4 种方式，相对来说，<strong data-nodeid=\"10965\"\n                        >集中式管理更加可靠，也是应用最广泛的。</strong\n                      >\n                    </p>\n                    <h3 data-nodeid=\"10718\">安全传输对象 JWT</h3>\n                    <p data-nodeid=\"10719\">\n                      JWT（JSON Web Token）作为一个开放的标准，通过<strong\n                        data-nodeid=\"10976\"\n                        >紧凑</strong\n                      >（快速传输，体积小）并且<strong data-nodeid=\"10977\"\n                        >自包含</strong\n                      >（有效负载中包含用户所需的所有信息，避免了对数据库的多次查询）的方式，定义了用于在各方之间发送的安全\n                      JSON 对象。\n                    </p>\n                    <p data-nodeid=\"10720\">\n                      JWT 可以很好地充当 OAuth2 的访问令牌和刷新令牌的载体，这是\n                      Web\n                      双方之间进行安全传输信息的良好方式。当只有授权服务器持有签发和验证\n                      JWT 的 secret 时，也就只有授权服务器能验证 JWT\n                      的有效性以及签发带有签名的 JWT，这就保证了以 JWT 为载体的\n                      Token 的有效性和安全性。\n                    </p>\n                    <p data-nodeid=\"10721\">JWT 格式一般如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiY2FuZyB3dSIsImV4cCI6MTUxODA1MTE1NywidXNlcklkIjoiMTIzNDU2In0.IV4XZ0y0nMpmMX9orv0gqsEMOxXXNQOE680CKkkPQcs\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"10723\">\n                      它由 3\n                      部分组成，每部分通过“.”分隔开，分别是：Header（头部）、Payload（有效负载）和\n                    </p>\n                    <p data-nodeid=\"10724\">Signature（签名）。</p>\n                    <p data-nodeid=\"10725\">\n                      接下来我们就对每一部分进行详细的介绍。\n                    </p>\n                    <h4 data-nodeid=\"10726\">1. Header（头部）</h4>\n                    <p data-nodeid=\"10727\">头部通常由两部分组成。</p>\n                    <ul data-nodeid=\"10728\">\n                      <li data-nodeid=\"10729\">\n                        <p data-nodeid=\"10730\">typ：类型，一般为 JWT。</p>\n                      </li>\n                      <li data-nodeid=\"10731\">\n                        <p data-nodeid=\"10732\">\n                          alg：加密算法，通常是 HMAC SHA256 或者 RSA。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"10733\">一个简单的头部例子如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"alg\"</span>: <span class=\"hljs-string\">\"HS256\"</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"typ\"</span>: <span class=\"hljs-string\">\"JWT\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"10735\">\n                      这部分 JSON 数据会使用 Base64Url 编码后，用于构成 JWT\n                      的第一部分，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"10737\">2. Playload（有效负载）</h4>\n                    <p data-nodeid=\"10738\">\n                      有效负载是 JWT\n                      的第二部分，是用来携带有效信息的载体，主要是关于用户实体和附加元数据的声明，由以下\n                      3 部分组成。\n                    </p>\n                    <ul data-nodeid=\"10739\">\n                      <li data-nodeid=\"10740\">\n                        <p data-nodeid=\"10741\">\n                          Registered claims：注册声明。它是 JWT\n                          预定的声明，但通常不要求强制使用。主要包含 iss（JWT\n                          签发者）、exp（JWT 过期时间）、sub（JWT\n                          面向的用户）、aud（接受 JWT 的一方）等属性信息。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10742\">\n                        <p data-nodeid=\"10743\">\n                          Public\n                          claims：公开声明。在公开声明中可以添加任何信息，一般是用户信息或者业务扩展信息等。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"10744\">\n                        <p data-nodeid=\"10745\">\n                          Private claims：私有声明。它是由 JWT\n                          提供者和消费者共同定义的声明，既不属于注册声明也不属于公开声明。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"10746\">\n                      Base64\n                      对称解密的方式很容易使得加密信息被还原，所以一般不建议在\n                      Payload 中添加任何的敏感信息。\n                    </p>\n                    <p data-nodeid=\"10747\">一个简单的有效负载例子，如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"sub\"</span>: <span class=\"hljs-string\">\"1234567890\"</span>,\n</div></li><li><div class=\"code-word\">  \t<span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"xuan\"</span>,\n</div></li><li><div class=\"code-word\">  \t<span class=\"hljs-string\">\"exp\"</span>: <span class=\"hljs-number\">1518051157</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"10749\">\n                      这部分 JSON 会使用 Base64Url 编码后，用于构成 JWT\n                      的第二部分，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Inh1YW4iLCJleHAiOjE1MTgwNTExNTd9\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"10751\">3. Signature（签名）</h4>\n                    <p data-nodeid=\"10752\">\n                      要创建签名，就必须要有被编码后的头部、被编码后的有效负载以及一个\n                      secret，最后通过在头部定义的加密算法 alg\n                      加密生成签名。生成签名的伪代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">HMACSHA256(\n</div></li><li><div class=\"code-word\">  base64UrlEncode(header) + <span class=\"hljs-string\">\".\"</span> +\n</div></li><li><div class=\"code-word\">  base64UrlEncode(payload),\n</div></li><li><div class=\"code-word\">  secret)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"10754\">\n                      上述伪代码中使用的加密算法为 HMACSHA256。Secret\n                      作为签发密钥，用于验证 JWT 以及签发\n                      JWT，所以只能由服务端持有，不该泄漏出去。\n                    </p>\n                    <p data-nodeid=\"10755\">\n                      一个简单的签名如下，这就是 JWT 的第三部分。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">X36pDQoYydHv7KDCiltTBKcQbt-iIT-jFgmUjkTSCxE\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"10757\">\n                      如上所述的三个部分通过“.”分割，就组成最终的 JWT。\n                    </p>\n                    <h3 data-nodeid=\"10758\">小结</h3>\n                    <p data-nodeid=\"10759\">\n                      在本课时中，我们围绕统一认证与授权如何去保障服务安全，依次介绍了\n                      OAuth2、分布式 Session 和 JWT 等认证与授权方案，这其中以\n                      OAuth2\n                      方案最为标准和完备。希望通过本课时的学习，能够帮助你建立对微服务架构下统一认证和授权方案的宏观认知。\n                    </p>\n                    <p data-nodeid=\"10760\">\n                      在接下来的课时中，我们将采用 Go 语言，并基于OAuth2 协议和\n                      JWT实现一个简单的认证和授权系统，让你熟练掌握如何在微服务架构中对用户的资源进行保护。\n                    </p>\n                    <p data-nodeid=\"10761\" class=\"\">\n                      关于微服务的认证与授权，你还有什么其他选型的方案？欢迎你在留言区和我分享。\n                    </p>\n            "}