{"title":"16 | React Hook 的使用限制有哪些？","context":"\n                    <p data-nodeid=\"46779\" class=\"\">\n                      由于 Hooks 书写方式更加简便，总体上提升了开发效率，所以在\n                      React 面试中经常被问到，其中 Hooks\n                      的使用限制就是不可避开的点，能把这个问题说明白，你不仅需要对知识点足够清楚，还需要有一定的答题技巧，这一讲，我们就来讲解“React\n                      Hooks 的使用限制有哪些”。\n                    </p>\n                    <h3 data-nodeid=\"46780\">破题</h3>\n                    <p data-nodeid=\"46781\">\n                      React 在 2013 ~ 2018\n                      年走过了它的第一个阶段。毋庸置疑，React\n                      在这个阶段非常成功，为前端开发引入了丰富的概念，也启发了无数的开发者。React\n                      团队作为前端前沿开发者，只是维持现状、修修补补并不能满足他们继续探索的诉求，在他们的构想中，React\n                      Hooks 是面向下一个五年的探索。\n                    </p>\n                    <p data-nodeid=\"46782\">\n                      也正因为 Hooks 在 React\n                      中备受关注的地位，所以成为面试中绕不开的点，最常见的问题就是它的使用限制有哪些？Hooks\n                      的使用限制对于每一个有使用经验的开发者而言，肯定是非常清楚的。但你需要警惕，问题如果是\n                      What，那么一定伴随着 Why 和 How。这也是面试中常见的 3W\n                      套路：先问你是什么，再问为什么，最后是怎么处理。这同样是对应聘者思维模式的考察，看你是否具备工程化思维，也就是你只是\n                      API\n                      的搬运工，还是真的从工程架构的角度思考过，想过完备的方案。\n                    </p>\n                    <p data-nodeid=\"46783\">\n                      “是什么”很好解释，列举一二三即可。但在讲“为什么”的时候就需要一个完整的思路。在第02\n                      讲提到，我们需要理解 React\n                      开发团队在设计相关功能时，它的目标与初衷是什么，希望解决什么问题，为什么选用这种方案，以及该方案的弊端，或者说限制，这些就是我们的“为什么”。做工程是一个不断妥协的过程，永远不可能有一个完美无缺的设计。现实生活中的工程设计更像断臂维纳斯，既有遗憾也有缺陷，这就形成了<strong\n                        data-nodeid=\"46866\"\n                        >妥协点</strong\n                      >。但妥协点就是我们的答题点。最后的“How”就需要我们回答在妥协点不能被解决的情况下，如何有效率地规避它、绕开它。\n                    </p>\n                    <h3 data-nodeid=\"46784\">审题</h3>\n                    <p data-nodeid=\"46785\">\n                      经过上面的思考，再系统化地整理思路，就能得到一个完整的答题框架了。\n                    </p>\n                    <ul data-nodeid=\"46786\">\n                      <li data-nodeid=\"46787\">\n                        <p data-nodeid=\"46788\">是什么：列举使用限制有哪些。</p>\n                      </li>\n                      <li data-nodeid=\"46789\">\n                        <p data-nodeid=\"46790\">\n                          为什么：围绕三个点论述，分别是 Hooks\n                          的设计初衷、要解决的问题、设计的方案原理。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"46791\">\n                        <p data-nodeid=\"46792\">\n                          怎么做：讲述如何规避使用限制会引起的问题。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"46793\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/06/8E/Cip5yGAFRPOAeuOVAABxuxywIJg368.png\"\n                        alt=\"React Hooks 使用限制.png\"\n                        data-nodeid=\"46874\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"46794\">入手</h3>\n                    <p data-nodeid=\"46795\">\n                      虽然答题的思路是 What → Why →\n                      How，但为了方便理解，我们还是从 Hooks 的设计初衷说起。\n                    </p>\n                    <h4 data-nodeid=\"46796\">初衷与问题</h4>\n                    <p data-nodeid=\"46797\">\n                      正如开篇所说，React\n                      发展的第五个年头，也正是寻找下一个方向的时候。其实早在\n                      2016 年，React 团队就开启了个叫\n                      <a\n                        href=\"https://github.com/reactjs/react-future\"\n                        data-nodeid=\"46881\"\n                        >React Future</a\n                      >\n                      的项目，试图探索未来的方向，里面提到了一个概念叫<strong\n                        data-nodeid=\"46887\"\n                        >Stateful Functions</strong\n                      >。Stateful Functions 的目的就是通过引入 state\n                      拓宽函数组件的使用边界，但这个方案最终没有成功落地。回到今天来看，React\n                      团队以另外一个方式给出了答案——Hooks。React 团队给的第一个\n                      Hooks 使用案例，也是在函数组件中使用\n                      state，使用状态管理。那为什么要这样做呢？\n                    </p>\n                    <p data-nodeid=\"46798\">\n                      React\n                      团队在过去编写和维护数以万计组件的五年时间里，他们遇到了这些问题。\n                    </p>\n                    <p data-nodeid=\"46799\">\n                      （1）<strong data-nodeid=\"46893\"\n                        >组件之间难以复用状态逻辑</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"46800\">\n                      是什么意思呢？在第 05\n                      讲中提到高阶组件复用逻辑时，给了一个检查登录的案例，在这个案例中就只做了一件事，那就是把<strong\n                        data-nodeid=\"46903\"\n                        >登录判断逻辑抽取出来</strong\n                      >，放置到 checkLogin\n                      组件中。组件之间的状态逻辑就通过这样一个高阶组件共享出来了。如果涉及的场景更为复杂，多级组件需要共享状态，就需要使用\n                      Redux 或者 Mobx 来解决了。这是每一个 React\n                      开发者都会遇到的问题，所以最好考虑<strong\n                        data-nodeid=\"46904\"\n                        >从 React 层提供 API</strong\n                      >来解决。如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> isLogin = () =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> !!localStorage.getItem(<span class=\"hljs-string\">'token'</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> checkLogin = (WrappedComponent) =&gt; {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span> (props) =&gt; {\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-keyword\">return</span> isLogin() ? &lt;WrappedComponent {...props} /&gt; : &lt;LoginPage /&gt;;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46802\">\n                      （2）<strong data-nodeid=\"46909\"\n                        >复杂的组件变得难以理解</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"46803\">\n                      这一条主要指出生命周期函数没能提供最佳的代码编程实践范式。这点相对来说更好理解一些，比如\n                      componentDidMount，在下面的案例中变成了一个大杂烩，我们在这里设置页面标题、订阅聊天状态信息、拉取用户信息、拉取按钮权限信息，ComponentDidMount\n                      函数内部逻辑随意堆砌，内容杂乱，缺乏专注性，往往还会对上下文产生依赖。如果你在\n                      componentDidMount 使用 ChatAPI.subscribe，那么你就需要在\n                      componentWillUnmount 中去 unsubscribe 它。\n                    </p>\n                    <p data-nodeid=\"46804\">\n                      订阅与取消订阅并没有直接关联在一起，而是通过生命周期函数去使用，这非常的反模式，也就导致组件难以分解，且到处都是状态逻辑。当然，之前提到过的状态管理框架可以解决类似问题，但它也是有成本的。还是第一条中的那句话“既然是每个人都会遇到的问题，那就应该考虑从\n                      React 层提供 API 来解决”。如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Example</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  componentDidMount() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 设置页面标题</span>\n</div></li><li><div class=\"code-word\">    document.title = \\`User Profile\\`;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 订阅聊天状态信息</span>\n</div></li><li><div class=\"code-word\">    ChatAPI.subscribeToFriendStatus(\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.props.friend.id,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.handleStatusChange\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 拉取用户信息</span>\n</div></li><li><div class=\"code-word\">    fetchUserProfile()\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 拉取按钮权限信息</span>\n</div></li><li><div class=\"code-word\">    fetchButtonAuthority()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  componentWillUnmount() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 取消订阅</span>\n</div></li><li><div class=\"code-word\">    ChatAPI.unsubscribeFromFriendStatus(\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.props.friend.id,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.handleStatusChange\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46806\">\n                      （3）<strong data-nodeid=\"46916\"\n                        >人和机器都容易混淆类</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"46807\">\n                      类容易令初学者，甚至熟手犯错，还会给机器造成困扰：\n                    </p>\n                    <ul data-nodeid=\"46808\">\n                      <li data-nodeid=\"46809\">\n                        <p data-nodeid=\"46810\">\n                          this 首当其冲，对于这个问题的经典案例就是第 04\n                          讲中提到的<strong data-nodeid=\"46923\">值捕获</strong\n                          >，这里就不再赘述了；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"46811\">\n                        <p data-nodeid=\"46812\">\n                          还有一个与 this 相关的问题就是用 bind\n                          函数包一下来绑定事件。虽然现在我们都通过了类属性的方案，也可以使用\n                          Babel\n                          插件提前开发了，但整个提案仍然是草案的阶段，还不稳定；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"46813\">\n                        <p data-nodeid=\"46814\">\n                          最后一个问题是在类中难以做编译优化，React\n                          团队一直在做前端编译层的优化工作，比如常数折叠（constant\n                          folding）、内联展开（inline\n                          expansion）及死码删除（Dead code elimination）等。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"46815\">\n                      不光人难以优化类，机器也难。这也就导致下一步探索工作难以有新的进展。所以基于以上的原因，选择以函数组件为基础进行设计。\n                    </p>\n                    <h4 data-nodeid=\"46816\">方案原理</h4>\n                    <p data-nodeid=\"46817\">\n                      不妨看一看 Hooks 最终用起来的样子。通过在函数中调用\n                      useState\n                      会返回当前状态与更新状态的函数。就像下面的案例一样，count\n                      的初始值是 0，然后，通过 useState\n                      赋值初始值，然后获取当前状态 count 与函数\n                      setCount。那么在点击按钮时调用 setCount，修改 count\n                      的值。本质上 state hook 替代了类组件中 setState\n                      的作用。如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Example</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 声明一个新的状态变量，我们将其称为 \"count\" </span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>You clicked {count} times<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount(count + 1)}&gt;\n</div></li><li><div class=\"code-word\">        Click me\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46819\">\n                      这种写法颇有奇妙感。Rudi Yardley 在 2018 年的时候写过一篇\n                      《React hooks: not magic, just\n                      arrays》详细地阐释了它的设计原理，并通过一个案例来说明。在案例中\n                      RenderFunctionComponent 组件有两个 useState，分别用于修改\n                      firstName 与 lastName。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">RenderFunctionComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> [firstName, setFirstName] = useState(<span class=\"hljs-string\">\"Rudi\"</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> [lastName, setLastName] = useState(<span class=\"hljs-string\">\"Yardley\"</span>); \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\"> &lt;Button onClick={(</span>) =&gt;</span> setFirstName(<span class=\"hljs-string\">\"Fred\"</span>)}&gt;Fred&lt;/Button&gt; );&nbsp;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46821\">\n                      当初次渲染时，就会有两对 state 与 setter\n                      被放入数组中，其中第 0 个就是 FirstName 那组，第 1 个就是\n                      LastName 那组。如下图所示：\n                    </p>\n                    <p data-nodeid=\"46822\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/FC/CgqCHmABPPiAG3BtAAE77HQGy1U017.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"46933\"\n                      />\n                    </p>\n                    <p data-nodeid=\"46823\">\n                      那么在后续渲染中，也会保持这样一个规律获取对应的组。那这里就会产生一个问题：如果在\n                      if 条件中调用 useState\n                      会怎样呢？就会造成数组的取值错位，所以不能在 React\n                      的循环、条件或嵌套函数中调用 Hook。\n                    </p>\n                    <p data-nodeid=\"46824\">\n                      这里我们用数组来简化描述，实质上 React\n                      源码的实现是采用的<strong data-nodeid=\"46940\">链表</strong\n                      >。在整体设计结构上你会发现 Hooks\n                      的设计是贴近函数组件的，那么在类组件方面，为了未来的优化探索，Hooks\n                      直接选择了不支持，但 React\n                      并没有禁止两者混用，甚至鼓励两者混用。React\n                      团队并不希望我们使用 Hooks\n                      重写以前的类组件，那没有什么意义，而是希望在未来 Hooks\n                      变成主流的开发方式。\n                    </p>\n                    <p data-nodeid=\"46825\">\n                      从以上的分析中，我们可以得出两条使用限制：\n                    </p>\n                    <ul data-nodeid=\"46826\">\n                      <li data-nodeid=\"46827\">\n                        <p data-nodeid=\"46828\">\n                          不要在循环、条件或嵌套函数中调用 Hook；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"46829\">\n                        <p data-nodeid=\"46830\">\n                          在 React 的函数组件中调用 Hook。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"46831\">那我们应该如何合理处理它们呢？</p>\n                    <h4 data-nodeid=\"46832\">防范措施</h4>\n                    <p data-nodeid=\"46833\">\n                      因为 React\n                      的内在设计原理，所以我们不可能绕过限制规则，但可以在代码中禁止错误的使用方式。如何防范就很有意思了，我不止一次在面试中提问如何防范错误的使用方式，大部分应聘者都是讲自己遇到的错误经历，或者讲加强\n                      Code\n                      Review，加强人工检查，但是用这样的方式进行检查效率会很低。\n                    </p>\n                    <p data-nodeid=\"46834\">\n                      在前面的章节中，反复强调，工程化的东西最终应该落地到工具上，其实只需要在\n                      ESLint 中引入 eslint-plugin-react-hooks\n                      完成自动化检查就可以了。在处理代码编写方式的问题时，都应该优先想到从\n                      Lint 工具入手。\n                    </p>\n                    <h3 data-nodeid=\"46835\">答题</h3>\n                    <blockquote data-nodeid=\"46836\">\n                      <p data-nodeid=\"46837\">React Hooks 的限制主要有两条：</p>\n                      <ol data-nodeid=\"46838\">\n                        <li data-nodeid=\"46839\">\n                          <p data-nodeid=\"46840\">\n                            不要在循环、条件或嵌套函数中调用 Hook；\n                          </p>\n                        </li>\n                        <li data-nodeid=\"46841\">\n                          <p data-nodeid=\"46842\">\n                            在 React 的函数组件中调用 Hook。\n                          </p>\n                        </li>\n                      </ol>\n                      <p data-nodeid=\"46843\">\n                        那为什么会有这样的限制呢？就得从 Hooks 的设计说起。Hooks\n                        的设计初衷是为了改进 React\n                        组件的开发模式。在旧有的开发模式下遇到了三个问题。\n                      </p>\n                      <p data-nodeid=\"46844\">\n                        组件之间难以复用状态逻辑。过去常见的解决方案是高阶组件、render\n                        props 及状态管理框架。\n                      </p>\n                      <p data-nodeid=\"46845\">\n                        复杂的组件变得难以理解。生命周期函数与业务逻辑耦合太深，导致关联部分难以拆分。\n                      </p>\n                      <p data-nodeid=\"46846\">\n                        人和机器都很容易混淆类。常见的有 this 的问题，但在 React\n                        团队中还有类难以优化的问题，他们希望在编译优化层面做出一些改进。\n                      </p>\n                      <p data-nodeid=\"46847\">\n                        这三个问题在一定程度上阻碍了 React\n                        的后续发展，所以为了解决这三个问题，Hooks\n                        基于函数组件开始设计。然而第三个问题决定了 Hooks\n                        只支持函数组件。\n                      </p>\n                      <p data-nodeid=\"46848\">\n                        那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？因为\n                        Hooks\n                        的设计是基于数组实现。在调用时按顺序加入数组中，如果使用循环、条件或嵌套函数很有可能导致数组取值错位，执行错误的\n                        Hook。当然，实质上 React 的源码里不是数组，是链表。\n                      </p>\n                      <p data-nodeid=\"46849\">\n                        这些限制会在编码上造成一定程度的心智负担，新手可能会写错，为了避免这样的情况，可以引入\n                        ESLint 的 Hooks 检查插件进行预防。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"46850\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/06/8E/Cip5yGAFRQKANoZGAAGHTWta8TA980.png\"\n                        alt=\"React Hooks 使用限制总.png\"\n                        data-nodeid=\"46961\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"46851\">总结</h3>\n                    <p data-nodeid=\"46852\">\n                      本讲从 React Hooks\n                      的使用限制出发，不仅讨论了它的基本原理，还探讨了 React\n                      团队的后续规划与设计理想，你可以感受到 React\n                      团队满满的创造力。他们今年也没闲着，在 2020\n                      年圣诞节还提出了 React Server Components\n                      的草案。我只想说一句，真的学不动了。\n                    </p>\n                    <p data-nodeid=\"46853\">\n                      那么在本讲的内容基础上，我提出一个问题，就是 Hooks\n                      是如何关联对应组件的？你可以尝试自己找一下答案，欢迎在评论区中和我一起交流。\n                    </p>\n                    <p data-nodeid=\"47344\">\n                      在下一讲，我将介绍 React 中两个容易混淆的 API，到时见。\n                    </p>\n                    <hr data-nodeid=\"47345\" />\n                    <p data-nodeid=\"47346\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"47354\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image/M00/72/94/Ciqc1F_EZ0eANc6tAASyC72ZqWw643.png\"\n                          alt=\"Drawing 2.png\"\n                          data-nodeid=\"47353\"\n                      /></a>\n                    </p>\n                    <p data-nodeid=\"47347\">《大前端高薪训练营》</p>\n                    <p data-nodeid=\"47348\" class=\"te-preview-highlight\">\n                      对标阿里 P7 技术需求 + 每月大厂内推，6\n                      个月助你斩获名企高薪 Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"47359\"\n                        >点击链接</a\n                      >，快来领取！\n                    </p>\n            "}