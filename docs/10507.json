{"title":"06 | 队列：先进先出的线性表，如何实现增删查？","context":"\n                    <p data-nodeid=\"4475\" class=\"\">\n                      通过前面课时的学习，你学会了数据结构中可以灵活增删数据的线性表。在需要严格遵守数据处理顺序的场景下，我们对线性表予以限制，那么就得到了后进先出的数据结构，栈。与之对应的还有一种限制的线性表，它遵循先进先出的性质，这就是队列。这一课时我们就来学习队列的增删查。\n                    </p>\n                    <h3 data-nodeid=\"4476\">队列是什么</h3>\n                    <p data-nodeid=\"4477\">\n                      与栈相似，队列也是一种特殊的线性表，与线性表的不同之处也是体现在对数据的增和删的操作上。\n                    </p>\n                    <p data-nodeid=\"4478\">队列的特点是先进先出：</p>\n                    <ul data-nodeid=\"4479\">\n                      <li data-nodeid=\"4480\">\n                        <p data-nodeid=\"4481\">\n                          先进，表示队列的数据新增操作只能在末端进行，不允许在队列的中间某个结点后新增数据;\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4482\">\n                        <p data-nodeid=\"4483\">\n                          先出，队列的数据删除操作只能在始端进行，不允许在队列的中间某个结点后删除数据。也就是说队列的增和删的操作只能分别在这个队列的队尾和队头进行，如下图所示：\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"4484\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/17/D1/Ciqc1F7XiWKAYQ6uAABDmk0Wx98597.png\"\n                        alt=\"\"\n                        data-nodeid=\"4560\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4485\">\n                      与线性表、栈一样，队列也存在这两种存储方式，即顺序队列和链式队列：\n                    </p>\n                    <ul data-nodeid=\"4486\">\n                      <li data-nodeid=\"4487\">\n                        <p data-nodeid=\"4488\">\n                          顺序队列，依赖数组来实现，其中的数据在内存中也是顺序存储。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4489\">\n                        <p data-nodeid=\"4490\">\n                          而链式队列，则依赖链表来实现，其中的数据依赖每个结点的指针互联，在内存中并不是顺序存储。链式队列，实际上就是只能尾进头出的线性表的单链表。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"4491\">\n                      如下图所示，我们将队头指针指向链队列的头结点，队尾指针指向终端结点。不管是哪种实现方式，一个队列都依赖队头（front）和队尾（rear）两个指针进行唯一确定。\n                    </p>\n                    <p data-nodeid=\"4492\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/17/D1/Ciqc1F7XiWqAdDfGAABpdzpnaic772.png\"\n                        alt=\"\"\n                        data-nodeid=\"4566\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4493\">\n                      当队列为空时，front 和 rear 都指向头结点，如下图所示：\n                    </p>\n                    <p data-nodeid=\"4494\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/17/DD/CgqCHl7XiXGADFxLAAAzCTHg63s024.png\"\n                        alt=\"\"\n                        data-nodeid=\"4569\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"4495\">队列对于数据的增删查处理</h3>\n                    <p data-nodeid=\"4496\">\n                      队列从队头（front）删除元素，从队尾（rear）插入元素。对于一个顺序队列的数组来说，会设置一个\n                      front 指针来指向队头，并设置另一个 rear\n                      指针指向队尾。当我们不断进行插入删除操作时，头尾两个指针都会不断向后移动。\n                    </p>\n                    <p data-nodeid=\"4497\">\n                      为了实现一个有 k\n                      个元素的顺序存储的队列，我们需要建立一个长度比 k\n                      大的数组，以便把所有的队列元素存储在数组中。队列新增数据的操作，就是利用\n                      rear\n                      指针在队尾新增一个数据元素。这个过程不会影响其他数据，时间复杂度为\n                      O(1)，状态如下图所示：\n                    </p>\n                    <p data-nodeid=\"4498\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/17/D1/Ciqc1F7XiX2AcswVAAB59JjuOyQ221.png\"\n                        alt=\"\"\n                        data-nodeid=\"4574\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4499\">\n                      队列删除数据的操作与栈不同。队列元素出口在队列头部，即下标为\n                      0 的位置。当利用 front\n                      指针删除一个数据时，队列中剩余的元素都需要向前移动一个位置，以保证队列头部下标为\n                      0 的位置不为空，此时时间复杂度就变成 O(n)\n                      了，状态如下图所示：\n                    </p>\n                    <p data-nodeid=\"4500\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/17/D1/Ciqc1F7XiYOAdl0WAACJFu_x0pg197.png\"\n                        alt=\"\"\n                        data-nodeid=\"4577\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4501\">\n                      我们看到，front\n                      指针删除数据的操作引发了时间复杂度过高的问题，那么我们该如何解决呢？我们可以通过移动指针的方式来删除数据，这样就不需要移动剩余的数据了。但是，这样的操作，也可能会产生数组越界的问题。接下来，我们来详细讨论一下。\n                    </p>\n                    <p data-nodeid=\"4502\">\n                      我们一起来看一个利用顺序队列，持续新增数据和删除数据的例子。\n                    </p>\n                    <p data-nodeid=\"4503\">\n                      初始时，定义了长度为 5 的数组，front 指针和 rear\n                      指针相等，且都指向下标为 0\n                      的位置，队列为空队列。如下图所示：\n                    </p>\n                    <p data-nodeid=\"4504\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/17/DD/CgqCHl7XiYqAaxUUAACPoQw5EYI800.png\"\n                        alt=\"\"\n                        data-nodeid=\"4582\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4505\">\n                      当 A、B、C、D 四条数据加入队列后，front 依然指向下标为 0\n                      的位置，而 rear 则指向下标为 4 的位置。\n                    </p>\n                    <p data-nodeid=\"4506\">\n                      当 A 出队列时，front 指针指向下标为 1 的位置，rear\n                      保持不变。其后 E 加入队列，front 保持不变，rear\n                      则移动到了数组以外，如下图所示：\n                    </p>\n                    <p data-nodeid=\"4507\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/17/D1/Ciqc1F7XiZCAQFJlAACnK-UehMk790.png\"\n                        alt=\"\"\n                        data-nodeid=\"4586\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4508\">\n                      假设这个列队的总个数不超过 5\n                      个，但是目前继续接着入队，因为数组末尾元素已经被占用，再向后加，就会产生我们前面提到的数组越界问题。而实际上，我们列队的下标\n                      0 的地方还是空闲的，这就产生了一种 “假溢出” 的现象。\n                    </p>\n                    <p data-nodeid=\"4509\">\n                      这种问题在采用顺序存储的队列时，是一定要小心注意的。两个简单粗暴的解决方法就是：\n                    </p>\n                    <ul data-nodeid=\"4510\">\n                      <li data-nodeid=\"4511\">\n                        <p data-nodeid=\"4512\">\n                          不惜消耗 O(n) 的时间复杂度去移动数据；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4513\">\n                        <p data-nodeid=\"4514\">\n                          或者开辟足够大的内存空间确保数组不会越界。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"4515\">循环队列的数据操作</h4>\n                    <p data-nodeid=\"4516\">\n                      很显然上面的两个方法都不太友好。其实，数组越界问题可以通过队列的一个特殊变种来解决，叫作循环队列。\n                    </p>\n                    <p data-nodeid=\"4517\">\n                      循环队列进行新增数据元素操作时，首先判断队列是否为满。如果不满，则可以将新元素赋值给队尾，然后让\n                      rear 指针向后移动一个位置。如果已经排到队列最后的位置，则\n                      rea r指针重新指向头部。\n                    </p>\n                    <p data-nodeid=\"4518\">\n                      循环队列进行删除操作时，即出队列操作，需要判断队列是否为空，然后将队头元素赋值给返回值，front\n                      指针向后移一个位置。如果已经排到队列最后的位置，就把 front\n                      指针重新指向到头部。这个过程就好像钟表的指针转到了表盘的尾部\n                      12 点的位置后，又重新回到了表盘头部 1\n                      点钟的位置。这样就能在不开辟大量存储空间的前提下，不采用\n                      O(n) 的操作，也能通过移动数据来完成频繁的新增和删除数据。\n                    </p>\n                    <p data-nodeid=\"4519\">\n                      我们继续回到前面提到的例子中，如果是循环队列，rear\n                      指针就可以重新指向下标为 0 的位置，如下图所示：\n                    </p>\n                    <p data-nodeid=\"4520\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/17/D1/Ciqc1F7XiZiAPVGUAABIBxBMZIk624.png\"\n                        alt=\"\"\n                        data-nodeid=\"4597\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4521\">\n                      如果这时再新增了 F 进入队列，就可以放入在下标为 0\n                      的位置，rear 指针指向下标为 1 的位置。这时的 rear 和 front\n                      指针就会重合，指向下标为 1 的位置，如下图所示：\n                    </p>\n                    <p data-nodeid=\"4522\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/17/DD/CgqCHl7XiZ6AYibiAABIpfFet7k826.png\"\n                        alt=\"\"\n                        data-nodeid=\"4600\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4523\">\n                      此时，又会产生新的问题，即当队列为空时，有 front 指针和\n                      rear 指针相等。而现在的队列是满的，同样有 front 指针和\n                      rear\n                      指针相等。那么怎样判断队列到底是空还是满呢？常用的方法是，设置一个标志变量\n                      flag 来区别队列是空还是满。\n                    </p>\n                    <h4 data-nodeid=\"4524\">链式队列的数据操作</h4>\n                    <p data-nodeid=\"4525\">\n                      我们再看一下链式队列的数据操作。链式队列就是一个单链表，同时增加了\n                      front 指针和 rear\n                      指针。链式队列和单链表一样，通常会增加一个头结点，并另\n                      front 指针指向头结点。头结点不存储数据，只是用来辅助标识。\n                    </p>\n                    <p data-nodeid=\"4526\">\n                      链式队列进行新增数据操作时，将拥有数值 X 的新结点 s\n                      赋值给原队尾结点的后继，即 rear.next。然后把当前的 s\n                      设置为队尾结点，指针 rear 指向 s。如下图所示：\n                    </p>\n                    <p data-nodeid=\"4527\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/17/DE/CgqCHl7XixGAeHPTAABaaMqb6YY421.png\"\n                        alt=\"\"\n                        data-nodeid=\"4606\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4528\">\n                      当链式队列进行删除数据操作时，实际删除的是头结点的后继结点。这是因为头结点仅仅用来标识队列，并不存储数据。因此，出队列的操作，就需要找到头结点的后继，这就是要删除的结点。接着，让头结点指向要删除结点的后继。\n                    </p>\n                    <p data-nodeid=\"4529\">\n                      特别值得一提的是，如果这个链表除去头结点外只剩一个元素，那么删除仅剩的一个元素后，rear\n                      指针就变成野指针了。这时候，需要让 rear\n                      指针指向头结点。也许你前面会对头结点存在的意义产生怀疑，似乎没有它也不影响增删的操作。那么为何队列还特被强调要有头结点呢？\n                    </p>\n                    <p data-nodeid=\"4530\">\n                      这主要是为了防止删除最后一个有效数据结点后， front 指针和\n                      rear\n                      指针变成野指针，导致队列没有意义了。有了头结点后，哪怕队列为空，头结点依然存在，能让\n                      front 指针和 rear 指针依然有意义。\n                    </p>\n                    <p data-nodeid=\"4531\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/28/28/Ciqc1F74TT6AKxhrAADpi9uXKjg928.png\"\n                        alt=\"001.png\"\n                        data-nodeid=\"4612\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4532\">\n                      对于队列的查找操作，不管是顺序还是链式，队列都没有额外的改变。跟线性表一样，它也需要遍历整个队列来完成基于某些条件的数值查找。因此时间复杂度也是\n                      O(n)。\n                    </p>\n                    <h3 data-nodeid=\"4533\">队列的案例</h3>\n                    <p data-nodeid=\"4534\">\n                      我们来看一个关于用队列解决约瑟夫环问题。约瑟夫环是一个数学的应用问题，具体为，已知\n                      n 个人（以编号 1，2，3...n\n                      分别表示）围坐在一张圆桌周围。从编号为 k\n                      的人开始报数，数到 m 的那个人出列；他的下一个人又从 1\n                      开始报数，数到 m\n                      的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列。这个问题的输入变量就是\n                      n 和 m，即 n 个人和数到 m 的出列的人。输出的结果，就是 n\n                      个人出列的顺序。\n                    </p>\n                    <p data-nodeid=\"4535\">\n                      这个问题，用队列的方法实现是个不错的选择。它的结果就是出列的顺序，恰好满足队列对处理顺序敏感的前提。因此，求解方式也是基于队列的先进先出原则。解法如下：\n                    </p>\n                    <ol data-nodeid=\"4536\">\n                      <li data-nodeid=\"4537\">\n                        <p data-nodeid=\"4538\">\n                          先把所有人都放入循环队列中。注意这个循环队列的长度要大于或者等于\n                          n。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4539\">\n                        <p data-nodeid=\"4540\">\n                          从第一个人开始依次出队列，出队列一次则计数变量 i\n                          自增。如果 i 比 m 小，则还需要再入队列。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4541\">\n                        <p data-nodeid=\"4542\">\n                          直到i等于 m\n                          的人出队列时，就不用再让这个人进队列了。而是放入一个用来记录出队列顺序的数组中。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4543\">\n                        <p data-nodeid=\"4544\">\n                          直到数完 n 个人为止。当队列为空时，则表示队列中的 n\n                          个人都出队列了，这时结束队列循环，输出数组内记录的元素。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"4545\">\n                      至此，我们就通过循环队列解决了约瑟夫环问题。代码如下：\n                    </p>\n                    <p data-nodeid=\"4546\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/17/DE/CgqCHl7Xiv-AKgAeAEgzBtcbFjk481.gif\"\n                        alt=\"\"\n                        data-nodeid=\"4623\"\n                      />\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">    ring(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ring</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> m)</span> </span>{\n</div></li><li><div class=\"code-word\">    LinkedList&lt;Integer&gt; q = <span class=\"hljs-keyword\">new</span> LinkedList&lt;Integer&gt;();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i++) {\n</div></li><li><div class=\"code-word\">        q.add(i);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">2</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span> element = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (; i&lt;k; i++) {\n</div></li><li><div class=\"code-word\">        element = q.poll();\n</div></li><li><div class=\"code-word\">        q.add(element);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    i = <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (q.size() &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">        element = q.poll();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (i &lt; m) {\n</div></li><li><div class=\"code-word\">            q.add(element);\n</div></li><li><div class=\"code-word\">            i++;\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            i = <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">            System.out.println(element);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <h3 data-nodeid=\"4548\">总结</h3>\n                    <p data-nodeid=\"4549\">\n                      好的，这一节的内容就到这里了。本节课我们介绍了队列的基本原理和队列对于数据的增删查的操作。可以发现，队列与前一课时我们学习的栈的特性非常相似，队列也继承了线性表的优点与不足，是加了限制的线性表，队列的增和删的操作只能在这个线性表的头和尾进行。\n                    </p>\n                    <p data-nodeid=\"4550\">\n                      在时间复杂度上，循环队列和链式队列的新增、删除操作都为\n                      O(1)。而在查找操作中，队列和线性表一样只能通过全局遍历的方式进行，也就是需要\n                      O(n)\n                      的时间复杂度。在空间性能方面，循环队列必须有一个固定的长度，因此存在存储元素数量和空间的浪费问题，而链式队列不存在这种问题，所以在空间上，链式队列更为灵活一些。\n                    </p>\n                    <p data-nodeid=\"4551\">\n                      通常情况下，在可以确定队列长度最大值时，建议使用循环队列。无法确定队列长度时，应考虑使用链式队列。队列具有先进先出的特点，很像现实中人们排队买票的场景。在面对数据处理顺序非常敏感的问题时，队列一定是个不错的技术选型。\n                    </p>\n                    <p data-nodeid=\"4552\" class=\"\">\n                      如果你在队列的使用方面遇到困难，欢迎在留言区和我交流。\n                    </p>\n            "}