{"title":"09 | 构建总览：前端构建工具的演进","context":"\n                    <p data-nodeid=\"16189\">\n                      今天开始我们进入本专栏的第二模块：构建效率。本模块主要探讨如何优化构建细节。在这之前，我想先聊一聊前端开发历程中构建工具的演进。通过这节课，让你对构建工具的诞生发展及它们各自解决的问题有一个直观了解。\n                    </p>\n                    <h3 data-nodeid=\"16190\">前端开发语言的诞生</h3>\n                    <blockquote data-nodeid=\"16191\">\n                      <p data-nodeid=\"16192\">\n                        前端开发语言发展历程回顾：<br />\n                        1991 年，Tim Berners-Lee 发布了<a\n                          href=\"http://lists.w3.org/Archives/Public/www-talk/1991SepOct/0003.html\"\n                          data-nodeid=\"16292\"\n                          >第一份 HTML 标准</a\n                        >。<br />\n                        1994 年，Håkon Wium Lie<a\n                          href=\"https://www.w3.org/People/howcome/p/cascade.html\"\n                          data-nodeid=\"16298\"\n                          >提出了 CSS 的概念</a\n                        >，两年后 HTML 4.0 中首次支持了 CSS。IE3\n                        也成了第一个支持 CSS 的商用浏览器。<br />\n                        1995 年，Brendan Eich 发明了名为<em data-nodeid=\"16326\"\n                          >Mocha</em\n                        >的浏览器脚本语言，并在随后命名为了<em\n                          data-nodeid=\"16328\"\n                          >LiveScript，<em data-nodeid=\"16327\"\n                            >几个月后又重新命名为我们现在所熟知的</em\n                          >JavaScript</em\n                        >。<br />\n                        1997 年，随着 IE4 的发布，<em data-nodeid=\"16329\"\n                          >DHTML</em\n                        >（Dynaimic\n                        HTML）的概念被提出，指代用于创建包含交互和动画效果页面的一系列技术结合，包括\n                        HTML、CSS、JS、DOM 等。<br />\n                        2004 年，<em data-nodeid=\"16330\">Ajax</em>技术随着\n                        Google 在 Gmail 中的广泛运用而逐渐被更多的 Web\n                        开发者所使用（尽管最早的 Ajax 可以追溯到 1999 年 IE5\n                        时代的 XMLHTTP ActiveX）。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"16193\">\n                      前端主要的开发语言：HTML、CSS 和 JS 都诞生在 20 世纪 90\n                      年代。2000\n                      年前，网页呈现和交互都较为简单，开发框架和处理工具都在孕育中，即便是早期前端开发者所熟知的\n                      jQuery 框架，也远未出现。\n                    </p>\n                    <h3 data-nodeid=\"16194\">文件压缩与合并工具</h3>\n                    <blockquote data-nodeid=\"16195\">\n                      <p data-nodeid=\"16196\">\n                        文件压缩与合并工具发展历程回顾：<br />\n                        2001 年，Douglas Crockfold 发布了\n                        <a\n                          href=\"https://web.archive.org/web/20020405140416/https://www.crockford.com/javascript/jsmin.html\"\n                          data-nodeid=\"16338\"\n                          >JSMin</a\n                        >工具，用于去除 JS 代码中的注释和空格。<br />\n                        2004 年，Dave Shea 在他的<a\n                          href=\"https://alistapart.com/article/sprites/\"\n                          data-nodeid=\"16344\"\n                          >文章</a\n                        >中参考早期游戏开发中使用的 Sprite 图方案，提出了 CSS\n                        Sprite 的概念，即将多张小图合成为一张大图，然后通过 CSS\n                        控制在不同元素中使用图片的局部区域，从而减少网络请求，提升网页性能。<br />\n                        2006 年，Yahoo 发布了 YUI 库，其中包含了基于 Java\n                        的代码压缩工具 YUI Compressor。<br />\n                        2009 年，Google 发布了 Closure Toolkit，其中包含的\n                        Closure Compiler 提供了比 YUI Compressor<a\n                          href=\"https://www.slideshare.net/lifesinger/closure-compiler-vs-yuicompressor\"\n                          data-nodeid=\"16352\"\n                          >更多的</a\n                        >代码优化功能，并支持 Source Map 和多文件合并。<br />\n                        2010 年，Mihai Bazon 发布了压缩工具<a\n                          href=\"https://github.com/mishoo/UglifyJS\"\n                          data-nodeid=\"16358\"\n                          >UglifyJS</a\n                        >，并在 2012 年的升级版本 UglifyJS2 中增加了对 Source\n                        Map 的支持。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"16197\">\n                      2000 年以后的 10 年里，随着更多 CSS 与 JS\n                      框架的诞生，代码优化的工具也应运而生。为了获得更好的访问体验，开发者需要更少的资源连接数与更小的文件体积，这就分别对应了两类工具：<strong\n                        data-nodeid=\"16368\"\n                        >文件压缩工具</strong\n                      >和<strong data-nodeid=\"16369\">合并工具。</strong>\n                    </p>\n                    <ul data-nodeid=\"16198\">\n                      <li data-nodeid=\"16199\">\n                        <p data-nodeid=\"16200\">\n                          <strong data-nodeid=\"16374\">在压缩工具方面</strong\n                          >：从 JSMin、YUI Compressor 到 Closure Compiler 和\n                          UglifyJS，压缩与优化的性能不断完善。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16201\">\n                        <p data-nodeid=\"16202\">\n                          <strong data-nodeid=\"16379\">在合并工具方面</strong\n                          >：CSS Sprite\n                          技术的提出解决了网页中大量素材图片的加载性能问题，而在此期间，Sprite\n                          图片还主要通过设计工具来手动生成，例如 PS\n                          等，直到下个十年才出现自动化的生成工具。而代码文件的合并，可以在命令行中通过输出到文件手动完成；此外在\n                          Closure Compiler\n                          工具中也包含了将多个文件合并为一个的参数。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"16203\">\n                      这个时期的工具有一些共同点，例如都是基于其他语言（例如 C\n                      和\n                      Java）实现的，因此需要安装对应的依赖环境，这些工具也都需要通过命令行执行。对于用户来说，随着开发项目的增多，容易造成效率的低下。这类问题直到下一个十年，随着\n                      NodeJS 的发布才逐渐改变。\n                    </p>\n                    <h3 data-nodeid=\"16204\">包管理工具</h3>\n                    <blockquote data-nodeid=\"16205\">\n                      <p data-nodeid=\"16206\">\n                        包管理工具发展历程回顾：<br />\n                        2009 年，Ryan Dahl 发布了第一个版本的<a\n                          href=\"https://en.wikipedia.org/wiki/Node.js\"\n                          data-nodeid=\"16387\"\n                          >Node.js</a\n                        >。<br />\n                        2010 年，Node.js 核心开发人员Isaac Z. Schlueter\n                        编写了对应环境的包管理工具<a\n                          href=\"https://en.wikipedia.org/wiki/Npm_(software)\"\n                          data-nodeid=\"16393\"\n                          >npm</a\n                        >。<br />\n                        2012 年，Twitter 发布了名为<a\n                          href=\"https://bower.io/\"\n                          data-nodeid=\"16399\"\n                          >Bower</a\n                        >的<strong data-nodeid=\"16411\">前端</strong\n                        >依赖包管理工具。<br />\n                        2016 年，Facebook 发布了 npm registry 的兼容客户端<a\n                          href=\"https://blog.npmjs.org/post/151660845210/hello-yarn\"\n                          data-nodeid=\"16409\"\n                          >Yarn</a\n                        >。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"16207\">\n                      <img\n                        alt=\"nodejs-npm-publish-730x340.png\"\n                        src=\"https://s0.lgstatic.com/i/image/M00/4B/8F/Ciqc1F9V55yAQ74HAADJqN1JZaM722.png\"\n                        data-nodeid=\"16414\"\n                      />\n                    </p>\n                    <div data-nodeid=\"16208\">\n                      <p style=\"text-align: center\">\n                        人们可以把代码包发布到 npm 中\n                      </p>\n                    </div>\n                    <p data-nodeid=\"16209\">\n                      2009 年 NodeJS\n                      发布，这对前端开发领域产生了深远的影响。一方面，许多原先基于其他语言开发的工具包如今可以通过\n                      NodeJS 来实现，并通过 npm（Node Package Manager，即 node\n                      包管理器）来安装使用。大量的开发者开始将自己开发的工具包发布到\n                      npm registry 上，<a\n                        href=\"https://blog.npmjs.org/post/156076312840/search-update\"\n                        data-nodeid=\"16418\"\n                        >包的数量</a\n                      >在 2012 年初就达到了 6,000 个，而到 2014\n                      年，数字已经上升到了 50,000 个。\n                    </p>\n                    <p data-nodeid=\"16210\">\n                      另一方面，安装到本地的依赖包在前端项目中如何引用开始受到关注。Twitter\n                      发布的 Bower\n                      旨在解决前端项目中的依赖安装和引用问题，其中一个问题是，在\n                      npm 安装依赖的过程中会引入大量的子包，在早期版本（npm 3\n                      之前）中会产生相同依赖包的大量重复拷贝，这在前端项目中会导致无谓的请求流量损耗。而\n                      Bower\n                      在安装依赖时则可以避免这类问题。然而随着更多模块化打包工具的诞生，它的优势逐渐被其他工具所取代。直到\n                      2017 年，Bower 官方<a\n                        href=\"https://bower.io/blog/2017/how-to-migrate-away-from-bower/\"\n                        data-nodeid=\"16423\"\n                        >宣布废弃</a\n                      >这个项目。\n                    </p>\n                    <p data-nodeid=\"16211\">\n                      <img\n                        alt=\"node_modules_hell.jpg\"\n                        src=\"https://s0.lgstatic.com/i/image/M00/4B/9A/CgqCHl9V58mAJ1qqAACUaxrD3X4489.jpg\"\n                        data-nodeid=\"16431\"\n                      />\n                    </p>\n                    <div data-nodeid=\"16212\">\n                      <p style=\"text-align: center\">\n                        著名的 node_modules hell（源自 reddit 用户\n                        xaxaxa_trick）\n                      </p>\n                    </div>\n                    <p data-nodeid=\"16213\">\n                      npm\n                      的另一个饱受诟病的问题是本地依赖管理算法的复杂性以及随之而来的性能、冗余、冲突等问题。而\n                      2016 年发布的 Yarn 正是为解决这些问题而诞生的。和 npm\n                      相比，Yarn 的主要优点有：\n                    </p>\n                    <ol data-nodeid=\"16694\">\n                      <li data-nodeid=\"16695\">\n                        <p data-nodeid=\"16696\">\n                          <strong data-nodeid=\"16705\">安装速度</strong>：由于\n                          Yarn\n                          在安装依赖时采用的是并行操作，以及它在缓存依赖包时相比\n                          npm\n                          缓存的数据更完整，因此它在初次与重复安装依赖时，普遍都会比\n                          npm 更快。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16697\">\n                        <p data-nodeid=\"16698\">\n                          <strong data-nodeid=\"16716\">稳定性</strong>：npm 5\n                          引入的 package-lock 文件，在每次执行 npm install 时<a\n                            href=\"https://stackoverflow.com/questions/45022048/why-does-npm-install-rewrite-package-lock-json\"\n                            data-nodeid=\"16712\"\n                            >仍然会检查</a\n                          >更新符合语义规则的依赖包版本，而 yarn.lock\n                          则会严格保证版本的稳定性（尽管，yarn.lock 不能保证\n                          node_modules 的拓扑稳定性）。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16699\">\n                        <p data-nodeid=\"16700\">\n                          <strong data-nodeid=\"16731\">Plug'n'Play（PnP）</strong\n                          >：Yarn 2.0 发布了\n                          <a\n                            href=\"https://github.com/yarnpkg/rfcs/pull/101\"\n                            data-nodeid=\"16727\"\n                            >PnP</a\n                          >的功能（在更早期的 1.12 版本中就已实现）。PnP\n                          方案具有提升项目安装与解析依赖的速度，以及多项目共享缓存（与普通缓存相比，免去了读写\n                          node_modules 的大量 I/O 操作)，节省占用空间等优势。\n                        </p>\n                      </li>\n                    </ol>\n\n                    <h3 data-nodeid=\"16221\">任务式构建工具</h3>\n                    <blockquote data-nodeid=\"16222\">\n                      <p data-nodeid=\"16223\">\n                        任务式构建工具发展历程回顾：<br />\n                        2012 年，Ben Alman 发布了基于任务的构建工具\n                        <a\n                          href=\"https://bocoup.com/blog/introducing-grunt\"\n                          data-nodeid=\"16470\"\n                          >Grunt</a\n                        >。<br />\n                        2013 年，Eric Schoffstall 发布了流式的构建工具\n                        <a href=\"https://gulpjs.com/\" data-nodeid=\"16476\"\n                          >Gulp</a\n                        >。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"16224\">\n                      随着 NodeJS 和 npm 的发布，大量的前端工具包发布到 npm\n                      仓库，开发者通过简单的命令行指令就可以方便地下载和使用，前端的工程化也在这一时期开始蓬勃发展。其中一种趋势就是，使用自动化的任务式构建工具来替代手工执行各种处理命令。\n                    </p>\n                    <p data-nodeid=\"16225\">\n                      Grunt 和 Gulp\n                      这两种任务式的构建工具的基本组成包括：核心的处理工具（grunt-cli/gulp-cli）、配置文件（Gruntfile/Gulpfile），以及一系列常用的任务插件（Clean、Watch、Copy、Concat、Uglify、CssMin、Spritesmith......）。在项目里通过编写配置文件，就可以定义工作流程中的各种自动化构建处理，例如在发生变更时，通过\n                      Watch 插件监控文件，从而自动执行代码的检查与压缩等。\n                    </p>\n                    <h4 data-nodeid=\"16226\">Grunt vs Gulp</h4>\n                    <p data-nodeid=\"16227\">这两种工具的差异性主要体现在：</p>\n                    <ul data-nodeid=\"16228\">\n                      <li data-nodeid=\"16229\">\n                        <p data-nodeid=\"16230\">\n                          <strong data-nodeid=\"16490\">读写速度</strong>：Gulp\n                          在处理任务的过程中基于 NodeJS\n                          的数据流，本质上是操读写内存，而 Grunt\n                          则是基于临时文件，因此在读写速度上 Gulp 要<a\n                            href=\"http://tech.tmw.co.uk/2014/01/speedtesting-gulp-and-grunt/\"\n                            data-nodeid=\"16488\"\n                            >快于</a\n                          >Grunt。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16231\">\n                        <p data-nodeid=\"16232\">\n                          <strong data-nodeid=\"16495\">社区使用规模</strong\n                          >：截止编写课程的时间点，在 npmjs.com\n                          的周下载量方面，Gulp 为 1,200,000+，约是 Grunt\n                          的两倍。而在插件数量方面，Grunt 社区提供了超过 6000\n                          个不同功能的插件，而 Gulp 社区的插件数量则是 4000\n                          多个。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16233\">\n                        <p data-nodeid=\"16234\">\n                          <strong data-nodeid=\"16500\">配置文件的易用性</strong\n                          >：相比描述不同插件配置信息的 Gruntfile 而言，使用\n                          pipe\n                          函数描述任务处理过程的方式通常更易于阅读，但编写时需要对数据流有更深入的理解。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"16235\">\n                      任务式的构建工具，虽然解决了开发流程中自动化执行预设任务的问题，但不能解决项目中代码如何组织成不同功能的代码包、不同代码之间如何相互依赖等问题。而解决这类问题的方式就是：模块化。\n                    </p>\n                    <h3 data-nodeid=\"16236\">\n                      模块化：模块定义与模块化的构建工具\n                    </h3>\n                    <blockquote data-nodeid=\"16237\">\n                      <p data-nodeid=\"16238\">\n                        模块化发展历程回顾：<br />\n                        2009 年，Kevin Dangoor 发起了 ServerJS 项目，后更名为\n                        <a\n                          href=\"https://en.wikipedia.org/wiki/CommonJS\"\n                          data-nodeid=\"16508\"\n                          >CommonJS</a\n                        >，其目标是指定浏览器外的 JS API 规范（例如\n                        FS、Stream、Buffer 等）以及模块规范\n                        <a\n                          href=\"http://wiki.commonjs.org/wiki/Modules/1.0\"\n                          data-nodeid=\"16512\"\n                          >Modules/1.0</a\n                        >。这一规范也成为同年发布的 NodeJS\n                        中的模块定义的参照规范。<br />\n                        2011 年，RequireJS 1.0\n                        版本发布，作为客户端的模块加载器，提供了异步加载模块的能力。作者在之后提交了\n                        CommonJS 的 Module/Transfer/C\n                        提案，这一提案最终发展为了独立的\n                        <a\n                          href=\"https://github.com/amdjs/amdjs-api/blob/master/AMD.md\"\n                          data-nodeid=\"16518\"\n                          >AMD 规范</a\n                        >。<br />\n                        2013 年，面向浏览器端模块的打包工具<a\n                          href=\"http://browserify.org/\"\n                          data-nodeid=\"16524\"\n                          >Browserify</a\n                        >发布。<br />\n                        2014 年，跨平台的前后端兼容的模块化定义语法\n                        <a\n                          href=\"https://github.com/umdjs/umd\"\n                          data-nodeid=\"16530\"\n                          >UMD</a\n                        >发布。<br />\n                        2014 年，Sebastian McKenzie 发布了将 ES6 语法转换为 ES5\n                        语法的工具\n                        <a\n                          href=\"https://babeljs.io/blog/2015/03/31/5.0.0\"\n                          data-nodeid=\"16536\"\n                          >6to5</a\n                        >，并在之后更名为<strong data-nodeid=\"16570\"\n                          >Babel</strong\n                        >。<br />\n                        2014 年，Guy Bedford 对外发布了\n                        <a\n                          href=\"https://github.com/systemjs/systemjs\"\n                          data-nodeid=\"16546\"\n                          >SystemJS</a\n                        >\n                        和\n                        <a href=\"https://github.com/jspm\" data-nodeid=\"16550\"\n                          >jspm</a\n                        >\n                        工具，用于简化模块加载和处理包管理。<br />\n                        2014 年，打包工具 Webpack 发布了<a\n                          href=\"https://github.com/webpack/webpack/tags?after=v1.0.1\"\n                          data-nodeid=\"16556\"\n                          >第一个稳定版本</a\n                        >。<br />\n                        2015 年，ES6（<a\n                          href=\"http://www.ecma-international.org/ecma-262/6.0/\"\n                          data-nodeid=\"16562\"\n                          >ES2015</a\n                        >）规范正式发布，第一次从语言规范上定义了 JS\n                        中的模块化。<br />\n                        2015 年，Rich Harris 发布的\n                        <a\n                          href=\"https://rollupjs.org/guide/en/\"\n                          data-nodeid=\"16568\"\n                          >Rollup</a\n                        >\n                        项目，基于 ES6 模块化，提供了 Tree Shaking 的功能。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"16239\">模块化的不同规范</h4>\n                    <ul data-nodeid=\"16240\">\n                      <li data-nodeid=\"16241\">\n                        <p data-nodeid=\"16242\">\n                          <strong data-nodeid=\"16576\">CommonJS</strong>：在\n                          CommonJS 出现之前，一个 JS\n                          类库只能通过暴露全局对象的方式，供其他 JS\n                          文件使用，这样的方式有着诸多的问题，例如变量污染等。CommonJS\n                          作为非浏览器端的 JS 规范，它的基本要素如下：\n                        </p>\n                        <ul data-nodeid=\"16243\">\n                          <li data-nodeid=\"16244\">\n                            <p data-nodeid=\"16245\">\n                              <strong data-nodeid=\"16585\">模块定义</strong\n                              >：一个模块即是一个 JS 文件，代码中自带 module\n                              指向当前模块对象；自带 exports=module.exports，且\n                              exports 只能是对象，用于添加导出的属性和方法；自带\n                              require 方法用于引用其他模块。完整的 module\n                              对象可参考<a\n                                href=\"https://nodejs.org/docs/latest/api/modules.html#modules_the_module_object\"\n                                data-nodeid=\"16583\"\n                                >NodeJS 中的相关介绍</a\n                              >。\n                            </p>\n                          </li>\n                          <li data-nodeid=\"16246\">\n                            <p data-nodeid=\"16247\">\n                              <strong data-nodeid=\"16596\">模块引用</strong\n                              >：通过引用 require()\n                              函数来实现模块的引用，参数可以是相对路径也可以是绝对路径。在绝对路径的情况下，会按照\n                              <a\n                                href=\"https://nodejs.org/docs/latest/api/modules.html#modules_loading_from_node_modules_folders\"\n                                data-nodeid=\"16594\"\n                                >node_modules 规则</a\n                              >递归查找，在解析失败的情况下，会抛出异常。\n                            </p>\n                          </li>\n                          <li data-nodeid=\"16248\">\n                            <p data-nodeid=\"16249\">\n                              <strong data-nodeid=\"16605\">模块加载</strong\n                              >：require()\n                              的执行过程是同步的。执行时即进入到被依赖模块的执行上下文中，执行完毕后再执行依赖模块的后续代码。可参考官方文档中说明这一过程的<a\n                                href=\"https://nodejs.org/api/modules.html#modules_cycles\"\n                                data-nodeid=\"16603\"\n                                >示例代码</a\n                              >。\n                            </p>\n                          </li>\n                        </ul>\n                      </li>\n                      <li data-nodeid=\"16250\">\n                        <p data-nodeid=\"16251\">\n                          <strong data-nodeid=\"16610\">AMD</strong>：CommonJS 的\n                          Modules/1.0\n                          规范从一开始就注定了只能用于服务端，不能用于浏览器端。这一方面是因为模块文件中没有函数包裹，变量直接暴露到全局；另一方面则因为浏览器端的文件需要经过网络下载，不适合同步的依赖加载方式，因此出现了适用于浏览器端的模块化规范\n                          AMD。AMD 规范的基本要素如下：\n                        </p>\n                        <ul data-nodeid=\"16252\">\n                          <li data-nodeid=\"16253\">\n                            <p data-nodeid=\"16254\">\n                              <strong data-nodeid=\"16619\">模块定义</strong\n                              >：通过define(id?, dependencies?, factory)\n                              函数定义模块。id 为模块标识，dependencies\n                              为依赖的模块，factory 为工厂函数。factory\n                              传入的参数与 dependencies 对应，若不传\n                              dependencies，则 factory 需要默认传入\n                              require、exports，以及 module，或只传入\n                              require，但<a\n                                href=\"https://requirejs.org/docs/commonjs.html\"\n                                data-nodeid=\"16617\"\n                                >使用 return</a\n                              >\n                              做导出。\n                            </p>\n                          </li>\n                          <li data-nodeid=\"16255\">\n                            <p data-nodeid=\"16256\">\n                              <strong data-nodeid=\"16632\">模块引用</strong\n                              >：最早需要通过 require([id], callback)\n                              方式引用，之后也支持了类似 CommonJS 的 var a =\n                              require('a') 的写法。\n                            </p>\n                          </li>\n                        </ul>\n                      </li>\n                      <li data-nodeid=\"16257\">\n                        <p data-nodeid=\"16258\">\n                          <strong data-nodeid=\"16637\">UMD</strong>：UMD\n                          本质上是兼容 CommonJS 与 AMD\n                          这两种规范的代码语法糖，通过判断执行上下文中是否包含\n                          define 或 module\n                          来包装模块代码，适用于需要跨前后端的模块。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16259\">\n                        <p data-nodeid=\"16260\">\n                          <strong data-nodeid=\"16642\">ES Module</strong>：ECMA\n                          规范组织在 2015 年 6 月发布的 ES6 版本中，首次提出了\n                          JS 标准的模块化概念，具体要素如下：\n                        </p>\n                        <ul data-nodeid=\"16261\">\n                          <li data-nodeid=\"16262\">\n                            <p data-nodeid=\"16263\">\n                              <strong data-nodeid=\"16647\">模块定义</strong\n                              >：模块内支持两种导出方式，一种通过 export\n                              关键字导出任意个数的变量，另一种通过 export\n                              default 导出，一个模块中只能包含一个 default\n                              的导出类型。\n                            </p>\n                          </li>\n                          <li data-nodeid=\"16264\">\n                            <p data-nodeid=\"16265\">\n                              <strong data-nodeid=\"16656\">模块引用</strong\n                              >：通过 import\n                              关键字引用其他模块。引用方式分为静态引用和动态引用。静态引用格式为<em\n                                data-nodeid=\"16657\"\n                                >import importClause from ModuleSpecifier</em\n                              >，import\n                              表达式需要写在文件最外层上下文中；动态引用的方式则是\n                              import()，返回 promise 对象。\n                            </p>\n                          </li>\n                        </ul>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"16266\">\n                      下面我们介绍一些模块化的构建工具。\n                    </p>\n                    <h4 data-nodeid=\"16267\">模块化的构建工具</h4>\n                    <ul data-nodeid=\"16268\">\n                      <li data-nodeid=\"16269\">\n                        <p data-nodeid=\"16270\">\n                          <strong data-nodeid=\"16664\">RequireJS</strong\n                          >：正如前面介绍的，RequireJS 的核心功能是支持 AMD\n                          风格的模块化代码运行。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16271\">\n                        <p data-nodeid=\"16272\">\n                          <strong data-nodeid=\"16669\">Browserify</strong\n                          >：与前者不同，Browserify 的目标是让 CommonJS\n                          风格的代码也运行在浏览器端，除了提供语法糖外，还提供了一些经过处理后且在浏览器端运行的\n                          NodeJS 的核心模块。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16273\">\n                        <p data-nodeid=\"16274\">\n                          <strong data-nodeid=\"16674\">Babel</strong>：Babel\n                          的定位一直是 Transformer，即语法转换器，它承担着将\n                          ES6、JSX 等语法转换为 ES5\n                          语法的核心功能，被广泛地运用于其他构建工具中。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16275\">\n                        <p data-nodeid=\"16276\">\n                          <strong data-nodeid=\"16679\">SystemJS</strong\n                          >：SystemJS 是兼容各种模块化规范的运行时工具。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16277\">\n                        <p data-nodeid=\"16278\">\n                          <strong data-nodeid=\"16684\">Webpack</strong>：Webpack\n                          一方面兼容各种模块化规范的标识方法，另一方面将模块化的概念延伸到其他类型的文件中，创造性地打造了一种完全基于模块的新的构建体系。在下一节课中我会再深入讲解。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16279\">\n                        <p data-nodeid=\"16280\">\n                          <strong data-nodeid=\"16689\">Rollup</strong>：Rollup\n                          在诞生之初率先实现了 Tree Shaking 功能，以及天然支持\n                          ES6 模块的打包。虽然这些主要功能在 Webpack\n                          发展的后续版本中也逐步支持，但其简单的 API\n                          仍然广受许多库开发者的青睐。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"16281\">总结</h3>\n                    <p data-nodeid=\"16282\">\n                      这节课中，我们讨论了前端构建工具的演进：从早期的单独功能的压缩与合并工具，到\n                      NodeJS\n                      与包管理工具的诞生，随之而来的是任务式构建工具的发展，以及模块化概念与工具的不断探索。我们现在使用的构建工具，一方面立足于这些过去积累下来的前人的经验与智慧，另一方面也顺应着不断发展的前端开发需求。\n                    </p>\n                    <p data-nodeid=\"16283\">\n                      本节课的课后讨论题是：最后出现的模块化的构建工具为什么能取代任务式的构建工具呢？以\n                      Webpack 为例来聊聊看吧。\n                    </p>\n                    <p data-nodeid=\"16284\">\n                      下节课，我们深入到 Webpack 的体系中，来聊一聊 Webpack\n                      的完整工作流程。\n                    </p>\n            "}