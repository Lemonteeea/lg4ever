{"title":"08 | 并发基础：Goroutines 和 Channels 的声明与使用","context":"\n                    <p data-nodeid=\"965\" class=\"\">\n                      在本节课开始之前，我们先一起回忆上节课的思考题：是否可以有多个\n                      defer，如果可以的话，它们的执行顺序是怎么样的？\n                    </p>\n                    <p data-nodeid=\"966\">\n                      对于这道题，可以直接采用写代码测试的方式，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">moreDefer</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">defer</span>  fmt.Println(<span class=\"hljs-string\">\"First defer\"</span>)\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">defer</span>  fmt.Println(<span class=\"hljs-string\">\"Second defer\"</span>)\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">defer</span>  fmt.Println(<span class=\"hljs-string\">\"Three defer\"</span>)\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"函数自身代码\"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">  moreDefer()\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"968\">\n                      我定义了 moreDefer 函数，函数里有三个 defer 语句，然后在\n                      main 函数里调用它。运行这段程序可以看到如下内容输出：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">函数自身代码\n</div></li><li><div class=\"code-word\">Three defer\n</div></li><li><div class=\"code-word\">Second defer\n</div></li><li><div class=\"code-word\">First defer\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"970\">通过以上示例可以证明：</p>\n                    <ol data-nodeid=\"971\">\n                      <li data-nodeid=\"972\">\n                        <p data-nodeid=\"973\">\n                          在一个方法或者函数中，可以有多个 defer 语句；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"974\">\n                        <p data-nodeid=\"975\">\n                          多个 defer 语句的执行顺序依照后进先出的原则。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"976\">\n                      defer\n                      有一个调用栈，越早定义越靠近栈的底部，越晚定义越靠近栈的顶部，在执行这些\n                      defer 语句的时候，会先从栈顶弹出一个 defer\n                      然后执行它，也就是我们示例中的结果。\n                    </p>\n                    <p data-nodeid=\"977\">\n                      下面我们开始本节课的学习。本节课是 Go\n                      语言的重点——协程和通道，它们是 Go\n                      语言并发的基础，我会从这两个基础概念开始，带你逐步深入 Go\n                      语言的并发。\n                    </p>\n                    <h3 data-nodeid=\"978\">什么是并发</h3>\n                    <p data-nodeid=\"979\">\n                      前面的课程中，我所写的代码都按照顺序执行，也就是上一句代码执行完，才会执行下一句，这样的代码逻辑简单，也符合我们的阅读习惯。\n                    </p>\n                    <p data-nodeid=\"980\">\n                      但这样是不够的，因为计算机很强大，如果只让它干完一件事情再干另外一件事情就太浪费了。比如一款音乐软件，使用它听音乐的时候还想让它下载歌曲，同一时刻做了两件事，在编程中，这就是并发，并发可以让你编写的程序在同一时刻做多几件事情。\n                    </p>\n                    <h3 data-nodeid=\"981\">进程和线程</h3>\n                    <p data-nodeid=\"982\">\n                      讲并发就绕不开线程，不过在介绍线程之前，我先为你介绍什么是进程。\n                    </p>\n                    <h4 data-nodeid=\"983\">进程</h4>\n                    <p data-nodeid=\"984\">\n                      在操作系统中，进程是一个非常重要的概念。当你启动一个软件（比如浏览器）的时候，操作系统会为这个软件创建一个进程，这个进程是该软件的工作空间，它包含了软件运行所需的所有资源，比如内存空间、文件句柄，还有下面要讲的线程等。下面的图片就是我的电脑上运行的进程：\n                    </p>\n                    <p data-nodeid=\"985\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/70/AE/CgqCHl-7fwyAdSu_AADl16erQwg589.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1095\"\n                      />\n                    </p>\n                    <div data-nodeid=\"986\">\n                      <p style=\"text-align: center\">（电脑运行的进程）</p>\n                    </div>\n                    <p data-nodeid=\"987\">那么线程是什么呢？</p>\n                    <h4 data-nodeid=\"988\">线程</h4>\n                    <p data-nodeid=\"989\">\n                      线程是进程的执行空间，一个进程可以有多个线程，线程被操作系统调度执行，比如下载一个文件，发送一个消息等。这种多个线程被操作系统同时调度执行的情况，就是多线程的并发。\n                    </p>\n                    <p data-nodeid=\"990\">\n                      一个程序启动，就会有对应的进程被创建，同时进程也会启动一个线程，这个线程叫作主线程。如果主线程结束，那么整个程序就退出了。有了主线程，就可以从主线里启动很多其他线程，也就有了多线程的并发。\n                    </p>\n                    <h3 data-nodeid=\"991\">协程（Goroutine）</h3>\n                    <p data-nodeid=\"992\">\n                      Go 语言中没有线程的概念，只有协程，也称为\n                      goroutine。相比线程来说，协程更加轻量，一个程序可以随意启动成千上万个\n                      goroutine。\n                    </p>\n                    <p data-nodeid=\"993\">\n                      goroutine 被 Go runtime\n                      所调度，这一点和线程不一样。也就是说，Go 语言的并发是由 Go\n                      自己所调度的，自己决定同时执行多少个\n                      goroutine，什么时候执行哪几个。这些对于我们开发者来说完全透明，只需要在编码的时候告诉\n                      Go 语言要启动几个\n                      goroutine，至于如何调度执行，我们不用关心。\n                    </p>\n                    <p data-nodeid=\"994\">\n                      要启动一个 goroutine 非常简单，Go 语言为我们提供了 go\n                      关键字，相比其他编程语言简化了很多，如下面的代码所示：\n                    </p>\n                    <p data-nodeid=\"995\">\n                      <em data-nodeid=\"1108\"\n                        ><strong data-nodeid=\"1107\">ch08/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">go</span> fmt.Println(<span class=\"hljs-string\">\"飞雪无情\"</span>)\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"我是 main goroutine\"</span>)\n</div></li><li><div class=\"code-word\">   time.Sleep(time.Second)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"997\">\n                      这样就启动了一个 goroutine，用来调用 fmt.Println\n                      函数，打印“飞雪无情”。所以这段代码里有两个\n                      goroutine，一个是 main 函数启动的 main\n                      goroutine，一个是我自己通过 go 关键字启动的 goroutine。\n                    </p>\n                    <p data-nodeid=\"998\">\n                      从示例中可以总结出 go 关键字的语法，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">go</span> function()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1000\">\n                      go 关键字后跟一个方法或者函数的调用，就可以启动一个\n                      goroutine，让方法在这个新启动的 goroutine\n                      中运行。运行以上示例，可以看到如下输出：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">我是 main goroutine\n</div></li><li><div class=\"code-word\">飞雪无情\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1002\">\n                      从输出结果也可以看出，程序是并发的，go 关键字启动的\n                      goroutine 并不阻塞 main goroutine\n                      的执行，所以我们才会看到如上打印结果。\n                    </p>\n                    <blockquote data-nodeid=\"1003\">\n                      <p data-nodeid=\"1004\">\n                        小提示：示例中的 time.Sleep(time.Second)\n                        表示等待一秒，这里是让 main goroutine 等一秒，不然 main\n                        goroutine 执行完毕程序就退出了，也就看不到启动的新\n                        goroutine 中“飞雪无情”的打印结果了。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"1005\">Channel</h3>\n                    <p data-nodeid=\"1006\">\n                      那么如果启动了多个 goroutine，它们之间该如何通信呢？这就是\n                      Go 语言提供的 channel（通道）要解决的问题。\n                    </p>\n                    <h4 data-nodeid=\"1007\">声明一个 channel</h4>\n                    <p data-nodeid=\"1008\">\n                      在 Go 语言中，声明一个 channel 非常简单，使用内置的 make\n                      函数即可，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">ch:=<span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1010\">\n                      其中 chan 是一个关键字，表示是 channel 类型。后面的 string\n                      表示 channel 里的数据是 string 类型。通过 channel\n                      的声明也可以看到，chan 是一个集合类型。\n                    </p>\n                    <p data-nodeid=\"1011\">\n                      定义好 chan 后就可以使用了，一个 chan\n                      的操作只有两种：发送和接收。\n                    </p>\n                    <ol data-nodeid=\"1012\">\n                      <li data-nodeid=\"1013\">\n                        <p data-nodeid=\"1014\">\n                          接收：获取 chan 中的值，操作符为 &lt;- chan。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1015\">\n                        <p data-nodeid=\"1016\">\n                          发送：向 chan 发送值，把值放在 chan 中，操作符为 chan\n                          &lt;-。\n                        </p>\n                      </li>\n                    </ol>\n                    <blockquote data-nodeid=\"1017\">\n                      <p data-nodeid=\"1018\">\n                        小技巧：这里注意发送和接收的操作符，都是 &lt;-\n                        ，只不过位置不同。接收的 &lt;- 操作符在 chan\n                        的左侧，发送的 &lt;- 操作符在 chan 的右侧。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1019\">\n                      现在我把上个示例改造下，使用 chan 来代替 time.Sleep\n                      函数的等待工作，如下面的代码所示：\n                    </p>\n                    <p data-nodeid=\"1020\">\n                      <em data-nodeid=\"1138\"\n                        ><strong data-nodeid=\"1137\">ch08/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   ch:=<span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">      fmt.Println(<span class=\"hljs-string\">\"飞雪无情\"</span>)\n</div></li><li><div class=\"code-word\">      ch &lt;- <span class=\"hljs-string\">\"goroutine 完成\"</span>\n</div></li><li><div class=\"code-word\">   }()\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"我是 main goroutine\"</span>)\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">   v:=&lt;-ch\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"接收到的chan中的值为：\"</span>,v)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1022\">\n                      运行这个示例，可以发现程序并没有退出，可以看到\"飞雪无情\"的输出结果，达到了\n                      time.Sleep 函数的效果，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">我是 main goroutine\n</div></li><li><div class=\"code-word\">飞雪无情\n</div></li><li><div class=\"code-word\">接收到的chan中的值为： goroutine 完成\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1024\">\n                      可以这样理解：在上面的示例中，我们在新启动的 goroutine\n                      中向 chan 类型的变量 ch 发送值；在 main goroutine\n                      中，从变量 ch 接收值；如果 ch 中没有值，则阻塞等待到 ch\n                      中有值可以接收为止。\n                    </p>\n                    <p data-nodeid=\"1025\">\n                      相信你应该明白为什么程序不会在新的 goroutine\n                      完成之前退出了，因为通过 make 创建的 chan 中没有值，而\n                      main goroutine 又想从 chan\n                      中获取值，获取不到就一直等待，等到另一个 goroutine 向 chan\n                      发送值为止。\n                    </p>\n                    <p data-nodeid=\"1026\">\n                      channel 有点像在两个 goroutine 之间架设的管道，一个\n                      goroutine\n                      可以往这个管道里发送数据，另外一个可以从这个管道里取数据，有点类似于我们说的队列。\n                    </p>\n                    <h4 data-nodeid=\"1027\">无缓冲 channel</h4>\n                    <p data-nodeid=\"1028\">\n                      上面的示例中，使用 make 创建的 chan 就是一个无缓冲\n                      channel，它的容量是 0，不能存储任何数据。所以无缓冲\n                      channel 只起到传输数据的作用，数据并不会在 channel\n                      中做任何停留。这也意味着，无缓冲 channel\n                      的发送和接收操作是同时进行的，它也可以称为同步 channel。\n                    </p>\n                    <h4 data-nodeid=\"1029\">有缓冲 channel</h4>\n                    <p data-nodeid=\"1030\">\n                      有缓冲 channel\n                      类似一个可阻塞的队列，内部的元素先进先出。通过 make\n                      函数的第二个参数可以指定 channel\n                      容量的大小，进而创建一个有缓冲 channel，如下面的代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">cacheCh:=<span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>,<span class=\"hljs-number\">5</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1032\">\n                      我创建了一个容量为 5 的 channel，内部的元素类型是\n                      int，也就是说这个 channel 内部最多可以存放 5 个类型为 int\n                      的元素，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1033\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/70/AE/CgqCHl-7fzmAVLu0AACSjW-neAE188.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"1154\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1034\">\n                      <p style=\"text-align: center\">（有缓冲 channel）</p>\n                    </div>\n                    <p data-nodeid=\"1035\">一个有缓冲 channel 具备以下特点：</p>\n                    <ol data-nodeid=\"1036\">\n                      <li data-nodeid=\"1037\">\n                        <p data-nodeid=\"1038\">\n                          有缓冲 channel 的内部有一个缓冲队列；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1039\">\n                        <p data-nodeid=\"1040\">\n                          发送操作是向队列的尾部插入元素，如果队列已满，则阻塞等待，直到另一个\n                          goroutine 执行，接收操作释放队列的空间；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1041\">\n                        <p data-nodeid=\"1042\">\n                          接收操作是从队列的头部获取元素并把它从队列中删除，如果队列为空，则阻塞等待，直到另一个\n                          goroutine 执行，发送操作插入新的元素。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1043\">\n                      因为有缓冲 channel\n                      类似一个队列，可以获取它的容量和里面元素的个数。如下面的代码所示：\n                    </p>\n                    <p data-nodeid=\"1044\">\n                      <em data-nodeid=\"1164\"\n                        ><strong data-nodeid=\"1163\">ch08/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">cacheCh:=<span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>,<span class=\"hljs-number\">5</span>)\n</div></li><li><div class=\"code-word\">cacheCh &lt;- <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\">cacheCh &lt;- <span class=\"hljs-number\">3</span>\n</div></li><li><div class=\"code-word\">fmt.Println(<span class=\"hljs-string\">\"cacheCh容量为:\"</span>,<span class=\"hljs-built_in\">cap</span>(cacheCh),<span class=\"hljs-string\">\",元素个数为：\"</span>,<span class=\"hljs-built_in\">len</span>(cacheCh))\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3622\" class=\"te-preview-highlight\">\n                      其中，通过内置函数 cap 可以获取 channel\n                      的容量，也就是最大能存放多少个元素，通过内置函数 len\n                      可以获取 channel 中元素的个数。\n                    </p>\n\n                    <blockquote data-nodeid=\"1047\">\n                      <p data-nodeid=\"1048\">\n                        小提示：无缓冲 channel 其实就是一个容量大小为 0 的\n                        channel。比如 make(chan int,0)。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"1049\">关闭 channel</h4>\n                    <p data-nodeid=\"1050\">\n                      channel 还可以使用内置函数 close 关闭，如下面的代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">close</span>(cacheCh)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1052\">\n                      如果一个 channel\n                      被关闭了，就不能向里面发送数据了，如果发送的话，会引起\n                      painc 异常。但是还可以接收 channel 里的数据，如果 channel\n                      里没有数据的话，接收的数据是元素类型的零值。\n                    </p>\n                    <h4 data-nodeid=\"1053\">单向 channel</h4>\n                    <p data-nodeid=\"1054\">\n                      有时候，我们有一些特殊的业务需求，比如限制一个 channel\n                      只可以接收但是不能发送，或者限制一个 channel\n                      只能发送但不能接收，这种 channel 称为单向 channel。\n                    </p>\n                    <p data-nodeid=\"1055\">\n                      单向 channel 的声明也很简单，只需要在声明的时候带上 &lt;-\n                      操作符即可，如下面的代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">onlySend := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span>&lt;- <span class=\"hljs-keyword\">int</span>)\n</div></li><li><div class=\"code-word\">onlyReceive:=<span class=\"hljs-built_in\">make</span>(&lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1057\">\n                      注意，声明单向 channel &lt;-\n                      操作符的位置和上面讲到的发送和接收操作是一样的。\n                    </p>\n                    <p data-nodeid=\"1058\">\n                      在函数或者方法的参数中，使用单向 channel\n                      的较多，这样可以防止一些操作影响了 channel。\n                    </p>\n                    <p data-nodeid=\"1059\">\n                      下面示例中的 counter 函数，它的参数 out 是一个只能发送的\n                      channel，所以在 counter 函数体内使用参数 out\n                      时，只能对其进行发送操作，如果执行接收操作，则程序不能编译通过。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">counter</span><span class=\"hljs-params\">(out <span class=\"hljs-keyword\">chan</span>&lt;- <span class=\"hljs-keyword\">int</span>)</span></span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">//函数内容使用变量out，只能进行发送操作</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"1061\">select+channel 示例</h3>\n                    <p data-nodeid=\"1062\">\n                      假设要从网上下载一个文件，我启动了 3 个 goroutine\n                      进行下载，并把结果发送到 3 个 channel\n                      中。其中，哪个先下载好，就会使用哪个 channel 的结果。\n                    </p>\n                    <p data-nodeid=\"1063\">\n                      在这种情况下，如果我们尝试获取第一个 channel\n                      的结果，程序就会被阻塞，无法获取剩下两个 channel\n                      的结果，也无法判断哪个先下载好。这个时候就需要用到多路复用操作了，在\n                      Go 语言中，通过 select\n                      语句可以实现多路复用，其语句格式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">select</span> {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">case</span> i1 = &lt;-c1:\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-comment\">//todo</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">case</span> c2 &lt;- i2:\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">//todo</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">default</span>:\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// default todo</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1065\">\n                      整体结构和 switch 非常像，都有 case 和 default，只不过\n                      select 的 case 是一个个可以操作的 channel。\n                    </p>\n                    <blockquote data-nodeid=\"1066\">\n                      <p data-nodeid=\"1067\">\n                        小提示：多路复用可以简单地理解为，N 个 channel\n                        中，任意一个 channel 有数据产生，select\n                        都可以监听到，然后执行相应的分支，接收数据并处理。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1068\">\n                      有了 select\n                      语句，就可以实现下载的例子了。如下面的代码所示：\n                    </p>\n                    <p data-nodeid=\"1069\">\n                      <em data-nodeid=\"1190\"\n                        ><strong data-nodeid=\"1189\">ch08/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">//声明三个存放结果的channel</span>\n</div></li><li><div class=\"code-word\">   firstCh := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)\n</div></li><li><div class=\"code-word\">   secondCh := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)\n</div></li><li><div class=\"code-word\">   threeCh := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">//同时开启3个goroutine下载</span>\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">      firstCh &lt;- downloadFile(<span class=\"hljs-string\">\"firstCh\"</span>)\n</div></li><li><div class=\"code-word\">   }()\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">      secondCh &lt;- downloadFile(<span class=\"hljs-string\">\"secondCh\"</span>)\n</div></li><li><div class=\"code-word\">   }()\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">      threeCh &lt;- downloadFile(<span class=\"hljs-string\">\"threeCh\"</span>)\n</div></li><li><div class=\"code-word\">   }()\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">//开始select多路复用，哪个channel能获取到值，</span>\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">//就说明哪个最先下载好，就用哪个。</span>\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">select</span> {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">case</span> filePath := &lt;-firstCh:\n</div></li><li><div class=\"code-word\">      fmt.Println(filePath)\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">case</span> filePath := &lt;-secondCh:\n</div></li><li><div class=\"code-word\">      fmt.Println(filePath)\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">case</span> filePath := &lt;-threeCh:\n</div></li><li><div class=\"code-word\">      fmt.Println(filePath)\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">downloadFile</span><span class=\"hljs-params\">(chanName <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">string</span></span> {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">//模拟下载文件,可以自己随机time.Sleep点时间试试</span>\n</div></li><li><div class=\"code-word\">   time.Sleep(time.Second)\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">return</span> chanName+<span class=\"hljs-string\">\":filePath\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1071\">\n                      如果这些 case 中有一个可以执行，select 语句会选择该 case\n                      执行，如果同时有多个 case\n                      可以被执行，则随机选择一个，这样每个 case\n                      都有平等的被执行的机会。如果一个 select 没有任何\n                      case，那么它会一直等待下去。\n                    </p>\n                    <h3 data-nodeid=\"1072\">总结</h3>\n                    <p data-nodeid=\"1073\">\n                      在这节课中，我为你介绍了如何通过 go 关键字启动一个\n                      goroutine，以及如何通过 channel 实现 goroutine\n                      间的数据传递，这些都是 Go\n                      语言并发的基础，理解它们可以更好地掌握并发。\n                    </p>\n                    <p data-nodeid=\"1074\">\n                      在 Go\n                      语言中，提倡通过通信来共享内存，而不是通过共享内存来通信，其实就是提倡通过\n                      channel\n                      发送接收消息的方式进行数据传递，而不是通过修改同一个变量。所以在<strong\n                        data-nodeid=\"1198\"\n                        >数据流动、传递的场景中要优先使用\n                        channel，它是并发安全的，性能也不错。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1075\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/70/AF/CgqCHl-7f1eAOkA5AAUt2ZtY7Ec582.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"1201\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1076\">\n                      到这里就要结束今天的课程了，本节课留个思考题，猜一猜\n                      channel 是怎么做到并发安全的？\n                    </p>\n                    <p data-nodeid=\"1077\" class=\"\">\n                      下节课我们要学习第 9 讲“同步原语：sync\n                      包让你对并发控制得心应手”，记得来听课！\n                    </p>\n            "}