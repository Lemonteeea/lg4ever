{"title":"03 | 控制结构：if、for、switch 逻辑语句的那些事儿","context":"\n                    <p data-nodeid=\"46020\">\n                      在上节课中我留了一个思考题，在一个字符串中查找另外一个字符串是否存在，这个其实是字符串查找的功能，假如我需要在“飞雪无情”这个字符串中查找“飞雪”，可以这么做：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">i:=strings.Index(<span class=\"hljs-string\">\"飞雪无情\"</span>,<span class=\"hljs-string\">\"飞雪\"</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46022\">\n                      这就是 Go\n                      语言标准库为我们提供的常用函数，以供我们使用，减少开发。\n                    </p>\n                    <p data-nodeid=\"46023\">\n                      这节课我们继续讲解 Go 语言，今天的内容是：Go\n                      语言代码逻辑的控制。\n                    </p>\n                    <p data-nodeid=\"46024\">\n                      流程控制语句用于控制程序的执行顺序，这样你的程序就具备了逻辑结构。一般流程控制语句需要和各种条件结合使用，比如用于条件判断的\n                      if，用于选择的 switch，用于循环的 for\n                      等。这一节课，我会为你详细介绍，通过示例演示它们的使用方式。\n                    </p>\n                    <h3 data-nodeid=\"46025\">if 条件语句</h3>\n                    <p data-nodeid=\"46026\">\n                      if\n                      语句是条件语句，它根据布尔值的表达式来决定选择哪个分支执行：如果表达式的值为\n                      true，则 if 分支被执行；如果表达式的值为 false，则 else\n                      分支被执行。下面，我们来看一个 if 条件语句示例：\n                    </p>\n                    <p data-nodeid=\"46027\">\n                      <em data-nodeid=\"46114\"\n                        ><strong data-nodeid=\"46113\">ch03/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">    i:=<span class=\"hljs-number\">10</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> i &gt;<span class=\"hljs-number\">10</span> {\n</div></li><li><div class=\"code-word\">        fmt.Println(<span class=\"hljs-string\">\"i&gt;10\"</span>)\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        fmt.Println(<span class=\"hljs-string\">\"i&lt;=10\"</span>)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46029\">\n                      这是一个非常简单的 if……else 条件语句，当 i&gt;10 为 true\n                      的时候，if 分支被执行，否则就执行 else\n                      分支，你自己可以运行这段代码，验证打印结果。\n                    </p>\n                    <p data-nodeid=\"46030\">\n                      关于 if 条件语句的使用有一些规则：\n                    </p>\n                    <ol data-nodeid=\"46031\">\n                      <li data-nodeid=\"46032\">\n                        <p data-nodeid=\"46033\">\n                          if 后面的条件表达式不需要使用\n                          ()，这和有些编程语言不一样，也更体现 Go 语言的简洁；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"46034\">\n                        <p data-nodeid=\"46035\">\n                          每个条件分支（if 或者\n                          else）中的大括号是必须的，哪怕大括号里只有一行代码（如示例）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"46036\">\n                        <p data-nodeid=\"46037\">\n                          if 紧跟的大括号 { 不能独占一行，else 前的大括号 }\n                          也不能独占一行，否则会编译不通过；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"46038\">\n                        <p data-nodeid=\"46039\">\n                          在 if……else 条件语句中还可以增加多个 else\n                          if，增加更多的条件分支。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"46040\">\n                      通过 go run ch03/main.go 运行下面的这段代码，会看到输出了\n                      5&lt;i&lt;=10 ，这说明代码中的 else if i&gt;5 &amp;&amp;\n                      i&lt;=10 成立，该分支被执行。\n                    </p>\n                    <p data-nodeid=\"46041\">\n                      <em data-nodeid=\"46135\"\n                        ><strong data-nodeid=\"46134\">ch03/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">    i:=<span class=\"hljs-number\">6</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> i &gt;<span class=\"hljs-number\">10</span> {\n</div></li><li><div class=\"code-word\">        fmt.Println(<span class=\"hljs-string\">\"i&gt;10\"</span>)\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>  i&gt;<span class=\"hljs-number\">5</span> &amp;&amp; i&lt;=<span class=\"hljs-number\">10</span> {\n</div></li><li><div class=\"code-word\">        fmt.Println(<span class=\"hljs-string\">\"5&lt;i&lt;=10\"</span>)\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        fmt.Println(<span class=\"hljs-string\">\"i&lt;=5\"</span>)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46043\">\n                      你可以通过修改 i 的初始值，来验证其他分支的执行情况。\n                    </p>\n                    <p data-nodeid=\"46044\">\n                      你还可以增加更多的 else\n                      if，以增加更多的条件分支，不过这种方式不被推荐，因为代码可读性差，多个条件分支可以使用我后面讲到的\n                      switch 代替，使代码更简洁。\n                    </p>\n                    <p data-nodeid=\"46045\">\n                      和其他编程语言不同，在 Go 语言的 if\n                      语句中，可以有一个简单的表达式语句，并将该语句和条件语句使用分号\n                      ;\n                      分开。同样是以上的示例，我使用这种方式对其改造，如下面代码所示：\n                    </p>\n                    <p data-nodeid=\"46046\">\n                      <em data-nodeid=\"46143\"\n                        ><strong data-nodeid=\"46142\">ch03/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> i:=<span class=\"hljs-number\">6</span>; i &gt;<span class=\"hljs-number\">10</span> {\n</div></li><li><div class=\"code-word\">        fmt.Println(<span class=\"hljs-string\">\"i&gt;10\"</span>)\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>  i&gt;<span class=\"hljs-number\">5</span> &amp;&amp; i&lt;=<span class=\"hljs-number\">10</span> {\n</div></li><li><div class=\"code-word\">        fmt.Println(<span class=\"hljs-string\">\"5&lt;i&lt;=10\"</span>)\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        fmt.Println(<span class=\"hljs-string\">\"i&lt;=5\"</span>)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46048\">\n                      在 if 关键字之后，i&gt;10 条件语句之前，通过分号 ;\n                      分隔被初始化的 i:=6。这个简单语句主要用来在 if\n                      条件判断之前做一些初始化工作，可以发现输出结果是一样的。\n                    </p>\n                    <p data-nodeid=\"46049\">\n                      通过 if 简单语句声明的变量，只能在整个 if……else if……else\n                      条件语句中使用，比如以上示例中的变量 i。\n                    </p>\n                    <h3 data-nodeid=\"46050\">switch 选择语句</h3>\n                    <p data-nodeid=\"46051\">\n                      if\n                      条件语句比较适合分支较少的情况，如果有很多分支的话，选择\n                      switch 会更方便，比如以上示例，使用 switch\n                      改造后的代码如下：\n                    </p>\n                    <p data-nodeid=\"46052\">\n                      <em data-nodeid=\"46152\"\n                        ><strong data-nodeid=\"46151\">ch03/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">switch</span> i:=<span class=\"hljs-number\">6</span>;{\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">case</span> i&gt;<span class=\"hljs-number\">10</span>:\n</div></li><li><div class=\"code-word\">    fmt.Println(<span class=\"hljs-string\">\"i&gt;10\"</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">case</span> i&gt;<span class=\"hljs-number\">5</span> &amp;&amp; i&lt;=<span class=\"hljs-number\">10</span>:\n</div></li><li><div class=\"code-word\">    fmt.Println(<span class=\"hljs-string\">\"5&lt;i&lt;=10\"</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">default</span>:\n</div></li><li><div class=\"code-word\">    fmt.Println(<span class=\"hljs-string\">\"i&lt;=5\"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46054\">\n                      switch\n                      语句同样也可以用一个简单的语句来做初始化，同样也是用分号 ;\n                      分隔。每一个 case 就是一个分支，分支条件为 true\n                      该分支才会执行，而且 case 分支后的条件表达式也不用小括号\n                      () 包裹。\n                    </p>\n                    <p data-nodeid=\"46055\">\n                      在 Go 语言中，switch 的 case\n                      从上到下逐一进行判断，一旦满足条件，立即执行对应的分支并返回，其余分支不再做判断。也就是说\n                      Go 语言的 switch 在默认情况下，case 最后自带\n                      break。这和其他编程语言不一样，比如 C 语言在 case\n                      分支里必须要有明确的 break 才能退出一个 case。Go\n                      语言的这种设计就是为了防止忘记写 break 时，下一个 case\n                      被执行。\n                    </p>\n                    <p data-nodeid=\"46056\">\n                      那么如果你真的有需要，的确需要执行下一个紧跟的 case\n                      怎么办呢？Go 语言也考虑到了，提供了 fallthrough\n                      关键字。现在看个例子，如下面的代码所示：\n                    </p>\n                    <p data-nodeid=\"46057\">\n                      <em data-nodeid=\"46160\"\n                        ><strong data-nodeid=\"46159\">ch03/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">switch</span> j:=<span class=\"hljs-number\">1</span>;j {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">fallthrough</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n</div></li><li><div class=\"code-word\">    fmt.Println(<span class=\"hljs-string\">\"1\"</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">default</span>:\n</div></li><li><div class=\"code-word\">    fmt.Println(<span class=\"hljs-string\">\"没有匹配\"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46059\">\n                      以上示例运行会输出 1，如果省略 case 1: 后面的\n                      fallthrough，则不会有任何输出。\n                    </p>\n                    <p data-nodeid=\"46060\">\n                      不知道你是否可以发现，和上一个例子对比，这个例子的 switch\n                      后面是有表达式的，也就是输入了 ;j，而上一个例子的 switch\n                      后只有一个用于初始化的简单语句。\n                    </p>\n                    <p data-nodeid=\"46061\">\n                      当 switch 之后有表达式时，case\n                      后的值就要和这个表达式的结果类型相同，比如这里的 j 是 int\n                      类型，那么 case 后就只能使用 int 类型，如示例中的 case\n                      1、case 2。如果是其他类型，比如使用 case \"a\"\n                      ，会提示类型不匹配，无法编译通过。\n                    </p>\n                    <p data-nodeid=\"46062\">\n                      而对于 switch 后省略表达式的情况，整个 switch 结构就和\n                      if……else 条件语句等同了。\n                    </p>\n                    <p data-nodeid=\"46063\">\n                      switch\n                      后的表达式也没有太多限制，是一个合法的表达式即可，也不用一定要求是常量或者整数。你甚至可以像如下代码一样，直接把比较表达式放在\n                      switch 之后：\n                    </p>\n                    <p data-nodeid=\"46064\">\n                      <em data-nodeid=\"46174\"\n                        ><strong data-nodeid=\"46173\">ch03/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">switch</span> <span class=\"hljs-number\">2</span>&gt;<span class=\"hljs-number\">1</span> {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">case</span> <span class=\"hljs-literal\">true</span>:\n</div></li><li><div class=\"code-word\">    fmt.Println(<span class=\"hljs-string\">\"2&gt;1\"</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">case</span> <span class=\"hljs-literal\">false</span>:\n</div></li><li><div class=\"code-word\">    fmt.Println(<span class=\"hljs-string\">\"2&lt;=1\"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p class=\"te-preview-highlight\" data-nodeid=\"58469\">\n                      可见 Go 语言的 switch 语句非常强大且灵活。\n                    </p>\n\n                    <h3 data-nodeid=\"46067\">for 循环语句</h3>\n                    <p data-nodeid=\"46068\">\n                      当需要计算 1 到 100\n                      的数字之和时，如果用代码将一个个数字加起来，会非常复杂，可读性也不好，这就体现出循环语句的存在价值了。\n                    </p>\n                    <p data-nodeid=\"46069\">\n                      下面是一个经典的 for\n                      循环示例，从这个示例中，我们可以分析出 for\n                      循环由三部分组成，其中，需要使用两个 ; 分隔，如下所示：\n                    </p>\n                    <p data-nodeid=\"46070\">\n                      <em data-nodeid=\"46183\"\n                        ><strong data-nodeid=\"46182\">ch03/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">sum:=<span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> i:=<span class=\"hljs-number\">1</span>;i&lt;=<span class=\"hljs-number\">100</span>;i++ {\n</div></li><li><div class=\"code-word\">    sum+=i\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">fmt.Println(<span class=\"hljs-string\">\"the sum is\"</span>,sum)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46072\">其中：</p>\n                    <ol data-nodeid=\"46073\">\n                      <li data-nodeid=\"46074\">\n                        <p data-nodeid=\"46075\">\n                          第一部分是一个简单语句，一般用于 for\n                          循环的初始化，比如这里声明了一个变量，并对 i:=1\n                          初始化；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"46076\">\n                        <p data-nodeid=\"46077\">\n                          第二部分是 for 循环的条件，也就是说，它表示 for\n                          循环什么时候结束。这里的条件是 i&lt;=100；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"46078\">\n                        <p data-nodeid=\"46079\">\n                          第三部分是更新语句，一般用于更新循环的变量，比如这里\n                          i++，这样才能达到递增循环的目的。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"46080\">\n                      需要特别留意的是，Go 语言里的 for\n                      循环非常强大，以上介绍的三部分组成都不是必须的，可以被省略，下面我就来为你演示，省略以上三部分后的效果。\n                    </p>\n                    <p data-nodeid=\"46081\">\n                      如果你以前学过其他编程语言，可能会见到 while\n                      这样的循环语句，在 Go 语言中没有 while 循环，但是可以通过\n                      for 达到 while 的效果，如以下代码所示：\n                    </p>\n                    <p data-nodeid=\"46082\">\n                      <em data-nodeid=\"46196\"\n                        ><strong data-nodeid=\"46195\">ch03/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">sum:=<span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">i:=<span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> i&lt;=<span class=\"hljs-number\">100</span> {\n</div></li><li><div class=\"code-word\">    sum+=i\n</div></li><li><div class=\"code-word\">    i++\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">fmt.Println(<span class=\"hljs-string\">\"the sum is\"</span>,sum)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46084\">\n                      这个示例和上面的 for 示例的效果是一样的，但是这里的 for\n                      后只有 i&lt;=100 这一个条件语句，也就是说，它达到了 while\n                      的效果。\n                    </p>\n                    <p data-nodeid=\"46085\">\n                      在 Go 语言中，同样支持使用 continue、break 控制 for 循环：\n                    </p>\n                    <ol data-nodeid=\"46086\">\n                      <li data-nodeid=\"46087\">\n                        <p data-nodeid=\"46088\">\n                          continue 可以跳出本次循环，继续执行下一个循环。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"46089\">\n                        <p data-nodeid=\"46090\">\n                          break 可以跳出整个 for 循环，哪怕 for\n                          循环没有执行完，也会强制终止。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"46091\">\n                      现在我对上面计算 100 以内整数和的示例再进行修改，演示\n                      break 的用法，如以下代码：\n                    </p>\n                    <p data-nodeid=\"46092\">\n                      <em data-nodeid=\"46208\"\n                        ><strong data-nodeid=\"46207\">ch03/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">sum:=<span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">i:=<span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> {\n</div></li><li><div class=\"code-word\">    sum+=i\n</div></li><li><div class=\"code-word\">    i++\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> i&gt;<span class=\"hljs-number\">100</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">fmt.Println(<span class=\"hljs-string\">\"the sum is\"</span>,sum)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46094\">\n                      这个示例使用的是没有任何条件的 for 循环，也称为 for\n                      无限循环。此外，使用 break 退出无限循环，条件是 i&gt;100。\n                    </p>\n                    <h3 data-nodeid=\"46095\">总结</h3>\n                    <p data-nodeid=\"46096\">\n                      这节课主要讲解 if、for 和 switch\n                      这样的控制语句的基本用法，使用它们，你可以更好地控制程序的逻辑结构，达到业务需求的目的。\n                    </p>\n                    <p data-nodeid=\"46097\">\n                      这节课的思考题是：任意举个例子，练习 for 循环 continue\n                      的使用。\n                    </p>\n                    <p data-nodeid=\"46098\">\n                      Go\n                      语言提供的控制语句非常强大，本节课我并没有全部介绍，比如\n                      switch 选择语句中的类型选择，for 循环语句中的 for range\n                      等高级能力。这些高级能力我会在后面的课程中逐一介绍，接下来要讲的集合类型，就会详细地为你演示如何使用\n                      for range 遍历集合，记得来听课！\n                    </p>\n                    <hr data-nodeid=\"46099\" />\n                    <p data-nodeid=\"46100\">\n                      <strong data-nodeid=\"46224\"\n                        >《Java\n                        <b\n                          ><strong data-nodeid=\"46223\"\n                            >工程师高薪训练营</strong\n                          ></b\n                        >》</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"46101\">\n                      拉勾背书内推+硬核实战技术干货，帮助每位 Java\n                      工程师达到阿里 P7 技术能力。<a\n                        href=\"https://kaiwu.lagou.com/java_architect.html?utm_source=lagouedu&amp;utm_medium=zhuanlan&amp;utm_campaign=Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%AB%98%E8%96%AA%E8%AE%AD%E7%BB%83%E8%90%A5\"\n                        data-nodeid=\"46228\"\n                        >点击链接，快来领取！</a\n                      >\n                    </p>\n                    <p data-nodeid=\"46102\">\n                      <strong data-nodeid=\"46232\">《Java 就业集训营》</strong>\n                    </p>\n                    <p data-nodeid=\"46103\">\n                      零基础 180 天高薪就业，<a\n                        href=\"https://kaiwu.lagou.com/java_basic.html?utm_source=zhuanlan%20article&amp;utm_medium=bottom&amp;utm_campaign=Go%E8%AF%AD%E8%A8%80%E4%B8%93%E6%A0%8F#/index\"\n                        data-nodeid=\"46236\"\n                        >点击链接，快来领取！</a\n                      >\n                    </p>\n            "}