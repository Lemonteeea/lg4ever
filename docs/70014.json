{"title":"13 | 复杂度：如何利用数学推导对程序进行优化？","context":"\n                    <p data-nodeid=\"15839\" class=\"\">\n                      这一讲开始，我们进入到这个专栏“模块三\n                      数据结构与算法”的学习，在这个模块，我们会重点学习数学与算法、代码之间的关系。\n                    </p>\n                    <p data-nodeid=\"15840\">\n                      在一个程序开发的过程中，常常需要我们去关注程序的复杂度。这一讲，我们就先从复杂度出发，来看看数学的思想是如何应用在程序复杂度优化的。\n                    </p>\n                    <h3 data-nodeid=\"15841\">程序的时间损耗</h3>\n                    <p data-nodeid=\"15842\">\n                      <strong data-nodeid=\"15977\">程序</strong\n                      >就是计算机执行运算动作的指令，<strong data-nodeid=\"15978\"\n                        >运算</strong\n                      >就是对数据进行的处理。\n                    </p>\n                    <p data-nodeid=\"15843\">\n                      例如，1+2 这样的加法运算，就是对两个数据 1 和 2\n                      执行加法的处理。同样地，加法运算还可以针对更多的数据，比如\n                      1+2+3+...+50，这就是对 1～50 这 50\n                      个数据，执行加法运算的处理。\n                    </p>\n                    <p data-nodeid=\"15844\">\n                      当我们用计算机指令，也就是程序，执行 1+2\n                      这样的运算时，可能在毫秒，甚至更短的时间内就能得到结果。然而，当数据量变大时，执行的时间就会越来越长。\n                    </p>\n                    <p data-nodeid=\"15845\">\n                      我们看一个例子，下面一段代码的任务，是给定一个正整数\n                      n，计算从 1～n 之间所有整数之和。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> time\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> sys\n</div></li><li><div class=\"code-word\">t1 = int(time.time()*<span class=\"hljs-number\">1000000</span>)\n</div></li><li><div class=\"code-word\">n = int(sys.argv[<span class=\"hljs-number\">1</span>])\n</div></li><li><div class=\"code-word\">result = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n):\n</div></li><li><div class=\"code-word\">\tresult += i\n</div></li><li><div class=\"code-word\">t2 = int(time.time()*<span class=\"hljs-number\">1000000</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> t2 - t1\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"15847\">我们对代码进行走读：</p>\n                    <ul data-nodeid=\"15848\">\n                      <li data-nodeid=\"15849\">\n                        <p data-nodeid=\"15850\">\n                          第 4 行，记录了程序开始执行的毫秒级时间戳；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15851\">\n                        <p data-nodeid=\"15852\">第 5 行，得到输入参数 n；</p>\n                      </li>\n                      <li data-nodeid=\"15853\">\n                        <p data-nodeid=\"15854\">\n                          第 7～8 行，执行 1 加到 n 的循环求和；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15855\">\n                        <p data-nodeid=\"15856\">\n                          第 9 行，记录了程序结束计算的毫秒级时间戳；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15857\">\n                        <p data-nodeid=\"15858\">\n                          最后，第 10 行打印出程序执行的时间损耗。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"15859\">\n                      当输入分别是 100、1000 和 10000\n                      时，程序的执行结果如下图所示：\n                    </p>\n                    <p data-nodeid=\"15860\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/77/Ciqc1F_KBzyAeUPcAAMh0u-3bgI704.png\"\n                        alt=\"Lark20201204-175328.png\"\n                        data-nodeid=\"15991\"\n                      />\n                    </p>\n                    <p data-nodeid=\"15861\">\n                      由图可见，数据量越大，程序的时间损耗也就越大。\n                    </p>\n                    <h3 data-nodeid=\"15862\">程序的复杂度</h3>\n                    <p data-nodeid=\"15863\">\n                      开发者在编写代码时，除了实际的时间损耗外，还有个重要概念就是<strong\n                        data-nodeid=\"15999\"\n                        >复杂度</strong\n                      >。复杂度是衡量程序效率的重要指标，也是工程师的必备技能。\n                    </p>\n                    <blockquote data-nodeid=\"15864\">\n                      <p data-nodeid=\"15865\">\n                        在实际工作中，通常会重点关注时间方面的复杂度，也叫时间复杂度。这一讲，我们为了简便行文，就把时间复杂度简称为复杂度。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"15866\">\n                      从本质上来看，<strong data-nodeid=\"16006\"\n                        >复杂度描述的是程序时间损耗和数据总量之间的变化关系</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"15867\">\n                      【例 1】我们先举一个例子说明，看下面这段代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\">a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]\n</div></li><li><div class=\"code-word\">result = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(a)):\n</div></li><li><div class=\"code-word\">\tresult += a[i]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> result\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"15869\">\n                      这段代码执行的内容是采用了一个 for 循环，来求 a\n                      数组所有元素之和。\n                    </p>\n                    <p data-nodeid=\"15870\">\n                      根据代码执行的顺序可知，第 1～2 行分别执行 1\n                      次后，进入了第 3～4 行的 for 循环；这个 for\n                      循环需要被反复执行 len(a) 次，也就是 6 次；最后，再执行 1\n                      次第 5 行的代码。\n                    </p>\n                    <p data-nodeid=\"15871\">\n                      可以估算出，程序执行的时间损耗为 t<sub>(总时间)</sub> =\n                      t<sub>(第1,2,5行)</sub> +\n                      6t<sub>(第3,4行)</sub>，更泛化的写法是 t=c+n×b。\n                    </p>\n                    <blockquote data-nodeid=\"15872\">\n                      <p data-nodeid=\"15873\">\n                        其中 t 代表代码执行损耗的时间，c 和 b 分别是两个常数，而\n                        n 是决定循环次数的数据量的大小。可见，随着 n 的变大，t\n                        以线性的关系变大。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"15874\">\n                      【例 2】我们再看一个例子，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\">a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]\n</div></li><li><div class=\"code-word\">result = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">result = a[<span class=\"hljs-number\">0</span>] + a[<span class=\"hljs-number\">-1</span>]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> result\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"15876\">\n                      这段代码计算的是数组 a 第一个元素与最后一个元素之和。\n                    </p>\n                    <p data-nodeid=\"15877\">\n                      具体来看，第 1 行定义数组 a，第 2 行定义变量 result；第 3\n                      行，直接取出数组的第一个元素和最后一个元素，并且求和；最后，第\n                      4 行打印结果。\n                    </p>\n                    <p data-nodeid=\"15878\">\n                      可以估算出，程序执行的时间损耗为 t<sub>(总时间)</sub> =\n                      t<sub>(第1,2,3,4行)</sub>，更泛化的写法是 t = c。\n                    </p>\n                    <blockquote data-nodeid=\"15879\">\n                      <p data-nodeid=\"15880\">\n                        其中 t 代表代码执行的时间损耗，c 是个与数组 a\n                        大小无关的常数。可见，无论数组 a\n                        的长度很大还是很小，执行的时间损耗都不会受到影响。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"15881\">\n                      从上面的两个例子，我们就能对复杂度有更深入的理解了。\n                    </p>\n                    <h4 data-nodeid=\"15882\">【深入理解复杂度】</h4>\n                    <p data-nodeid=\"15883\">\n                      复杂度是程序时间损耗和数据总量之间的变化关系，通常用\n                      O(f(n)) 来表示，其中 f(n) 就是复杂度函数。\n                    </p>\n                    <p data-nodeid=\"15884\">\n                      如果程序的时间损耗和数据量的关系是\n                      t=c+n×b，也就是说复杂度函数为\n                      f(n)=c+n×b。复杂度通常不关注常数，因为它是个固定的时间损耗，与输入的数据总量没有任何的关系。因此，复杂度函数\n                      c+n×b 可以忽略常数 c 和 b，直接缩写为 f(n) =\n                      n，即第一个例子的复杂度为 O(n)。\n                    </p>\n                    <p data-nodeid=\"15885\">\n                      如果程序的时间损耗和数据量没有关系，即\n                      t=c，我们依然会忽略这个常数，直接用 O(1) 来表示。\n                    </p>\n                    <h3 data-nodeid=\"15886\">复杂度的性质和代码结构</h3>\n                    <p data-nodeid=\"15887\">\n                      有时候，复杂度函数会非常复杂，例如下面的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\">a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]\n</div></li><li><div class=\"code-word\">index_max = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">times_max = <span class=\"hljs-number\">-1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(a)):\n</div></li><li><div class=\"code-word\">\ttimes_temp = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(len(a)):\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> a[i] == a[j]:\n</div></li><li><div class=\"code-word\">\t\t\ttimes_temp += <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> times_temp &gt; times_max:\n</div></li><li><div class=\"code-word\">\t\ttimes_max = times_temp\n</div></li><li><div class=\"code-word\">\t\tindex_max = i\n</div></li><li><div class=\"code-word\">result = a[index_max]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> range(len(a)):\n</div></li><li><div class=\"code-word\">\tresult += a[k]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> result\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"15889\">\n                      这段代码的任务是寻找出数组 a 中出现次数最多的元素\n                      a[index_max]，再计算出 a[index_max] 与数组 a\n                      中所有元素的求和。\n                    </p>\n                    <p data-nodeid=\"15890\">我们对代码进行走读。</p>\n                    <ul data-nodeid=\"15891\">\n                      <li data-nodeid=\"15892\">\n                        <p data-nodeid=\"15893\">\n                          第 4～11 行，有两层 for\n                          循环。我们具体算一下时间损耗，t<sub>(4～11行)</sub> =\n                          6×[t<sub>(第4,5行)</sub>+t<sub>(6～8行)</sub>+t<sub>(9～11行)</sub>]。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15894\">\n                        <p data-nodeid=\"15895\">\n                          而程序的第 6～8 行，又是一个 for 循环，则有 t<sub\n                            >(6～8行)</sub\n                          >\n                          = 6×t<sub>(第6,7,8行)</sub>\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15896\">\n                        <p data-nodeid=\"15897\">\n                          因此，整体的时间损耗为 t<sub>(4～11 行)</sub>=\n                          6×[t<sub>(第4,5行)</sub> + 6×t<sub>(第6,7,8行)</sub>+\n                          t<sub>(9～11行)</sub>] = n×n×b + n×c + n×d。\n                        </p>\n                      </li>\n                    </ul>\n                    <blockquote data-nodeid=\"15898\">\n                      <p data-nodeid=\"15899\">\n                        其中，n 为数组 a 的长度，即数据量；b、c、d 分别是第\n                        6、7、8 行执行的时间，第 4、5 行执行的时间，以及第 9～11\n                        行执行的时间，并且它们与输入的数据量无关，可以视作常数。\n                      </p>\n                      <p data-nodeid=\"15900\">\n                        利用忽略常数的原则，则有 t = n<sup>2</sup> + n + n =\n                        n<sup>2</sup> + 2n；还可以继续忽略常数“2”，则有<br />\n                        t =n<sup>2</sup>+ n；根据数学中的平方公式，还有 t =n<sup\n                          >2</sup\n                        >\n                        + n = (n + 1/2)<sup>2</sup> - 1/4。此时，仍然可以把与 n\n                        无关的系数“1/2”和“1/4”忽略掉，则有 t =\n                        n<sup>2</sup>。因此，程序的第 4～11 行是\n                        O(n<sup>2</sup>) 的时间复杂度。\n                      </p>\n                    </blockquote>\n                    <ul data-nodeid=\"15901\">\n                      <li data-nodeid=\"15902\">\n                        <p data-nodeid=\"15903\">\n                          而第 14～15 行，根据前面所学是 O(n)\n                          的时间复杂度。所以，整个代码的时间复杂度就是\n                          O(n<sup>2</sup>+n)。仍然可以继续使用刚刚平方公式的化简方法，得到最终的时间复杂度是\n                          O(n<sup>2</sup>)。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"15904\">\n                      从这个例子，我们可以发现，<strong data-nodeid=\"16162\"\n                        >多项式级的复杂度相加时，可以选择高者作为结果。</strong\n                      >\n                      例如，O(n<sup>2</sup>+n) 的时间复杂度，可以直接写为\n                      O(n<sup>2</sup>)。\n                    </p>\n                    <p data-nodeid=\"15905\">\n                      复杂度的性质都来自数学的推导，与此同时，复杂度的计算还与程序的结构有着密切关系。通常而言，一个<strong\n                        data-nodeid=\"16176\"\n                        >顺序结构</strong\n                      >或<strong data-nodeid=\"16177\">选择结构</strong\n                      >的代码的执行时间与数据量无关，复杂度就是\n                      O(1)；而对于<strong data-nodeid=\"16178\">循环结构</strong\n                      >而言，如果循环的次数与输入数据量的多少有关，就会产生复杂度了。\n                    </p>\n                    <blockquote data-nodeid=\"15906\">\n                      <p data-nodeid=\"15907\">\n                        程序的三大基本结构是顺序结构、选择结构和循环结构，如果忘了，可以复习一下\n                        C 语言。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"15908\">\n                      通常，一层循环的时间复杂度是\n                      O(n)；如果是两个循环的嵌套，时间复杂度是\n                      O(n<sup>2</sup>)；如果是三个循环的嵌套，则是\n                      O(n<sup>3</sup>)；依次类推。\n                    </p>\n                    <h3 data-nodeid=\"15909\">利用数学来优化时间复杂度</h3>\n                    <p data-nodeid=\"15910\">\n                      设想一下，如果一段线上代码在输入变量很多的时候就会“卡死”，那么这一定是一款无法上线的系统。因此，时间复杂度的优化，是每个开发者必须具备的技能。\n                    </p>\n                    <p data-nodeid=\"15911\">\n                      其实，时间复杂度的优化有很多办法。除了优化数据结构、优化代码结构、减少程序中不必要的计算等通用方法以外，还可以利用强大的数学知识来进行时间复杂度的优化。\n                    </p>\n                    <p data-nodeid=\"15912\">我们来举几个例子。</p>\n                    <p data-nodeid=\"15913\">\n                      我们在开篇词中讲了一个异或的案例。在一个无序的数组中，只有一个数字\n                      obj\n                      出现了一次，其他数字都出现了两次，尝试去查找出这个出现了一次的\n                      obj。绝大多数程序员的代码逻辑，应该都是设计两层 for\n                      循环：一层遍历每个数字，一层计算每个数字出现的次数，直到找到\n                      obj。\n                    </p>\n                    <p data-nodeid=\"15914\">代码如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\">a = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>,len(a)):\n</div></li><li><div class=\"code-word\">\ttimes = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">0</span>,len(a)):\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> a[i] == a[j]:\n</div></li><li><div class=\"code-word\">\t\t\ttimes += <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> times == <span class=\"hljs-number\">1</span>:\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">print</span> a[i]\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">break</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"15916\">我们对代码进行走读：</p>\n                    <ul data-nodeid=\"15917\">\n                      <li data-nodeid=\"15918\">\n                        <p data-nodeid=\"15919\">\n                          第 2 行，开始 for 循环，并把计数的变量 times 置为 0；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15920\">\n                        <p data-nodeid=\"15921\">\n                          第 4 行，嵌套了一个 for 循环；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15922\">\n                        <p data-nodeid=\"15923\">\n                          第 5\n                          行开始，判断里外两层循环的值是否相等。如果相等，则\n                          times 加 1；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15924\">\n                        <p data-nodeid=\"15925\">\n                          第 7 行，判断 times 是否为 1，如果为 1 说明 a[i]\n                          在数组中只出现了一次，则打印并 break 跳出循环结束。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"15926\">\n                      根据我们前面的结论，这段代码的复杂度是\n                      O(n<sup>2</sup>)，而且单独借助数据结构等思想已经很难再进行程序的优化了。\n                    </p>\n                    <p data-nodeid=\"15927\">\n                      然而，如果从数学视角来看，这段代码就可以进行如下优化：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\">a = [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n</div></li><li><div class=\"code-word\">result = a[<span class=\"hljs-number\">0</span>]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>,len(a)):\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; result = result ^ a[i]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> result\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"15929\">在这里，利用了异或运算的性质：</p>\n                    <ul data-nodeid=\"15930\">\n                      <li data-nodeid=\"15931\">\n                        <p data-nodeid=\"15932\">第一，满足交换律和结合律；</p>\n                      </li>\n                      <li data-nodeid=\"15933\">\n                        <p data-nodeid=\"15934\">\n                          第二，可以把相同元素计算为 0；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15935\">\n                        <p data-nodeid=\"15936\">\n                          第三，0 异或任何数字都是其本身。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"15937\">\n                      这样，只要把数组 a 中所有元素都异或在一起，就得到了\n                      obj。此时，只需要一层 for 循环，复杂度是 O(n)。\n                    </p>\n                    <p data-nodeid=\"15938\">\n                      我们再看下面一个例子。输入一个正整数 n，求不大于 n\n                      的所有偶数之和。例如输入 6，则输出 2、4、6 之和，为\n                      12；输入5，则输出 2、4 之和，为 6。\n                    </p>\n                    <p data-nodeid=\"15939\">\n                      这个题目的常规解法，是采用 for 循环，让 i 从 1 遍历到\n                      n。如果 i 为奇数，则 continue；如果为偶数，则加到 result\n                      变量中。不难发现，复杂度是 O(n)，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> sys\n</div></li><li><div class=\"code-word\">n = int(sys.argv[<span class=\"hljs-number\">1</span>])\n</div></li><li><div class=\"code-word\">result = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(n+<span class=\"hljs-number\">1</span>):\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> i % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n</div></li><li><div class=\"code-word\">\t\tresult += i\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> result\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"15941\">\n                      我们再从数学的视角来看待这个问题，你就会发现这是个等差数列求和的问题，等差数列求和的公式为<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/77/Ciqc1F_KB4qACGq3AAAh0smYQ_M453.png\"\n                        alt=\"Lark20201204-175336.png\"\n                        data-nodeid=\"16221\"\n                      />\n                    </p>\n                    <blockquote data-nodeid=\"15942\">\n                      <p data-nodeid=\"15943\">\n                        其中 a<sub>1</sub> 为首项，n 为项数，d 为公差，前 n\n                        项和为 S<sub>n</sub>。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"15944\">\n                      利用这个公式，我们可以直接写出下面的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">import sys\n</div></li><li><div class=\"code-word\">n = int(sys.argv[1])\n</div></li><li><div class=\"code-word\">a1 = 0\n</div></li><li><div class=\"code-word\">d = 2\n</div></li><li><div class=\"code-word\">nn = n/2 + 1\n</div></li><li><div class=\"code-word\">print nn * a1 + 2 * nn * (nn - 1) / d\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"15946\">我们对代码进行走读。</p>\n                    <ul data-nodeid=\"15947\">\n                      <li data-nodeid=\"15948\">\n                        <p data-nodeid=\"15949\">第 2 行，获得输入变量 n。</p>\n                      </li>\n                      <li data-nodeid=\"15950\">\n                        <p data-nodeid=\"15951\">\n                          第 3 行，求和的第一项，直接赋值为 0。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15952\">\n                        <p data-nodeid=\"15953\">第 4 行，公差 d 为 2。</p>\n                      </li>\n                      <li data-nodeid=\"15954\">\n                        <p data-nodeid=\"15955\">\n                          第 5 行，求项数。例如，输入 6，则项数为\n                          0、2、4、6，6/3+1 = 4 项；输入 5，则项数为\n                          0、2、4，5/2+1 = 3 项。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15956\">\n                        <p data-nodeid=\"15957\">\n                          最后第 6\n                          行，调用等差数列求和公式，直接得到结果，运行截图如下：\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"15958\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/78/77/Ciqc1F_KB3mAMqH8AAIw0hMvzoo693.png\"\n                        alt=\"Lark20201204-175339.png\"\n                        data-nodeid=\"16240\"\n                      />\n                    </p>\n                    <p data-nodeid=\"15959\">\n                      这段代码的执行与输入数据量 n 毫无关系，因此复杂度是 O(1)。\n                    </p>\n                    <p data-nodeid=\"15960\">\n                      同样的道理，等比数列求和的代码，如果用计算机程序开发的思想，是需要一个\n                      for 循环在 O(n)\n                      复杂度下完成计算的。但借助等比数列求和公式，你只需要 O(1)\n                      的复杂度就能得到结果。在这里，我们作为课后习题不再赘述。\n                    </p>\n                    <h3 data-nodeid=\"15961\">小结</h3>\n                    <p data-nodeid=\"15962\">\n                      复杂度是程序开发中老生常谈的话题了。时间复杂度衡量的是程序执行时间与数据量之间的关系。在计算复杂度的时候，通常常数是可以被忽略掉的。如果是多项式的求和，通常只保留最高次幂一项，其他都可以省略。\n                    </p>\n                    <p data-nodeid=\"15963\">\n                      复杂度与代码结构息息相关。for\n                      循环嵌套的越多，复杂度就会越高。如果你的数学知识非常渊博，从数学的角度来降低代码复杂度也是一个不错的选择。\n                    </p>\n                    <p data-nodeid=\"15964\">\n                      最后，我们留一个练习题：输入一个正整数 n，求不大于 n\n                      的所有 2 的正整数次幂的数字之和。例如，输入 17，则输出\n                      1+2+4+8+16 = 31；输入 8，则输出 1+2+4+8 =\n                      15。你可以尝试两种方法来开发，分别是 O(n) 复杂度的 for\n                      循环，和 O(1) 复杂度的等比数列求和公式。\n                    </p>\n                    <p data-nodeid=\"16665\">\n                      下一讲，我将向你讲解“14 |\n                      程序的循环：如何利用数学归纳法进行程序开发？”让数学更好地帮助你的工作。\n                    </p>\n                    <hr data-nodeid=\"16666\" />\n                    <p data-nodeid=\"16667\" class=\"te-preview-highlight\">\n                      <a\n                        href=\"https://wj.qq.com/s2/7812549/4cd8/\"\n                        data-nodeid=\"16673\"\n                        >课程评价入口，挑选 5 名小伙伴赠送小礼品～</a\n                      >\n                    </p>\n            "}