{"title":"11 | 如何解释 React 的渲染流程？","context":"\n                    <p data-nodeid=\"31918\" class=\"\">\n                      解释 React\n                      的渲染流程是一道面试中的高频题，这讲我会带你探讨这个问题。\n                    </p>\n                    <h3 data-nodeid=\"31919\">破题</h3>\n                    <p data-nodeid=\"31920\">\n                      你知道面试官是怎样通过一个回答评判你的能力层次吗：\n                    </p>\n                    <ul data-nodeid=\"31921\">\n                      <li data-nodeid=\"31922\">\n                        <p data-nodeid=\"31923\">\n                          如果只是简单的复述流程，缺乏重点侧写，那只是到了<strong\n                            data-nodeid=\"32079\"\n                            >知道</strong\n                          >的程度；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31924\">\n                        <p data-nodeid=\"31925\">\n                          如果解释清楚了设计理念，并能将核心流程穿插在具象化的抽象概念中进行描述，那才是真正吃透了理念，具备了基本的架构能力；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31926\">\n                        <p data-nodeid=\"31927\">\n                          在上一点基础上，加上自己的理论心得、工程实践，辅以具体的落地成果，那在能力评定上，肯定是架构师以上的级别了。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"31928\">\n                      虽然我们的能力还没到架构师的级别，但在<strong\n                        data-nodeid=\"32099\"\n                        >思考总结</strong\n                      >与<strong data-nodeid=\"32100\">阐述观点</strong\n                      >上要往这个方向走，并在实践中不断锻炼和改进自己的思考和表达方式，做到“<strong\n                        data-nodeid=\"32101\"\n                        >讲话有重点</strong\n                      >，<strong data-nodeid=\"32102\">层次要分明</strong>”。\n                    </p>\n                    <p data-nodeid=\"31929\">\n                      关于本讲的问题，求职者就很容易跑偏，一个劲儿地背诵渲染流程中涉及的函数。我不止一次遇到过这样的面试场景，这样的回答非常冗长，缺乏对关键内容的提炼升华，需要听者自行完成观点的剥离，所以面试官很难听进去。这种情况就违背了“讲话有重点，层次要分明”的原则。\n                    </p>\n                    <p data-nodeid=\"31930\">\n                      在第 4 讲“<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=566#/detail/pc?id=5794\"\n                        data-nodeid=\"32107\"\n                        >类组件与函数组件有什么区别呢？</a\n                      >”中提过一个<strong data-nodeid=\"32113\">突出重点</strong\n                      >的方式，即通过主线串联整个分散的论点。本题也可以采用同样的方法。\n                    </p>\n                    <p data-nodeid=\"31931\">\n                      那就需要先清楚什么是渲染过程中的重点？以及渲染过程的层次该如何划分？\n                    </p>\n                    <h3 data-nodeid=\"31932\">承题</h3>\n                    <p data-nodeid=\"31933\">\n                      整合前面几讲提到的关于渲染流程的知识点：React\n                      渲染节点的挂载、React 组件的生命周期、setState\n                      触发渲染更新、diff 策略与 patch\n                      方案。你会发现渲染流程中包含的内容很繁杂，有各种大大小小需要处理的事，而这些事用计算机科学中的专业术语来说，就是<strong\n                        data-nodeid=\"32125\"\n                        >事务</strong\n                      >。事务是无法被分割的，必须作为一个整体执行完成，不可能存在部分完成的事务。所以这里需要注意，事务具有<strong\n                        data-nodeid=\"32126\"\n                        >原子性</strong\n                      >，不可再分。\n                    </p>\n                    <p data-nodeid=\"31934\">\n                      了解了事务的基本概念后，还需要知道事务是通过<strong\n                        data-nodeid=\"32132\"\n                        >调度</strong\n                      >的方式协调执行的。\n                    </p>\n                    <p data-nodeid=\"31935\">\n                      虽然有了全局规划的调度，也有了具体的事务，但工作仍然不是一蹴而就的，在实际的工作中，我们往往是按<strong\n                        data-nodeid=\"32138\"\n                        >阶段进行划分</strong\n                      >的，比如项目启动阶段、项目开发阶段、项目提测阶段等。这样的划分模式以里程碑为节点，可以拆分子项，降低整体的复杂度，所以在渲染流程中也存在这样的阶段划分。\n                    </p>\n                    <p data-nodeid=\"31936\">\n                      这样，以不同阶段的事务与策略为主线，就可以做到“讲话有重点”了；以阶段划分节点，就可以做到“层次要分明”了。\n                    </p>\n                    <p data-nodeid=\"31937\">初步的答题框架就形成了。</p>\n                    <p data-nodeid=\"31938\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/7A/Ciqc1F_tr2KAUDQKAADuU-A-myg780.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"32143\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"31939\">入门</h3>\n                    <p data-nodeid=\"31940\">\n                      在逐级梳理之前，我们先讲一个在渲染流程中绝对绕不开的概念——协调。\n                    </p>\n                    <h4 data-nodeid=\"31941\">协调</h4>\n                    <p data-nodeid=\"31942\">\n                      协调，在 React 官方博客的原文中是\n                      Reconciler，它的本意是“和解者，调解员”。当你搜索与\n                      Reconciler\n                      相关的图片时，会出现很多握手、签字、相互拥抱的图片。\n                    </p>\n                    <p data-nodeid=\"31943\">\n                      协调是怎么跟 React 扯上关系的呢？React\n                      官方文档在介绍协调时，是这样说的：\n                    </p>\n                    <blockquote data-nodeid=\"31944\">\n                      <p data-nodeid=\"31945\">\n                        React 提供的声明式 API 让开发者可以在对 React\n                        的底层实现没有具体了解的情况下编写应用。在开发者编写应用时虽然保持相对简单的心智，但开发者无法了解内部的实现机制。本文描述了在实现\n                        React 的 “diffing”\n                        算法中我们做出的设计决策以保证组件满足更新具有可预测性，以及在繁杂业务下依然保持应用的高性能性。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"31946\">\n                      从上文中我们可以看出，Reconciler 是协助 React\n                      确认状态变化时要更新哪些 DOM 元素的 diff\n                      算法，这看上去确实有点儿调解员的意思。这是狭义上的\n                      Reconciler，也是<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=566#/detail/pc?id=5800\"\n                        data-nodeid=\"32153\"\n                        >第 10 讲“与其他框架相比，React 的 diff\n                        算法有何不同？”</a\n                      >中提过的内容。\n                    </p>\n                    <p data-nodeid=\"31947\">\n                      而在 React 源码中还有一个叫作 reconcilers\n                      的模块，它通过抽离公共函数与 diff\n                      算法使声明式渲染、自定义组件、state、生命周期方法和 refs\n                      等特性实现跨平台工作。\n                    </p>\n                    <p data-nodeid=\"31948\">\n                      Reconciler 模块以 React 16 为分界线分为两个版本。\n                    </p>\n                    <ul data-nodeid=\"31949\">\n                      <li data-nodeid=\"31950\">\n                        <p data-nodeid=\"31951\">\n                          <strong data-nodeid=\"32165\">Stack Reconciler</strong\n                          >是 React 15 及以前版本的渲染方案，其核心是以<strong\n                            data-nodeid=\"32166\"\n                            >递归的方式</strong\n                          >逐级调度栈中子节点到父节点的渲染。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31952\">\n                        <p data-nodeid=\"31953\">\n                          <strong data-nodeid=\"32175\">Fiber Reconciler</strong\n                          >是 React 16\n                          及以后版本的渲染方案，它的核心设计是<strong\n                            data-nodeid=\"32176\"\n                            >增量渲染</strong\n                          >（incremental\n                          rendering），也就是将渲染工作分割为多个区块，并将其分散到多个帧中去执行。它的设计初衷是提高\n                          React 在动画、画布及手势等场景下的性能表现。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"31954\">\n                      两者的性能差距究竟有多大呢？既然主打的是高性能场景，那么在一般的中后台页面、前端\n                      H5 下，很难看出两者之间的性能差距。但你在尝试这个\n                      <a\n                        href=\"https://claudiopro.github.io/react-fiber-vs-stack-demo\"\n                        data-nodeid=\"32180\"\n                        >demo</a\n                      >\n                      之后，就能明显地体会到了。\n                    </p>\n                    <h4 data-nodeid=\"31955\">渲染</h4>\n                    <p data-nodeid=\"31956\">\n                      为了更好地理解两者之间的差异，我们需要先梳理一遍 Stack\n                      Reconciler。\n                    </p>\n                    <p data-nodeid=\"31957\">\n                      <strong data-nodeid=\"32187\">Stack Reconciler</strong>\n                    </p>\n                    <p data-nodeid=\"31958\">\n                      Stack Reconciler 没有单独的包，并没有像 Fiber Reconclier\n                      一样抽取为独立的<a\n                        href=\"https://github.com/facebook/react/tree/16.3-dev/packages/react-reconciler\"\n                        data-nodeid=\"32191\"\n                        >React-Reconciler 模块</a\n                      >。但这并不妨碍它成为一个经典的设计。在 React\n                      的官方文档中，是通过伪代码的形式介绍其<a\n                        href=\"https://react.html.cn/docs/implementation-notes.html\"\n                        data-nodeid=\"32195\"\n                        >实现方案</a\n                      >的。与官方文档略有不同，下面我会介绍一些真实代码的信息。\n                    </p>\n                    <p data-nodeid=\"31959\">\n                      <strong data-nodeid=\"32200\">挂载</strong>\n                    </p>\n                    <p data-nodeid=\"31960\">\n                      这里的挂载与生命周期一讲中的挂载不同，它是将整个 React\n                      挂载到 ReactDOM.render 之上，就像以下代码中的 App\n                      组件挂载到 root 节点上一样。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">class App extends React.Component {\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    return (\n</div></li><li><div class=\"code-word\">        &lt;div&gt;Hello World&lt;/div&gt;\n</div></li><li><div class=\"code-word\">      )\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\">ReactDOM.render(&lt;App /&gt;, document.getElementById('root'))\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"31962\">\n                      还记得在 JSX 一讲中所提到的吗？JSX 会被 Babel 编译成\n                      React.creatElemnt 的形式：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">ReactDOM.render(React.creatElement(App), document.getElementById(<span class=\"hljs-string\">'root'</span>))\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"31964\">\n                      但一定要记住，这项工作发生在本地的 Node\n                      进程中，而不是通过浏览器中的 React\n                      完成的。在以往的面试中，就有应聘的同学以为 JSX 是通过\n                      React 完成编译，这是完全不正确的。\n                    </p>\n                    <p data-nodeid=\"31965\">\n                      ReactDOM.render 调用之后，实际上是<strong\n                        data-nodeid=\"32209\"\n                        >透传参数给 ReactMount.render</strong\n                      >。\n                    </p>\n                    <ul data-nodeid=\"31966\">\n                      <li data-nodeid=\"31967\">\n                        <p data-nodeid=\"31968\">\n                          ReactDOM 是对外暴露的模块接口；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31969\">\n                        <p data-nodeid=\"31970\">\n                          而 ReactMount 是实际执行者，完成初始化 React\n                          组件的整个过程。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"31971\">\n                      初始化第一步就是通过 React.creatElement 创建 React\n                      Element。不同的组件类型会被构建为不同的 Element：\n                    </p>\n                    <ul data-nodeid=\"31972\">\n                      <li data-nodeid=\"31973\">\n                        <p data-nodeid=\"31974\">\n                          App 组件会被标记为 type\n                          function，作为用户自定义的组件，被\n                          ReactComponentsiteComponent\n                          包裹一次，生成一个对象实例；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31975\">\n                        <p data-nodeid=\"31976\">\n                          div 标签作为 React 内部的已知 DOM 类型，会实例化为\n                          ReactDOMComponent；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31977\">\n                        <p data-nodeid=\"31978\">\n                          \"Hello World\" 会被直接判断是否为字符串，实例化为\n                          ReactDOMComponent。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"31979\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/85/CgqCHl_tr1KABoL9AAELd_UE-Q4687.png\"\n                        alt=\"图片3.png\"\n                        data-nodeid=\"32221\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31980\">\n                      这段逻辑在 React 源码中大致是这样的，其中\n                      isInternalComponentType\n                      就是判断当前的组件是否为内部已知类型。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (typeof element.type === <span class=\"hljs-string\">'string'</span>) {\n</div></li><li><div class=\"code-word\">    instance = ReactHostComponent.createInternalComponent(element);\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isInternalComponentType(element.type)) {\n</div></li><li><div class=\"code-word\">    instance = <span class=\"hljs-keyword\">new</span> element.type(element);\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    instance = <span class=\"hljs-keyword\">new</span> ReactCompositeComponentWrapper();\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"31982\">\n                      到这里仅仅完成了实例化，我们还需要与 React\n                      产生一些联动，比如改变状态、更新界面等。在 setState\n                      一讲中，我们提到在状态变更后，涉及一个变更收集再批量处理的过程。在这里\n                      ReactUpdates 模块就专门<strong data-nodeid=\"32228\"\n                        >用于批量处理</strong\n                      >，而批量处理的前后操作，是由 React\n                      通过建立事务的概念来处理的。\n                    </p>\n                    <p data-nodeid=\"31983\">\n                      React 事务都是基于 Transaction 类继承拓展。每个\n                      Transaction\n                      实例都是一个封闭空间，保持不可变的任务常量，并提供对应的事务处理接口\n                      。一段事务在 React 源码中大致是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">mountComponentIntoNode: function(rootID, container) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">var</span> transaction = ReactComponent.ReactReconcileTransaction.getPooled();\n</div></li><li><div class=\"code-word\">      transaction.perform(\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>._mountComponentIntoNode,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>,\n</div></li><li><div class=\"code-word\">        rootID,\n</div></li><li><div class=\"code-word\">        container,\n</div></li><li><div class=\"code-word\">        transaction\n</div></li><li><div class=\"code-word\">      );\n</div></li><li><div class=\"code-word\">      ReactComponent.ReactReconcileTransaction.release(transaction);\n</div></li><li><div class=\"code-word\"> }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"31985\">\n                      如果有操作数据库经验的同学，应该看到过相似的例子。React\n                      团队将其从后端领域借鉴到前端是因为事务的设计有以下优势。\n                    </p>\n                    <ul data-nodeid=\"31986\">\n                      <li data-nodeid=\"31987\">\n                        <p data-nodeid=\"31988\">\n                          原子性:\n                          事务作为一个整体被执行，要么全部被执行，要么都不执行。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31989\">\n                        <p data-nodeid=\"31990\">\n                          隔离性:\n                          多个事务并发执行时，一个事务的执行不应影响其他事务的执行。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31991\">\n                        <p data-nodeid=\"31992\">\n                          一致性: 相同的输入，确定能得到同样的执行结果。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"31993\">\n                      上面提到的事务会调用\n                      ReactCompositeComponent.mountComponent 函数进入 React\n                      组件生命周期，它的源码大致是这样的。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (inst.componentWillMount) {\n</div></li><li><div class=\"code-word\">    inst.componentWillMount();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>._pendingStateQueue) {\n</div></li><li><div class=\"code-word\">        inst.state = <span class=\"hljs-keyword\">this</span>._processPendingState(inst.props, inst.context);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"31995\">\n                      首先会判断是否有 componentWillMount，然后初始化 state\n                      状态。当 state 计算完毕后，就会调用在 App 组件中声明的\n                      render 函数。接着 render 返回的结果，会处理为新的 React\n                      Element，再走一遍上面提到的流程，不停地往下解析，逐步递归，直到开始处理\n                      HTML 元素。到这里我们的 App 组件就完成了首次渲染。\n                    </p>\n                    <p data-nodeid=\"31996\">\n                      <strong data-nodeid=\"32239\">更新</strong>\n                    </p>\n                    <p data-nodeid=\"31997\">\n                      接下来我们用同样的方式解析下当调用 setState\n                      时会发生什么。setState 时会调用 Component 类中的\n                      enqueueSetState 函数。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">this</span>.updater.enqueueSetState(<span class=\"hljs-keyword\">this</span>, partialState)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"31999\">\n                      在执行 enqueueSetState 后，会调用 ReactCompositeComponent\n                      实例中的_pendingStateQueue，将新的状态变更加入实例的等待更新状态队列中，再调用ReactUpdates\n                      模块中的 enqueueUpdate\n                      函数执行更新。这个过程会检查更新是否已经在进行中：\n                    </p>\n                    <ul data-nodeid=\"32000\">\n                      <li data-nodeid=\"32001\">\n                        <p data-nodeid=\"32002\">\n                          如果是，则把组件加入 dirtyComponents 中；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"32003\">\n                        <p data-nodeid=\"32004\">\n                          如果不是，先初始化更新事务，然后把组件加入\n                          dirtyComponents 列表。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"32005\">\n                      这里的初始化更新事务，就是 setState 一讲中提到的\n                      batchingstrategy.isBatchingUpdates\n                      开关。接下来就会在更新事务中处理所有记录的\n                      dirtyComponents。\n                    </p>\n                    <p data-nodeid=\"32006\">\n                      <strong data-nodeid=\"32250\">卸载</strong>\n                    </p>\n                    <p data-nodeid=\"32007\">\n                      对于自定义组件，也就是对 ReactCompositeComponent\n                      而言，卸载过程需要递归地调用生命周期函数。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CompositeComponent</span></span>{\n</div></li><li><div class=\"code-word\">  unmount(){\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> publicInstance = <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-function\">publicInstance\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">if</span><span class=\"hljs-params\">(publicInstance)</span>{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span>(publicInstance.componentWillUnmount){\n</div></li><li><div class=\"code-word\">        publicInstance.componentWillUnmount()\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> renderedComponent = <span class=\"hljs-keyword\">this</span>.renderedComponent\n</div></li><li><div class=\"code-word\">    renderedComponent.unmount()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"32009\">\n                      而对于 ReactDOMComponent\n                      而言，卸载子元素需要清除事件监听器并清理一些缓存。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DOMComponent</span></span>{\n</div></li><li><div class=\"code-word\">  unmount(){\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> renderedChildren = <span class=\"hljs-keyword\">this</span>.renderedChildren\n</div></li><li><div class=\"code-word\">    renderedChildren.forEach(child =&gt; child.unmount())\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"32011\">\n                      那么到这里，卸载的过程就算完成了。\n                    </p>\n                    <p data-nodeid=\"32012\">\n                      <strong data-nodeid=\"32257\">小结</strong>\n                    </p>\n                    <p data-nodeid=\"32013\">\n                      从以上的流程中我们可以看出，React 渲染的整体策略是<strong\n                        data-nodeid=\"32290\"\n                        >递归</strong\n                      >，并通过事务建立 React 与虚拟DOM\n                      的联系并完成调度。如果对整体函数调用流程感兴趣的同学，可以查看这个[全景大图](https://bogda\n                      n-lyashenko.github.io/Under-the-hood-ReactJS/stack/images/intro/all-page-stack-reconciler.svg)。\n                    </p>\n                    <p data-nodeid=\"32014\">\n                      <strong data-nodeid=\"32294\">Fiber Reconciler</strong>\n                    </p>\n                    <p data-nodeid=\"32015\">\n                      为了避免全文过于冗长，也因为主要流程大致相同，所以我就不再赘述与\n                      Stack Reconciler\n                      相似的地方，主要讲一讲不一样的地方。那第一个不同点是，Stack\n                      和 Fiber 的不同。Stack 是栈，那 Fiber\n                      是什么呢？我们需要先理解什么是 Fiber。\n                    </p>\n                    <p data-nodeid=\"32016\">\n                      <strong data-nodeid=\"32299\">Fiber</strong>\n                    </p>\n                    <p data-nodeid=\"32017\">\n                      Fiber 同样是一个借来的概念，在系统开发中，指一种<strong\n                        data-nodeid=\"32313\"\n                        >最轻量化</strong\n                      >的线程。与一般线程不同的是，Fiber\n                      对于系统内核是不可见的，也不能由内核进行调度。它的运行模式被称为<strong\n                        data-nodeid=\"32314\"\n                        >协作式多任务</strong\n                      >，而线程采用的模式是<strong data-nodeid=\"32315\"\n                        >抢占式多任务</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"32018\">这有什么不同呢？</p>\n                    <ul data-nodeid=\"32019\">\n                      <li data-nodeid=\"32020\">\n                        <p data-nodeid=\"32021\">\n                          在协作式多任务模式下，线程会定时放弃自己的运行权利，告知内核让下一个线程运行；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"32022\">\n                        <p data-nodeid=\"32023\">\n                          而在抢占式下，内核决定调度方案，可以直接剥夺长耗时线程的时间片，提供给其他线程。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"32024\">\n                      回到浏览器中，浏览器无法实现抢占式调度，那为了提升可用性与流畅度，React\n                      在设计上只能采用合作式调度的方案：将渲染任务拆分成多段，每次只执行一段，完成后就把时间控制权交还给主线程，这就是得名\n                      Fiber Reconciler 的原因。\n                    </p>\n                    <p data-nodeid=\"32025\">\n                      在 Fiber Reconciler 还引入了两个新的概念，分别是 Fiber 与\n                      effect。\n                    </p>\n                    <ul data-nodeid=\"32026\">\n                      <li data-nodeid=\"32027\">\n                        <p data-nodeid=\"32028\">\n                          在 React Element 的基础上，通过 createFiberFromElement\n                          函数创建 Fiber 对象。Fiber 不仅包含 React\n                          Element，还包含了指向父、子、兄弟节点的属性，保证\n                          Fiber 构成的虚拟 DOM 树成为一个双向链表。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"32029\">\n                        <p data-nodeid=\"32030\">\n                          effect 是指在协调过程中必须执行计算的活动。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"32031\">\n                      有了 Fiber 的基础认知后，我们就可以进入 Fiber Reconciler\n                      的协调过程了。\n                    </p>\n                    <p data-nodeid=\"32032\">\n                      <strong data-nodeid=\"32327\">协调</strong>\n                    </p>\n                    <p data-nodeid=\"32033\">\n                      React 团队的 Dan Abramov 画了一张基于 Fiber Reconciler\n                      生命周期阶段图，其中协调过程被分为了两部分：Render 和\n                      commit。\n                    </p>\n                    <p data-nodeid=\"32034\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/78/Ciqc1F_tm3OADjaqAAGVxU_0Bpg907.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"32331\"\n                      />\n                    </p>\n                    <div data-nodeid=\"32035\">\n                      <p style=\"text-align: center\">图片来自 React 官网</p>\n                    </div>\n                    <p data-nodeid=\"32036\">\n                      <strong data-nodeid=\"32335\">Render</strong>\n                    </p>\n                    <p data-nodeid=\"32037\">\n                      Render 阶段主要是通过构造 workInProgress 树计算出 diff。以\n                      current 树为基础，将每个 Fiber\n                      作为一个基本单位，自下而上逐个节点检查并构造\n                      workInProgress 树。这个过程不再是递归，而是基于<strong\n                        data-nodeid=\"32341\"\n                        >循环</strong\n                      >来完成。\n                    </p>\n                    <p data-nodeid=\"32038\">\n                      在执行上通过 requestIdleCallback\n                      来调度执行每组任务，每组中的每个计算任务被称为 work，每个\n                      work 完成后确认是否有优先级更高的 work\n                      需要插入，如果有就让位，没有就继续。优先级通常标记为动画或者\n                      high\n                      的会先处理。每完成一组后，将调度权交回主线程，直到下一次\n                      requestIdleCallback 调用，再继续构建 workInProgress 树。\n                    </p>\n                    <p data-nodeid=\"32039\">\n                      <strong data-nodeid=\"32346\">Commit</strong>\n                    </p>\n                    <p data-nodeid=\"32040\">\n                      在 Commit 阶段处理 effect 列表，这里的 effect\n                      列表包含了根据 diff 更新 DOM 树、回调生命周期、响应 ref\n                      等。\n                    </p>\n                    <p data-nodeid=\"32041\">\n                      但一定要注意，这个阶段是同步执行的，不可中断暂停，所以不要在\n                      componentDidMount、componentDidUpdate、componentWiilUnmount\n                      中执行重度消耗算力的任务。\n                    </p>\n                    <p data-nodeid=\"32042\">\n                      <strong data-nodeid=\"32352\">小结</strong>\n                    </p>\n                    <p data-nodeid=\"32043\">\n                      在上面的讲述中，省去了挂载与更新流程，这里稍微补充下，在挂载阶段，\n                      ReactMount 模块已经不存在了，是直接构造 Fiber\n                      树。而更新流程大致一样，依然通过 IsBatchingUpdates\n                      控制。那么 Fiber Reconciler 最大的不同有两点：\n                    </p>\n                    <ul data-nodeid=\"32044\">\n                      <li data-nodeid=\"32045\">\n                        <p data-nodeid=\"32046\">协作式多任务模式；</p>\n                      </li>\n                      <li data-nodeid=\"32047\">\n                        <p data-nodeid=\"32048\">基于循环遍历计算 diff。</p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"32049\">答题</h3>\n                    <blockquote data-nodeid=\"32050\">\n                      <p data-nodeid=\"32051\">\n                        React 的渲染过程大致一致，但协调并不相同，以 React 16\n                        为分界线，分为 Stack Reconciler 和 Fiber\n                        Reconciler。这里的协调从狭义上来讲，特指 React 的 diff\n                        算法，广义上来讲，有时候也指 React 的 reconciler\n                        模块，它通常包含了 diff 算法和一些公共逻辑。\n                      </p>\n                      <p data-nodeid=\"32052\">\n                        回到 Stack Reconciler 中，Stack Reconciler\n                        的核心调度方式是递归。调度的基本处理单位是事务，它的事务基类是\n                        Transaction，这里的事务是 React\n                        团队从后端开发中加入的概念。在 React 16\n                        以前，挂载主要通过 ReactMount 模块完成，更新通过\n                        ReactUpdate\n                        模块完成，模块之间相互分离，落脚执行点也是事务。\n                      </p>\n                      <p data-nodeid=\"32053\">\n                        在 React 16 及以后，协调改为了 Fiber\n                        Reconciler。它的调度方式主要有两个特点，第一个是协作式多任务模式，在这个模式下，线程会定时放弃自己的运行权利，交还给主线程，通过requestIdleCallback\n                        实现。第二个特点是策略优先级，调度任务通过标记 tag\n                        的方式分优先级执行，比如动画，或者标记为 high\n                        的任务可以优先执行。Fiber Reconciler的基本单位是\n                        Fiber，Fiber 基于过去的 React Element\n                        提供了二次封装，提供了指向父、子、兄弟节点的引用，为\n                        diff 工作的双链表实现提供了基础。\n                      </p>\n                      <p data-nodeid=\"32054\">\n                        在新的架构下，整个生命周期被划分为 Render 和 Commit\n                        两个阶段。Render\n                        阶段的执行特点是可中断、可停止、无副作用，主要是通过构造\n                        workInProgress 树计算出 diff。以 current\n                        树为基础，将每个 Fiber\n                        作为一个基本单位，自下而上逐个节点检查并构造\n                        workInProgress\n                        树。这个过程不再是递归，而是基于循环来完成。\n                      </p>\n                      <p data-nodeid=\"32055\">\n                        在执行上通过 requestIdleCallback\n                        来调度执行每组任务，每组中的每个计算任务被称为\n                        work，每个 work 完成后确认是否有优先级更高的 work\n                        需要插入，如果有就让位，没有就继续。优先级通常是标记为动画或者\n                        high\n                        的会先处理。每完成一组后，将调度权交回主线程，直到下一次\n                        requestIdleCallback 调用，再继续构建 workInProgress 树。\n                      </p>\n                      <p data-nodeid=\"32056\">\n                        在 commit 阶段需要处理 effect 列表，这里的 effect\n                        列表包含了根据 diff 更新 DOM 树、回调生命周期、响应 ref\n                        等。\n                      </p>\n                      <p data-nodeid=\"32057\">\n                        但一定要注意，这个阶段是同步执行的，不可中断暂停，所以不要在\n                        componentDidMount、componentDidUpdate、componentWiilUnmount\n                        中去执行重度消耗算力的任务。\n                      </p>\n                      <p data-nodeid=\"32058\">\n                        如果只是一般的应用场景，比如管理后台、H5\n                        展示页等，两者性能差距并不大，但在动画、画布及手势等场景下，Stack\n                        Reconciler 的设计会占用占主线程，造成卡顿，而 fiber\n                        reconciler 的设计则能带来高性能的表现。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"32059\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/83/CgqCHl_tm5OAarlJAAJVi8u3-KU747.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"32367\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"32060\">进阶</h3>\n                    <p data-nodeid=\"32061\">\n                      在面试中，在你回答完以上讲到的内容后，面试官还会补充提问一个类似脑筋急转弯的小问题：\n                    </p>\n                    <p data-nodeid=\"32062\">\n                      <strong data-nodeid=\"32373\"\n                        >为什么 Stack Reconciler 模式下 render 函数不支持 return\n                        数组？</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"32063\">\n                      你想呀**，**Stack Reconciler\n                      采用的是递归遍历的模式，那么在递归的情况下就只能返回一个节点元素，肯定就不支持数组了。\n                    </p>\n                    <h3 data-nodeid=\"32064\">总结</h3>\n                    <p data-nodeid=\"32065\">\n                      在本讲中，从渲染流程的角度解析了 React\n                      协调这一重要概念，但值得注意的是 Fiber Reconciler\n                      还不是一个最终的完成品，其中并发模式并不是默认启用，还处于开发阶段，目前仍然是在同步模式下启用。\n                    </p>\n                    <p data-nodeid=\"32066\">\n                      在介绍渲染流程之后，下一讲我将从工程化的角度讲解，渲染异常后会出现什么情况以及该怎么办，到时见！\n                    </p>\n                    <hr data-nodeid=\"32067\" />\n                    <p data-nodeid=\"32068\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"32388\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image/M00/72/94/Ciqc1F_EZ0eANc6tAASyC72ZqWw643.png\"\n                          alt=\"Drawing 2.png\"\n                          data-nodeid=\"32387\"\n                      /></a>\n                    </p>\n                    <p data-nodeid=\"32069\">《大前端高薪训练营》</p>\n                    <p data-nodeid=\"32070\" class=\"te-preview-highlight\">\n                      对标阿里 P7 技术需求 + 每月大厂内推，6\n                      个月助你斩获名企高薪 Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"32393\"\n                        >点击链接</a\n                      >，快来领取！\n                    </p>\n            "}