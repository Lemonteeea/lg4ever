{"title":"12 | 面向对象原则：面向对象编程框架到底长什么样？","context":"\n                    <p data-nodeid=\"1205\" class=\"\">\n                      说到面向对象编程，有一个原则几乎每个程序员都知道，那就是\n                      SOLID\n                      原则。关于它的资料介绍也非常丰富，实践例子也很多。但实际上你很可能把\n                      SOLID 原则都用错了，并且还无意识地一直在滥用它。\n                    </p>\n                    <p data-nodeid=\"1206\">\n                      之所以这么说，一方面是因为很多时候你都将每一个原则分开使用，容易造成过度解读。比如，在使用接口隔离原则时容易只关心接口，而忽略不同实现，或者不关心接口之间的关系以及和整体系统之间的关系。另一方面是因为它总是能让你无意识地将简单的问题复杂化。比如，明明只需要写一个一次性同步数据的方法，然后写完即扔，但是突然想到\n                      SOLID\n                      原则，于是又搞出来十几个多余的类。有了锤子，总是容易想去找钉子，殊不知有时就完全不需要锤子，只需要一把小刀即可解决问题。\n                    </p>\n                    <p data-nodeid=\"1207\">\n                      那么 SOLID\n                      原则到底长什么样子？各原则之间有什么联系和区别？该如何正确理解呢？今天，我们就来一起学习下这五大面向对象设计原则，也就是我们所说的\n                      SOLID 原则。\n                    </p>\n                    <h3 data-nodeid=\"1208\">五大设计原则概览</h3>\n                    <p data-nodeid=\"1209\">\n                      2000 年，Robert C. Martin\n                      在他的《设计原理和设计模式》这一论文中首次提出 SOLID\n                      原则的概念。然后，在过去的 20 年中，这 5\n                      条原则彻底改变了面向对象编程的世界，改变了我们编写软件的方式。\n                    </p>\n                    <p data-nodeid=\"1210\">\n                      <strong data-nodeid=\"1314\"\n                        >SOLID\n                        原则的核心理念是帮助我们构建可维护和可扩展的软件</strong\n                      >。因为随着软件规模的扩大，一个人维护所有的代码越来越困难，这时就需要更多的人来维护代码，而多人协作的关键在于相互通信与协作，恰好\n                      SOLID 原则提供了这样一个框架。\n                    </p>\n                    <p data-nodeid=\"1211\">\n                      <strong data-nodeid=\"1318\"\n                        >“SOILD”是由五大原则的英文首字母拼写而成，具体对应情况如下。</strong\n                      >\n                    </p>\n                    <ul data-nodeid=\"1212\">\n                      <li data-nodeid=\"1213\">\n                        <p data-nodeid=\"1214\">\n                          S（Single Responsibility Principle，简称\n                          SRP）：单一职责原则，意思是对象应该仅具有一种单一的功能。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1215\">\n                        <p data-nodeid=\"1216\">\n                          O（Open–Closed Principle，简称\n                          OCP）：开闭原则，也就是程序对于扩展开放，对于修改封闭。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1217\">\n                        <p data-nodeid=\"1218\">\n                          L（Liskov Substitution Principle，简称\n                          LSP）：里氏替换原则，程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1219\">\n                        <p data-nodeid=\"1220\">\n                          I（Interface Segregation Principle，简称\n                          ISP）：接口隔离原则，多个特定客户端接口要好于一个宽泛用途的接口。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1221\">\n                        <p data-nodeid=\"1222\">\n                          D（Dependency Inversion Principle，简称\n                          DIP）：依赖反转原则，该原则认为一个方法应该遵从“依赖于抽象而不是一个实例”。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1223\">接下来，我们就来逐一学习它们。</p>\n                    <h4 data-nodeid=\"1224\">1. 单一职责原则（SRP）</h4>\n                    <p data-nodeid=\"1225\">\n                      单一职责原则（SRP）的原意是：<strong data-nodeid=\"1332\"\n                        >对一个类而言，应该仅有一个引起它变化的原因。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1226\">但对此，我们通常更容易这么来理解：</p>\n                    <ul data-nodeid=\"1227\">\n                      <li data-nodeid=\"1228\">\n                        <p data-nodeid=\"1229\">只有一个类或方法；</p>\n                      </li>\n                      <li data-nodeid=\"1230\">\n                        <p data-nodeid=\"1231\">写好就不能修改的类或方法；</p>\n                      </li>\n                      <li data-nodeid=\"1232\">\n                        <p data-nodeid=\"1233\">一个接口对应唯一一个实现。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1234\">\n                      上面这些理解不能说完全错，但是只抓住了单一职责原则（SRP）本质上重要的两点中的一点——<strong\n                        data-nodeid=\"1350\"\n                        >单一</strong\n                      >，而忘记了另一个也很重要的点——<strong data-nodeid=\"1351\"\n                        >职责</strong\n                      >。在上一讲中，我们有介绍过“职责”可以定义为“<strong\n                        data-nodeid=\"1352\"\n                        >变化的原因”</strong\n                      >。下面我们就来讲讲为什么那三种理解方式不够准确。\n                    </p>\n                    <ul data-nodeid=\"1235\">\n                      <li data-nodeid=\"1236\">\n                        <p data-nodeid=\"1237\">\n                          职责不一定只有一个类或方法，还可能有多个类或方法，比如，上传文件是单一职责，而上传方法、增删改查\n                          URL 方法、校验方法都服务于上传文件。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1238\">\n                        <p data-nodeid=\"1239\">\n                          不能修改的类或方法本质上有很多影响因素，比如，代码长时间没有维护、设计时没有预留扩展接口，等等。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1240\">\n                        <p data-nodeid=\"1241\">\n                          一个接口对应一个实现并不能说职责是单一的，因为一个接口中可能会存在没有划分清楚的职责。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1242\">\n                      为帮助你更好地理解，这里我们举一个简单的例子，假设有一个书籍类，保存书籍的名称、作者、内容，提供文字修订服务和查询服务，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String name;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String author;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String text;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//constructor, getters and setters</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">replaceWordInText</span><span class=\"hljs-params\">(String word)</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> text.replaceAll(word, text);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isWordInText</span><span class=\"hljs-params\">(String word)</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> text.contains(word);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1244\">\n                      整体服务运行良好。但是，有人说只是保存书的信息，不提供打印和阅读功能，岂不是很浪费资源。于是，我们立即加了打印和阅读的服务，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Book</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//...</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//打印服务</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printText</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//具体实现</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//阅读服务</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getToRead</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//具体实现</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1246\">\n                      到此，你很容易发现，当打印服务需要针对不同的客服端进行适配时，书籍类就需要多次反复地进行修改，那么不同的类实例需要修改的地方就会越来越多，系统明显变得更加脆弱，同时也违反了\n                      SRP。\n                    </p>\n                    <p data-nodeid=\"5196\" class=\"te-preview-highlight\">\n                      所以说，当你在理解 SRP 时，一定要抓住一个重点：<strong\n                        data-nodeid=\"5202\"\n                        >职责是否具有唯一性</strong\n                      >。当你有多个动机来改变一个类时，那么职责就多于一个，也就违反了\n                      SRP。\n                    </p>\n\n                    <h4 data-nodeid=\"1248\">2. 开闭原则（OCP）</h4>\n                    <p data-nodeid=\"1249\">\n                      开闭原则最初是由 Bertrand Meyer 在 20 世纪 80\n                      年代提出的，被称为“面向对象设计中的最重要原理”。\n                    </p>\n                    <p data-nodeid=\"1250\">\n                      开闭原则是指软件组件（类、方法、模块等）应该对扩展开发，对修改关闭。这就意味着当<strong\n                        data-nodeid=\"1375\"\n                        >你在设计或修改程序代码时，应该尽量去扩展原有程序，而不是修改原有程序</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1251\">\n                      不过在我看来，<strong data-nodeid=\"1381\"\n                        >开闭原则更像是一个框架的设计原则，而不是具体的业务编码技巧</strong\n                      >。因为在实际业务编码实现中，需求变化总是快于技术更新，直接修改业务代码的时间成本有时会比扩展的时间成本低很多，所以说，在非常细节的业务编码实现中，只扩展而不修改原始的代码几乎很难做到，反倒是在框架、类库或架构设计中常常更容易实现开闭原则。即便强行在编码实现中这样做，也会导致过多的冗余类产生，并导致最终系统整体调用关系复杂。\n                    </p>\n                    <p data-nodeid=\"1252\">\n                      同样，这里我们用一个简单的例子来帮助你理解开闭原则。如果你基于\n                      Spring JDBC 写过不同 DataSource\n                      进行读写分离的代码，就会对开闭原则有一个大致了解。具体代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span>  <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractDataSource</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> readDsSize;\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Connection <span class=\"hljs-title\">getConnection</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> SQLException </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.determineTargetDataSource().getConnection();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Connection <span class=\"hljs-title\">getConnection</span><span class=\"hljs-params\">(String username, String password)</span> <span class=\"hljs-keyword\">throws</span> SQLException </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.determineTargetDataSource().getConnection(username, password);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> DataSource <span class=\"hljs-title\">determineTargetDataSource</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (determineCurrentLookupKey() &amp;&amp; <span class=\"hljs-keyword\">this</span>.readDsSize &gt; <span class=\"hljs-number\">0</span>){\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">//读库做负载均衡（从库）</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.loadBalance();\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">//写库使用主库</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.getResolvedMasterDataSource();\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">determineCurrentLookupKey</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//其他代码省略</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1254\">\n                      上面这段代码的大致意思是说，通过继承 AbstractDataSource\n                      类，可以重新构造不同的\n                      DataSource，以达到读库使用从库（做负载均衡）、写库使用主库的目的。这里虽然我们不能修改\n                      Spring JDBC\n                      的代码，但是我们可以通过扩展来实现更复杂的场景。\n                    </p>\n                    <p data-nodeid=\"1255\">\n                      这就是我们前面说的开闭原则的一种具体体现，很多时候我们总是会使用各种不同的工具和框架，不可能做到所有工具的自行开发，这时通过开闭原则就能进行很多的扩展与改进，而不需要重复造轮子。\n                    </p>\n                    <h4 data-nodeid=\"1256\">3. 里氏替换原则（LSP）</h4>\n                    <p data-nodeid=\"1257\">\n                      里氏替换原则（LSP）这个名字看上去虽然有点奇怪，但是在面向对象编程中，它却是使用频率非常高的一个原则。\n                    </p>\n                    <p data-nodeid=\"1258\">\n                      <strong data-nodeid=\"1393\"\n                        >里氏替换原则（LSP）的原意是：子类应该能够完全替换掉它的基类。换句话说，在进行代码设计时，应该尽量保持子类和父类方法行为的一致性</strong\n                      >。这样做的好处在于，即便是扩展子类，也不会丢失父类的特性。同时，里氏替换原则（LSP）也是针对接口编程的最佳实践原则之一，因为某一个接口定义的功能不改变，那么就可以使用很多不同算法的代码来替换同一个接口的功能。\n                    </p>\n                    <p data-nodeid=\"1259\">\n                      比如，Spring 中提供的自定义属性编辑器，可以解析 HTTP\n                      请求参数中的自定义格式进行绑定并转换为格式输出。只要遵循基类（PropertyEditorSupport）的约束定义，就能为某种数据类型注册一个属性编辑器。我们先定义一个类\n                      DefineFormat，具体代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DefineFormat</span></span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String rawStingFormat;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String uid;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String&nbsp;toAppCode;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String&nbsp;fromAppCode;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> Sting timestamp;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 省略构造函数和get, set方法</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1261\">\n                      然后，创建一个 Restful API 接口，用于输入自定义的请求\n                      URL。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-meta\">@GetMapping(value = \"/api/{d-format}\", \n</span></div></li><li><div class=\"code-word\">public DefineFormat parseDefineFormat&nbsp;(\n</div></li><li><div class=\"code-word\">    @PathVariable(\"d-format\") DefineFormat defineFormat) {\n</div></li><li><div class=\"code-word\">    return defineFormat;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1263\">\n                      接下来，创建\n                      DefineFormatEditor，实现输入自定义字符串，返回自定义格式\n                      json 数据。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DefineFormatEditor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">PropertyEditorSupport</span> </span>{\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//setAsText（）&nbsp;用于将String转换为另一个对象</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAsText</span><span class=\"hljs-params\">(String text)</span> <span class=\"hljs-keyword\">throws</span> IllegalArgumentException </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(text)) {\n</div></li><li><div class=\"code-word\">            setValue(<span class=\"hljs-keyword\">null</span>);\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            DefineFormat df = <span class=\"hljs-keyword\">new</span> DefineFormat();\n</div></li><li><div class=\"code-word\">            df.setRawStingFormat(text);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">            String[] data = text.spilt(<span class=\"hljs-string\">\"-\"</span>);\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (data.length == <span class=\"hljs-number\">4</span>) {\n</div></li><li><div class=\"code-word\">              df.setUid(data[<span class=\"hljs-number\">0</span>]);\n</div></li><li><div class=\"code-word\">              df.setToAppCode(data[<span class=\"hljs-number\">1</span>]);\n</div></li><li><div class=\"code-word\">              df.setFromAppCode(data[<span class=\"hljs-number\">2</span>]);\n</div></li><li><div class=\"code-word\">              df.setTimestamp(data[<span class=\"hljs-number\">3</span>]);\n</div></li><li><div class=\"code-word\">              setValue(df);\n</div></li><li><div class=\"code-word\">            } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">              setValue(<span class=\"hljs-keyword\">null</span>);\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//将对象序列化为String时，将调用getAsText（）方法</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getAsText</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        DefineFormat defineFormat= (DefineFormat) getValue();\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>&nbsp;== defineFormat ? <span class=\"hljs-string\">\"\"</span> :    defineFormat.getRawStingFormat();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1265\">\n                      最后，输入\n                      url：/api/dlewgvi8we-toapp-fromapp-zzzzzzz，返回响应。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">    \"rawStingFormat:\"dlewgvi8we-toapp-fromapp-zzzzzz\",\n</div></li><li><div class=\"code-word\">    \"uid:\"dlewgvi8we\",\n</div></li><li><div class=\"code-word\">    \"toAppCode\":\"toapp\",\n</div></li><li><div class=\"code-word\">    \"fromAppCode\":\"fromapp\",\n</div></li><li><div class=\"code-word\">    \"message\":\"zzzzzzz\"\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1267\">\n                      到此你会发现，使用里氏替换原则（LSP）的本质就是<strong\n                        data-nodeid=\"1403\"\n                        >通过继承实现多态行为</strong\n                      >，这在面向对象编程中是非常重要的一个技巧，对于提高代码的扩展性是很有帮助的。\n                    </p>\n                    <h4 data-nodeid=\"1268\">4. 接口隔离原则（ISP）</h4>\n                    <p data-nodeid=\"1269\">\n                      如果说单一职责原则（SRP）是适用于<strong\n                        data-nodeid=\"1416\"\n                        >类</strong\n                      >的设计原则，那么接口隔离原则（ISP）就是适合<strong\n                        data-nodeid=\"1417\"\n                        >接口</strong\n                      >的设计原则。\n                    </p>\n                    <p data-nodeid=\"1270\">\n                      接口隔离原则（ISP）的原意是：<strong data-nodeid=\"1423\"\n                        >不应该强迫用户依赖于他们不用的方法</strong\n                      >。那么什么情况下会造成“被强迫”呢？答案就是：当你在接口中有多余的定义时。比如下面代码中的接口定义：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ICRUD</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(T t)</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(T t)</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\">T <span class=\"hljs-title\">query</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sync</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1272\">\n                      增删改查是应用最多的方法定义之一，但是你发现上面这段代码中的问题没？\n                    </p>\n                    <p data-nodeid=\"1273\">\n                      虽然我们定义的五个方法职责没有重合，但是其中有一个方法对于很多人来说，可能就是低频的方法，那就是同步（sync()）。这样显然没有做到接口的隔离，只是在一个接口中做了方法隔离，当你使用\n                      ICRUD 接口时就会被强迫实现 sync()\n                      方法。其实，正确的做法应该是将 sync()\n                      方法分离出来，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code><ol><li><div class=\"code-word\">public interface ICRUD&lt;T&gt; {\n</div></li><li><div class=\"code-word\">    void add(T t);\n</div></li><li><div class=\"code-word\">    void update(T t);\n</div></li><li><div class=\"code-word\">    void delete();\n</div></li><li><div class=\"code-word\">    T query();\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">public interface ISync {\n</div></li><li><div class=\"code-word\">    void sync()；\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1275\">\n                      这样代码就变得清晰了很多，我们将增删改查放在一起、同步放在一起，这才算得上实现了接口的隔离。换句话说，<strong\n                        data-nodeid=\"1431\"\n                        >好的接口隔离不是只考虑一个接口中方法的隔离，还应该多考虑整体系统中的职责</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1276\">\n                      实际上，在应用接口隔离原则（ISP）时同样需要注意职责的单一度，而不能简单地认为只要定义的方法间没有重叠就算是隔离了。\n                    </p>\n                    <h4 data-nodeid=\"1277\">5. 依赖反转原则（DIP）</h4>\n                    <p data-nodeid=\"1278\">依赖反转原则（DIP）的原意是：</p>\n                    <ul data-nodeid=\"1279\">\n                      <li data-nodeid=\"1280\">\n                        <p data-nodeid=\"1281\">\n                          高层模块不应该依赖底层模块，二者都应该依赖于抽象；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1282\">\n                        <p data-nodeid=\"1283\">\n                          抽象不应该依赖于细节，细节应该依赖于抽象。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1284\">\n                      简单来说，就是我们应该在编程时<strong data-nodeid=\"1449\"\n                        >寻找好的抽象。<strong data-nodeid=\"1448\"\n                          >这里的抽象不是简单地指 Java 中的\n                          interface，而是指</strong\n                        >可以创建出固定却能够描述一组任意个可能行为的抽象体</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1285\">\n                      而好的抽象就是指<strong data-nodeid=\"1455\"\n                        >具备一些共性规律并能经得起实践检验的抽象</strong\n                      >。比如，关系型数据库（RDMS）就是对数据存储与查询的一种正确抽象。再比如，我们非常熟悉的\n                      JDBC\n                      协议就是一种对数据库增删改查使用的正确抽象，还有我们课程后面模块要讲的设计模式也是某种场景下的正确抽象。\n                    </p>\n                    <p data-nodeid=\"1286\">\n                      当然，好的抽象并不容易找到，更多的时候你还是得做很多定制化的开发。\n                    </p>\n                    <p data-nodeid=\"1287\">\n                      总之，依赖反转原则（DIP）给我们的启示是：<strong\n                        data-nodeid=\"1462\"\n                        >要尽量通过寻找好的抽象来解决大量重复工作的效率问题</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1288\">五大设计原则之间的关系</h3>\n                    <p data-nodeid=\"1289\">\n                      虽然 SOLID\n                      原则在面向对象编程中应用广泛，但是你可能更多时候还是在死记硬背式地使用。在我看来，SOLID\n                      原则之间其实是有一定联系的，搞清楚这些联系，不仅能帮助你理解记忆\n                      SOLID 原则，而且还能更好地应用它们。\n                    </p>\n                    <p data-nodeid=\"1290\">\n                      这里，我结合多年编程实践，总结了一张 SOLID\n                      五大原则之间的关系图，如下所示：\n                    </p>\n                    <p data-nodeid=\"1291\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/39/E0/Cgp9HWB9LwSAbVXWAAQc5gqHeGI170.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1468\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1292\">\n                      <strong data-nodeid=\"1473\"\n                        >首先，开闭原则是 SOLID 原则追求的最终目标</strong\n                      >。为什么这么说呢？因为修改代码非常容易引入\n                      Bug，即便是很小的改动都有可能引起未知的\n                      Bug。而一旦系统因为 Bug\n                      出现故障，担责的一定是我们。没有人愿意担责，所以，我们都更喜欢写新代码而不是修改旧代码。除此之外，在设计之初就尽量以实现开闭原则为目标，它能为你在未来的实际开发中提供更高的代码扩展性。不过，这里需要注意一下，开闭原则不是封闭原则，千万不要把遵守开闭原则当作必要条件，如果代码需要适应现实的需求变化而必须要修改的话，那么这时就应该违反原则。当然尽量还是要做到开闭。\n                    </p>\n                    <p data-nodeid=\"1293\">\n                      <strong data-nodeid=\"1478\"\n                        >其次，单一职责原则是重要的基础原则，它帮助实现了里氏替换原则、接口隔离原则和开闭原则</strong\n                      >。你只要仔细分析各个原则的含义就能发现，它们都涉及了两个关键动作：分离和替换。那么是逻辑揉在一起、接口定义模糊的代码容易分离和替换，还是职责单一、接口抽象清晰的代码容易分离和替换呢？答案很明显是后者。之所以说单一职责原则是基础，就是因为要想实现代码的灵活扩展性需要更容易理解的模块。而职责单一的模块，更容易被组合起来用于更大的职责，也能进行快速替换和修改。\n                    </p>\n                    <p data-nodeid=\"1294\">\n                      <strong data-nodeid=\"1483\"\n                        >最后，依赖反转原则是一种指导原则，同样是用来分离和替换代码的</strong\n                      >。只不过它作用在更高层次、更广的范围内，因为它太重要了，下一讲我会专门详细介绍它。\n                    </p>\n                    <h3 data-nodeid=\"1295\">总结</h3>\n                    <p data-nodeid=\"1296\">\n                      SOLID\n                      原则是面向对象编程中非常重要的指导原则，相信你在学习了上面的内容后，对于每个原则应该已经有一个大致的了解了。\n                    </p>\n                    <p data-nodeid=\"1297\">\n                      不过，你会发现，当你使用 SOLID\n                      越多，代码的可重用性变得越来越高的同时，代码逻辑却也相应地变得越复杂。之所以会变得复杂，是因为\n                      SOLID\n                      原则太过于重视分离与灵活替换，这就意味着我们可能需要创建很多单一的类和方法，再通过接口把它们连接起来，这样反而容易让模块和模块之间的调用关系变得更错综复杂，增加了整体的复杂性。这显然违背了\n                      KISS 原则。\n                    </p>\n                    <p data-nodeid=\"1298\">\n                      所以，<strong data-nodeid=\"1492\"\n                        >当你想要兼顾 KISS 原则和 SOLID\n                        原则时，最简单的办法就是控制接口的数量</strong\n                      >。尽量抽象某一个职责下的通用接口类（可以有多个实现类），而不是搞出很多的一个接口只对应一个实现类的模块，这看上去是在依赖抽象，实际上还是在依赖单个的实现。\n                    </p>\n                    <p data-nodeid=\"1299\">\n                      SOLID\n                      原则本质上就是为了在不修改原有模块的情况下有更好的扩展功能，也就是实现开闭原则，但是要想真正做到，一定不能忽略一个隐含的前提条件，那就是<strong\n                        data-nodeid=\"1498\"\n                        >在设计时就要提前考虑模块的扩展性</strong\n                      >。如果一个系统在设计时就只有一个大模块，所有的功能都揉在里面，这样即便你想要应用\n                      SOLID 原则，也是做不到的。\n                    </p>\n                    <p data-nodeid=\"1300\">\n                      另外，在应用 SOLID\n                      原则时一定要结合五个原则综合考虑，并结合实际业务进行合理取舍。千万不要在某个原则上过度解读，而误认为要满足所有\n                      SOLID 原则才算是应用了 SOLID 原则。\n                    </p>\n                    <p data-nodeid=\"1301\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/39/E8/CioPOWB9Lw-APsoLAAYTLh4PIGk210.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"1502\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"1302\">课后思考</h3>\n                    <p data-nodeid=\"1303\">\n                      在实际工作中，你有哪些成功使用了 SOLID\n                      原则的实践案例呢？或者失败的实践案例？欢迎你留言和我们分享，我们相互学习和交流。\n                    </p>\n                    <p data-nodeid=\"1304\" class=\"\">\n                      在下一讲，我会接着与你分享“反转原则与减少代码间相互影响”的相关内容，记得按时来听课！\n                    </p>\n            "}