{"title":"导读 | 前端技术发展回顾和架构升级之路","context":"\n                    <p data-nodeid=\"25200\" class=\"\">\n                      这一讲我将从整体上梳理前端开发的演进历史，并从渲染方案架构升级的案例出发，带你了解现代化开发的方向。这部分内容并不涉及具体技术细节，更多的是作为本专栏的导读，带你体会现代化前端架构和基建的背景以及目前前端开发的大环境。\n                    </p>\n                    <h3 data-nodeid=\"25201\">前端技术发展轨迹</h3>\n                    <p data-nodeid=\"25202\">\n                      过去十多年，前端技术发展日新月异，互联网风口也从 PC\n                      时代过渡到移动时代甚至智能时代。其间，前端岗位从无到有，再到如今扮演了至关重要的角色。相应地，前端基建和架构也慢慢浮出水面，呈现百花齐放的场景，技术环节自然也愈发复杂。\n                    </p>\n                    <p data-nodeid=\"25203\">\n                      我们先从前端的技术发展轨迹说起，如下图所示：\n                    </p>\n                    <p data-nodeid=\"25204\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/00/66/Cip5yF_W_2uASczcAADjzoYuwcY422.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"25316\"\n                      />\n                    </p>\n                    <div data-nodeid=\"25205\">\n                      <p style=\"text-align: center\">前端技术的发展轨迹图</p>\n                    </div>\n                    <p data-nodeid=\"25206\">\n                      在静态网页 + 后端 MVC\n                      技术架构时期，严格来说，并没有专职前端工程师的职位。Web\n                      工程师主要集中在后端方向，通过 Model\n                      模型层进行数据的存储和读取、Controller\n                      控制层对数据进行处理并实现业务逻辑需求，最终在 View\n                      视图层展示数据。这时候，<strong data-nodeid=\"25322\"\n                        >每次请求都对应了一个静态页面的生成过程，我们把这种技术时代称为\n                        Web1.0</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"25207\">\n                      接着，随着<strong data-nodeid=\"25328\"\n                        >2005 年 Ajax 技术的出现，标志了 Web1.0 到 Web2.0\n                        的重要演进</strong\n                      >。此时，出现了真正意义上的前后端分离概念，这也使得前端工程师开始占据开发岗位的一席之地。前端通过\n                      Ajax 技术获取数据，进行页面的展现和交互，而后端往往通过\n                      Restful\n                      接口，和前端进行协作。这个时期，前端需要大量地处理数据，因此前端\n                      MVC 框架得到了发展。\n                    </p>\n                    <p data-nodeid=\"25208\">\n                      比如，早期极具代表性的 Backbone.js\n                      框架，架构风格非常明显，我们可以看一下如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> M = Backbone.Model.extend({\n</div></li><li><div class=\"code-word\">　　defaults: {name: <span class=\"hljs-string\">\"lucas\"</span>} ,\n</div></li><li><div class=\"code-word\">　　initialize : function(){\n</div></li><li><div class=\"code-word\">　　　　<span class=\"hljs-keyword\">this</span>.on(<span class=\"hljs-string\">\"change\"</span>, function(){\n</div></li><li><div class=\"code-word\">　　　　　　console.log(<span class=\"hljs-string\">\"change\"</span>)\n</div></li><li><div class=\"code-word\">　　　　})\n</div></li><li><div class=\"code-word\">　　}\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\"> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> model = <span class=\"hljs-keyword\">new</span> M()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25210\">\n                      <strong data-nodeid=\"25337\">这里的</strong\n                      ><code data-backticks=\"1\" data-nodeid=\"25333\"\n                        >Backbone.Model</code\n                      >实际上不仅包含了数据<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"25335\"\n                        >{name: \"lucas\"}</code\n                      >，其实也包含了数据变更时的监听事件。对应 View 层代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> V = Backbone.View.extend({\n</div></li><li><div class=\"code-word\">　　initialize: function() {\n</div></li><li><div class=\"code-word\">　　　　<span class=\"hljs-keyword\">this</span>.listenTo(<span class=\"hljs-keyword\">this</span>.model, <span class=\"hljs-string\">\"change\"</span>, <span class=\"hljs-keyword\">this</span>.show) \n</div></li><li><div class=\"code-word\">　　},\n</div></li><li><div class=\"code-word\">　　show: funtion(model) {\n</div></li><li><div class=\"code-word\">　　　　$(<span class=\"hljs-string\">\"#id\"</span>).append(<span class=\"hljs-keyword\">this</span>.model.name)\n</div></li><li><div class=\"code-word\">　　}\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> m= <span class=\"hljs-keyword\">new</span> M()\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> v = <span class=\"hljs-keyword\">new</span> V({model: m})\n</div></li><li><div class=\"code-word\">m.set(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"hi\"</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25212\">\n                      Backbone.js 的出现是革命性的。但是以上述代码为例，<strong\n                        data-nodeid=\"25343\"\n                        >如果业务足够复杂的话，上述状态机一般的代码就会成为负担，代码量也变得非常臃肿，难以维护</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"25213\">\n                      随着前端处理数据理念的革新，一种更新潮的 MVVM（View +\n                      ViewModel + Model）模式框架就出现了，MVVM 和 MVC\n                      最大的区别在于：MVVM 采用双向绑定（Data\n                      Binding）或自动渲染更新。\n                    </p>\n                    <p data-nodeid=\"25214\">\n                      也就是说，View 层的变动，可以自动反映在 ViewModel\n                      层。Angular 和 Vue 都采用这种模式。虽然 React\n                      官方声称自己只是一个 View 层类库，但是 React\n                      搭配数据状态管理生态，也符合 MVVM 模式。当然 React\n                      并不是双向绑定风格的解决方案，自动渲染更新也代表了一种潮流和方向。\n                    </p>\n                    <p data-nodeid=\"25215\">\n                      整体看来，架构层面 MVC 风格向 MVVM\n                      风格的演进，不仅简化了数据与视图的依赖，还解决了数据频繁更新的问题。再加上虚拟\n                      DOM 理念，为开发者屏蔽了 DOM\n                      操作，业界框架方案逐渐稳定，这种低耦合模式也代表了现代化的设计理念。\n                    </p>\n                    <p data-nodeid=\"25216\">\n                      这个时期，前后端分离技术发展到了顶峰，前端框架也互相学习借鉴，直到如今的<strong\n                        data-nodeid=\"25352\"\n                        >Vue/React/Angular 三足鼎立</strong\n                      >的局面。\n                    </p>\n                    <p data-nodeid=\"25217\">\n                      这个时代的稳定性一直持续到 Node.js 的崛起，随着 Node.js\n                      的出现，稳固的技术体系瞬间被打破。通过\n                      Node.js，除了前端工具链、工程化得以发展，前端也实现\n                      BFF（Backend For\n                      Frontend）层，这样的架构设计好处显而易见：\n                    </p>\n                    <ul data-nodeid=\"25218\">\n                      <li data-nodeid=\"25219\">\n                        <p data-nodeid=\"25220\">\n                          前端工程师可以<strong data-nodeid=\"25359\"\n                            >自行编写后端服务，实现数据的适配</strong\n                          >，应用场景包括接口的整合编排、字段裁剪；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25221\">\n                        <p data-nodeid=\"25222\">\n                          前端工程师可以实现<strong data-nodeid=\"25365\"\n                            >SSR（服务端渲染直出）技术</strong\n                          >，达到提升首屏性能以及 SEO 友好的目的；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25223\">\n                        <p data-nodeid=\"25224\">\n                          前端工程师可以实现各种<strong data-nodeid=\"25371\"\n                            >后端领域服务</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"25225\">\n                      为了“紧跟技术潮流”的发展，Vue 和 React 等当红框架依靠虚拟\n                      DOM 技术，推出同构方案。SSR\n                      架构模式横空出世，成了前端技术演进的新方向。\n                    </p>\n                    <p data-nodeid=\"25226\">\n                      但是 Node.js 技术不是银弹，SSR\n                      架构也不是毫无成本。前端工程师落地 Node.js\n                      技术，就要关心服务器的运维、部署、发布、监控。有没有一种“just\n                      work”的技术，使得我们能够更轻松地专注前端业务代码的开发，直接上手\n                      Node.js 呢？\n                    </p>\n                    <p data-nodeid=\"25227\">\n                      为了解决上述问题，<strong data-nodeid=\"25379\"\n                        >Serverless 理念</strong\n                      >应运而生。简单来说，我们可以将服务器的运维功能都交给\n                      Serverless\n                      平台进行管理，研发人员只需要专注于实现云函数即可完成功能开发。\n                    </p>\n                    <p data-nodeid=\"25228\">\n                      你看，短短十多年，前端技术发展和演进史已经非常精彩。其实这段演进当中，也有诸多值得关注的里程碑和代表技术理念，比如以下几点。\n                    </p>\n                    <p data-nodeid=\"25229\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8A/CE/Ciqc1F_ayhyANkK4AADjomKGK_s552.png\"\n                        alt=\"前端发展和演进史.png\"\n                        data-nodeid=\"25383\"\n                      />\n                    </p>\n                    <p data-nodeid=\"25230\">\n                      <strong data-nodeid=\"25396\"\n                        >1. 以 GraphQL\n                        技术为代表的数据源聚合和字段裁剪方案</strong\n                      ><br />\n                      <strong data-nodeid=\"25397\"\n                        >2. 以组件化架构为代表的 UI 搭建技术</strong\n                      >，在 UI 搭建技术里面，我们也可以总结出一个微观技术方向：\n                    </p>\n                    <ul data-nodeid=\"25231\">\n                      <li data-nodeid=\"25232\">\n                        <p data-nodeid=\"25233\">\n                          以原子组件为基准的组件化方案（Ant Design、Element）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25234\">\n                        <p data-nodeid=\"25235\">\n                          以模板库为代表（Ant Design Pro）的一体化组件化方案\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25236\">\n                        <p data-nodeid=\"25237\">\n                          以 No code/Low code 为代表的配置化解决方案\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25238\">\n                        <p data-nodeid=\"25239\">\n                          以机器学习智能化为代表的搭建方案（设计图 → 代码直出）\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"25240\">\n                      <strong data-nodeid=\"25419\"\n                        >3.\n                        以微前端为代表的、前端应用聚合为单体应用的工程方案</strong\n                      ><br />\n                      <strong data-nodeid=\"25420\"\n                        >4. 以 PWA、小程序、快应用等为代表的平台化方案</strong\n                      ><br />\n                      <strong data-nodeid=\"25421\"\n                        >5. 以 PhoneGap → Ionic → React Native → Flutter\n                        等演进方向为代表的移动端跨端方案</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"25241\">\n                      总之，前端技术发展从没有一刻停歇，而在技术架构演进的过程中，需要前端开发者不断保持进步和学习。其中，对于基础建设和架构设计的学习，将会是最核心、最重要的学习方向和目标。\n                    </p>\n                    <p data-nodeid=\"25242\">\n                      下面，我们简单了解一下现代技术架构。\n                    </p>\n                    <h3 data-nodeid=\"25243\">现代化的前端技术架构解读</h3>\n                    <p data-nodeid=\"25244\">\n                      <strong data-nodeid=\"25429\"\n                        >一方面，前端领域的现代技术架构，永远无法脱离应用终端和宿主</strong\n                      >。这其中：前端不再局限于 PC\n                      和移动智能手机端，智能手表、眼镜会是新的平台方向，同时文件系统、相机、PWA\n                      和硬件传感器等新型 API 都已经应用在 Web 前端当中。\n                    </p>\n                    <p data-nodeid=\"25245\">\n                      <strong data-nodeid=\"25438\"\n                        >第二方面，现代 JavaScript\n                        也发展成为一种真正成熟的语言，并且还将会持续引入新的特性和功能</strong\n                      >。同时<strong data-nodeid=\"25439\"\n                        >TypeScript，甚至 Elm、PureScript 和 ReasonML\n                        将会得到更多关注</strong\n                      >。因此，一套现代化的前端方案，必然要处理语言的发展和宿主的碎片化、滞后性这一矛盾，也必然会有一个更厚重的编译。\n                    </p>\n                    <p data-nodeid=\"25246\">\n                      第三方面，网络基础设施永远都在变得更快、更稳定，流媒体和视频点播成为日常，<strong\n                        data-nodeid=\"25445\"\n                        >前端的用户体验和富媒体技术愈发成为应用的关键</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"25247\">\n                      基于上述背景，现代化前端技术架构的特点呼之欲出：\n                    </p>\n                    <ul data-nodeid=\"25248\">\n                      <li data-nodeid=\"25249\">\n                        <p data-nodeid=\"25250\">组件化是基本 UI 架构；</p>\n                      </li>\n                      <li data-nodeid=\"25251\">\n                        <p data-nodeid=\"25252\">\n                          依托于 SSR\n                          同构技术以及心智负担的最小化，框架层面提供的虚拟 DOM\n                          会成为生态标配；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25253\">\n                        <p data-nodeid=\"25254\">\n                          数据状态管理方案将会以职责单一、minimal necessary\n                          为目标，以组合性、函数式为理念，而不以双向数据流和单向数据流的区分为重点；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25255\">\n                        <p data-nodeid=\"25256\">\n                          前端向传统后端领域进军是必然，一个 CSR/SSR\n                          可切换的协作方案可以把前端优势特点放大到最大。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"25257\">\n                      总之，基础建设和工程化建设、代码设计和架构之道，也将围绕以上几个特点给出答案。我们的课程也会围绕这些方向展开。\n                    </p>\n                    <h3 data-nodeid=\"25258\">\n                      从 CSR → SSR → NSR → ESR 渲染方案演进看前端架构演进方向\n                    </h3>\n                    <p data-nodeid=\"25259\">\n                      上面我们从宏观的角度阐述了前端技术架构方向。这一部分，我会以前端渲染架构为例，从真实的技术环节、更立体地说明架构演进。我将以\n                      CSR → SSR → NSR → ESR 方案来进行讲解。\n                    </p>\n                    <p data-nodeid=\"25260\">\n                      <strong data-nodeid=\"25458\"\n                        >CSR：Client Side Rendering</strong\n                      >，浏览器端渲染也许是大家最为熟悉的渲染架构。这种渲染架构很好理解，如下图所示：\n                    </p>\n                    <p data-nodeid=\"25261\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/91/Ciqc1F_TbNGAE7ADAAMPSImvmcM224.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"25461\"\n                      />\n                    </p>\n                    <p data-nodeid=\"25262\">\n                      CSR 渲染架构图（图片来源：<a\n                        href=\"https://developers.google.com/web/updates/2019/02/rendering-on-the-web\"\n                        data-nodeid=\"25465\"\n                        >https://developers.google.com/web/updates/2019/02/rendering-on-the-web</a\n                      >）\n                    </p>\n                    <p data-nodeid=\"25263\">CSR 渲染架构的特点非常明显：</p>\n                    <ul data-nodeid=\"25264\">\n                      <li data-nodeid=\"25265\">\n                        <p data-nodeid=\"25266\">\n                          实现了前后端架构分离，实现了前后端职责分离；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25267\">\n                        <p data-nodeid=\"25268\">\n                          TTFB\n                          时间最小，但由于客户端和服务端会有多次交互（获取静态资源、获取数据）才能进行渲染，实际首屏效果以及\n                          FCP/FMP 时间不够理想。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"25269\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/9C/CgqCHl_TbNeABkBtAABufch6K5o021.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"25472\"\n                      />\n                    </p>\n                    <p data-nodeid=\"25270\">\n                      CSR 渲染时序图（图片来源：<a\n                        href=\"https://developers.google.com/web/updates/2019/02/rendering-on-the-web\"\n                        data-nodeid=\"25476\"\n                        >https://developers.google.com/web/updates/2019/02/rendering-on-the-web</a\n                      >）\n                    </p>\n                    <p data-nodeid=\"25271\">\n                      我们可以通过代码分离等技术弥补实际内容渲染的滞后，但从渲染架构上讲，CSR\n                      却有着基因上的弊端。\n                    </p>\n                    <p data-nodeid=\"25272\">\n                      <strong data-nodeid=\"25483\"\n                        >SSR：Server Side Rendering</strong\n                      >，在服务端完成页面模板、数据预取、填充，并且在服务端就可以将完整的\n                      HTML 内容返回给浏览器。如下图：\n                    </p>\n                    <p data-nodeid=\"25273\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/91/Ciqc1F_TbN6AbhWeAAMt7v_XiOk193.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"25486\"\n                      />\n                    </p>\n                    <p data-nodeid=\"25274\">\n                      SSR 渲染架构图（图片来源：<a\n                        href=\"https://developers.google.com/web/updates/2019/02/rendering-on-the-web\"\n                        data-nodeid=\"25490\"\n                        >https://developers.google.com/web/updates/2019/02/rendering-on-the-web</a\n                      >）\n                    </p>\n                    <p data-nodeid=\"25275\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/9C/CgqCHl_TbOSANVS_AABr6t8iQEQ369.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"25494\"\n                      />\n                    </p>\n                    <p data-nodeid=\"25276\">\n                      SSR 渲染时序图（图片来源：<a\n                        href=\"https://developers.google.com/web/updates/2019/02/rendering-on-the-web\"\n                        data-nodeid=\"25498\"\n                        >https://developers.google.com/web/updates/2019/02/rendering-on-the-web</a\n                      >）\n                    </p>\n                    <p data-nodeid=\"25277\">\n                      实际上，SSR\n                      还涉及更多内容：我们在服务端预取了数据，并返回了数据和\n                      HTML\n                      内容。理想情况下，不需要在客户端再次请求数据，而是直接消费数据即可。因此我们<strong\n                        data-nodeid=\"25505\"\n                        >可以将 SSR 和 CSR 相结合，即实现一个基于\n                        hydration（注水） 的 SSR 和 CSR 结合方案</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"25278\">\n                      先来解释一下\n                      hydration，这个概念和同构应用中数据的获取和消费有关。在服务器端渲染时，首先服务端请求接口拿到数据，处理并准备好数据状态（如果使用\n                      Redux，就进行 store 的更新）。\n                    </p>\n                    <p data-nodeid=\"25279\">\n                      为了减少客户端的请求，我们需要保留住这个状态。一般做法是在服务器端返回\n                      HTML 字符串的时候，将数据 JSON.stringify\n                      一并返回，这个过程，叫作脱水（dehydrate）；在客户端，就不再需要进行数据的请求了，可以直接使用服务端下发下来的数据，这个过程叫注水（hydrate）。\n                    </p>\n                    <p data-nodeid=\"25280\">\n                      用代码来表示，我们将数据放到 window 变量上：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">ctx.body = \\`\n</div></li><li><div class=\"code-word\">  &lt;!DOCTYPE html&gt;\n</div></li><li><div class=\"code-word\">  &lt;html lang=\"en\"&gt;\n</div></li><li><div class=\"code-word\">    &lt;head&gt;\n</div></li><li><div class=\"code-word\">      &lt;meta charset=\"UTF-8\"&gt;\n</div></li><li><div class=\"code-word\">    &lt;/head&gt;\n</div></li><li><div class=\"code-word\">    &lt;body&gt;\n</div></li><li><div class=\"code-word\">        &lt;script&gt;\n</div></li><li><div class=\"code-word\">        window.context = {\n</div></li><li><div class=\"code-word\">          initialState: ${JSON.stringify(store.getState())}\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      &lt;/script&gt;\n</div></li><li><div class=\"code-word\">      &lt;div id=\"app\"&gt;\n</div></li><li><div class=\"code-word\">          // ...\n</div></li><li><div class=\"code-word\">      &lt;/div&gt;\n</div></li><li><div class=\"code-word\">    &lt;/body&gt;\n</div></li><li><div class=\"code-word\">  &lt;/html&gt;\n</div></li><li><div class=\"code-word\">\\`\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25282\">对应客户端：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">export <span class=\"hljs-keyword\">const</span> getClientStore = () =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> defaultState = JSON.parse(window.context.state)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> createStore(reducer, defaultState, applyMiddleware(thunk))\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">ReactDOM.hydrate(&lt;App date={getClientStore().getState()} /&gt;, document.getElementById(<span class=\"hljs-string\">'root'</span>))\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25284\">\n                      而基于 hydration 的 SSR 方案，如下图代码：\n                    </p>\n                    <p data-nodeid=\"25285\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/88/88/Ciqc1F_W__SALwrUAAYHEKkIYNQ282.png\"\n                        alt=\"图片2.png\"\n                        data-nodeid=\"25513\"\n                      />\n                    </p>\n                    <p data-nodeid=\"25286\">\n                      我们可以将上述渲染架构方案用下面这张图来总结：\n                    </p>\n                    <p data-nodeid=\"25287\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/91/Ciqc1F_TbPWAd6HsAABr6t8iQEQ624.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"25517\"\n                      />\n                    </p>\n                    <p data-nodeid=\"25288\">\n                      SSR 渲染架构方案图（图片来源：<a\n                        href=\"https://developers.google.com/web/updates/2019/02/rendering-on-the-web\"\n                        data-nodeid=\"25521\"\n                        >https://developers.google.com/web/updates/2019/02/rendering-on-the-web</a\n                      >）\n                    </p>\n                    <p data-nodeid=\"25289\">\n                      其实，如果将性能优化做到极致，SSR 还可以发展为：Streaming\n                      server rendering（流式 SSR 渲染）或 Progressive\n                      Rehydration（渐进式 SSR 渲染）。\n                    </p>\n                    <ul data-nodeid=\"25290\">\n                      <li data-nodeid=\"25291\">\n                        <p data-nodeid=\"25292\">\n                          流式 SSR 渲染，允许服务端通过 stream\n                          的方式向浏览器发送 HTML 内容。在 React\n                          中，我们可以使用<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"25525\"\n                            >renderToNodeStream()</code\n                          >方法来完成流式 SSR 渲染。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25293\">\n                        <p data-nodeid=\"25294\">\n                          渐进式 SSR 渲染可以允许在 hydrating\n                          没有完全结束前，部分已经渲染并注水完成的页面内容，可以优先完成交互响应。React\n                          专门将<a\n                            href=\"https://github.com/facebook/react/pull/14717\"\n                            data-nodeid=\"25530\"\n                            >Partial Hydration</a\n                          >开了一个 PR 来讨论。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"25295\">\n                      在 SSR 技术下，还有类似 Bigpipe 的 Partial Rehydration\n                      技术以及借助 Service Worker 完成的 Trisomorphic Rendering\n                      技术，这里我们不再一一讨论。\n                    </p>\n                    <p data-nodeid=\"25296\">\n                      说完 SSR，我们再来看一些更新潮的渲染技术：NSR 和 ESR\n                      渲染方案最近几年也正在逐渐落地实施。\n                    </p>\n                    <p data-nodeid=\"25297\">\n                      <strong data-nodeid=\"25542\"\n                        >NSR：Native Side Rendering</strong\n                      >，这是一种在 hybrid 中特有的渲染技术。简单说就是<strong\n                        data-nodeid=\"25543\"\n                        >通过 Native 渲染生成 HTML\n                        数据，并且缓存在客户端</strong\n                      >。这样一来，对于一个 hybrid WebView\n                      的用户访问，会优先从离线包中加载离线页面模板，再通过前端\n                      Ajax/或客户端能力请求数据，最终完成页面完整的展示。\n                    </p>\n                    <p data-nodeid=\"25298\">\n                      这样做的好处显而易见：我们将服务器的渲染工作放在了一个个独立的移动设备中，并借助离线存储技术，实现了页面的预加载，同时又不会增加额外的服务器压力。\n                    </p>\n                    <p data-nodeid=\"25299\">\n                      <strong data-nodeid=\"25549\"\n                        >ESR：Edge Side Rendering</strong\n                      >，边缘渲染则更加激进。ESR\n                      其实借助了最近几年较火的“边缘计算”能力。\n                    </p>\n                    <blockquote data-nodeid=\"25300\">\n                      <p data-nodeid=\"25301\">\n                        边缘计算，是指在靠近物或数据源头的一侧，采用网络、计算、存储、应用核心能力为一体的开放平台，就近提供最近端服务。其应用程序在边缘侧发起，产生更快的网络服务响应，满足行业在实时业务、应用智能、安全与隐私保护等方面的基本需求。边缘计算处于物理实体和工业连接之间，或处于物理实体的顶端。而云端计算，仍然可以访问边缘计算的历史数据。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"25302\">\n                      ESR 渲染利用了 CDN 能力。ESR<strong data-nodeid=\"25556\"\n                        >会在 CDN\n                        上缓存页面的静态部分，这样在用户访问页面时，可以快速返回给用户静态内容，同时在\n                        CDN\n                        节点上也发起动态部分内容请求，在动态内容获取之后，利用流的方式，继续返回给用户</strong\n                      >。该项技术在阿里中已经有了试水，但真正更广泛地落地和实施，有待后续验证和观察。总之借助边缘计算能力，前端渲染架构的想象空间会被无限放大。\n                    </p>\n                    <h3 data-nodeid=\"25303\">总结</h3>\n                    <p data-nodeid=\"25304\">\n                      这一讲我们纵览了近十多年的前端技术发展以及相关技术方案的演进过程，并以渲染架构为例，重点剖析了从传统\n                      CSR 到 SSR、NSR 再到 ESR\n                      的思路。这一系列发展过程有的以基础设施（比如网络发展）为红利，有的以语言或框架演进为背书。\n                    </p>\n                    <p data-nodeid=\"25305\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/00/67/Cip5yF_XAB6AM-sFAAZim-NM1GE633.png\"\n                        alt=\"导读.png\"\n                        data-nodeid=\"25561\"\n                      />\n                    </p>\n                    <p data-nodeid=\"25306\">\n                      无论技术发展的脚步多快，无论什么样的技术架构，都离不开基础建设和架构设计。就让我们以当前“最先进”的理念，进入最核心的基础建设和架构设计的学习吧！\n                    </p>\n                    <hr data-nodeid=\"25307\" />\n                    <p data-nodeid=\"25308\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"25567\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image2/M01/00/66/CgpVE1_W_x2AaW0rAAdqMM6w3z0145.png\"\n                          alt=\"大前端引流.png\"\n                          data-nodeid=\"25566\"\n                      /></a>\n                    </p>\n                    <p data-nodeid=\"25309\" class=\"te-preview-highlight\">\n                      对标阿里P7技术需求 + 每月大厂内推，6 个月助你斩获名企高薪\n                      Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"25571\"\n                        >点此链接，快来领取！</a\n                      >\n                    </p>\n            "}