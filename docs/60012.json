{"title":"11 | 职责原则：如何在代码设计中实现职责分离？","context":"\n                    <p data-nodeid=\"753\" class=\"\">\n                      在面向对象编程中，你是不是经常听到“要实现代码间的职责分离”，但是具体什么样的代码才算得上是清晰的职责分离，似乎却又总是模糊不清。比如：\n                    </p>\n                    <ul data-nodeid=\"754\">\n                      <li data-nodeid=\"755\">\n                        <p data-nodeid=\"756\">代码模块越多职责越清晰？</p>\n                      </li>\n                      <li data-nodeid=\"757\">\n                        <p data-nodeid=\"758\">\n                          按照需求来分配职责就是职责分离？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"759\">\n                        <p data-nodeid=\"760\">模块化就是职责分离？</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"761\">\n                      实际上，你要想写出“职责分离”的代码，单从字面含义是很难下手的，因为业界并没有统一的通用标准。比如，什么是职责分离？为什么职责分离很重要？具体如何实现职责分离？\n                    </p>\n                    <p data-nodeid=\"762\">\n                      所以，今天我们就一起带着这些问题来学习与理解职责分离。\n                    </p>\n                    <h3 data-nodeid=\"763\">高内聚、低耦合：职责分离的目标</h3>\n                    <p data-nodeid=\"764\">\n                      什么是职责？在《敏捷软件开发：原则、模式与实践》这本书中，把“职责”定义为“变化的原因”。如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责。\n                    </p>\n                    <p data-nodeid=\"765\">\n                      那什么是职责分离？为了更好地理解职责分离，我们先从一个熟悉而又陌生的概念讲起，那就是内聚。\n                    </p>\n                    <p data-nodeid=\"766\">\n                      这里我们结合一个例子来说明一下，如下图所示：\n                    </p>\n                    <p data-nodeid=\"767\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/9E/CioPOWB3-nyAQDkTAACdLcm5p6E692.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"830\"\n                      />\n                    </p>\n                    <p data-nodeid=\"768\">\n                      在该图中，模块按照相对小的功能进行划分（数字表示，比如模块\n                      1），这里我们假设业务领域已经被分析为有三个不同的功能，并放在了一个模块内（叫“我的模块”），其中，模块\n                      A、B、C 之间没有什么共同的职责，分别在独立的数据上运行。\n                    </p>\n                    <p data-nodeid=\"769\">\n                      你有没有一种有种曾相似的感觉？没错，常见的\n                      Controller+Service+Dao\n                      里的各种功能多是这样的组织形式，看上去很漂亮的结构，但实际上却是最混乱的，俗称大泥球结构，这也是内聚度很低的一种模式。\n                    </p>\n                    <p data-nodeid=\"770\">\n                      观察上面的关系图你会发现，八个模块都依赖着“我的模块”。在这种情况下，如果想要在系统中的其他模块使用功能\n                      A、B 或\n                      C，那么调用就会依赖整个“我的模块”，这显然导致了太多的依赖，大大降低了可维护性。\n                    </p>\n                    <p data-nodeid=\"771\">\n                      那么，为了提高内聚性，我们就应该对功能进行分离，如下图所示：\n                    </p>\n                    <p data-nodeid=\"772\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/9E/CioPOWB3-oSAanL9AAFTcHjT6eo491.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"837\"\n                      />\n                    </p>\n                    <p data-nodeid=\"773\">\n                      很明显，现在每个模块的依赖比原来少了很多，模块 A、B、C\n                      之间没有直接的关系，并且模块 3 是唯一一个依赖模块 A 和模块\n                      C 的模块。这样带来的好处是，当我们依赖 A 或 B 或 C\n                      时，能够清晰地知道它们依赖了哪些模块，也就是下次修改代码时影响的模块有哪些，将变更风险控制在有限范围内。这样才算是做到了真正的高内聚，也就是各个模块专注于自己最重要的某个职责，并建立起与其他模块之间清晰的界限。\n                    </p>\n                    <p data-nodeid=\"774\">\n                      所以说，<strong data-nodeid=\"844\"\n                        >内聚本质上表示的是系统内部的各个部分对同一个问题的专注程度，以及这些部分彼此之间联系的紧密性</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"775\">\n                      你可能也注意到，对同一个问题的专注程度才是判断内聚高低的标准，而职责分离只是实现高内聚的一种方法而已。\n                    </p>\n                    <p data-nodeid=\"776\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/9E/CioPOWB3-o-AdUj4AAXk1X0cnpc956.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"848\"\n                      />\n                    </p>\n                    <p data-nodeid=\"777\">\n                      那么，现在我们就可以来回答“什么是职责分离”这个问题了。简单来说，<strong\n                        data-nodeid=\"853\"\n                        >职责分离就是将不同变化原因引起的类或方法修改行为拆分到不同类或方法里去。</strong\n                      >\n                    </p>\n                    <h3 data-nodeid=\"778\">职责分离的重要性</h3>\n                    <p data-nodeid=\"779\">\n                      那为什么职责分离很重要呢？我总结了下，主要有三点原因。\n                    </p>\n                    <p data-nodeid=\"4205\">\n                      <strong data-nodeid=\"4211\"\n                        >第一点，直接对问题进行对象建模，方便厘清构建逻辑</strong\n                      >。在面向对象编程中，通常都会建议你将现实中的事物或问题翻译成对象，这样更“拟人化”，也能更好地进行编码实现，就好比让每一个代码模块能够像人一样具备自己的属性和行为，只需要指定特定的职责就能让各自模块运行良好，而不是像面向过程编程那样把所有的功能都放在一起。比如，针对商品属性相关的问题，我们可以建立商品基本信息对象、赠品信息对象、活动商品对象等各类对象，然后通过不同的职责关联统一起来，这样在修改时就能通过清晰的职责边界来理解代码逻辑关系了。\n                    </p>\n                    <p data-nodeid=\"4206\">\n                      <strong data-nodeid=\"4216\"\n                        >第二点，将问题分解为各种职责，更有利于系统的测试、调试和维护</strong\n                      >。比如，开发一个电商系统，你一定不会把所有的系统（订单、物流、商品、支付）都放在一起，因为这样不仅不利于理解系统，而且其中任何一个子系统的代码修改都会影响到别的系统。除此之外，职责分离不够的系统，测试起来也会非常痛苦，因为每一次的修改不敢保证不会影响别的系统，那么就需要测试相关联的系统，这样大大降低了交付效率，同时还会因为测试不充分而出现线上问题。\n                    </p>\n\n                    <p data-nodeid=\"782\">\n                      <strong data-nodeid=\"874\"\n                        >第三点，提高系统的可扩展性</strong\n                      >。虽然可扩展性是现代软件设计的必选项之一，但是很多系统在前期时间紧、任务重的情况下几乎都会放弃一部分扩展性，于是矛盾就出现了，系统已经上线，但用户需求却不断变化，这时如果需要添加一些新东西，那么你就需要改动所有没有清晰划分职责的地方，这样势必影响系统的运行。但如果做好了职责划分，那么你就只需要改动具有相应职责的类，而不会影响到系统的其他部分，这样不仅能提高系统的可扩展性，还降低了代码修改引入风险的概率。\n                    </p>\n                    <h3 data-nodeid=\"783\">职责分离的时机</h3>\n                    <p data-nodeid=\"784\">\n                      在编码实现中，职责分离的时机大致有三个：\n                    </p>\n                    <ul data-nodeid=\"785\">\n                      <li data-nodeid=\"786\">\n                        <p data-nodeid=\"787\">命名太过于笼统；</p>\n                      </li>\n                      <li data-nodeid=\"788\">\n                        <p data-nodeid=\"789\">改动代码后的测试规模很大；</p>\n                      </li>\n                      <li data-nodeid=\"790\">\n                        <p data-nodeid=\"791\">类和方法过大。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"792\">下面我们就来详细说明下。</p>\n                    <p data-nodeid=\"793\">\n                      首先，<strong data-nodeid=\"886\"\n                        >命名太过于笼统时是职责分离的好时机。</strong\n                      >\n                      你一定希望类、方法和其他对象（包、服务等）的命名能够直接反映出它们的作用，同时还要足够简短，方便记忆。如果命名过长或表述模糊，通常可能是因为类或方法包含的职责过多而无法筛选出职责的优先级，这样的类随着修改越多，问题出现的概率也越高。这时就是进行职责分离的好时机，通过将不同职责拆分出来，就能很好地限定问题范围，即便出现问题需要修改也只是在限定范围内修改，不会影响到其他模块。\n                    </p>\n                    <p data-nodeid=\"794\">\n                      其次，<strong data-nodeid=\"892\"\n                        >如果每次修改代码都要重新进行一次全量测试，那么这也是进行职责分离的好时机</strong\n                      >。“修改一处影响全部”可以说是开发和测试都不愿意面对的情况之一，这说明代码耦合性高、内聚度低。换句话说就是，代码中的职责过多，彼此之间相互影响。这时可以通过修改代码处的职责来进行代码重构，找出合适的职责进行分离，逐步减小全量测试的范围，这样就能减少职责之间的相互干扰。\n                    </p>\n                    <p data-nodeid=\"795\">\n                      最后，<strong data-nodeid=\"898\"\n                        >遇见超大类或方法也是一个时机。</strong\n                      >\n                      绝大多数情况下，超大的类或方法都是职责划分不清导致的代码过度耦合（当然，有的算法实现本身就很复杂，进而导致出现超长的方法，这种情况不在这次的讨论范围内）。比如，当一个类包含了太多的其他类时，可以用一个简单的原则来判断职责是否过多，那就是：能否拆分出来更多的子类？如果不能，那么这个类很可能就是高内聚的，职责比较单一；如果能，那么这个类还不够内聚，职责还有多余的。\n                    </p>\n                    <h3 data-nodeid=\"796\">如何通过职责分离实现高内聚</h3>\n                    <p data-nodeid=\"797\">\n                      职责分离更多的是一种设计思想和编程技巧，主要的理念就是将模糊笼统的问题拆分为多个清晰单一的问题。而<strong\n                        data-nodeid=\"905\"\n                        >实现职责分离的核心技巧就在于寻找互相不重合的的职责</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"798\">\n                      这里我们演示一个通过分离职责实现真正内聚的例子，如下面的反转字符串的处理程序代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Application</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(String[] words)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; words.length; i++) {\n</div></li><li><div class=\"code-word\">            String arg = <span class=\"hljs-string\">\"\"</span>;\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = words[i].length(); j &gt; <span class=\"hljs-number\">0</span>; j--) {\n</div></li><li><div class=\"code-word\">                arg+=words[i].substring(j-<span class=\"hljs-number\">1</span>,j);\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">            System.out.println(arg);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (words.length == <span class=\"hljs-number\">2</span>){\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (words[<span class=\"hljs-number\">0</span>].toLowerCase().equals(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">                    &amp;&amp; words[<span class=\"hljs-number\">1</span>].toLowerCase().equals(<span class=\"hljs-string\">\"world\"</span>)){\n</div></li><li><div class=\"code-word\">                System.out.println(<span class=\"hljs-string\">\"...bingo\"</span>);\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">        process(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"test\"</span>,<span class=\"hljs-string\">\"is\"</span>,<span class=\"hljs-string\">\"a\"</span>,<span class=\"hljs-string\">\"mighty,hahaah,world\"</span>});\n</div></li><li><div class=\"code-word\">        process(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"hello\"</span>,<span class=\"hljs-string\">\"world\"</span>});\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"800\">\n                      这是一段非常简单的代码，代码的功能是：接收命令行的任意字符串参数，然后反转每个字符，并检查反转后的字符是否为“hello\n                      world”，如果是，则打印一条信息。\n                    </p>\n                    <p data-nodeid=\"801\">\n                      虽然这段代码很短，但是它的内聚性非常差。为什么呢？你可以从\n                      process () 方法看出问题所在，process()\n                      这个名称并没有告诉你方法实现了什么操作，而如果要以正规方式命名这个方法，通常会出现类似于这样的名称：reverseCharactersAndTestHelloWorld()，前面我们也说了，命名太过于笼统的通常就是内聚性较差的信号。\n                    </p>\n                    <p data-nodeid=\"802\">\n                      继续阅读代码，你也会发现，process()\n                      方法要做的职责太多了，并且这些事情彼此又并不相关。\n                    </p>\n                    <p data-nodeid=\"803\">\n                      那么，我们该如何通过职责分离来优化代码呢？直接看代码，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ApplicationOpt</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">process</span><span class=\"hljs-params\">(String[] words)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; words.length; i++) {\n</div></li><li><div class=\"code-word\">            reversecharacters(words[i]);\n</div></li><li><div class=\"code-word\">            System.out.println(words[i]);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (isHelloWorld(words)) {\n</div></li><li><div class=\"code-word\">            System.out.println(<span class=\"hljs-string\">\"...bingo\"</span>);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title\">reversecharacters</span><span class=\"hljs-params\">(String forward)</span> </span>{\n</div></li><li><div class=\"code-word\">        String reverse = <span class=\"hljs-string\">\"\"</span>;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = forward.length(); j &gt; <span class=\"hljs-number\">0</span>; j--) {\n</div></li><li><div class=\"code-word\">            reverse += forward.substring(j - <span class=\"hljs-number\">1</span>, j);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> reverse;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isHelloWorld</span><span class=\"hljs-params\">(String[] names)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (names.length == <span class=\"hljs-number\">2</span>){\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (names[<span class=\"hljs-number\">0</span>].toLowerCase().equals(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">                    &amp;&amp; names[<span class=\"hljs-number\">1</span>].toLowerCase().equals(<span class=\"hljs-string\">\"world\"</span>)){\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">        ApplicationOpt myApp = <span class=\"hljs-keyword\">new</span> ApplicationOpt();\n</div></li><li><div class=\"code-word\">        myApp.process(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"test\"</span>,<span class=\"hljs-string\">\"is\"</span>,<span class=\"hljs-string\">\"a\"</span>,<span class=\"hljs-string\">\"mighty,hahaah,world\"</span>});\n</div></li><li><div class=\"code-word\">        myApp.process(<span class=\"hljs-keyword\">new</span> String[]{<span class=\"hljs-string\">\"hello\"</span>,<span class=\"hljs-string\">\"world\"</span>});\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"805\">\n                      这时，当你再读 process()\n                      方法时，读到的是一系列步骤，每个步骤都由一个方法来实现，你也能很快区分每个方法具体负责的职责是什么。如果字符的反转不正确，你会知道去\n                      reversecharacters() 方法里查找\n                      Bug，因为反转字符的职责已明确分配给了合适的方法，而且只有这个方法执行这个操作。\n                    </p>\n                    <p data-nodeid=\"806\">\n                      虽然这个例子很简单，但是它给我们一个很重要的启示：<strong\n                        data-nodeid=\"921\"\n                        >按照职责进行分离能帮助我们转移对问题的关注点</strong\n                      >。关注点其实就是用户关注的核心点，比如，例子中如果不分配职责，关注点就是处理字符串，但是处理字符串有很多方法和步骤，关注点太笼统了。而一旦开始尝试分离职责，你就会发现关注点发生了转移，也就是问题范围变小了。不过，在很多编码实现过程中，又很容易省略这个“转移”。因为哪怕是抽取一个方法，都会多耗费写代码的时间，而很多人实际上不愿意花这个时间，想等到有时间时再来优化。可等真的有时间时却发现代码逻辑千丝万缕，职责多到超出想象，根本优化不动。所以说，<strong\n                        data-nodeid=\"922\"\n                        >分离职责是一种将复杂问题拆分成可解决问题的有效方法</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"807\">总结</h3>\n                    <p data-nodeid=\"808\">\n                      学习职责分离最重要的是要理解是什么原因引起了代码变化。搞清楚变化的原因，比一拿着需求就开始编码更为重要。\n                    </p>\n                    <p data-nodeid=\"809\">\n                      在编码过程中，我们很多人总以为按照功能需求分配好了职责，代码就能按照职责运行了，但实际上可能一开始连职责都分配错了。比如，我现在对一些维护项目做\n                      Code Review 时，还会偶尔遇见超大的类和方法，其中 90%\n                      的维护人员给的理由都是不想到处跳转寻找代码，只修改一个文件更方便维护。但修改一个文件不代表不影响其他文件，因为变化的原因没有被真正找出来，这样错误的认知到后期常常都是要付出惨痛代价的。\n                    </p>\n                    <p data-nodeid=\"810\">\n                      在程序设计中，分配职责的常常是人，而人在大多时候是无法做到精准分配的，甚至会出现重复或错误的分配。<strong\n                        data-nodeid=\"931\"\n                        >只有有意识地进行职责分离，才能提高代码的可维护性</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"811\">\n                      这里还需要说明的是，虽然高内聚常和低耦合一起被提及，但是在我看来，高内聚不一定都是低耦合，比如，订单与商品系统，可能只是因为联系特别紧密，才需要强耦合在一起，你不能说订单系统下单成功，商品系统却说故障了没有商品，这是不行的。另外，低内聚也可能是低耦合，比如，针对一个上传文件功能，你开发了\n                      100\n                      个模块，每个模块和另一个模块只有一个链接，但整体功能和关系却可能异常复杂。\n                    </p>\n                    <p data-nodeid=\"812\">\n                      所以，你在应用职责分离原则时，要把握好拆分的力度，尽量朝着单一职责的目标去做，但如果实在不好做，那么控制在有限范围内就好。\n                    </p>\n                    <p data-nodeid=\"813\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/9D/Cgp9HWB4CH-ATPMCAAX84O2cK4I008.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"936\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"814\">课后思考</h3>\n                    <p data-nodeid=\"815\">\n                      学习了职责原则后，你觉得在日常的开发编码中，什么情况下最容易做职责分离？什么情况下最难做？\n                    </p>\n                    <p data-nodeid=\"816\">\n                      欢迎留言分享，我会第一时间给你回复。\n                    </p>\n                    <p data-nodeid=\"817\" class=\"\">\n                      在下一讲，我会接着与你分享“面向对象原则：面向对象编程框架到底长什么样？”的相关内容，记得按时来听课！\n                    </p>\n            "}