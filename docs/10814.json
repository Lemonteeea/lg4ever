{"title":"10 | 生命周期：各个生命周期的执行时机和应用场景是怎样的？","context":"\n                    <p data-nodeid=\"832\" class=\"\">\n                      Vue.js\n                      组件的生命周期包括创建、更新、销毁等过程。在这些过程中也会运行叫生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。\n                    </p>\n                    <p data-nodeid=\"4147\" class=\"\">\n                      在 Vue.js 2.x\n                      中，我们通常会在组件对象中定义一些生命周期钩子函数，到了\n                      Vue.js 3.0，依然兼容 Vue.js 2.x 生命周期的语法，但是\n                      Composition API 提供了一些生命周期函数的\n                      API，让我们可以主动注册不同的生命周期。\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// Vue.js 2.x 定义生命周期钩子函数 </span>\n</div></li><li><div class=\"code-word\">export <span class=\"hljs-keyword\">default</span> { \n</div></li><li><div class=\"code-word\">  created() { \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 做一些初始化工作 </span>\n</div></li><li><div class=\"code-word\">  }, \n</div></li><li><div class=\"code-word\">  mounted() { \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 可以拿到 DOM 节点 </span>\n</div></li><li><div class=\"code-word\">  }, \n</div></li><li><div class=\"code-word\">  beforeDestroy() { \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 做一些清理操作 </span>\n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// &nbsp;Vue.js 3.x 生命周期 API 改写上例 </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { onMounted, onBeforeUnmount } from <span class=\"hljs-string\">'vue'</span> \n</div></li><li><div class=\"code-word\">export <span class=\"hljs-keyword\">default</span> { \n</div></li><li><div class=\"code-word\">  setup() { \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 做一些初始化工作 </span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    onMounted(() =&gt; { \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 可以拿到 DOM 节点 </span>\n</div></li><li><div class=\"code-word\">    }) \n</div></li><li><div class=\"code-word\">    onBeforeUnmount(()=&gt;{ \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 做一些清理操作 </span>\n</div></li><li><div class=\"code-word\">    }) \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"835\">\n                      可以看到，在 Vue.js 3.0 中，setup 函数已经替代了 Vue.js\n                      2.x 的 beforeCreate 和 created 钩子函数，我们可以在 setup\n                      函数做一些初始化工作，比如发送一个异步 Ajax 请求获取数据。\n                    </p>\n                    <p data-nodeid=\"836\">\n                      我们用 onMounted API 替代了 Vue.js 2.x 的 mounted\n                      钩子函数，用 onBeforeUnmount API 替代了 Vue.js 2.x 的\n                      beforeDestroy 钩子函数。\n                    </p>\n                    <p data-nodeid=\"837\">\n                      其实，Vue.js 3.0 针对 Vue.js 2.x\n                      的生命周期钩子函数做了全面替换，映射关系如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">beforeCreate -&gt; 使用 setup() \n</div></li><li><div class=\"code-word\">created -&gt; 使用 <span class=\"hljs-function\">use <span class=\"hljs-title\">setup</span><span class=\"hljs-params\">()</span> \n</span></div></li><li><div class=\"code-word\">beforeMount -&gt; onBeforeMount \n</div></li><li><div class=\"code-word\">mounted -&gt; onMounted \n</div></li><li><div class=\"code-word\">beforeUpdate -&gt; onBeforeUpdate \n</div></li><li><div class=\"code-word\">updated -&gt; onUpdated \n</div></li><li><div class=\"code-word\">beforeDestroy-&gt; onBeforeUnmount \n</div></li><li><div class=\"code-word\">destroyed -&gt; onUnmounted \n</div></li><li><div class=\"code-word\">activated -&gt; onActivated \n</div></li><li><div class=\"code-word\">deactivated -&gt; onDeactivated \n</div></li><li><div class=\"code-word\">errorCaptured -&gt; onErrorCaptured\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"839\">\n                      除此之外，Vue.js 3.0 还新增了两个用于调试的生命周期\n                      API：onRenderTracked 和 onRenderTriggered。\n                    </p>\n                    <p data-nodeid=\"840\">\n                      那么，这些生命周期钩子函数内部是如何实现的？它们又分别在组件生命周期的哪些阶段执行的？分别适用于哪些开发场景？\n                    </p>\n                    <p data-nodeid=\"841\">\n                      带着这些疑问，我们来深入学习生命周期钩子函数背后的实现原理。\n                    </p>\n                    <h3 data-nodeid=\"842\">注册钩子函数</h3>\n                    <p data-nodeid=\"843\">\n                      首先，我们来看这些钩子函数是如何注册的，先来看一下它们的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> onBeforeMount = createHook(<span class=\"hljs-string\">'bm'</span> <span class=\"hljs-comment\">/* BEFORE_MOUNT */</span>) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> onMounted = createHook(<span class=\"hljs-string\">'m'</span> <span class=\"hljs-comment\">/* MOUNTED */</span>) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> onBeforeUpdate = createHook(<span class=\"hljs-string\">'bu'</span> <span class=\"hljs-comment\">/* BEFORE_UPDATE */</span>) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> onUpdated = createHook(<span class=\"hljs-string\">'u'</span> <span class=\"hljs-comment\">/* UPDATED */</span>) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> onBeforeUnmount = createHook(<span class=\"hljs-string\">'bum'</span> <span class=\"hljs-comment\">/* BEFORE_UNMOUNT */</span>) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> onUnmounted = createHook(<span class=\"hljs-string\">'um'</span> <span class=\"hljs-comment\">/* UNMOUNTED */</span>) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> onRenderTriggered = createHook(<span class=\"hljs-string\">'rtg'</span> <span class=\"hljs-comment\">/* RENDER_TRIGGERED */</span>) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> onRenderTracked = createHook(<span class=\"hljs-string\">'rtc'</span> <span class=\"hljs-comment\">/* RENDER_TRACKED */</span>) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> onErrorCaptured = (hook, target = currentInstance) =&gt; { \n</div></li><li><div class=\"code-word\">  injectHook(<span class=\"hljs-string\">'ec'</span> <span class=\"hljs-comment\">/* ERROR_CAPTURED */</span>, hook, target) \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8011\" class=\"\">\n                      我们发现除了 onErrorCaptured，其他钩子函数都是通过\n                      createHook\n                      函数创建的，通过传入不同的字符串来表示不同的钩子函数。\n                    </p>\n\n                    <p data-nodeid=\"846\">\n                      那么，我们就来分析一下 createHook 钩子函数的实现原理：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> createHook = function(lifecycle)  { \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> function (hook, target = currentInstance) { \n</div></li><li><div class=\"code-word\">    injectHook(lifecycle, hook, target) \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"848\">\n                      createHook 会返回一个函数，它的内部通过 injectHook\n                      注册钩子函数。你可能会问，这里为什么要用 createHook\n                      做一层封装而不直接使用 injectHook API 呢？比如：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> onBeforeMount = function(hook,target = currentInstance) { \n</div></li><li><div class=\"code-word\">  injectHook(<span class=\"hljs-string\">'bm'</span>, hook, target) \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> onMounted = function(hook,target = currentInstance) { \n</div></li><li><div class=\"code-word\">  injectHook(<span class=\"hljs-string\">'m'</span>, hook, target) \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"850\">\n                      这样实现当然也是可以的，不过，我们可以发现，这些钩子函数内部执行逻辑很类似，都是执行\n                      injectHook，唯一的区别是第一个参数字符串不同，所以这样的代码是可以进一步封装的，即用\n                      createHook 封装，这就是一个典型的函数柯里化技巧。\n                    </p>\n                    <p data-nodeid=\"851\">\n                      在调用 createHook 返回的函数时，也就不需要传入 lifecycle\n                      字符串，因为它在执行 createHook\n                      函数时就已经实现了该参数的保留。\n                    </p>\n                    <p data-nodeid=\"852\">\n                      所以，当我们通过\n                      <code data-backticks=\"1\" data-nodeid=\"945\"\n                        >onMounted(hook)</code\n                      >\n                      注册一个钩子函数时，内部就是通过\n                      <code data-backticks=\"1\" data-nodeid=\"947\"\n                        >injectHook('m', hook)</code\n                      >\n                      去注册的，接下来我们来进一步看 injectHook 函数的实现原理：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">injectHook</span><span class=\"hljs-params\">(type, hook, target = currentInstance, prepend = <span class=\"hljs-keyword\">false</span>)</span> </span>{ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> hooks = target[type] || (target[type] = []) \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 封装 hook 钩子函数并缓存 </span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> wrappedHook = hook.__weh || \n</div></li><li><div class=\"code-word\">    (hook.__weh = (...args) =&gt; { \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (target.isUnmounted) { \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> \n</div></li><li><div class=\"code-word\">      } \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 停止依赖收集 </span>\n</div></li><li><div class=\"code-word\">      pauseTracking() \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 设置 target 为当前运行的组件实例 </span>\n</div></li><li><div class=\"code-word\">      setCurrentInstance(target) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 执行钩子函数 </span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> res = callWithAsyncErrorHandling(hook, target, type, args) \n</div></li><li><div class=\"code-word\">      setCurrentInstance(<span class=\"hljs-keyword\">null</span>) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 恢复依赖收集 </span>\n</div></li><li><div class=\"code-word\">      resetTracking() \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> res \n</div></li><li><div class=\"code-word\">    }) \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (prepend) { \n</div></li><li><div class=\"code-word\">    hooks.unshift(wrappedHook) \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">    hooks.push(wrappedHook) \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"854\">\n                      结合代码来看，该函数主要是对用户注册的钩子函数 hook\n                      做了一层封装，然后添加到一个数组中，把数组保存在当前组件实例的\n                      target 上，这里，key 是用来区分钩子函数的字符串。比如，\n                      onMounted 注册的钩子函数在组件实例上就是通过 instance.m\n                      来保存。\n                    </p>\n                    <p data-nodeid=\"855\">\n                      这样的设计其实非常好理解，因为生命周期的钩子函数，是在组件生命周期的各个阶段执行，所以钩子函数必须要保存在当前的组件实例上，这样后面就可以在组件实例上通过不同的字符串\n                      key 找到对应的钩子函数数组并执行。\n                    </p>\n                    <p data-nodeid=\"856\">\n                      对于相同的钩子函数，会把封装的 wrappedHook 钩子函数缓存到\n                      hook.__weh 中，这样后续通过 scheduler\n                      方式执行的钩子函数就会被去重。\n                    </p>\n                    <p data-nodeid=\"857\">\n                      在后续执行 wrappedHook\n                      函数时，会先停止依赖收集，因为钩子函数内部访问的响应式对象，通常都已经执行过依赖收集，所以钩子函数执行的时候没有必要再次收集依赖，毕竟这个过程也有一定的性能消耗。\n                    </p>\n                    <p data-nodeid=\"858\">\n                      接着是设置 target 为当前组件实例。在 Vue.js\n                      的内部，会一直维护当前运行的组件实例\n                      currentInstance，在注册钩子函数的过程中，我们可以拿到当前运行组件实例\n                      currentInstance，并用 target\n                      保存，然后在钩子函数执行时，为了确保此时的 currentInstance\n                      和注册钩子函数时一致，会通过\n                      <code data-backticks=\"1\" data-nodeid=\"957\"\n                        >setCurrentInstance(target)</code\n                      >\n                      设置 target 为当前组件实例。\n                    </p>\n                    <p data-nodeid=\"859\">\n                      接下来就是通过 callWithAsyncErrorHandling\n                      方法去执行我们注册的 hook\n                      钩子函数，函数执行完毕则设置当前运行组件实例为\n                      null，并恢复依赖收集。\n                    </p>\n                    <p data-nodeid=\"860\">\n                      到这里，我们就了解了生命周期钩子函数是如何注册以及如何执行的，接下来，我们来依次分析各个钩子函数的执行时机和应用场景。\n                    </p>\n                    <p data-nodeid=\"861\">\n                      首先，我们来看通过 onBeforeMount 和 onMounted\n                      注册的钩子函数。\n                    </p>\n                    <h3 data-nodeid=\"862\">onBeforeMount 和 onMounted</h3>\n                    <p data-nodeid=\"863\">\n                      <strong data-nodeid=\"971\"\n                        >onBeforeMount 注册的 beforeMount\n                        钩子函数会在组件挂载之前执行</strong\n                      >，<strong data-nodeid=\"972\"\n                        >onMounted 注册的 mounted\n                        钩子函数会在组件挂载之后执行</strong\n                      >。我们来回顾一下组件副作用渲染函数关于组件挂载部分的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) =&gt; { \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建响应式的副作用渲染函数 </span>\n</div></li><li><div class=\"code-word\">  instance.update = effect(<span class=\"hljs-function\">function <span class=\"hljs-title\">componentEffect</span><span class=\"hljs-params\">()</span> </span>{ \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!instance.isMounted) { \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 获取组件实例上通过 onBeforeMount 钩子函数和 onMounted 注册的钩子函数 </span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> { bm, m } = instance; \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 渲染组件生成子树 vnode </span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> subTree = (instance.subTree = renderComponentRoot(instance)) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 执行 beforemount 钩子函数 </span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (bm) { \n</div></li><li><div class=\"code-word\">        invokeArrayFns(bm) \n</div></li><li><div class=\"code-word\">      } \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 把子树 vnode 挂载到 container 中 </span>\n</div></li><li><div class=\"code-word\">      patch(<span class=\"hljs-keyword\">null</span>, subTree, container, anchor, instance, parentSuspense, isSVG) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 保留渲染生成的子树根 DOM 节点 </span>\n</div></li><li><div class=\"code-word\">      initialVNode.el = subTree.el \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 执行 mounted 钩子函数 </span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (m) { \n</div></li><li><div class=\"code-word\">        queuePostRenderEffect(m, parentSuspense) \n</div></li><li><div class=\"code-word\">      } \n</div></li><li><div class=\"code-word\">      instance.isMounted = <span class=\"hljs-keyword\">true</span> \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 更新组件 </span>\n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">  }, prodEffectOptions) \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"865\">\n                      在执行 patch 挂载组件之前，会检测组件实例上是有否有注册的\n                      beforeMount 钩子函数 bm，如果有则通过 invokeArrayFns\n                      执行它，因为用户可以通过多次执行 onBeforeMount\n                      函数注册多个 beforeMount 钩子函数，所以这里 instance.bm\n                      是一个数组，通过遍历这个数组来依次执行 beforeMount\n                      钩子函数。\n                    </p>\n                    <p data-nodeid=\"4699\" class=\"\">\n                      在执行 patch 挂载组件之后，会检查组件实例上是否有注册的\n                      mounted 钩子函数 m，如果有的话则执行\n                      queuePostRenderEffect，把 mounted 钩子函数推入\n                      postFlushCbs 中，然后在整个应用 render 完毕后，同步执行\n                      flushPostFlushCbs 函数调用 mounted 钩子函数。\n                    </p>\n\n                    <p data-nodeid=\"867\">\n                      我经常在社区里听到一种争论：在组件初始化阶段，对于发送一些\n                      Ajax 异步请求的逻辑，是应该放在 created\n                      钩子函数中，还是应该放在 mounted 钩子函数中？\n                    </p>\n                    <p data-nodeid=\"868\">\n                      其实都可以，因为 created 和 mounted\n                      钩子函数执行的时候都能拿到组件数据，它们执行的顺序虽然有先后，但都会在一个\n                      Tick\n                      内执行完毕，而异步请求是有网络耗时的，其耗时远远大于一个\n                      Tick 的时间。所以，你无论在 created 还是在 mounted\n                      里发请求，都要等请求的响应回来，然后更新数据，再触发组件的重新渲染。\n                    </p>\n                    <p data-nodeid=\"869\">\n                      前面说过，Vue.js 2.x 中的 beforeCreate 和 created\n                      钩子函数可以用 setup\n                      函数替代。所以，对于组件初始化阶段发送异步请求的逻辑，放在\n                      setup 函数中、beforeMount 钩子函数中或者 mounted\n                      钩子函数中都可以，它们都可以拿到组件相关的数据。当然，我更推荐在\n                      setup 函数中执行，因为从语义化的角度来看这样更合适。\n                    </p>\n                    <p data-nodeid=\"870\">\n                      不过，如果你想依赖 DOM\n                      去做一些初始化操作，那就只能把相关逻辑放在 mounted\n                      钩子函数中了，这样你才能拿到组件渲染后的 DOM。\n                    </p>\n                    <p data-nodeid=\"871\">\n                      对于嵌套组件，组件在挂载相关的生命周期钩子函数时，先执行父组件的\n                      beforeMount，然后是子组件的 beforeMount，接着是子组件的\n                      mounted ，最后执行父组件的 mounted。\n                    </p>\n                    <p data-nodeid=\"872\">\n                      接下来，我们来看通过 onBeforeUpdate 和 onUpdated\n                      注册的钩子函数。\n                    </p>\n                    <h3 data-nodeid=\"873\">onBeforeUpdate 和 onUpdated</h3>\n                    <p data-nodeid=\"874\">\n                      <strong data-nodeid=\"990\"\n                        >onBeforeUpdate 注册的 beforeUpdate\n                        钩子函数会在组件更新之前执行</strong\n                      >，<strong data-nodeid=\"991\"\n                        >onUpdated 注册的 updated\n                        钩子函数会在组件更新之后执行</strong\n                      >。我们来回顾一下组件副作用渲染函数关于组件更新的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) =&gt; { \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建响应式的副作用渲染函数 </span>\n</div></li><li><div class=\"code-word\">  instance.update = effect(<span class=\"hljs-function\">function <span class=\"hljs-title\">componentEffect</span><span class=\"hljs-params\">()</span> </span>{ \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!instance.isMounted) { \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 渲染组件 </span>\n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 更新组件 </span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 获取组件实例上通过 onBeforeUpdate 钩子函数和 onUpdated 注册的钩子函数 </span>\n</div></li><li><div class=\"code-word\">      let { next, vnode, bu, u } = instance \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// next 表示新的组件 vnode </span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (next) { \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 更新组件 vnode 节点信息 </span>\n</div></li><li><div class=\"code-word\">        updateComponentPreRender(instance, next, optimized) \n</div></li><li><div class=\"code-word\">      } \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">        next = vnode \n</div></li><li><div class=\"code-word\">      } \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 渲染新的子树 vnode </span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> nextTree = renderComponentRoot(instance) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 缓存旧的子树 vnode </span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> prevTree = instance.subTree \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 更新子树 vnode </span>\n</div></li><li><div class=\"code-word\">      instance.subTree = nextTree \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 执行 beforeUpdate 钩子函数 </span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (bu) { \n</div></li><li><div class=\"code-word\">        invokeArrayFns(bu) \n</div></li><li><div class=\"code-word\">      } \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 组件更新核心逻辑，根据新旧子树 vnode 做 patch </span>\n</div></li><li><div class=\"code-word\">      patch(prevTree, nextTree, \n</div></li><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 如果在 teleport 组件中父节点可能已经改变，所以容器直接找旧树 DOM 元素的父节点 </span>\n</div></li><li><div class=\"code-word\">        hostParentNode(prevTree.el), \n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">// 缓存更新后的 DOM 节点 </span>\n</div></li><li><div class=\"code-word\">        getNextHostNode(prevTree), \n</div></li><li><div class=\"code-word\">        instance, \n</div></li><li><div class=\"code-word\">        parentSuspense, \n</div></li><li><div class=\"code-word\">        isSVG) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 缓存更新后的 DOM 节点 </span>\n</div></li><li><div class=\"code-word\">      next.el = nextTree.el \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 执行 updated 钩子函数 </span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (u) { \n</div></li><li><div class=\"code-word\">        queuePostRenderEffect(u, parentSuspense) \n</div></li><li><div class=\"code-word\">      } \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">  }, prodEffectOptions) \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"876\">\n                      在执行 patch 更新组件之前，会检测组件实例上是有否有注册的\n                      beforeUpdate 钩子函数 bu，如果有则通过 invokeArrayFns\n                      执行它。\n                    </p>\n                    <p data-nodeid=\"877\">\n                      在执行 patch 更新组件之后，会检查组件实例上是否有注册的\n                      updated 钩子函数 u，如果有，则通过 queuePostRenderEffect\n                      把 updated 钩子函数推入 postFlushCbs\n                      中，因为组件的更新本身就是在 nextTick 后进行\n                      flushJobs，因此此时再次执行 queuePostRenderEffect\n                      推入到队列的任务，会在同一个 Tick 内执行这些\n                      postFlushCbs，也就是执行所有 updated 的钩子函数。\n                    </p>\n                    <p data-nodeid=\"5251\" class=\"\">\n                      在 beforeUpdate 钩子函数执行时，组件的 DOM\n                      还未更新，如果你想在组件更新前访问\n                      DOM，比如手动移除已添加的事件监听器，你可以注册这个钩子函数。\n                    </p>\n\n                    <p data-nodeid=\"879\">\n                      在 updated 钩子函数执行时，组件 DOM\n                      已经更新，所以你现在可以执行依赖于 DOM\n                      的操作。如果要监听数据的改变并执行某些逻辑，最好不要使用\n                      updated 钩子函数而用计算属性或 watcher\n                      取而代之，因为任何数据的变化导致的组件更新都会执行 updated\n                      钩子函数。另外注意，\n                      <strong data-nodeid=\"1000\"\n                        >不要在 updated\n                        钩子函数中更改数据，因为这样会再次触发组件更新，导致无限递归更新</strong\n                      >\n                      。\n                    </p>\n                    <p data-nodeid=\"5803\" class=\"\">\n                      还有，父组件的更新不一定会导致子组件的更新，因为 Vue.js\n                      的更新粒度是组件级别的。\n                    </p>\n\n                    <p data-nodeid=\"881\">\n                      接下来，我们来看通过 onBeforeUnmount 和 onUnmounted\n                      注册的钩子函数。\n                    </p>\n                    <h3 data-nodeid=\"882\">onBeforeUnmount 和 onUnmounted</h3>\n                    <p data-nodeid=\"883\">\n                      <strong data-nodeid=\"1012\"\n                        >onBeforeUnmount 注册的 beforeUnMount\n                        钩子函数会在组件销毁之前执行</strong\n                      >，onUnmounted\n                      <strong data-nodeid=\"1013\"\n                        >注册的 unmounted 钩子函数会在组件销毁之后执行</strong\n                      >\n                      。我们来看一下组件销毁相关逻辑实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> unmountComponent = (instance, parentSuspense, doRemove) =&gt; { \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { bum, effects, update, subTree, um } = instance \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 执行 beforeUnmount 钩子函数 </span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (bum) { \n</div></li><li><div class=\"code-word\">    invokeArrayFns(bum) \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 清理组件引用的 effects 副作用函数 </span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (effects) { \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; effects.length; i++) { \n</div></li><li><div class=\"code-word\">      stop(effects[i]) \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 如果一个异步组件在加载前就销毁了，则不会注册副作用渲染函数 </span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (update) { \n</div></li><li><div class=\"code-word\">    stop(update) \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 调用 unmount 销毁子树 </span>\n</div></li><li><div class=\"code-word\">    unmount(subTree, instance, parentSuspense, doRemove) \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 执行 unmounted 钩子函数 </span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (um) { \n</div></li><li><div class=\"code-word\">    queuePostRenderEffect(um, parentSuspense) \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"885\">\n                      其实整个组件销毁的逻辑很简单，主要就是<strong\n                        data-nodeid=\"1023\"\n                        >清理组件实例上绑定的 effects\n                        副作用函数和注册的副作用渲染函数 update</strong\n                      >，以及<strong data-nodeid=\"1024\"\n                        >调用 unmount 销毁子树</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"886\">\n                      unmount\n                      主要就是遍历子树，它会通过递归的方式来销毁子节点，遇到组件节点时执行\n                      unmountComponent，遇到普通节点时则删除 DOM\n                      元素。组件的销毁过程和渲染过程类似，都是递归的过程。\n                    </p>\n                    <p data-nodeid=\"887\">\n                      在组件销毁前，会检测组件实例上是有否有注册的 beforeUnmount\n                      钩子函数 bum，如果有则通过 invokeArrayFns 执行。\n                    </p>\n                    <p data-nodeid=\"888\">\n                      在组件销毁后，会检测组件实例上是否有注册的 unmounted\n                      钩子函数 um，如果有则通过 queuePostRenderEffect 把\n                      unmounted 钩子函数推入到 postFlushCbs\n                      中，因为组件的销毁就是组件更新的一个分支逻辑，所以在\n                      nextTick 后进行 flushJobs，因此此时再次执行\n                      queuePostRenderEffect 推入队列的任务，会在同一个 Tick\n                      内执行这些 postFlushCbs，也就是执行所有的 unmounted\n                      钩子函数。\n                    </p>\n                    <p data-nodeid=\"889\">\n                      对于嵌套组件，组件在执行销毁相关的生命周期钩子函数时，先执行父组件的\n                      beforeUnmount，再执行子组件的\n                      beforeUnmount，然后执行子组件的 unmounted\n                      ，最后执行父组件的 unmounted。\n                    </p>\n                    <p data-nodeid=\"890\">\n                      虽然组件在销毁阶段会清理一些定义的 effects\n                      函数，删除组件内部的 DOM\n                      元素，但是有一些需要清理的对象，组件并不能自动完成它们的清理，比如你在组件内部创建一个定时器，就应该在\n                      beforeUnmount 或者 unmounted 钩子函数中清除，举个例子：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt; \n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span> \n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{count}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> \n</div></li><li><div class=\"code-word\">&lt;/template&gt; \n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"> \n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">import</span> { ref, onBeforeUnmount } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> { \n</div></li><li><div class=\"code-word\">    setup () { \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> timer = setInterval(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> { \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-built_in\">console</span>.log(count.value++) \n</div></li><li><div class=\"code-word\">      }, <span class=\"hljs-number\">1000</span>) \n</div></li><li><div class=\"code-word\">      onBeforeUnmount(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> { \n</div></li><li><div class=\"code-word\">        clearInterval(timer) \n</div></li><li><div class=\"code-word\">      }) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> { \n</div></li><li><div class=\"code-word\">        count \n</div></li><li><div class=\"code-word\">      } \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"892\">\n                      可以看到，这里我们在 setup 函数内部定义了一个 timer\n                      计时器， count 每秒会加 1\n                      并在控制台中输出。如果这个组件被销毁，就会触发\n                      onBeforeUnmount 注册的 beforeUnmount\n                      钩子函数，然后清除定时器。如果你不清除，就会发现组件销毁后，虽然\n                      DOM\n                      被移除了，计时器仍然存在，并且会一直计时并在控制台输出，这就造成了不必要的内存泄漏。\n                    </p>\n                    <p data-nodeid=\"893\">\n                      接下来，我们来看通过 onErrorCaptured 注册的钩子函数。\n                    </p>\n                    <h3 data-nodeid=\"894\">onErrorCaptured</h3>\n                    <p data-nodeid=\"895\">\n                      在前面的课时中，我们多次接触过一个方法\n                      callWithErrorHandling，它就是执行一段函数并通过\n                      handleError 处理错误。那么，handleError\n                      具体做了哪些事情呢？\n                    </p>\n                    <p data-nodeid=\"896\">我们先来看一下它的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">handleError</span><span class=\"hljs-params\">(err, instance, type)</span> </span>{ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> contextVNode = instance ? instance.vnode : <span class=\"hljs-function\"><span class=\"hljs-keyword\">null</span> \n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(instance)</span> { \n</div></li><li><div class=\"code-word\">    let cur = instance.parent \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 为了兼容 2.x 版本，暴露组件实例给钩子函数 </span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> exposedInstance = instance.proxy \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 获取错误信息 </span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> errorInfo = (process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) ? ErrorTypeStrings[type] : type \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 尝试向上查找所有父组件，执行 errorCaptured 钩子函数 </span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (cur) { \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> errorCapturedHooks = cur.<span class=\"hljs-function\">ec \n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(errorCapturedHooks)</span> { \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; errorCapturedHooks.length; i++) { \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 如果执行的 errorCaptured 钩子函数并返回 true，则停止向上查找。、 </span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> (errorCapturedHooks[i](err, exposedInstance, errorInfo)) { \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> \n</div></li><li><div class=\"code-word\">          } \n</div></li><li><div class=\"code-word\">        } \n</div></li><li><div class=\"code-word\">      } \n</div></li><li><div class=\"code-word\">      cur = cur.parent \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 往控制台输出未处理的错误 </span>\n</div></li><li><div class=\"code-word\">  logError(err, type, contextVNode) \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"898\">\n                      handleError\n                      的实现其实很简单，它会从当前报错的组件的父组件实例开始，尝试去查找注册的\n                      errorCaptured 钩子函数，如果有则遍历执行并且判断\n                      errorCaptured 钩子函数的返回值是否为\n                      true，如果是则说明这个错误已经得到了正确的处理，就会直接结束。\n                    </p>\n                    <p data-nodeid=\"899\">\n                      否则会继续遍历，遍历完当前组件实例的 errorCaptured\n                      钩子函数后，如果这个错误还没得到正确处理，则向上查找它的父组件实例，以同样的逻辑去查找是否有正确处理该错误的\n                      errorCaptured 钩子函数，直到查找完毕。\n                    </p>\n                    <p data-nodeid=\"900\">\n                      如果整个链路上都没有正确处理错误的 errorCaptured\n                      钩子函数，则通过 logError 往控制台输出未处理的错误。所以\n                      <strong data-nodeid=\"1046\"\n                        >errorCaptured\n                        本质上是捕获一个来自子孙组件的错误</strong\n                      >，<strong data-nodeid=\"1047\"\n                        >它返回 true 就可以阻止错误继续向上传播</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"901\">\n                      errorCaptured\n                      在平时工作中可能用的不多，但它的确是一个很实用的功能，比如你可以在根组件注册一个\n                      errorCaptured\n                      钩子函数，去捕获所有子孙组件的错误，并且可以根据错误的类型和信息统计和上报错误。\n                    </p>\n                    <p data-nodeid=\"902\">\n                      接下来，我们来看通过 onRenderTracked 和 onRenderTriggered\n                      注册的钩子函数。\n                    </p>\n                    <h3 data-nodeid=\"903\">\n                      onRenderTracked 和 onRenderTriggered\n                    </h3>\n                    <p data-nodeid=\"904\">\n                      onRenderTracked 和 onRenderTriggered 是 Vue.js 3.0\n                      新增的生命周期\n                      API，它们是在开发阶段渲染调试用的。这里再次回顾一下我们创建的副作用渲染函数的第二个参数（这里你可以去\n                      06 课时“ 响应式：响应式内部的实现原理是怎样的？\n                      ”中复习一下），在开发环境下它的代码是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">instance.update = effect(<span class=\"hljs-function\">function <span class=\"hljs-title\">componentEffect</span><span class=\"hljs-params\">()</span> </span>{ \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 创建或者更组件 </span>\n</div></li><li><div class=\"code-word\">}, createDevEffectOptions(instance)) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createDevEffectOptions</span><span class=\"hljs-params\">(instance)</span> </span>{ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> { \n</div></li><li><div class=\"code-word\">    scheduler: queueJob, \n</div></li><li><div class=\"code-word\">    onTrack: instance.rtc ? e =&gt; invokeArrayFns(instance.rtc, e) : <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>, \n</div></li><li><div class=\"code-word\">    onTrigger: instance.rtg ? e =&gt; invokeArrayFns(instance.rtg, e) : <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"906\">\n                      通过上述代码我们发现，onRenderTracked 和 onRenderTriggered\n                      注册的钩子函数，原来是在副作用渲染函数的 onTrack 和\n                      onTrigger 对应的函数中执行的。\n                    </p>\n                    <p data-nodeid=\"907\">\n                      我们当时介绍 effect\n                      副作用函数的配置时并没有介绍这两个属性，那么它们是做什么用的呢？\n                    </p>\n                    <p data-nodeid=\"908\">\n                      这就要先来看 onTrack\n                      函数的执行时机。我们知道当访问一个响应式对象时，会执行\n                      track 函数做依赖收集，我们来回顾一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">track</span><span class=\"hljs-params\">(target, type, key)</span> </span>{ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 执行一些依赖收集的操作 </span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!dep.has(activeEffect)) { \n</div></li><li><div class=\"code-word\">    dep.add(activeEffect) \n</div></li><li><div class=\"code-word\">    activeEffect.deps.push(dep) \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) &amp;&amp; activeEffect.options.onTrack) { \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 执行 onTrack 函数 </span>\n</div></li><li><div class=\"code-word\">      activeEffect.options.onTrack({ \n</div></li><li><div class=\"code-word\">        effect: activeEffect, \n</div></li><li><div class=\"code-word\">        target, \n</div></li><li><div class=\"code-word\">        type, \n</div></li><li><div class=\"code-word\">        key \n</div></li><li><div class=\"code-word\">      }) \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"910\">\n                      可以看到，track\n                      函数先执行依赖收集，然后在非生产环境下检测当前的\n                      activeEffect 的配置有没有定义 onTrack\n                      函数，如果有的则执行该方法。\n                    </p>\n                    <p data-nodeid=\"911\">\n                      因此对应到副作用渲染函数，当它执行的时候，activeEffect\n                      就是这个副作用渲染函数，这时访问响应式数据就会触发 track\n                      函数，<strong data-nodeid=\"1069\"\n                        >在执行完依赖收集后</strong\n                      >，<strong data-nodeid=\"1070\">会执行 onTrack 函数</strong\n                      >，<strong data-nodeid=\"1071\"\n                        >也就是遍历执行我们注册的 renderTracked 钩子函数</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"912\">\n                      接下来，我们再来回顾一下 trigger 函数的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">trigger</span> <span class=\"hljs-params\">(target, type, key, newValue)</span> </span>{ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 添加要运行的 effects 集合 </span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> run = (effect) =&gt; { \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) &amp;&amp; effect.options.onTrigger) { \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 执行 onTrigger </span>\n</div></li><li><div class=\"code-word\">      effect.options.onTrigger({ \n</div></li><li><div class=\"code-word\">        effect, \n</div></li><li><div class=\"code-word\">        target, \n</div></li><li><div class=\"code-word\">        key, \n</div></li><li><div class=\"code-word\">        type, \n</div></li><li><div class=\"code-word\">        newValue, \n</div></li><li><div class=\"code-word\">        oldValue, \n</div></li><li><div class=\"code-word\">        oldTarget \n</div></li><li><div class=\"code-word\">      }) \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (effect.options.scheduler) { \n</div></li><li><div class=\"code-word\">      effect.options.scheduler(effect) \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">      effect() \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 遍历执行 effects </span>\n</div></li><li><div class=\"code-word\">  effects.forEach(run) \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"914\">\n                      我们知道，trigger 函数首先要创建运行的 effects\n                      集合，然后遍历执行，在执行的过程中，会在非生产环境下检测待执行的\n                      effect 配置中有没有定义 onTrigger\n                      函数，如果有则执行该方法。\n                    </p>\n                    <p data-nodeid=\"915\">\n                      因此对应到我们的副作用渲染函数，当它内部依赖的响应式对象值被修改后，就会触发\n                      trigger 函数 ，这个时候副作用渲染函数就会被添加到要运行的\n                      effects 集合中，<strong data-nodeid=\"1083\"\n                        >在遍历执行 effects 的时候会执行 onTrigger 函数</strong\n                      >，<strong data-nodeid=\"1084\"\n                        >也就是遍历执行我们注册的 renderTriggered\n                        钩子函数</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"916\">\n                      了解完 renderTracked 和 renderTriggered\n                      钩子函数的执行时机后，我们来看一下实际场景的应用：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt; \n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span> \n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{count}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"increase\"</span>&gt;</span>Increase<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> \n</div></li><li><div class=\"code-word\">&lt;/template&gt; \n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"> \n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">import</span> { ref, onRenderTracked, onRenderTriggered } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> { \n</div></li><li><div class=\"code-word\">    setup () { \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> count = ref(<span class=\"hljs-number\">0</span>) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">increase</span> (<span class=\"hljs-params\"></span>) </span>{ \n</div></li><li><div class=\"code-word\">        count.value++ \n</div></li><li><div class=\"code-word\">      } \n</div></li><li><div class=\"code-word\">      onRenderTracked(<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> { \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-built_in\">console</span>.log(e) \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">debugger</span> \n</div></li><li><div class=\"code-word\">      }) \n</div></li><li><div class=\"code-word\">      onRenderTriggered(<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> { \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-built_in\">console</span>.log(e) \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">debugger</span> \n</div></li><li><div class=\"code-word\">      }) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> { \n</div></li><li><div class=\"code-word\">        count, \n</div></li><li><div class=\"code-word\">        increase \n</div></li><li><div class=\"code-word\">      } \n</div></li><li><div class=\"code-word\">    } \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"918\">\n                      <strong data-nodeid=\"1090\">像这样</strong\n                      >在开发阶段，我们可以通过注册这两个钩子函数，来追踪组件渲染的依赖来源以及触发组件重新渲染的数据更新来源。\n                    </p>\n                    <h3 data-nodeid=\"919\">总结</h3>\n                    <p data-nodeid=\"9115\" class=\"te-preview-highlight\">\n                      好的，到这里我们这一节的学习就结束啦，通过学习，你应该掌握\n                      Vue.js 中生命周期注册的\n                      API，了解各个生命周期的执行时机和应用场景。\n                    </p>\n\n                    <p data-nodeid=\"3595\" class=\"\">\n                      最后，我们通过一张图再来直观地感受一下组件的各个生命周期：\n                    </p>\n\n                    <p data-nodeid=\"922\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/40/C1/Ciqc1F8zkvmAR_QpAAJxUtKU_4s942.png\"\n                        alt=\"1.png\"\n                        data-nodeid=\"1096\"\n                      />\n                    </p>\n                    <p data-nodeid=\"923\">\n                      Vue.js 3.0 还有 2 个生命周期 API，分别是 onActivated 和\n                      onDeactivated，我们将会在介绍 KeepAlive 组件时详细分析。\n                    </p>\n                    <p data-nodeid=\"924\" class=\"\">\n                      最后，给你留一道思考题目，如果你想在路由组件切换的时候，取消组件正在发送的异步\n                      Ajax\n                      请求，那你应该在哪个生命周期写这个逻辑呢？欢迎你在留言区与我分享。\n                    </p>\n                    <blockquote data-nodeid=\"925\">\n                      <p data-nodeid=\"926\" class=\"\">\n                        <strong data-nodeid=\"1108\"\n                          >本节课的相关代码在源代码中的位置如下：</strong\n                        ><br />\n                        packages/runtime-core/src/apiLifecycle.ts<br />\n                        packages/runtime-core/src/renderer.ts<br />\n                        packages/reactivity/src/effect.ts\n                      </p>\n                    </blockquote>\n            "}