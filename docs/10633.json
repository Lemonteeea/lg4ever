{"title":"32 | 状态模式：如何通过有限状态机监控功能的“状态变化”？","context":"\n                    <p data-nodeid=\"2\">\n                      状态模式的应用场景非常广泛，比如，线上购物订单、手机支付、音乐播放器、游戏、工作流引擎等场景。状态模式设计的初衷是应对同一个对象里不同状态变化时的不同行为的变化。那么，当我们遇见类似的场景时，该如何来使用状态模式呢？\n                    </p>\n                    <p data-nodeid=\"3\">话不多说，让我们开始今天的学习吧。</p>\n                    <h3 data-nodeid=\"4\">模式原理分析</h3>\n                    <p data-nodeid=\"5\">\n                      状态模式的原始定义是：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了自己的类一样。\n                    </p>\n                    <p data-nodeid=\"6\">\n                      这个定义确实有点抽象，简单来说，<strong data-nodeid=\"83\"\n                        >状态模式就是让一个对象通过定义一系列状态的变化来控制行为的变化</strong\n                      >。比如，给购买的物品定义几个包裹运送状态，已下单、运送中、已签收等，当“已下单”状态变为“运送中”状态时，物流货车会把包装好的包裹运送到指定地址，也就是说，当包裹的状态发生改变时，就会触发相应的外部操作。\n                    </p>\n                    <p data-nodeid=\"7\">我们先来看看状态模式的标准 UML 图：</p>\n                    <p data-nodeid=\"927\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/49/B1/CioPOWDcE0yATvGQAADj5AhFr90365.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"930\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"9\">\n                      从这个 UML 图中，我们能看出状态模式包含的关键角色有三个。\n                    </p>\n                    <ul data-nodeid=\"10\">\n                      <li data-nodeid=\"11\">\n                        <p data-nodeid=\"12\">\n                          <strong data-nodeid=\"91\">上下文信息类</strong\n                          >（Context）：实际上就是存储当前状态的类，对外提供更新状态的操作。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13\">\n                        <p data-nodeid=\"14\">\n                          <strong data-nodeid=\"96\">抽象状态类</strong\n                          >（State）：可以是一个接口或抽象类，用于定义声明状态更新的操作方法有哪些。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15\">\n                        <p data-nodeid=\"16\">\n                          <strong data-nodeid=\"101\">具体状态类</strong>（StateA\n                          等）：实现抽象状态类定义的方法，根据具体的场景来指定对应状态改变后的代码实现逻辑。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"17\">\n                      下面我们直接来看看该 UML 对应的代码实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">State</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handle</span><span class=\"hljs-params\">(Context context)</span></span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StateA</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">State</span></span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> StateA instance = <span class=\"hljs-keyword\">new</span> StateA();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">StateA</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> StateA <span class=\"hljs-title\">instance</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> instance;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handle</span><span class=\"hljs-params\">(Context context)</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"=== 进入状态A\"</span>);\n</div></li><li><div class=\"code-word\">        context.setCurrentState(StateB.instance());\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StateB</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">State</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> StateB instance = <span class=\"hljs-keyword\">new</span> StateB();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">StateB</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> StateB <span class=\"hljs-title\">instance</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> instance;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">handle</span><span class=\"hljs-params\">(Context context)</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"=== 进入状态B\"</span>);\n</div></li><li><div class=\"code-word\">        context.setCurrentState(<span class=\"hljs-keyword\">this</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Context</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> State currentState;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Context</span><span class=\"hljs-params\">(State currentState)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.currentState = currentState;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> == currentState) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">this</span>.currentState  = StateA.instance();\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> State <span class=\"hljs-title\">getCurrentState</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> currentState;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setCurrentState</span><span class=\"hljs-params\">(State currentState)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.currentState = currentState;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">request</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        currentState.handle(<span class=\"hljs-keyword\">this</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19\">\n                      在该代码实现中，我们定义的状态 A 和状态 B\n                      被封装为具体的状态类 StateA 和\n                      StateB，两个具体的状态类实现了同一个抽象状态类 State\n                      的接口。上下文信息类 Context 存储一个全局变量\n                      currentState，用以保存当前状态对象。而具体的状态类通过将\n                      Context\n                      对象作为参数输入，就能获取访问全局的当前状态，以完成状态的切换。\n                    </p>\n                    <p data-nodeid=\"20\">\n                      所以说，状态模式设计的核心点在于<strong data-nodeid=\"109\"\n                        >找到合适的抽象状态以及状态之间的转移关系，通过改变状态来达到改变行为的目的</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"21\">使用场景分析</h3>\n                    <p data-nodeid=\"22\">\n                      一般来讲，状态模式常见的使用场景有这样几种。\n                    </p>\n                    <ul data-nodeid=\"2094\">\n                      <li data-nodeid=\"2095\">\n                        <p data-nodeid=\"2096\">\n                          <strong data-nodeid=\"2105\"\n                            >对象根据自身状态的变化来进行不同行为的操作时，</strong\n                          >\n                          比如，购物订单状态。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2097\">\n                        <p data-nodeid=\"2098\">\n                          <strong data-nodeid=\"2110\"\n                            >对象需要根据自身变量的当前值改变行为，不期望使用大量\n                            if-else 语句时，</strong\n                          >\n                          比如，商品库存状态。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2099\">\n                        <p data-nodeid=\"2100\" class=\"\">\n                          <strong data-nodeid=\"2115\"\n                            >对于某些确定的状态和行为，不想使用重复代码时，</strong\n                          >\n                          比如，某一个会员当天的购物浏览记录。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"30\">\n                      举一个现实中的例子，我们可以通过按电视遥控器上的按钮来改变电视的显示状态。如果电视处于打开状态，我们可以将其设置为关闭、静音或更换频道。但如果电视是关闭状态，当我们按下切换频道的按钮时是不会有任何作用的。因为这时对于关闭状态的电视来说，只有设置为打开状态才有效。\n                    </p>\n                    <p data-nodeid=\"31\">\n                      再比如，状态模式在程序中的另一个例子就是 Java\n                      线程状态，一个线程的生命周期里有五种状态，只有在获得当前状态后才能确定下一个状态。\n                    </p>\n                    <p data-nodeid=\"32\">\n                      为了帮助你更好地理解状态模式的适用场景，下面我们还是通过一个简单的例子来演示一下。在线上购物的过程中，当我们选定好了商品并提交订单后，装有商品的包裹就会开始进行运送。这里我们定义\n                      6\n                      种简单的包裹运送状态：已下单、仓库处理中、运输中、派送中、待取件和已签收。如下图所示：\n                    </p>\n                    <p data-nodeid=\"2494\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/49/A9/Cgp9HWDcE2KALQXBAACLlk93BXs706.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"2497\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"34\">\n                      首先，我们来定义包裹的状态\n                      PackageState，在接口中声明一个更新状态的方法\n                      updateState()，该方法接收包裹上下文信息类 PackageContext\n                      作为参数。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">PackageState</span> </span>{\n</div></li><li><div class=\"code-word\">    \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\">     * 定义了6种状态\n</div></li><li><div class=\"code-word\">     * 1 - 已下单\n</div></li><li><div class=\"code-word\">     * 2 - 仓库处理中\n</div></li><li><div class=\"code-word\">     * 3 - 运输中\n</div></li><li><div class=\"code-word\">     * 4 - 派送中\n</div></li><li><div class=\"code-word\">     * 5 - 待取件\n</div></li><li><div class=\"code-word\">     * 6 - 已签收\n</div></li><li><div class=\"code-word\">     * <span class=\"hljs-doctag\">@param</span> ctx\n</div></li><li><div class=\"code-word\">     */\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateState</span><span class=\"hljs-params\">(PackageContext ctx)</span></span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36\">\n                      然后我们再来详细定义上下文信息类\n                      PackageContext，其中包含一个当前状态 PackageState\n                      和一个包裹的 id。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PackageContext</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> PackageState currentState;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String packageId;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">PackageContext</span><span class=\"hljs-params\">(PackageState currentState, String packageId)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.currentState = currentState;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.packageId = packageId;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span>(currentState == <span class=\"hljs-keyword\">null</span>) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">this</span>.currentState = Acknowledged.instance();\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> PackageState <span class=\"hljs-title\">getCurrentState</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> currentState;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setCurrentState</span><span class=\"hljs-params\">(PackageState currentState)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.currentState = currentState;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getPackageId</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> packageId;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setPackageId</span><span class=\"hljs-params\">(String packageId)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.packageId = packageId;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        currentState.updateState(<span class=\"hljs-keyword\">this</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"38\">\n                      接下来，我们依次定义具体的状态类：已下单（Acknowledged）、仓库处理中（WarehouseProcessing）、运输中（InTransition）、派送中（Delivering）、待取件（WaitForPickUp）、已签收（Received）。每一个类都会实现\n                      updateState() 方法，同时使用单例模式模拟状态的唯一性。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-number\">1</span> - 已下单\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Acknowledged</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">PackageState</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//Singleton</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Acknowledged instance = <span class=\"hljs-keyword\">new</span> Acknowledged();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">Acknowledged</span><span class=\"hljs-params\">()</span> </span>{}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Acknowledged <span class=\"hljs-title\">instance</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> instance;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateState</span><span class=\"hljs-params\">(PackageContext ctx)</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"=== state start...\"</span>);\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"1 - Package is acknowledged !!\"</span>);\n</div></li><li><div class=\"code-word\">        ctx.setCurrentState(WarehouseProcessing.instance());\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WarehouseProcessing</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">PackageState</span>  </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//Singleton</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> WarehouseProcessing instance = <span class=\"hljs-keyword\">new</span> WarehouseProcessing();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">WarehouseProcessing</span><span class=\"hljs-params\">()</span> </span>{}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> WarehouseProcessing <span class=\"hljs-title\">instance</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> instance;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateState</span><span class=\"hljs-params\">(PackageContext ctx)</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"2 - Package is WarehouseProcessing\"</span>);\n</div></li><li><div class=\"code-word\">        ctx.setCurrentState(InTransition.instance());\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InTransition</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">PackageState</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//Singleton</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> InTransition instance = <span class=\"hljs-keyword\">new</span> InTransition();\n</div></li><li><div class=\"code-word\"> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">InTransition</span><span class=\"hljs-params\">()</span> </span>{}\n</div></li><li><div class=\"code-word\"> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> InTransition <span class=\"hljs-title\">instance</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> instance;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">     \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//Business logic and state transition</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateState</span><span class=\"hljs-params\">(PackageContext ctx)</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"3 - Package is in transition !!\"</span>);\n</div></li><li><div class=\"code-word\">        ctx.setCurrentState(Delivering.instance());\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Delivering</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">PackageState</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//Singleton</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Delivering instance = <span class=\"hljs-keyword\">new</span> Delivering();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">Delivering</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Delivering <span class=\"hljs-title\">instance</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> instance;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//Business logic</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateState</span><span class=\"hljs-params\">(PackageContext ctx)</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"4 - Package is Delivering !!\"</span>);\n</div></li><li><div class=\"code-word\">        ctx.setCurrentState(WaitForPickUp.instance());\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WaitForPickUp</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">PackageState</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//Singleton</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> WaitForPickUp instance = <span class=\"hljs-keyword\">new</span> WaitForPickUp();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">WaitForPickUp</span><span class=\"hljs-params\">()</span> </span>{}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> WaitForPickUp <span class=\"hljs-title\">instance</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> instance;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//Business logic and state transition</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateState</span><span class=\"hljs-params\">(PackageContext ctx)</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"5 - Package is waiting for pick up !!\"</span>);\n</div></li><li><div class=\"code-word\">        ctx.setCurrentState(Received.instance());\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Received</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">PackageState</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//Singleton</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Received instance = <span class=\"hljs-keyword\">new</span> Received();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">Received</span><span class=\"hljs-params\">()</span> </span>{}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Received <span class=\"hljs-title\">instance</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> instance;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//Business logic and state transition</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">updateState</span><span class=\"hljs-params\">(PackageContext ctx)</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"6 - Package is Received !!\"</span>);\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"=== state end \"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"40\">\n                      最后，我们运行一个单元测试，通过执行上下文信息类的更新操作了变更状态。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Client</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">        PackageContext ctx = <span class=\"hljs-keyword\">new</span> PackageContext(<span class=\"hljs-keyword\">null</span>, <span class=\"hljs-string\">\"Test123\"</span>);\n</div></li><li><div class=\"code-word\">        ctx.update();\n</div></li><li><div class=\"code-word\">        ctx.update();\n</div></li><li><div class=\"code-word\">        ctx.update();\n</div></li><li><div class=\"code-word\">        ctx.update();\n</div></li><li><div class=\"code-word\">        ctx.update();\n</div></li><li><div class=\"code-word\">        ctx.update();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//输出结果</span>\n</div></li><li><div class=\"code-word\">=== state start...\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">1</span> - Package is acknowledged !!\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">2</span> - Package is WarehouseProcessing\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">3</span> - Package is in transition !!\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">4</span> - Package is Delivering !!\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">5</span> - Package is waiting <span class=\"hljs-keyword\">for</span> pick up !!\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">6</span> - Package is Received !!\n</div></li><li><div class=\"code-word\">=== state end\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"42\">\n                      从单元测试的结果中我们能直观地看到：执行一次状态更新，状态会变为下一个状态，直至状态结束。\n                    </p>\n                    <h3 data-nodeid=\"43\">为什么使用状态模式？</h3>\n                    <p data-nodeid=\"44\">\n                      分析完状态模式的原理和使用场景后，我们再来说说使用状态模式的原因，主要有以下两个。\n                    </p>\n                    <p data-nodeid=\"2880\" class=\"\">\n                      <strong data-nodeid=\"2885\"\n                        >第一个，当要设计的业务具有复杂的状态变迁时，我们期望通过状态变化来快速进行变更操作，并降低代码耦合性。</strong\n                      >\n                      在上面使用场景的例子中，我们大致看到了一个包裹的状态变化流程，实际上的购物订单的状态变化远比这个要复杂。对于状态变化引起行为变化的情况，使用状态模式就能够很好地解决。一方面因为状态是提前进行分析整理的，这样能减少代码实现的难度。另一方面是因为状态与状态之间做了天然的隔离，能够将相关的行为聚合到一起，提高类的内聚度，降低耦合性。\n                    </p>\n\n                    <p data-nodeid=\"46\">\n                      <strong data-nodeid=\"143\"\n                        >第二个，避免增加代码的复杂性</strong\n                      >。在通常的编程设计中，每一次新增状态时，就需要添加大量的条件判断语句。最典型的就是\n                      if-else\n                      的不断嵌套处理，这样的代码发展到后期，逻辑会变得异常复杂，进而导致代码的可维护性和灵活性变差。而使用状态模式则能够很好地从状态的维度来进行逻辑的关联，状态与状态之间只有切换的动作，至于状态本身如何进行复杂的处理，对于另一个状态来说，其实并不关心，这样就能很好地避免对象间的调用关系变得复杂。\n                    </p>\n                    <h3 data-nodeid=\"47\">收益什么？损失什么？</h3>\n                    <p data-nodeid=\"48\">\n                      通过上述分析，我们可以得出使用状态模式主要有以下优点。\n                    </p>\n                    <ul data-nodeid=\"4515\">\n                      <li data-nodeid=\"4516\">\n                        <p data-nodeid=\"4517\">\n                          <strong data-nodeid=\"4528\"\n                            >提前定好可能的状态，降低代码实现复杂度。</strong\n                          >\n                          状态模式通常需要提前设计好状态的转移，这样就需要提前设计好状态之间的转移关系，在实现代码时就变得容易很多。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4518\">\n                        <p data-nodeid=\"4519\">\n                          <strong data-nodeid=\"4533\"\n                            >快速理解状态和行为之间的关系。</strong\n                          >\n                          由于将操作和状态相关联，那么所有与某个状态相关的对象都会被聚合在一起，这样可以很方便地增加和删除操作，而不会影响其他状态的功能。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4520\">\n                        <p data-nodeid=\"4521\">\n                          <strong data-nodeid=\"4538\"\n                            >避免写大量的 if-else 条件语句。</strong\n                          >\n                          比如，要判断订单商品到达配送站的状态，需要判断商品是在运送中还是已送达，到了以后还要再判断发往哪里，等等，这样的\n                          if-else\n                          条件语句会随着场景的增多而不断增加。如果建立起状态之间的转移关系，订单商品到达配送站会触发状态变换，然后进行对应状态下的对应操作，这样就能够有效减少直接的条件语句判断。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4522\">\n                        <p data-nodeid=\"4523\" class=\"\">\n                          <strong data-nodeid=\"4543\"\n                            >可以让多个环境对象共享一个状态对象，从而减少重复代码。</strong\n                          >\n                          状态模式通常用于整体的流程控制和状态变更，这样对于多环境的应用程序来说，只需要共享一整个状态，而不需要每个环境都各自实现自己的状态对象。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"58\">当然，状态模式也有一些缺点。</p>\n                    <ul data-nodeid=\"5767\">\n                      <li data-nodeid=\"5768\">\n                        <p data-nodeid=\"5769\">\n                          <strong data-nodeid=\"5778\">造成很多零散类。</strong>\n                          状态模式因为需要对每一个状态定义一个具体状态类，所以势必会增加系统类和对象的个数。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"5770\">\n                        <p data-nodeid=\"5771\">\n                          <strong data-nodeid=\"5783\"\n                            >状态切换关系越复杂，代码实现难度越高。</strong\n                          >\n                          随着状态的不断扩展，状态的结构与实现就会变得复杂，比如，Ａ\n                          状态切换到 Ｂ，Ｂ 切换到 Ｃ，Ｃ 异常回退 Ａ，Ａ 再走\n                          Ｄ\n                          异常状态，等等。如果使用不当，就会造成维护代码的人需要花费大量时间来梳理状态转移关系。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"5772\">\n                        <p data-nodeid=\"5773\" class=\"te-preview-highlight\">\n                          <strong data-nodeid=\"5788\">不满足开闭原则。</strong>\n                          状态模式虽然降低了状态与状态之间的耦合性，但是新增和修改状态都会涉及前一个状态和后一个状态的代码修改，增大了引入代码问题的概率。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <h3 data-nodeid=\"66\">总结</h3>\n                    <p data-nodeid=\"67\">\n                      状态模式描述了对象状态的变化以及对象如何在每一种状态下表现出不同的行为。其适合场景是：对象本身具备很多状态变化，同时不同变化需要不同的行为来处理。\n                    </p>\n                    <p data-nodeid=\"68\">\n                      状态模式虽然可以让我们的代码条理清楚，容易阅读，但是实际上对开闭原则的支持并不友好，新增状态可能会影响原有的状态，在使用时要注意。\n                    </p>\n                    <p data-nodeid=\"69\">\n                      要想用好状态模式，<strong data-nodeid=\"183\"\n                        >关键点在于寻找好的状态以及状态与状态之间的关系</strong\n                      >，而不是急着去实现状态模式。状态确定好以后，状态模式本身的代码实现其实是非常容易的。\n                    </p>\n                    <h3 data-nodeid=\"70\">课后思考</h3>\n                    <p data-nodeid=\"71\">\n                      在以往的开发经历中，你有没有自定义过不同的状态并用状态模式来进行代码实现？欢迎你在留言区与我分享。\n                    </p>\n                    <p data-nodeid=\"72\">\n                      在下一讲，我会接着与你分享“观察者模式与发送消息变化的通知”的相关内容，记得按时来听课！\n                    </p>\n            "}