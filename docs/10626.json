{"title":"25 | 装饰模式：如何在基础组件上扩展新功能？","context":"\n                    <p data-nodeid=\"1049\" class=\"\">\n                      在前面几讲中，我们已经学习了结构型模式中的适配器模式、桥接模式和组合模式。而今天我们要介绍的装饰模式看上去和适配器模式、桥接模式很相似，都是使用组合方式来扩展原有类的，但其实本质上却相差甚远呢。\n                    </p>\n                    <p data-nodeid=\"1050\">\n                      简单来说，<strong data-nodeid=\"1133\"\n                        >适配器模式侧重于转换，而装饰模式侧重于动态扩展；桥接模式侧重于横向宽度的扩展，而装饰模式侧重于纵向深度的扩展</strong\n                      >。那么装饰模式到底有哪些需要我们重点学习的地方呢？\n                    </p>\n                    <p data-nodeid=\"1051\">\n                      话不多说，就让我们带着这个问题开始今天的学习吧！\n                    </p>\n                    <h3 data-nodeid=\"1052\">模式原理分析</h3>\n                    <p data-nodeid=\"1053\">\n                      装饰模式的原始定义是：允许动态地向一个现有的对象添加新的功能，同时又不改变其结构，相当于对现有的对象进行了一个包装。\n                    </p>\n                    <p data-nodeid=\"1054\">\n                      这个定义非常清晰易懂，因为不能直接修改原有对象的功能，只能在外层进行功能的添加，所以装饰模式又叫<strong\n                        data-nodeid=\"1142\"\n                        >包装器模式</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2634\">\n                      下面我们还是直接来看看装饰模式的 UML 图：\n                    </p>\n\n                    <p data-nodeid=\"2100\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/43/6E/Cgp9HWC5jLOAHadvAAHrspBHyVU066.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"2103\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"1836\">\n                      从 UML 图中，我们能发现装饰模式的四个关键角色。\n                    </p>\n\n                    <ul data-nodeid=\"1059\">\n                      <li data-nodeid=\"1060\">\n                        <p data-nodeid=\"1061\">\n                          <strong data-nodeid=\"1152\">组件</strong\n                          >：作为装饰器类包装的目标类。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1062\">\n                        <p data-nodeid=\"1063\">\n                          <strong data-nodeid=\"1157\">具体组件</strong\n                          >：实现组件的基础子类。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1064\">\n                        <p data-nodeid=\"1065\">\n                          <strong data-nodeid=\"1162\">装饰器</strong\n                          >：一个抽象类，其中包含对组件的引用，并且还重写了组件接口方法。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1066\">\n                        <p data-nodeid=\"1067\">\n                          <strong data-nodeid=\"1167\">具体装饰器</strong\n                          >：继承扩展了装饰器，并重写组件接口方法，同时可以添加附加功能。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1068\">接下来我们再来看看它的代码实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">//组件</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">excute</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">}&nbsp;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//具体组件</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BaseComponent</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">excute</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//do something</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//装饰器</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BaseDecorator</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> Component wrapper;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BaseDecorator</span><span class=\"hljs-params\">(Component wrapper)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.wrapper = wrapper;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">excute</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        wrapper.excute();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//具体装饰器A</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DecoratorA</span> <span class=\"hljs-keyword\">extends</span>  <span class=\"hljs-title\">BaseDecorator</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DecoratorA</span><span class=\"hljs-params\">(Component wrapper)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>(wrapper);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">excute</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>.excute();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//具体装饰器B</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DecoratorB</span> <span class=\"hljs-keyword\">extends</span>  <span class=\"hljs-title\">BaseDecorator</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DecoratorB</span><span class=\"hljs-params\">(Component wrapper)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>(wrapper);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">excute</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>.excute();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1070\">\n                      这段代码实现比较简单，组件 Component\n                      定义了组件具备的基本功能，具体组件 BaseComponent\n                      是对组件（接口）的一种基础功能的实现，装饰器 BaseDecorator\n                      中包含 Component\n                      的抽象实例对象，作为装饰器装饰的目标对象，具体装饰器\n                      DecoratorA 和 DecoratorB 继承装饰器 BaseDecorator\n                      来进行具体附加功能的沿用与扩展。\n                    </p>\n                    <p data-nodeid=\"1071\">\n                      所以说，<strong data-nodeid=\"1175\"\n                        >装饰模式本质上就是给已有不可修改的类附加新的功能，同时还能很方便地撤销</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1072\">使用场景分析</h3>\n                    <p data-nodeid=\"1073\">\n                      一般来讲，装饰模式常用的使用场景有以下几种。\n                    </p>\n                    <ul data-nodeid=\"1074\">\n                      <li data-nodeid=\"1075\">\n                        <p data-nodeid=\"1076\">\n                          <strong data-nodeid=\"1182\"\n                            >快速动态扩展和撤销一个类的功能场景。</strong\n                          >\n                          比如，有的场景下对 API\n                          接口的安全性要求较高，那么就可以使用装饰模式对传输的字符串数据进行压缩或加密。如果安全性要求不高，则可以不使用。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1077\">\n                        <p data-nodeid=\"1078\">\n                          <strong data-nodeid=\"1187\"\n                            >可以通过顺序组合包装的方式来附加扩张功能的场景。</strong\n                          >\n                          比如，加解密的装饰器外层可以包装压缩解压缩的装饰器，而压缩解压缩装饰器外层又可以包装特殊字符的筛选过滤的装饰器等。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1079\">\n                        <p data-nodeid=\"1080\">\n                          <strong data-nodeid=\"1192\"\n                            >不支持继承扩展类的场景。</strong\n                          >\n                          比如，使用 final\n                          关键字的类，或者系统中存在大量通过继承产生的子类。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1081\">\n                      在现实中有一个很形象的关于装饰器使用场景的例子，那就是<strong\n                        data-nodeid=\"1198\"\n                        >单反相机镜头前的滤镜</strong\n                      >。用过单反相机的同学应该知道，不加滤镜其实不会影响拍照，而滤镜实际上就是一个装饰器，滤镜上又可以加滤镜，这样就做到了不改变镜头而又给镜头增加了附加功能。\n                    </p>\n                    <p data-nodeid=\"1082\">\n                      这里我们还是通过一个简单的例子来帮助你理解装饰模式的使用场景。假设我们要创建一个文件读写器程序，能够读字符串，又能将读入的字符串写入文件，那具体该怎么做呢？\n                    </p>\n                    <p data-nodeid=\"1083\">\n                      首先，创建一个<strong data-nodeid=\"1205\"\n                        >抽象的文件读取接口</strong\n                      >DataLoader，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">DataLoader</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\">String <span class=\"hljs-title\">read</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">write</span><span class=\"hljs-params\">(String data)</span></span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1085\">\n                      之后，创建一个<strong data-nodeid=\"1211\">具体组件</strong\n                      >BaseFileDataLoader，重写组件 DataLoader 的读写方法。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BaseFileDataLoader</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DataLoader</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String filePath;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BaseFileDataLoader</span><span class=\"hljs-params\">(String filePath)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.filePath = filePath;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">read</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">char</span>[] buffer = <span class=\"hljs-keyword\">null</span>;\n</div></li><li><div class=\"code-word\">        File file = <span class=\"hljs-keyword\">new</span> File(filePath);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">try</span> (FileReader reader = <span class=\"hljs-keyword\">new</span> FileReader(file)) {\n</div></li><li><div class=\"code-word\">            buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">char</span>[(<span class=\"hljs-keyword\">int</span>) file.length()];\n</div></li><li><div class=\"code-word\">            reader.read(buffer);\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n</div></li><li><div class=\"code-word\">            e.printStackTrace();\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> String(buffer);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">write</span><span class=\"hljs-params\">(String data)</span> </span>{\n</div></li><li><div class=\"code-word\">        File file = <span class=\"hljs-keyword\">new</span> File(filePath);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">try</span> (OutputStream fos = <span class=\"hljs-keyword\">new</span> FileOutputStream(file)) {\n</div></li><li><div class=\"code-word\">            fos.write(data.getBytes(), <span class=\"hljs-number\">0</span>, data.length());\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n</div></li><li><div class=\"code-word\">            e.printStackTrace();\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1087\">\n                      接下来，再创建一个<strong data-nodeid=\"1217\"\n                        >装饰器</strong\n                      >DataLoaderDecorator，这里要包含一个引用 DataLoader\n                      的对象实例 wrapper，同样是重写 DataLoader\n                      方法，不过这里使用 wrapper 来读写。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DataLoaderDecorator</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">DataLoader</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> DataLoader wrapper;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">DataLoaderDecorator</span><span class=\"hljs-params\">(DataLoader wrapper)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.wrapper = wrapper;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">read</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> wrapper.read();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">write</span><span class=\"hljs-params\">(String data)</span> </span>{\n</div></li><li><div class=\"code-word\">        wrapper.write(data);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1089\">\n                      紧接着，创建在读写时<strong data-nodeid=\"1223\"\n                        >有加解密功能的具体装饰器</strong\n                      >EncryptionDataDecorator，它继承了装饰器\n                      DataLoaderDecorator\n                      重写读写方法。不过，需要注意的是，这里新建了 encode 和\n                      dcode 方法来包装它的父类 DataLoaderDecorator\n                      的读写方法，实现在读文件时进行解密、写文件时进行加密的功能。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EncryptionDataDecorator</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">DataLoaderDecorator</span></span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">EncryptionDataDecorator</span><span class=\"hljs-params\">(DataLoader wrapper)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>(wrapper);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">read</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> decode(<span class=\"hljs-keyword\">super</span>.read());\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">write</span><span class=\"hljs-params\">(String data)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>.write(encode(data));\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title\">encode</span><span class=\"hljs-params\">(String data)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">byte</span>[] result = data.getBytes();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; result.length; i++) {\n</div></li><li><div class=\"code-word\">            result[i] += (<span class=\"hljs-keyword\">byte</span>) <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> Base64.getEncoder().encodeToString(result);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title\">decode</span><span class=\"hljs-params\">(String data)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">byte</span>[] result = Base64.getDecoder().decode(data);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; result.length; i++) {\n</div></li><li><div class=\"code-word\">            result[i] -= (<span class=\"hljs-keyword\">byte</span>) <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> String(result);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1091\">\n                      然后，我们再创建一个<strong data-nodeid=\"1229\"\n                        >压缩和解压的具体装饰器类</strong\n                      >CompressionDataDecorator，新建 compress 和 decompress\n                      方法用来包装父类 DataLoaderDecorator\n                      的读写方法，也就是在读取时解压、写入时压缩。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CompressionDataDecorator</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">DataLoaderDecorator</span></span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CompressionDataDecorator</span><span class=\"hljs-params\">(DataLoader wrapper)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>(wrapper);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">read</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> decompress(<span class=\"hljs-keyword\">super</span>.read());\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">write</span><span class=\"hljs-params\">(String data)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>.write(compress(data));\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title\">compress</span><span class=\"hljs-params\">(String stringData)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">byte</span>[] data = stringData.getBytes();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">            ByteArrayOutputStream bout = <span class=\"hljs-keyword\">new</span> ByteArrayOutputStream(<span class=\"hljs-number\">512</span>);\n</div></li><li><div class=\"code-word\">            DeflaterOutputStream dos = <span class=\"hljs-keyword\">new</span> DeflaterOutputStream(bout, <span class=\"hljs-keyword\">new</span> Deflater());\n</div></li><li><div class=\"code-word\">            dos.write(data);\n</div></li><li><div class=\"code-word\">            dos.close();\n</div></li><li><div class=\"code-word\">            bout.close();\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> Base64.getEncoder().encodeToString(bout.toByteArray());\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n</div></li><li><div class=\"code-word\">            e.printStackTrace();\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title\">decompress</span><span class=\"hljs-params\">(String stringData)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">byte</span>[] data = Base64.getDecoder().decode(stringData);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">            InputStream in = <span class=\"hljs-keyword\">new</span> ByteArrayInputStream(data);\n</div></li><li><div class=\"code-word\">            InflaterInputStream iin = <span class=\"hljs-keyword\">new</span> InflaterInputStream(in);\n</div></li><li><div class=\"code-word\">            ByteArrayOutputStream bout = <span class=\"hljs-keyword\">new</span> ByteArrayOutputStream(<span class=\"hljs-number\">512</span>);\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">int</span> b;\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">while</span> ((b = iin.read()) != -<span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">                bout.write(b);\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">            in.close();\n</div></li><li><div class=\"code-word\">            iin.close();\n</div></li><li><div class=\"code-word\">            bout.close();\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> String(bout.toByteArray());\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n</div></li><li><div class=\"code-word\">            e.printStackTrace();\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1093\">\n                      最后，我们运行一个<strong data-nodeid=\"1235\"\n                        >单元测试</strong\n                      >：创建一个具体装饰器，写入的时候先加密再压缩，然后通过普通组件类和具体装饰器类读取进行对比。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">    String testinfo = <span class=\"hljs-string\">\"Name, testinfo\\nMia, 10000\\nMax, 9100\"</span>;\n</div></li><li><div class=\"code-word\">    DataLoaderDecorator encoded = <span class=\"hljs-keyword\">new</span> CompressionDataDecorator(\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">new</span> EncryptionDataDecorator(\n</div></li><li><div class=\"code-word\">                    <span class=\"hljs-keyword\">new</span> BaseFileDataLoader(<span class=\"hljs-string\">\"demo.txt\"</span>)));\n</div></li><li><div class=\"code-word\">    encoded.write(testinfo);\n</div></li><li><div class=\"code-word\">    DataLoader plain = <span class=\"hljs-keyword\">new</span> BaseFileDataLoader(<span class=\"hljs-string\">\"demo.txt\"</span>);\n</div></li><li><div class=\"code-word\">    System.out.println(<span class=\"hljs-string\">\"- 输入 ----------------\"</span>);\n</div></li><li><div class=\"code-word\">    System.out.println(testinfo);\n</div></li><li><div class=\"code-word\">    System.out.println(<span class=\"hljs-string\">\"- 加密+压缩 写入文件--------------\"</span>);\n</div></li><li><div class=\"code-word\">    System.out.println(plain.read());\n</div></li><li><div class=\"code-word\">    System.out.println(<span class=\"hljs-string\">\"- 解密+解压 --------------\"</span>);\n</div></li><li><div class=\"code-word\">    System.out.println(encoded.read());\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">运行结果：\n</div></li><li><div class=\"code-word\">- 输入 ----------------\n</div></li><li><div class=\"code-word\">Name, testinfo\n</div></li><li><div class=\"code-word\">Mia, <span class=\"hljs-number\">10000</span>\n</div></li><li><div class=\"code-word\">Max, <span class=\"hljs-number\">9100</span>\n</div></li><li><div class=\"code-word\">- 加密+压缩 写入文件--------------\n</div></li><li><div class=\"code-word\">Zkt7e1Q5eU8yV0ZwVFQxdnpkeU16LGd6e1Z7VlZVQjFCQkp2NDlSTElSV01KQ3RCeXBSSzRoPj4=\n</div></li><li><div class=\"code-word\">- 解密+解压 --------------\n</div></li><li><div class=\"code-word\">Name, testinfo\n</div></li><li><div class=\"code-word\">Mia, <span class=\"hljs-number\">10000</span>\n</div></li><li><div class=\"code-word\">Max, <span class=\"hljs-number\">9100</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1095\">\n                      总结来说，装饰模式适用于一个通用功能需要做扩展而又不想继承原有类的场景，同时还适合一些通过顺序排列组合就能完成扩展的场景。\n                    </p>\n                    <h3 data-nodeid=\"1096\">为什么使用装饰模式？</h3>\n                    <p data-nodeid=\"1097\">\n                      分析完装饰模式的原理和使用场景后，我们再来说说使用装饰模式的原因，主要有以下两个。\n                    </p>\n                    <p data-nodeid=\"1098\">\n                      <strong data-nodeid=\"1243\"\n                        >第一个，为了快速动态扩展类功能，降低开发的时间成本。</strong\n                      >\n                      比如，一个类 A，有子类 A01、A02，然后 A01 又有子类\n                      A001，以此类推，A0001、A00001……这样的设计会带来一个严重的问题，那就是：当需要扩展\n                      A01 时，所有 A01\n                      的子类和父类都会受到影响。但是，如果这时我们使用装饰器\n                      B01、B02、C01、C02，那么扩展 A01 就会变为\n                      A01B01C01、A01B02C02\n                      这样的组合。这样就能快速地扩展类功能，同时还可以按需来任意组合，极大地节省了开发时间。\n                    </p>\n                    <p data-nodeid=\"1099\">\n                      <strong data-nodeid=\"1248\"\n                        >第二个，希望通过继承的方式扩展老旧功能。</strong\n                      >\n                      比如，前面我们说到，当类标识有 final\n                      关键字时，要想复用这个类就只能通过重新复制代码的方式，不过通常这样的类又处于需要对外提供功能的状态，不能轻易修改，而梳理上下文逻辑又费时费力，那么采用装饰模式就是一个很好的选择。因为装饰器是在外层进行扩展，即使功能不合适，也能及时地撤销而不影响原有的功能。所以说，在一些维护系统的升级或重构场景中，使用装饰模式来重构代码，在短期内都能达到快速解耦的效果。\n                    </p>\n                    <h3 data-nodeid=\"1100\">收益什么？损失什么？</h3>\n                    <p data-nodeid=\"1101\">\n                      使用装饰模式主要有以下四个大的优点。\n                    </p>\n                    <ul data-nodeid=\"1102\">\n                      <li data-nodeid=\"1103\">\n                        <p data-nodeid=\"1104\">\n                          <strong data-nodeid=\"1255\"\n                            >快速扩展对象的功能。</strong\n                          >\n                          对于一些独立且无法修改的类来说，当需要在短期内扩展功能时，采用装饰模式能快速有效地扩展功能，同时也不会影响原有的功能。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1105\">\n                        <p data-nodeid=\"1106\">\n                          <strong data-nodeid=\"1260\"\n                            >可以动态增删对象实例的功能。</strong\n                          >\n                          比如，在上面文件读写器的例子中，我们可以在创建对象的时候再决定是一起使用压缩装饰器和加密装饰器，还是分开使用，或者只是用基本的读写功能。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1107\">\n                        <p data-nodeid=\"1108\">\n                          <strong data-nodeid=\"1265\"\n                            >可以在统一行为上组合几种行为。</strong\n                          >\n                          装饰模式是对某一个接口行为进行的组合扩展，通过包装的方式不断扩展代码的行为，从而实现了更多行为的组合。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1109\">\n                        <p data-nodeid=\"1110\">\n                          <strong data-nodeid=\"1270\">满足单一职责原则。</strong>\n                          每一个具体装饰器类只实现一个组件的具体行为，即便附加了新的功能也是围绕着组件的职责而做扩展，保证了职责的单一性。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1111\">同样，装饰模式也有一些缺点。</p>\n                    <ul data-nodeid=\"1112\">\n                      <li data-nodeid=\"1113\">\n                        <p data-nodeid=\"1114\">\n                          <strong data-nodeid=\"1276\"\n                            >在调用链中删除某个装饰器时需要修改代码。</strong\n                          >\n                          装饰模式的最大弊端在于，当在某个组件上附加了太多装饰器后，想要删除其中的某个装饰器时，就需要修改前后的装饰器的引用位置，这样容易导致上下文中代码都需要修改的情况，大大增加了出错的可能性。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1115\">\n                        <p data-nodeid=\"1116\">\n                          <strong data-nodeid=\"1281\"\n                            >容易导致产生很多装饰对象，增加代码理解难度。</strong\n                          >\n                          由于使用了组合方式，并且在调用时使用了链式结构，这样间接增加了很多装饰器对象，而一旦不了解装饰模式的特性，就很容易误解为多个对象的参数调用，增加了代码的理解难度。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1117\">\n                        <p data-nodeid=\"1118\">\n                          <strong data-nodeid=\"1286\"\n                            >增加问题定位和后期代码维护成本。</strong\n                          >\n                          虽然装饰模式使用的组合方式比继承更加灵活，但同时也会增加代码的复杂性，在维护代码时会增加问题定位难度，同时调试时也需要逐级排查，比较烦琐，增加了后期代码维护成本。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"1119\">总结</h3>\n                    <p data-nodeid=\"1120\">\n                      装饰模式就像是我们送人礼物时的“包装盒”，我们可以选择各种各样的包装盒，还可以在包装盒里嵌套包装盒。\n                    </p>\n                    <p data-nodeid=\"1121\">\n                      装饰模式在结构上体现为<strong data-nodeid=\"1294\"\n                        >链式结构</strong\n                      >，通过在外层不断地添加具体装饰器类来对原有的组件类进行扩展，这样在保证原有功能的情况下，还能额外附加新的功能。这也是学习和理解装饰模式的核心所在。\n                    </p>\n                    <p data-nodeid=\"1122\">\n                      虽然装饰模式的原理和使用都很简单，但是有时链式结构本身会让代码调用链条变得很长，变成了一种对原有组件接口的定制化开发。因此，一般情况下<strong\n                        data-nodeid=\"1304\"\n                        >不建议装饰器超过 10 个</strong\n                      >，如果超过还是要考虑重构组件功能。除此之外，<strong\n                        data-nodeid=\"1305\"\n                        >对于没有上下逻辑的装饰器，也要尽量避免使用装饰模式</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1123\">课后思考</h3>\n                    <p data-nodeid=\"1124\">\n                      装饰模式的使用非常简单，但是为什么不应该频繁地使用装饰模式呢？\n                    </p>\n                    <p data-nodeid=\"1125\">\n                      欢迎留言分享，我会第一时间给你回复。\n                    </p>\n                    <p data-nodeid=\"1126\" class=\"\">\n                      在下一讲，我会接着与你分享“门面模式：如何实现 API\n                      网关的高可用性？”这个话题，记得按时来听课！\n                    </p>\n            "}