{"title":"15 | 定位问题才能更好地解决问题：开发前的复杂度分析与技术选型","context":"\n                    <p data-nodeid=\"109956\" class=\"\">\n                      在前面课时中，我们学习了数据结构和算法思维，这些知识和技巧，是解决问题、代码优化的基础。从本课时开始，我们将进入实战模块，从真正解决问题的角度来看看，如何将我们此前学到的知识灵活运用到实际工作中。\n                    </p>\n                    <h3 data-nodeid=\"109957\">问题定位和技术选型</h3>\n                    <p data-nodeid=\"109958\">\n                      假设你现在面对一个实际的算法问题，则需要从以下两个方面进行思考。\n                    </p>\n                    <p data-nodeid=\"109959\">\n                      <strong data-nodeid=\"110067\">首先，我们要明确目标</strong\n                      >。即用尽可能低的时间复杂度和空间复杂度，解决问题并写出代码；<br />\n                      <strong data-nodeid=\"110068\">接着，我们要定位问题</strong\n                      >。目的是更高效地解决问题。这里定位问题包含很多内容。<br />\n                      例如：\n                    </p>\n                    <ul data-nodeid=\"109960\">\n                      <li data-nodeid=\"109961\">\n                        <p data-nodeid=\"109962\">\n                          这个问题是什么类型（排序、查找、最优化）的问题；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"109963\">\n                        <p data-nodeid=\"109964\">\n                          这个问题的复杂度下限是多少，即最低的时间复杂度可能是多少；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"109965\">\n                        <p data-nodeid=\"109966\">\n                          采用哪些数据结构或算法思维，能把这个问题解决。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"109967\">\n                      为了方便你理解，下面我们来举一个例子，在一个包含 n\n                      个元素的无序数组 a 中，输出其最大值 max_val。\n                    </p>\n                    <p data-nodeid=\"109968\">\n                      这个问题比较简单。显然，要输出的最大值\n                      max_val，也是原数组的元素之一。因此，这个问题的类型是，在数据中基于某个条件的查找问题。\n                    </p>\n                    <p data-nodeid=\"109969\">\n                      关于查找问题，我们学习过二分查找，其复杂度是\n                      O(logn)。但可惜的是，二分查找的条件是输入数据有序，这里并不满足。这就意味着，我们很难在\n                      O(logn) 的复杂度下解决问题。\n                    </p>\n                    <p data-nodeid=\"109970\">\n                      但是，继续分析你会发现，某一个数字元素的值会直接影响最终结果。这是因为，假设前\n                      n-1 个数字的最大值是 5，但最后一个数字的值是否大于\n                      5，会直接影响最后的结果。这就意味着，这个问题不把所有的输入数据全都过一遍，是无法得到正确答案的。要把所有数据全都过一遍，这就是\n                      O(n) 的复杂度。\n                    </p>\n                    <p data-nodeid=\"109971\">\n                      小结一下就是，因为该问题属于查找问题，所以考虑用 O(logn)\n                      的二分查找。但因为数组无序，导致它并不适用。又因为必须把全部数据过一遍，因此考虑用\n                      O(n) 的检索方法。这就是复杂度的下限。\n                    </p>\n                    <p data-nodeid=\"109972\">\n                      当明确了复杂度的下限是 O(n) 后，你就能知道此时需要一层 for\n                      循环去寻找最大值。那么循环的过程中，就可以实现动态维护一个最大值变量。空间复杂度是\n                      O(1)，并不需要采用某些复杂的数据结构。这个问题我们在前面的课时\n                      1 中写过的代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">s1_3</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">int</span> a[] = { <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span> };\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">int</span> max_val = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">int</span> max_inx = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; a.length; i++) {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> (a[i] &gt; max_val) {\n</div></li><li><div class=\"code-word\">\t\t\tmax_val = a[i];\n</div></li><li><div class=\"code-word\">\t\t\tmax_inx = i;\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\tSystem.out.println(max_val);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"109974\">通用解题的方法论</h3>\n                    <p data-nodeid=\"109975\">\n                      前面的例子只是一个简单的热身。在实际工作中，我们遇到的问题通常会更复杂多变。那么。面对这些问题是否有一些通用的解决方法呢？答案是有的。\n                    </p>\n                    <p data-nodeid=\"109976\">\n                      <strong data-nodeid=\"110088\"\n                        >面对一个未知问题时，你可以从复杂度入手</strong\n                      >。尝试去分析这个问题的时间复杂度上限是多少，也就是复杂度再高能高到哪里。这就是不计任何时间、空间损耗，采用暴力求解的方法去解题。然后分析这个问题的时间复杂度下限是多少，也就是时间复杂度再低能低到哪里。这就是你写代码的目标。\n                    </p>\n                    <p data-nodeid=\"109977\">\n                      <strong data-nodeid=\"110095\">接着，尝试去定位问题</strong\n                      >。在分析出这两个问题之后，就需要去设计合理的数据结构和运用合适的算法思维，从暴力求解的方法去逼近写代码的目标了。<br />\n                      在这里需要先定位问题，这个问题的类型就决定了采用哪种算法思维。\n                    </p>\n                    <p data-nodeid=\"109978\">\n                      <strong data-nodeid=\"110100\"\n                        >最后，需要对数据操作进行分析</strong\n                      >。例如：在这个问题中，需要对数据进行哪些操作（增删查），数据之间是否需要保证顺序或逆序？当分析出这些操作的步骤、频次之后，就可以根据不同数据结构的特性，去合理选择你所应该使用的那几种数据结构了。\n                    </p>\n                    <p data-nodeid=\"109979\">\n                      经过以上分析，我们对方法论进行提练，宏观上的步骤总结为以下\n                      4 步：\n                    </p>\n                    <ol data-nodeid=\"109980\">\n                      <li data-nodeid=\"109981\">\n                        <p data-nodeid=\"109982\">\n                          <strong data-nodeid=\"110106\">复杂度分析</strong\n                          >。估算问题中复杂度的上限和下限。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"109983\">\n                        <p data-nodeid=\"109984\">\n                          <strong data-nodeid=\"110111\">定位问题</strong\n                          >。根据问题类型，确定采用何种算法思维。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"109985\">\n                        <p data-nodeid=\"109986\">\n                          <strong data-nodeid=\"110116\">数据操作分析</strong\n                          >。根据增、删、查和数据顺序关系去选择合适的数据结构，利用空间换取时间。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"109987\">\n                        <p data-nodeid=\"109988\">\n                          <strong data-nodeid=\"110121\">编码实现</strong>。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"109989\">\n                      这套方法适用于绝大多数的问题，在实战中需要你灵活运用。\n                    </p>\n                    <h3 data-nodeid=\"109990\">案例</h3>\n                    <p data-nodeid=\"109991\">\n                      梳理完方法论之后，我们回过头来再看一下以前的例子，看看采用方法论是如何分析题目并找到答案的。\n                    </p>\n                    <p data-nodeid=\"109992\">\n                      <strong data-nodeid=\"110133\">例 1</strong>，在一个数组 a =\n                      [1, 3, 4, 3, 4, 1, 3]\n                      中，找到出现次数最多的那个数字。如果并列存在多个，随机输出一个。\n                    </p>\n                    <p data-nodeid=\"109993\">\n                      <strong data-nodeid=\"110138\"\n                        >我们先来分析一下复杂度。假设我们采用最暴力的方法。利用双层循环的方式计算</strong\n                      >：\n                    </p>\n                    <ul data-nodeid=\"109994\">\n                      <li data-nodeid=\"109995\">\n                        <p data-nodeid=\"109996\">\n                          第一层循环，我们对数组中的每个元素进行遍历；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"109997\">\n                        <p data-nodeid=\"109998\">\n                          第二层循环，对于每个元素计算出现的次数，并且通过当前元素次数\n                          time_tmp 和全局最大次数变量 time_max\n                          的大小关系，持续保存出现次数最多的那个元素及其出现次数。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"109999\">\n                      由于是双层循环，这段代码在时间方面的消耗就是 n*n\n                      的复杂度，也就是 O(n²)。这段代码我们在第 1\n                      课时中的例子里讲过，这里就不再赘述了。\n                    </p>\n                    <p data-nodeid=\"110000\">\n                      <strong data-nodeid=\"110151\"\n                        >接着，我们思考一下这段代码最低的复杂度可能是多少？</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"110001\">\n                      不难发现，这个问题的复杂度最低低不过\n                      O(n)。这是因为某个数字的数值是完全有可能影响最终结果。例如，a\n                      = [1, 3, 4, 3, 4, 1]，随机输出 1、3、4 都可以。如果 a\n                      中增加一个元素变成，a = [1, 3, 4, 3, 4, 1, 3, 1]，则结果为\n                      1。\n                    </p>\n                    <p data-nodeid=\"110002\">\n                      由此可见，这个问题必须至少要对全部数据遍历一次，所以复杂度再低低不过\n                      O(n)。\n                    </p>\n                    <p data-nodeid=\"110003\">\n                      显然，这个问题属于在一个数组中，根据某个条件进行查找的问题。既然复杂度低不过\n                      O(n)，我们也不用考虑采用二分查找了。此处是用不到任何算法思维。那么如何让\n                      O(n²) 的复杂度降低为 O(n) 呢？\n                    </p>\n                    <p data-nodeid=\"110004\">\n                      只有通过巧妙利用数据结构了。分析这个问题就可以发现，此时不需要关注数据顺序。因此，栈、队列等数据结构用到的可能性会很低。如果采用新的数据结构，增删操作肯定是少不了的。而原问题就是查找类型的问题，所以查找的动作一定是非常高频的。在我们学过的数据结构中，查找有优势，同时不需要考虑数据顺序的只有哈希表，因此可以很自然地想到用哈希表解决问题。\n                    </p>\n                    <p data-nodeid=\"110005\">\n                      哈希表的结构是“key-value”的键值对，如何设计键和值呢？哈希表查找的\n                      key，所以 key\n                      一定存放的是被查找的内容，也就是原数组中的元素。数组元素有重复，但哈希表中\n                      key 不能重复，因此只能用 value 来保存频次。\n                    </p>\n                    <p data-nodeid=\"110006\">\n                      分析到这里，所有解决方案需要用到的关键因素就出来了，我们总结为以下\n                      2 点：\n                    </p>\n                    <ol data-nodeid=\"110007\">\n                      <li data-nodeid=\"110008\">\n                        <p data-nodeid=\"110009\">\n                          预期的时间复杂度是 O(n)，这就意味着编码采用一层的 for\n                          循环，对原数组进行遍历。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"110010\">\n                        <p data-nodeid=\"110011\">\n                          数据结构需要额外设计哈希表，其中 key\n                          是数组的元素，value 是频次。这样可以支持 O(1)\n                          时间复杂度的查找动作。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"110012\">因此，这个问题的代码就是：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">s2_4</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">int</span> a[] = { <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span> };\n</div></li><li><div class=\"code-word\">\tMap&lt;Integer, Integer&gt; d = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; a.length; i++) {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> (d.containsKey(a[i])) {\n</div></li><li><div class=\"code-word\">\t\t\td.put(a[i], d.get(a[i]) + <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">\t\t} <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">\t\t\td.put(a[i], <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">int</span> val_max = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">int</span> time_max = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> (Integer key : d.keySet()) {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> (d.get(key) &gt; time_max) {\n</div></li><li><div class=\"code-word\">\t\t\ttime_max = d.get(key);\n</div></li><li><div class=\"code-word\">\t\t\tval_max = key;\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\tSystem.out.println(val_max);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"110014\">\n                      这个问题，我们在前面的课时中曾给出了答案。答案并不是最重要的，重要的是它背后的解题思路。这个思路可以运用在很多我们没有遇到过的复杂问题中。例如下面的问题。\n                    </p>\n                    <p data-nodeid=\"110015\">\n                      <strong data-nodeid=\"110174\">例 2</strong\n                      >，这个问题是力扣的经典问题，two sums。给定一个整数数组\n                      arr 和一个目标值\n                      target，请你在该数组中找出加和等于目标值的两个整数，并返回它们在原数组中的下标。\n                    </p>\n                    <p data-nodeid=\"110016\">\n                      你可以假设，原数组中没有重复元素，而且有且只有一组答案。但是，数组中的元素只能使用一次。例如，arr\n                      = [1, 2, 3, 4, 5, 6]，target = 4。因为，arr[0] + arr[2] =\n                      1 + 3 = 4 = target，则输出 0，2。\n                    </p>\n                    <p data-nodeid=\"110017\">\n                      <strong data-nodeid=\"110192\"\n                        >首先，我们来分析一下复杂度</strong\n                      >。假设我们采用最暴力的方法，利用双层循环的方式计算，步骤如下：\n                    </p>\n                    <ul data-nodeid=\"110018\">\n                      <li data-nodeid=\"110019\">\n                        <p data-nodeid=\"110020\">\n                          第一层循环，我们对数组中的每个元素进行遍历；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"110021\">\n                        <p data-nodeid=\"110022\">\n                          第二层循环，对于第一层的元素与 target 的差值进行查找。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"110023\">\n                      例如，第一层循环遍历到了 1，第二层循环就需要查找 target -\n                      arr[0] = 4 - 1 = 3\n                      是否在数组中。由于是双层循环，这段代码在时间方面的消耗就是\n                      n*n 的复杂度，也就是 O(n²)。\n                    </p>\n                    <p data-nodeid=\"110024\">\n                      <strong data-nodeid=\"110206\">接下来，我们看看下限</strong\n                      >。很显然，某个数字是否存在于原数组对结果是有影响的。因此，复杂度再低低不过\n                      O(n)。\n                    </p>\n                    <p data-nodeid=\"110025\">\n                      这里的问题是在数组中基于某个条件去查找数据的问题。然而可惜的是原数组并非有序，因此采用二分查找的可能性也会很低。那么如何把\n                      O(n²) 的复杂度降低到 O(n) 呢？路径只剩下了数据结构。\n                    </p>\n                    <p data-nodeid=\"110026\">\n                      在暴力的方法中，第二层循环的目的是查找 target - arr[i]\n                      是否出现在数组中。很自然地就会联想到可能要使用哈希表。同时，这个例子中对于数据处理的顺序并不关心，栈或者队列使用的可能性也会很低。因此，不妨试试如何用哈希表去降低复杂度。\n                    </p>\n                    <p data-nodeid=\"110027\">\n                      既然是要查找 target - arr[i] 是否出现过，因此哈希表的 key\n                      自然就是 target - arr[i]。而 value\n                      如何设计呢？这就要看一下结果了，最终要输出的是查找到的\n                      arr[i] 和 target - arr[i] 在数组中的索引，因此 value\n                      存放的必然是 index 的索引值。\n                    </p>\n                    <p data-nodeid=\"110028\">\n                      <strong data-nodeid=\"110234\"\n                        >基于上面的分析，我们就能找到解决方案，分析如下</strong\n                      >：\n                    </p>\n                    <ol data-nodeid=\"110029\">\n                      <li data-nodeid=\"110030\">\n                        <p data-nodeid=\"110031\">\n                          预期的时间复杂度是 O(n)，这就意味着编码采用一层的 for\n                          循环，对原数组进行遍历。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"110032\">\n                        <p data-nodeid=\"110033\">\n                          数据结构需要额外设计哈希表，其中 key 是 target -\n                          arr[i]，value 是 index。这样可以支持 O(1)\n                          时间复杂度的查找动作。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"110034\">因此，代码如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span>[] twoSum(<span class=\"hljs-keyword\">int</span>[] arr, <span class=\"hljs-keyword\">int</span> target) {\n</div></li><li><div class=\"code-word\">\tMap&lt;Integer, Integer&gt; map = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) {\n</div></li><li><div class=\"code-word\">\t\tmap.put(arr[i], i);\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">int</span> complement = target - arr[i];\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) {\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[] { map.get(complement), i };\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"110036\">\n                      在这段代码中我们采用了两个 for 循环，时间复杂度就是 O(n) +\n                      O(n) = O(n)。额外使用了 map，空间复杂度也是 O(n)。第一个\n                      for 循环，把数组转为字典，存放的是“数值\n                      -index”的键值对。第二个 for 循环，在字典中依次判断，target\n                      - arr[i] 是否出现过。如果它出现过，且不是它自己，则打印\n                      target - arr[i] 和 arr[i] 的索引。\n                    </p>\n                    <h3 data-nodeid=\"110037\">总结</h3>\n                    <p data-nodeid=\"110038\">\n                      <strong data-nodeid=\"110260\"\n                        >在开发前，一定要对问题的复杂度进行分析，做好技术选型。这就是定位问题的过程</strong\n                      >。只有把这个过程做好，才能更好地解决问题。\n                    </p>\n                    <p data-nodeid=\"110039\">\n                      <strong data-nodeid=\"110265\"\n                        >通过本课时的学习，常用的分析问题的方法有以下 4\n                        种</strong\n                      >：\n                    </p>\n                    <ol data-nodeid=\"110040\">\n                      <li data-nodeid=\"110041\">\n                        <p data-nodeid=\"110042\">\n                          <strong data-nodeid=\"110270\">复杂度分析</strong\n                          >。估算问题中复杂度的上限和下限。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"110043\">\n                        <p data-nodeid=\"110044\">\n                          <strong data-nodeid=\"110275\">定位问题</strong\n                          >。根据问题类型，确定采用何种算法思维。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"110045\">\n                        <p data-nodeid=\"110046\">\n                          <strong data-nodeid=\"110280\">数据操作分析</strong\n                          >。根据增、删、查和数据顺序关系去选择合适的数据结构，利用空间换取时间。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"110047\">\n                        <p data-nodeid=\"110048\">\n                          <strong data-nodeid=\"110285\">编码实现</strong>。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"110049\">\n                      其中前 3 个步骤，分别对应于这个课程的模块 1 到模块\n                      3，这也是算法开发的基础知识。有了这些知识，才能在实际问题中分析并拼装出解决方案。\n                    </p>\n                    <h3 data-nodeid=\"110050\">练习题</h3>\n                    <p data-nodeid=\"110051\">\n                      最后，我们给出一个练习题。在这个课时案例 2 的 two sums\n                      中，我们采用了两个 for 循环去实现。那么，能否只使用一个\n                      for 循环完成结果的查找呢？\n                    </p>\n                    <p data-nodeid=\"110052\" class=\"\">\n                      如果你有答案欢迎留言给我。\n                    </p>\n            "}