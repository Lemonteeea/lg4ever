{"title":"01 | npm 安装机制及企业级部署私服原理","context":"\n                    <p data-nodeid=\"19802\" class=\"\">\n                      前端工程化离不开 npm（node package manager） 或者 Yarn\n                      这些管理工具。npm 或 Yarn\n                      在工程项目中，除了负责依赖的安装和维护以外，还能通过 npm\n                      scripts 串联起各个职能部分，让独立的环节自动运转起来。\n                    </p>\n                    <p data-nodeid=\"19803\">\n                      无论是 npm 还是\n                      Yarn，它们的体系都非常庞大，在使用过程中你很可能产生如下疑问：\n                    </p>\n                    <ul data-nodeid=\"19804\">\n                      <li data-nodeid=\"19805\">\n                        <p data-nodeid=\"19806\">\n                          项目依赖出现问题时，删除大法好，即删除 node_modules 和\n                          lockfiles，再重新 install，这样操作是否存在风险？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19807\">\n                        <p data-nodeid=\"19808\">\n                          把所有依赖都安装到 dependencies 中，不区分\n                          devDependencies 会有问题吗？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19809\">\n                        <p data-nodeid=\"19810\">\n                          我们的应用依赖了公共库 A 和公共库 B，同时公共库 A\n                          也依赖了公共库 B，那么公共库 B\n                          会被多次安装或重复打包吗？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19811\">\n                        <p data-nodeid=\"19812\">\n                          一个项目中，既有人用 npm，也有人用\n                          Yarn，这会引发什么问题？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19813\">\n                        <p data-nodeid=\"19814\">\n                          我们是否应该提交 lockfiles 文件到项目仓库呢？\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"19815\">\n                      接下来的 01 ~ 03 讲我们就进一步聊一聊这些问题！\n                    </p>\n                    <h3 data-nodeid=\"19816\">npm 内部机制和核心原理</h3>\n                    <p data-nodeid=\"19817\">我们先来看看 npm 的核心目标：</p>\n                    <blockquote data-nodeid=\"19818\">\n                      <p data-nodeid=\"19819\">\n                        Bring the best of open source to you, your team and your\n                        company.<br />\n                        给你和你的团队、你的公司带来最好的开源库和依赖。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"19820\">\n                      通过这句话，我们可以知道 npm\n                      最重要的一环是安装和维护依赖。在平时开发中，“<strong\n                        data-nodeid=\"19974\"\n                        >删除 node_modules，重新 npm install</strong\n                      >”是一个百试不爽的解决 npm\n                      安装类问题的方法。但是其中的作用原理是什么？这样的操作是否规范呢？\n                    </p>\n                    <p data-nodeid=\"19821\">\n                      这一讲，我们就先从 npm\n                      内部机制出发来剖析此类问题。了解完安装机制和原理，我相信你对于工程中依赖的问题，将有一个更加体系化的认知。\n                    </p>\n                    <h4 data-nodeid=\"19822\">npm 的安装机制和背后思想</h4>\n                    <p data-nodeid=\"19823\">\n                      npm 的安装机制非常值得探究。Ruby 的 Gem、Python 的 pip\n                      都是全局安装，但是 npm 的安装机制秉承了不同的设计哲学。\n                    </p>\n                    <p data-nodeid=\"19824\">\n                      它会优先安装依赖包到当前项目目录，使得不同应用项目的依赖各成体系，同时还减轻了包作者的\n                      API 兼容性压力，<strong data-nodeid=\"19987\"\n                        >但这样做的缺陷也很明显</strong\n                      >：如果我们的项目 A 和项目 B，都依赖了相同的公共库\n                      C，那么公共库 C 一般都会在项目 A 和项目 B\n                      中，各被安装一次。这就说明，<strong data-nodeid=\"19988\"\n                        >同一个依赖包可能在我们的电脑上进行多次安装</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"19825\">\n                      当然，对于一些工具模块比如 supervisor 和\n                      gulp，你仍然可以使用全局安装模式，这样方便注册 path\n                      环境变量，我们可以在任何地方直接使用 supervisor、 gulp\n                      这些命令。（不过，一般还是建议不同项目维护自己局部的 gulp\n                      开发工具以适配不同项目需求。）\n                    </p>\n                    <p data-nodeid=\"19826\">\n                      下面，言归正传，我们通过流程图来分析 npm install\n                      的安装机制。\n                    </p>\n                    <p data-nodeid=\"19827\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/02/A9/Cip5yF_axkqAclTFAAJmlxGYSmI551.png\"\n                        alt=\"068739612.png\"\n                        data-nodeid=\"19993\"\n                      />\n                    </p>\n                    <div data-nodeid=\"19828\">\n                      <p style=\"text-align: center\">npm install 安装流程图</p>\n                    </div>\n                    <p data-nodeid=\"19829\">\n                      npm install 执行之后，首先，检查并获取 npm 配置，<strong\n                        data-nodeid=\"19999\"\n                        >这里的优先级为：项目级的 .npmrc 文件 &gt; 用户级的\n                        .npmrc 文件&gt; 全局级的 .npmrc 文件 &gt; npm 内置的\n                        .npmrc 文件</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"19830\">\n                      然后检查项目中是否有 package-lock.json 文件。\n                    </p>\n                    <p data-nodeid=\"19831\">\n                      如果有，则检查 package-lock.json 和 package.json\n                      中声明的依赖是否一致：\n                    </p>\n                    <ul data-nodeid=\"19832\">\n                      <li data-nodeid=\"19833\">\n                        <p data-nodeid=\"19834\">\n                          一致，直接使用 package-lock.json\n                          中的信息，从缓存或网络资源中加载依赖；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19835\">\n                        <p data-nodeid=\"19836\">\n                          不一致，按照 npm 版本进行处理（不同 npm\n                          版本处理会有不同，具体处理方式如图所示）。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"19837\">\n                      如果没有，则根据 package.json\n                      递归构建依赖树。然后按照构建好的依赖树下载完整的依赖资源，在下载时就会检查是否存在相关资源缓存：\n                    </p>\n                    <ul data-nodeid=\"19838\">\n                      <li data-nodeid=\"19839\">\n                        <p data-nodeid=\"19840\">\n                          存在，则将缓存内容解压到 node_modules 中；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19841\">\n                        <p data-nodeid=\"19842\">\n                          否则就先从 npm\n                          远程仓库下载包，校验包的完整性，并添加到缓存，同时解压到\n                          node_modules。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"19843\">最后生成 package-lock.json。</p>\n                    <p data-nodeid=\"19844\">\n                      构建依赖树时，当前依赖项目不管其是直接依赖还是子依赖的依赖，都应该按照扁平化原则，优先将其放置在\n                      node_modules 根目录（最新版本 npm\n                      规范）。在这个过程中，遇到相同模块就判断已放置在依赖树中的模块版本是否符合新模块的版本范围，如果符合则跳过；不符合则在当前模块的\n                      node_modules 下放置该模块（最新版本 npm 规范）。\n                    </p>\n                    <p data-nodeid=\"19845\">\n                      我给出的流程图中有标注更细节的内容，这里就不再赘述了。<strong\n                        data-nodeid=\"20022\"\n                        >你要格外注意图中标明的 npm\n                        不同版本的不同处理情况，并学会从这种“历史问题”中总结 npm\n                        使用的团队最佳实践：同一个项目团队，应该保证 npm\n                        版本的一致</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"19846\">\n                      前端工程中，依赖嵌套依赖，一个中型项目中 node_moduels\n                      安装包可能就已经是海量的了。如果安装包每次都通过网络下载获取，无疑会增加安装时间成本。对于这个问题，<strong\n                        data-nodeid=\"20030\"\n                        >缓存</strong\n                      >始终是一个好的解决思路，我们接下来看看 npm\n                      自己的缓存机制。\n                    </p>\n                    <h4 data-nodeid=\"19847\">npm 缓存机制</h4>\n                    <p data-nodeid=\"19848\">\n                      <strong data-nodeid=\"20036\"\n                        >对于一个依赖包的同一版本进行本地化缓存，是当代依赖包管理工具的一个常见设计</strong\n                      >。使用时要先执行以下命令：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">npm config get cache\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19850\">\n                      得到配置缓存的根目录在 /Users/cehou/.npm（ Mac OS 中，npm\n                      默认的缓存位置） 当中。我们 cd 进入 /Users/cehou/.npm\n                      中可以发现<code data-backticks=\"1\" data-nodeid=\"20038\"\n                        >_cacache</code\n                      >文件。事实上，在 npm v5\n                      版本之后，缓存数据均放在根目录中的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"20040\"\n                        >_cacache</code\n                      >文件夹中。\n                    </p>\n                    <div data-nodeid=\"19851\">\n                      <p data-nodeid=\"289906\" class=\"\">\n                        <img\n                          src=\"https://s0.lgstatic.com/i/image/M00/84/9D/CgqCHl_TbUSAZ8CsAAF3O01IL9Q887.png\"\n                          alt=\"Drawing 1.png\"\n                          data-nodeid=\"289909\"\n                        />\n                      </p>\n                      <p style=\"text-align: center\">\n                        （<code data-backticks=\"1\" data-nodeid=\"289912\"\n                          >_cacache</code\n                        >文件）\n                      </p>\n                    </div>\n                    <p data-nodeid=\"19852\">\n                      我们可以使用以下命令清除 /Users/cehou/.npm/_cacache\n                      中的文件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\"> npm cache clean --force\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"19854\">\n                      <p data-nodeid=\"19855\">\n                        你可以点击<a\n                          href=\"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\"\n                          data-nodeid=\"20048\"\n                          >这里</a\n                        >看看其中对应的 npm 源码。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"19856\">\n                      接下来打开<code data-backticks=\"1\" data-nodeid=\"20051\"\n                        >_cacache</code\n                      >文件，看看 npm 缓存了哪些东西，一共有 3 个目录：\n                    </p>\n                    <ul data-nodeid=\"19857\">\n                      <li data-nodeid=\"19858\">\n                        <p data-nodeid=\"19859\">content-v2</p>\n                      </li>\n                      <li data-nodeid=\"19860\">\n                        <p data-nodeid=\"19861\">index-v5</p>\n                      </li>\n                      <li data-nodeid=\"19862\">\n                        <p data-nodeid=\"19863\">tmp</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"19864\">\n                      其中 content-v2\n                      里面基本都是一些二进制文件。为了使这些二进制文件可读，我们把二进制文件的扩展名改为\n                      .tgz，然后进行解压，得到的结果其实就是我们的 npm 包资源。\n                    </p>\n                    <p data-nodeid=\"19865\">\n                      而 index-v5\n                      文件中，我们采用跟刚刚一样的操作就可以获得一些描述性的文件，事实上这些内容就是\n                      content-v2 里文件的索引。\n                    </p>\n                    <p data-nodeid=\"19866\">这些缓存如何被储存并被利用的呢？</p>\n                    <p data-nodeid=\"19867\">\n                      这就和 npm install 机制联系在了一起。当 npm install\n                      执行时，通过<a\n                        href=\"https://www.npmjs.com/package/pacote\"\n                        data-nodeid=\"20062\"\n                        >pacote</a\n                      >把相应的包解压在对应的 node_modules 下面。npm\n                      在下载依赖时，先下载到缓存当中，再解压到项目 node_modules\n                      下。pacote 依赖<a\n                        href=\"https://github.com/npm/npm-registry-fetch#npm-registry-fetch\"\n                        data-nodeid=\"20070\"\n                        >npm-registry-fetch</a\n                      >来下载包，npm-registry-fetch 可以通过设置 cache\n                      属性，在给定的路径下根据<a\n                        href=\"https://datatracker.ietf.org/doc/rfc7234/\"\n                        data-nodeid=\"20074\"\n                        >IETF RFC 7234</a\n                      >生成缓存数据。\n                    </p>\n                    <p data-nodeid=\"19868\">\n                      接着，在每次安装资源时，根据 package-lock.json 中存储的\n                      integrity、version、name 信息生成一个唯一的 key，这个 key\n                      能够对应到 index-v5\n                      目录下的缓存记录。如果发现有缓存资源，就会找到 tar 包的\n                      hash，根据 hash 再去找缓存的 tar 包，并再次通过<a\n                        href=\"https://www.npmjs.com/package/pacote\"\n                        data-nodeid=\"20079\"\n                        >pacote</a\n                      >把对应的二进制文件解压到相应的项目 node_modules\n                      下面，省去了网络下载资源的开销。\n                    </p>\n                    <p data-nodeid=\"19869\">\n                      <strong data-nodeid=\"20089\"\n                        >注意，这里提到的缓存策略是从 npm v5 版本开始的。在 npm\n                        v5 版本之前，每个缓存的模块在 ~/.npm\n                        文件夹中以模块名的形式直接存储，储存结构是：{cache}/{name}/{version}</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"19870\">\n                      了解这些相对底层的内容可以直接帮助开发者排查 npm\n                      相关问题，这也是区别一般程序员和架构师的细节之一。能不能在理论内容上多走一步，也决定了我们的技术能力能不能更上一层楼。这里我们进行了初步学习，我希望这也可以成为你探究底层的开始。\n                    </p>\n                    <h3 data-nodeid=\"19871\">npm 不完全指南</h3>\n                    <p data-nodeid=\"19872\">\n                      接下来，我想介绍几个实用的 npm\n                      小技巧，这些技巧并不包括“npm\n                      快捷键”等常见内容，主要是从工程开发角度，聚焦更广泛的内容。这里我不会花大量篇幅讲解\n                      npm 命令内容，这些知识你可以直接通过\n                      <a\n                        href=\"https://docs.npmjs.com/cli-documentation/\"\n                        data-nodeid=\"20095\"\n                        >npm cli 官方文档</a\n                      >获得。\n                    </p>\n                    <p data-nodeid=\"19873\">\n                      下面，我将从 npm 使用技巧以及一些常见使用误区来展开。\n                    </p>\n                    <h4 data-nodeid=\"19874\">自定义 npm init</h4>\n                    <p data-nodeid=\"19875\">\n                      npm 支持我们自定义 npm\n                      init，快速创建一个符合自己需求的自定义项目。想象一下，<strong\n                        data-nodeid=\"20104\"\n                        >npm init 命令本身并不复杂，它其实就是调用 shell\n                        脚本输出一个初始化的 package.json 文件</strong\n                      >。那么相应地，我们要自定义 npm init 命令，就是写一个 node\n                      脚本而已，它的 module.exports 即为 package.json 配置内容。\n                    </p>\n                    <p data-nodeid=\"19876\">\n                      为了实现更加灵活的自定义功能，我们可以使用 prompt()\n                      方法，获取用户输入并动态产生的内容：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> desc = prompt(<span class=\"hljs-string\">'请输入项目描述'</span>, <span class=\"hljs-string\">'项目描述...'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  key: <span class=\"hljs-string\">'value'</span>,\n</div></li><li><div class=\"code-word\">  name: prompt(<span class=\"hljs-string\">'name?'</span>, process.cwd().split(<span class=\"hljs-string\">'/'</span>).pop()),\n</div></li><li><div class=\"code-word\">  version: prompt(<span class=\"hljs-string\">'version?'</span>, <span class=\"hljs-string\">'0.0.1'</span>),\n</div></li><li><div class=\"code-word\">  description: desc,\n</div></li><li><div class=\"code-word\">  main: <span class=\"hljs-string\">'index.js'</span>,\n</div></li><li><div class=\"code-word\">  repository: prompt(<span class=\"hljs-string\">'github repository url'</span>, <span class=\"hljs-string\">''</span>, function (url) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (url) {\n</div></li><li><div class=\"code-word\">      run(<span class=\"hljs-string\">'touch README.md'</span>);\n</div></li><li><div class=\"code-word\">      run(<span class=\"hljs-string\">'git init'</span>);\n</div></li><li><div class=\"code-word\">      run(<span class=\"hljs-string\">'git add README.md'</span>);\n</div></li><li><div class=\"code-word\">      run(<span class=\"hljs-string\">'git commit -m \"first commit\"'</span>);\n</div></li><li><div class=\"code-word\">      run(\\`git remote add origin ${url}\\`);\n</div></li><li><div class=\"code-word\">      run(<span class=\"hljs-string\">'git push -u origin master'</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> url;\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19878\">\n                      假设该脚本名为 .npm-init.js，我们执行下述命令来确保 npm\n                      init 所对应的脚本指向正确的文件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm config set init-<span class=\"hljs-keyword\">module</span> ~\\.npm-init.js\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"19880\">\n                      <p data-nodeid=\"19881\">\n                        更多信息可见：<a\n                          href=\"https://docs.npmjs.com/cli/init\"\n                          data-nodeid=\"20110\"\n                          >npm-init</a\n                        >。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"19882\">\n                      我们也可以通过配置 npm init 默认字段来自定义 npm init\n                      的内容：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm config set init.author.name <span class=\"hljs-string\">\"Lucas\"</span>\n</div></li><li><div class=\"code-word\">npm config set init.author.email <span class=\"hljs-string\">\"lucasXXXXXX@gmail.com\"</span>\n</div></li><li><div class=\"code-word\">npm config set init.author.url <span class=\"hljs-string\">\"lucasXXXXX.com\"</span>\n</div></li><li><div class=\"code-word\">npm config set init.license <span class=\"hljs-string\">\"MIT\"</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"19884\">\n                      <p data-nodeid=\"19885\">\n                        更多信息见：<a\n                          href=\"https://docs.npmjs.com/cli-commands/config.html\"\n                          data-nodeid=\"20116\"\n                          >npm-config</a\n                        >。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"19886\">\n                      利用 npm link，高效率在本地调试以验证包的可用性\n                    </h4>\n                    <p data-nodeid=\"19887\">\n                      当我们开发一个公共包时，总会有这样的困扰：假如我开发一个组件库，某个组件开发完成之后，如何验证该组件能在我的业务项目中正常运行呢？\n                    </p>\n                    <p data-nodeid=\"19888\">\n                      除了写一个完备的测试以外，常见的思路就是<strong\n                        data-nodeid=\"20125\"\n                        >在组件库开发中，设计 examples 目录或者一个\n                        playground，启动一个开发服务，以验证组件的运行情况</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"19889\">\n                      然而真实应用场景是多种多样的，如果能在某个项目中率先尝试就太好了。但我们又不能发布一个不安全的包版本供业务项目使用。另一个“笨”方法是，手动复制粘贴组件并打包产出到业务项目的\n                      node_modules\n                      中进行验证，但是这种做法既不安全也会使得项目混乱，变得难以维护，同时过于依赖手工执行，这种操作非常原始。\n                    </p>\n                    <p data-nodeid=\"19890\">\n                      那么如何<strong data-nodeid=\"20142\"\n                        >高效率在本地调试以验证包的可用性</strong\n                      >呢？这个时候，我们就可以<strong data-nodeid=\"20143\"\n                        >使用 npm link</strong\n                      >。简单来说，它可以<strong data-nodeid=\"20144\"\n                        >将模块链接到对应的业务项目中运行</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"19891\">\n                      我们来看一个具体场景，假设你正在开发项目 project\n                      1，其中有个包 package 1，对应 npm 模块包名称是\n                      npm-package-1，我们在 package 1 项目中加入了新功能 feature\n                      A，现在要验证在 project 1 项目中能否正常使用 package 1 的\n                      feature A，你应该怎么做？\n                    </p>\n                    <p data-nodeid=\"19892\">\n                      我们先在 package 1 目录中，执行 npm link，这样 npm link\n                      通过链接目录和可执行文件，实现 npm 包命令的全局可执行。\n                    </p>\n                    <p data-nodeid=\"19893\">\n                      然后在 project 1 中创建链接，执行 npm link npm-package-1\n                      命令时，它就会去 /usr/local/lib/node_modules/\n                      这个路径下寻找是否有这个包，如果有就建立软链接。\n                    </p>\n                    <p data-nodeid=\"19894\">\n                      这样一来，我们就可以在 project 1 的 node_module\n                      中会看到链接过来的模块包 npm-package-1，此时的\n                      npm-package-1 就带有最新开发的 feature A，这样一来就可以在\n                      project 1 中正常开发调试\n                      npm-package-1。当然别忘了，调试结束后可以执行 npm unlink\n                      以取消关联。\n                    </p>\n                    <p data-nodeid=\"19895\">\n                      从工作原理上总结，npm link\n                      的本质就是软链接，它主要做了两件事：\n                    </p>\n                    <ul data-nodeid=\"19896\">\n                      <li data-nodeid=\"19897\">\n                        <p data-nodeid=\"19898\">\n                          为目标 npm\n                          模块（npm-package-1）创建软链接，将其链接到全局 node\n                          模块安装路径 /usr/local/lib/node_modules/ 中；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19899\">\n                        <p data-nodeid=\"19900\">\n                          为目标 npm 模块（npm-package-1）的可执行 bin\n                          文件创建软链接，将其链接到全局 node 命令安装路径\n                          /usr/local/bin/ 中。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"19901\">\n                      通过刚才的场景，你可以看到：<strong data-nodeid=\"20163\"\n                        >npm link\n                        能够在工程上解决依赖包在任何一个真实项目中进行调试的问题，并且操作起来更加方便快捷</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"19902\">npx 的作用</h4>\n                    <p data-nodeid=\"19903\">\n                      npx 由 npm v5.2 版本引入，解决了 npm\n                      的一些使用快速开发、调试，以及项目内使用全局模块的痛点。\n                    </p>\n                    <p data-nodeid=\"19904\">\n                      <strong data-nodeid=\"20174\">在传统 npm 模式下</strong\n                      >，如果我们需要使用代码检测工具\n                      <a href=\"https://eslint.bootcss.com/\" data-nodeid=\"20172\"\n                        >ESLint</a\n                      >，就要先通过 npm install 安装：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm install eslint --save-dev\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19906\">然后在项目根目录下执行：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">./node_modules/.bin/eslint --init\n</div></li><li><div class=\"code-word\">./node_modules/.bin/eslint yourfile.js\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19908\">\n                      或者通过项目脚本和 package.json 的 npm scripts 字段调用\n                      ESLint。\n                    </p>\n                    <p data-nodeid=\"19909\">\n                      而使用 npx 就简单多了，你只需要下面 2 个操作步骤：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npx eslint --init\n</div></li><li><div class=\"code-word\">npx eslint yourfile.js\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19911\">为什么 npx 操作起来如此便捷呢？</p>\n                    <p data-nodeid=\"19912\">\n                      这是因为它可以直接执行 node_modules/.bin\n                      文件夹下的文件。在运行命令时，npx 可以自动去\n                      node_modules/.bin 路径和环境变量 $PATH\n                      里面检查命令是否存在，而不需要再在 package.json\n                      中定义相关的 script。\n                    </p>\n                    <p data-nodeid=\"19913\">\n                      <strong data-nodeid=\"20188\"\n                        >npx 另一个更实用的好处是：npx\n                        执行模块时会优先安装依赖，但是在安装执行后便删除此依赖，这就避免了全局安装模块带来的问题</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"19914\">\n                      运行如下命令后，npx 会将 create-react-app\n                      下载到一个临时目录，使用以后再删除：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npx create-react-app cra-project\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19916\">\n                      更多关于 npx 的介绍你可以去<a\n                        href=\"https://www.npmjs.com/package/npx\"\n                        data-nodeid=\"20193\"\n                        >官网</a\n                      >进一步查看。\n                    </p>\n                    <p data-nodeid=\"19917\">\n                      现在，你已经对 npm 有了一个初步了解，我们接下来一同看看\n                      npm 实操部分：多源镜像和企业级部署私服原理。\n                    </p>\n                    <h3 data-nodeid=\"19918\">\n                      npm 多源镜像和企业级部署私服原理\n                    </h3>\n                    <p data-nodeid=\"19919\">\n                      <strong data-nodeid=\"20201\"\n                        >npm 中的源（registry），其实就是一个查询服务</strong\n                      >。以 npmjs.org 为例，它的查询服务网址是\n                      https://registry.npmjs.org/。这个网址后面跟上模块名，就会得到一个\n                      JSON 对象，里面是该模块所有版本的信息。比如，访问\n                      https://registry.npmjs.org/react，就会看到 react\n                      模块所有版本的信息。\n                    </p>\n                    <p data-nodeid=\"19920\">\n                      我们可以通过<code data-backticks=\"1\" data-nodeid=\"20203\"\n                        >npm config set</code\n                      >命令来设置安装源或者某个 scope\n                      对应的安装源，很多企业也会搭建自己的 npm\n                      源。我们常常会碰到需要使用多个安装源的项目，这时就可以通过\n                      npm-preinstall 的钩子，通过 npm\n                      脚本，在安装公共依赖前自动进行源切换：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">\"scripts\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"preinstall\"</span>: <span class=\"hljs-string\">\"node ./bin/preinstall.js\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19922\">\n                      其中 preinstall.js 脚本内容，具体逻辑为通过 node.js\n                      执行<code data-backticks=\"1\" data-nodeid=\"20206\"\n                        >npm config set</code\n                      >命令，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">require(<span class=\"hljs-string\">' child_process'</span>).exec(<span class=\"hljs-string\">'npm config get registry'</span>, function(error, stdout, stderr) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!stdout.toString().match(/registry\\.x\\.com/)) {\n</div></li><li><div class=\"code-word\">    exec(<span class=\"hljs-string\">'npm config set @xscope:registry https://xxx.com/npm/'</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19924\">\n                      国内很多开发者使用的\n                      <a\n                        href=\"https://www.npmjs.com/package/nrm\"\n                        data-nodeid=\"20211\"\n                        >nrm</a\n                      >（npm registry manager）是 npm\n                      的镜像源管理工具，使用它可以快速地在 npm\n                      源间切换，这当然也是一种选择。\n                    </p>\n                    <p data-nodeid=\"19925\">\n                      你的公司是否也正在部署一个私有 npm\n                      镜像呢？你有没有想过公司为什么要这样做呢？\n                    </p>\n                    <p data-nodeid=\"19926\">\n                      虽然 npm\n                      并没有被屏蔽，但是下载第三方依赖包的速度依然较缓慢，这严重影响\n                      CI/CD 流程或本地开发效率。部署镜像后，一般可以<strong\n                        data-nodeid=\"20227\"\n                        >确保高速、稳定的 npm 服务</strong\n                      >，而且<strong data-nodeid=\"20228\"\n                        >使发布私有模块更加安全</strong\n                      >。除此之外，审核机制也可以<strong data-nodeid=\"20229\"\n                        >保障私服上的 npm 模块质量和安全</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"19927\">\n                      那么，如何部署一个私有 npm 镜像呢？\n                    </p>\n                    <p data-nodeid=\"19928\">\n                      现在社区上主要有 3 种工具来搭建 npm 私服：nexus、verdaccio\n                      以及 cnpm。\n                    </p>\n                    <p data-nodeid=\"19929\">\n                      它们的工作原理相同，我们可以通过 nexus\n                      的架构示例简单了解一下：\n                    </p>\n                    <p data-nodeid=\"19930\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/9D/CgqCHl_Tba6AcJj0AAGPl9HW2qg745.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"20235\"\n                      />\n                    </p>\n                    <div data-nodeid=\"19931\">\n                      <p style=\"text-align: center\">nexus 架构示例图</p>\n                    </div>\n                    <p data-nodeid=\"19932\">\n                      nexus 工作在 client 和外部 npm 之间，并通过 group\n                      repository 合并 npm\n                      仓库以及私有仓库，这样就起到了代理转发的作用。\n                    </p>\n                    <p data-nodeid=\"19933\">\n                      了解了 npm\n                      私服的原理，我们就不畏惧任何“雷区”。这部分我也总结了两个社区上常见的问题。\n                    </p>\n                    <p data-nodeid=\"19934\">\n                      <strong data-nodeid=\"20241\">npm 配置作用优先级</strong>\n                    </p>\n                    <p data-nodeid=\"19935\">\n                      npm 可以通过默认配置帮助我们预设好 npm\n                      对项目的影响动作，但是 npm\n                      的配置优先级需要开发者确认了解。\n                    </p>\n                    <p data-nodeid=\"19936\">\n                      如下图所示，优先级从左到右依次降低。我们在使用 npm\n                      时需要了解 npm\n                      的设置作用域，排除干扰范围，以免一顿骚操作之后，并没有找到相应的起作用配置。\n                    </p>\n                    <p data-nodeid=\"19937\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/9D/CgqCHl_TbZCAanocAADUyWa5fV4429.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"20246\"\n                      />\n                    </p>\n                    <div data-nodeid=\"19938\">\n                      <p style=\"text-align: center\">优先级排序示意图</p>\n                    </div>\n                    <p data-nodeid=\"19939\">\n                      <strong data-nodeid=\"20250\">npm 镜像和安装问题</strong>\n                    </p>\n                    <p data-nodeid=\"19940\">\n                      另外一个常见的问题就是 npm 镜像和依赖安装，关于 npm\n                      镜像和依赖安装问题，归根到底还是网络环境导致的，建议有条件的情况下还是<strong\n                        data-nodeid=\"20256\"\n                        >从网络层面解决问题</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"19941\">\n                      如果没有条件，也不要紧，办法总比困难多，可以通过设置安装源镜像来解决，这就需要紧跟社区方案，刨根究底了。这里推荐一篇文章：<a\n                        href=\"https://mp.weixin.qq.com/s/2ntKGIkR3Uiy9cQfITg2NQ\"\n                        data-nodeid=\"20260\"\n                        >聊聊 npm 镜像那些险象环生的坑</a\n                      >，文章中有更详细的内容，你可以看看。\n                    </p>\n                    <h3 data-nodeid=\"19942\">结语</h3>\n                    <p data-nodeid=\"19943\">\n                      关于 npm\n                      的核心理念及安装机制，我们暂且分析到这里。这一讲，我们梳理了\n                      npm 安装逻辑，在了解其安装原理的基础上，对 npm\n                      一些常见使用误区以及使用技巧进行了分析；另外我们也具体了解了\n                      npm 多源镜像和企业级部署私服原理。\n                    </p>\n                    <p data-nodeid=\"19944\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/00/68/CgpVE1_XAHWAOTwZAAa8HJHvldA513.png\"\n                        alt=\"01.png\"\n                        data-nodeid=\"20266\"\n                      />\n                    </p>\n                    <p data-nodeid=\"19945\">\n                      各种环节并不复杂，但是却往往被开发者忽略，导致项目中开发受阻或者架构混乱。本课时，我们也深入多处源码内容，希望对你设计一个完整的工程流程机制有所启发。这里我也给大家留一个思考题：cnpm\n                      是什么，它有什么意义？欢迎你在留言区分享你的观点。\n                    </p>\n                    <p data-nodeid=\"19946\">\n                      关于 npm 和 Yarn\n                      的更多内容，我们将在下一讲中继续进行，欢迎你继续阅读。\n                    </p>\n                    <hr data-nodeid=\"19947\" />\n                    <p data-nodeid=\"19948\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"20273\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image2/M01/00/66/CgpVE1_W_x2AaW0rAAdqMM6w3z0145.png\"\n                          alt=\"大前端引流.png\"\n                          data-nodeid=\"20272\"\n                      /></a>\n                    </p>\n                    <p data-nodeid=\"19949\" class=\"te-preview-highlight\">\n                      对标阿里P7技术需求 + 每月大厂内推，6 个月助你斩获名企高薪\n                      Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"20277\"\n                        >点此链接，快来领取！</a\n                      >\n                    </p>\n            "}