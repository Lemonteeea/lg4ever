{"title":"04 | 类组件与函数组件有什么区别呢？","context":"\n                    <p data-nodeid=\"5186\" class=\"\">\n                      前面讲了“是什么”“为什么”“如何避免”这三种类型的问题，本讲我们通过分析“类组件与函数组件有什么区别呢？”这个问题，来看看“有什么区别”这类型的问题该怎么回答。\n                    </p>\n                    <h3 data-nodeid=\"5187\">破题</h3>\n                    <p data-nodeid=\"5188\">\n                      正如前面的几讲内容所说，答题不仅是告知答案，更是要有表达上的完整性，使用表达的技巧去丰富面试表现。以这样的思路，我们再来分析下“有什么区别”这类题应该如何应对。\n                    </p>\n                    <p data-nodeid=\"5189\">\n                      <strong data-nodeid=\"5311\"\n                        >描述区别，就是求同存异的过程</strong\n                      >：\n                    </p>\n                    <ul data-nodeid=\"5190\">\n                      <li data-nodeid=\"5191\">\n                        <p data-nodeid=\"5192\">\n                          在确认共性的基础上，才能找到它独特的个性；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"5193\">\n                        <p data-nodeid=\"5194\">\n                          再通过具体的场景逐个阐述它的个性。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"5195\">\n                      针对“类组件与函数组件有什么区别呢？”这一面试题，面试官需要知道：\n                    </p>\n                    <ul data-nodeid=\"5196\">\n                      <li data-nodeid=\"5197\">\n                        <p data-nodeid=\"5198\">\n                          你对组件的两种编写模式是否了解；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"5199\">\n                        <p data-nodeid=\"5200\">\n                          你是否具备在合适的场景下选用合适技术栈的能力。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"5201\">\n                      类组件与函数组件的<strong data-nodeid=\"5326\"\n                        >共同点</strong\n                      >，就是它们的实际用途是一样的，无论是高阶组件，还是异步加载，<strong\n                        data-nodeid=\"5327\"\n                        >都可以用它们作为基础组件展示 UI</strong\n                      >。也就是作为组件本身的所有基础功能都是一致的。\n                    </p>\n                    <p data-nodeid=\"5202\">\n                      那不同点呢？我们可以尝试从使用场景、独有的功能、设计模式及未来趋势等不同的角度进行挖掘。\n                    </p>\n                    <h3 data-nodeid=\"5203\">承题</h3>\n                    <p data-nodeid=\"5204\">\n                      基于以上的分析，我们可以整理出如下的答题思路：\n                    </p>\n                    <ul data-nodeid=\"5205\">\n                      <li data-nodeid=\"5206\">\n                        <p data-nodeid=\"5207\">\n                          从组件的使用方式和表达效果来总结相同点；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"5208\">\n                        <p data-nodeid=\"5209\">\n                          从代码实现、独有特性、具体场景等细分领域描述不同点。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"5210\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/7E/CD/CgqCHl_PXBaAAyLPAABAjNFkGwg533.png\"\n                        alt=\"Lark20201208-185659.png\"\n                        data-nodeid=\"5335\"\n                      />\n                    </p>\n                    <p data-nodeid=\"5211\">\n                      但是用这样的方式去描述类组件与函数组件的不同点似乎有些混乱，我们可以列出很多的重点，以至于似乎没有了重点，所以我们还需要再思考。如此多的不同点，本质上的原因是什么？为什么会设计两种不同的方式来完成同一件事，就像函数设计中为什么有\n                      callback 与链式调用两种模式？就需要你去找差异点中的<strong\n                        data-nodeid=\"5341\"\n                        >共性作为主线</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"5212\">入手</h3>\n                    <h4 data-nodeid=\"5213\">相同点</h4>\n                    <p data-nodeid=\"5214\">\n                      组件是 React\n                      可复用的最小代码片段，它们会返回要在页面中渲染的 React\n                      元素。也正因为组件是 React 的最小编码单位，所以<strong\n                        data-nodeid=\"5348\"\n                        >无论是函数组件还是类组件，在使用方式和最终呈现效果上都是完全一致的。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"5215\">\n                      你甚至可以将一个类组件改写成函数组件，或者把函数组件改写成一个类组件（虽然并不推荐这种重构行为）。从使用者的角度而言，很难从使用体验上区分两者，而且在现代浏览器中，闭包和类的性能只在极端场景下才会有明显的差别。\n                    </p>\n                    <p data-nodeid=\"5216\">\n                      <strong data-nodeid=\"5353\"\n                        >所以我们基本可认为两者作为组件是完全一致的。</strong\n                      >\n                    </p>\n                    <h4 data-nodeid=\"5217\">不同点</h4>\n                    <p data-nodeid=\"5218\">\n                      <strong data-nodeid=\"5358\">基础认知</strong>\n                    </p>\n                    <p data-nodeid=\"5219\">\n                      <strong data-nodeid=\"5362\"\n                        >类组件与函数组件本质上代表了两种不同的设计思想与心智模式。</strong\n                      >\n                    </p>\n                    <ul data-nodeid=\"5220\">\n                      <li data-nodeid=\"5221\">\n                        <p data-nodeid=\"5222\">\n                          类组件的根基是\n                          OOP（面向对象编程），所以它有继承、有属性、有内部状态的管理。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"5223\">\n                        <p data-nodeid=\"5224\">\n                          函数组件的根基是\n                          FP，也就是函数式编程。它属于“结构化编程”的一种，与数学函数思想类似。也就是假定输入与输出存在某种特定的映射关系，那么输入一定的情况下，输出必然是确定的。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"5225\">\n                      <strong data-nodeid=\"5369\"\n                        >相较于类组件，函数组件更纯粹、简单、易测试。</strong\n                      >\n                      这是它们本质上最大的不同。\n                    </p>\n                    <p data-nodeid=\"5226\">\n                      有一个广为流传的经典案例，是这样来描述函数组件的确定性的（有的文章会将这种确定性翻译为函数组件的<strong\n                        data-nodeid=\"5375\"\n                        >值捕获特性）</strong\n                      >，案例中的代码是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">const Profile = (props) =&gt; {\n</div></li><li><div class=\"code-word\">&nbsp; const showMessage = () =&gt; {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; alert('用户是' + props.user);\n</div></li><li><div class=\"code-word\">&nbsp; };\n</div></li><li><div class=\"code-word\">&nbsp; const handleClick = () =&gt; {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; setTimeout(showMessage, 3 * 1000);\n</div></li><li><div class=\"code-word\">&nbsp; };\n</div></li><li><div class=\"code-word\">&nbsp; return (\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &lt;button onClick={handleClick}&gt;查询&lt;/button&gt;\n</div></li><li><div class=\"code-word\">&nbsp; );\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"5228\">\n                      请注意，由于这里并没有查询接口，所以通过 setTimeout\n                      来模拟网络请求。\n                    </p>\n                    <p data-nodeid=\"5229\">\n                      那如果通过类组件来描写，我们大致上会这样重构，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">class Profile extends React.Component {\n</div></li><li><div class=\"code-word\">&nbsp; showMessage = () =&gt; {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; alert('用户是' + this.props.user);\n</div></li><li><div class=\"code-word\">&nbsp; };\n</div></li><li><div class=\"code-word\">&nbsp; handleClick = () =&gt; {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; setTimeout(this.showMessage, 3 * 1000);\n</div></li><li><div class=\"code-word\">&nbsp; };\n</div></li><li><div class=\"code-word\">&nbsp; render() {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; return &lt;button onClick={this.handleClick}&gt;查询&lt;/button&gt;;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"5231\">\n                      表面上看这两者是等效的。正因为存在这样的迷惑性，所以这也是此案例会如此经典的原因。\n                    </p>\n                    <p data-nodeid=\"5232\">\n                      接下来就非常神奇了，也是这个案例的经典步骤：\n                    </p>\n                    <ul data-nodeid=\"5233\">\n                      <li data-nodeid=\"5234\">\n                        <p data-nodeid=\"5235\">点击其中某一个查询按钮；</p>\n                      </li>\n                      <li data-nodeid=\"5236\">\n                        <p data-nodeid=\"5237\">在 3 秒内切换选中的任务；</p>\n                      </li>\n                      <li data-nodeid=\"5238\">\n                        <p data-nodeid=\"5239\">查看弹框的文本。</p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">import React from \"react\";\n</div></li><li><div class=\"code-word\">import ReactDOM from \"react-dom\";\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">import ProfileFunction from './ProfileFunction';\n</div></li><li><div class=\"code-word\">import ProfileClass from './ProfileClass';\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">class App extends React.Component {\n</div></li><li><div class=\"code-word\">&nbsp; state = {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; user: '小明',\n</div></li><li><div class=\"code-word\">&nbsp; };\n</div></li><li><div class=\"code-word\">&nbsp; render() {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; return (\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &lt;&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &lt;label&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;b&gt; : &lt;/b&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;select\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; value={this.state.user}\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onChange={e =&gt; this.setState({ user: e.target.value })}\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option value=\"小明\"&gt;Dan&lt;/option&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option value=\"小白\"&gt;Sophie&lt;/option&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;option value=\"小黄\"&gt;Sunil&lt;/option&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;/select&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &lt;/label&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &lt;h1&gt;{this.state.user}&lt;/h1&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &lt;p&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;ProfileFunction user={this.state.user} /&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;b&gt; (function)&lt;/b&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &lt;/p&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &lt;p&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;ProfileClass user={this.state.user} /&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;b&gt; (class)&lt;/b&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &lt;/p&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &lt;/&gt;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; )\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">const rootElement = document.getElementById(\"root\");\n</div></li><li><div class=\"code-word\">ReactDOM.render(&lt;App /&gt;, rootElement);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"5241\">这时，你将会看到一个现象：</p>\n                    <ul data-nodeid=\"5242\">\n                      <li data-nodeid=\"5243\">\n                        <p data-nodeid=\"5244\">\n                          使用函数组件时，当前账号是小白，点击查询按钮，然后立马将当前账号切换到小黄，但弹框显示的内容依然还是小白；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"5245\">\n                        <p data-nodeid=\"5246\">\n                          而当使用类组件时，同样的操作下，弹框显示的是小黄。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"5247\">\n                      那为什么会这样呢？因为当切换下拉框后，新的 user 作为 props\n                      传入了类组件中，所以此时组件内的 user\n                      已经发生变化了。如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">showMessage = () =&gt; {\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-comment\">// 这里每次都是取最新的 this.props。</span>\n</div></li><li><div class=\"code-word\">    alert(<span class=\"hljs-string\">'用户是'</span> + <span class=\"hljs-keyword\">this</span>.props.user);\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"5249\">\n                      这里的 this\n                      存在一定的模糊性，容易引起错误使用。如果希望组件能正确运行，那么我们可以这样修改：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"> showMessage = (user) =&gt; {\n</div></li><li><div class=\"code-word\">    alert(<span class=\"hljs-string\">'用户是'</span> + user);\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  handleClick = () =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> {user} = <span class=\"hljs-keyword\">this</span>.props;\n</div></li><li><div class=\"code-word\">    setTimeout(() =&gt; <span class=\"hljs-keyword\">this</span>.showMessage(user), <span class=\"hljs-number\">3</span> * <span class=\"hljs-number\">1000</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"5251\">\n                      但在函数组件的闭包中，这就不是问题，它捕获的值永远是确定且安全的。有了这样一个基础认知，我们就可以继续探讨差异了。\n                    </p>\n                    <p data-nodeid=\"5252\">\n                      <strong data-nodeid=\"5392\">独有能力</strong>\n                    </p>\n                    <p data-nodeid=\"5253\">\n                      <strong data-nodeid=\"5397\"\n                        >类组件通过生命周期包装业务逻辑，这是类组件所特有的</strong\n                      >。我们常常会看到这样的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  componentDidMount() {\n</div></li><li><div class=\"code-word\">     fetchPosts().then(posts =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.setState({ posts });\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> ...\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"5255\">\n                      在还没有 Hooks\n                      的时代，函数组件的能力是相对较弱的。在那个时候常常用高阶组件包裹函数组件模拟生命周期。当时流行的解决方案是\n                      Recompose。如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> PostsList = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ posts }</span>) =&gt;</span> (\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>{posts.map(p =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>{p.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>)}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> PostsListWithData = lifecycle({\n</div></li><li><div class=\"code-word\">&nbsp; componentDidMount() {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; fetchPosts().then(<span class=\"hljs-function\"><span class=\"hljs-params\">posts</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">this</span>.setState({ posts });\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; })\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">})(PostsList);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"5257\">\n                      这一解决方案在一定程度上增强了函数组件的能力，但它并没有解决业务逻辑掺杂在生命周期中的问题。Recompose\n                      后来加入了 React 团队，参与了 Hooks 标准的制定，并基于\n                      Hooks 创建了一个完全耳目一新的方案。\n                    </p>\n                    <p data-nodeid=\"5258\">\n                      这个方案从一个全新的角度解决问题：不是让函数组件去模仿类组件的功能，而是提供新的开发模式让组件渲染与业务逻辑更分离。设计出如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">import React, { useState, useEffect } from 'react';\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">function App() {\n</div></li><li><div class=\"code-word\">  const [data, setData] = useState({ posts: [] });\n</div></li><li><div class=\"code-word\">  useEffect(() =&gt; {\n</div></li><li><div class=\"code-word\">    (async () =&gt; {\n</div></li><li><div class=\"code-word\">      const result = await fetchPosts();\n</div></li><li><div class=\"code-word\">      setData(result.data);\n</div></li><li><div class=\"code-word\">    }()\n</div></li><li><div class=\"code-word\">  }, []);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  return (\n</div></li><li><div class=\"code-word\">    &lt;ul&gt;{data.posts.map(p =&gt; &lt;li&gt;{p.title}&lt;/li&gt;)}&lt;/ul&gt;\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">export default App;\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"5260\">\n                      <strong data-nodeid=\"5404\">使用场景</strong>\n                    </p>\n                    <p data-nodeid=\"5261\">\n                      从上一部分内容的学习中，可以总结出：\n                    </p>\n                    <ul data-nodeid=\"5262\">\n                      <li data-nodeid=\"5263\">\n                        <p data-nodeid=\"5264\">\n                          在不使用 Recompose 或者 Hooks\n                          的情况下，如果需要使用生命周期，那么就用类组件，限定的场景是非常固定的；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"5265\">\n                        <p data-nodeid=\"5266\">\n                          但在 recompose 或 Hooks\n                          的加持下，这样的边界就模糊化了，类组件与函数组件的能力边界是完全相同的，都可以使用类似生命周期等能力。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"5267\">\n                      <strong data-nodeid=\"5411\">设计模式</strong>\n                    </p>\n                    <p data-nodeid=\"5268\">\n                      在设计模式上，因为类本身的原因，类组件是可以实现继承的，而函数组件缺少继承的能力。\n                    </p>\n                    <p data-nodeid=\"5269\">\n                      当然在 React\n                      中也是不推荐继承已有的组件的，因为继承的灵活性更差，细节屏蔽过多，所以有这样一个铁律，<strong\n                        data-nodeid=\"5418\"\n                        >组合优于继承。</strong\n                      >\n                      详细的设计模式的内容会在 05 讲具体讲解。\n                    </p>\n                    <p data-nodeid=\"5270\">\n                      <strong data-nodeid=\"5422\">性能优化</strong>\n                    </p>\n                    <p data-nodeid=\"5271\">\n                      那么类组件和函数组件都是怎样来进行性能优化的呢？这里需要联动一下<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=566#/detail/pc?id=5793\"\n                        data-nodeid=\"5426\"\n                        >上一讲</a\n                      >的知识了。\n                    </p>\n                    <ul data-nodeid=\"5272\">\n                      <li data-nodeid=\"5273\">\n                        <p data-nodeid=\"5274\">\n                          类组件的优化主要依靠 shouldComponentUpdate\n                          函数去阻断渲染。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"5275\">\n                        <p data-nodeid=\"5276\">\n                          而函数组件一般靠 React.memo 来优化。React.memo\n                          并不是去阻断渲染，它具体是什么作用还记得吗？赶紧翻翻上一讲的内容再次学习下吧。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"5277\">\n                      <strong data-nodeid=\"5433\">未来趋势</strong>\n                    </p>\n                    <p data-nodeid=\"5278\">\n                      由于 React Hooks 的推出，函数组件成了社区未来主推的方案。\n                    </p>\n                    <p data-nodeid=\"5279\">\n                      React 团队从 Facebook\n                      的实际业务出发，通过探索时间切片与并发模式，以及考虑性能的进一步优化与组件间更合理的代码拆分结构后，<strong\n                        data-nodeid=\"5440\"\n                        >认为类组件的模式并不能很好地适应未来的趋势。</strong\n                      >\n                      他们给出了 3 个原因：\n                    </p>\n                    <ul data-nodeid=\"5280\">\n                      <li data-nodeid=\"5281\">\n                        <p data-nodeid=\"5282\">this 的模糊性；</p>\n                      </li>\n                      <li data-nodeid=\"5283\">\n                        <p data-nodeid=\"5284\">业务逻辑散落在生命周期中；</p>\n                      </li>\n                      <li data-nodeid=\"5285\">\n                        <p data-nodeid=\"5286\">\n                          React 的组件代码缺乏标准的拆分方式。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"5287\">\n                      而使用 Hooks\n                      的函数组件可以提供比原先更细粒度的逻辑组织与复用，且能更好地适用于时间切片与并发模式。\n                    </p>\n                    <h3 data-nodeid=\"5288\">答题</h3>\n                    <p data-nodeid=\"5289\">\n                      相信通过以上的分析，当被问到这道面试题时，你已经知道如何应答了吧。\n                    </p>\n                    <blockquote data-nodeid=\"5290\">\n                      <p data-nodeid=\"5291\">\n                        作为组件而言，类组件与函数组件在使用与呈现上没有任何不同，性能上在现代浏览器中也不会有明显差异。\n                      </p>\n                      <p data-nodeid=\"5292\">\n                        它们在开发时的心智模型上却存在巨大的差异。类组件是基于面向对象编程的，它主打的是继承、生命周期等核心概念；而函数组件内核是函数式编程，主打的是\n                        immutable、没有副作用、引用透明等特点。\n                      </p>\n                      <p data-nodeid=\"5293\">\n                        之前，在使用场景上，如果存在需要使用生命周期的组件，那么主推类组件；设计模式上，如果需要使用继承，那么主推类组件。\n                      </p>\n                      <p data-nodeid=\"5294\">\n                        但现在由于 React Hooks\n                        的推出，生命周期概念的淡出，函数组件可以完全取代类组件。\n                      </p>\n                      <p data-nodeid=\"5295\">\n                        其次继承并不是组件最佳的设计模式，官方更推崇“组合优于继承”的设计概念，所以类组件在这方面的优势也在淡出。\n                      </p>\n                      <p data-nodeid=\"5296\">\n                        性能优化上，类组件主要依靠\n                        shouldComponentUpdate&nbsp;阻断渲染来提升性能，而函数组件依靠\n                        React.memo 缓存渲染结果来提升性能。\n                      </p>\n                      <p data-nodeid=\"5297\">\n                        从上手程度而言，类组件更容易上手，从未来趋势上看，由于React\n                        Hooks 的推出，函数组件成了社区未来主推的方案。\n                      </p>\n                      <p data-nodeid=\"5298\">\n                        类组件在未来时间切片与并发模式中，由于生命周期带来的复杂度，并不易于优化。而函数组件本身轻量简单，且在\n                        Hooks\n                        的基础上提供了比原先更细粒度的逻辑组织与复用，更能适应\n                        React 的未来发展。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"5299\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/7E/CE/CgqCHl_PXDiAO20DAABdvYlGsmA577.png\"\n                        alt=\"Lark20201208-185707.png\"\n                        data-nodeid=\"5457\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"5300\">总结</h3>\n                    <p data-nodeid=\"5301\">\n                      经过本讲的学习，你可以掌握类组件与函数组件的区别，对于组件的方方面面都有了大概的认识。那么组件是通过什么模式来设计的呢？我将会在下一讲与你详细探讨。\n                    </p>\n                    <p data-nodeid=\"5302\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"5464\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image/M00/73/68/Ciqc1F_F_CeAHYQKAASyC72ZqWw053.png\"\n                          alt=\"Drawing 2.png\"\n                          data-nodeid=\"5463\" /></a\n                      ><br />\n                      《大前端高薪训练营》\n                    </p>\n                    <p data-nodeid=\"5303\" class=\"\">\n                      对标阿里 P7 技术需求 + 每月大厂内推，6\n                      个月助你斩获名企高薪 Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"5470\"\n                        >点击链接</a\n                      >，快来领取！\n                    </p>\n            "}