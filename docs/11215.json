{"title":"13 | 工程化思维处理方案：如何实现应用主题切换功能？","context":"\n                    <p data-nodeid=\"1133\" class=\"\">\n                      前几讲内容，我们主要围绕 JavaScript\n                      和项目相关工程化方案展开。实际上，在前端基础建设中，样式方案的处理也必不可少。这一讲，就让我们设计一个工程化主题切换功能，并梳理现代前端样式的解决方案。\n                    </p>\n                    <h3 data-nodeid=\"1134\">设计一个主题切换工程架构</h3>\n                    <p data-nodeid=\"1135\">\n                      随着 iOS 13 引入 Dark\n                      Mode（深色模式），各大应用和网站也都开始支持深色模式。相比传统的页面配色方案，深色模式具有较好的降噪性，也能让用户的眼睛看内容更舒适。\n                    </p>\n                    <p data-nodeid=\"1136\">\n                      那么对于前端来说，如何高效地支持深色模式呢？这里的高效就是指<strong\n                        data-nodeid=\"1249\"\n                        >工程化、自动化方案</strong\n                      >，不需要开发中 hard coding。\n                    </p>\n                    <p data-nodeid=\"1137\">\n                      在介绍具体方案前，我们先来了解一个必备概念和工程化神器——PostCSS。\n                    </p>\n                    <h4 data-nodeid=\"1138\">PostCSS 原理和相关插件能力</h4>\n                    <p data-nodeid=\"1139\">\n                      简单来说， PostCSS 是一款编译 CSS 的工具。\n                    </p>\n                    <blockquote data-nodeid=\"1140\">\n                      <p data-nodeid=\"1141\">\n                        PostCSS is a tool for transforming styles with JS\n                        plugins. These plugins can lint your CSS, support\n                        variables and mixins, transpile future CSS syntax,\n                        inline images, and more.\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1142\">\n                      如上介绍，postCSS 具有良好的<strong data-nodeid=\"1263\"\n                        >插件性</strong\n                      >，其插件也是使用 JavaScript\n                      编写的，非常有利于开发者扩展。基于前几节介绍的 Babel\n                      思想，对比 JavaScript 的编译器，我们不难猜出 PostCSS\n                      的工作原理：<strong data-nodeid=\"1264\"\n                        >PostCSS 接收一个 CSS\n                        文件，并提供了插件机制，提供给开发者分析、修改 CSS\n                        的规则，具体实现方式也是基于 AST 技术</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1143\">\n                      而我们这一讲介绍的工程化主题切换架构，也离不开 PostCSS\n                      的基础能力。我们马上来设计一个相关结构能力。\n                    </p>\n                    <h4 data-nodeid=\"1144\">架构思路总结</h4>\n                    <p data-nodeid=\"1145\">\n                      主题切换——社区上介绍的方案往往通过 CSS 变量（CSS\n                      自定义属性）来实现，关于 CSS\n                      变量的介绍，相对基础，这里我们只贴出知识链接：<a\n                        href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties\"\n                        data-nodeid=\"1270\"\n                        >CSS 自定义属性</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"1146\">\n                      这无疑是一个很好的思路，但是作为架构来说，<strong\n                        data-nodeid=\"1277\"\n                        >使用 CSS 自定义属性——只是其中一个环节</strong\n                      >。站在更高、更中台化的视觉思考，我们还需要设计：\n                    </p>\n                    <ul data-nodeid=\"1147\">\n                      <li data-nodeid=\"1148\">\n                        <p data-nodeid=\"1149\">如何维护不同主题色值；</p>\n                      </li>\n                      <li data-nodeid=\"1150\">\n                        <p data-nodeid=\"1151\">谁来维护不同主题色值；</p>\n                      </li>\n                      <li data-nodeid=\"1152\">\n                        <p data-nodeid=\"1153\">\n                          研发和设计之间，如何保持不同主题色值的同步沟通；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1154\">\n                        <p data-nodeid=\"1155\">\n                          如何最小化前端工程师的开发量，不需要 hard coding\n                          两份颜色数值；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1156\">\n                        <p data-nodeid=\"1157\">如何做到一键切换时的性能最优；</p>\n                      </li>\n                      <li data-nodeid=\"1158\">\n                        <p data-nodeid=\"1159\">\n                          如何配合 JavaScript 状态管理，同步主题切换的信号。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1160\">\n                      基于以上考虑，以一个超链接样式为例，我们希望做到在开发时，编写：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">a {\n</div></li><li><div class=\"code-word\">  color: cc(GBK05A);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1162\">\n                      这样的代码，就能一劳永逸——直接支持两套（light/dark）主题模式。也就是说，在应用编译时，上述代码预期被编译为下面这样的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">a {\n</div></li><li><div class=\"code-word\">  color: #646464;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"> \n</div></li><li><div class=\"code-word\">html[data-theme='dark'] a {\n</div></li><li><div class=\"code-word\">  color: #808080;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1164\">\n                      我们来看看在编译时，构建环节发生了什么：\n                    </p>\n                    <ul data-nodeid=\"1165\">\n                      <li data-nodeid=\"1166\">\n                        <p data-nodeid=\"1167\">\n                          <code data-backticks=\"1\" data-nodeid=\"1287\"\n                            >cc(GBK05A)</code\n                          >这样的声明，被编译为<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1289\"\n                            >#646464</code\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1168\">\n                        <p data-nodeid=\"1169\">\n                          也就是说，<code data-backticks=\"1\" data-nodeid=\"1292\"\n                            >cc</code\n                          >是一个 CSS function，而<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1294\"\n                            >GBK05A</code\n                          >是一组色值，分别包含了 light 和 dark 两种主题的颜色；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1170\">\n                        <p data-nodeid=\"1171\">\n                          同时在 HTML 根节点上，添加属性选择器<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1297\"\n                            >data-theme='dark'</code\n                          >，并添加<code data-backticks=\"1\" data-nodeid=\"1299\"\n                            >a</code\n                          >标签 color 色值样式为<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1301\"\n                            >#808080</code\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1172\">\n                      我们设想，用户点击“切换主题”按钮时，首先<strong\n                        data-nodeid=\"1316\"\n                        >通过 JavaScript 将 HTML 根节点标签添加</strong\n                      ><code data-backticks=\"1\" data-nodeid=\"1307\"\n                        >data-theme</code\n                      >为<code data-backticks=\"1\" data-nodeid=\"1309\">dark</code\n                      >的属性值，这时<strong data-nodeid=\"1317\"\n                        >CSS 选择器</strong\n                      ><code data-backticks=\"1\" data-nodeid=\"1314\"\n                        >html[data-theme='dark'] a</code\n                      >将起作用，实现了样式的切换。\n                    </p>\n                    <p data-nodeid=\"1173\">结合下图理解：</p>\n                    <p data-nodeid=\"1174\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/06/EE/Cip5yGAGm3eACd70AAyNczVBKYI564.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1321\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1175\">\n                      回到我们的架构设计中，如何在构建时完成 CSS\n                      的样式编译转换呢？答案指向了\n                      PostCSS。我们来盘点一下具体架构步骤。\n                    </p>\n                    <ul data-nodeid=\"1176\">\n                      <li data-nodeid=\"1177\">\n                        <p data-nodeid=\"1178\">\n                          首先编写一个名为 postcss-theme-colors 的 PostCSS\n                          插件，实现上述编译过程。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1179\">\n                        <p data-nodeid=\"1180\">\n                          维护一个色值，结合上例（这里以 YML 格式为例）就是：\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">GBK05A: [BK05, BK06]\n</div></li><li><div class=\"code-word\">BK05: <span class=\"hljs-string\">'#808080'</span>\n</div></li><li><div class=\"code-word\">BK06: <span class=\"hljs-string\">'#999999'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1182\">postcss-theme-colors 需要：</p>\n                    <ol data-nodeid=\"1183\">\n                      <li data-nodeid=\"1184\">\n                        <p data-nodeid=\"1185\">\n                          识别<code data-backticks=\"1\" data-nodeid=\"1327\"\n                            >cc()</code\n                          >方法；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1186\">\n                        <p data-nodeid=\"1187\">读取色值；</p>\n                      </li>\n                      <li data-nodeid=\"1188\">\n                        <p data-nodeid=\"1189\">\n                          通过色值，对<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1331\"\n                            >cc()</code\n                          >方法求值，得到两种颜色，分别对应 dark 和 light 模式；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1190\">\n                        <p data-nodeid=\"1191\">\n                          原地编译 CSS 中的颜色为 light 模式色值；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1192\">\n                        <p data-nodeid=\"1193\">\n                          同时 dark 模式色值写到 HTML 节点上。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1194\">\n                      这里需要补充的是，为了将 dark 模式色值按照<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1336\"\n                        >html[data-theme='dark']</code\n                      >方式写到 HTML 节点上，我们使用了另外两个 PostCSS\n                      插件完成：\n                    </p>\n                    <ul data-nodeid=\"1195\">\n                      <li data-nodeid=\"1196\">\n                        <p data-nodeid=\"1197\">\n                          <a\n                            href=\"https://www.npmjs.com/package/postcss-nested\"\n                            data-nodeid=\"1340\"\n                            >PostCSS Nested</a\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1198\">\n                        <p data-nodeid=\"1199\">\n                          <a\n                            href=\"https://www.npmjs.com/package/postcss-nesting\"\n                            data-nodeid=\"1343\"\n                            >PostCSS Nesting</a\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1200\">整体架构设计，总结为下图：</p>\n                    <p data-nodeid=\"1201\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/07/BE/CgpVE2AJHHCAbXrZAAH5kg-FP4Q349.png\"\n                        alt=\"Lark20210121-141646.png\"\n                        data-nodeid=\"1347\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1202\">\n                      <p style=\"text-align: center\">PostCSS 架构转换设计</p>\n                    </div>\n                    <h3 data-nodeid=\"1203\">主题色切换架构实现</h3>\n                    <p data-nodeid=\"1204\">\n                      有了架构，这部分我们就来实现架构环节中的重点环节。首先，我们需要了解\n                      PostCSS 插件体系。\n                    </p>\n                    <h4 data-nodeid=\"1205\">PostCSS 插件体系</h4>\n                    <p data-nodeid=\"1206\">\n                      PostCSS\n                      具有天生的插件化体系，开发者一般很容易上手插件开发：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> postcss = require(<span class=\"hljs-string\">'postcss'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = postcss.plugin(<span class=\"hljs-string\">'pluginname'</span>, function (opts) {\n</div></li><li><div class=\"code-word\">  opts = opts || {};\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// Work with options here</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> function (css, result) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// Transform the CSS AST</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1208\">\n                      上面代码是一个典型的 PostCSS 插件编写模版。一个 PostCSS\n                      就是一个 Node.js 模块，开发者调用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1353\"\n                        >postcss.plugin</code\n                      >（源码链接定义在<a\n                        href=\"https://github.com/postcss/postcss/blob/main/lib/postcss.js#L28\"\n                        data-nodeid=\"1357\"\n                        >postcss.plugin</a\n                      >中 ）工厂方法返回一个插件实体，形如：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    postcssPlugin: <span class=\"hljs-string\">'PLUGIN_NAME'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/*\n</span></div></li><li><div class=\"code-word\">    Root (root, postcss) {\n</div></li><li><div class=\"code-word\">      // Transform CSS AST here\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    */\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/*\n</span></div></li><li><div class=\"code-word\">    Declaration (decl, postcss) {\n</div></li><li><div class=\"code-word\">      // The faster way to find Declaration node\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    */\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/*\n</span></div></li><li><div class=\"code-word\">    Declaration: {\n</div></li><li><div class=\"code-word\">      color: (decl, postcss) {\n</div></li><li><div class=\"code-word\">        // The fastest way find Declaration node if you know property name\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    */\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1210\">\n                      在编写 PostCSS 插件时，我们可以直接使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1360\"\n                        >postcss.plugin</code\n                      >方法完成实际开发。接下来，我们就开始动手实现\n                      postcss-theme-colors。\n                    </p>\n                    <h4 data-nodeid=\"1211\">动手实现 postcss-theme-colors</h4>\n                    <p data-nodeid=\"1212\">\n                      上述内容，在 PostCSS 插件设计中，我们看到了清晰的 AST\n                      设计痕迹，经过之前小节的学习，我们应该对于 AST\n                      不再陌生。根据插件代码骨架，我们加入具体实现逻辑，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> postcss = require(<span class=\"hljs-string\">'postcss'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> defaults = {\n</div></li><li><div class=\"code-word\">  function: <span class=\"hljs-string\">'cc'</span>,\n</div></li><li><div class=\"code-word\">  groups: {},\n</div></li><li><div class=\"code-word\">  colors: {},\n</div></li><li><div class=\"code-word\">  useCustomProperties: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">  darkThemeSelector: <span class=\"hljs-string\">'html[data-theme=\"dark\"]'</span>,\n</div></li><li><div class=\"code-word\">  nestingPlugin: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> resolveColor = (options, theme, group, defaultValue) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> [lightColor, darkColor] = options.groups[group] || []\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> color = theme === <span class=\"hljs-string\">'dark'</span> ? darkColor : <span class=\"hljs-function\">lightColor\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(!color)</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> defaultValue\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (options.useCustomProperties) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> color.startsWith(<span class=\"hljs-string\">'--'</span>) ? \\`<span class=\"hljs-keyword\">var</span>(${color})\\` : \\`<span class=\"hljs-keyword\">var</span>(--${color})\\`\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> options.colors[color] || defaultValue\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = postcss.plugin(<span class=\"hljs-string\">'postcss-theme-colors'</span>, options =&gt; {\n</div></li><li><div class=\"code-word\">  options = Object.assign({}, defaults, options)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 获取色值函数（默认为 cc()）</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> reGroup = <span class=\"hljs-keyword\">new</span> RegExp(\\`\\\\b${options.function}\\\\(([^)]+)\\\\)\\`, <span class=\"hljs-string\">'g'</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (style, result) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 判断 PostCSS 工作流程中，是否使用了某些 plugins</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> hasPlugin = name =&gt;\n</div></li><li><div class=\"code-word\">      name.replace(/^postcss-/, <span class=\"hljs-string\">''</span>) === options.nestingPlugin ||\n</div></li><li><div class=\"code-word\">      result.processor.plugins.some(p =&gt; p.postcssPlugin === name)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 获取最终 CSS 值</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> getValue = (value, theme) =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> value.replace(reGroup, (match, group) =&gt; {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> resolveColor(options, theme, group, match)\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 遍历 CSS 声明</span>\n</div></li><li><div class=\"code-word\">    style.walkDecls(decl =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> value = decl.value\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 如果不含有色值函数调用，则提前退出</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!value || !reGroup.test(value)) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> lightValue = getValue(value, <span class=\"hljs-string\">'light'</span>) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> darkValue = getValue(value, <span class=\"hljs-string\">'dark'</span>) \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> darkDecl = decl.clone({value: darkValue})\n</div></li><li><div class=\"code-word\">      let darkRule\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 使用插件，生成 dark 样式</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (hasPlugin(<span class=\"hljs-string\">'postcss-nesting'</span>)) {\n</div></li><li><div class=\"code-word\">        darkRule = postcss.atRule({\n</div></li><li><div class=\"code-word\">          name: <span class=\"hljs-string\">'nest'</span>,\n</div></li><li><div class=\"code-word\">          params: \\`${options.darkThemeSelector} &amp;\\`,\n</div></li><li><div class=\"code-word\">        })\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hasPlugin(<span class=\"hljs-string\">'postcss-nested'</span>)) {\n</div></li><li><div class=\"code-word\">        darkRule = postcss.rule({\n</div></li><li><div class=\"code-word\">          selector: \\`${options.darkThemeSelector} &amp;\\`,\n</div></li><li><div class=\"code-word\">        })\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        decl.warn(result, \\`Plugin(postcss-nesting or postcss-nested) not found\\`)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 添加 dark 样式到目标 HTML 节点中</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (darkRule) {\n</div></li><li><div class=\"code-word\">        darkRule.append(darkDecl)\n</div></li><li><div class=\"code-word\">        decl.after(darkRule)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> lightDecl = decl.clone({value: lightValue})\n</div></li><li><div class=\"code-word\">      decl.replaceWith(lightDecl)\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1214\">\n                      上面代码我加入了相关注释，整体逻辑并不难理解。理解了这部分源码，使用方式也就呼之欲出了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> colors = {\n</div></li><li><div class=\"code-word\">  C01: <span class=\"hljs-string\">'#eee'</span>,\n</div></li><li><div class=\"code-word\">  C02: <span class=\"hljs-string\">'#111'</span>,\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> groups = {\n</div></li><li><div class=\"code-word\">  G01: [<span class=\"hljs-string\">'C01'</span>, <span class=\"hljs-string\">'C02'</span>],\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">postcss([\n</div></li><li><div class=\"code-word\">  require(<span class=\"hljs-string\">'postcss-theme-colors'</span>)({colors, groups}),\n</div></li><li><div class=\"code-word\">]).process(css)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1216\">\n                      通过上述操作，我们实现了 postcss-theme-colors\n                      插件，整体架构也就完成了大半。接下来，我们将继续完善，最终打造出一个更符合基础建设要求的方案。\n                    </p>\n                    <h4 data-nodeid=\"1217\">\n                      架构平台化——色组 &amp; 色值平台设计\n                    </h4>\n                    <p data-nodeid=\"1218\">\n                      上面的使用示例中，我们采用了 hard coding\n                      的方式，如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> colors = {\n</div></li><li><div class=\"code-word\">  C01: <span class=\"hljs-string\">'#eee'</span>,\n</div></li><li><div class=\"code-word\">  C02: <span class=\"hljs-string\">'#111'</span>,\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> groups = {\n</div></li><li><div class=\"code-word\">  G01: [<span class=\"hljs-string\">'C01'</span>, <span class=\"hljs-string\">'C02'</span>],\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1220\">\n                      声明了<code data-backticks=\"1\" data-nodeid=\"1371\"\n                        >colors</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"1373\"\n                        >groups</code\n                      >两个常量，并传递给 postcss-theme-colors 插件。<strong\n                        data-nodeid=\"1380\"\n                        >其中</strong\n                      ><code data-backticks=\"1\" data-nodeid=\"1378\">groups</code\n                      >变量声明了色组的概念，比如 group1 命名为 G01，它对应了\n                      C01（日间色），C02（夜间色）两个色值。这样的好处显而易见。\n                    </p>\n                    <ul data-nodeid=\"1221\">\n                      <li data-nodeid=\"1222\">\n                        <p data-nodeid=\"1223\">\n                          我们将 postcss-theme-colors 插件和色值声明解藕，\n                          postcss-theme-colors 插件并不关系颜色，而是接受<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1382\"\n                            >colors</code\n                          >和<code data-backticks=\"1\" data-nodeid=\"1384\"\n                            >groups</code\n                          >变量。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1224\">\n                        <p data-nodeid=\"1225\">色值和色组解耦：</p>\n                        <ol data-nodeid=\"1226\">\n                          <li data-nodeid=\"1227\">\n                            <p data-nodeid=\"1228\">\n                              <code data-backticks=\"1\" data-nodeid=\"1387\"\n                                >colors</code\n                              >维护具体色值；\n                            </p>\n                          </li>\n                          <li data-nodeid=\"1229\">\n                            <p data-nodeid=\"1230\">\n                              <code data-backticks=\"1\" data-nodeid=\"1389\"\n                                >groups</code\n                              >维护具体色组。\n                            </p>\n                          </li>\n                        </ol>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1231\">\n                      这样一来，如前文一个超链接样式声明：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">a {\n</div></li><li><div class=\"code-word\">  color: cc(GBK05A);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1233\">\n                      如上代码，我们在业务开发中，直接声明了“使用 GBK05A\n                      这个色组”。<strong data-nodeid=\"1397\"\n                        >业务开发者不需要关心这个色组在 light/dark\n                        模式下分别对应哪些色值。而设计团队可以专门维护色组和色值，最终只提供给开发者色组即可</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1234\">\n                      在此基础上，我们完全可以抽象出一个色组 &amp;\n                      色值平台，方便设计团队更新内容。这个平台可以以 JSON 或者\n                      YML 任何形式存储色值色组对应关系，方便各个团队协作。\n                    </p>\n                    <p data-nodeid=\"1235\">\n                      在前文提到的主题切换设计架构图的基础上，我们扩充其为平台化的解决方案：\n                    </p>\n                    <p data-nodeid=\"1236\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/07/BE/CgpVE2AJHIOAU_CfAAIVxX-eQtQ102.png\"\n                        alt=\"Lark20210121-141643.png\"\n                        data-nodeid=\"1404\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"1237\">总结</h3>\n                    <p data-nodeid=\"1238\">\n                      这一讲我们没有聚焦具体 CSS\n                      样式的用法，而是从更高的角度，梳理了现代化前端基础建设当中的样式相关工程方案。并从“主题切换”这一话题，联动了\n                      PostCSS、Webpack，甚至前端状态管理流程。\n                    </p>\n                    <p data-nodeid=\"1415\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/07/C1/Cip5yGAJKOSASM3OAAatGP55avo761.png\"\n                        alt=\"Lark20210121-150848.png\"\n                        data-nodeid=\"1418\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"1240\" class=\"\">\n                      这里，我想给大家留几个思考问题，<a\n                        href=\"https://github.com/postcss/postcss-custom-properties\"\n                        data-nodeid=\"1413\"\n                        >postcss-custom-properties</a\n                      >\n                      有什么作用，它又是如何实现的？基于 CSS\n                      变量新特性，我们可以如何优化本讲中的 postcss-theme-colors\n                      插件？（答案已经在源代码中了。）\n                    </p>\n            "}