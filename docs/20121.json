{"title":"20 | 协作开发：模块化管理为什么能够提升研发效能？","context":"\n                    <p data-nodeid=\"2\">\n                      任何业务，都是从简单向复杂演进的。而在业务演进的过程中，技术是从单体向多模块、多服务演进的。技术的这种演进方式的核心目的是<strong\n                        data-nodeid=\"98\"\n                        >复用代码、提高效率</strong\n                      >，这一讲，我会为你介绍 Go\n                      语言是如何通过模块化的管理，提升开发效率的。\n                    </p>\n                    <h3 data-nodeid=\"3\">Go 语言中的包</h3>\n                    <h4 data-nodeid=\"4\">什么是包</h4>\n                    <p data-nodeid=\"5\">\n                      在业务非常简单的时候，你甚至可以把代码写到一个 Go\n                      文件中。但随着业务逐渐复杂，你会发现，如果代码都放在一个\n                      Go\n                      文件中，会变得难以维护，这时候你就需要抽取代码，把相同业务的代码放在一个目录中。在\n                      Go 语言中，这个目录叫作包。\n                    </p>\n                    <p data-nodeid=\"6\">\n                      在 Go 语言中，一个包是通过<strong data-nodeid=\"111\"\n                        >package 关键字定义</strong\n                      >的，最常见的就是<strong data-nodeid=\"112\">main 包</strong\n                      >，它的定义如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8\">\n                      此外，前面章节演示示例经常使用到的 fmt 包，也是通过\n                      package 关键字声明的。\n                    </p>\n                    <p data-nodeid=\"9\">\n                      一个包就是一个<strong data-nodeid=\"127\">独立的空间</strong\n                      >，你可以在这个包里<strong data-nodeid=\"128\"\n                        >定义函数</strong\n                      >、<strong data-nodeid=\"129\">结构体</strong\n                      >等。这时，我们认为这些函数、结构体是属于这个包的。\n                    </p>\n                    <h4 data-nodeid=\"10\">使用包</h4>\n                    <p data-nodeid=\"11\">\n                      如果你想使用一个包里的函数或者结构体，就需要先<strong\n                        data-nodeid=\"136\"\n                        >导入这个包</strong\n                      >，才能使用，比如常用的 fmt包，代码示例如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"先导入fmt包，才能使用\"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13\">\n                      要导入一个包，需要使用 import\n                      关键字；如果需要同时导入多个包，则可以使用小括号，示例代码如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> (\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"os\"</span>\n</div></li><li><div class=\"code-word\">)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"15\">\n                      从以上示例可以看到，该示例导入了 fmt 和 os\n                      这两个包，使用了小括号，每一行写了一个要导入的包。\n                    </p>\n                    <h4 data-nodeid=\"16\">作用域</h4>\n                    <p data-nodeid=\"17\">\n                      讲到了包之间的导入和使用，就不得不提作用域这个概念，因为只有满足作用域的函数才可以被调用。\n                    </p>\n                    <ul data-nodeid=\"18\">\n                      <li data-nodeid=\"19\">\n                        <p data-nodeid=\"20\">\n                          在<strong data-nodeid=\"146\">Java 语言</strong>中，通过\n                          public、private 这些修饰符修饰一个类的作用域；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21\">\n                        <p data-nodeid=\"22\">\n                          但是在<strong data-nodeid=\"152\">Go 语言</strong\n                          >中，并没有这样的作用域修饰符，它是通过首字母是否大写来区分的，这同时也体现了\n                          Go 语言的简洁。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"23\">\n                      如上述示例中 fmt 包中的<strong data-nodeid=\"158\"\n                        >Println 函数</strong\n                      >：\n                    </p>\n                    <ul data-nodeid=\"24\">\n                      <li data-nodeid=\"25\">\n                        <p data-nodeid=\"26\">\n                          它的首字母就是大写的 P，所以该函数才可以在 main\n                          包中使用；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27\">\n                        <p data-nodeid=\"28\">\n                          如果 Println 函数的首字母是小写的 p，那么它只能在 fmt\n                          包中被使用，不能跨包使用。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"29\">这里我为你总结下 Go 语言的作用域：</p>\n                    <ul data-nodeid=\"30\">\n                      <li data-nodeid=\"31\">\n                        <p data-nodeid=\"32\">\n                          Go\n                          语言中，所有的定义，比如函数、变量、结构体等，如果首字母是大写，那么就可以被其他包使用；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"33\">\n                        <p data-nodeid=\"34\">\n                          反之，如果首字母是小写的，就只能在同一个包内使用。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"35\">自定义包</h4>\n                    <p data-nodeid=\"36\">\n                      你也可以自定义自己的包，通过包的方式把相同业务、相同职责的代码放在一起。比如你有一个\n                      util 包，用于存放一些常用的工具函数，项目结构如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">ch20\n</div></li><li><div class=\"code-word\">├── main.go\n</div></li><li><div class=\"code-word\">└── util\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; └── string.go\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"38\">\n                      在 Go\n                      语言中，一个包对应一个文件夹，上面的项目结构示例也验证了这一点。在这个示例中，有一个\n                      util 文件夹，它里面有一个 string.go 文件，这个 Go\n                      语言文件就属于 util 包，它的包定义如下所示：\n                    </p>\n                    <p data-nodeid=\"39\">\n                      <em data-nodeid=\"170\">ch20/util/string.go</em>\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> util\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"41\">\n                      可以看到，Go 语言中的包是代码的一种<strong\n                        data-nodeid=\"176\"\n                        >组织形式</strong\n                      >，通过包把相同业务或者相同职责的代码放在一起。通过包对代码进行归类，便于代码维护以及被其他包调用，提高团队协作效率。\n                    </p>\n                    <h4 data-nodeid=\"42\">init 函数</h4>\n                    <p data-nodeid=\"43\">\n                      除了 main 这个特殊的函数外，Go\n                      语言还有一个特殊的函数——init，通过它可以<strong\n                        data-nodeid=\"183\"\n                        >实现包级别的一些初始化操作</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"44\">\n                      init 函数没有返回值，也没有参数，它<strong\n                        data-nodeid=\"189\"\n                        >先于 main 函数执行</strong\n                      >，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"init in main.go \"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46\">\n                      一个包中可以有多个 init\n                      函数，但是它们的执行顺序并不确定，所以如果你定义了多个\n                      init 函数的话，要确保它们是<strong data-nodeid=\"199\"\n                        >相互独立</strong\n                      >的，一定<strong data-nodeid=\"200\"\n                        >不要有顺序上的依赖</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"47\">\n                      那么 init 函数作用是什么呢?\n                      其实就是在导入一个包时，可以对这个包做一些必要的初始化操作，比如数据库连接和一些数据的检查，确保我们可以正确地使用这个包。\n                    </p>\n                    <h3 data-nodeid=\"48\">Go 语言中的模块</h3>\n                    <p data-nodeid=\"49\">\n                      如果包是比较低级的代码组织形式的话，那么模块就是更高级别的，在\n                      Go\n                      语言中，一个模块可以包含很多个包，所以模块是相关的包的集合。\n                    </p>\n                    <p data-nodeid=\"50\">在 Go 语言中：</p>\n                    <ul data-nodeid=\"51\">\n                      <li data-nodeid=\"52\">\n                        <p data-nodeid=\"53\">\n                          一个模块通常是<strong data-nodeid=\"210\"\n                            >一个项目</strong\n                          >，比如这个专栏实例中使用的 gotour 项目；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"54\">\n                        <p data-nodeid=\"55\">\n                          也可以是<strong data-nodeid=\"216\">一个框</strong\n                          >架，比如常用的 Web 框架 gin。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"56\">go mod</h4>\n                    <p data-nodeid=\"57\">\n                      Go 语言为我们提供了 go mod\n                      命令来创建一个模块（项目），比如要创建一个 gotour\n                      模块，你可以通过如下命令实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">➜ go mod init gotour\n</div></li><li><div class=\"code-word\">go: creating new go.mod: module gotour\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"59\">\n                      运行这一命令后，你会看到已经创建好一个名字为 gotour\n                      的文件夹，里面有一个 go.mod 文件，它里面的内容如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span> gotour\n</div></li><li><div class=\"code-word\">go <span class=\"hljs-number\">1.15</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"61\">\n                      <li data-nodeid=\"62\">\n                        <p data-nodeid=\"63\">\n                          第一句是该项目的<strong data-nodeid=\"225\"\n                            >模块名</strong\n                          >，也就是 gotour；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"64\">\n                        <p data-nodeid=\"65\">\n                          第二句表示要编译该模块至少需要<strong\n                            data-nodeid=\"231\"\n                            >Go 1.15 版本的 SDK</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <blockquote data-nodeid=\"66\">\n                      <p data-nodeid=\"67\">\n                        小提示：模块名最好是以自己的域名开头，比如\n                        flysnow.org/gotour，这样就可以很大程度上保证模块名的唯一，不至于和其他模块重名。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"68\">使用第三方模块</h4>\n                    <p data-nodeid=\"1417\" class=\"te-preview-highlight\">\n                      模块化为什么可以提高开发效率？最重要的原因就是<strong\n                        data-nodeid=\"1427\"\n                        >复用了现有的模块</strong\n                      >，Go\n                      语言也不例外。比如你可以把项目中的公共代码抽取为一个模块，这样就可以供其他项目使用，不用再重复开发；同理，在\n                      Github 上也有很多开源的 Go\n                      语言项目，它们都是一个个独立的模块，也可以被我们直接使用，提高我们的开发效率，比如\n                      Web 框架\n                      <a\n                        href=\"https://github.com/gin-gonic/gin\"\n                        data-nodeid=\"1425\"\n                        >gin-gonic/gin</a\n                      >。\n                    </p>\n\n                    <p data-nodeid=\"70\">\n                      众所周知，在使用第三方模块之前，需要先设置下 Go\n                      代理，也就是 GOPROXY，这样我们就可以获取到第三方模块了。\n                    </p>\n                    <p data-nodeid=\"71\">\n                      在这里我推荐 goproxy.io\n                      这个代理，非常好用，速度也很快。要使用这个代理，需要进行如下代码设置：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">go env -w GO111MODULE=on\n</div></li><li><div class=\"code-word\">go env -w GOPROXY=https://goproxy.io,direct\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"73\">\n                      打开终端，输入这一命令回车即可设置成功。\n                    </p>\n                    <p data-nodeid=\"74\">\n                      在实际的项目开发中，除了第三方模块外，还有我们<strong\n                        data-nodeid=\"252\"\n                        >自己开发的模块</strong\n                      >，放在了公司的 GitLab上，这时候就要把公司 Git\n                      代码库的域名排除在 Go PROXY 之外，为此 Go\n                      语言提供了GOPRIVATE\n                      这个环境变量帮助我们达到目的。通过如下命令即可设置\n                      GOPRIVATE：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 设置不走 proxy 的私有仓库，多个用逗号相隔（可选）</span>\n</div></li><li><div class=\"code-word\">go env -w GOPRIVATE=*.corp.example.com\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"76\">\n                      以上域名只是一个示例，实际使用时你要改成自己<strong\n                        data-nodeid=\"258\"\n                        >公司私有仓库的域名</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"77\">\n                      一切都准备好就可以使用第三方的模块了，假设我们要使用 Gin\n                      这个 Web 框架，首先需要安装它，通过如下命令即可安装 Gin\n                      这个 Web 框架:\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">go get -u github.com/gin-gonic/gin\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"79\">\n                      安装成功后，就可以像 Go 语言的标准包一样，通过 import\n                      命令导入你的代码中使用它，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> (\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"github.com/gin-gonic/gin\"</span>\n</div></li><li><div class=\"code-word\">)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   fmt.Println(<span class=\"hljs-string\">\"先导入fmt包，才能使用\"</span>)\n</div></li><li><div class=\"code-word\">   r := gin.Default()\n</div></li><li><div class=\"code-word\">   r.Run()\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"81\">\n                      以上代码现在还<strong data-nodeid=\"266\"\n                        >无法编译通过</strong\n                      >，因为还没有同步 Gin\n                      这个模块的依赖，也就是没有把它添加到go.mod\n                      文件中。通过如下命令可以添加缺失的模块：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">go mod tidy\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"83\">\n                      运行这一命令，就可以把缺失的模块添加进来，同时它也可以移除不再需要的模块。这时你再查看\n                      go.mod 文件，会发现内容已经变成了这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span> gotour\n</div></li><li><div class=\"code-word\">go <span class=\"hljs-number\">1.15</span>\n</div></li><li><div class=\"code-word\">require (\n</div></li><li><div class=\"code-word\">   github.com/gin-gonic/gin v1<span class=\"hljs-number\">.6</span><span class=\"hljs-number\">.3</span>\n</div></li><li><div class=\"code-word\">   github.com/golang/protobuf v1<span class=\"hljs-number\">.4</span><span class=\"hljs-number\">.2</span> <span class=\"hljs-comment\">// indirect</span>\n</div></li><li><div class=\"code-word\">   github.com/google/go-cmp v0<span class=\"hljs-number\">.5</span><span class=\"hljs-number\">.2</span> <span class=\"hljs-comment\">// indirect</span>\n</div></li><li><div class=\"code-word\">   github.com/kr/text v0<span class=\"hljs-number\">.2</span><span class=\"hljs-number\">.0</span> <span class=\"hljs-comment\">// indirect</span>\n</div></li><li><div class=\"code-word\">   github.com/modern-go/concurrent v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>-<span class=\"hljs-number\">20180306012644</span>-bacd9c7ef1dd <span class=\"hljs-comment\">// indirect</span>\n</div></li><li><div class=\"code-word\">   github.com/modern-go/reflect2 v1<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> <span class=\"hljs-comment\">// indirect</span>\n</div></li><li><div class=\"code-word\">   github.com/niemeyer/pretty v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>-<span class=\"hljs-number\">20200227124842</span>-a10e7caefd8e <span class=\"hljs-comment\">// indirect</span>\n</div></li><li><div class=\"code-word\">   github.com/stretchr/testify v1<span class=\"hljs-number\">.6</span><span class=\"hljs-number\">.1</span> <span class=\"hljs-comment\">// indirect</span>\n</div></li><li><div class=\"code-word\">   golang.org/x/sys v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>-<span class=\"hljs-number\">20201009025420</span>-dfb3f7c4e634 <span class=\"hljs-comment\">// indirect</span>\n</div></li><li><div class=\"code-word\">   golang.org/x/xerrors v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>-<span class=\"hljs-number\">20200804184101</span>-<span class=\"hljs-number\">5</span>ec99f83aff1 <span class=\"hljs-comment\">// indirect</span>\n</div></li><li><div class=\"code-word\">   gopkg.in/check.v1 v1<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>-<span class=\"hljs-number\">20200227125254</span>-<span class=\"hljs-number\">8f</span>a46927fb4f <span class=\"hljs-comment\">// indirect</span>\n</div></li><li><div class=\"code-word\">   gopkg.in/yaml.v2 v2<span class=\"hljs-number\">.3</span><span class=\"hljs-number\">.0</span> <span class=\"hljs-comment\">// indirect</span>\n</div></li><li><div class=\"code-word\">)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"85\">\n                      所以我们不用手动去修改 go.mod 文件，通过 Go\n                      语言的工具链比如 go mod tidy\n                      命令，就可以帮助我们自动地维护、自动地添加或者修改 go.mod\n                      的内容。\n                    </p>\n                    <h3 data-nodeid=\"86\">总结</h3>\n                    <p data-nodeid=\"87\">\n                      在 Go\n                      语言中，包是同一目录中，编译在一起的源文件的集合。包里面含有函数、类型、变量和常量，不同包之间的调用，必须要首字母大写才可以。\n                    </p>\n                    <p data-nodeid=\"88\">\n                      而模块又是相关的包的集合，它里面包含了很多为了实现该模块的包，并且还可以通过模块的方式，把已经完成的模块提供给其他项目（模块）使用，达到了代码复用、研发效率提高的目的。\n                    </p>\n                    <p data-nodeid=\"89\">\n                      所以对于你的项目（模块）来说，它具有<strong\n                        data-nodeid=\"277\"\n                        >模块 ➡ 包 ➡ 函数类型</strong\n                      >这样三层结构，同一个模块中，可以通过包组织代码，达到代码复用的目的；在不同模块中，就需要通过模块的引入，达到这个目的。\n                    </p>\n                    <p data-nodeid=\"90\">\n                      编程界有个谚语：不要重复<strong data-nodeid=\"283\"\n                        >造轮子</strong\n                      >，使用现成的轮子，可以提高开发效率，降低 Bug 率。Go\n                      语言提供的模块、包这些能力，就可以很好地让我们使用现有的轮子，在多人协作开发中，更好地提高工作效率。\n                    </p>\n                    <p data-nodeid=\"91\">\n                      最后，为你留个作业：基于模块化拆分你所做的项目，提取一些公共的模块，以供更多项目使用。相信这样你们的开发效率会大大提升的。\n                    </p>\n            "}