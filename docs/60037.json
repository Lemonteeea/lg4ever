{"title":"36 | 迭代器模式：如何实现遍历数据时的职责分离？","context":"\n                    <p data-nodeid=\"901\" class=\"\">\n                      迭代器模式是我们学习一个设计时很少用到的、但编码实现时却经常使用到的行为型设计模式。<strong\n                        data-nodeid=\"980\"\n                        >在绝大多数编程语言中，迭代器已经成为一个基础的类库，直接用来遍历集合对象</strong\n                      >。在平时开发中，我们更多的是<strong data-nodeid=\"981\"\n                        >直接使用</strong\n                      >它，很少会从零去实现一个迭代器。\n                    </p>\n                    <p data-nodeid=\"902\">\n                      不过，我们课程的宗旨就是要弄懂原理，更好地帮助你去灵活使用这些设计模式。所以，今天我会<strong\n                        data-nodeid=\"987\"\n                        >重点讲解迭代器的原理和实现</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"903\">话不多说，让我们开始今天的学习吧。</p>\n                    <h3 data-nodeid=\"904\">模式原理分析</h3>\n                    <p data-nodeid=\"905\">\n                      迭代器模式又叫游标（Cursor）模式，它的原始定义是：迭代器提供一种对容器对象中的各个元素进行访问的方法，而又不需要暴露该对象的内部细节。\n                    </p>\n                    <p data-nodeid=\"906\">\n                      可以看到，该定义很明确地指出，迭代器模式就是为了提供一种通用的访问对象的方式。我们先来看下它的\n                      UML 图：\n                    </p>\n                    <p data-nodeid=\"2043\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/4D/53/CioPOWDuXXeAVG88AAFTk5v0CXs343.jpg\"\n                        alt=\"【配图】36 迭代器模式.png\"\n                        data-nodeid=\"2047\"\n                      />\n                    </p>\n                    <div data-nodeid=\"2044\">\n                      <p style=\"text-align: center\">迭代器模式的 UML 图</p>\n                    </div>\n\n                    <p data-nodeid=\"909\">\n                      从该 UML 图中，我们能看出迭代器模式的四个关键角色。\n                    </p>\n                    <ul data-nodeid=\"910\">\n                      <li data-nodeid=\"911\">\n                        <p data-nodeid=\"912\">\n                          <strong data-nodeid=\"1000\"\n                            >抽象集合类（Aggregate）</strong\n                          >：创建和抽象迭代器类相关联的方法，同时可以添加其他集合类需要的方法。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"913\">\n                        <p data-nodeid=\"914\">\n                          <strong data-nodeid=\"1005\"\n                            >具体集合类（ConcreteAggregate）</strong\n                          >：实现抽象集合类声明的所有方法，在具体使用集合类时会创建对应具体的迭代器类。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"915\">\n                        <p data-nodeid=\"916\">\n                          <strong data-nodeid=\"1010\"\n                            >抽象迭代器类（Iterator）</strong\n                          >：定义统一的迭代器方法 hasNext() 和\n                          next()，用于判断当前集合中是否还有对象以及按顺序读取集合中的当前对象。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"917\">\n                        <p data-nodeid=\"918\">\n                          <strong data-nodeid=\"1015\"\n                            >具体迭代器类（ConcreteIterator）</strong\n                          >：实现了抽象迭代器类声明的方法，处理具体集合中对对象位置的偏移以及具体对象数据的传输。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"919\">该 UML 图对应的代码实现如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">public interface Iterator{\n</div></li><li><div class=\"code-word\">    Object next();\n</div></li><li><div class=\"code-word\">    boolean hasNext();\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">public class ConcreteIterator implements Iterator {\n</div></li><li><div class=\"code-word\">    private Object[] objects;\n</div></li><li><div class=\"code-word\">    private int position;\n</div></li><li><div class=\"code-word\">    public ConcreteIterator(Object[] objects) {\n</div></li><li><div class=\"code-word\">        this.objects = objects;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    @Override\n</div></li><li><div class=\"code-word\">    public Object next() {\n</div></li><li><div class=\"code-word\">        return objects[position++];\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    @Override\n</div></li><li><div class=\"code-word\">    public boolean hasNext() {\n</div></li><li><div class=\"code-word\">        if(position &gt;= objects.length) {\n</div></li><li><div class=\"code-word\">            return false;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        return true;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">public interface Aggregate {\n</div></li><li><div class=\"code-word\">    Iterator createIterator();\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">public class ConcreteAggregate implements Aggregate{\n</div></li><li><div class=\"code-word\">    private Object[] objects;\n</div></li><li><div class=\"code-word\">    public ConcreteAggregate(Object[] objects) {\n</div></li><li><div class=\"code-word\">        this.objects = objects;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    @Override\n</div></li><li><div class=\"code-word\">    public Iterator createIterator() {\n</div></li><li><div class=\"code-word\">        return new ConcreteIterator(objects);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">public class Demo {\n</div></li><li><div class=\"code-word\">    public static void main(String[] args) {\n</div></li><li><div class=\"code-word\">        Object[] objects = new Object[2];\n</div></li><li><div class=\"code-word\">        objects[0] = new Object();\n</div></li><li><div class=\"code-word\">        objects[1] = new Object();\n</div></li><li><div class=\"code-word\">        Aggregate aggregate = new ConcreteAggregate(objects);\n</div></li><li><div class=\"code-word\">        Iterator iterator = aggregate.createIterator();\n</div></li><li><div class=\"code-word\">        while(iterator.hasNext()) {\n</div></li><li><div class=\"code-word\">            Object currentObject = iterator.next();\n</div></li><li><div class=\"code-word\">            System.out.println(currentObject.toString());\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">//输出结果：\n</div></li><li><div class=\"code-word\">java.lang.Object@7ea987ac\n</div></li><li><div class=\"code-word\">java.lang.Object@12a3a380\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"921\">\n                      从最后的结果可以看出，我们通过实现迭代器模式最终打印了对象数组中的两个不同对象。从上面的代码实现也能看出，迭代器的实现原理非常简单，就是<strong\n                        data-nodeid=\"1022\"\n                        >通过为集合对象创建统一的迭代器 Iterator\n                        来统一对集合里的对象进行访问</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"922\">使用场景分析</h3>\n                    <p data-nodeid=\"923\">\n                      一般来讲，迭代器模式常见的使用场景有以下几种。\n                    </p>\n                    <ul data-nodeid=\"924\">\n                      <li data-nodeid=\"925\">\n                        <p data-nodeid=\"926\">\n                          <strong data-nodeid=\"1029\"\n                            >希望对客户端隐藏其遍历算法复杂性时</strong\n                          >。有时可能出于使用便利性或安全性的考虑，只想让客户端使用遍历某个集合的对象，而不告诉客户端具体的遍历算法。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"927\">\n                        <p data-nodeid=\"928\">\n                          <strong data-nodeid=\"1034\"\n                            >需要简化重复的循环遍历逻辑时</strong\n                          >。比如，读取数组里的数据，遍历二叉树等树形结构。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"929\">\n                      为了帮助你更好地理解迭代器模式，下面我们还是通过一个简单的例子来为你说明。我们先来创建<strong\n                        data-nodeid=\"1040\"\n                        >抽象迭代器</strong\n                      >\n                      IteratorIterator（这里为了和 Java 中的 Iterator\n                      接口区别开），声明为泛型接口，接收类型参数E，同时声明四个方法：reset()、next()、currentItem()\n                      和 hasNext()。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">public interface IteratorIterator&lt;E&gt; {\n</div></li><li><div class=\"code-word\">    void reset();       //重置为第一个元素\n</div></li><li><div class=\"code-word\">    E next();           //获取下一个元素\n</div></li><li><div class=\"code-word\">    E currentItem();    //检索当前元素\n</div></li><li><div class=\"code-word\">    boolean hasNext();  //判断是否还有下一个元素存在.\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"931\">\n                      接下来，我们再来定义<strong data-nodeid=\"1046\"\n                        >抽象集合</strong\n                      >\n                      ListList（同样为了和 Java 中的 List\n                      接口区别开），也声明为泛型接口，接收类型参数\n                      E，声明一个创建迭代器 IteratorIterator 的方法 iterator()。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">public interface ListList&lt;E&gt; {\n</div></li><li><div class=\"code-word\">    IteratorIterator&lt;E&gt; iterator();\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"933\">\n                      然后，我们构造一个对象 Topic，对象中只包含 name\n                      属性以及其构造函数和 get、set 方法。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">public class Topic {\n</div></li><li><div class=\"code-word\">    private String name;\n</div></li><li><div class=\"code-word\">    public Topic(String name) {\n</div></li><li><div class=\"code-word\">        super();\n</div></li><li><div class=\"code-word\">        this.name = name;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    public String getName() {\n</div></li><li><div class=\"code-word\">        return name;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    public void setName(String name) {\n</div></li><li><div class=\"code-word\">        this.name = name;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"935\">\n                      再接着实现一个<strong data-nodeid=\"1053\"\n                        >具体的迭代器类</strong\n                      >\n                      TopicIterator，其中包含属性为 Topic\n                      的数组和一个记录对象存储位置的对象 position。当我们执行\n                      next() 方法时，会获取当前记录位置的对象，至于 reset()\n                      则会重置对象在数组中的位置为 0，currentItem()\n                      方法则会返回当前位置下的对象，hasNext()\n                      则判断当前位置是否越界。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">public class TopicIterator implements IteratorIterator&lt;Topic&gt; {\n</div></li><li><div class=\"code-word\">    private Topic[] topics;\n</div></li><li><div class=\"code-word\">    private int position;\n</div></li><li><div class=\"code-word\">    public TopicIterator(Topic[] topics) {\n</div></li><li><div class=\"code-word\">        this.topics = topics;\n</div></li><li><div class=\"code-word\">        position = 0;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    @Override\n</div></li><li><div class=\"code-word\">    public void reset() {\n</div></li><li><div class=\"code-word\">        position = 0;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    @Override\n</div></li><li><div class=\"code-word\">    public Topic next() {\n</div></li><li><div class=\"code-word\">        return topics[position++];\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    @Override\n</div></li><li><div class=\"code-word\">    public Topic currentItem() {\n</div></li><li><div class=\"code-word\">        return topics[position];\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    @Override\n</div></li><li><div class=\"code-word\">    public boolean hasNext() {\n</div></li><li><div class=\"code-word\">        if(position &gt;= topics.length) {\n</div></li><li><div class=\"code-word\">            return false;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        return true;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"937\">\n                      同样，还需要实现一个<strong data-nodeid=\"1059\"\n                        >具体的集合类</strong\n                      >\n                      TopicList，该类中只实现一个创建迭代器的方法，返回对应具体迭代器的类方法。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">public class TopicList implements ListList&lt;Topic&gt;{\n</div></li><li><div class=\"code-word\">    private Topic[] topics;\n</div></li><li><div class=\"code-word\">    public TopicList(Topic[] topics)\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">        this.topics = topics;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    @Override\n</div></li><li><div class=\"code-word\">    public IteratorIterator&lt;Topic&gt; iterator() {\n</div></li><li><div class=\"code-word\">        return new TopicIterator(topics);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"939\">最后，我们再来运行一段单元测试：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">public class Client {\n</div></li><li><div class=\"code-word\">    public static void main(String[] args) {\n</div></li><li><div class=\"code-word\">        Topic[] topics = new Topic[5];\n</div></li><li><div class=\"code-word\">        topics[0] = new Topic(\"topic1\");\n</div></li><li><div class=\"code-word\">        topics[1] = new Topic(\"topic2\");\n</div></li><li><div class=\"code-word\">        topics[2] = new Topic(\"topic3\");\n</div></li><li><div class=\"code-word\">        topics[3] = new Topic(\"topic4\");\n</div></li><li><div class=\"code-word\">        topics[4] = new Topic(\"topic5\");\n</div></li><li><div class=\"code-word\">        ListList&lt;Topic&gt; list = new TopicList(topics);\n</div></li><li><div class=\"code-word\">        IteratorIterator&lt;Topic&gt; iterator = list.iterator();\n</div></li><li><div class=\"code-word\">        while(iterator.hasNext()) {\n</div></li><li><div class=\"code-word\">            Topic currentTopic = iterator.next();\n</div></li><li><div class=\"code-word\">            System.out.println(currentTopic.getName());\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">//输出结果\n</div></li><li><div class=\"code-word\">topic1\n</div></li><li><div class=\"code-word\">topic2\n</div></li><li><div class=\"code-word\">topic3\n</div></li><li><div class=\"code-word\">topic4\n</div></li><li><div class=\"code-word\">topic5\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"941\">\n                      上面的代码实现非常简单，如果你对 Java 非常熟悉的话，就能在\n                      JDK 的类库中找到 List 的源码实现。\n                    </p>\n                    <p data-nodeid=\"942\">\n                      正是因为迭代器模式的使用场景非常明确，所以在实际的开发中，它的应用非常广泛，几乎所有涉及集合的遍历时都会使用到迭代器模式。\n                    </p>\n                    <h3 data-nodeid=\"943\">为什么使用迭代器模式？</h3>\n                    <p data-nodeid=\"944\">\n                      分析完迭代器模式的原理和使用场景后，我们再来说说使用迭代器模式的原因，可总结为以下两个。\n                    </p>\n                    <p data-nodeid=\"945\">\n                      <strong data-nodeid=\"1069\"\n                        >第一个，减少程序中重复的遍历代码</strong\n                      >。我们都知道，对于放入一个集合容器中的多个对象来说，访问必然涉及遍历算法。如果我们不将遍历算法封装到容器里（比如，List、Set、Map\n                      等），那么就需要使用容器的人自行去实现遍历算法，这样容易造成很多重复的循环和条件判断语句出现，不利于代码的复用和扩展，同时还会暴露不同容器的内部结构。而使用迭代器模式是将遍历算法作为容器对象自身的一种“属性方法”来使用，能够有效地避免写很多重复的代码，同时又不会暴露内部结构。\n                    </p>\n                    <p data-nodeid=\"946\">\n                      <strong data-nodeid=\"1074\"\n                        >第二个，为了隐藏统一遍历集合的方法逻辑</strong\n                      >。迭代器模式把对不同集合类的访问逻辑抽象出来，这样在不用暴露集合内部结构的情况下，可以隐藏不同集合遍历需要使用的算法，同时还能够对外提供更为简便的访问算法接口。\n                    </p>\n                    <h3 data-nodeid=\"947\">收益什么？损失什么？</h3>\n                    <p data-nodeid=\"948\">\n                      通过上述分析，我们也可以总结出使用迭代器模式有以下优点。\n                    </p>\n                    <ul data-nodeid=\"949\">\n                      <li data-nodeid=\"950\">\n                        <p data-nodeid=\"951\">\n                          <strong data-nodeid=\"1081\">满足单一职责原则</strong\n                          >。由于迭代器模式是将遍历算法代码统一抽取封装为独立的类，这个类的职责便只有一个——遍历查询所有数据，所以这很符合单一职责原则。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"952\">\n                        <p data-nodeid=\"953\">\n                          <strong data-nodeid=\"1086\">满足开闭原则</strong\n                          >。当需要对新的对象集合进行扩展时，只需要新增具体的对象迭代器和具体的集合类便能方便地进行扩展。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"954\">\n                        <p data-nodeid=\"955\">\n                          <strong data-nodeid=\"1091\"\n                            >可以并行遍历同一集合</strong\n                          >。因为每个对象都有自身的遍历器对象，那么可以同时使用这个遍历器来进行遍历，而无须等待。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"956\">\n                        <p data-nodeid=\"957\">\n                          <strong data-nodeid=\"1096\"\n                            >可以减少直接使用 for 循环的重复代码问题</strong\n                          >。直接使用 for\n                          循环的缺点在于必须事先知道集合的数据结构，而一旦我们需要更换一种对象集合的话，则可能需要实现相同的循环逻辑。同时，代码会因此变成了一种硬编码形式，每次都需要修改代码才能进行新的结构的遍历。而使用迭代器模式则可以很好地来避免这个问题。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"958\">同样，迭代器模式也有一些缺点。</p>\n                    <ul data-nodeid=\"959\">\n                      <li data-nodeid=\"960\">\n                        <p data-nodeid=\"961\">\n                          <strong data-nodeid=\"1102\">增加子类数量</strong\n                          >。当新增某种集合类型的迭代器时，还得新增对应类型的迭代器和集合对象，这会增加很多不同的子类。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"962\">\n                        <p data-nodeid=\"963\">\n                          <strong data-nodeid=\"1107\">增加系统复杂性</strong\n                          >。由于分离了更为抽象的遍历算法逻辑，所以对于那些不了解设计模式的维护者来说，相当于变相地增加新的复杂性。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"964\">总结</h3>\n                    <p data-nodeid=\"965\">\n                      迭代器模式的实现原理非常简单，<strong data-nodeid=\"1114\"\n                        >关键思想是将访问和遍历的职责从集合对象中分离出来，放入标准的协议对象中</strong\n                      >。这样既能对客户端隐藏复杂结构的遍历访问方式，也能提供减少重复遍历的代码实现。\n                    </p>\n                    <p data-nodeid=\"966\">\n                      现在几乎所有编程语言都会实现迭代器模式，主要被实现为<strong\n                        data-nodeid=\"1120\"\n                        >类库</strong\n                      >来使用，可以说使用非常普遍。其实，除了编程语言之外，很多组件也有应用，比如\n                      Redis 中的 rehash() 操作，就是迭代器模式的体现，而且 Redis\n                      更进一步地还区分了安全迭代器和非安全迭代器。\n                    </p>\n                    <p data-nodeid=\"967\">\n                      所以说，在遇见需要使用迭代器模式的场景时，你就可以回想一下今天学习的迭代器模式的基本原理，然后“依葫芦画瓢”来构建自己的迭代器，而不只是会熟练使用已有的迭代器。\n                    </p>\n                    <h3 data-nodeid=\"968\">课后思考</h3>\n                    <p data-nodeid=\"969\">\n                      在 Java 中，为什么直接使用 for\n                      迭代器的同时进行集合中的元素删除会出现异常报错？你觉得该如何来解决这个问题呢？欢迎你在留言区与我分享你的想法和答案。\n                    </p>\n                    <p data-nodeid=\"970\" class=\"\">\n                      在下一讲，我会接着与你分享“解释器模式与实现一个自定义配置规则功能”的相关内容，记得按时来听课！\n                    </p>\n            "}