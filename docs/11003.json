{"title":"第02讲：如何高效操作 DOM 元素？","context":"\n                    <p data-nodeid=\"2692\" class=\"\">\n                      本课时我们主要介绍高效操作 DOM 元素相关的内容。\n                    </p>\n                    <h3 data-nodeid=\"2693\">什么是 DOM</h3>\n                    <p data-nodeid=\"2694\">\n                      DOM（Document Object Model，文档对象模型）是 JavaScript\n                      操作 HTML 的接口（这里只讨论属于前端范畴的 HTML\n                      DOM），属于前端的入门知识，同样也是核心内容，因为大部分前端功能都需要借助\n                      DOM 来实现，比如：\n                    </p>\n                    <ul data-nodeid=\"2695\">\n                      <li data-nodeid=\"2696\">\n                        <p data-nodeid=\"2697\">动态渲染列表、表格表单数据；</p>\n                      </li>\n                      <li data-nodeid=\"2698\">\n                        <p data-nodeid=\"2699\">监听点击、提交事件；</p>\n                      </li>\n                      <li data-nodeid=\"2700\">\n                        <p data-nodeid=\"2701\">懒加载一些脚本或样式文件；</p>\n                      </li>\n                      <li data-nodeid=\"2702\">\n                        <p data-nodeid=\"2703\">\n                          实现动态展开树组件，表单组件级联等这类复杂的操作。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2704\">\n                      如果你查看过\n                      <a href=\"https://dom.spec.whatwg.org/\" data-nodeid=\"2812\"\n                        >DOM V3 标准</a\n                      >，会发现包含多个内容，但归纳起来常用的主要由 3\n                      个部分组成：\n                    </p>\n                    <ul data-nodeid=\"2705\">\n                      <li data-nodeid=\"2706\">\n                        <p data-nodeid=\"2707\">DOM 节点</p>\n                      </li>\n                      <li data-nodeid=\"2708\">\n                        <p data-nodeid=\"2709\">DOM 事件</p>\n                      </li>\n                      <li data-nodeid=\"2710\">\n                        <p data-nodeid=\"2711\">选择区域</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2712\">\n                      <strong data-nodeid=\"2829\">选择区域</strong\n                      >的使用场景有限，一般用于富文本编辑类业务，我们不做深入讨论；<strong\n                        data-nodeid=\"2830\"\n                        >DOM 事件</strong\n                      >有一定的关联性，将在下一课时中详细讨论；对于\n                      <strong data-nodeid=\"2831\">DOM 节点</strong\n                      >，需与另外两个概念标签和元素进行区分：\n                    </p>\n                    <ul data-nodeid=\"2713\">\n                      <li data-nodeid=\"2714\">\n                        <p data-nodeid=\"2715\">\n                          标签是 HTML 的基本单位，比如 p、div、input；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2716\">\n                        <p data-nodeid=\"2717\">\n                          节点是 DOM\n                          树的基本单位，有多种类型，比如注释节点、文本节点；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2718\">\n                        <p data-nodeid=\"2719\">\n                          元素是节点中的一种，与 HTML 标签相对应，比如 p\n                          标签会对应 p 元素。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2720\">\n                      举例说明，在下面的代码中，“p” 是标签， 生成 DOM\n                      树的时候会产生两个节点，一个是元素节点\n                      p，另一个是字符串为“亚里士朱德”的文本节点。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"html\"><ol><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>亚里士朱德<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"2722\">会框架更要会 DOM</h3>\n                    <p data-nodeid=\"2723\">\n                      有的前端工程师因为平常使用 Vue、React\n                      这些框架比较多，觉得直接操作 DOM\n                      的情况比较少，认为熟悉框架就行，不需要详细了解\n                      DOM。这个观点对于初级工程师而言确实如此，能用框架写页面就算合格。\n                    </p>\n                    <p data-nodeid=\"2724\">\n                      但对于屏幕前想成为高级/资深前端工程师的你而言，只会使用某个框架或者能答出\n                      DOM\n                      相关面试题，这些肯定是不够的。恰恰相反，作为高级/资深前端工程师，不仅应该对\n                      DOM\n                      有深入的理解，还应该能够借此开发框架插件、修改框架甚至能写出自己的框架。\n                    </p>\n                    <p data-nodeid=\"2725\">\n                      因此，这一课时我们就深入了解 DOM，谈谈如何高效地操作 DOM。\n                    </p>\n                    <h3 data-nodeid=\"2726\">为什么说 DOM 操作耗时</h3>\n                    <p data-nodeid=\"2727\">\n                      要解释 DOM 操作带来的性能问题，我们不得不提一下<strong\n                        data-nodeid=\"2846\"\n                        >浏览器的工作机制</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"2728\">线程切换</h4>\n                    <p data-nodeid=\"2729\">\n                      如果你对浏览器结构有一定了解，就会知道浏览器包含渲染引擎（也称浏览器内核）和\n                      JavaScript\n                      引擎，它们都是单线程运行。单线程的优势是开发方便，避免多线程下的死锁、竞争等问题，劣势是失去了并发能力。\n                    </p>\n                    <p data-nodeid=\"2730\">\n                      浏览器为了避免两个引擎同时修改页面而造成渲染结果不一致的情况，增加了另外一个机制，这两个引擎具有互斥性，也就是说在某个时刻只有一个引擎在运行，另一个引擎会被阻塞。操作系统在进行线程切换的时候需要保存上一个线程执行时的状态信息并读取下一个线程的状态信息，俗称<strong\n                        data-nodeid=\"2854\"\n                        >上下文切换</strong\n                      >。而这个操作相对而言是比较耗时的。\n                    </p>\n                    <p data-nodeid=\"4421\" class=\"\">\n                      每次 DOM 操作就会引发线程的上下文切换——从 JavaScript\n                      引擎切换到渲染引擎执行对应操作，然后再切换回 JavaScript\n                      引擎继续执行，这就带来了<strong data-nodeid=\"4427\"\n                        >性能损耗</strong\n                      >。单次切换消耗的时间是非常少的，但是如果频繁地大量切换，那么就会产生性能问题。\n                    </p>\n\n                    <p data-nodeid=\"2732\">\n                      比如下面的测试代码，循环读取一百万次 DOM 中的 body\n                      元素的耗时是读取 JSON 对象耗时的 10 倍。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 测试次数：一百万次</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> times = <span class=\"hljs-number\">1000000</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 缓存body元素</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">'object'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> body = <span class=\"hljs-built_in\">document</span>.body\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 循环赋值对象作为对照参考</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;times;i++) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> tmp = body\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">'object'</span>)<span class=\"hljs-comment\">// object: 1.77197265625ms</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">'dom'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 循环读取body元素引发线程切换</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;times;i++) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> tmp = <span class=\"hljs-built_in\">document</span>.body\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">'dom'</span>)<span class=\"hljs-comment\">// dom: 18.302001953125ms</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2734\">\n                      虽然这个例子比较极端，循环次数有些夸张，但如果在循环中包含一些复杂的逻辑或者说涉及到多个元素时，就会造成不可忽视的性能损耗。\n                    </p>\n                    <h4 data-nodeid=\"2735\">重新渲染</h4>\n                    <p data-nodeid=\"2736\">\n                      另一个更加耗时的因素是元素及样式变化引起的再次渲染，在渲染过程中最耗时的两个步骤为<strong\n                        data-nodeid=\"2873\"\n                        >重排</strong\n                      >（Reflow）与<strong data-nodeid=\"2874\">重绘</strong\n                      >（Repaint）。\n                    </p>\n                    <p data-nodeid=\"2737\">\n                      浏览器在渲染页面时会将 HTML 和 CSS 分别解析成 DOM 树和\n                      CSSOM\n                      树，然后合并进行排布，再绘制成我们可见的页面。如果在操作\n                      DOM\n                      时涉及到元素、样式的修改，就会引起渲染引擎重新计算样式生成\n                      CSSOM\n                      树，同时还有可能触发对元素的重新排布（简称“重排”）和重新绘制（简称“重绘”）。\n                    </p>\n                    <p data-nodeid=\"2738\">\n                      可能会影响到其他元素排布的操作就会引起重排，继而引发重绘，比如：\n                    </p>\n                    <ul data-nodeid=\"2739\">\n                      <li data-nodeid=\"2740\">\n                        <p data-nodeid=\"2741\">修改元素边距、大小</p>\n                      </li>\n                      <li data-nodeid=\"2742\">\n                        <p data-nodeid=\"2743\">添加、删除元素</p>\n                      </li>\n                      <li data-nodeid=\"2744\">\n                        <p data-nodeid=\"2745\">改变窗口大小</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2746\">\n                      与之相反的操作则只会引起重绘，比如：\n                    </p>\n                    <ul data-nodeid=\"2747\">\n                      <li data-nodeid=\"2748\">\n                        <p data-nodeid=\"2749\">设置背景图片</p>\n                      </li>\n                      <li data-nodeid=\"2750\">\n                        <p data-nodeid=\"2751\">修改字体颜色</p>\n                      </li>\n                      <li data-nodeid=\"2752\">\n                        <p data-nodeid=\"2753\">改变 visibility 属性值</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2754\">\n                      如果想了解更多关于重绘和重排的样式属性，可以参看这个网址：<a\n                        href=\"https://csstriggers.com/\"\n                        data-nodeid=\"2887\"\n                        >https://csstriggers.com/</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"2755\">\n                      下面是两段验证代码，我们通过 Chrome\n                      提供的性能分析工具来对渲染耗时进行分析。\n                    </p>\n                    <p data-nodeid=\"2756\">\n                      第一段代码，通过修改 div\n                      元素的边距来触发重排，渲染耗时（粗略地认为渲染耗时为紫色\n                      Rendering 事件和绿色 Painting 事件耗时之和）3045 毫秒。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> times = <span class=\"hljs-number\">100000</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> html = <span class=\"hljs-string\">''</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;times;i++) {\n</div></li><li><div class=\"code-word\">  html+= <span class=\"hljs-string\">\\`&lt;div&gt;<span class=\"hljs-subst\">${i}</span>&lt;/div&gt;\\`</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">document</span>.body.innerHTML += html\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> divs = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'div'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Array</span>.prototype.forEach.call(divs, <span class=\"hljs-function\">(<span class=\"hljs-params\">div, i</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">  div.style.margin = i % <span class=\"hljs-number\">2</span> ? <span class=\"hljs-string\">'10px'</span> : <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2758\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/09/03/CgqCHl67pcyAWvv3AAApkJ2_V24631.png\"\n                        alt=\"image.png\"\n                        data-nodeid=\"2893\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2759\">\n                      第二段代码，修改 div 元素字体颜色来触发重绘，得到渲染耗时\n                      2359 ms。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> times = <span class=\"hljs-number\">100000</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> html = <span class=\"hljs-string\">''</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;times;i++) {\n</div></li><li><div class=\"code-word\">  html+= <span class=\"hljs-string\">\\`&lt;div&gt;<span class=\"hljs-subst\">${i}</span>&lt;/div&gt;\\`</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">document</span>.body.innerHTML += html\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> divs = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'div'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Array</span>.prototype.forEach.call(divs, <span class=\"hljs-function\">(<span class=\"hljs-params\">div, i</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">  div.style.color = i % <span class=\"hljs-number\">2</span> ? <span class=\"hljs-string\">'red'</span> : <span class=\"hljs-string\">'green'</span>;\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2761\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pdqAS3FFAAAmGZWHWDs688.png\"\n                        alt=\"image (1).png\"\n                        data-nodeid=\"2897\"\n                      />\n                    </p>\n                    <p data-nodeid=\"10342\" class=\"\">\n                      从两段测试代码中可以看出，重排渲染耗时明显高于重绘，同时两者的\n                      Painting 事件耗时接近，也印证了重排会导致重绘。\n                    </p>\n\n                    <h3 data-nodeid=\"2763\">如何高效操作 DOM</h3>\n                    <p data-nodeid=\"2764\">\n                      明白了 DOM\n                      操作耗时之处后，要提升性能就变得很简单了，反其道而行之，减少这些操作即可。\n                    </p>\n                    <h4 data-nodeid=\"2765\">在循环外操作元素</h4>\n                    <p data-nodeid=\"2766\">\n                      比如下面两段测试代码对比了读取 1000 次 JSON 对象以及访问\n                      1000 次 body 元素的耗时差异，相差一个数量级。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> times = <span class=\"hljs-number\">10000</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">'switch'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">document</span>.body === <span class=\"hljs-number\">1</span> ? <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>) : <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">'switch'</span>) <span class=\"hljs-comment\">// 1.873046875ms</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> body = <span class=\"hljs-built_in\">JSON</span>.stringify(<span class=\"hljs-built_in\">document</span>.body)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">'batch'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++) {\n</div></li><li><div class=\"code-word\">  body === <span class=\"hljs-number\">1</span> ? <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>) : <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">'batch'</span>) <span class=\"hljs-comment\">// 0.846923828125ms</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13784\" class=\"te-preview-highlight\">\n                      当然即使在循环外也要尽量减少操作元素，因为不知道他人调用你的代码时是否处于循环中。\n                    </p>\n\n                    <h4 data-nodeid=\"2769\">批量操作元素</h4>\n                    <p data-nodeid=\"2770\">\n                      比如说要创建 1 万个 div\n                      元素，在循环中直接创建再添加到父元素上耗时会非常多。如果采用字符串拼接的形式，先将\n                      1 万个 div 元素的 html\n                      字符串拼接成一个完整字符串，然后赋值给 body 元素的\n                      innerHTML 属性就可以明显减少耗时。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> times = <span class=\"hljs-number\">10000</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">'createElement'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> div = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">document</span>.body.appendChild(div)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">'createElement'</span>)<span class=\"hljs-comment\">// 54.964111328125ms</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.time(<span class=\"hljs-string\">'innerHTML'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> html=<span class=\"hljs-string\">''</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++) {\n</div></li><li><div class=\"code-word\">  html+=<span class=\"hljs-string\">'&lt;div&gt;&lt;/div&gt;'</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">document</span>.body.innerHTML += html <span class=\"hljs-comment\">// 31.919921875ms</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.timeEnd(<span class=\"hljs-string\">'innerHTML'</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2772\">\n                      虽然通过修改 innerHTML\n                      来实现批量操作的方式效率很高，但它并不是万能的。比如要在此基础上实现事件监听就会略微麻烦，只能通过事件代理或者重新选取元素再进行单独绑定。批量操作除了用在创建元素外也可以用于修改元素属性样式，比如下面的例子。\n                    </p>\n                    <p data-nodeid=\"2773\">\n                      创建 2 万个 div\n                      元素，以单节点树结构进行排布，每个元素有一个对应的序号作为文本内容。现在通过\n                      style 属性对第 1 个 div 元素进行 2\n                      万次样式调整。下面是直接操作 style 属性的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> times = <span class=\"hljs-number\">20000</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> html = <span class=\"hljs-string\">''</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++) {\n</div></li><li><div class=\"code-word\">  html = <span class=\"hljs-string\">\\`&lt;div&gt;<span class=\"hljs-subst\">${i}</span><span class=\"hljs-subst\">${html}</span>&lt;/div&gt;\\`</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">document</span>.body.innerHTML += html\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> div = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'div'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++) {\n</div></li><li><div class=\"code-word\">  div.style.fontSize = (i % <span class=\"hljs-number\">12</span>) + <span class=\"hljs-number\">12</span> + <span class=\"hljs-string\">'px'</span>\n</div></li><li><div class=\"code-word\">  div.style.color = i % <span class=\"hljs-number\">2</span> ? <span class=\"hljs-string\">'red'</span> : <span class=\"hljs-string\">'green'</span>\n</div></li><li><div class=\"code-word\">  div.style.margin = (i % <span class=\"hljs-number\">12</span>) + <span class=\"hljs-number\">12</span> + <span class=\"hljs-string\">'px'</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2775\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/09/04/CgqCHl67pemAQjkLAAAk8lHks5c377.png\"\n                        alt=\"image (2).png\"\n                        data-nodeid=\"2910\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2776\">\n                      如果将需要修改的样式属性放入 JavaScript\n                      数组，然后对这些修改进行 reduce\n                      操作，得到最终需要的样式之后再设置元素属性，那么性能会提升很多。代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> times = <span class=\"hljs-number\">20000</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> html = <span class=\"hljs-string\">''</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++) {\n</div></li><li><div class=\"code-word\">  html = <span class=\"hljs-string\">\\`&lt;div&gt;<span class=\"hljs-subst\">${i}</span><span class=\"hljs-subst\">${html}</span>&lt;/div&gt;\\`</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">document</span>.body.innerHTML += html\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> queue = [] <span class=\"hljs-comment\">//  创建缓存样式的数组</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> microTask <span class=\"hljs-comment\">// 执行修改样式的微任务</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> st = <span class=\"hljs-function\">() =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> div = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'div'</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 合并样式</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> style = queue.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> ({...acc, ...cur}), {})\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> prop <span class=\"hljs-keyword\">in</span> style) {\n</div></li><li><div class=\"code-word\">    div.style[prop] = style[prop]\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  queue = []\n</div></li><li><div class=\"code-word\">  microTask = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> setStyle = <span class=\"hljs-function\">(<span class=\"hljs-params\">style</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">  queue.push(style)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建微任务</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span>(!microTask) microTask = <span class=\"hljs-built_in\">Promise</span>.resolve().then(st)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; times; i++) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> style = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">fontSize</span>: (i % <span class=\"hljs-number\">12</span>) + <span class=\"hljs-number\">12</span> + <span class=\"hljs-string\">'px'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">color</span>: i % <span class=\"hljs-number\">2</span> ? <span class=\"hljs-string\">'red'</span> : <span class=\"hljs-string\">'green'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">margin</span>:  (i % <span class=\"hljs-number\">12</span>) + <span class=\"hljs-number\">12</span> + <span class=\"hljs-string\">'px'</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  setStyle(style)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2778\">\n                      从下面的耗时占比图可以看到，紫色 Rendering\n                      事件耗时有所减少。\n                    </p>\n                    <p data-nodeid=\"2779\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67piqAR40eAAAkNcoz7jY032.png\"\n                        alt=\"image (3).png\"\n                        data-nodeid=\"2915\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2780\">\n                      virtualDOM 之所以号称高性能，其实现原理就与此类似。\n                    </p>\n                    <h4 data-nodeid=\"2781\">缓存元素集合</h4>\n                    <p data-nodeid=\"2782\">\n                      比如将通过选择器函数获取到的 DOM\n                      元素赋值给变量，之后通过变量操作而不是再次使用选择器函数来获取。\n                    </p>\n                    <p data-nodeid=\"2783\">\n                      下面举例说明，假设我们现在要将上面代码所创建的 1 万个 div\n                      元素的文本内容进行修改。每次重复使用获取选择器函数来获取元素，代码以及时间消耗如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'div'</span>).length; i++) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">\\`div\\`</span>)[i].innerText = i\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2785\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pjKAIKXfAAAlxYMHz74357.png\"\n                        alt=\"image (4).png\"\n                        data-nodeid=\"2922\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2786\">\n                      如果能够将元素集合赋值给 JavaScript\n                      变量，每次通过变量去修改元素，那么性能将会得到不小的提升。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> divs = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'div'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; divs.length; i++) {\n</div></li><li><div class=\"code-word\">  divs[i].innerText = i\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2788\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/09/04/Ciqc1F67pjmAKJrEAAAjr0DG628141.png\"\n                        alt=\"image (5).png\"\n                        data-nodeid=\"2926\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2789\">\n                      对比两者耗时占比图可以看到，两者的渲染时间较为接近。但缓存元素的方式在黄色的\n                      Scripting 耗时上具有明显优势。\n                    </p>\n                    <h3 data-nodeid=\"2790\">总结</h3>\n                    <p data-nodeid=\"2791\">\n                      本课时从深入理解 DOM 的必要性说起，然后分析了 DOM\n                      操作耗时的原因，最后再针对这些原因提出了可行的解决方法。\n                    </p>\n                    <p data-nodeid=\"2792\">\n                      除了这些方法之外，还有一些原则也可能帮助我们提升渲染性能，比如：\n                    </p>\n                    <ul data-nodeid=\"2793\">\n                      <li data-nodeid=\"2794\">\n                        <p data-nodeid=\"2795\">\n                          尽量不要使用复杂的匹配规则和复杂的样式，从而减少渲染引擎计算样式规则生成\n                          CSSOM 树的时间；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2796\">\n                        <p data-nodeid=\"2797\">尽量减少重排和重绘影响的区域；</p>\n                      </li>\n                      <li data-nodeid=\"2798\">\n                        <p data-nodeid=\"2799\">使用 CSS3 特性来实现动画效果。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2800\">\n                      希望你首先能理解原因，然后记住这些方法和原则，编写出高性能代码。\n                    </p>\n                    <p data-nodeid=\"2801\" class=\"\">\n                      最后布置一道思考题：说一说你还知道哪些提升渲染速度的方法和原则？\n                    </p>\n            "}