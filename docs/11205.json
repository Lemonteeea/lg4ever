{"title":"03 | CI 环境上的 npm 优化及更多工程化问题解析","context":"\n                    <p data-nodeid=\"1701\" class=\"\">\n                      前两讲，我们围绕着 npm 和 Yarn\n                      的核心原理展开了讲解，实际上 npm 和 Yarn\n                      涉及项目的方方面面，加之本身设计复杂度较高，这一讲我将继续讲解\n                      CI 环境上的 npm\n                      优化以及更多工程化相关问题。希望通过这一讲的学习你能够学习到\n                      CI\n                      环境上使用包管理工具的方方面面，并能够解决非本地环境下（一般是在容器上）使用包管理工具解决相关问题。\n                    </p>\n                    <h3 data-nodeid=\"1702\">CI 环境上的 npm 优化</h3>\n                    <p data-nodeid=\"1703\">\n                      CI 环境下的 npm 配置和开发者本地 npm\n                      操作有些许不同，接下来我们一起看看 CI 环境上的 npm\n                      相关优化。\n                    </p>\n                    <h4 data-nodeid=\"1704\">合理使用 npm ci 和 npm install</h4>\n                    <p data-nodeid=\"1705\">\n                      顾名思义，npm ci 就是专门为 CI 环境准备的安装命令，相比\n                      npm install 它的不同之处在于：\n                    </p>\n                    <ul data-nodeid=\"1706\">\n                      <li data-nodeid=\"1707\">\n                        <p data-nodeid=\"1708\">\n                          npm ci 要求项目中必须存在 package-lock.json 或\n                          npm-shrinkwrap.json；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1709\">\n                        <p data-nodeid=\"1710\">\n                          npm ci 完全根据 package-lock.json\n                          安装依赖，这可以保证整个开发团队都使用版本完全一致的依赖；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1711\">\n                        <p data-nodeid=\"1712\">\n                          正因为 npm ci 完全根据 package-lock.json\n                          安装依赖，在安装过程中，它不需要计算求解依赖满足问题、构造依赖树，因此安装过程会更加迅速；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1713\">\n                        <p data-nodeid=\"1714\">\n                          npm ci 在执行安装时，会先删除项目中现有的\n                          node_modules，然后全新安装；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1715\">\n                        <p data-nodeid=\"1716\">\n                          npm ci\n                          只能一次安装整个项目所有依赖包，无法安装单个依赖包；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1717\">\n                        <p data-nodeid=\"1718\">\n                          如果 package-lock.json 和 package.json 冲突，那么 npm\n                          ci 会直接报错，并非更新 lockfiles；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1719\">\n                        <p data-nodeid=\"1720\">\n                          npm ci 永远不会改变 package.json 和\n                          package-lock.json。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1721\">\n                      基于以上特性，<strong data-nodeid=\"1898\"\n                        >我们在 CI 环境使用 npm ci 代替 npm\n                        install，一般会获得更加稳定、一致和迅速的安装体验</strong\n                      >。\n                    </p>\n                    <blockquote data-nodeid=\"1722\">\n                      <p data-nodeid=\"1723\">\n                        更多 npm ci 的内容你也可以在<a\n                          href=\"https://docs.npmjs.com/cli/ci.html\"\n                          data-nodeid=\"1902\"\n                          >官网</a\n                        >查看。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"1724\">\n                      使用 package-lock.json 优化依赖安装时间\n                    </h4>\n                    <p data-nodeid=\"1725\">\n                      上面提到过，对于应用项目，建议上传 package-lock.json\n                      到仓库中，以保证依赖安装的一致性。事实上，如果项目中使用了\n                      package-lock.json\n                      一般还可以显著加速依赖安装时间。这是因为<strong\n                        data-nodeid=\"1910\"\n                        >package-lock.json\n                        中已经缓存了每个包的具体版本和下载链接，你不需要再去远程仓库进行查询，即可直接进入文件完整性校验环节，减少了大量网络请求</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1726\">\n                      除了上面所述内容，CI 环境上，缓存 node_modules\n                      文件也是企业级使用包管理工具常用的优化做法。\n                    </p>\n                    <h3 data-nodeid=\"1727\">更多工程化相关问题解析</h3>\n                    <p data-nodeid=\"1728\">\n                      下面这部分，我将通过剖析几个问题，来加深你对这几讲学习概念的理解，以及对工程化中可能遇到的问题进行预演。\n                    </p>\n                    <h4 data-nodeid=\"1729\">\n                      为什么要 lockfiles，要不要提交 lockfiles 到仓库？\n                    </h4>\n                    <p data-nodeid=\"1730\">\n                      从 npm v5 版本开始，增加了 package-lock.json\n                      文件。我们知道<strong data-nodeid=\"1924\"\n                        >package-lock.json\n                        文件的作用是锁定依赖安装结构，目的是保证在任意机器上执行\n                        npm install 都会得到完全相同的 node_modules\n                        安装结果</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1731\">\n                      你需要明确，为什么单一的 package.json\n                      不能确定唯一的依赖树：\n                    </p>\n                    <ul data-nodeid=\"1732\">\n                      <li data-nodeid=\"1733\">\n                        <p data-nodeid=\"1734\">\n                          不同版本的 npm 的安装依赖策略和算法不同；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1735\">\n                        <p data-nodeid=\"1736\">\n                          npm install 将根据 package.json 中的 semver-range\n                          version\n                          更新依赖，某些依赖项自上次安装以来，可能已发布了新版本。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1737\">\n                      因此，<strong data-nodeid=\"1933\"\n                        >保证能够完整准确地还原项目依赖</strong\n                      >，就是 lockfiles 出现的原因。\n                    </p>\n                    <p data-nodeid=\"1738\">\n                      首先我们了解一下 package-lock.json\n                      的作用机制。上一讲中我们已经解析了 yarn.lock\n                      文件结构，这里我们看下 package-lock.json 的内容举例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">\"@babel/core\"</span>: {\n</div></li><li><div class=\"code-word\">\t  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"7.2.0\"</span>,\n</div></li><li><div class=\"code-word\">\t  <span class=\"hljs-string\">\"resolved\"</span>: <span class=\"hljs-string\">\"http://www.npm.com/@babel%2fcore/-/core-7.2.0.tgz\"</span>,\n</div></li><li><div class=\"code-word\">\t  <span class=\"hljs-string\">\"integrity\"</span>: <span class=\"hljs-string\">\"sha1-pN04FJAZmOkzQPAIbphn/voWOto=\"</span>,\n</div></li><li><div class=\"code-word\">\t  <span class=\"hljs-string\">\"dev\"</span>: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">\t  <span class=\"hljs-string\">\"requires\"</span>: {\n</div></li><li><div class=\"code-word\">\t    <span class=\"hljs-string\">\"@babel/code-frame\"</span>: <span class=\"hljs-string\">\"^7.0.0\"</span>,\n</div></li><li><div class=\"code-word\">\t    <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">\t  },\n</div></li><li><div class=\"code-word\">\t  <span class=\"hljs-string\">\"dependencies\"</span>: {\n</div></li><li><div class=\"code-word\">\t    <span class=\"hljs-string\">\"@babel/generator\"</span>: {\n</div></li><li><div class=\"code-word\">\t      <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"7.2.0\"</span>,\n</div></li><li><div class=\"code-word\">\t      <span class=\"hljs-string\">\"resolved\"</span>: <span class=\"hljs-string\">\"http://www.npm.com/@babel%2fgenerator/-/generator-7.2.0.tgz\"</span>,\n</div></li><li><div class=\"code-word\">\t      <span class=\"hljs-string\">\"integrity\"</span>: <span class=\"hljs-string\">\"sha1-6vOCH6AwHZ1K74jmPUvMGbc7oWw=\"</span>,\n</div></li><li><div class=\"code-word\">\t      <span class=\"hljs-string\">\"dev\"</span>: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">\t      <span class=\"hljs-string\">\"requires\"</span>: {\n</div></li><li><div class=\"code-word\">\t        <span class=\"hljs-string\">\"@babel/types\"</span>: <span class=\"hljs-string\">\"^7.2.0\"</span>,\n</div></li><li><div class=\"code-word\">\t        <span class=\"hljs-string\">\"jsesc\"</span>: <span class=\"hljs-string\">\"^2.5.1\"</span>,\n</div></li><li><div class=\"code-word\">\t        <span class=\"hljs-string\">\"lodash\"</span>: <span class=\"hljs-string\">\"^4.17.10\"</span>,\n</div></li><li><div class=\"code-word\">\t        <span class=\"hljs-string\">\"source-map\"</span>: <span class=\"hljs-string\">\"^0.5.0\"</span>,\n</div></li><li><div class=\"code-word\">\t        <span class=\"hljs-string\">\"trim-right\"</span>: <span class=\"hljs-string\">\"^1.0.1\"</span>\n</div></li><li><div class=\"code-word\">\t      }\n</div></li><li><div class=\"code-word\">\t    },\n</div></li><li><div class=\"code-word\">\t    <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">\t  }\n</div></li><li><div class=\"code-word\">\t},\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"1740\">\n                      通过上述代码示例，我们看到：一个 package-lock.json 的\n                      dependency 主要由以下部分构成。\n                    </p>\n                    <ul data-nodeid=\"1741\">\n                      <li data-nodeid=\"1742\">\n                        <p data-nodeid=\"1743\">Version：依赖包的版本号</p>\n                      </li>\n                      <li data-nodeid=\"1744\">\n                        <p data-nodeid=\"1745\">\n                          Resolved：依赖包安装源（可简单理解为下载地址）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1746\">\n                        <p data-nodeid=\"1747\">\n                          Integrity：表明包完整性的 Hash 值\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1748\">\n                        <p data-nodeid=\"1749\">\n                          Dev：表示该模块是否为顶级模块的开发依赖或者是一个的传递依赖关系\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1750\">\n                        <p data-nodeid=\"1751\">\n                          requires：依赖包所需要的所有依赖项，对应依赖包\n                          package.json 里 dependencies 中的依赖项\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1752\">\n                        <p data-nodeid=\"1753\">\n                          dependencies：依赖包 node_modules\n                          中依赖的包（特殊情况下才存在）\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1754\">\n                      事实上，<strong data-nodeid=\"1951\"\n                        >并不是所有的子依赖都有 dependencies\n                        属性，只有子依赖的依赖和当前已安装在根目录的\n                        node_modules 中的依赖冲突之后，才会有这个属性</strong\n                      >。这就涉及嵌套情况的依赖管理，我已经在前文做了说明。\n                    </p>\n                    <p data-nodeid=\"1755\">\n                      至于要不要提交 lockfiles\n                      到仓库？这就需要看项目定位决定了。\n                    </p>\n                    <ul data-nodeid=\"1756\">\n                      <li data-nodeid=\"1757\">\n                        <p data-nodeid=\"1758\">\n                          如果开发一个应用，我建议把 package-lock.json\n                          文件提交到代码版本仓库。这样可以保证项目组成员、运维部署成员或者\n                          CI 系统，在执行 npm install\n                          后，能得到完全一致的依赖安装内容。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1759\">\n                        <p data-nodeid=\"1760\">\n                          如果你的目标是开发一个给外部使用的库，那就要谨慎考虑了，因为<strong\n                            data-nodeid=\"1959\"\n                            >库项目一般是被其他项目依赖的，在不使用\n                            package-lock.json\n                            的情况下，就可以复用主项目已经加载过的包，减少依赖重复和体积</strong\n                          >。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1761\">\n                        <p data-nodeid=\"1762\">\n                          如果我们开发的库依赖了一个精确版本号的模块，那么提交\n                          lockfiles\n                          到仓库可能会造成同一个依赖不同版本都被下载的情况。如果作为库开发者，真的有使用某个特定版本依赖的需要，一个更好的方式是<strong\n                            data-nodeid=\"1965\"\n                            >定义 peerDependencies</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1763\">\n                      因此，一个推荐的做法是：<strong data-nodeid=\"1971\"\n                        >把 package-lock.json 一起提交到代码库中，不需要\n                        ignore。但是执行 npm publish\n                        命令，发布一个库的时候，它应该被忽略而不是直接发布出去</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1764\">\n                      理解上述概念并不够，对于 lockfiles\n                      的处理，你需要更加精细。这里我列出几条建议供你参考。\n                    </p>\n                    <ol data-nodeid=\"1765\">\n                      <li data-nodeid=\"1766\">\n                        <p data-nodeid=\"1767\">\n                          早期 npm 锁定版本的方式是使用\n                          npm-shrinkwrap.json，它与 package-lock.json\n                          不同点在于：npm 包发布的时候默认将 npm-shrinkwrap.json\n                          发布，因此类库或者组件需要慎重。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1768\">\n                        <p data-nodeid=\"1769\">\n                          使用 package-lock.json 是 npm v5.x 版本新增特性，而\n                          npm v5.6 以上才逐步稳定，在 5.0 - 5.6 中间，对\n                          package-lock.json 的处理逻辑进行过几次更新。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1770\">\n                        <p data-nodeid=\"1771\">\n                          在 npm v5.0.x 版本中，npm install 时都会根据\n                          package-lock.json 文件下载，不管 package.json\n                          内容究竟是什么。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1772\">\n                        <p data-nodeid=\"1773\">\n                          npm v5.1.0 版本到 npm v5.4.2，npm install 会无视\n                          package-lock.json 文件，会去下载最新的 npm 包并且更新\n                          package-lock.json。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1774\">\n                        <p data-nodeid=\"1775\">npm 5.4.2 版本后：</p>\n                      </li>\n                    </ol>\n                    <ul data-nodeid=\"1776\">\n                      <li data-nodeid=\"1777\">\n                        <p data-nodeid=\"1778\">\n                          如果项目中只有 package.json 文件，npm install\n                          之后，会根据它生成一个 package-lock.json 文件；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1779\">\n                        <p data-nodeid=\"1780\">\n                          如果项目中存在 package.json 和 package-lock.json\n                          文件，同时 package.json 的 semver-range 版本 和\n                          package-lock.json\n                          中版本兼容，即使此时有新的适用版本，npm install\n                          还是会根据 package-lock.json 下载；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1781\">\n                        <p data-nodeid=\"1782\">\n                          如果项目中存在 package.json 和 package-lock.json\n                          文件，同时 package.json 的 semver-range 版本和\n                          package-lock.json 中版本不兼容，npm install 时\n                          package-lock.json 将会更新到兼容 package.json 的版本；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1783\">\n                        <p data-nodeid=\"1784\">\n                          如果 package-lock.json 和 npm-shrinkwrap.json\n                          同时存在于项目根目录，package-lock.json 将会被忽略。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1785\">\n                      以上内容你可以结合 01 讲中 npm 安装流程进一步理解。\n                    </p>\n                    <h4 data-nodeid=\"1786\">为什么有 xxxDependencies？</h4>\n                    <p data-nodeid=\"1787\">npm 设计了以下几种依赖类型声明：</p>\n                    <ul data-nodeid=\"1788\">\n                      <li data-nodeid=\"1789\">\n                        <p data-nodeid=\"1790\">dependencies 项目依赖</p>\n                      </li>\n                      <li data-nodeid=\"1791\">\n                        <p data-nodeid=\"1792\">devDependencies 开发依赖</p>\n                      </li>\n                      <li data-nodeid=\"1793\">\n                        <p data-nodeid=\"1794\">peerDependencies 同版本依赖</p>\n                      </li>\n                      <li data-nodeid=\"1795\">\n                        <p data-nodeid=\"1796\">bundledDependencies 捆绑依赖</p>\n                      </li>\n                      <li data-nodeid=\"1797\">\n                        <p data-nodeid=\"1798\">optionalDependencies 可选依赖</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1799\">\n                      它们起到的作用和声明意义各不相同。dependencies\n                      表示项目依赖，这些依赖都会成为线上生产环境中的代码组成部分。当它关联的\n                      npm 包被下载时，<strong data-nodeid=\"1995\"\n                        >dependencies 下的模块也会作为依赖，一起被下载</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1800\">\n                      <strong data-nodeid=\"2000\"\n                        >devDependencies 表示开发依赖，不会被自动下载</strong\n                      >，因为 devDependencies\n                      一般只在开发阶段起作用或只是在开发环境中需要用到。比如\n                      Webpack，预处理器 babel-loader、scss-loader，测试工具\n                      E2E、Chai\n                      等，这些都是辅助开发的工具包，无须在生产环境使用。\n                    </p>\n                    <p data-nodeid=\"1801\">\n                      这里需要特别说明的是：<strong data-nodeid=\"2010\"\n                        >并不是只有在 dependencies 中的模块才会被一起打包，而在\n                        devDependencies 中的依赖一定不会被打包</strong\n                      >。实际上，依赖是否被打包，<strong data-nodeid=\"2011\"\n                        >完全取决于项目里是否被引入了该模块</strong\n                      >。dependencies 和 devDependencies\n                      在业务中更多的只是一个规范作用，我们自己的应用项目中，使用\n                      npm install 命令安装依赖时，dependencies 和\n                      devDependencies 内容都会被下载。\n                    </p>\n                    <p data-nodeid=\"1802\">\n                      peerDependencies\n                      表示同版本依赖，简单来说就是：如果你安装我，那么你最好也安装我对应的依赖。举个例子，假设\n                      react-ui@1.2.2 只提供一套基于 React 的 UI\n                      组件库，它需要宿主环境提供指定的 React\n                      版本来搭配使用，因此我们需要在 React-ui 的 package.json\n                      中配置：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">\"peerDependencies\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"React\"</span>: <span class=\"hljs-string\">\"^17.0.0\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1804\">\n                      举一个场景实例，对于插件类 (Plugin) 项目，比如我开发一个\n                      Koa\n                      中间件，很明显这类插件或组件脱离（Koa）本体是不能单独运行且毫无意义的，但是这类插件又无须声明对本体（Koa）的依赖声明，更好的方式是使用宿主项目中的本体（Koa）依赖。这就是<strong\n                        data-nodeid=\"2018\"\n                        >peerDependencies 主要的使用场景</strong\n                      >。这类场景有以下特点：\n                    </p>\n                    <ul data-nodeid=\"1805\">\n                      <li data-nodeid=\"1806\">\n                        <p data-nodeid=\"1807\">\n                          <strong data-nodeid=\"2022\">插件不能单独运行</strong>\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1808\">\n                        <p data-nodeid=\"1809\">\n                          <strong data-nodeid=\"2026\"\n                            >插件正确运行的前提是核心依赖库必须先下载安装</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1810\">\n                        <p data-nodeid=\"1811\">\n                          <strong data-nodeid=\"2030\"\n                            >我们不希望核心依赖库被重复下载</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1812\">\n                        <p data-nodeid=\"1813\">\n                          <strong data-nodeid=\"2034\"\n                            >插件 API\n                            的设计必须要符合核心依赖库的插件编写规范</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1814\">\n                        <p data-nodeid=\"1815\">\n                          <strong data-nodeid=\"2038\"\n                            >在项目中，同一插件体系下，核心依赖库版本最好相同</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1816\">\n                      bundledDependencies 和 npm pack 打包命令有关。假设\n                      package.json 中有如下配置：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"test\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"dependencies\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"dep\"</span>: <span class=\"hljs-string\">\"^0.0.2\"</span>,\n</div></li><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"devDependencies\"</span>: {\n</div></li><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"devD1\"</span>: <span class=\"hljs-string\">\"^1.0.0\"</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"bundledDependencies\"</span>: [\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"bundleD1\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"bundleD2\"</span>\n</div></li><li><div class=\"code-word\">  ]\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1818\">\n                      在执行 npm pack 时，就会产出一个 test-1.0.0.tgz\n                      压缩包，且该压缩包中包含了 bundle D1 和 bundle D2\n                      两个安装包。业务方使用 npm install test-1.0.0.tgz\n                      命令时，也会安装 bundle D1 和 bundle D2。\n                    </p>\n                    <p data-nodeid=\"1819\">\n                      这里你需要注意的是：<strong data-nodeid=\"2046\"\n                        >在 bundledDependencies 中指定的依赖包，必须先在\n                        dependencies 和 devDependencies 声明过，否则在 npm pack\n                        阶段会进行报错</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1820\">\n                      optionalDependencies\n                      表示可选依赖，就是说即使对应依赖项安装失败了，也不会影响整个安装过程。一般我们很少使用到它，这里<strong\n                        data-nodeid=\"2052\"\n                        >我也不建议大家使用，因为它大概率会增加项目的不确定性和复杂性</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1821\">\n                      学习了以上内容，现在你已经知道 npm\n                      规范中的相关依赖声明含义了，接下来我们再谈谈版本规范，帮助你进一步解析依赖库锁版本行为。\n                    </p>\n                    <h4 data-nodeid=\"1822\">\n                      再谈版本规范——依赖库锁版本行为解析\n                    </h4>\n                    <p data-nodeid=\"1823\">\n                      npm 遵循 SemVer 版本规范，具体内容你可以参考<a\n                        href=\"https://semver.org/lang/zh-CN/\"\n                        data-nodeid=\"2058\"\n                        >语义化版本 2.0.0</a\n                      >，这里不再展开。这部分内容我希望聚焦到工程建设的一个细节点上——依赖库锁版本行为。\n                    </p>\n                    <p data-nodeid=\"1824\">\n                      <a\n                        href=\"https://vue-loader.vuejs.org/zh/guide/#%E6%89%8B%E5%8A%A8%E8%AE%BE%E7%BD%AE\"\n                        data-nodeid=\"2062\"\n                        >Vue 官方有这样的内容</a\n                      >：\n                    </p>\n                    <blockquote data-nodeid=\"1825\">\n                      <p data-nodeid=\"1826\">\n                        每个 vue 包的新版本发布时，一个相应版本的\n                        vue-template-compiler\n                        也会随之发布。编译器的版本必须和基本的 vue\n                        包保持同步，这样 vue-loader\n                        就会生成兼容运行时的代码。这意味着你每次升级项目中的 vue\n                        包时，也应该匹配升级 vue-template-compiler。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1827\">\n                      据此，我们需要考虑的是：作为库开发者，如何保证依赖包之间的强制最低版本要求？\n                    </p>\n                    <p data-nodeid=\"1828\">\n                      我们先看看 create-react-app 的做法，在 create-react-app\n                      的核心 react-script 当中，它利用 verify PackageTree\n                      方法，对业务项目中的依赖进行比对和限制。<a\n                        href=\"https://github.com/facebook/create-react-app/blob/37712374bcaa6ccb168eeaf4fe8bd52d120dbc58/packages/react-scripts/scripts/utils/verifyPackageTree.js#L19\"\n                        data-nodeid=\"2069\"\n                        >源码</a\n                      >如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">verifyPackageTree</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> depsToCheck = [\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'babel-eslint'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'babel-jest'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'babel-loader'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'eslint'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'jest'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'webpack'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'webpack-dev-server'</span>,\n</div></li><li><div class=\"code-word\">  ];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> getSemverRegex = () =&gt;\n</div></li><li><div class=\"code-word\">    /\\bv?(?:<span class=\"hljs-number\">0</span>|[<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">9</span>]\\d*)\\.(?:<span class=\"hljs-number\">0</span>|[<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">9</span>]\\d*)\\.(?:<span class=\"hljs-number\">0</span>|[<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">9</span>]\\d*)(?:-[\\da-z-]+(?:\\.[\\da-z-]+)*)?(?:\\+[\\da-z-]+(?:\\.[\\da-z-]+)*)?\\b/gi;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> ownPackageJson = require(<span class=\"hljs-string\">'../../package.json'</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> expectedVersionsByDep = {};\n</div></li><li><div class=\"code-word\">  depsToCheck.forEach(dep =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> expectedVersion = ownPackageJson.dependencies[dep];\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!expectedVersion) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Error(<span class=\"hljs-string\">'This dependency list is outdated, fix it.'</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!getSemverRegex().test(expectedVersion)) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Error(\n</div></li><li><div class=\"code-word\">        \\`The ${dep} <span class=\"hljs-keyword\">package</span> should be pinned, instead got version ${expectedVersion}.\\`\n</div></li><li><div class=\"code-word\">      );\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    expectedVersionsByDep[dep] = expectedVersion;\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  let currentDir = __dirname;\n</div></li><li><div class=\"code-word\"> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">true</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> previousDir = currentDir;\n</div></li><li><div class=\"code-word\">    currentDir = path.resolve(currentDir, <span class=\"hljs-string\">'..'</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (currentDir === previousDir) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// We've reached the root.</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> maybeNodeModules = path.resolve(currentDir, <span class=\"hljs-string\">'node_modules'</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!fs.existsSync(maybeNodeModules)) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    depsToCheck.forEach(dep =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> maybeDep = path.resolve(maybeNodeModules, dep);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!fs.existsSync(maybeDep)) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> maybeDepPackageJson = path.resolve(maybeDep, <span class=\"hljs-string\">'package.json'</span>);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!fs.existsSync(maybeDepPackageJson)) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> depPackageJson = JSON.parse(\n</div></li><li><div class=\"code-word\">        fs.readFileSync(maybeDepPackageJson, <span class=\"hljs-string\">'utf8'</span>)\n</div></li><li><div class=\"code-word\">      );\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> expectedVersion = expectedVersionsByDep[dep];\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!semver.satisfies(depPackageJson.version, expectedVersion)) {\n</div></li><li><div class=\"code-word\">        console.error(<span class=\"hljs-comment\">//...);</span>\n</div></li><li><div class=\"code-word\">        process.exit(<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1830\">\n                      根据上述代码，我们不难发现，create-react-app 会对项目中的\n                      babel-eslint、babel-jest、babel-loader、ESLint、Jest、webpack、webpack-dev-server\n                      这些核心依赖进行检索——是否符合 create-react-app\n                      对这些核心依赖的版本要求。<strong data-nodeid=\"2076\"\n                        >如果不符合依赖版本要求，那么 create-react-app\n                        的构建过程会直接报错并退出</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1831\">\n                      create-react-app 这么做的理由是：<strong\n                        data-nodeid=\"2082\"\n                        >需要上述依赖项的某些确定版本，以保障 create-react-app\n                        源码的相关功能稳定</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1832\">\n                      我认为这样做看似强硬且无理由，实则是对前端社区、npm\n                      版本混乱现象的一种妥协。这种妥协确实能保证\n                      create-react-app\n                      的正常构建工作。因此现阶段来看，也不失为一种值得推荐的做法。而作为\n                      create-react-app 的使用者，我们依然可以<strong\n                        data-nodeid=\"2096\"\n                        >通过 SKIP_PREFLIGHT_CHECK\n                        这个环境变量，跳过核心依赖版本检查</strong\n                      >，对应<a\n                        href=\"https://github.com/facebook/create-react-app/blob/5bd6e73047ef0ccd2f31616255c79a939d6402c4/packages/react-scripts/scripts/start.js#L27\"\n                        data-nodeid=\"2094\"\n                        >源码</a\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> verifyPackageTree = require(<span class=\"hljs-string\">'./utils/verifyPackageTree'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (process.env.SKIP_PREFLIGHT_CHECK !== <span class=\"hljs-string\">'true'</span>) {\n</div></li><li><div class=\"code-word\">  verifyPackageTree();\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1834\">\n                      create-react-app\n                      的锁版本行为无疑彰显了目前前端社区中工程依赖问题的方方面面，从这个细节管中窥豹，希望能引起你更深入的思考。\n                    </p>\n                    <h3 data-nodeid=\"1835\">最佳实操建议</h3>\n                    <p data-nodeid=\"1836\">\n                      前面我们讲了很多 npm\n                      的原理和设计理念，理解了这些内容，你应该能总结出一个适用于团队的最佳实操建议。对于实操我有以下想法，供你参考。\n                    </p>\n                    <ol data-nodeid=\"1837\">\n                      <li data-nodeid=\"1838\">\n                        <p data-nodeid=\"1839\">\n                          优先使用 npm v5.4.2 以上的 npm 版本，以保证 npm\n                          的最基本先进性和稳定性。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1840\">\n                        <p data-nodeid=\"1841\">\n                          项目的第一次搭建使用 npm install 安装依赖包，并提交\n                          package.json、package-lock.json，而不提交 node_modules\n                          目录。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1842\">\n                        <p data-nodeid=\"1843\">\n                          其他项目成员首次 checkout/clone 项目代码后，执行一次\n                          npm install 安装依赖包。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1844\">\n                        <p data-nodeid=\"1845\">对于升级依赖包的需求：</p>\n                      </li>\n                    </ol>\n                    <ul data-nodeid=\"1846\">\n                      <li data-nodeid=\"1847\">\n                        <p data-nodeid=\"1848\">\n                          依靠 npm update 命令升级到新的小版本；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1849\">\n                        <p data-nodeid=\"1850\">\n                          依靠 npm install @ 升级大版本；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1851\">\n                        <p data-nodeid=\"1852\">\n                          也可以手动修改 package.json 中版本号，并执行 npm\n                          install 来升级版本；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1853\">\n                        <p data-nodeid=\"1854\">\n                          本地验证升级后新版本无问题，提交新的\n                          package.json、package-lock.json 文件。\n                        </p>\n                      </li>\n                    </ul>\n                    <ol start=\"5\" data-nodeid=\"1855\">\n                      <li data-nodeid=\"1856\">\n                        <p data-nodeid=\"1857\">\n                          对于降级依赖包的需求：执行 npm install @\n                          命令，验证没问题后，提交新的\n                          package.json、package-lock.json 文件。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1858\">\n                        <p data-nodeid=\"1859\">删除某些依赖：</p>\n                      </li>\n                    </ol>\n                    <ul data-nodeid=\"1860\">\n                      <li data-nodeid=\"1861\">\n                        <p data-nodeid=\"1862\">\n                          执行 npm uninstall 命令，验证没问题后，提交新的\n                          package.json、package-lock.json 文件；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1863\">\n                        <p data-nodeid=\"1864\">\n                          或者手动操作 package.json，删除依赖，执行 npm install\n                          命令，验证没问题后，提交新的\n                          package.json、package-lock.json 文件。\n                        </p>\n                      </li>\n                    </ul>\n                    <ol start=\"7\" data-nodeid=\"1865\">\n                      <li data-nodeid=\"1866\">\n                        <p data-nodeid=\"1867\">\n                          任何团队成员提交 package.json、package-lock.json\n                          更新后，其他成员应该拉取代码后，执行 npm install\n                          更新依赖。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1868\">\n                        <p data-nodeid=\"1869\">\n                          任何时候都不要修改 package-lock.json。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1870\">\n                        <p data-nodeid=\"1871\">\n                          如果 package-lock.json 出现冲突或问题，建议将本地的\n                          package-lock.json 文件删除，引入远程的\n                          package-lock.json 文件和 package.json，再执行 npm\n                          install 命令。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1872\">\n                      如果以上建议你都能理解，并能够解释其中缘由，那么这三讲内容，你已经大致掌握了。\n                    </p>\n                    <h3 data-nodeid=\"1873\">总结</h3>\n                    <p data-nodeid=\"1874\">\n                      通过本讲学习，相信你已经掌握了在 CI\n                      环境中优化包管理器的方法以及更多、更全面的 npm\n                      设计规范。希望不管是在本地开发，还是 CI\n                      环境中，你在面对包管理方面的问题时能够游刃有余，轻松面对。\n                    </p>\n                    <p data-nodeid=\"1875\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8B/B0/CgqCHl_cia2AQRQXAAcD3Dx5TgQ135.png\"\n                        alt=\"前端基建 金句.png\"\n                        data-nodeid=\"2122\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1876\">\n                      随着前端的发展，npm/Yarn 也在互相借鉴，不断改进，比如 npm\n                      v7 会带来一流的 Monorepo\n                      支持。历史总是螺旋式前进，其间可能出现困局和曲折，但是对前端从业人员来说，时刻保持对工程化理念的学习，抽丝剥茧、理清概念，必能从中受益。\n                    </p>\n                    <p data-nodeid=\"1877\">\n                      npm/Yarn\n                      相关的话题不是一个独立的点，它是成体系的一个面，甚至可以算得上是一个完整的生态。这部分知识我们虽没有面面俱到，但是聚焦在依赖管理、安装机制、CI\n                      提效等话题上。更多 npm 的内容，比如 npm\n                      scripts、公共库相关设计、npm 发包、npm 安全、package.json\n                      等话题我会在后面章节中也会继续讲解，希望你能坚持学习。\n                    </p>\n                    <p data-nodeid=\"1878\" class=\"\">\n                      不管是本地开发环境还是 CI 环境，不管是使用 npm 还是\n                      Yarn，都离不开构建工具。下一讲我会带你对比主流构建工具，继续深入工程化和基建的深水区。我们下一讲再见。\n                    </p>\n            "}