{"title":"06 | core-js 及垫片理念：设计一个“最完美”的 Polyfill 方案","context":"\n                    <p data-nodeid=\"1485\" class=\"\">\n                      即便你不知道\n                      <a\n                        href=\"https://github.com/zloirock/core-js\"\n                        data-nodeid=\"1597\"\n                        >core-js</a\n                      >，也一定在项目中直接或间接地使用过它。core-js 是一个\n                      JavaScript 标准库，它包含了 ECMAScript 2020\n                      在内的多项特性的 polyfills，以及 ECMAScript 在 proposals\n                      阶段的特性、WHATWG/W3C\n                      新特性等。因此它是一个现代化前端项目的“标准套件”。\n                    </p>\n                    <p data-nodeid=\"1486\">\n                      除了 core-js\n                      本身的重要性，它的实现理念、设计方式都值得我们学习。事实上，core-js\n                      是一扇大门：\n                    </p>\n                    <ul data-nodeid=\"1487\">\n                      <li data-nodeid=\"1488\">\n                        <p data-nodeid=\"1489\">\n                          通过 core-js，我们可以窥见<strong data-nodeid=\"1605\"\n                            >前端工程化</strong\n                          >的方方面面；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1490\">\n                        <p data-nodeid=\"1491\">\n                          core-js 又和 Babel 深度绑定，因此学习\n                          core-js，也能帮助开发者<strong data-nodeid=\"1611\"\n                            >更好地理解 babel 生态</strong\n                          >，进而加深对前端生态的理解；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1492\">\n                        <p data-nodeid=\"1493\">\n                          通过对 core-js\n                          的解析，我们正好可以梳理前端一个极具特色的概念——<strong\n                            data-nodeid=\"1617\"\n                            >polyfill（垫片/补丁）</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1494\">这一讲，就让我们深入谈谈以上内容。</p>\n                    <h3 data-nodeid=\"1495\">core-js 工程一览</h3>\n                    <p data-nodeid=\"1496\">\n                      core-js 是一个由\n                      <a\n                        href=\"https://github.com/lerna/lerna\"\n                        data-nodeid=\"1623\"\n                        >Lerna</a\n                      >\n                      搭建的 Monorepo 风格的项目，在它的\n                      <a\n                        href=\"https://github.com/zloirock/core-js/tree/master/packages\"\n                        data-nodeid=\"1627\"\n                        >packages</a\n                      >\n                      中，我们能看到五个相关包：\n                    </p>\n                    <ul data-nodeid=\"1497\">\n                      <li data-nodeid=\"1498\">\n                        <p data-nodeid=\"1499\">core-js</p>\n                      </li>\n                      <li data-nodeid=\"1500\">\n                        <p data-nodeid=\"1501\">core-js-pure</p>\n                      </li>\n                      <li data-nodeid=\"1502\">\n                        <p data-nodeid=\"1503\">core-js-compact</p>\n                      </li>\n                      <li data-nodeid=\"1504\">\n                        <p data-nodeid=\"1505\">core-js-builder</p>\n                      </li>\n                      <li data-nodeid=\"1506\">\n                        <p data-nodeid=\"1507\">core-js-bundle</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1508\">\n                      我们先从 core-js 入手。<strong data-nodeid=\"1639\"\n                        >core-js 实现的基础垫片能力，是整个 core-js\n                        的逻辑核心</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1509\">\n                      比如我们可以按照如下代码引入全局 polyfills：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'core-js'</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1511\">或者按照：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'core-js/features/array/from'</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1513\">\n                      的方式，按需在业务项目的入口引入某些 polyfills。\n                    </p>\n                    <p data-nodeid=\"1514\">\n                      core-js 为什么有这么多的 packages\n                      呢？实际上，它们各司其职，又紧密配合，接下来我们来具体分析。\n                    </p>\n                    <p data-nodeid=\"1515\">\n                      <strong data-nodeid=\"1648\"\n                        >core-js-pure 提供了不污染全局变量的垫片能力</strong\n                      >，比如我们可以按照：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> _from from <span class=\"hljs-string\">'core-js-pure/features/array/from'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> _flat from <span class=\"hljs-string\">'core-js-pure/features/array/flat'</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1517\">\n                      的方式，来实现独立的导出命名空间，进而避免全局变量的污染。\n                    </p>\n                    <p data-nodeid=\"1518\">\n                      <strong data-nodeid=\"1660\"\n                        >core-js-compact 维护了按照</strong\n                      ><a\n                        href=\"https://github.com/browserslist/browserslist\"\n                        data-nodeid=\"1655\"\n                        >browserslist</a\n                      ><strong data-nodeid=\"1661\">规范的垫片需求数据</strong\n                      >，来帮助我们找到“符合目标环境”的 polyfills\n                      需求集合，比如以下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> {\n</div></li><li><div class=\"code-word\">  list, <span class=\"hljs-comment\">// array of required modules</span>\n</div></li><li><div class=\"code-word\">  targets, <span class=\"hljs-comment\">// object with targets for each module</span>\n</div></li><li><div class=\"code-word\">} = require(<span class=\"hljs-string\">'core-js-compat'</span>)({\n</div></li><li><div class=\"code-word\">  targets: <span class=\"hljs-string\">'&gt; 2.5%'</span>\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1520\">\n                      就可以筛选出全球使用份额大于 2.5%\n                      的浏览器范围，并提供在这个范围下需要支持的垫片能力。\n                    </p>\n                    <p data-nodeid=\"1521\">\n                      <strong data-nodeid=\"1667\"\n                        >core-js-builder 可以结合 core-js-compact 以及\n                        core-js，并利用 webpack 能力，根据需求打包出 core-js\n                        代码</strong\n                      >。比如：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">require(<span class=\"hljs-string\">'core-js-builder'</span>)({\n</div></li><li><div class=\"code-word\">  targets: <span class=\"hljs-string\">'&gt; 0.5%'</span>,\n</div></li><li><div class=\"code-word\">  filename: <span class=\"hljs-string\">'./my-core-js-bundle.js'</span>,\n</div></li><li><div class=\"code-word\">}).then(code =&gt; {}).<span class=\"hljs-keyword\">catch</span>(error =&gt; {});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1523\">\n                      将会把符合需求的 core-js 垫片打包到<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1669\"\n                        >my-core-js-bundle.js</code\n                      >文件当中。整个流程可以用代码演示为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">require(<span class=\"hljs-string\">'./packages/core-js-builder'</span>)({ filename: <span class=\"hljs-string\">'./packages/core-js-bundle/index.js'</span> }).then(done).<span class=\"hljs-keyword\">catch</span>(error =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// eslint-disable-next-line no-console</span>\n</div></li><li><div class=\"code-word\">  console.error(error);\n</div></li><li><div class=\"code-word\">  process.exit(<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1525\">\n                      总之，根据分包的设计，我们能发现，<strong\n                        data-nodeid=\"1676\"\n                        >core-js\n                        将自身能力充分解耦，提供出的多个包都可以被其他项目所依赖</strong\n                      >。比如：\n                    </p>\n                    <ul data-nodeid=\"1526\">\n                      <li data-nodeid=\"1527\">\n                        <p data-nodeid=\"1528\">\n                          core-js-compact 可以被 Babel 生态使用，由 Babel\n                          分析出根据环境需要按需加载的垫片；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1529\">\n                        <p data-nodeid=\"1530\">\n                          core-js-builder 可以被 Node.js\n                          服务使用，构建出不同场景的垫片包。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1531\">\n                      宏观上的设计，体现了工程复用能力。下面我们通过一个微观\n                      polyfill 案例，从一个具体的垫片实现，进一步加深理解。\n                    </p>\n                    <h3 data-nodeid=\"1532\">如何复用一个 Polyfill 实现</h3>\n                    <p data-nodeid=\"1533\">\n                      <a\n                        href=\"https://tc39.es/ecma262/#sec-array.prototype.every\"\n                        data-nodeid=\"1683\"\n                        >Array.prototype.every</a\n                      >\n                      是一个常见且常用的数组原型上的方法。该方法用于测试一个数组内所有元素是否都能通过某个指定函数的测试，并最终返回一个布尔值来表示测试是否通过。它的浏览器兼容性<a\n                        href=\"https://www.caniuse.com/?search=array.prototype.every\"\n                        data-nodeid=\"1687\"\n                        >如下图</a\n                      >所示：\n                    </p>\n                    <p data-nodeid=\"1534\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/4F/Ciqc1F_q7bKAcYXcAALU37lw2JY310.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1691\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1535\">\n                      Array.prototype.every 的函数签名如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">arr.every(callback(element[, index[, array]])[, thisArg])\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1537\">\n                      对于一个有经验的前端程序员来说，如果浏览器不支持\n                      Array.prototype.every，手写实现一个 Array.prototype.every\n                      的 polyfill 并不困难，下面是\n                      <a\n                        href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every\"\n                        data-nodeid=\"1696\"\n                        >MDN</a\n                      >\n                      的一个实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (!Array.prototype.every) {\n</div></li><li><div class=\"code-word\">  Array.prototype.every = function(callbackfn, thisArg) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'use strict'</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> T, k;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span> == <span class=\"hljs-keyword\">null</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> TypeError(<span class=\"hljs-string\">'this is null or not defined'</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> O = Object(<span class=\"hljs-keyword\">this</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> len = O.length &gt;&gt;&gt; <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (typeof callbackfn !== <span class=\"hljs-string\">'function'</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> TypeError();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (arguments.length &gt; <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">      T = thisArg;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    k = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (k &lt; len) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">var</span> kValue;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (k in O) {\n</div></li><li><div class=\"code-word\">        kValue = O[k];\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">var</span> testResult = callbackfn.call(T, kValue, k, O);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (!testResult) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      k++;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1539\">\n                      核心思路很好理解：我们通过遍历数组，对数组的每一项调用\n                      CALLBACK\n                      求值进行返回是否通过测试。但是站在工程化的角度，从 core-js\n                      这样一个大型项目的视角出发，就不是这么简单了。比如，我们知道\n                      core-js-pure 不同于 core-js，它提供了<strong\n                        data-nodeid=\"1707\"\n                        >不污染命名空间</strong\n                      >的引用方式，因此上述 Array.prototype.every 的 polyfill\n                      核心逻辑实现，就需要被 core-js-pure 和 core-js\n                      同时引用，只要<strong data-nodeid=\"1708\"\n                        >区分最后导出的方式</strong\n                      >即可，那么按照这个思路，我们如何实现最大限度的复用呢？\n                    </p>\n                    <p data-nodeid=\"1540\">\n                      实际上，Array.prototype.every 的 polyfill\n                      核心逻辑实现在<code data-backticks=\"1\" data-nodeid=\"1710\"\n                        >./packages/core-js/modules/es.array.every.js</code\n                      >中，<a\n                        href=\"https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.array.every.js\"\n                        data-nodeid=\"1714\"\n                        >源码</a\n                      >如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">'use strict'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> $ = require(<span class=\"hljs-string\">'../internals/export'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> $every = require(<span class=\"hljs-string\">'../internals/array-iteration'</span>).every;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arrayMethodIsStrict = require(<span class=\"hljs-string\">'../internals/array-method-is-strict'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arrayMethodUsesToLength = require(<span class=\"hljs-string\">'../internals/array-method-uses-to-length'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> STRICT_METHOD = arrayMethodIsStrict(<span class=\"hljs-string\">'every'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> USES_TO_LENGTH = arrayMethodUsesToLength(<span class=\"hljs-string\">'every'</span>);\n</div></li><li><div class=\"code-word\">$({ target: <span class=\"hljs-string\">'Array'</span>, proto: <span class=\"hljs-keyword\">true</span>, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {\n</div></li><li><div class=\"code-word\">  every: <span class=\"hljs-function\">function <span class=\"hljs-title\">every</span><span class=\"hljs-params\">(callbackfn <span class=\"hljs-comment\">/* , thisArg */</span>)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 调用 $every 方法</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> $every(<span class=\"hljs-keyword\">this</span>, callbackfn, arguments.length &gt; <span class=\"hljs-number\">1</span> ? arguments[<span class=\"hljs-number\">1</span>] : undefined);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1542\">\n                      对应<code data-backticks=\"1\" data-nodeid=\"1717\"\n                        >$every</code\n                      ><a\n                        href=\"https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/array-iteration.js#L58\"\n                        data-nodeid=\"1720\"\n                        >源码</a\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> bind = require(<span class=\"hljs-string\">'../internals/function-bind-context'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> IndexedObject = require(<span class=\"hljs-string\">'../internals/indexed-object'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> toObject = require(<span class=\"hljs-string\">'../internals/to-object'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> toLength = require(<span class=\"hljs-string\">'../internals/to-length'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arraySpeciesCreate = require(<span class=\"hljs-string\">'../internals/array-species-create'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> push = [].push;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 对 \\`Array.prototype.{ forEach, map, filter, some, every, find, findIndex }\\` 等方法进行接模拟和接入</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> createMethod = function (TYPE) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 通过魔法数字来表示具体需要对哪种方法进行模拟</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> IS_MAP = TYPE == <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> IS_FILTER = TYPE == <span class=\"hljs-number\">2</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> IS_SOME = TYPE == <span class=\"hljs-number\">3</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> IS_EVERY = TYPE == <span class=\"hljs-number\">4</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> IS_FIND_INDEX = TYPE == <span class=\"hljs-number\">6</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> NO_HOLES = TYPE == <span class=\"hljs-number\">5</span> || IS_FIND_INDEX;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> function ($<span class=\"hljs-keyword\">this</span>, callbackfn, that, specificCreate) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> O = toObject($<span class=\"hljs-keyword\">this</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> self = IndexedObject(O);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 通过 bind 方法创建一个 boundFunction，保留 this 指向</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> boundFunction = bind(callbackfn, that, <span class=\"hljs-number\">3</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> length = toLength(self.length);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> create = specificCreate || arraySpeciesCreate;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> target = IS_MAP ? create($<span class=\"hljs-keyword\">this</span>, length) : IS_FILTER ? create($<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-number\">0</span>) : undefined;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> value, result;\n</div></li><li><div class=\"code-word\">   &nbsp;<span class=\"hljs-comment\">// 遍历循环并执行回调方法</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (;length &gt; index; index++) <span class=\"hljs-keyword\">if</span> (NO_HOLES || index in self) {\n</div></li><li><div class=\"code-word\">      value = self[index];\n</div></li><li><div class=\"code-word\">      result = boundFunction(value, index, O);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (TYPE) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (IS_MAP) target[index] = result; <span class=\"hljs-comment\">// map</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (result) <span class=\"hljs-keyword\">switch</span> (TYPE) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;              <span class=\"hljs-comment\">// some</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>: <span class=\"hljs-keyword\">return</span> value;             <span class=\"hljs-comment\">// find</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>: <span class=\"hljs-keyword\">return</span> index;             <span class=\"hljs-comment\">// findIndex</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>: push.call(target, value); <span class=\"hljs-comment\">// filter</span>\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (IS_EVERY) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;  <span class=\"hljs-comment\">// every</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> IS_FIND_INDEX ? -<span class=\"hljs-number\">1</span> : IS_SOME || IS_EVERY ? IS_EVERY : target;\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  forEach: createMethod(<span class=\"hljs-number\">0</span>),\n</div></li><li><div class=\"code-word\">  map: createMethod(<span class=\"hljs-number\">1</span>),\n</div></li><li><div class=\"code-word\">  filter: createMethod(<span class=\"hljs-number\">2</span>),\n</div></li><li><div class=\"code-word\">  some: createMethod(<span class=\"hljs-number\">3</span>),\n</div></li><li><div class=\"code-word\">  every: createMethod(<span class=\"hljs-number\">4</span>),\n</div></li><li><div class=\"code-word\">  find: createMethod(<span class=\"hljs-number\">5</span>),\n</div></li><li><div class=\"code-word\">  findIndex: createMethod(<span class=\"hljs-number\">6</span>)\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1544\">\n                      同样是使用了遍历的方式，并由<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1723\"\n                        >../internals/function-bind-context</code\n                      >提供 this 绑定能力，用魔法常量处理<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1725\"\n                        >forEach、map、filter、some、every、find、findIndex</code\n                      >这些数组原型方法的不同方法。\n                    </p>\n                    <p data-nodeid=\"1545\">\n                      重点来了，在 core-js 中，作者通过<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1728\"\n                        >../internals/export</code\n                      >方法导出实现原型，<a\n                        href=\"https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/export.js\"\n                        data-nodeid=\"1732\"\n                        >源码</a\n                      >如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = function (options, source) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> TARGET = options.target;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> GLOBAL = options.global;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> STATIC = options.stat;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> FORCED, target, key, targetProperty, sourceProperty, descriptor;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (GLOBAL) {\n</div></li><li><div class=\"code-word\">    target = global;\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (STATIC) {\n</div></li><li><div class=\"code-word\">    target = global[TARGET] || setGlobal(TARGET, {});\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    target = (global[TARGET] || {}).prototype;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (target) <span class=\"hljs-keyword\">for</span> (key in source) {\n</div></li><li><div class=\"code-word\">    sourceProperty = source[key];\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (options.noTargetGet) {\n</div></li><li><div class=\"code-word\">      descriptor = getOwnPropertyDescriptor(target, key);\n</div></li><li><div class=\"code-word\">      targetProperty = descriptor &amp;&amp; descriptor.value;\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> targetProperty = target[key];\n</div></li><li><div class=\"code-word\">    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? <span class=\"hljs-string\">'.'</span> : <span class=\"hljs-string\">'#'</span>) + key, options.forced);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!FORCED &amp;&amp; targetProperty !== undefined) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (typeof sourceProperty === typeof targetProperty) <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">      copyConstructorProperties(sourceProperty, targetProperty);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (options.sham || (targetProperty &amp;&amp; targetProperty.sham)) {\n</div></li><li><div class=\"code-word\">      createNonEnumerableProperty(sourceProperty, <span class=\"hljs-string\">'sham'</span>, <span class=\"hljs-keyword\">true</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    redefine(target, key, sourceProperty, options);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1547\">\n                      对应我们的 Array.prototype.every<a\n                        href=\"https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.array.every.js\"\n                        data-nodeid=\"1737\"\n                        >源码</a\n                      >，参数为：<code data-backticks=\"1\" data-nodeid=\"1739\"\n                        >target: 'Array', proto: true</code\n                      >，表明 coe-js 需要在数组 Array\n                      的原型上，以“污染数组原型”的方式来扩展方法。\n                    </p>\n                    <p data-nodeid=\"1548\">\n                      而 core-js-pure 则单独维护了一份 export 镜像<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1742\"\n                        >../internals/export</code\n                      >，其<a\n                        href=\"https://github.com/zloirock/core-js/blob/master/packages/core-js-pure/override/internals/export.js\"\n                        data-nodeid=\"1746\"\n                        >源码</a\n                      >我在这里不做过多讲解，你可以在本节内容学习后进一步查看。\n                    </p>\n                    <p data-nodeid=\"1549\">\n                      同时，core-js-pure 包中的 Override\n                      文件，实际上是在构建阶段，复制了 packages/core-js/\n                      内的核心逻辑（<a\n                        href=\"https://github.com/zloirock/core-js/blob/master/Gruntfile.js#L73\"\n                        data-nodeid=\"1751\"\n                        >源码在这里</a\n                      >），同时提供了复写这些核心 polyfills\n                      逻辑的能力，也是通过构建流程，进行 core-js-pure/override\n                      替换覆盖：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">\texpand: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">\tcwd: <span class=\"hljs-string\">'./packages/core-js-pure/override/'</span>,\n</div></li><li><div class=\"code-word\">\tsrc: <span class=\"hljs-string\">'**'</span>,\n</div></li><li><div class=\"code-word\">\tdest: <span class=\"hljs-string\">'./packages/core-js-pure'</span>,\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1551\">\n                      这是一种非常巧妙的“利用构建能力，实现复用”的方案。但我认为，既然是\n                      Monorepo 风格的仓库，也许一种更好的设计是将<strong\n                        data-nodeid=\"1758\"\n                        >core-js 核心 polyfills 再单独拆到一个包中，core-js 和\n                        core-js-pure 分别进行引用</strong\n                      >——这种方式更能利用 Monorepo\n                      能力，且减少了构建过程中的魔法处理。\n                    </p>\n                    <h3 data-nodeid=\"1552\">寻找最佳 Polyfill 方案</h3>\n                    <p data-nodeid=\"1553\">\n                      前文多次提到了\n                      polyfill/垫片/补丁（下文混用这三种说法），这里我们正式对\n                      polyfill 进行一个定义：\n                    </p>\n                    <blockquote data-nodeid=\"1554\">\n                      <p data-nodeid=\"1555\">\n                        A polyfill, or polyfiller, is a piece of code (or\n                        plugin) that provides the technology that you, the\n                        developer, expect the browser to provide natively.\n                        Flattening the API landscape if you will.\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1556\">\n                      简单来说，<strong data-nodeid=\"1767\"\n                        >polyfill\n                        就是用社区上提供的一段代码，让我们在不兼容某些新特性的浏览器上，使用该新特性</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1557\">\n                      随着前端的发展，尤其是 ECMAScript\n                      的迅速成长以及浏览器的频繁更新换代，前端使用 polyfills\n                      技术的情况屡见不鲜。<strong data-nodeid=\"1778\"\n                        >那么如何能在工程中，寻找并设计一个“最完美”的 polyfill\n                        方案呢？<strong data-nodeid=\"1777\"\n                          >注意，这里的完美指的是</strong\n                        >侵入性最小，工程化、自动化程度最高，业务影响最低</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1558\">\n                      第一种方案：<strong data-nodeid=\"1784\">手动打补丁</strong\n                      >。这种方式最为简单直接，也能天然做到“按需打补丁”，但是这不是一种工程化的解决方式，方案原始而难以维护，同时对于\n                      polyfill 的实现要求较高。\n                    </p>\n                    <p data-nodeid=\"1559\">\n                      于是，es5-shim 和 es6-shim\n                      等“轮子”出现了，它们伴随着前端开发走过了一段艰辛岁月。但\n                      es5-shim 和 es6-shim 这种笨重的方案很快被 babel-polyfill\n                      取代，babel-polyfill 融合了 core-js 和\n                      regenerator-runtime。\n                    </p>\n                    <p data-nodeid=\"1560\">\n                      但如果粗暴地使用 babel-polyfill\n                      一次性全量导入到项目中，不和 @babel/preset-env\n                      等方案结合，babel-polyfill\n                      会将其所包含的所有补丁都应用在项目当中，这样直接造成了项目\n                      size 过大的问题，且存在污染全局变量的潜在问题。\n                    </p>\n                    <p data-nodeid=\"1561\">\n                      于是，<strong data-nodeid=\"1792\"\n                        >babel-polyfill 结合 @babel/preset-env +\n                        useBuiltins（entry） + preset-env targets 的方案</strong\n                      >如今更为流行，@babel/preset-env 定义了 Babel\n                      所需插件预设，同时由 Babel 根据 preset-env targets\n                      配置的支持环境，自动按需加载 polyfills，使用方式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"presets\"</span>: [\n</div></li><li><div class=\"code-word\">    [<span class=\"hljs-string\">\"@babel/env\"</span>, {\n</div></li><li><div class=\"code-word\">      useBuiltIns: <span class=\"hljs-string\">'entry'</span>,\n</div></li><li><div class=\"code-word\">      targets: { chrome: <span class=\"hljs-number\">44</span> }\n</div></li><li><div class=\"code-word\">    }]\n</div></li><li><div class=\"code-word\">  ]\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1563\">这样我们在工程代码入口处的：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'@babel/polyfill'</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1565\">会被编译为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"core-js/XXXX/XXXX\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"core-js/XXXX/XXXXX\"</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1567\">\n                      这样的方式省力省心。也是 core-js 和 Babel\n                      深度绑定并结合的典型案例。\n                    </p>\n                    <p data-nodeid=\"1568\">\n                      上文提到了 babel-polyfill 融合了 core-js 和\n                      regenerator-runtime，既然如此，我们也可以不使用\n                      babel-polyfill，而直接使用 core-js。这里我根据\n                      <a\n                        href=\"https://www.npmtrends.com/babel-polyfill-vs-core-js-vs-es5-shim-vs-es6-shim\"\n                        data-nodeid=\"1799\"\n                        >babel-polyfill vs core-js vs es5-shim vs es6-shim</a\n                      >\n                      的使用频率情况，进行比对，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1569\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/4F/Ciqc1F_q7dKAanOXAAHwZCycIb4392.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1803\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1570\">\n                      <p style=\"text-align: center\">\n                        babel-polyfill vs core-js vs es5-shim vs es6-shim\n                        使用频率对比图\n                      </p>\n                    </div>\n                    <p data-nodeid=\"1571\">\n                      我们看到，<strong data-nodeid=\"1809\"\n                        >core-js 使用最多</strong\n                      >，这是因为它既可以在项目中单独使用，也可以和 Babel\n                      绑定，作为更低层的依赖出现。\n                    </p>\n                    <p data-nodeid=\"1572\">\n                      我们再思考一个问题：如果某个业务代码中，并没有用到配置环境填充的\n                      polyfills，那么这些 polyfills\n                      的引入依然出现了引用浪费的情况。实际上环境需要是一回事儿，代码是否需要却是另一回事儿。比如，我的\n                      MPA（多页面应用）项目需要提供 Promise\n                      Polyfill，但是某个业务页面中，并没有使用 Promise\n                      特性，理想情况并不需要在当前页面中引入 Promise Polyfill\n                      bundle。\n                    </p>\n                    <p data-nodeid=\"2612\" class=\"te-preview-highlight\">\n                      针对这个问题，@babel/preset-env + useBuiltins（usage） +\n                      preset-env targets 方案就出现了，<strong\n                        data-nodeid=\"2622\"\n                        >注意这里的 useBuiltins 配置为\n                        usage，它可以真正根据代码情况，分析\n                        AST（抽象语法树）进行更细粒度的按需引用</strong\n                      >。但是这种基于静态编译的按需加载补丁也是相对的，因为\n                      JavaScript 是一种弱规则的动态语言，比如这样的代码：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2618\"\n                        >foo.includes(() =&gt; {//...})</code\n                      >，我们无法判断出这里的\n                      <code data-backticks=\"1\" data-nodeid=\"2620\"\n                        >includes</code\n                      >\n                      是数组原型方法还是字符串原型方法，因此一般做法只能将数组原型方法和字符串原型方法同时打包为\n                      polyfill bundle。\n                    </p>\n\n                    <p data-nodeid=\"1574\">\n                      除了在打包构建阶段植入 polyfill\n                      以外，另外一个思路是“在线动态打补丁”，这种方案以\n                      <a href=\"https://polyfill.io/v3/\" data-nodeid=\"1824\"\n                        >Polyfill.io</a\n                      >\n                      为代表，它提供了 CDN 服务，使用者可以按照所需环境，<a\n                        href=\"https://polyfill.io/v3/url-builder/\"\n                        data-nodeid=\"1828\"\n                        >生成打包链接</a\n                      >：\n                    </p>\n                    <p data-nodeid=\"1575\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/5A/Ciqc1F_r6aWAUh6OAAGLnnSGGnY780.png\"\n                        alt=\"Lark20201230-104425.png\"\n                        data-nodeid=\"1832\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1576\">\n                      如<code data-backticks=\"1\" data-nodeid=\"1834\"\n                        >https://polyfill.io/v3/polyfill.min.js?features=es2015</code\n                      >，在业务中我们可以直接引入 polyfills bundle：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&lt;script src=\"https://polyfill.io/v3/polyfill.min.js?features=es2015\"&gt;&lt;/script&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1578\">\n                      <strong data-nodeid=\"1840\"\n                        >在高版本浏览器上，可能会返回空内容，因为该浏览器已经支持了\n                        ES2015 特性。如果在低版本浏览器上，将会得到真实的\n                        polyfills bundle</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1579\">\n                      从工程化的角度来说，<strong data-nodeid=\"1846\"\n                        >一个趋于完美的 polyfill\n                        设计应该满足的核心原则是按需加载补丁</strong\n                      >，这个按需加载主要包括两方面：\n                    </p>\n                    <ul data-nodeid=\"1580\">\n                      <li data-nodeid=\"1581\">\n                        <p data-nodeid=\"1582\">按照用户终端环境</p>\n                      </li>\n                      <li data-nodeid=\"1583\">\n                        <p data-nodeid=\"1584\">按照业务代码使用情况</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1585\">\n                      因为按需加载补丁，意味着更小的 bundle\n                      size，直接决定了应用的性能。\n                    </p>\n                    <h3 data-nodeid=\"1586\">总结</h3>\n                    <p data-nodeid=\"1587\">\n                      从对前端项目的影响来讲，core-js 不只是一个 polyfill\n                      仓库；从前端技术设计的角度来看，core-js\n                      也能让我们获得更多启发和灵感。这一讲我们分析了 core-js\n                      的设计实现，并由此延展出了工程中 polyfill\n                      设计的方方面面。但依然留下了几个问题：\n                    </p>\n                    <ul data-nodeid=\"1588\">\n                      <li data-nodeid=\"1589\">\n                        <p data-nodeid=\"1590\">\n                          core-js 和 Babel\n                          生态绑定在一起，它们到底有什么联系，如何实现密切配合？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1591\">\n                        <p data-nodeid=\"1592\">\n                          core-js 如何和 @babel/preset-env +\n                          useBuiltins（usage）配合，并利用 AST\n                          技术，实现代码级别的按需引入？\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1593\" class=\"\">\n                      前端基础建设和工程化，每一个环节都相互关联，我们将会在“梳理混乱的\n                      Babel，不再被编译报错困扰”一讲中，继续进行更多探索。\n                    </p>\n            "}