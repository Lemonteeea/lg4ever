{"title":"13 | 缓存优化：那些基于缓存的优化方案","context":"\n                    <p data-nodeid=\"59555\">\n                      上节课的思考题是 Webpack 4 中 Tree Shaking\n                      的触发条件有哪些？我们一起来回忆一下，要让引入的模块支持\n                      Tree Shaking，一般有 4 点需要注意：\n                    </p>\n\n                    <ol data-nodeid=\"60053\">\n                      <li data-nodeid=\"60054\">\n                        <p data-nodeid=\"60055\" class=\"\">\n                          引入的模块需要是 ES6 类型的，CommonJS 类型的则不支持。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"60056\">\n                        <p data-nodeid=\"60057\">引入方式不能使用 default。</p>\n                      </li>\n                      <li data-nodeid=\"60058\">\n                        <p data-nodeid=\"60059\">\n                          引用第三方依赖包的情况下，对应的 package.json 需要设置\n                          sideEffects:false 来表明无副作用。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"60060\">\n                        <p data-nodeid=\"60061\">\n                          使用 Babel 的情况下，需要注意不同版本 Babel\n                          对于模块化的预设不同。\n                        </p>\n                      </li>\n                    </ol>\n\n                    <p data-nodeid=\"58816\">\n                      在前面的两节课中，我们讨论了 Webpack\n                      在编译和优化打包阶段的提效方向，以及各自对应的实践方法。除了这些针对具体处理过程的优化方法外，还有一个特定类型的优化方法没有聊到，就是利用缓存数据来加速构建过程的处理。这节课我们就将介绍它。\n                    </p>\n                    <h3 data-nodeid=\"58817\">缓存优化的基本原理</h3>\n                    <p data-nodeid=\"60562\" class=\"\">\n                      在讲缓存优化的原理之前我们先来看下面的例子，如下面的代码和图片所示（本节课的完整示例代码参见\n                      <a\n                        href=\"https://github.com/fe-efficiency/lessons_fe_efficiency/tree/master/13_cache\"\n                        data-nodeid=\"60568\"\n                        >13_cache</a\n                      >）：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">./src/example-basic.js\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> _ <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lodash'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"62287\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/51/13/Ciqc1F9kXKSADBZcAAE6sFADuy0456.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"62290\"\n                      /><br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/51/1E/CgqCHl9kXKmAUFg3AAErEUA8F2E549.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"62294\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"58822\">\n                      可以看到，在没有增加任何优化设置的情况下，初次构建时在\n                      optimizeChunkAssets 阶段的耗时是 1000ms\n                      左右，而再次构建时的耗时直接降到了\n                      18ms，几乎可以忽略不计。\n                    </p>\n                    <p data-nodeid=\"58823\">\n                      这里的原因就在于，Webpack 4 内置了压缩插件\n                      TerserWebpackPlugin，且默认开启了<a\n                        href=\"https://webpack.js.org/plugins/terser-webpack-plugin/#cache\"\n                        data-nodeid=\"58910\"\n                        >缓存</a\n                      >参数。在初次构建的压缩代码过程中，就将这一阶段的结果写入了缓存目录（node_modules/.cache/terser-webpack-plugin/）中，当再次构建进行到压缩代码阶段时，即可对比读取已有缓存，如下面的代码所示（相关的代码逻辑在插件的<a\n                        href=\"https://github.com/webpack-contrib/terser-webpack-plugin/blob/master/src/index.js\"\n                        data-nodeid=\"58916\"\n                        >源代码</a\n                      >中可以看到）。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">terser-webpack-plugin/src/index.js:\n</div></li><li><div class=\"code-word\">...\n</div></li><li><div class=\"code-word\">if (cache.isEnabled()) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> taskResult;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">    taskResult = <span class=\"hljs-keyword\">await</span> cache.get(task); <span class=\"hljs-comment\">//读取缓存</span>\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">catch</span> (ignoreError) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> enqueue(task); <span class=\"hljs-comment\">//缓存未命中情况下执行任务</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  task.callback(taskResult); <span class=\"hljs-comment\">//缓存命中情况下返回缓存结果</span>\n</div></li><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">  const enqueue = <span class=\"hljs-keyword\">async</span> (task) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> taskResult;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (cache.isEnabled() &amp;&amp; !taskResult.error) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">await</span> cache.store(task, taskResult); <span class=\"hljs-comment\">//写入缓存</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"58825\">\n                      以上就是 TerserWebpackPlugin\n                      插件中利用缓存的基本原理。事实上，在 Webpack\n                      构建流程中还有许多处理过程支持使用缓存，下面我们就来梳理编译和优化打包阶段分别有哪些任务环境可以用到缓存。\n                    </p>\n                    <h3 data-nodeid=\"58826\">编译阶段的缓存优化</h3>\n                    <p data-nodeid=\"58827\">\n                      编译过程的耗时点主要在使用不同加载器（Loader）来编译模块的过程。下面我们来分别看下几个典型\n                      Loader 中的缓存处理：\n                    </p>\n                    <h4 data-nodeid=\"58828\">Babel-loader</h4>\n                    <p data-nodeid=\"62791\" class=\"\">\n                      <a\n                        href=\"https://webpack.js.org/loaders/babel-loader/\"\n                        data-nodeid=\"62794\"\n                        >Babel-loader</a\n                      >\n                      是绝大部分项目中会使用到的 JS/JSX/TS 编译器。在\n                      Babel-loader 中，与缓存相关的设置主要有：\n                    </p>\n\n                    <ul data-nodeid=\"58830\">\n                      <li data-nodeid=\"58831\">\n                        <p data-nodeid=\"58832\">\n                          <strong data-nodeid=\"58932\">cacheDirectory</strong\n                          >：默认为 false，即不开启缓存。当值为 true\n                          时开启缓存并使用默认缓存目录（./node_modules/.cache/babel-loader/），也可以指定其他路径值作为缓存目录。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"58833\">\n                        <p data-nodeid=\"58834\">\n                          <strong data-nodeid=\"58937\">cacheIdentifier</strong\n                          >：用于计算缓存标识符。默认使用 Babel\n                          相关依赖包的版本、babelrc\n                          配置文件的内容，以及环境变量等与模块内容一起参与计算缓存标识符。如果上述内容发生变化，即使模块内容不变，也不能命中缓存。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"58835\">\n                        <p data-nodeid=\"58836\">\n                          <strong data-nodeid=\"58942\">cacheCompression</strong\n                          >：默认为 true，将缓存内容压缩为 gz\n                          包以减小缓存目录的体积。在设为 false\n                          的情况下将跳过压缩和解压的过程，从而提升这一阶段的速度。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"63772\">\n                      开启缓存选项前后的构建时长效果如图所示（示例中运行 npm run\n                      build:babel），可以看到，由于开启了 Babel\n                      的缓存，再次构建的速度比初次构建时要快了许多。\n                    </p>\n                    <p data-nodeid=\"64514\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/51/1E/CgqCHl9kXL6AIfhNAAB0Ns1VzFM141.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"64517\"\n                      /><br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/51/1E/CgqCHl9kXMOAND8YAACPsQpEG1k472.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"64521\"\n                      />\n                    </p>\n\n                    <h4 data-nodeid=\"58840\">Cache-loader</h4>\n                    <p data-nodeid=\"58841\">\n                      在编译过程中利用缓存的第二种方式是使用<a\n                        href=\"https://webpack.js.org/loaders/cache-loader/\"\n                        data-nodeid=\"58954\"\n                      >\n                        Cache-loader</a\n                      >。在使用时，需要将 cache-loader\n                      添加到对构建效率影响较大的 Loader（如 babel-loader\n                      等）之前，如下面的代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">./webpack.cache.config.js\n</div></li><li><div class=\"code-word\">...\n</div></li><li><div class=\"code-word\">module: {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">rules</span>: [\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,\n</div></li><li><div class=\"code-word\">      use: [<span class=\"hljs-string\">'cache-loader'</span>, <span class=\"hljs-string\">'babel-loader'</span>],\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">  ],\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">...\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"65498\">\n                      执行两次构建后可以发现，使用 cache-loader 后，比使用\n                      babel-loader 的开启缓存选项后的构建时间更短，如下图所示：\n                    </p>\n                    <p data-nodeid=\"66240\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/51/1E/CgqCHl9kXOqAGqBaAAB8XJNiH2c187.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"66243\"\n                      /><br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/51/13/Ciqc1F9kXO-Ae1fcAABt0doSQD0218.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"66247\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"58846\">\n                      主要原因是 babel-loader 中的<strong data-nodeid=\"58972\"\n                        >缓存信息较少</strong\n                      >，而 cache-loader 中存储的<strong data-nodeid=\"58973\"\n                        >Buffer 形式的数据处理效率更高</strong\n                      >。下面的示例代码，是 babel-loader 和 cache-loader\n                      入口模块的缓存信息对比：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">//babel-loader中的缓存数据</span>\n</div></li><li><div class=\"code-word\">{<span class=\"hljs-attr\">\"ast\"</span>:<span class=\"hljs-literal\">null</span>,<span class=\"hljs-attr\">\"code\"</span>:<span class=\"hljs-string\">\"import _ from 'lodash';\"</span>,<span class=\"hljs-attr\">\"map\"</span>:<span class=\"hljs-literal\">null</span>,<span class=\"hljs-attr\">\"metadata\"</span>:{},<span class=\"hljs-attr\">\"sourceType\"</span>:<span class=\"hljs-string\">\"module\"</span>}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//cache-loader中的缓存数据</span>\n</div></li><li><div class=\"code-word\">{<span class=\"hljs-attr\">\"remainingRequest\"</span>:<span class=\"hljs-string\">\"...lessons_fe_efficiency/13_cache/node_modules/babel-loader/lib/index.js!.../lessons_fe_efficiency/13_cache/src/example-basic.js\"</span>,<span class=\"hljs-attr\">\"dependencies\"</span>:[{<span class=\"hljs-attr\">\"path\"</span>:<span class=\"hljs-string\">\"...lessons_fe_efficiency/13_cache/src/example-basic.js\"</span>,<span class=\"hljs-attr\">\"mtime\"</span>:<span class=\"hljs-number\">1599191174705</span>},{<span class=\"hljs-attr\">\"path\"</span>:<span class=\"hljs-string\">\"...lessons_fe_efficiency/13_cache/node_modules/cache-loader/dist/cjs.js\"</span>,<span class=\"hljs-attr\">\"mtime\"</span>:<span class=\"hljs-number\">499162500000</span>},{<span class=\"hljs-attr\">\"path\"</span>:<span class=\"hljs-string\">\".../lessons_fe_efficiency/13_cache/node_modules/babel-loader/lib/index.js\"</span>,<span class=\"hljs-attr\">\"mtime\"</span>:<span class=\"hljs-number\">499162500000</span>}],<span class=\"hljs-attr\">\"contextDependencies\"</span>:[],<span class=\"hljs-attr\">\"result\"</span>:[{<span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"Buffer\"</span>,<span class=\"hljs-attr\">\"data\"</span>:<span class=\"hljs-string\">\"base64:aW1wb3J0IF8gZnJvbSAnbG9kYXNoJzs=\"</span>},<span class=\"hljs-literal\">null</span>]}\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"58848\">优化打包阶段的缓存优化</h3>\n                    <h4 data-nodeid=\"58849\">生成 ChunkAsset 时的缓存优化</h4>\n                    <p data-nodeid=\"67246\" class=\"\">\n                      在 Webpack 4 中，生成 ChunkAsset\n                      过程中的缓存优化是受限制的：只有在 watch\n                      模式下，且配置中开启\n                      <a\n                        href=\"https://v4.webpack.js.org/configuration/other-options/#cache\"\n                        data-nodeid=\"67250\"\n                        >cache</a\n                      >\n                      时（development\n                      模式下自动开启）才能在这一阶段执行缓存的逻辑。这是因为，在\n                      Webpack 4 中，缓存插件是基于内存的，只有在 watch\n                      模式下才能在内存中获取到相应的缓存数据对象。而在 Webpack 5\n                      中这一问题得到解决，具体的我们会在后续课程中再次展开。\n                    </p>\n\n                    <h4 data-nodeid=\"58851\">代码压缩时的缓存优化</h4>\n                    <p data-nodeid=\"58852\">\n                      在上一课时中曾提到，在代码压缩阶段，对于 JS\n                      的压缩，TerserWebpackPlugin 和 UglifyJSPlugin\n                      都是支持缓存设置的。而对于 CSS 的压缩，目前最新发布的\n                      CSSMinimizerWebpackPlugin 支持且默认开启缓存，其他的插件如\n                      OptimizeCSSAssetsPlugin 和 OptimizeCSSNanoPlugin\n                      目前还不支持使用缓存。\n                    </p>\n                    <p data-nodeid=\"68228\">\n                      TerserWebpackPlugin\n                      插件的效果在本节课的开头部分我们已经演示过了，这里再来看一下\n                      CSSMinimizerWebpackPlugin\n                      的缓存效果对比，如下面的图片所示，开启该插件的缓存后，再次构建的时长降低到了初次构建的\n                      1/4。\n                    </p>\n                    <p data-nodeid=\"68970\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/51/13/Ciqc1F9kXQGAWkf8AACuXoea9dE075.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"68973\"\n                      /><br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/51/1E/CgqCHl9kXQaAEle1AACx-Pmol-Q677.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"68977\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"58856\">\n                      以上就是 Webpack 4\n                      中编译与优化打包阶段可用的几种缓存方案。接下来我们再来看下在构建过程中使用缓存的一些注意点。\n                    </p>\n                    <h3 data-nodeid=\"58857\">缓存的失效</h3>\n                    <p data-nodeid=\"58858\">\n                      尽管上面示例所显示的再次构建时间要比初次构建时间快很多，但前提是两次构建没有任何代码发生变化，也就是说，最佳效果是在缓存完全命中的情况下。而现实中，通常需要重新构建的原因是代码发生了变化。因此<strong\n                        data-nodeid=\"58997\"\n                        >如何最大程度地让缓存命中</strong\n                      >，成为我们选择缓存方案后首先要考虑的事情。\n                    </p>\n                    <h4 data-nodeid=\"58859\">\n                      缓存标识符发生变化导致的缓存失效\n                    </h4>\n                    <p data-nodeid=\"58860\">\n                      在上面介绍的支持缓存的 Loader\n                      和插件中，会根据一些固定字段的值加上所处理的模块或 Chunk\n                      的数据 hash\n                      值来生成对应缓存的标识符，例如特定依赖包的版本、对应插件的配置项信息、环境变量等。一旦其中的值发生变化，对应缓存标识符就会发生改变。这也意味着对应工具中，<strong\n                        data-nodeid=\"59004\"\n                        >所有之前的缓存都将失效</strong\n                      >。因此，通常情况下我们需要尽可能少地变更会影响到缓存标识符生成的字段。\n                    </p>\n                    <p data-nodeid=\"58861\">\n                      其中<strong data-nodeid=\"59010\">尤其需要注意的是</strong\n                      >，在许多项目的集成构建环境中，特定依赖包由于安装时所生成的语义化版本，导致构建版本时常自动更新，并造成缓存失效。因此，建议大家还是在使用缓存时根据项目的构建使用场景来合理设置对应缓存标识符的计算属性，从而尽可能地减少因为标识符变化而导致缓存失效的情况。\n                    </p>\n                    <h4 data-nodeid=\"58862\">编译阶段的缓存失效</h4>\n                    <p data-nodeid=\"58863\">\n                      编译阶段的执行时间由每个模块的编译时间相加而成。在开启缓存的情况下，代码发生变化的模块将被重新编译，但不影响它所依赖的及依赖它的其他模块，其他模块将继续使用缓存。因此，这一阶段不需要考虑缓存失效扩大化的问题。\n                    </p>\n                    <h4 data-nodeid=\"58864\">优化打包阶段的缓存失效</h4>\n                    <p data-nodeid=\"69954\">\n                      优化打包阶段的缓存失效问题则需要引起注意。还是以课程开头的\n                      example-basic\n                      为例，在使用缓存快速构建后，当我们任意修改入口文件的代码后会发现，代码压缩阶段的时间再次变为和初次构建时相近，也就是说，这一\n                      Chunk 的 Terser 插件的缓存完全失效了，如下面的图片所示。\n                    </p>\n                    <p data-nodeid=\"70696\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/51/13/Ciqc1F9kXRGAUqisAAEy5POkOmg344.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"70699\"\n                      /><br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/51/1E/CgqCHl9kXRaAH-yTAAEq_mHfoPo473.png\"\n                        alt=\"Drawing 9.png\"\n                        data-nodeid=\"70703\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"58868\">\n                      之所以会出现这样的结果，是因为，尽管在模块编译阶段每个模块是单独执行编译的，但是当进入到代码压缩环节时，各模块已经被组织到了相关联的\n                      Chunk 中。如上面的示例，4 个模块最后只生成了一个\n                      Chunk，任何一个模块发生变化都会导致整个 Chunk\n                      的内容发生变化，而使之前保存的缓存失效。\n                    </p>\n                    <p data-nodeid=\"58869\">\n                      在知道了失效原因后，<strong data-nodeid=\"59031\"\n                        >对应的优化思路也就显而易见了</strong\n                      >：尽可能地把那些不变的处理成本高昂的模块打入单独的 Chunk\n                      中。这就涉及了 Webpack 中的分包配置——<a\n                        href=\"https://webpack.js.org/configuration/optimization/#optimizationsplitchunks\"\n                        data-nodeid=\"59029\"\n                        >splitChunks</a\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"58870\">使用 splitChunks 优化缓存利用率</h4>\n                    <p data-nodeid=\"58871\">\n                      构建分包的好处有许多，比如合并通用依赖、提升构建缓存利用率、提升资源访问的缓存利用率、资源懒加载等，我们只讨论其中提升构建缓存利用率的部分。在上面示例的基础上，只要对设定稍加更改（webpack.cache-miss.config.js），就会看到，即使变更了入口模块的代码，也不会对压缩阶段的时间产生多少影响，因为主要的依赖包已经分离为独立的\n                      Chunk，如下面的代码和图片所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">./webpack.cache-miss.config.js\n</div></li><li><div class=\"code-word\">...\n</div></li><li><div class=\"code-word\">optimization: {\n</div></li><li><div class=\"code-word\">  splitChunks: {\n</div></li><li><div class=\"code-word\">    chunks: <span class=\"hljs-string\">'all'</span>,\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">},\n</div></li><li><div class=\"code-word\">...\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"73809\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/51/1E/CgqCHl9kXSeAOtCSAAEiD0YND3g006.png\"\n                        alt=\"Drawing 10.png\"\n                        data-nodeid=\"73812\"\n                      />\n                    </p>\n\n                    <h3 data-nodeid=\"72792\">其他使用缓存的注意事项</h3>\n                    <h4 data-nodeid=\"72793\">CI/CD 中的缓存目录问题</h4>\n                    <p data-nodeid=\"72794\">\n                      在许多自动化集成的系统中，项目的构建空间会在每次构建执行完毕后，立即回收清理。在这种情况下，默认的项目构建缓存目录（node_mo\n                      dules/.cache）将无法留存，导致即使项目中开启了缓存设置，也无法享受缓存的便利性，反而因为需要写入缓存文件而浪费额外的时间。因此，在集成化的平台中构建部署的项目，如果需要使用缓存，则需要根据对应平台的规范，将缓存设置到公共缓存目录下。这类问题我们会在第三模块部署优化中再次展开。\n                    </p>\n                    <h4 data-nodeid=\"72795\">缓存的清理</h4>\n                    <p data-nodeid=\"72796\">\n                      缓存的便利性本质在于用磁盘空间换取构建时间。对于一个大量使用缓存的项目，随着时间的流逝，缓存空间会不断增大。这在只有少数项目的个人电脑中还不是非常大的问题，但对于上述多项目的集成环境而言，则需要考虑对缓存区域的定期清理。\n                    </p>\n                    <h4 data-nodeid=\"72797\">与产物的持久化缓存相区别</h4>\n                    <p data-nodeid=\"72798\">\n                      这节课我们没有谈到浏览器端加载资源的缓存问题，以及相对应的如何在\n                      Webpack 中生成产物的持久化缓存方法（即那些你可能比较熟悉的\n                      hash、chunkhash、contenthash），因为这一部分知识所影响的是项目访问的性能，而对构建的效率没有影响。希望你在学习时，清楚地区分这两者的区别。\n                    </p>\n                    <h3 data-nodeid=\"72799\">总结</h3>\n                    <p data-nodeid=\"72800\">\n                      今天我们聊了 Webpack\n                      常规构建效率优化的第三个方面：缓存优化主题的内容。Webpack\n                      的构建缓存优化分为两个阶段：编译阶段的针对 Loader\n                      的缓存优化，以及优化打包阶段的针对压缩代码过程的缓存优化。除了了解这些优化的工具和设置外，在使用缓存时还需要额外注意如何减少缓存的失效。此外，针对不同的构建环境，还需要考虑到缓存目录的留存与清理等问题。\n                    </p>\n                    <p data-nodeid=\"72801\">\n                      这节课的<strong data-nodeid=\"72822\">课后思考题是</strong\n                      >：课程中介绍的几种支持缓存的工具在设定上有哪些相似的功能选项？建议你在课后对它们做一个整理对比，以便加深印象。\n                    </p>\n            "}