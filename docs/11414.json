{"title":"12&nbsp;| 回溯：我把回溯总结成一个公式，回溯题一出就用它","context":"\n                    <p data-nodeid=\"8345\" class=\"\">\n                      回溯算法本质上是一种 DFS\n                      算法，在一些小的数据集上能够找到<strong data-nodeid=\"8822\"\n                        >最优解</strong\n                      >。因此，遇到穷举所有路径的问题时，就需要用到回溯。比如，在一些外卖派单系统中，大数据系统给骑手派单，在某个单位时间内累积的订单总是有限的，此时就可以利用回溯算法求解最优派送时间。\n                    </p>\n                    <p data-nodeid=\"8346\">\n                      在互联网公司的面试中，<strong data-nodeid=\"8828\"\n                        >面试官也会经常考察应聘者对小范围数据找最优解的能力</strong\n                      >。此时，回溯就是一个非常适合的考点。\n                    </p>\n                    <p data-nodeid=\"8347\">\n                      在本讲中，首先我们会讲清楚回溯的由来，以及回溯算法的 1\n                      个核心和 3 个条件。然后，介绍回溯算法的应用：\n                    </p>\n                    <ul data-nodeid=\"8348\">\n                      <li data-nodeid=\"8349\">\n                        <p data-nodeid=\"8350\">排列/组合问题</p>\n                      </li>\n                      <li data-nodeid=\"8351\">\n                        <p data-nodeid=\"8352\">去重排列/组合问题</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8353\">\n                      学完本讲，你将收获“一招鲜”的回溯模板。\n                    </p>\n                    <p data-nodeid=\"8354\">\n                      在开始学习之前，我给你提 2 个醒儿：\n                    </p>\n                    <blockquote data-nodeid=\"8355\">\n                      <ol data-nodeid=\"8356\">\n                        <li data-nodeid=\"8357\">\n                          <p data-nodeid=\"8358\">\n                            我会从简单的问题开始讲解，哪怕你已经知道很多例题的标准答案，也不妨再跟着我学习一遍，也许会有不一样的感悟。\n                          </p>\n                        </li>\n                        <li data-nodeid=\"8359\">\n                          <p data-nodeid=\"8360\">\n                            本讲会采用链式推导的方式进行讲解，虽然从一个简单的知识点开始讲述，但请你尽量不要跳着读，这样理解起来会更顺滑。\n                          </p>\n                        </li>\n                      </ol>\n                    </blockquote>\n                    <h3 data-nodeid=\"8361\">从一次面试开始</h3>\n                    <p data-nodeid=\"8362\">\n                      在拿出模板之前，我们先进行一场模拟面试。很多面试官喜欢从一个非常简单又细小的问题开始层层推进，逐步加深问题的难度，因此本讲我们也采用这种思路进行讲解。\n                    </p>\n                    <p data-nodeid=\"8363\">\n                      注：在面试时，回答简单的问题要非常小心，避免犯错，这样面试官才愿意继续和你深入探讨，后面肯定有条“大鱼”等着你去抓。\n                    </p>\n                    <h4 data-nodeid=\"8364\">从循环到递归</h4>\n                    <p data-nodeid=\"8365\">\n                      假设这个简单的问题为：需要打印一个数组。比如给定的数组 A[]\n                      = {1,2,3}，那么我们需要打印为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{}\n</div></li><li><div class=\"code-word\">{<span class=\"hljs-number\">1</span>,}\n</div></li><li><div class=\"code-word\">{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>}\n</div></li><li><div class=\"code-word\">{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>,}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8367\">\n                      此外，面试官还给你提供了一个打印函数，你的实现需要用到它：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 打印数组的[0, i)范围里面的数</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> i)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里给定的A数组必然是有效的</span>\n</div></li><li><div class=\"code-word\">  System.out.print(<span class=\"hljs-string\">\"{\"</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++) {\n</div></li><li><div class=\"code-word\">    System.out.print(A[j] + <span class=\"hljs-string\">\", \"</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  System.out.println(<span class=\"hljs-string\">\"}\"</span>);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8369\">\n                      <strong data-nodeid=\"8857\">老司机的故事</strong\n                      >：如果面试官说，你<strong data-nodeid=\"8858\"\n                        >需要使用</strong\n                      >某个函数，其意就是告诉你<strong data-nodeid=\"8859\"\n                        >必须要用它</strong\n                      >！曾经我有一位朋友在面试中挂掉了，原因就是：面试官指定使用\n                      nextRandomInteger() 函数，他却用了 Math.rand()\n                      库函数，导致最后没能通过面试，所以你一定要吸取经验。\n                    </p>\n                    <p data-nodeid=\"10431\" class=\"\">\n                      利用给定的 print()\n                      函数，根据题目要求：你应该可以写出如下代码：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= N; i++) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 打印[0, ..., i)</span>\n</div></li><li><div class=\"code-word\">        print(A, i);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8372\">\n                      当面试官看了你的代码，觉得没有问题之后，又将题目进行了升级。面试官让你将这个代码转换为递归的方式。对于这种一维的递归，想必你也能很快拿下吧。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">solve2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> i)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 不能再递归下去, 递归的终止条件。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (i &gt; N) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 打印[0, ..., i)</span>\n</div></li><li><div class=\"code-word\">  print(<span class=\"hljs-number\">0</span>, i);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 打印后面的</span>\n</div></li><li><div class=\"code-word\">  solve2(A, i + <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8374\">\n                      经过前面一小轮的交流，相信你已经明白面试官的考点就是：\n                    </p>\n                    <ul data-nodeid=\"8375\">\n                      <li data-nodeid=\"8376\">\n                        <p data-nodeid=\"8377\">循环边界</p>\n                      </li>\n                      <li data-nodeid=\"8378\">\n                        <p data-nodeid=\"8379\">指定函数的使用</p>\n                      </li>\n                      <li data-nodeid=\"8380\">\n                        <p data-nodeid=\"8381\">递归</p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"8382\">难度升级 1</h4>\n                    <p data-nodeid=\"8383\">\n                      面试官一看这些问题都没能难住你，并且还有很多时间，接下来：\n                    </p>\n                    <ul data-nodeid=\"8384\">\n                      <li data-nodeid=\"8385\">\n                        <p data-nodeid=\"8386\">希望你在递归的基础上改进代码</p>\n                      </li>\n                      <li data-nodeid=\"8387\">\n                        <p data-nodeid=\"8388\">\n                          需要使用一个数据结构 Box 来完成打印操作\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8389\">\n                      这个 Box 数据结构有 push、pop、print 三个函数，定义如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Box</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">private</span> List&lt;Integer&gt; l = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>{ l.add(x); }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span> </span>{ l.remove(l.size() - <span class=\"hljs-number\">1</span>); }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    System.out.print(<span class=\"hljs-string\">\"{\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (Integer x : l) {\n</div></li><li><div class=\"code-word\">      System.out.print(x + <span class=\"hljs-string\">\", \"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    System.out.println(<span class=\"hljs-string\">\"}\"</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8391\">\n                      <strong data-nodeid=\"8879\">老司机的提醒</strong\n                      >：既然面试官提到了“需要使用”，那就是要求你<strong\n                        data-nodeid=\"8880\"\n                        >必须使用</strong\n                      >。于是你经过一番琢磨写出如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">solve3</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> i, Box s)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    s.print();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &gt;= N) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    s.push(A[i]);\n</div></li><li><div class=\"code-word\">    solve3(A, i + <span class=\"hljs-number\">1</span>, s);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8393\">\n                      面试官点了点头，正当你在想为什么没有用到 pop()\n                      函数时，面试官就再次将难度进行升级了。\n                    </p>\n                    <h4 data-nodeid=\"8394\">难度升级 2</h4>\n                    <p data-nodeid=\"8395\">\n                      面试官会问：如果要用 pop() 函数，应该放在什么地方呢？\n                    </p>\n                    <p data-nodeid=\"8396\">\n                      <strong data-nodeid=\"8892\">老司机的提醒</strong\n                      >：在这种需求多变的面试场景里，你一定要紧跟面试官的思路。此时<strong\n                        data-nodeid=\"8893\"\n                        >耐心非常重要</strong\n                      >。毕竟，工作上的需求就是灵活又多变的。\n                    </p>\n                    <p data-nodeid=\"8397\">\n                      在面试官的连环追问下，你可能需要想一段时间，代码就会变成这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">solve4</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> i, Box s)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    s.print();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &gt;= N) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    s.push(A[i]);\n</div></li><li><div class=\"code-word\">    solve4(A, i + <span class=\"hljs-number\">1</span>, s);\n</div></li><li><div class=\"code-word\">    s.pop(); <span class=\"hljs-comment\">// &lt;----- 加在这里!!</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8399\">\n                      如果你觉得 s.pop()\n                      突然让代码变得很难理解了，不要着急，接下来我会用一种更容易理解的方式给你讲解。\n                    </p>\n                    <p data-nodeid=\"8400\">\n                      我们来玩一种<strong data-nodeid=\"8905\">借箱子</strong\n                      >的游戏。每个玩游戏的人，从左到右排成一排，需要<strong\n                        data-nodeid=\"8906\"\n                        >遵守以下规则</strong\n                      >：\n                    </p>\n                    <ul data-nodeid=\"8401\">\n                      <li data-nodeid=\"8402\">\n                        <p data-nodeid=\"8403\">\n                          每个人刚借到箱子的时候，公布箱子的状态（不公布的话，万一别人耍赖说里面有一个亿，到时候咱们可还不起）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8404\">\n                        <p data-nodeid=\"8405\">\n                          把自己选的“宝石”放到箱子中（我们暂且假设第 i\n                          个人，只能选 A[i] 号宝石）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8406\">\n                        <p data-nodeid=\"8407\">把箱子借给右边的人；</p>\n                      </li>\n                      <li data-nodeid=\"8408\">\n                        <p data-nodeid=\"8409\">\n                          为了避免弄丢东西，每个人都必须遵守规则：归还的箱子要与借出时一模一样，所以归还箱子的时候，需要把箱子里面的属于自己的东西拿出来。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8410\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/23/Cgp9HWBtdtSAemcJAABtIIQYuhI248.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"8917\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8411\">\n                      我们先看一下数组中有<strong data-nodeid=\"8923\"\n                        >两个元素</strong\n                      >的时候应该如何处理。\n                    </p>\n                    <p data-nodeid=\"8412\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/23/Cgp9HWBtdtuAF8knABW0aJ4sYFY451.gif\"\n                        alt=\"1.gif\"\n                        data-nodeid=\"8926\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8413\">这个时候，输出的结果刚好如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{}\n</div></li><li><div class=\"code-word\">{<span class=\"hljs-number\">1</span>, }\n</div></li><li><div class=\"code-word\">{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8415\">\n                      如果我们把视角固定在某个人身上，他要做的事情就是：\n                    </p>\n                    <ul data-nodeid=\"8416\">\n                      <li data-nodeid=\"8417\">\n                        <p data-nodeid=\"8418\">说出拿到箱子的状态</p>\n                      </li>\n                      <li data-nodeid=\"8419\">\n                        <p data-nodeid=\"8420\">把自己的东西放进去</p>\n                      </li>\n                      <li data-nodeid=\"8421\">\n                        <p data-nodeid=\"8422\">借出箱子</p>\n                      </li>\n                      <li data-nodeid=\"8423\">\n                        <p data-nodeid=\"8424\">\n                          把自己的东西拿出来，把箱子还回去。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8425\">\n                      这样，我们也同样完成了所有状态的输出。下面将solve4()\n                      函数加点“玩游戏”的注释。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">solve4</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> i, Box s)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    s.print();   <span class=\"hljs-comment\">// &lt;-- 说出箱子的状态</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &gt;= N) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    s.push(A[i]);  <span class=\"hljs-comment\">// &lt;-- 把自己选中的宝石放进去</span>\n</div></li><li><div class=\"code-word\">    solve4(A, i + <span class=\"hljs-number\">1</span>, s); <span class=\"hljs-comment\">// &lt;-- 借给下一个人</span>\n</div></li><li><div class=\"code-word\">    s.pop(); <span class=\"hljs-comment\">// &lt;-- 把自己的宝石取出来，再把箱子按原样还回去</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8427\">\n                      现在我们应该已经明白 s.pop() 的含义了。\n                    </p>\n                    <p data-nodeid=\"8428\">\n                      <strong data-nodeid=\"8942\"\n                        >注意：图中数组长度为 2，里面一共有第 0、第 1、第 2\n                        个人。当 if （i &gt;= N）的时候，也就是第 2\n                        个人实际上不可以选择 A[2]。因为这里包含 3\n                        个含义：</strong\n                      >\n                    </p>\n                    <ul data-nodeid=\"8429\">\n                      <li data-nodeid=\"8430\">\n                        <p data-nodeid=\"8431\">\n                          如果访问 A[2] 就会导致访问数组越界\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8432\">\n                        <p data-nodeid=\"8433\">\n                          第 2 个人不能选择任何宝石。也就是没有任何选项\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8434\">\n                        <p data-nodeid=\"8435\">\n                          更进一步，第 3、第 4、第 5\n                          个人肯定也是没有任何选择的，所以后面需要直接返回。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8436\">\n                      <strong data-nodeid=\"8955\"\n                        >所以 if （i &gt;= N）表示的本质是：[N, .., inf)\n                        后面所有的人都不会有任何选项了！所以直接返回即可！</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"8437\">\n                      因此，你平时读算法时，如果觉得一段代码非常难懂，除了要一步一步去调试，你还需要为这段代码找一个有趣的场景。\n                    </p>\n                    <p data-nodeid=\"8438\">\n                      现在的情况是，每个人都只能有一个宝石，那么如果每个人都有两个宝石，代码就可以进化成这样（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">solve5</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> i, Box s)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    s.print();   <span class=\"hljs-comment\">// &lt;-- 说出箱子的状态</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &gt;= N) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    s.push(第i个人的宝石<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// &lt;-- 把自己选中的宝石放进去</span>\n</div></li><li><div class=\"code-word\">    solve5(A, i + <span class=\"hljs-number\">1</span>, s); <span class=\"hljs-comment\">// &lt;-- 借给下一个人</span>\n</div></li><li><div class=\"code-word\">    s.pop(); <span class=\"hljs-comment\">// &lt;-- 把自己的宝石取出来，再把箱子按原样还回去</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    s.push(第i个人的宝石<span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// &lt;-- 把自己选中的宝石2放进去</span>\n</div></li><li><div class=\"code-word\">    solve5(A, i + <span class=\"hljs-number\">1</span>, s); <span class=\"hljs-comment\">// &lt;-- 借给下一个人</span>\n</div></li><li><div class=\"code-word\">    s.pop(); <span class=\"hljs-comment\">// &lt;-- 把自己的宝石取出来，再把箱子按原样还回去</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8440\">\n                      但是代码这么写，显得很啰唆。那有没有什么更好的办法呢？\n                    </p>\n                    <h4 data-nodeid=\"8441\">模板</h4>\n                    <p data-nodeid=\"8442\">\n                      前面我们在玩“借箱子”游戏的时候，直接输出了所有的“箱子”的状态。但是有时候，并不是所有的状态都需要输出，你需要根据题目的条件决定哪些应该作为答案进行输出。因此，在\n                      solve5()\n                      函数的基础上，一个更具有普适性的回溯模板就准备好了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A,\n</span></span></div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-comment\">/*第i个人*/</span>\n</div></li><li><div class=\"code-word\">               Box s, <span class=\"hljs-comment\">/*箱子*/</span>\n</div></li><li><div class=\"code-word\">               answer<span class=\"hljs-comment\">/*存放所有的答案*/</span>) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (状态满足要求) {\n</div></li><li><div class=\"code-word\">    answer.add(s);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> ([i, ...., 后面）的人都没有任何选项了) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> 宝石 in {第i个人当前所有宝石选项} {\n</div></li><li><div class=\"code-word\">    s.push(宝石);\n</div></li><li><div class=\"code-word\">    backtrace(A, i + <span class=\"hljs-number\">1</span>, s, answer);\n</div></li><li><div class=\"code-word\">    s.pop();\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8444\">\n                      注意：一般来说，回溯的题目都出得比较“赤裸裸”，基本上不需要经过分析匹配，可以直接套这个模板。\n                    </p>\n                    <p data-nodeid=\"8445\">\n                      这里稍微总结一下我们得到回溯模板的<strong\n                        data-nodeid=\"8967\"\n                        >推导过程</strong\n                      >：\n                    </p>\n                    <p data-nodeid=\"8446\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/2C/CioPOWBtdv6ATY5lAABVm7vYZuA844.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"8970\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8447\">\n                      接下来我们看一下使用这个模板所需要：\n                    </p>\n                    <ul data-nodeid=\"8448\">\n                      <li data-nodeid=\"8449\">\n                        <p data-nodeid=\"8450\">1 个核心</p>\n                      </li>\n                      <li data-nodeid=\"8451\">\n                        <p data-nodeid=\"8452\">3 个条件</p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"8453\">1 个核心</h4>\n                    <p data-nodeid=\"8454\">\n                      理解回溯算法的核心，可以将<strong data-nodeid=\"8980\"\n                        >思路的重点</strong\n                      >总结为：第 i 个人怎么选？\n                    </p>\n                    <p data-nodeid=\"8455\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/2C/CioPOWBtdwiAS-y4AAEpIitKONI169.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"8983\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8456\">\n                      其他人的情况都被我们无视了。因为，如果从全局的角度去思考问题，你会发现递归来，递归去容易把人绕晕。反过来，如果你考虑清楚第\n                      i 个人应该如何做选择，那么回溯算法就可以迎刃而解。\n                    </p>\n                    <h4 data-nodeid=\"8457\">3 个条件</h4>\n                    <p data-nodeid=\"8458\">\n                      当我们解决一个核心的问题之后，接下来就要着手开始写代码的时候，需要解决\n                      3 个条件：\n                    </p>\n                    <ul data-nodeid=\"8459\">\n                      <li data-nodeid=\"8460\">\n                        <p data-nodeid=\"8461\">什么样的状态是我们想要的？</p>\n                      </li>\n                      <li data-nodeid=\"8462\">\n                        <p data-nodeid=\"8463\">\n                          后面的人还有选项吗？如果后面所有的人都没有选项，就需要返回了。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8464\">\n                        <p data-nodeid=\"8465\">\n                          第 i 个人的宝石选项是什么样的？\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"8466\">排列组合问题</h3>\n                    <p data-nodeid=\"8467\">\n                      排列组合在面试中出现的概率极高。尤其是<strong\n                        data-nodeid=\"8996\"\n                        >微软，头条</strong\n                      >等大厂特别喜欢出相关的题目。\n                    </p>\n                    <p data-nodeid=\"8468\">\n                      <strong data-nodeid=\"9001\"\n                        >排列组合题目，基本上都是使用回溯算法进行求解。熟练地使用回溯的模板，是击破这些大厂算法面试的必要条件</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"8469\">\n                      接下来，我们将由浅入深地展开排列组合中的经典面试题。\n                    </p>\n                    <h4 data-nodeid=\"8470\">例 1：电话号码的字母组合</h4>\n                    <p data-nodeid=\"8471\">\n                      【<strong data-nodeid=\"9011\">题目</strong\n                      >】给定一个手机拨号盘，不同的按键对应不同的字母。现在给定数字字符串的输入，你需要返回所有的小写字母的组合。（条件：输入的数字只会有\n                      2~9）。\n                    </p>\n                    <p data-nodeid=\"8472\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/23/Cgp9HWBtdxKAa_IqAADNQcafC-0771.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"9014\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8473\">输入：A = \"23\"</p>\n                    <p data-nodeid=\"8474\">\n                      输出：[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n                    </p>\n                    <p data-nodeid=\"8475\">\n                      解释：数字 2 可以选择字母\"abc\", 数字 3\n                      可以选择\"def\"。那么一共有 9 种组合。\n                    </p>\n                    <p data-nodeid=\"8476\">\n                      【分析】看到“<strong data-nodeid=\"9071\">所有</strong\n                      >”二字，你应该立马想到使用回溯算法。前面我们提到。回溯算法需要\n                      1 个核心和 3 个条件。\n                    </p>\n                    <h5 data-nodeid=\"8477\">1. 1 个核心</h5>\n                    <p data-nodeid=\"8478\">\n                      回想一下之前的“借箱子”游戏，里面每个人都只可以有一种选择。\n                    </p>\n                    <p data-nodeid=\"8479\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/2C/CioPOWBtdyOAOcbzAABowutir0s459.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"9078\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8480\">\n                      而现在，当题目改变，输入变成“23”之后，情形如下：\n                    </p>\n                    <p data-nodeid=\"8481\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/23/Cgp9HWBtdyyAEHvOAACZKdDxbbI193.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"9082\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8482\">\n                      第 0 个人拿到的是数字 2，可以选择的“宝石”为{\"a\", \"b\",\n                      \"c\"}，第 1 个人可以拿到的宝石为{\"d\", \"e\", \"f\"}。\n                    </p>\n                    <p data-nodeid=\"8483\">因此，第 i 个人的选择是：</p>\n                    <p data-nodeid=\"8484\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/2C/CioPOWBtdzOAKtlQAABSK7rzKO0889.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"9111\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8485\">\n                      同时，这里我们可以发现，第 i 个人，与 A[i]\n                      并不是强强绑定的。有时候只是借助 A[i] 完成映射。\n                    </p>\n                    <h5 data-nodeid=\"8486\">2. 3 个条件</h5>\n                    <p data-nodeid=\"8487\">\n                      如果想要直接套用回溯模板，请你先回答一下回溯模板的三个问题。\n                    </p>\n                    <p data-nodeid=\"8488\">\n                      1）什么样的“箱子”状态是我们想要的？\n                    </p>\n                    <p data-nodeid=\"8489\">\n                      在这个题目中，由于要输出所有的数字的<strong\n                        data-nodeid=\"9135\"\n                        >完整组合</strong\n                      >，那么只有“箱子”状态的长度<strong data-nodeid=\"9136\"\n                        >等于</strong\n                      >输入字符串长度的时候，才是满足要求的。\n                    </p>\n                    <p data-nodeid=\"8490\">2）什么时候返回？</p>\n                    <p data-nodeid=\"8491\">\n                      输入字符串长度为 n，那么返回条件应该是 if (i &gt;= n)\n                      就需要返回。 因为从 i = n 个人，就不会有宝石选择了。\n                    </p>\n                    <p data-nodeid=\"8492\">3）每个人的宝石选项如何处理？</p>\n                    <p data-nodeid=\"8493\">\n                      正常情况下，第 i 个人的宝石就应该是\n                      A[i]，但是题目中已经指出，A[i]\n                      对应的是一个数字，然后再通过数字得到相应的字母。比如 A[0]\n                      = '2'，那么第 0 个人通过字符 '2' 就可以选择 {\"a\", \"b\",\n                      \"c\"} 三种宝石。\n                    </p>\n                    <p data-nodeid=\"8494\">\n                      【<strong data-nodeid=\"9178\">代码</strong\n                      >】通过前面的分析，到这里，我们已经可以直接套用回溯模板写代码了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> String[] ds = <span class=\"hljs-keyword\">new</span> String[] { <span class=\"hljs-comment\">//</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-comment\">// 0</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-comment\">// 1</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"abc\"</span>, <span class=\"hljs-comment\">// 2</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"def\"</span>, <span class=\"hljs-comment\">// 3</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"ghi\"</span>, <span class=\"hljs-comment\">// 4</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"jkl\"</span>, <span class=\"hljs-comment\">// 5</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"mno\"</span>, <span class=\"hljs-comment\">// 6</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"pqrs\"</span>, <span class=\"hljs-comment\">// 7</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"tuv\"</span>, <span class=\"hljs-comment\">// 8</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"wxyz\"</span> <span class=\"hljs-comment\">// 9</span>\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(String A, <span class=\"hljs-keyword\">int</span> i, StringBuffer box, List&lt;String&gt; ans)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 如果我们发现状态满足要求</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (box.length() == N) {\n</div></li><li><div class=\"code-word\">            ans.add(box.toString());\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 如果发现越界, 第N个人开始就没有宝石选项了</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (i &gt;= N) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 遍历第i个人可以选择的宝石</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> stoneIndex = (<span class=\"hljs-keyword\">int</span>) (A.charAt(i) - <span class=\"hljs-string\">'0'</span>);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> idx = <span class=\"hljs-number\">0</span>; idx &lt; ds[stoneIndex].length(); idx++) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 拿到宝石</span>\n</div></li><li><div class=\"code-word\">            Character stone = ds[stoneIndex].charAt(idx);\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 放到箱子中</span>\n</div></li><li><div class=\"code-word\">            box.append(stone);\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 开始处理第i + 1个人</span>\n</div></li><li><div class=\"code-word\">            backtrace(A, i + <span class=\"hljs-number\">1</span>, box, ans);\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 把自己的宝石拿出来，然后保持箱子原样!</span>\n</div></li><li><div class=\"code-word\">            box.deleteCharAt(box.length() - <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;String&gt; <span class=\"hljs-title\">letterCombinations</span><span class=\"hljs-params\">(String A)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (A == <span class=\"hljs-keyword\">null</span> || A.length() == <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        StringBuffer box = <span class=\"hljs-keyword\">new</span> StringBuffer();\n</div></li><li><div class=\"code-word\">        List&lt;String&gt; ans = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">        backtrace(A, <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">/* 从第0个人开始 */</span>, box, ans);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"8496\">\n                      <p data-nodeid=\"8497\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9182\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9186\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9190\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8498\">\n                      <strong data-nodeid=\"9235\">复杂度分析</strong\n                      >：如果字符串总长为 L，字符串中有 a 个字符属于 {'7',\n                      '9'}，都可以映射到 4 个字母。有 b 个字符属于 {'2', '3',\n                      '4', '5', '6', '8'}，都可以映射到 3 个字母上。那么复杂度为\n                      O(4<sup>a</sup> x 3\n                      <sup>b</sup>)。除去返回值占用的空间，那么只需要占用 O(L)\n                      的空间。\n                    </p>\n                    <p data-nodeid=\"68932\" class=\"\">\n                      【<strong data-nodeid=\"68938\">小结</strong\n                      >】相比而言，这道题对应的回溯模板还是比较“赤裸裸”，直接套用模板就能解决。但是你要注意“回答”模板的\n                      3\n                      个条件。我再给你留一道练习题，希望你不要偷懒，完成练习巩固这个知识点。\n                    </p>\n\n                    <p data-nodeid=\"8500\">\n                      <strong data-nodeid=\"9246\">练习题 1</strong>:\n                      给定只有数字和字母的字符串，其中字母可以改成大写和小写。请输出所有的改写可能。\n                    </p>\n                    <p data-nodeid=\"8501\">输入：A = \"a3\"</p>\n                    <p data-nodeid=\"8502\">输出：[\"A3\", \"a3\"]</p>\n                    <blockquote data-nodeid=\"8503\">\n                      <p data-nodeid=\"8504\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/784.%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9264\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/784.%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9268\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/784.%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E5%85%A8%E6%8E%92%E5%88%97.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9272\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8505\">\n                      至此，我们已经从每个人只有一种选择，推导到每个人有多种选择。\n                    </p>\n                    <p data-nodeid=\"8506\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/2C/CioPOWBtd1CAKIPqAAFn75z053s828.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"9276\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"8507\">例 2：子集</h4>\n                    <p data-nodeid=\"8508\">\n                      【<strong data-nodeid=\"9297\">题目</strong\n                      >】给定一个<strong data-nodeid=\"9298\">互不相同的数</strong\n                      >的数组，返回这个数组里面所有的可能的子集（包括空集）。要求里面的子集不能重复。比如\n                      [[1,2], [2,1]] 不合要求。因为这两个集合是一样的。\n                    </p>\n                    <p data-nodeid=\"8509\">输入：A = [1, 2, 3]</p>\n                    <p data-nodeid=\"8510\">\n                      输出：[[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]\n                    </p>\n                    <p data-nodeid=\"8511\">\n                      解释：A = [1, 2,3] 集合的子集有 : 分别是\n                      [[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]。\n                    </p>\n                    <p data-nodeid=\"8512\">\n                      【<strong data-nodeid=\"9379\">分析</strong\n                      >】当一看到子集，就应该想到回溯，接着联系到回溯的模板代码。现在，我们面临的问题是，如何决定每个人选择的宝石应该是什么？\n                    </p>\n                    <h5 data-nodeid=\"8513\">1. 1 个核心</h5>\n                    <p data-nodeid=\"8514\">\n                      首先假设，每个人都可以选择所有的宝石。那么游戏就会形成如下：\n                    </p>\n                    <p data-nodeid=\"8515\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/2C/CioPOWBtd2KAMoGiAACIgBcvVEs557.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"9386\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8516\">\n                      但是，如果第 0 个人选择 1 ，此时第 1 个人也选择\n                      1，那么箱子里面会装上 \"{1,\n                      1}\"。很明显这是不符合要求的，因为一个元素被用了两次，不符合子集的定义。\n                    </p>\n                    <p data-nodeid=\"8517\">我们分情况整理如下：</p>\n                    <p data-nodeid=\"8518\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/2C/CioPOWBteASAC2BPAADRSYzADxo556.png\"\n                        alt=\"image (1).png\"\n                        data-nodeid=\"9395\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8519\">\n                      Case 1. 当第 0 个人选择 1 的时候，第 1 个人只能选择 {2,\n                      3}, {1, 2}, {1, 3}。\n                    </p>\n                    <p data-nodeid=\"8520\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/24/Cgp9HWBteAyAe5pyAADFY2OC8CY932.png\"\n                        alt=\"image (2).png\"\n                        data-nodeid=\"9399\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8521\">\n                      Case 2. 当第 0 个人选择 2 的时候，第 1 个人只能选择\n                      {3}。注意，此时不能再去选择 1，否则会形成 {2,\n                      1}，而这种情况是在前面的选择中出现过的。\n                    </p>\n                    <p data-nodeid=\"8522\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/2C/CioPOWBteDKABd7KAAC7RMpN8BA100.png\"\n                        alt=\"image (3).png\"\n                        data-nodeid=\"9403\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8523\">\n                      Case 3. 当第 0 个人选择 3 的时候，第 1\n                      个人所有的数都不能选。因为一选就会和 Case 1,、Case 2\n                      重复。\n                    </p>\n                    <p data-nodeid=\"8524\">\n                      通过上述分析，我们发现，第 1 个人的选择范围是和第 0\n                      个人的选择有关系的。如果第 0 个人选择了下标 A[j]，那么第 1\n                      个人就只能选择数组 A[] 中第 [j + 1, ..., N)\n                      范围里面的“宝石”。\n                    </p>\n                    <p data-nodeid=\"8525\">\n                      可以总结成<strong data-nodeid=\"9419\">结论 1：</strong>\n                    </p>\n                    <p data-nodeid=\"8526\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/24/Cgp9HWBteFKAbyA_AABiyDTuqnA371.png\"\n                        alt=\"Drawing 9.png\"\n                        data-nodeid=\"9422\"\n                      />\n                    </p>\n                    <blockquote data-nodeid=\"8527\">\n                      <p data-nodeid=\"8528\">\n                        <strong data-nodeid=\"9432\"\n                          >如果第 i 个人选择 A[j]，那么第 i+1 个人的选择范围就是\n                          A[j + 1, N)</strong\n                        >\n                      </p>\n                    </blockquote>\n                    <h5 data-nodeid=\"8529\">2. 3 个条件</h5>\n                    <p data-nodeid=\"8530\">\n                      在写代码之前，我们再回答一下回溯代码的 3 个条件。\n                    </p>\n                    <p data-nodeid=\"8531\">\n                      1）什么样的“箱子”状态是我们想要的？\n                    </p>\n                    <p data-nodeid=\"8532\">\n                      这时是要所有的子集，所以我们只需要把所有的 box 状态放到\n                      ans 中。\n                    </p>\n                    <p data-nodeid=\"8533\">2）什么时候返回？</p>\n                    <p data-nodeid=\"8534\">\n                      输入字符串长度为 n，那么当 if (i &gt;= n) 就需要返回。\n                      因为从 i = n 个人，就不会有宝石选择了。\n                    </p>\n                    <p data-nodeid=\"8535\">3）每个的宝石选项如何处理？</p>\n                    <p data-nodeid=\"8536\">\n                      当第 i 个人选择了 A[j]，那么第 i + 1 个人就只能选择 [j +\n                      1, N)。\n                    </p>\n                    <p data-nodeid=\"8537\">\n                      那么我们可以写出代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 将box状态添加到答案中</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">append</span><span class=\"hljs-params\">(List&lt;Integer&gt; box, List&lt;List&lt;Integer&gt;&gt; answer)</span> </span>{\n</div></li><li><div class=\"code-word\">    answer.add(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;());\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (Integer x: box) {\n</div></li><li><div class=\"code-word\">        answer.get(answer.size()-<span class=\"hljs-number\">1</span>).add(x);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backTrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A,\n</span></span></div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-comment\">/*第i个人*/</span>\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">int</span> begin, <span class=\"hljs-comment\">/*第i个人可以选择的范围[begin, end)*/</span>\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">int</span> end,\n</div></li><li><div class=\"code-word\">               List&lt;Integer&gt; box, <span class=\"hljs-comment\">/* 箱子的状态 */</span>\n</div></li><li><div class=\"code-word\">               List&lt;List&lt;Integer&gt;&gt; answer) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 总的宝石数</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 把当前箱子的状态放到结果中，因为要的是所有的子集</span>\n</div></li><li><div class=\"code-word\">    append(box, answer);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果我是最后一个人，并且没有东西给我选了</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 那么原样返回箱子</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &gt;= N || begin &gt;= end) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 我还是有宝石可以选择的。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = begin; j &lt; end; j++) {\n</div></li><li><div class=\"code-word\">        box.add(A[j]);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 注意这里结论1的使用，所以这里要写 [j + 1, end)</span>\n</div></li><li><div class=\"code-word\">        backTrace(A, i + <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">1</span>, end, box, answer);\n</div></li><li><div class=\"code-word\">        box.remove(box.size()-<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8539\">\n                      这里我们根据模板写出了代码，仔细观察可以发现，有以下 2\n                      个地方可以优化：\n                    </p>\n                    <ul data-nodeid=\"8540\">\n                      <li data-nodeid=\"8541\">\n                        <p data-nodeid=\"8542\">\n                          i 变量其实没有什么用，仅在传参数的时候传了 i + 1\n                          递归下去；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8543\">\n                        <p data-nodeid=\"8544\">\n                          end 变量其实就是 N，没有必要写在参数里面。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8545\">\n                      【<strong data-nodeid=\"9458\">代码</strong\n                      >】经过一轮优化后的代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">append</span><span class=\"hljs-params\">(List&lt;Integer&gt; box, List&lt;List&lt;Integer&gt;&gt; all)</span> </span>{\n</div></li><li><div class=\"code-word\">  all.add(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;());\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (Integer x : box) {\n</div></li><li><div class=\"code-word\">    all.get(all.size() - <span class=\"hljs-number\">1</span>).add(x);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backTrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A,\n</span></span></div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">int</span> start, <span class=\"hljs-comment\">/*第i个人的选择范围[start, N)*/</span>\n</div></li><li><div class=\"code-word\">               List&lt;Integer&gt; box,\n</div></li><li><div class=\"code-word\">               List&lt;List&lt;Integer&gt;&gt; all) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 公布当前箱子的状态</span>\n</div></li><li><div class=\"code-word\">  append(box, all);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 如果我是最后一个人，并且没有东西给我选了</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 那么原样返回箱子</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (start &gt;= N) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 我还是有宝石可以选择的。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = start; j &lt; N; j++) {\n</div></li><li><div class=\"code-word\">    box.add(A[j]);\n</div></li><li><div class=\"code-word\">    backTrace(A, j + <span class=\"hljs-number\">1</span>, box, all);\n</div></li><li><div class=\"code-word\">    box.remove(box.size() - <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class=\"hljs-keyword\">int</span>[] A) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  List&lt;Integer&gt; box = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">  List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">  backTrace(A, <span class=\"hljs-number\">0</span>, box, ans);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"8547\">\n                      <p data-nodeid=\"8548\">\n                        代码:<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/78.%E5%AD%90%E9%9B%86.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9462\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/78.%E5%AD%90%E9%9B%86.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9466\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/78.%E5%AD%90%E9%9B%86.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9470\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"73111\" class=\"\">\n                      <strong data-nodeid=\"73126\">复杂度分析</strong\n                      >：时间复杂度，由于一共有 N\n                      个元素，每个元素可能被放到子集中，也可能不被放到子集中，一共有\n                      O(2<sup>N</sup>)\n                      个子集，每个子集都需要一次遍历。假设都按最差情况处理，单个子集遍历时间复杂度为\n                      O(N)。所以时间复杂度为 O(N* 2<sup>N</sup>)。不算上返回值\n                      answer，那么空间复杂度为O(N) 。\n                    </p>\n\n                    <p data-nodeid=\"8550\">\n                      【<strong data-nodeid=\"9495\">小结</strong\n                      >】这个题目是一道非常经典的回溯的题目，下面我们<strong\n                        data-nodeid=\"9496\"\n                        >分析一下考点</strong\n                      >：\n                    </p>\n                    <ul data-nodeid=\"8551\">\n                      <li data-nodeid=\"8552\">\n                        <p data-nodeid=\"8553\">回溯的模板</p>\n                      </li>\n                      <li data-nodeid=\"8554\">\n                        <p data-nodeid=\"8555\">\n                          回溯代码的优化，即哪些变量可以被优化掉。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8556\">\n                      下面再和你多说两句。我发现，有时候会有小伙伴直接研究网络上已经优化过的代码，感觉自己看不懂回溯。这是两方面的原因导致的：\n                    </p>\n                    <ol data-nodeid=\"8557\">\n                      <li data-nodeid=\"8558\">\n                        <p data-nodeid=\"8559\">你没有真正理解到回溯的精髓；</p>\n                      </li>\n                      <li data-nodeid=\"8560\">\n                        <p data-nodeid=\"8561\">\n                          网络上的很多代码都没有一步一步讲优化过程，还省略了很多关键步骤，最后直接给出答案。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"8562\">\n                      <strong data-nodeid=\"9506\"\n                        >这两个考点是你理解回溯代码的关键。因此，在看回溯代码的时候，一定要从模板出发，然后再通过优化得到最终的程序</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"8563\">\n                      接下来我们通过一些练习来加强你对这个知识点的掌握。\n                    </p>\n                    <p data-nodeid=\"8564\">\n                      <strong data-nodeid=\"9516\">练习题 2</strong>：在[1, 2,\n                      ..., n] 这几个数中，选出 k\n                      个数出来组成集合。输出所有的解。\n                    </p>\n                    <p data-nodeid=\"8565\">输入：n = 2, k = 1</p>\n                    <p data-nodeid=\"8566\">输出：[[1], [2]]</p>\n                    <p data-nodeid=\"8567\">解释：一个数的选择只有 [1], [2]</p>\n                    <blockquote data-nodeid=\"8568\">\n                      <p data-nodeid=\"8569\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/77.%E7%BB%84%E5%90%88.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9539\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/77.%E7%BB%84%E5%90%88.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9543\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/77.%E7%BB%84%E5%90%88.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9547\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8570\">\n                      <strong data-nodeid=\"9555\">练习题 3</strong\n                      >：给定一个正数数组 A[]，和一个正整数\n                      target。输出所有的子集，使得子集和等于 target。\n                    </p>\n                    <p data-nodeid=\"8571\">注意：里面的元素可以重复选取。</p>\n                    <p data-nodeid=\"8572\">输入：A = [2, 3, 8]，target = 7</p>\n                    <p data-nodeid=\"8573\">\n                      输出：[2, 2, 3]只有这个子集和等于 7。\n                    </p>\n                    <blockquote data-nodeid=\"8574\">\n                      <p data-nodeid=\"8575\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/39.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9570\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/39.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9574\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/39.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9578\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8576\">\n                      <strong data-nodeid=\"9586\">练习题 4</strong\n                      >：给定一个正数数组 A[]，和一个正整数\n                      target。输出所有的子集，使得子集和等于 target。\n                    </p>\n                    <p data-nodeid=\"8577\">\n                      注意：里面的元素<strong data-nodeid=\"9592\">不</strong\n                      >可以重复选取。\n                    </p>\n                    <p data-nodeid=\"8578\">输入：A = [2, 3, 8], target = 5</p>\n                    <p data-nodeid=\"8579\">输出：[2, 3] 只有这个子集和等于 5</p>\n                    <blockquote data-nodeid=\"8580\">\n                      <p data-nodeid=\"8581\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-ii.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9606\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-ii.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9610\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-ii.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9614\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8582\">\n                      这里，每个人的选项都是动态决定的，而不再像以前是固定选择\n                      A[i]，或者 A[i] 的某个固定的映射。可以做一个简单的小结：\n                    </p>\n                    <blockquote data-nodeid=\"8583\">\n                      <p data-nodeid=\"8584\">\n                        第 i 个人的选项是动态决定的，可以认为是一个简单的函数\n                        f(i) 来决定它的选项列表。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8585\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/25/Cgp9HWBteGqAZMylAAEqT_ofGyc931.png\"\n                        alt=\"Drawing 10.png\"\n                        data-nodeid=\"9627\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"8586\">例 3：排列</h4>\n                    <p data-nodeid=\"8587\">\n                      【<strong data-nodeid=\"9638\">题目</strong>】给定<strong\n                        data-nodeid=\"9639\"\n                        >无重复元素</strong\n                      >的数组，输出这个数组所有的排列。\n                    </p>\n                    <p data-nodeid=\"8588\">输入：A = [1, 2]</p>\n                    <p data-nodeid=\"8589\">输出：[[1, 2], [2, 1]]</p>\n                    <p data-nodeid=\"8590\">解释：两个元素的数组的排列有两种。</p>\n                    <p data-nodeid=\"8591\">\n                      【<strong data-nodeid=\"9660\">分析</strong\n                      >】输出数组的所有排列，看到“所有”二字，你应该条件反射知道这里需要用到回溯算法了。\n                    </p>\n                    <p data-nodeid=\"8592\">\n                      注：排列算法的标准答案实际上没有几行，但却是经过很多优化步骤精简得到的，下面我们将从最原始的代码开始一步一步推导优化。\n                    </p>\n                    <h5 data-nodeid=\"8593\">1. 1 个核心</h5>\n                    <p data-nodeid=\"8594\">\n                      首先看一下第 i 个人应该怎么选？比如：对于数组 [1, 2, 3]\n                      而言，第 1 个人可以选择所有的元素。\n                    </p>\n                    <p data-nodeid=\"8595\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/2D/CioPOWBteHmAYEkbAABDDRrPp08346.png\"\n                        alt=\"Drawing 11.png\"\n                        data-nodeid=\"9672\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8596\">\n                      实际上，排列时，对于位置 i\n                      来说，每个元素都是有可能出现的。因此，我们可以得到<strong\n                        data-nodeid=\"9678\"\n                        >结论 2</strong\n                      >：\n                    </p>\n                    <blockquote data-nodeid=\"8597\">\n                      <p data-nodeid=\"8598\">第 i 个人的选择范围是 [0, N)</p>\n                    </blockquote>\n                    <p data-nodeid=\"8599\">\n                      此外，根据排列的性质，已经放到 box 中的元素不能再被第 i\n                      个人选中。这样就得到了<strong data-nodeid=\"9686\"\n                        >结论 3：</strong\n                      >\n                    </p>\n                    <blockquote data-nodeid=\"8600\">\n                      <p data-nodeid=\"8601\">\n                        已经放到 box 中的元素，不能再被第 i 个人选中\n                      </p>\n                    </blockquote>\n                    <h5 data-nodeid=\"8602\">2. 3 个条件</h5>\n                    <p data-nodeid=\"8603\">\n                      在使用回溯模板时，首先要想到的是回答回溯的 3 个条件。\n                    </p>\n                    <ul data-nodeid=\"8604\">\n                      <li data-nodeid=\"8605\">\n                        <p data-nodeid=\"8606\">\n                          满足的状态：一个排列成功之后，其长度应该是与原数组的长度一样，所以我们需要\n                          box 的长度与输入的数组长度一样。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8607\">\n                        <p data-nodeid=\"8608\">\n                          何时返回？一共有 N\n                          个元素，每个人只能选一个放到排列中。从第 0 个人到第\n                          N-1 个人都有元素可以选，第 [N, +inf)\n                          个人都不会有元素可以选。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8609\">\n                        <p data-nodeid=\"8610\">\n                          第 i 个人可以选的元素，需要满足结论 2 和结论 3。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8611\">\n                      我们可以写出<strong data-nodeid=\"9702\">伪代码</strong\n                      >如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A,\n</span></span></div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-comment\">/*第i个人的选择*/</span>\n</div></li><li><div class=\"code-word\">               List&lt;Integer&gt; box, <span class=\"hljs-comment\">/*箱子*/</span>\n</div></li><li><div class=\"code-word\">               List&lt;List&lt;Integer&gt;&gt; ans) { <span class=\"hljs-comment\">/*满足条件的结果*/</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (box.size() == N) {\n</div></li><li><div class=\"code-word\">    append(box, ans); <span class=\"hljs-comment\">// 把box放到ans里面</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 第N个人开始就没有任何选项了</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (i &gt;= N) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 第i个人的选择范围就是[0, N)</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 但是不能使用已经使用过的元素了,</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!box.contains(A[i])) { <span class=\"hljs-comment\">// &lt;-- 这里线性搜索</span>\n</div></li><li><div class=\"code-word\">      box.add(A[i]);\n</div></li><li><div class=\"code-word\">      backtrace(A, i + <span class=\"hljs-number\">1</span>, box, ans);\n</div></li><li><div class=\"code-word\">      box.remove(box.size() - <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8613\">\n                      不过很快可以发现，box.contains()\n                      函数是一个线性搜索复杂度，会导致整个算法的复杂度较高。这里我们可以使用一个哈希\n                      /used[] 数组来记录这个元素是否被使用，就可以得到优化。\n                    </p>\n                    <p data-nodeid=\"8614\">\n                      【<strong data-nodeid=\"9712\">代码</strong\n                      >】经过优化，可以得到第一个版本的代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">append</span><span class=\"hljs-params\">(List&lt;Integer&gt; box,\n</span></span></div></li><li><div class=\"code-word\">                        List&lt;List&lt;Integer&gt;&gt; ans) {\n</div></li><li><div class=\"code-word\">        ans.add(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;());\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (Integer x : box) {\n</div></li><li><div class=\"code-word\">            ans.get(ans.size() - <span class=\"hljs-number\">1</span>).add(x);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A,\n</span></span></div></li><li><div class=\"code-word\">                           <span class=\"hljs-keyword\">int</span> i,  <span class=\"hljs-comment\">/*第i个人*/</span>\n</div></li><li><div class=\"code-word\">                           <span class=\"hljs-keyword\">boolean</span>[] used, <span class=\"hljs-comment\">/*used[x]表示A[x] used?*/</span>\n</div></li><li><div class=\"code-word\">                           List&lt;Integer&gt; box, <span class=\"hljs-comment\">/*箱子*/</span>\n</div></li><li><div class=\"code-word\">                           List&lt;List&lt;Integer&gt;&gt; ans) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 如果状态已经满足要求</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (box.size() == N) {\n</div></li><li><div class=\"code-word\">            append(box, ans);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 我们总是从第0个人开始，那么一共有N个元素</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 那么当到第N个人的时候，已经没有东西可以选了。</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// [N ~ inf) 后面所有的人都没有东西可以选了。</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (i &gt;= N) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 第i个人本来是可以选择A[0 .... n)里面的元素</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 但是需要查看一下used[i]是不是被使用了？</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 可以认为第i个人的选择函数就是使用以前没有使用过的元素</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; N; j++) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (!used[j]) {\n</div></li><li><div class=\"code-word\">                box.add(A[j]);\n</div></li><li><div class=\"code-word\">                used[j] = <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">                backtrace(A, i + <span class=\"hljs-number\">1</span>, used, box, ans);\n</div></li><li><div class=\"code-word\">                box.remove(box.size() - <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">                used[j] = <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class=\"hljs-keyword\">int</span>[] A) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">        List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (N == <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">boolean</span>[] used = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[N];\n</div></li><li><div class=\"code-word\">        List&lt;Integer&gt; box = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">        backtrace(A, <span class=\"hljs-number\">0</span>, used, box, ans);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"8616\">\n                      <p data-nodeid=\"8617\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9716\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9720\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9724\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8618\">\n                      <strong data-nodeid=\"9733\">复杂度分析</strong\n                      >：根据数学公式，我们知道一共会生成 N!\n                      个结果，所以时间复杂度为\n                      O(N!)。如果不算上输出空间，那么空间复杂度就是 O(N)。\n                    </p>\n                    <p data-nodeid=\"8619\">\n                      我们会发现，基于 used[]\n                      数组在扫描的时候，仍然会从头扫描到尾，那么有没有什么办法可以避免这种扫描呢？\n                    </p>\n                    <p data-nodeid=\"8620\">\n                      这里我们再看一下第 i 个人的选择。假设第 i\n                      个人将“宝石”放到箱子里之前，他身上有一个<strong\n                        data-nodeid=\"9743\"\n                        >袋子</strong\n                      >，里面装着将要放到箱子里的宝石。\n                    </p>\n                    <p data-nodeid=\"8621\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/25/Cgp9HWBteIuALQiGAAH4SSA6SLE200.png\"\n                        alt=\"Drawing 12.png\"\n                        data-nodeid=\"9746\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8622\">\n                      然后，我们重新再看 1 个核心和 3 个条件。\n                    </p>\n                    <h5 data-nodeid=\"8623\">1. 1 个核心</h5>\n                    <p data-nodeid=\"8624\">\n                      根据核心的定义：重点解决第 i\n                      个人应该选什么？我们从下面这种情况展开。\n                    </p>\n                    <ul data-nodeid=\"8625\">\n                      <li data-nodeid=\"8626\">\n                        <p data-nodeid=\"8627\">整个数组为 [1, 2, 3, 4, 5, 6]</p>\n                      </li>\n                      <li data-nodeid=\"8628\">\n                        <p data-nodeid=\"8629\">\n                          已经有 [1, 2, 3] 元素在箱子里面\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8630\">\n                      根据结论 2 和结论 3，容易得到，第 i 个人实际上只能选择 [4,\n                      5, 6]。那么在操作时，第 i 个人可以像下图演示的这样操作。\n                    </p>\n                    <p data-nodeid=\"8631\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/25/Cgp9HWBteKSAdcDmABC51Quisxo118.gif\"\n                        alt=\"2.gif\"\n                        data-nodeid=\"9768\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8632\">\n                      虽然，我们还没有找到一个较好的数据结构来实现袋子。但是，根据这里的操作，可以分析出只需要这种数据结构支持交换操作就可以了。\n                    </p>\n                    <p data-nodeid=\"8633\">\n                      这时候，数组跳出来说：“<strong data-nodeid=\"9775\"\n                        >正是在下</strong\n                      >”。我们在操作的时候，统一使用 Swap 操作，如下动图所示：\n                    </p>\n                    <p data-nodeid=\"8634\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/2E/CioPOWBteKyAJej-AApc_Eb_YTw097.gif\"\n                        alt=\"3.gif\"\n                        data-nodeid=\"9778\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8635\">\n                      为了方便，第 i\n                      个人实际上没有必要自己随身带着一个数组作为“袋子”。只需要：\n                    </p>\n                    <ul data-nodeid=\"8636\">\n                      <li data-nodeid=\"8637\">\n                        <p data-nodeid=\"8638\">\n                          在箱子里提前放好可供选择的元素；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8639\">\n                        <p data-nodeid=\"8640\">\n                          告知第 i 个人可以选择的元素的范围，在这里为 [i, N)；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8641\">\n                        <p data-nodeid=\"8642\">\n                          第 i\n                          个人每次用完箱子之后，仍然要保证能将“箱子”恢复原样。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8643\">\n                      【<strong data-nodeid=\"9790\">代码 2</strong\n                      >】经过上述分析，我们可以得到第二个版本的代码（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">append</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] box, List&lt;List&lt;Integer&gt;&gt; ans)</span> </span>{\n</div></li><li><div class=\"code-word\">    ans.add(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;());\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> x: box) {\n</div></li><li><div class=\"code-word\">      ans.get(ans.size()-<span class=\"hljs-number\">1</span>).add(x);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] box, <span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span> t = box[a];\n</div></li><li><div class=\"code-word\">    box[a] = box[b];\n</div></li><li><div class=\"code-word\">    box[b] = t;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A,\n</span></span></div></li><li><div class=\"code-word\">                         <span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-comment\">/*第i个人, 选择范围[i, N)*/</span>\n</div></li><li><div class=\"code-word\">                         <span class=\"hljs-keyword\">int</span> [] box,\n</div></li><li><div class=\"code-word\">                         List&lt;List&lt;Integer&gt;&gt; ans)\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果状态已经满足要求</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// box已经填满了</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i == N) {\n</div></li><li><div class=\"code-word\">      append(box, ans);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 我们总是从第0个人开始，那么一共有N个元素</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 那么当到第N个人的时候，已经没有东西可以选了。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// [N ~ inf) 后面所有的人都没有东西可以选了。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &gt;= N) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 第i个人可以选择box后面可选的元素。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = i; j &lt; N; j++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 这里只是选中box[j]元素</span>\n</div></li><li><div class=\"code-word\">      swap(box, i, j);\n</div></li><li><div class=\"code-word\">      backtrace(A, i + <span class=\"hljs-number\">1</span>, box, ans);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 箱子一定要还原</span>\n</div></li><li><div class=\"code-word\">      swap(box, i, j);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class=\"hljs-keyword\">int</span>[] A) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (N == <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 首先构建好箱子，为了让第i个人有元素可以选择</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 我们需要提前将元素放在里面。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span>[] box = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[N];\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">      box[i] = A[i];\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    backtrace(A, <span class=\"hljs-number\">0</span>, box, ans);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"8645\">\n                      <p data-nodeid=\"8646\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9794\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9798\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9802\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8647\">\n                      <strong data-nodeid=\"9811\">复杂度分析</strong\n                      >：根据数学公式，我们知道一共会生成 N!\n                      个结果，所以时间复杂度为\n                      O(N!)。如果不算上输出空间，那么空间复杂度就是 O(N)。\n                    </p>\n                    <p data-nodeid=\"8648\">\n                      这里我们发现，box\n                      的状态实际上分为了两部分：一是可选部分，二是不可选部分。\n                    </p>\n                    <p data-nodeid=\"8649\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/26/Cgp9HWBteLiAQ_gDAAE5tlvsWjg213.png\"\n                        alt=\"Drawing 13.png\"\n                        data-nodeid=\"9815\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8650\">\n                      此时的“箱子”使用了数组，不再像以前那样只管\n                      push/pop，还需要记录状态：\n                    </p>\n                    <ul data-nodeid=\"8651\">\n                      <li data-nodeid=\"8652\">\n                        <p data-nodeid=\"8653\">需要填 box 的哪个位置？</p>\n                      </li>\n                      <li data-nodeid=\"8654\">\n                        <p data-nodeid=\"8655\">\n                          第 i 个人可以选择的范围是哪里？\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8656\">原本函数需要声明为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(\n</span></span></div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">int</span>[] A,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">int</span> boxId, <span class=\"hljs-comment\">/*box的boxId这个位置需要填充*/</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">int</span> i,     <span class=\"hljs-comment\">/* 第i个人 */</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">int</span> start, <span class=\"hljs-comment\">/* 第i个人可选范围[start, end) */</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">int</span> end,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">int</span> [] box,\n</div></li><li><div class=\"code-word\">      List&lt;List&lt;Integer&gt;&gt; ans)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8658\">不过这里巧的是：</p>\n                    <ul data-nodeid=\"8659\">\n                      <li data-nodeid=\"8660\">\n                        <p data-nodeid=\"8661\">boxId 刚好等于 i</p>\n                      </li>\n                      <li data-nodeid=\"8662\">\n                        <p data-nodeid=\"8663\">start 也刚好是 i</p>\n                      </li>\n                      <li data-nodeid=\"8664\">\n                        <p data-nodeid=\"8665\">end 一直都是 N</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8666\">\n                      所以代码也就可以优化成上面的样子。如果我们再研究一下，可以发现一些新的东西，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class=\"hljs-keyword\">int</span>[] A) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span>[] box = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[N];  &lt;-- 这里复制了数组<span class=\"hljs-function\">A\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">for</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++)</span> {\n</div></li><li><div class=\"code-word\">      box[i] = A[i];\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    backtrace(A, <span class=\"hljs-number\">0</span>, box, ans);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">assert</span> box == A; <span class=\"hljs-comment\">// &lt;-- 这里如果加个assert，必然成立。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8668\">\n                      根据上述代码不难发现，实际上没有必要使用 box\n                      数组，直接使用 A[] 数组就可以了。\n                    </p>\n                    <p data-nodeid=\"8669\">\n                      【<strong data-nodeid=\"9834\">代码</strong\n                      >】因此，最终版本的代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">append</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] box, List&lt;List&lt;Integer&gt;&gt; ans)</span> </span>{\n</div></li><li><div class=\"code-word\">    ans.add(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;());\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> x: box) {\n</div></li><li><div class=\"code-word\">      ans.get(ans.size()-<span class=\"hljs-number\">1</span>).add(x);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] box, <span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span> t = box[a];\n</div></li><li><div class=\"code-word\">    box[a] = box[b];\n</div></li><li><div class=\"code-word\">    box[b] = t;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] box,\n</span></span></div></li><li><div class=\"code-word\">                         <span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-comment\">/*第i个人, 选择范围[i, N)*/</span>\n</div></li><li><div class=\"code-word\">                         List&lt;List&lt;Integer&gt;&gt; ans)\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = box == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : box.length;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果状态已经满足要求</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// box已经填满了</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i == N) {\n</div></li><li><div class=\"code-word\">      append(box, ans);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 我们总是从第0个人开始，那么一共有N个元素</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 那么当到第N个人的时候，已经没有东西可以选了。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// [N ~ inf) 后面所有的人都没有东西可以选了。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &gt;= N) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 第i个人可以选择box后面可选的元素。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = i; j &lt; N; j++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 这里只是选中box[j]元素</span>\n</div></li><li><div class=\"code-word\">      swap(box, i, j);\n</div></li><li><div class=\"code-word\">      backtrace(box, i + <span class=\"hljs-number\">1</span>, ans);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 箱子一定要还原</span>\n</div></li><li><div class=\"code-word\">      swap(box, i, j);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class=\"hljs-keyword\">int</span>[] A)\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (N == <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    backtrace(A<span class=\"hljs-comment\">/*box*/</span>, <span class=\"hljs-number\">0</span>, ans);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"8671\">\n                      <p data-nodeid=\"8672\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.3.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9838\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.3.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9842\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/46.%E5%85%A8%E6%8E%92%E5%88%97.3.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"9846\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8673\">\n                      <strong data-nodeid=\"9853\">复杂度分析</strong>：时间复杂度\n                      O(N!)，如果不算返回值占用的空间，那么空间复杂度为\n                      O(N)（因为递归栈也会占用空间）。\n                    </p>\n                    <p data-nodeid=\"8674\">\n                      【<strong data-nodeid=\"9859\">小结</strong\n                      >】在这个题里面，我们采用了层层优化的方法给你讲解最终代码的由来。虽然核心代码非常短，但是其意义很丰富。\n                    </p>\n                    <p data-nodeid=\"8675\">\n                      我们再回顾一下推导过程，如下图所示：\n                    </p>\n                    <p data-nodeid=\"8676\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/26/Cgp9HWBteMeAQBV8AABSwrpsu8U552.png\"\n                        alt=\"Drawing 14.png\"\n                        data-nodeid=\"9863\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8677\">\n                      到这里，我们可以将回溯的知识点总结如下：\n                    </p>\n                    <p data-nodeid=\"8678\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/2E/CioPOWBteNGAZD5TAAGFudmr2E8242.png\"\n                        alt=\"Drawing 15.png\"\n                        data-nodeid=\"9867\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"8679\">去重排列组合</h3>\n                    <p data-nodeid=\"8680\">\n                      在排列组合问题中，另外一类问题是带有重复元素，并且需要去重处理。在处理这些问题的时候，除了套用前面所讲的回溯模板之外，还需要注意使用以下两步来进行去重。\n                    </p>\n                    <ul data-nodeid=\"8681\">\n                      <li data-nodeid=\"8682\">\n                        <p data-nodeid=\"8683\">\n                          排序：因为排序可以将相同的元素放到一起。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8684\">\n                        <p data-nodeid=\"8685\">\n                          查重：通过查看已有的元素是否已经被使用，进而去重。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"8686\">例 4：子集 2</h4>\n                    <p data-nodeid=\"8687\">\n                      【<strong data-nodeid=\"9878\">题目</strong\n                      >】给定一个可能包含重复元素的整数数组\n                      A，返回该数组所有可能的子集。注意：解集不能包含重复的子集。\n                    </p>\n                    <p data-nodeid=\"8688\">输入：A = [1, 2, 2]</p>\n                    <p data-nodeid=\"8689\">\n                      输出：[[2], [1], [1,2,2], [2,2], [1,2],[]]\n                    </p>\n                    <p data-nodeid=\"8690\">\n                      解释：注意：虽然 {A[0]=1, A[1]=2}, {A[0]=1, A[2]=2}\n                      是选取不同位置的数，但是却都构成了{1,2}\n                      这个子集，因此，只能算一个。\n                    </p>\n                    <p data-nodeid=\"8691\">\n                      【<strong data-nodeid=\"9930\">分析</strong\n                      >】你又看到了“所有”两个字，那么就可以确定使用回溯算法了。如果回顾一下例\n                      2 讲解的关于子集的问题，我们会发现，这里可以使用结论\n                      1（由例 2 得来）。\n                    </p>\n                    <blockquote data-nodeid=\"8692\">\n                      <p data-nodeid=\"8693\">\n                        如果第 i 个人选择了 A[j]，那么第 i+1 个人的选择范围就是\n                        A[j + 1, N)\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8694\">\n                      本质上是因为例 2 中已经说明 A[]\n                      数组中没有相同的元素。那么在本题中，如果有相同的元素应该如何处理？\n                    </p>\n                    <p data-nodeid=\"8695\">\n                      老规矩，我们还是从 1 个核心开始思考这个问题。\n                    </p>\n                    <h5 data-nodeid=\"8696\">1. 1 个核心</h5>\n                    <p data-nodeid=\"8697\">\n                      我们把思路的核心放在<strong data-nodeid=\"9955\"\n                        >第 i 个人的选择上</strong\n                      >。对于第 i 个人来说，如果我们依然使用（例 2 的）<strong\n                        data-nodeid=\"9956\"\n                        >结论 1</strong\n                      >：\n                    </p>\n                    <blockquote data-nodeid=\"8698\">\n                      <p data-nodeid=\"8699\">\n                        如果第 i 个人选择了 A[j]，那么第 i+1 个人的选择范围就是\n                        A[j + 1, N)\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8700\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/2E/CioPOWBtePaAcwJVAAG672uGcho369.png\"\n                        alt=\"Drawing 16.png\"\n                        data-nodeid=\"9966\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8701\">\n                      对于这种情况，在回溯时，实际上会出现重复。伪代码如下（为了让你看得更加清楚，这里没有使用\n                      for 循环）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> i, Box s)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    s.print();   <span class=\"hljs-comment\">// &lt;-- 说出箱子的状态</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &gt;= N) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    s.push(第i个人的宝石<span class=\"hljs-number\">5</span>);\n</div></li><li><div class=\"code-word\">    backtrace(A, i + <span class=\"hljs-number\">1</span>, s);\n</div></li><li><div class=\"code-word\">    s.pop();\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    s.push(第i个人的宝石<span class=\"hljs-number\">4</span>);\n</div></li><li><div class=\"code-word\">    backtrace(A, i + <span class=\"hljs-number\">1</span>, s);\n</div></li><li><div class=\"code-word\">    s.pop();\n</div></li><li><div class=\"code-word\">    s.push(第i个人的宝石<span class=\"hljs-number\">4</span>);      <span class=\"hljs-comment\">// &lt;-- 重复了!!</span>\n</div></li><li><div class=\"code-word\">    backtrace(A, i + <span class=\"hljs-number\">1</span>, s);\n</div></li><li><div class=\"code-word\">    s.pop()\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8703\">\n                      我们会发现，后面的宝石 4\n                      实际上是重复的。因为题目要求：不同位置上的同值元素会被认为是一样的。因此，我们要想办法做去重。\n                    </p>\n                    <p data-nodeid=\"8704\">\n                      <strong data-nodeid=\"9977\">去重方法 1</strong\n                      >：你可以这样理解。你的左裤兜里面有个红宝石，右裤兜里面有个一样的红宝石。每次你都只能往箱子里<strong\n                        data-nodeid=\"9978\"\n                        >放一个</strong\n                      >宝石（并且是放在箱子里面同样的位置），给你的朋友嘚瑟。\n                    </p>\n                    <p data-nodeid=\"8705\">\n                      你朋友肯定会问：“你为什么要把同样的东西给我看两遍？”。\n                    </p>\n                    <p data-nodeid=\"8706\">\n                      这时，你只需要对第 i\n                      个人去重就可以了。那么我们很快就可以写出如下的伪代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> i, Box s)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">    s.print();   <span class=\"hljs-comment\">// &lt;-- 说出箱子的状态</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &gt;= N) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    S = HashSet();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> 宝石 in {第i个人当前所有宝石选项} {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!S.contains(宝石)) {\n</div></li><li><div class=\"code-word\">        s.push(宝石);\n</div></li><li><div class=\"code-word\">        backtrace(A, i + <span class=\"hljs-number\">1</span>, s, answer);\n</div></li><li><div class=\"code-word\">        s.pop();\n</div></li><li><div class=\"code-word\">        S.add(宝石);\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8708\">\n                      但是，如果只是对第 i\n                      个人去重，还会遇到一个问题。比如：数组为 A = [4, 4, 4, 1,\n                      4]，假设只有两个人在选择的时候，下图所示的 ① ②\n                      两种情况就有可能出现重复。\n                    </p>\n                    <p data-nodeid=\"8709\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/2E/CioPOWBteQGAcjy3AALPFrgULVg418.png\"\n                        alt=\"Drawing 17.png\"\n                        data-nodeid=\"9988\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8710\">\n                      那么如何避免这种 [1, 4] 和 [4, 1] 重复的情况呢？\n                    </p>\n                    <p data-nodeid=\"8711\">\n                      <strong data-nodeid=\"10006\">去重方法 2</strong\n                      >：再看一下第 i 个人在选择范围上的（例 2 的）<strong\n                        data-nodeid=\"10007\"\n                        >结论 1</strong\n                      >：\n                    </p>\n                    <blockquote data-nodeid=\"8712\">\n                      <p data-nodeid=\"8713\">\n                        如果第 i 个人选择了 A[j]，那么第 i+1 个人的选择范围就是\n                        A[j + 1, N)\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8714\">\n                      为了方便讨论问题的本质，在只有两个人的情况下，结论 1\n                      由递归可以很容易展开成循环的情况（用循环描述起来更容易）。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = start; j &lt; end; j++):  <span class=\"hljs-comment\">// &lt;-- 第i人的选择</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> jj = j + <span class=\"hljs-number\">1</span>; jj &lt; end; jj++):  <span class=\"hljs-comment\">// &lt;-- 第i+1人的选择</span>\n</div></li><li><div class=\"code-word\">    {A[j], A[jj]} -&gt; 放到结果子集\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8716\">\n                      若 A[]\n                      数组中没有相同元素的进来，这样循环就不会产生相同子集。但是，如果有相同元素进来，我们需要将数组排序之后再进行处理：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">sort(A);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = start; j &lt; end; j++):  <span class=\"hljs-comment\">// &lt;-- 第i人的选择</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> jj = j + <span class=\"hljs-number\">1</span>; jj &lt; end; jj++):  <span class=\"hljs-comment\">// &lt;-- 第i+1人的选择</span>\n</div></li><li><div class=\"code-word\">    {A[j], A[jj]} -&gt; 放到结果子集\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"77299\" class=\"\">\n                      如果对于 A[] = [1, 4, 4, 4]\n                      而言（已经排序了），那么子集合中就只能出现 [1,\n                      4]，而不会再出现 [4, 1]。因为下面这个<strong\n                        data-nodeid=\"77320\"\n                        >结论 4</strong\n                      >\n                      是可以证明的：\n                    </p>\n\n                    <blockquote data-nodeid=\"8719\">\n                      <p data-nodeid=\"8720\">\n                        从一个有序数组中，选择一个子序列出来，这个子序列必然是有序的。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8721\">\n                      关于结论 4\n                      ，我希望你可以尝试证明一下，也欢迎你把证明过程写在评论区，我们一起交流。我们回到题目中来，如果只排序，只能保证\n                      [1, 4] 和 [4, 1] 两个子集不会重复，并不能避免 [1, A[1] =\n                      4] 和 [1, A[2] = 4] 这种类型的重复。\n                    </p>\n                    <p data-nodeid=\"81493\" class=\"\">\n                      看来是时候将<strong data-nodeid=\"81503\">去重方法 1</strong\n                      >和<strong data-nodeid=\"81504\">去重方法 2</strong>\n                      合体了。变身吧！\n                    </p>\n\n                    <p data-nodeid=\"8723\">\n                      <strong data-nodeid=\"10084\">最终解</strong>：再加\n                      hash_set，就可以避免重复子集了，代码如下所示（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">sort(A); <span class=\"hljs-comment\">// 排序</span>\n</div></li><li><div class=\"code-word\">i_set = HashSet;  <span class=\"hljs-comment\">// 第i个人的去重set</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = start; j &lt; end; j++) { <span class=\"hljs-comment\">// &lt; -- 第i人的选择</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (i_set.contains(A[j])) <span class=\"hljs-keyword\">continue</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  i1_set = HashSet;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> jj = j + <span class=\"hljs-number\">1</span>; jj &lt; end; jj++) {<span class=\"hljs-comment\">// &lt;-- 第i+1人的选择</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i1_set.contains(A[jj])) <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">    {A[j], A[jj]} -&gt; 放到结果子集\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8725\">下面我们再来看一道练习题。</p>\n                    <p data-nodeid=\"8726\">\n                      <strong data-nodeid=\"10090\">练习题 5</strong\n                      >：给定一个排序后的数组，去除里面的重复元素，求返回去重后数组的长度。\n                    </p>\n                    <blockquote data-nodeid=\"8727\">\n                      <p data-nodeid=\"8728\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/26.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10094\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/26.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10098\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/26.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10102\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8729\">\n                      如果你做过这个题，就会发现，在排序后的数组处理去重的时候，只需要和前面的元素进行比较就可以了。\n                    </p>\n                    <h5 data-nodeid=\"8730\">2. 3 个条件</h5>\n                    <p data-nodeid=\"8731\">接下来，我们再看回溯的 3 个条件。</p>\n                    <p data-nodeid=\"8732\">\n                      1）满足的状态：由于我们已经通过排序 +\n                      前面的元素进行比较，进行了去重，因此，只需要把状态放到结果中就可以。\n                    </p>\n                    <p data-nodeid=\"8733\">\n                      2）何时返回？一共有 N\n                      个元素，每个人只能选一个放到组合中。从第 0 个人到第 N-1\n                      个人都有元素可以选，第 [N, +inf) 个人都不会有元素可以选。\n                    </p>\n                    <p data-nodeid=\"8734\">\n                      3）第 i 个人可以选的元素，需要满足<strong\n                        data-nodeid=\"10117\"\n                        >结论 1，并且需要利用有序性来去重</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"8735\">\n                      【<strong data-nodeid=\"10123\">代码</strong\n                      >】那么到这里为止，我们已经可以写出代码了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">append</span><span class=\"hljs-params\">(List&lt;Integer&gt; box,\n</span></span></div></li><li><div class=\"code-word\">                      List&lt;List&lt;Integer&gt;&gt; ans) {\n</div></li><li><div class=\"code-word\">    ans.add(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;());\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (Integer x : box) {\n</div></li><li><div class=\"code-word\">      ans.get(ans.size() - <span class=\"hljs-number\">1</span>).add(x);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A,\n</span></span></div></li><li><div class=\"code-word\">                         <span class=\"hljs-keyword\">int</span> start, <span class=\"hljs-comment\">/*第i个人的选择范围(start, N)*/</span>\n</div></li><li><div class=\"code-word\">                         List&lt;Integer&gt; box,\n</div></li><li><div class=\"code-word\">                         List&lt;List&lt;Integer&gt;&gt; ans)\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">      append(box, ans);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 已经没得选了</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (start &gt;= N) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = start; j &lt; N; j++) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (j &gt; start &amp;&amp; A[j] == A[j-<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">        box.add(A[j]);\n</div></li><li><div class=\"code-word\">        backtrace(A, j + <span class=\"hljs-number\">1</span>, box, ans);\n</div></li><li><div class=\"code-word\">        box.remove(box.size()-<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class=\"hljs-keyword\">int</span>[] A) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">      List&lt;Integer&gt; box = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">      List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (N &lt;= <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      Arrays.sort(A);\n</div></li><li><div class=\"code-word\">      backtrace(A, <span class=\"hljs-number\">0</span>, box, ans);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"8737\">\n                      <p data-nodeid=\"8738\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10127\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10131\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10135\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8739\">\n                      <strong data-nodeid=\"10144\">复杂度分析</strong\n                      >：时间复杂度为 O(N x\n                      2<sup>N</sup>)，如果不算返回值占用的空间，空间复杂度为\n                      O(N)。\n                    </p>\n                    <p data-nodeid=\"8740\">\n                      【<strong data-nodeid=\"10150\">小结</strong\n                      >】在这里，我们步步为营，重点分析了第 i\n                      个人应该做的选择项，最后利用排序之后子序列无重复的特性进行了去重处理。\n                    </p>\n                    <p data-nodeid=\"8741\">\n                      这里我给出推导过程中的每一步的代码，供你参考。\n                    </p>\n                    <p data-nodeid=\"85677\" class=\"te-preview-highlight\">\n                      第一步，使用排序 + Set。\n                    </p>\n\n                    <blockquote data-nodeid=\"8743\">\n                      <p data-nodeid=\"8744\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10156\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10160\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10164\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8745\">\n                      第二步，使用排序+和前面的元素进行比较而去重。\n                    </p>\n                    <blockquote data-nodeid=\"8746\">\n                      <p data-nodeid=\"8747\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.1.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10169\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.1.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10173\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.1.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10177\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8748\">\n                      第三步：利用例 2\n                      的精简参数的办法，对第二步的代码进行“瘦身”。\n                    </p>\n                    <blockquote data-nodeid=\"8749\">\n                      <p data-nodeid=\"8750\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10182\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10186\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/90.%E5%AD%90%E9%9B%86-ii.2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10190\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"8751\">例 5：排列 2</h4>\n                    <p data-nodeid=\"8752\">\n                      【<strong data-nodeid=\"10201\">题目</strong\n                      >】给定一个<strong data-nodeid=\"10202\"\n                        >可包含重复数字</strong\n                      >的数组 A ，按任意顺序返回所有不重复的全排列。\n                    </p>\n                    <p data-nodeid=\"8753\">输入：A[] = [1, 1, 2]</p>\n                    <p data-nodeid=\"8754\">输出：[[1,1,2], [1,2,1], [2,1,1]]</p>\n                    <p data-nodeid=\"8755\">\n                      解释：[A[0], A[1], A[2]] 与 [A[1], A[0], A[2]]\n                      是一个重复的排列，不能放在其中。其他重复的排列也类似。因此最终只有\n                      3 个数组有排列。\n                    </p>\n                    <p data-nodeid=\"8756\">\n                      【<strong data-nodeid=\"10263\">分析</strong>】这个题与例 3\n                      的区别在于：数组 A[] 可能包含重复数字的。我们还是先从 1\n                      个核心开始分析。\n                    </p>\n                    <h5 data-nodeid=\"8757\">1. 1 个核心</h5>\n                    <p data-nodeid=\"8758\">\n                      根据例 3 的分析，当第 i 个人的选择范围是余下的 {4, 7, 4,\n                      ,4} 的时候，他可以进行的操作是不停地交换。\n                    </p>\n                    <p data-nodeid=\"8759\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/26/Cgp9HWBteRqATVJhAACynh0Mq7w152.png\"\n                        alt=\"Drawing 18.png\"\n                        data-nodeid=\"10270\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8760\">\n                      但是，当遇到下面这种场景时，可以发现，交换带来的结果是一样的：\n                    </p>\n                    <p data-nodeid=\"8761\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/2E/CioPOWBteSCAfdJcAAC171lwGnU669.png\"\n                        alt=\"Drawing 19.png\"\n                        data-nodeid=\"10274\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8762\">\n                      因此，需要去重。从第 i\n                      个人的视角出发，我们可以发现，由于执行的是 Swap\n                      操作，实际上没有必要重复地把一个相同值的元素放到 box\n                      中同样的位置。\n                    </p>\n                    <p data-nodeid=\"8763\">\n                      具体来说，我们可以采用<strong data-nodeid=\"10281\"\n                        >哈希记录</strong\n                      >的办法来去重。在例 3\n                      的基础上，修改代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] box,\n</span></span></div></li><li><div class=\"code-word\">                         <span class=\"hljs-keyword\">int</span> start,\n</div></li><li><div class=\"code-word\">                         List&lt;List&lt;Integer&gt;&gt; ans)\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = box == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : box.length;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (start == N) {\n</div></li><li><div class=\"code-word\">      append(box, ans);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    Set&lt;Integer&gt; s = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 第i个人的选择范围[start, end)</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = start; j &lt; N; j++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!s.contains(box[j])) {\n</div></li><li><div class=\"code-word\">        swap(box, start, j);\n</div></li><li><div class=\"code-word\">        backtrace(box, start + <span class=\"hljs-number\">1</span>, ans);\n</div></li><li><div class=\"code-word\">        swap(box, start, j);\n</div></li><li><div class=\"code-word\">        s.add(box[j]);\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"8765\">\n                      <p data-nodeid=\"8766\">\n                        完整代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10285\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10289\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10293\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8767\">\n                      不过，我们在例 4\n                      中，提到过一种重复的情况，比如下图展示等情况：\n                    </p>\n                    <p data-nodeid=\"8768\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/26/Cgp9HWBteSiAf626AALTqN7ChdM529.png\"\n                        alt=\"Drawing 20.png\"\n                        data-nodeid=\"10297\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8769\">\n                      为什么在这里不需要处理？因为在本题中，我们需要求解的是<strong\n                        data-nodeid=\"10311\"\n                        >排列</strong\n                      >，而 [1, 4] 和 [4, 1]\n                      本来就是不一样的，所以不需要处理这种情况。\n                    </p>\n                    <p data-nodeid=\"8770\">\n                      这里我们使用了 HashSet，虽然它的复杂度是\n                      O(1)，但是在<strong data-nodeid=\"10317\"\n                        >数据量比较小</strong\n                      >的时候，直接基于线性查找的方式可能会更快一些。主要基于以下两点：\n                    </p>\n                    <ul data-nodeid=\"8771\">\n                      <li data-nodeid=\"8772\">\n                        <p data-nodeid=\"8773\">\n                          HashSet 需要动态申请和释放内存，代价比较大；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8774\">\n                        <p data-nodeid=\"8775\">\n                          线性查找具有较好的内存局部性，对 CPU 的缓存更加友好。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8776\">\n                      因此，我们可以使用线性查找的方式来确定将要交换的元素在之前是否出现过了。\n                    </p>\n                    <p data-nodeid=\"8777\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/32/2F/CioPOWBteTCALbz-AAC6scJpg2I034.png\"\n                        alt=\"Drawing 21.png\"\n                        data-nodeid=\"10323\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8778\">\n                      由于第 i 个人只需要执行 Swap 操作，那么，当前面已经将 4\n                      放到 box[start]，后面的 box[j] = 4 就没有必要再执行 Swap\n                      操作，将 4 放到 box[start] 里了。\n                    </p>\n                    <p data-nodeid=\"8779\">\n                      所以，除了用哈希处理，我们还可以直接利用线性查找这一操作：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = start; k &lt; j; k++) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (box[k] == A[j]) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//不要处理A[j] &lt;-- 类似于哈希的已经找到了!</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h5 data-nodeid=\"8781\">2. 3 个条件</h5>\n                    <p data-nodeid=\"8782\">\n                      经过前面的洗礼，想必你对于三个条件的分析已经非常明白了，下面我们再总结一下。\n                    </p>\n                    <ul data-nodeid=\"8783\">\n                      <li data-nodeid=\"8784\">\n                        <p data-nodeid=\"8785\">\n                          满足的状态：一个排列成功之后，其长度应该与原数组的长度一样。所以我们需要\n                          box 的长度与输入的数组长度一样。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8786\">\n                        <p data-nodeid=\"8787\">\n                          何时返回？一共有 N\n                          个元素，每个人只能选一个放到排列中。从第 0 个人到第\n                          N-1 个人都有元素可以选，第 [N, +inf)\n                          个人都不会有元素可以选。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8788\">\n                        <p data-nodeid=\"8789\">\n                          第 i 个人可以选的元素，需要满足结论 2 和结论\n                          3，并且还需要注意<strong data-nodeid=\"10350\"\n                            >去重。</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"8790\">\n                      【<strong data-nodeid=\"10356\">代码</strong\n                      >】那么最终代码可以如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Solution</span>\n</span></div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">append</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] box, List&lt;List&lt;Integer&gt;&gt; ans)</span> </span>{\n</div></li><li><div class=\"code-word\">    ans.add(<span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;());\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (Integer x : box) {\n</div></li><li><div class=\"code-word\">      ans.get(ans.size() - <span class=\"hljs-number\">1</span>).add(x);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] box, <span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> j)</span> </span>{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">int</span> t = box[i];\n</div></li><li><div class=\"code-word\">      box[i] = box[j];\n</div></li><li><div class=\"code-word\">      box[j] = t;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] box, <span class=\"hljs-keyword\">int</span> start, <span class=\"hljs-keyword\">int</span> end, <span class=\"hljs-keyword\">int</span> val)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = start; i &lt; end; i++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (box[i] == val) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">backtrace</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] box,\n</span></span></div></li><li><div class=\"code-word\">                         <span class=\"hljs-keyword\">int</span> start,\n</div></li><li><div class=\"code-word\">                         List&lt;List&lt;Integer&gt;&gt; ans)\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = box == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : box.length;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// box中只有[0, ..., N)几个空位置</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 当第i个人进来放东西的时候，</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 并且要取的范围是[start, N)</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 也就是[N, N)</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 1. 肯定是没有东西放的</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 2. 并且box此时已经放满了</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (start == N) {\n</div></li><li><div class=\"code-word\">      append(box, ans);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 第i个人的选择范围[start, end)</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = start; j &lt; N; j++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!find(box, start, j, box[j])) {\n</div></li><li><div class=\"code-word\">        swap(box, start, j);\n</div></li><li><div class=\"code-word\">        backtrace(box, start + <span class=\"hljs-number\">1</span>, ans);\n</div></li><li><div class=\"code-word\">        swap(box, start, j);\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class=\"hljs-keyword\">int</span>[] A) {\n</div></li><li><div class=\"code-word\">      List&lt;Integer&gt; box = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">      List&lt;List&lt;Integer&gt;&gt; ans = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (N == <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      backtrace(A<span class=\"hljs-comment\">/*box*/</span>, <span class=\"hljs-number\">0</span>, ans);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"8792\">\n                      <p data-nodeid=\"8793\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.1.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10360\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.1.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10364\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/47.%E5%85%A8%E6%8E%92%E5%88%97-ii.1.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10368\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8794\">\n                      <strong data-nodeid=\"10377\">复杂度分析</strong\n                      >：最差情况下，假设每个数都不一样，一共有 O(N!)\n                      种排列，每种排列需要 O(N) 来放到输出里面，所以时间复杂度为\n                      O(N x N!)。如果不算返回值，那么空间复杂度就是 O(N)。\n                    </p>\n                    <p data-nodeid=\"8795\">\n                      【<strong data-nodeid=\"10383\">小结</strong\n                      >】在排列的情况下，我们发现，实际上去重操作要简单一些，只需要保证第\n                      i 个人不要重复地把相同的内容放到同一个位置就可以了。\n                    </p>\n                    <p data-nodeid=\"8796\">\n                      以上，我们学习了两个子集问题，两个排列问题，下面我分别从两个维度去总结两个题目。\n                    </p>\n                    <p data-nodeid=\"8797\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/2F/CioPOWBteT-AImZjAADTAQrjfTc956.png\"\n                        alt=\"Drawing 22.png\"\n                        data-nodeid=\"10387\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8798\">\n                      这里我再留一个思考题，检验一下你对子集和排列的理解是否到位。\n                    </p>\n                    <p data-nodeid=\"8799\">\n                      <strong data-nodeid=\"10393\">思考题</strong\n                      >：在排列组合中，子集问题的递归函数的写法是：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">backTrace(A, start, box, ans)\n</div></li><li><div class=\"code-word\">  |-&gt; backTrace(A, j + <span class=\"hljs-number\">1</span>, box, ans)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8801\">而排列问题的递归调用是：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">backTrace(box, start, ans)\n</div></li><li><div class=\"code-word\">  |-&gt; backTrace(A, start + <span class=\"hljs-number\">1</span>, box, ans)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8803\">\n                      为什么一个是 j+1，一个是 start+1\n                      呢？老规矩，你一定要自己操作一下，这样才能真正消化我给你讲解的知识和解题技巧。\n                    </p>\n                    <h3 data-nodeid=\"8804\">总结</h3>\n                    <p data-nodeid=\"8805\">\n                      在本讲，我们介绍了回溯题目的 1 个模板、1 个核心，以及 3\n                      个条件。选取了几道具有代表性的题目进行讲解，回溯的题目还有很多。不过只要你领会到本讲价绍的分析方法和解题思想，再遇到回溯问题就难不倒你了。另外，我再强调一句，在处理回溯问题时，还需要注意去重的处理，理解为什么要这样处理。\n                    </p>\n                    <p data-nodeid=\"8806\">\n                      为了方便你复习，我把本讲重要的知识点总结在如下图所示的思维导图里，你可以利用课下时间进行消化，再结合练习题巩固今天所学的知识。\n                    </p>\n                    <p data-nodeid=\"8807\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/32/26/Cgp9HWBteUaAFj2OAAIfg-QqiDc226.png\"\n                        alt=\"Drawing 23.png\"\n                        data-nodeid=\"10401\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"8808\">思考题</h3>\n                    <p data-nodeid=\"8809\">最后再给你留一个思考题。</p>\n                    <p data-nodeid=\"8810\">\n                      找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1~9\n                      的正整数，并且每种组合中不存在重复的数字。\n                    </p>\n                    <p data-nodeid=\"8811\">输入：n = 7, k = 3</p>\n                    <p data-nodeid=\"8812\">输出：[1, 2, 4]</p>\n                    <p data-nodeid=\"8813\">\n                      解释：只有 3 个数且和为 7 的组合为 [1, 2, 4]\n                    </p>\n                    <blockquote data-nodeid=\"8814\">\n                      <p data-nodeid=\"8815\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-iii.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10419\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-iii.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10423\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/12.BackTrack/216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C-iii.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"10427\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"8816\" class=\"\">\n                      关于回溯的知识我们就介绍到这里，接下来请和我一起踏上更加奇妙的算法旅程，下一讲将介绍：13\n                      | 搜索：如何掌握 DFS 与 BFS 的解题套路？记得按时来探险。\n                    </p>\n            "}