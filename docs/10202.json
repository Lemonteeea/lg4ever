{"title":"01 | 代码基本功测试（上）：JS 的数据类型你了解多少？","context":"\n                    <p data-nodeid=\"7562\" class=\"\">\n                      在第一讲我要为你介绍的是 JS 数据类型的相关知识。\n                    </p>\n                    <p data-nodeid=\"7563\">\n                      作为 JavaScript 的入门级知识点，JS 数据类型在整个\n                      JavaScript 的学习过程中其实尤为重要。因为在 JavaScript\n                      编程中，我们经常会遇到边界数据类型条件判断问题，很多代码只有在某种特定的数据类型下，才能可靠地执行。\n                    </p>\n                    <p data-nodeid=\"7564\">\n                      尤其在大厂面试中，经常需要你现场手写代码，因此你很有必要提前考虑好数据类型的边界判断问题，并在你的\n                      JavaScript\n                      逻辑编写前进行前置判断，这样才能让面试官看到你严谨的编程逻辑和深入思考的能力，面试才可以加分。\n                    </p>\n                    <p data-nodeid=\"7565\">\n                      因此，这一讲我将从数据类型的<strong data-nodeid=\"7730\"\n                        >概念</strong\n                      >、<strong data-nodeid=\"7731\">检测方法</strong>、<strong\n                        data-nodeid=\"7732\"\n                        >转换方法</strong\n                      >几个方面，帮你梳理和深入学习 JavaScript\n                      的数据类型的知识点。\n                    </p>\n                    <p data-nodeid=\"7566\">\n                      我希望通过本讲的学习，你能够熟练掌握数据类型的判断以及转换等相关知识点，并且在遇到数据类型判断以及数据类型的隐式转换等问题时可以轻松应对。\n                    </p>\n                    <h3 data-nodeid=\"7567\">数据类型概念</h3>\n                    <p data-nodeid=\"7568\">\n                      JavaScript 的数据类型有下图所示的 8 种：\n                    </p>\n                    <p data-nodeid=\"7569\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/F0/CgpVE1_4DdGAJ_EXAAE38RQC0js096.png\"\n                        alt=\"Lark20210108-154509.png\"\n                        data-nodeid=\"7738\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7570\">\n                      其中，前 7 种类型为基础类型，最后 1\n                      种（Object）为引用类型，也是你需要重点关注的，因为它在日常工作中是使用得最频繁，也是需要关注最多技术细节的数据类型。\n                    </p>\n                    <p data-nodeid=\"7571\">\n                      而引用数据类型（Object）又分为图上这几种常见的类型：Array\n                      - 数组对象、RegExp - 正则对象、Date - 日期对象、Math -\n                      数学函数、Function - 函数对象。\n                    </p>\n                    <p data-nodeid=\"7572\">\n                      在这里，我想先请你重点了解下面两点，因为各种 JavaScript\n                      的数据类型最后都会在初始化之后放在不同的内存中，因此上面的数据类型大致可以分成两类来进行存储：\n                    </p>\n                    <ol data-nodeid=\"7573\">\n                      <li data-nodeid=\"7574\">\n                        <p data-nodeid=\"7575\">\n                          基础类型存储在<strong data-nodeid=\"7747\"\n                            >栈内存</strong\n                          >，被引用或拷贝时，会创建一个完全相等的变量；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7576\">\n                        <p data-nodeid=\"7577\">\n                          引用类型存储在<strong data-nodeid=\"7757\"\n                            >堆内存</strong\n                          >，存储的是地址，多个引用指向同一个地址，这里会涉及一个“<strong\n                            data-nodeid=\"7758\"\n                            >共享</strong\n                          >”的概念。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"7578\">\n                      关于引用类型下面直接通过两段代码来讲解，让你深入理解一下核心“共享”的概念。\n                    </p>\n                    <h4 data-nodeid=\"7579\">题目一：初出茅庐</h4>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> a = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'lee'</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> b = a;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(a.name);  <span class=\"hljs-comment\">//第一个console</span>\n</div></li><li><div class=\"code-word\">b.name = <span class=\"hljs-string\">'son'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(a.name);  <span class=\"hljs-comment\">//第二个console</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(b.name);  <span class=\"hljs-comment\">//第三个console</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7581\">\n                      这道题比较简单，我们可以看到第一个 console 打出来 name 是\n                      'lee'，这应该没什么疑问；但是在执行了 b.name='son'\n                      之后，结果你会发现 a 和 b 的属性 name 都是\n                      'son'，第二个和第三个打印结果是一样的，这里就体现了引用类型的“共享”的特性，即这两个值都存在同一块内存中共享，一个发生了改变，另外一个也随之跟着变化。\n                    </p>\n                    <p data-nodeid=\"7582\">\n                      你可以直接在 Chrome\n                      控制台敲一遍，深入理解一下这部分概念。下面我们再看一段代码，它是比题目一稍复杂一些的对象属性变化问题。\n                    </p>\n                    <h4 data-nodeid=\"7583\">题目二：渐入佳境</h4>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> a = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Julia'</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">change</span>(<span class=\"hljs-params\">o</span>) </span>{\n</div></li><li><div class=\"code-word\">  o.age = <span class=\"hljs-number\">24</span>;\n</div></li><li><div class=\"code-word\">  o = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Kath'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> o;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> b = change(a);     <span class=\"hljs-comment\">// 注意这里没有new，后面new相关会有专门文章讲解</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(b.age);    <span class=\"hljs-comment\">// 第一个console</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(a.age);    <span class=\"hljs-comment\">// 第二个console</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7585\">\n                      这道题涉及了 function，你通过上述代码可以看到第一个\n                      console 的结果是 30，b 最后打印结果是 {name: \"Kath\", age:\n                      30}；第二个 console 的返回结果是 24，而 a 最后的打印结果是\n                      {name: \"Julia\", age: 24}。\n                    </p>\n                    <p data-nodeid=\"7586\">\n                      是不是和你预想的有些区别？你要注意的是，<strong\n                        data-nodeid=\"7790\"\n                        >这里的 function 和 return 带来了不一样的东西</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"8000\" class=\"te-preview-highlight\">\n                      原因在于：函数传参进来的\n                      o，传递的是对象在堆中的内存地址值，通过调用 o.age = 24（第\n                      7 行代码）确实改变了 a 对象的 age 属性；12 行把参数 o\n                      的地址重新返回了，将 {name: \"Kath\", age: 30}\n                      存入其中，最后返回 b 的值就变成了 {name: \"Kath\", age:\n                      30}。而如果把第 12 行去掉，那么 b 就会返回\n                      undefined。这里你可以再仔细琢磨一下。\n                    </p>\n\n                    <p data-nodeid=\"7588\">\n                      讲完数据类型的基本概念，我们继续看下一部分，如何对数据类型进行检测，这也是比较重要的问题。\n                    </p>\n                    <h3 data-nodeid=\"7589\">数据类型检测</h3>\n                    <p data-nodeid=\"7590\">\n                      数据类型检测也是面试过程中经常会遇到的问题，比如：如何判断是否为数组？让你写一段代码把\n                      JavaScript\n                      的各种数据类型判断出来，等等。类似的题目会很多，而且在平常写代码过程中我们也会经常用到。\n                    </p>\n                    <p data-nodeid=\"7591\">\n                      我也经常在面试一些候选人的时候，有些回答比如“用 typeof\n                      来判断”，然后就没有其他答案了，但这样的回答是不能令面试官满意的，因为他要考察你对\n                      JS\n                      的数据类型理解的深度，所以我们先要做到的是对各种数据类型的判断方法了然于胸，然后再进行归纳总结，给面试官一个满意的答案。\n                    </p>\n                    <p data-nodeid=\"7592\">\n                      数据类型的判断方法其实有很多种，比如 typeof 和\n                      instanceof，下面我来重点介绍三种在工作中经常会遇到的数据类型检测方法。\n                    </p>\n                    <h4 data-nodeid=\"7593\">第一种判断方法：typeof</h4>\n                    <p data-nodeid=\"7594\">\n                      这是比较常用的一种，那么我们通过一段代码来快速回顾一下这个方法。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 'number'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-string\">'1'</span> <span class=\"hljs-comment\">// 'string'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">// 'undefined'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 'boolean'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">Symbol</span>() <span class=\"hljs-comment\">// 'symbol'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// 'object'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">typeof</span> [] <span class=\"hljs-comment\">// 'object'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">typeof</span> {} <span class=\"hljs-comment\">// 'object'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span> <span class=\"hljs-comment\">// 'object'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log <span class=\"hljs-comment\">// 'function'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7596\">\n                      你可以看到，前 6 个都是基础数据类型，而为什么第 6 个 null\n                      的 typeof 是 'object' 呢？这里要和你强调一下，虽然 typeof\n                      null 会输出 object，但这只是 JS 存在的一个悠久 Bug，不代表\n                      null 就是引用数据类型，并且 null\n                      本身也不是对象。因此，null 在 typeof\n                      之后返回的是有问题的结果，不能作为判断 null\n                      的方法。如果你需要在 if 语句中判断是否为 null，直接通过\n                      ‘===null’来判断就好。\n                    </p>\n                    <p data-nodeid=\"7597\">\n                      此外还要注意，引用数据类型 Object，用 typeof\n                      来判断的话，除了 function 会判断为 OK 以外，其余都是\n                      'object'，是无法判断出来的。\n                    </p>\n                    <h4 data-nodeid=\"7598\">第二种判断方法：instanceof</h4>\n                    <p data-nodeid=\"7599\">\n                      想必 instanceof 的方法你也听说过，我们 new\n                      一个对象，那么这个新对象就是它原型链继承上面的对象了，通过\n                      instanceof\n                      我们能判断这个对象是否是之前那个构造函数生成的对象，这样就基本可以判断出这个新对象的数据类型。下面通过代码来了解一下。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> Car = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> benz = <span class=\"hljs-keyword\">new</span> Car()\n</div></li><li><div class=\"code-word\">benz <span class=\"hljs-keyword\">instanceof</span> Car <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> car = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-string\">'Mercedes Benz'</span>)\n</div></li><li><div class=\"code-word\">car <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">'Covid-19'</span>\n</div></li><li><div class=\"code-word\">str <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// false</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7601\">\n                      上面就是用 instanceof\n                      方法判断数据类型的大致流程，那么如果让你自己实现一个\n                      instanceof 的底层实现，应该怎么写呢？请看下面的代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myInstanceof</span>(<span class=\"hljs-params\">left, right</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里先用typeof来判断基础数据类型，如果是，直接返回false</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> left !== <span class=\"hljs-string\">'object'</span> || left === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// getProtypeOf是Object对象自带的API，能够拿到参数的原型对象</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> proto = <span class=\"hljs-built_in\">Object</span>.getPrototypeOf(left);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) {                  <span class=\"hljs-comment\">//循环往下寻找，直到找到相同的原型对象</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>(proto === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>(proto === right.prototype) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//找到相同原型对象，返回true</span>\n</div></li><li><div class=\"code-word\">    proto = <span class=\"hljs-built_in\">Object</span>.getPrototypeof(proto);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 验证一下自己实现的myInstanceof是否OK</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(myInstanceof(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-number\">123</span>), <span class=\"hljs-built_in\">Number</span>));    <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(myInstanceof(<span class=\"hljs-number\">123</span>, <span class=\"hljs-built_in\">Number</span>));                <span class=\"hljs-comment\">// false</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7603\">\n                      现在你知道了两种判断数据类型的方法，那么它们之间有什么差异呢？我总结了下面两点：\n                    </p>\n                    <ol data-nodeid=\"7604\">\n                      <li data-nodeid=\"7605\">\n                        <p data-nodeid=\"7606\">\n                          instanceof\n                          可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7607\">\n                        <p data-nodeid=\"7608\">\n                          而 typeof 也存在弊端，它虽然可以判断基础数据类型（null\n                          除外），但是引用数据类型中，除了 function\n                          类型以外，其他的也无法判断。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"7609\">\n                      总之，不管单独用 typeof 还是\n                      instanceof，都不能满足所有场景的需求，而只能通过二者混写的方式来判断。但是这种方式判断出来的其实也只是大多数情况，并且写起来也比较难受，你也可以试着写一下。\n                    </p>\n                    <p data-nodeid=\"7610\">\n                      其实我个人还是比较推荐下面的第三种方法，相比上述两个而言，能更好地解决数据类型检测问题。\n                    </p>\n                    <h4 data-nodeid=\"7611\">\n                      第三种判断方法：Object.prototype.toString\n                    </h4>\n                    <p data-nodeid=\"7612\">\n                      toString() 是 Object\n                      的原型方法，调用该方法，可以统一返回格式为 “[object Xxx]”\n                      的字符串，其中 Xxx 就是对象的类型。对于 Object\n                      对象，直接调用 toString() 就能返回 [object\n                      Object]；而对于其他对象，则需要通过 call\n                      来调用，才能返回正确的类型信息。我们来看一下代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString({})       <span class=\"hljs-comment\">// \"[object Object]\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call({})  <span class=\"hljs-comment\">// 同上结果，加上call也ok</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-number\">1</span>)    <span class=\"hljs-comment\">// \"[object Number]\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-string\">'1'</span>)  <span class=\"hljs-comment\">// \"[object String]\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-literal\">true</span>)  <span class=\"hljs-comment\">// \"[object Boolean]\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{})  <span class=\"hljs-comment\">// \"[object Function]\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-literal\">null</span>)   <span class=\"hljs-comment\">//\"[object Null]\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">//\"[object Undefined]\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-regexp\">/123/g</span>)    <span class=\"hljs-comment\">//\"[object RegExp]\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()) <span class=\"hljs-comment\">//\"[object Date]\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call([])       <span class=\"hljs-comment\">//\"[object Array]\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-built_in\">document</span>)  <span class=\"hljs-comment\">//\"[object HTMLDocument]\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Object</span>.prototype.toString.call(<span class=\"hljs-built_in\">window</span>)   <span class=\"hljs-comment\">//\"[object Window]\"</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7614\">\n                      从上面这段代码可以看出，Object.prototype.toString.call()\n                      可以很好地判断引用类型，甚至可以把 document 和 window\n                      都区分开来。\n                    </p>\n                    <p data-nodeid=\"7615\">\n                      但是在写判断条件的时候一定要注意，使用这个方法最后返回统一字符串格式为\n                      \"[object Xxx]\" ，而这里字符串里面的 \"Xxx\" ，<strong\n                        data-nodeid=\"7851\"\n                        >第一个首字母要大写</strong\n                      >（注意：使用 typeof 返回的是小写），这里需要多加留意。\n                    </p>\n                    <p data-nodeid=\"7616\">\n                      那么下面来实现一个全局通用的数据类型判断方法，来加深你的理解，代码如下。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getType</span>(<span class=\"hljs-params\">obj</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> type  = <span class=\"hljs-keyword\">typeof</span> obj;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (type !== <span class=\"hljs-string\">\"object\"</span>) {    <span class=\"hljs-comment\">// 先进行typeof判断，如果是基础数据类型，直接返回</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> type;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 对于typeof返回结果是object的，再进行如下的判断，正则返回结果</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(obj).replace(<span class=\"hljs-regexp\">/^\\[object (\\S+)\\]$/</span>, <span class=\"hljs-string\">'$1'</span>);  <span class=\"hljs-comment\">// 注意正则中间有个空格</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/* 代码验证，需要注意大小写，哪些是typeof判断，哪些是toString判断？思考下 */</span>\n</div></li><li><div class=\"code-word\">getType([])     <span class=\"hljs-comment\">// \"Array\" typeof []是object，因此toString返回</span>\n</div></li><li><div class=\"code-word\">getType(<span class=\"hljs-string\">'123'</span>)  <span class=\"hljs-comment\">// \"string\" typeof 直接返回</span>\n</div></li><li><div class=\"code-word\">getType(<span class=\"hljs-built_in\">window</span>) <span class=\"hljs-comment\">// \"Window\" toString返回</span>\n</div></li><li><div class=\"code-word\">getType(<span class=\"hljs-literal\">null</span>)   <span class=\"hljs-comment\">// \"Null\"首字母大写，typeof null是object，需toString来判断</span>\n</div></li><li><div class=\"code-word\">getType(<span class=\"hljs-literal\">undefined</span>)   <span class=\"hljs-comment\">// \"undefined\" typeof 直接返回</span>\n</div></li><li><div class=\"code-word\">getType()            <span class=\"hljs-comment\">// \"undefined\" typeof 直接返回</span>\n</div></li><li><div class=\"code-word\">getType(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{}) <span class=\"hljs-comment\">// \"function\" typeof能判断，因此首字母小写</span>\n</div></li><li><div class=\"code-word\">getType(<span class=\"hljs-regexp\">/123/g</span>)      <span class=\"hljs-comment\">//\"RegExp\" toString返回</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7618\">\n                      到这里，数据类型检测的三种方法就介绍完了，最后也给出来了示例代码，希望你可以对比着来学习、使用，并且不断加深记忆，以便遇到问题时不会手忙脚乱。你如果一遍记不住可以多次来回看巩固，直到把上面的代码都能全部理解，并且把几个特殊的问题都强化记忆，这样未来你去做类似题目才不会有问题。\n                    </p>\n                    <p data-nodeid=\"7619\">\n                      下面我们来看本讲的最后一部分：数据类型的转换。\n                    </p>\n                    <h3 data-nodeid=\"7620\">数据类型转换</h3>\n                    <p data-nodeid=\"7621\">\n                      在日常的业务开发中，经常会遇到 JavaScript\n                      数据类型转换问题，有的时候需要我们主动进行强制转换，而有的时候\n                      JavaScript\n                      会进行隐式转换，隐式转换的时候就需要我们多加留心。\n                    </p>\n                    <p data-nodeid=\"7622\">\n                      那么这部分都会涉及哪些内容呢？我们先看一段代码，了解下大致的情况。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">'123'</span> == <span class=\"hljs-number\">123</span>   <span class=\"hljs-comment\">// false or true?</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">''</span> == <span class=\"hljs-literal\">null</span>    <span class=\"hljs-comment\">// false or true?</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">''</span> == <span class=\"hljs-number\">0</span>        <span class=\"hljs-comment\">// false or true?</span>\n</div></li><li><div class=\"code-word\">[] == <span class=\"hljs-number\">0</span>        <span class=\"hljs-comment\">// false or true?</span>\n</div></li><li><div class=\"code-word\">[] == <span class=\"hljs-string\">''</span>       <span class=\"hljs-comment\">// false or true?</span>\n</div></li><li><div class=\"code-word\">[] == ![]      <span class=\"hljs-comment\">// false or true?</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">// &nbsp;false or true?</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-literal\">null</span>)     <span class=\"hljs-comment\">// 返回什么？</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">''</span>)      <span class=\"hljs-comment\">//&nbsp;返回什么？</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">''</span>);    <span class=\"hljs-comment\">// 返回什么？</span>\n</div></li><li><div class=\"code-word\">{}+<span class=\"hljs-number\">10</span>           <span class=\"hljs-comment\">//&nbsp;返回什么？</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> obj = {\n</div></li><li><div class=\"code-word\">    [<span class=\"hljs-built_in\">Symbol</span>.toPrimitive]() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">200</span>;\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    valueOf() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">300</span>;\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    toString() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Hello'</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(obj + <span class=\"hljs-number\">200</span>); <span class=\"hljs-comment\">// 这里打印出来是多少？</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7624\">\n                      上面这 12\n                      个问题相信你并不陌生，基本涵盖了我们平常容易疏漏的一些情况，这就是在做数据类型转换时经常会遇到的强制转换和隐式转换的方式，那么下面我就围绕数据类型的两种转换方式详细讲解一下，希望可以为你提供一些借鉴。\n                    </p>\n                    <h4 data-nodeid=\"7625\">强制类型转换</h4>\n                    <p data-nodeid=\"7626\">\n                      强制类型转换方式包括\n                      Number()、parseInt()、parseFloat()、toString()、String()、Boolean()，这几种方法都比较类似，通过字面意思可以很容易理解，都是通过自身的方法来进行数据类型的强制转换。下面我列举一些来详细说明。\n                    </p>\n                    <p data-nodeid=\"7627\">\n                      上面代码中，第 8 行的结果是 0，第 9 行的结果同样是 0，第\n                      10 行的结果是\n                      NaN。这些都是很明显的强制类型转换，因为用到了 Number() 和\n                      parseInt()。\n                    </p>\n                    <p data-nodeid=\"7628\">\n                      其实上述几个强制类型转换的原理大致相同，下面我挑两个比较有代表性的方法进行讲解。\n                    </p>\n                    <p data-nodeid=\"7629\">\n                      <strong data-nodeid=\"7866\"\n                        >Number() 方法的强制转换规则</strong\n                      >\n                    </p>\n                    <ul data-nodeid=\"7630\">\n                      <li data-nodeid=\"7631\">\n                        <p data-nodeid=\"7632\">\n                          如果是布尔值，true 和 false 分别被转换为 1 和 0；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7633\">\n                        <p data-nodeid=\"7634\">如果是数字，返回自身；</p>\n                      </li>\n                      <li data-nodeid=\"7635\">\n                        <p data-nodeid=\"7636\">如果是 null，返回 0；</p>\n                      </li>\n                      <li data-nodeid=\"7637\">\n                        <p data-nodeid=\"7638\">\n                          如果是 undefined，返回&nbsp;NaN；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7639\">\n                        <p data-nodeid=\"7640\">\n                          如果是字符串，遵循以下规则：如果字符串中只包含数字（或者是&nbsp;0X&nbsp;/&nbsp;0x&nbsp;开头的十六进制数字字符串，允许包含正负号），则将其转换为十进制；如果字符串中包含有效的浮点格式，将其转换为浮点数值；如果是空字符串，将其转换为\n                          0；如果不是以上格式的字符串，均返回&nbsp;NaN；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7641\">\n                        <p data-nodeid=\"7642\">如果是 Symbol，抛出错误；</p>\n                      </li>\n                      <li data-nodeid=\"7643\">\n                        <p data-nodeid=\"7644\">\n                          如果是对象，并且部署了 [Symbol.toPrimitive]\n                          ，那么调用此方法，否则调用对象的&nbsp;valueOf()&nbsp;方法，然后依据前面的规则转换返回的值；如果转换的结果是&nbsp;NaN&nbsp;，则调用对象的&nbsp;toString()&nbsp;方法，再次依照前面的顺序转换返回对应的值（Object\n                          转换规则会在下面细讲）。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7645\">下面通过一段代码来说明上述规则。</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-literal\">true</span>);        <span class=\"hljs-comment\">// 1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-literal\">false</span>);       <span class=\"hljs-comment\">// 0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">'0111'</span>);      <span class=\"hljs-comment\">//111</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-literal\">null</span>);        <span class=\"hljs-comment\">//0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">''</span>);          <span class=\"hljs-comment\">//0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">'1a'</span>);        <span class=\"hljs-comment\">//NaN</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-number\">-0X11</span>);       <span class=\"hljs-comment\">//-17</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">'0X11'</span>)       <span class=\"hljs-comment\">//17</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7647\">\n                      其中，我分别列举了比较常见的 Number\n                      转换的例子，它们都会把对应的非数字类型转换成数字类型，而有一些实在无法转换成数字的，最后只能输出\n                      NaN 的结果。<br />\n                      <strong data-nodeid=\"7884\"\n                        >Boolean() 方法的强制转换规则</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"7648\">\n                      这个方法的规则是：除了 undefined、 null、 false、 ''、\n                      0（包括 +0，-0）、 NaN 转换出来是 false，其他都是 true。\n                    </p>\n                    <p data-nodeid=\"7649\">\n                      这个规则应该很好理解，没有那么多条条框框，我们还是通过代码来形成认知，如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-number\">0</span>)          <span class=\"hljs-comment\">//false</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-literal\">null</span>)       <span class=\"hljs-comment\">//false</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-literal\">undefined</span>)  <span class=\"hljs-comment\">//false</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-literal\">NaN</span>)        <span class=\"hljs-comment\">//false</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-number\">1</span>)          <span class=\"hljs-comment\">//true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-number\">13</span>)         <span class=\"hljs-comment\">//true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-string\">'12'</span>)       <span class=\"hljs-comment\">//true</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7651\">\n                      其余的 parseInt()、parseFloat()、toString()、String()\n                      这几个方法，你可以按照我的方式去整理一下规则，在这里不占过多篇幅了。\n                    </p>\n                    <h4 data-nodeid=\"7652\">隐式类型转换</h4>\n                    <p data-nodeid=\"7653\">\n                      凡是通过逻辑运算符 (&amp;&amp;、 ||、 !)、运算符\n                      (+、-、*、/)、关系操作符 (&gt;、 &lt;、 &lt;=\n                      、&gt;=)、相等运算符 (==) 或者 if/while\n                      条件的操作，如果遇到两个数据类型不一样的情况，都会出现隐式类型转换。这里你需要重点关注一下，因为比较隐蔽，特别容易让人忽视。\n                    </p>\n                    <p data-nodeid=\"7654\">\n                      下面着重讲解一下日常用得比较多的“==”和“+”这两个符号的隐式转换规则。\n                    </p>\n                    <p data-nodeid=\"7655\">\n                      <strong data-nodeid=\"7934\"\n                        >'==' 的隐式类型转换规则</strong\n                      >\n                    </p>\n                    <ul data-nodeid=\"7656\">\n                      <li data-nodeid=\"7657\">\n                        <p data-nodeid=\"7658\">\n                          如果类型相同，无须进行类型转换；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7659\">\n                        <p data-nodeid=\"7660\">\n                          如果其中一个操作值是 null 或者\n                          undefined，那么另一个操作符必须为 null 或者\n                          undefined，才会返回 true，否则都返回 false；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7661\">\n                        <p data-nodeid=\"7662\">\n                          如果其中一个是 Symbol 类型，那么返回 false；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7663\">\n                        <p data-nodeid=\"7664\">\n                          两个操作值如果为 string 和 number\n                          类型，那么就会将字符串转换为 number；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7665\">\n                        <p data-nodeid=\"7666\">\n                          如果一个操作值是 boolean，那么转换成 number；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7667\">\n                        <p data-nodeid=\"7668\">\n                          如果一个操作值为 object 且另一方为 string、number 或者\n                          symbol，就会把 object 转为原始类型再进行判断（调用\n                          object 的 valueOf/toString 方法进行转换）。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7669\">\n                      如果直接死记这些理论会有点懵，我们还是直接看代码，这样更容易理解一些，如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span>       <span class=\"hljs-comment\">// true  规则2</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-literal\">null</span> == <span class=\"hljs-number\">0</span>               <span class=\"hljs-comment\">// false 规则2</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">''</span> == <span class=\"hljs-literal\">null</span>              <span class=\"hljs-comment\">// false 规则2</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">''</span> == <span class=\"hljs-number\">0</span>                 <span class=\"hljs-comment\">// true  规则4 字符串转隐式转换成Number之后再对比</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">'123'</span> == <span class=\"hljs-number\">123</span>            <span class=\"hljs-comment\">// true  规则4 字符串转隐式转换成Number之后再对比</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">0</span> == <span class=\"hljs-literal\">false</span>              <span class=\"hljs-comment\">// true  e规则 布尔型隐式转换成Number之后再对比</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">1</span> == <span class=\"hljs-literal\">true</span>               <span class=\"hljs-comment\">// true  e规则 布尔型隐式转换成Number之后再对比</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = {\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-attr\">valueOf</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">this</span>.value++;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.value;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 注意这里a又可以等于1、2、3</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(a == <span class=\"hljs-number\">1</span> &amp;&amp; a == <span class=\"hljs-number\">2</span> &amp;&amp; a ==<span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">//true f规则 Object隐式转换</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 注：但是执行过3遍之后，再重新执行a==3或之前的数字就是false，因为value已经加上去了，这里需要注意一下</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7671\">\n                      对照着这个规则看完上面的代码和注解之后，你可以再回过头做一下我在讲解“数据类型转换”之前的那\n                      12 道题目，是不是就很容易解决了？\n                    </p>\n                    <p data-nodeid=\"7672\">\n                      <strong data-nodeid=\"7949\">'+' 的隐式类型转换规则</strong>\n                    </p>\n                    <p data-nodeid=\"7673\">\n                      '+'\n                      号操作符，不仅可以用作数字相加，还可以用作字符串拼接。仅当\n                      '+'\n                      号两边都是数字时，进行的是加法运算；如果两边都是字符串，则直接拼接，无须进行隐式类型转换。\n                    </p>\n                    <p data-nodeid=\"7674\">\n                      除了上述比较常规的情况外，还有一些特殊的规则，如下所示。\n                    </p>\n                    <ul data-nodeid=\"7675\">\n                      <li data-nodeid=\"7676\">\n                        <p data-nodeid=\"7677\">\n                          如果其中有一个是字符串，另外一个是 undefined、null\n                          或布尔型，则调用 toString()\n                          方法进行字符串拼接；如果是纯对象、数组、正则等，则默认调用对象的转换方法会存在优先级（下一讲会专门介绍），然后再进行拼接。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7678\">\n                        <p data-nodeid=\"7679\">\n                          如果其中有一个是数字，另外一个是\n                          undefined、null、布尔型或数字，则会将其转换成数字进行加法运算，对象的情况还是参考上一条规则。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7680\">\n                        <p data-nodeid=\"7681\">\n                          如果其中一个是字符串、一个是数字，则按照字符串规则进行拼接。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7682\">\n                      下面还是结合代码来理解上述规则，如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>        <span class=\"hljs-comment\">// 3  常规情况</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">'1'</span> + <span class=\"hljs-string\">'2'</span>    <span class=\"hljs-comment\">// '12' 常规情况</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 下面看一下特殊情况</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">'1'</span> + <span class=\"hljs-literal\">undefined</span>   <span class=\"hljs-comment\">// \"1undefined\" 规则1，undefined转换字符串</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">'1'</span> + <span class=\"hljs-literal\">null</span>        <span class=\"hljs-comment\">// \"1null\" 规则1，null转换字符串</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">'1'</span> + <span class=\"hljs-literal\">true</span>        <span class=\"hljs-comment\">// \"1true\" 规则1，true转换字符串</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">'1'</span> + <span class=\"hljs-number\">1n</span>          <span class=\"hljs-comment\">// '11' 比较特殊字符串和BigInt相加，BigInt转换为字符串</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-literal\">undefined</span>     <span class=\"hljs-comment\">// NaN  规则2，undefined转换数字相加NaN</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-literal\">null</span>          <span class=\"hljs-comment\">// 1    规则2，null转换为0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-literal\">true</span>          <span class=\"hljs-comment\">// 2    规则2，true转换为1，二者相加为2</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1n</span>            <span class=\"hljs-comment\">// 错误  不能把BigInt和Number类型直接混合相加</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">'1'</span> + <span class=\"hljs-number\">3</span>           <span class=\"hljs-comment\">// '13' 规则3，字符串拼接</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7684\">\n                      整体来看，如果数据中有字符串，JavaScript\n                      类型转换还是更倾向于转换成字符串，因为第三条规则中可以看到，在字符串和数字相加的过程中最后返回的还是字符串，这里需要关注一下。\n                    </p>\n                    <p data-nodeid=\"7685\">\n                      了解了 '+' 的转换规则后，我们最后再看一下 Object\n                      的转换规则。\n                    </p>\n                    <p data-nodeid=\"7686\">\n                      <strong data-nodeid=\"7972\">Object 的转换规则</strong>\n                    </p>\n                    <p data-nodeid=\"7687\">\n                      对象转换的规则，会先调用内置的 [ToPrimitive]\n                      函数，其规则逻辑如下：\n                    </p>\n                    <ul data-nodeid=\"7688\">\n                      <li data-nodeid=\"7689\">\n                        <p data-nodeid=\"7690\">\n                          如果部署了 Symbol.toPrimitive 方法，优先调用再返回；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7691\">\n                        <p data-nodeid=\"7692\">\n                          调用 valueOf()，如果转换为基础类型，则返回；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7693\">\n                        <p data-nodeid=\"7694\">\n                          调用 toString()，如果转换为基础类型，则返回；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7695\">\n                        <p data-nodeid=\"7696\">\n                          如果都没有返回基础类型，会报错。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7697\">\n                      直接理解有些晦涩，还是直接来看代码，你也可以在控制台自己敲一遍来加深印象。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> obj = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">  valueOf() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  toString() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'3'</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  [<span class=\"hljs-built_in\">Symbol</span>.toPrimitive]() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(obj + <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 输出5</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 因为有Symbol.toPrimitive，就优先执行这个；如果Symbol.toPrimitive这段代码删掉，则执行valueOf打印结果为3；如果valueOf也去掉，则调用toString返回'31'(字符串拼接)</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 再看两个特殊的case：</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">10</span> + {}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// \"10[object Object]\"，注意：{}会默认调用valueOf是{}，不是基础类型继续转换，调用toString，返回结果\"[object Object]\"，于是和10进行'+'运算，按照字符串拼接规则来，参考'+'的规则C</span>\n</div></li><li><div class=\"code-word\">[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-literal\">undefined</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>] + <span class=\"hljs-number\">10</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// \"1,2,,4,510\"，注意[1,2,undefined,4,5]会默认先调用valueOf结果还是这个数组，不是基础数据类型继续转换，也还是调用toString，返回\"1,2,,4,5\"，然后再和10进行运算，还是按照字符串拼接规则，参考'+'的第3条规则</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7699\">\n                      关于 Object\n                      的转化，就讲解到这里，希望你可以深刻体会一下上面讲的原理和内容。\n                    </p>\n                    <h3 data-nodeid=\"7700\">总结</h3>\n                    <p data-nodeid=\"7701\">\n                      以上就是本讲的内容了，在这一讲中，我们从三个方面学习了数据类型相关内容，下面整体回顾一下。\n                    </p>\n                    <ol data-nodeid=\"7702\">\n                      <li data-nodeid=\"7703\">\n                        <p data-nodeid=\"7704\">\n                          数据类型的基本概念：这是必须掌握的知识点，作为深入理解\n                          JavaScript 的基础。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7705\">\n                        <p data-nodeid=\"7706\">\n                          数据类型的判断方法：typeof 和 instanceof，以及\n                          Object.prototype.toString 的判断数据类型、手写\n                          instanceof\n                          代码片段，这些是日常开发中经常会遇到的，因此你需要好好掌握。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7707\">\n                        <p data-nodeid=\"7708\">\n                          数据类型的转换方式：两种数据类型的转换方式，日常写代码过程中隐式转换需要多留意，如果理解不到位，很容易引起在编码过程中的\n                          bug，得到一些意想不到的结果。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"7709\">\n                      对于本讲内容，如果你有不清楚的地方，欢迎在评论区留言，我们一起探讨、进步。\n                    </p>\n                    <p data-nodeid=\"7710\">\n                      下一讲我会在本讲内容的基础上，为你详细介绍手写一个深浅拷贝代码的完整思路以及代码的实现。我们下一讲见。\n                    </p>\n                    <hr data-nodeid=\"7711\" />\n                    <p data-nodeid=\"7712\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"7995\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image2/M01/00/66/CgpVE1_W_x2AaW0rAAdqMM6w3z0145.png\"\n                          alt=\"大前端引流.png\"\n                          data-nodeid=\"7994\"\n                      /></a>\n                    </p>\n                    <p data-nodeid=\"7713\" class=\"\">\n                      对标阿里P7技术需求 + 每月大厂内推，6 个月助你斩获名企高薪\n                      Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"7999\"\n                        >点此链接，快来领取！</a\n                      >\n                    </p>\n            "}