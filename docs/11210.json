{"title":"08 | 探索前端工具链生态，制定一个统一标准化 babel-preset","context":"\n                    <p data-nodeid=\"7591\" class=\"\">\n                      前端生态有着与生俱来的混乱和与之抗衡的秩序，有着新生力量的崛起以及随之而来的规范约束。在这个背景下，正面来看，欣欣向荣的前端生态带来了广阔的发展前景，但也造成了一些困扰。比如，我们都经历过在前端基础设施建设中，被各种冗杂的配置项困扰，一不小心就是\n                      Error，步履蹒跚。也许我们可以通过搜索引擎暂时解决问题，但是恍恍惚惚、难以洞悉问题本源。\n                    </p>\n                    <p data-nodeid=\"7592\">\n                      另一方面，前端生态的重要一环是公共库。公共库的模块化规范、编译标准，甚至压缩方式都有讲究，同时公共库与使用它们的业务项目也要密切配合，这样才能打造一个顺滑的基建结果。请你仔细审视手上的项目，编译构建过程是否做到了最高效，产出代码是否达到了最高级别的安全保障，是否做到了性能体验的最佳实践？\n                    </p>\n                    <p data-nodeid=\"7593\">\n                      这一讲，就让我们从公共库的角度出发，梳理当前前端生态，最终还原一个趋近完美的公共库设计标准。\n                    </p>\n                    <h3 data-nodeid=\"7594\">\n                      从一个公共库处理的问题，谈如何做好“扫雷人”\n                    </h3>\n                    <p data-nodeid=\"7595\">\n                      这一部分，让我们以一篇网红文章“<a\n                        href=\"https://juejin.im/post/6856815533749338125\"\n                        data-nodeid=\"7749\"\n                        >报告老板，我们的 H5 页面在 iOS 11 系统上白屏了！</a\n                      >”开始，我先简单梳理和总结一下文章内容：\n                    </p>\n                    <ul data-nodeid=\"7596\">\n                      <li data-nodeid=\"7597\">\n                        <p data-nodeid=\"7598\">\n                          笔者发现某些机型上出现页面白屏情况；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7599\">\n                        <p data-nodeid=\"7600\">\n                          出现在报错页面上的信息非常明显，即当前浏览器不支持<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"7753\"\n                            >...</code\n                          >扩展运算符；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7601\">\n                        <p data-nodeid=\"7602\">\n                          出错的代码（使用了扩展运算符的代码）属于某个公共库代码，它没有使用\n                          Babel 插件进行降级处理，因此线上源代码出现了<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"7756\"\n                            >...</code\n                          >扩展运算符。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7603\">\n                      现在问题找到了，或许直接将出现问题的公共库代码用 Babel\n                      进行编译降级就可以了，但问题似乎还会更加复杂。在文中环境下，需要在<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7759\"\n                        >vue.config.js</code\n                      >中加入对问题公共库<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7761\"\n                        >module-name/library-name</code\n                      >的 Babel 编译流程：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">transpileDependencies: [\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">'module-name/library-name'</span> <span class=\"hljs-comment\">// 出现问题的那个库</span>\n</div></li><li><div class=\"code-word\">],\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7605\">\n                      vue-cli 对<a\n                        href=\"https://cli.vuejs.org/zh/config/#transpiledependencies\"\n                        data-nodeid=\"7766\"\n                        >transpileDependencies</a\n                      >\n                      也有如下说明：\n                    </p>\n                    <blockquote data-nodeid=\"7606\">\n                      <p data-nodeid=\"7607\">\n                        默认情况下 babel-loader 会忽略所有<code\n                          data-backticks=\"1\"\n                          data-nodeid=\"7769\"\n                          >node_modules</code\n                        >中的文件。如果你想要通过 Babel\n                        显式转译一个依赖，可以在这个选项中列出来。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"7608\">\n                      按照上述操作，却得到了新的报错：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7772\"\n                        >Uncaught TypeError: Cannot assign to read only property\n                        'exports' of object '#&lt;Object&gt;'</code\n                      >。究其原因，<code data-backticks=\"1\" data-nodeid=\"7774\"\n                        >module-name/library-name</code\n                      >这个库对外输出的是 CommonJS 类型源码，而项目基础设施中\n                      babel-transform-runtime 在编译时增加的 helper\n                      代码，使用的是 import 引入。<strong data-nodeid=\"7780\"\n                        >最终编译结果出现了 ESM 包含 CommonJS 的情况，是不会被\n                        Webpack 处理的</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"7609\">出现问题的原因总结如下：</p>\n                    <ul data-nodeid=\"7610\">\n                      <li data-nodeid=\"7611\">\n                        <p data-nodeid=\"7612\">\n                          plugin-transform-runtime 会根据 sourceType 选择注入\n                          import 或者 require，sourceType 的默认值是\n                          module，就会默认注入 import；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7613\">\n                        <p data-nodeid=\"7614\">\n                          Webpack 不会处理包含 import/export 的文件中的\n                          module.exports 导出，所以需要让 Babel 自动判断\n                          sourceType，根据文件内是否存在 import/export\n                          来决定注入什么样的代码。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7615\">\n                      为了适配上述问题，Babel 设置了<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7785\"\n                        >sourceType</code\n                      >属性，<code data-backticks=\"1\" data-nodeid=\"7787\"\n                        >sourceType：unambiguous</code\n                      >表示 Babel 会根据文件上下文（比如是否含有\n                      import/export）来决定是否按照 ESM 语法处理文件。\n                    </p>\n                    <p data-nodeid=\"7616\">这时候就需要配置 Babel 内容了：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  ...  <span class=\"hljs-comment\">// 省略的配置</span>\n</div></li><li><div class=\"code-word\">  sourceType: <span class=\"hljs-string\">'unambiguous'</span>,\n</div></li><li><div class=\"code-word\">  ...  <span class=\"hljs-comment\">// 省略的配置</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7618\">\n                      但是这种做法在工程上并不推荐，上述更改方式对所有编译文件都生效，但也<strong\n                        data-nodeid=\"7801\"\n                        >增加了编译成本</strong\n                      >（因为设置<code data-backticks=\"1\" data-nodeid=\"7795\"\n                        >sourceType：unambiguous</code\n                      >后，编译时需要做的事情更多），还有个<a\n                        href=\"https://babeljs.io/docs/en/options#sourcetype\"\n                        data-nodeid=\"7799\"\n                        >潜在问题</a\n                      >：\n                    </p>\n                    <blockquote data-nodeid=\"7619\">\n                      <p data-nodeid=\"7620\">\n                        Unambiguous can be quite useful in contexts where the\n                        type is unknown, but it can lead to false matches\n                        because it's perfectly valid to have a module file that\n                        does not use import/export statements.\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"7621\">\n                      翻译过来，就是说并不是所有的 ESM 模块（这里指使用 ESNext\n                      特性的文件）都含有\n                      import/export，因此即便某个待编译文件属于 ESM\n                      模块，也可能被 Babel 错误地判断为 CommonJS\n                      模块而引发误判。\n                    </p>\n                    <p data-nodeid=\"7622\">\n                      基于这一点，一个更合适的做法是：只对目标第三方库<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7807\"\n                        >'module-name/library-name'</code\n                      >使用<code data-backticks=\"1\" data-nodeid=\"7809\"\n                        >sourceType：unambiguous</code\n                      >，这时，Babel\n                      <a\n                        href=\"https://babeljs.io/docs/en/options#overrides\"\n                        data-nodeid=\"7813\"\n                        >overrides 属性</a\n                      >就派上用场了：\n                    </p>\n                    <blockquote data-nodeid=\"7623\">\n                      <p data-nodeid=\"7624\">\n                        Allows users to provide an array of options that will be\n                        merged into the current configuration one at a time.\n                        This feature is best used alongside the\n                        \"test\"/\"include\"/\"exclude\" options to provide conditions\n                        for which an override should apply.\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"7625\">具体使用方式：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">\t...&nbsp;&nbsp;<span class=\"hljs-comment\">//&nbsp;省略的配置</span>\n</div></li><li><div class=\"code-word\">\toverrides:&nbsp;[\n</div></li><li><div class=\"code-word\">\t\t{&nbsp;include:&nbsp;<span class=\"hljs-string\">'./node_modules/module-name/library-name/name.common.js'</span>,&nbsp;&nbsp;<span class=\"hljs-comment\">//&nbsp;使用的第三方库</span>\n</div></li><li><div class=\"code-word\">\t\tsourceType:&nbsp;<span class=\"hljs-string\">'unambiguous'</span>\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t],&nbsp;\n</div></li><li><div class=\"code-word\">\t&nbsp;...&nbsp;&nbsp;<span class=\"hljs-comment\">//&nbsp;省略的配置</span>\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7627\">\n                      至此，这个“iOS 11\n                      系统白屏”问题就算告一段落了。我整理了解决路线，如下图所示：\n                    </p>\n                    <p data-nodeid=\"7628\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/A5/CgpVE1_0NWKAaju0AAMFDVpRq7Y221.png\"\n                        alt=\"Lark20210105-174532.png\"\n                        data-nodeid=\"7832\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7629\">\n                      我们回过头再来看这个问题，实际上<strong data-nodeid=\"7838\"\n                        >业务方对线上测试回归不彻底</strong\n                      >是造成问题的直接原因，但问题其实出现在一个公共库上，因而前端生态的混乱和复杂也许是更本质的原因。这里涉及两方面问题：\n                    </p>\n                    <ul data-nodeid=\"7630\">\n                      <li data-nodeid=\"7631\">\n                        <p data-nodeid=\"7632\">\n                          作为公共库，我应该如何构建编译代码，让业务方更有保障地使用？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7633\">\n                        <p data-nodeid=\"7634\">\n                          作为使用者，我应该如何处理第三方公共库，是否还需要对其进行额外编译和处理？\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7635\">\n                      被动地发现问题、解决问题只会让我们被“牵着鼻子走”——这不是我们的目的。我们应该从更底层拆解问题，下面我们就来看看更底层的内容。\n                    </p>\n                    <h3 data-nodeid=\"7636\">应用项目构建和公共库构建的差异</h3>\n                    <p data-nodeid=\"7637\">\n                      首先我们要认清应用项目构建和公共库构建的差别。作为前端团队，我们构建了很多应用项目，对于一个应用项目来说，“只要能在需要兼容的环境中跑起来”就达到了基本目的。而对于一个公共库来说，我们的公共库可能被各种环境所引用或需要支持各种兼容需求，因此<strong\n                        data-nodeid=\"7848\"\n                        >公共库就要兼顾性能和易用性，要注重质量和广泛度</strong\n                      >。由此看来，公共库理论上构建机制就更加复杂。\n                    </p>\n                    <p data-nodeid=\"7638\">\n                      说到底，如果你能够设计好一个公共库，那么通常也能使用好一个公共库。因此，下面我们重点讨论如何设计并产出一个企业级公共库，以及如何在业务中更好地配合使用。\n                    </p>\n                    <h3 data-nodeid=\"7639\">制定一个企业级公共库的设计原则</h3>\n                    <p data-nodeid=\"7640\">\n                      这里说的企业级公共库主要是指在企业内复用的公共库，它可以被发布到\n                      npm 上进行社区共享，也可以在企业内的私有 npm\n                      中限定范围地共享。总之，企业级公共库是需要在业务中被使用的。我认为一个企业级公共库的设计原则应该包括以下几点。\n                    </p>\n                    <ol data-nodeid=\"7641\">\n                      <li data-nodeid=\"7642\">\n                        <p data-nodeid=\"7643\">\n                          <strong data-nodeid=\"7856\"\n                            >对于开发者共创公共库，最大化确保开发体验</strong\n                          >：\n                        </p>\n                      </li>\n                    </ol>\n                    <ul data-nodeid=\"7644\">\n                      <li data-nodeid=\"7645\">\n                        <p data-nodeid=\"7646\">最快地搭建调试和开发环境</p>\n                      </li>\n                      <li data-nodeid=\"7647\">\n                        <p data-nodeid=\"7648\">安全地发版维护</p>\n                      </li>\n                    </ul>\n                    <ol start=\"2\" data-nodeid=\"7649\">\n                      <li data-nodeid=\"7650\">\n                        <p data-nodeid=\"7651\">\n                          <strong data-nodeid=\"7863\"\n                            >对于使用者，最大化确保使用体验</strong\n                          >：\n                        </p>\n                      </li>\n                    </ol>\n                    <ul data-nodeid=\"7652\">\n                      <li data-nodeid=\"7653\">\n                        <p data-nodeid=\"7654\">公共库文档建设完善</p>\n                      </li>\n                      <li data-nodeid=\"7655\">\n                        <p data-nodeid=\"7656\">公共库质量有保障</p>\n                      </li>\n                      <li data-nodeid=\"7657\">\n                        <p data-nodeid=\"7658\">接入和使用负担最小</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7659\">\n                      基于上述原则，在团队里，设计一个公共库前，你需要考虑：\n                    </p>\n                    <ul data-nodeid=\"7660\">\n                      <li data-nodeid=\"7661\">\n                        <p data-nodeid=\"7662\">\n                          自研公共库还是使用社区已有轮子；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7663\">\n                        <p data-nodeid=\"7664\">\n                          公共库的运行环境是什么，这将决定公共库的编译构建目标；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7665\">\n                        <p data-nodeid=\"7666\">\n                          公共库是偏向业务还是业务\n                          free，这将决定公共库的职责和边界。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7667\">\n                      上述内容并非纯理论原则，而是直接决定了公共库实现的技术选型。比如，为了实现更完善的文档建设，尤其是\n                      UI\n                      组件类文档，可以考虑部署静态组件展示站点，进行组件展示以及用法说明。更智能、工程化的内容，我们可以考虑使用类似\n                      <a\n                        href=\"https://github.com/jsdoc/jsdoc\"\n                        data-nodeid=\"7874\"\n                        >JSDoc</a\n                      >\n                      来实现 JavaScript API 文档生成，组件类公共库可以考虑\n                      <a href=\"https://storybook.js.org/\" data-nodeid=\"7878\"\n                        >Storybook</a\n                      >\n                      或者\n                      <a href=\"http://styleguides.io/\" data-nodeid=\"7882\"\n                        >Styleguides</a\n                      >\n                      作为标准接入方案。\n                    </p>\n                    <p data-nodeid=\"7668\">\n                      再比如，我们的<strong data-nodeid=\"7889\"\n                        >公共库适配环境</strong\n                      >是什么？一般来讲可能需要兼容：浏览器/Node.js/同构环境等。不同环境对应了不同的编译和打包标准，这就需要你进行思考：如果目标是浏览器环境，那么如何才能充分实现性能最优解？如帮助业务方实现\n                      tree-shaking 等优化技术。\n                    </p>\n                    <p data-nodeid=\"7669\">\n                      同时，为了减轻业务使用负担，作为企业级公共库，以及对应使用这些企业级公共库的应用项目，可以指定标准规范的\n                      babel-preset，保证编译产出的统一。这样一来，业务项目（即使用公共库方）可以以统一的接入标准引入。\n                    </p>\n                    <p data-nodeid=\"7670\">\n                      下面是我基于对目前前端生态的理解，草拟的一份\n                      babel-preset（该 preset\n                      设计方案具有时效性）。请继续阅读下文，我们来对\n                      @lucas/babel-preset 一探究竟。\n                    </p>\n                    <h3 data-nodeid=\"7671\">制定一个统一标准化 babel-preset</h3>\n                    <p data-nodeid=\"7672\">\n                      企业中，所有公共库或应用项目都使用一套\n                      @lucas/babel-xxx-preset，按照 @lucas/babel-xxx-preset\n                      的编译要求进行编译，这样业务使用时，接入标准统一。\n                    </p>\n                    <p data-nodeid=\"7673\">\n                      原则上讲，这样的统一化能够有效避免本文开头的“线上问题”。同时这个\n                      @lucas/babel-preset 应该能够适应各种项目需求，比如使用\n                      TypeScript/Flow 等扩展语法的项目。\n                    </p>\n                    <p data-nodeid=\"7674\">\n                      这里给出一份设计方案，供你参考和讨论。\n                    </p>\n                    <ol data-nodeid=\"7675\">\n                      <li data-nodeid=\"7676\">\n                        <p data-nodeid=\"7677\">\n                          支持 NODE_ENV = 'development' | 'production' | 'test'\n                          三种环境，并有对应的优化。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7678\">\n                        <p data-nodeid=\"7679\">\n                          配置插件默认不开启 Babel<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"7916\"\n                            >loose: true</code\n                          >配置，让插件的行为尽可能地遵循规范，但对有较严重性能损耗或有兼容性问题的情况保留修改入口。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7680\">\n                        <p data-nodeid=\"7681\">\n                          这份设计方案落地后产出，应该<strong data-nodeid=\"7923\"\n                            >支持应用编译和公共库编译</strong\n                          >，即可以按照\n                          @lucas/babel-preset/app，@lucas/babel-preset/dependencies\n                          和\n                          @lucas/babel-preset/library，@lucas/babel-preset/library/compact\n                          进行区分使用（具体不同预设集合的角色，下面会详细展开）。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"7682\">\n                      @lucas/babel-preset/app，@lucas/babel-preset/dependencies\n                      都可以作为编译应用项目的预设使用，但他们也有所差别，具体如下：\n                    </p>\n                    <ul data-nodeid=\"7683\">\n                      <li data-nodeid=\"7684\">\n                        <p data-nodeid=\"7685\">\n                          @lucas/babel-preset/app 负责编译除<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"7926\"\n                            >node_modules</code\n                          >外的业务代码；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7686\">\n                        <p data-nodeid=\"7687\">\n                          @lucas/babel-preset/dependencies 编译<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"7929\"\n                            >node_modules</code\n                          >第三方代码；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7688\">\n                        <p data-nodeid=\"7689\">\n                          @lucas/babel-preset/library 和\n                          @lucas/babel-preset/library/compact\n                          作为编译公共库使用的预设，他们也有所差别，@lucas/babel-preset/library\n                          按照当前 Node 环境编译输出代码，而\n                          @lucas/babel-preset/library/compact 会编译降级为 ES5。\n                        </p>\n                      </li>\n                    </ul>\n                    <ol start=\"4\" data-nodeid=\"7690\">\n                      <li data-nodeid=\"7691\">\n                        <p data-nodeid=\"7692\">\n                          对于企业级公共库，建议使用标准 ES 特性发布；对\n                          tree-shaking 有强烈需求的库，应同时发布 ES module\n                          格式代码。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7693\">\n                        <p data-nodeid=\"7694\">\n                          对于企业级公共库，发布的代码不包含\n                          polyfills，由使用方统一处理。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7695\">\n                        <p data-nodeid=\"7696\">\n                          对于应用编译，使用 @babel/preset-env\n                          同时编译应用代码与第三方库代码。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7697\">\n                        <p data-nodeid=\"7698\">\n                          对于应用编译，需要对<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"7936\"\n                            >node_modules</code\n                          >进行编译，并且为<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"7938\"\n                            >node_modules</code\n                          >配置<code data-backticks=\"1\" data-nodeid=\"7940\"\n                            >sourceType: 'unambiguous'</code\n                          >，以确保第三方依赖包中的 CommonJS\n                          模块能够被正确处理。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7699\">\n                        <p data-nodeid=\"7700\">\n                          对于应用编译，启用\n                          plugin-transform-runtime，避免同样的 helper\n                          代码被重复注入多个文件，以缩减打包后文件的体积。同时自动注入\n                          regenerator-runtime，避免污染全局变量。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7701\">\n                        <p data-nodeid=\"7702\">\n                          注入绝对路径引用的 @babel/runtime 包中对应的\n                          helper，以确保能够引用到正确版本的 @babel/runtime\n                          包中的文件。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"7703\">\n                      此外，第三方库可能通过 dependencies 依赖自己的\n                      @babel/runtime，而 @babel/runtime 不同版本之间不能确保兼容\n                      (比如 6.x 和 7.x 之间)，这就需要确保我们为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7945\"\n                        >node_modules</code\n                      >内代码经过 Babel 编译注入 runtime 时使用正确路径的\n                      @babel/runtime 包。\n                    </p>\n                    <p data-nodeid=\"7704\">\n                      基于以上设计，对于 CSR 应用的 Babel\n                      编译流程，预计业务方使用预设为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// webpack.config.js</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  presets: [<span class=\"hljs-string\">'@lucas/babel-preset/app'</span>],\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 相关 webpack 配置</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">module</span>: {\n</div></li><li><div class=\"code-word\">    rules: [\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        test: /\\.js$/,\n</div></li><li><div class=\"code-word\">        oneOf: [\n</div></li><li><div class=\"code-word\">          {\n</div></li><li><div class=\"code-word\">            exclude: /node_modules/,\n</div></li><li><div class=\"code-word\">            loader: <span class=\"hljs-string\">'babel-loader'</span>,\n</div></li><li><div class=\"code-word\">            options: {\n</div></li><li><div class=\"code-word\">              cacheDirectory: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">          },\n</div></li><li><div class=\"code-word\">          {\n</div></li><li><div class=\"code-word\">            loader: <span class=\"hljs-string\">'babel-loader'</span>,\n</div></li><li><div class=\"code-word\">            options: {\n</div></li><li><div class=\"code-word\">              cacheDirectory: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">              configFile: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-comment\">// 使用我们的 preset</span>\n</div></li><li><div class=\"code-word\">              presets: [<span class=\"hljs-string\">'@lucas/babel-preset/dependencies'</span>],\n</div></li><li><div class=\"code-word\">              compact: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">          },\n</div></li><li><div class=\"code-word\">        ],\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">    ],\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7706\">\n                      我们可以看到，上述使用方式按照<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7949\"\n                        >node_modules</code\n                      >进行了区分，对于<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7951\"\n                        >node_modules</code\n                      >我们开启 cacheDirectory 缓存。对于应用，我们直接使用\n                      babel-loader 进行编译，并使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7953\"\n                        >@lucas/babel-preset/dependencies</code\n                      >这个 Babel preset，其内容为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> path = require(<span class=\"hljs-string\">'path'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> {declare} = require(<span class=\"hljs-string\">'@babel/helper-plugin-utils'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> getAbsoluteRuntimePath = () =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> path.dirname(require.resolve(<span class=\"hljs-string\">'@babel/runtime/package.json'</span>))\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = ({\n</div></li><li><div class=\"code-word\">  targets,\n</div></li><li><div class=\"code-word\">  ignoreBrowserslistConfig = <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">  forceAllTransforms = <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">  transformRuntime = <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">  absoluteRuntime = <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">  supportsDynamicImport = <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">} = {}) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> declare(\n</div></li><li><div class=\"code-word\">    (\n</div></li><li><div class=\"code-word\">      api,\n</div></li><li><div class=\"code-word\">      {modules = <span class=\"hljs-string\">'auto'</span>, absoluteRuntimePath = getAbsoluteRuntimePath()},\n</div></li><li><div class=\"code-word\">    ) =&gt; {\n</div></li><li><div class=\"code-word\">      api.assertVersion(<span class=\"hljs-number\">7</span>)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 返回配置内容</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// https://github.com/webpack/webpack/issues/4039#issuecomment-419284940</span>\n</div></li><li><div class=\"code-word\">        sourceType: <span class=\"hljs-string\">'unambiguous'</span>,\n</div></li><li><div class=\"code-word\">        exclude: /<span class=\"hljs-meta\">@babel</span>\\/runtime/,\n</div></li><li><div class=\"code-word\">        presets: [\n</div></li><li><div class=\"code-word\">          [\n</div></li><li><div class=\"code-word\">            require(<span class=\"hljs-string\">'@babel/preset-env'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">            {\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-comment\">// 统一 @babel/preset-env 配置</span>\n</div></li><li><div class=\"code-word\">              useBuiltIns: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">              modules,\n</div></li><li><div class=\"code-word\">              targets,\n</div></li><li><div class=\"code-word\">              ignoreBrowserslistConfig,\n</div></li><li><div class=\"code-word\">              forceAllTransforms,\n</div></li><li><div class=\"code-word\">              exclude: [<span class=\"hljs-string\">'transform-typeof-symbol'</span>],\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">          ],\n</div></li><li><div class=\"code-word\">        ],\n</div></li><li><div class=\"code-word\">        plugins: [\n</div></li><li><div class=\"code-word\">          transformRuntime &amp;&amp; [\n</div></li><li><div class=\"code-word\">            require(<span class=\"hljs-string\">'@babel/plugin-transform-runtime'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">            {\n</div></li><li><div class=\"code-word\">              absoluteRuntime: absoluteRuntime ? absoluteRuntimePath : <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">          ],\n</div></li><li><div class=\"code-word\">          require(<span class=\"hljs-string\">'@babel/plugin-syntax-dynamic-import'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">          !supportsDynamicImport &amp;&amp;\n</div></li><li><div class=\"code-word\">            !api.caller(caller =&gt; caller &amp;&amp; caller.supportsDynamicImport) &amp;&amp;\n</div></li><li><div class=\"code-word\">            require(<span class=\"hljs-string\">'babel-plugin-dynamic-import-node'</span>),\n</div></li><li><div class=\"code-word\">          [\n</div></li><li><div class=\"code-word\">            require(<span class=\"hljs-string\">'@babel/plugin-proposal-object-rest-spread'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">            {loose: <span class=\"hljs-keyword\">true</span>, useBuiltIns: <span class=\"hljs-keyword\">true</span>},\n</div></li><li><div class=\"code-word\">          ],\n</div></li><li><div class=\"code-word\">        ].filter(Boolean),\n</div></li><li><div class=\"code-word\">        env: {\n</div></li><li><div class=\"code-word\">          test: {\n</div></li><li><div class=\"code-word\">            presets: [\n</div></li><li><div class=\"code-word\">              [\n</div></li><li><div class=\"code-word\">                require(<span class=\"hljs-string\">'@babel/preset-env'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">                {\n</div></li><li><div class=\"code-word\">                  useBuiltIns: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">                  targets: {node: <span class=\"hljs-string\">'current'</span>},\n</div></li><li><div class=\"code-word\">                  ignoreBrowserslistConfig: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">                  exclude: [<span class=\"hljs-string\">'transform-typeof-symbol'</span>],\n</div></li><li><div class=\"code-word\">                },\n</div></li><li><div class=\"code-word\">              ],\n</div></li><li><div class=\"code-word\">            ],\n</div></li><li><div class=\"code-word\">            plugins: [\n</div></li><li><div class=\"code-word\">              [\n</div></li><li><div class=\"code-word\">                require(<span class=\"hljs-string\">'@babel/plugin-transform-runtime'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">                {\n</div></li><li><div class=\"code-word\">                  absoluteRuntime: absoluteRuntimePath,\n</div></li><li><div class=\"code-word\">                },\n</div></li><li><div class=\"code-word\">              ],\n</div></li><li><div class=\"code-word\">              require(<span class=\"hljs-string\">'babel-plugin-dynamic-import-node'</span>),\n</div></li><li><div class=\"code-word\">            ],\n</div></li><li><div class=\"code-word\">          },\n</div></li><li><div class=\"code-word\">        },\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">  )\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7708\">\n                      基于以上设计，对于 SSR 应用的编译流程（需要编译适配\n                      Node.js 环境）使用方法为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// webpack.config.js</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> target = process.env.BUILD_TARGET <span class=\"hljs-comment\">// 'web' | 'node'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  target,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">module</span>: {\n</div></li><li><div class=\"code-word\">    rules: [\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        test: /\\.js$/,\n</div></li><li><div class=\"code-word\">        oneOf: [\n</div></li><li><div class=\"code-word\">          {\n</div></li><li><div class=\"code-word\">            exclude: /node_modules/,\n</div></li><li><div class=\"code-word\">            loader: <span class=\"hljs-string\">'babel-loader'</span>,\n</div></li><li><div class=\"code-word\">            options: {\n</div></li><li><div class=\"code-word\">              cacheDirectory: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">              presets: [[<span class=\"hljs-string\">'@lucas/babel-preset/app'</span>, {target}]],\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">          },\n</div></li><li><div class=\"code-word\">          {\n</div></li><li><div class=\"code-word\">            loader: <span class=\"hljs-string\">'babel-loader'</span>,\n</div></li><li><div class=\"code-word\">            options: {\n</div></li><li><div class=\"code-word\">              cacheDirectory: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">              configFile: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">              presets: [[<span class=\"hljs-string\">'@lucas/babel-preset/dependencies'</span>, {target}]],\n</div></li><li><div class=\"code-word\">              compact: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">          },\n</div></li><li><div class=\"code-word\">        ],\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">    ],\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7710\">\n                      我们同样按照<code data-backticks=\"1\" data-nodeid=\"7957\"\n                        >node_modules</code\n                      >进行了区分，对于<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7959\"\n                        >node_modules</code\n                      >第三方依赖，使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7961\"\n                        >@lucas/babel-preset/dependencies</code\n                      >预设，同时传入<code data-backticks=\"1\" data-nodeid=\"7963\"\n                        >target</code\n                      >参数。对于非<code data-backticks=\"1\" data-nodeid=\"7965\"\n                        >node_modules</code\n                      >的业务代码，使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7967\"\n                        >@lucas/babel-preset/app</code\n                      >这个预设，同时设定相应环境 target，<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7969\"\n                        >@lucas/babel-preset/app</code\n                      >内容为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> path = require(<span class=\"hljs-string\">'path'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> {declare} = require(<span class=\"hljs-string\">'@babel/helper-plugin-utils'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> getAbsoluteRuntimePath = () =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> path.dirname(require.resolve(<span class=\"hljs-string\">'@babel/runtime/package.json'</span>))\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = ({\n</div></li><li><div class=\"code-word\">  targets,\n</div></li><li><div class=\"code-word\">  ignoreBrowserslistConfig = <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">  forceAllTransforms = <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">  transformRuntime = <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">  absoluteRuntime = <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">  supportsDynamicImport = <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">} = {}) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> declare(\n</div></li><li><div class=\"code-word\">    (\n</div></li><li><div class=\"code-word\">      api,\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        modules = <span class=\"hljs-string\">'auto'</span>,\n</div></li><li><div class=\"code-word\">        absoluteRuntimePath = getAbsoluteRuntimePath(),\n</div></li><li><div class=\"code-word\">        react = <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">        presetReactOptions = {},\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">    ) =&gt; {\n</div></li><li><div class=\"code-word\">      api.assertVersion(<span class=\"hljs-number\">7</span>)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        presets: [\n</div></li><li><div class=\"code-word\">          [\n</div></li><li><div class=\"code-word\">            require(<span class=\"hljs-string\">'@babel/preset-env'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">            {\n</div></li><li><div class=\"code-word\">              useBuiltIns: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">              modules,\n</div></li><li><div class=\"code-word\">              targets,\n</div></li><li><div class=\"code-word\">              ignoreBrowserslistConfig,\n</div></li><li><div class=\"code-word\">              forceAllTransforms,\n</div></li><li><div class=\"code-word\">              exclude: [<span class=\"hljs-string\">'transform-typeof-symbol'</span>],\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">          ],\n</div></li><li><div class=\"code-word\">          react &amp;&amp; [\n</div></li><li><div class=\"code-word\">            require(<span class=\"hljs-string\">'@babel/preset-react'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">            {useBuiltIns: <span class=\"hljs-keyword\">true</span>, runtime: <span class=\"hljs-string\">'automatic'</span>, ...presetReactOptions},\n</div></li><li><div class=\"code-word\">          ],\n</div></li><li><div class=\"code-word\">        ].filter(Boolean),\n</div></li><li><div class=\"code-word\">        plugins: [\n</div></li><li><div class=\"code-word\">          transformRuntime &amp;&amp; [\n</div></li><li><div class=\"code-word\">            require(<span class=\"hljs-string\">'@babel/plugin-transform-runtime'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">            {\n</div></li><li><div class=\"code-word\">              useESModules: <span class=\"hljs-string\">'auto'</span>,\n</div></li><li><div class=\"code-word\">              absoluteRuntime: absoluteRuntime ? absoluteRuntimePath : <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">          ],\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// https://github.com/facebook/create-react-app/issues/4263</span>\n</div></li><li><div class=\"code-word\">          [\n</div></li><li><div class=\"code-word\">            require(<span class=\"hljs-string\">'@babel/plugin-proposal-class-properties'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">            {loose: <span class=\"hljs-keyword\">true</span>},\n</div></li><li><div class=\"code-word\">          ],\n</div></li><li><div class=\"code-word\">          require(<span class=\"hljs-string\">'@babel/plugin-syntax-dynamic-import'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">          !supportsDynamicImport &amp;&amp;\n</div></li><li><div class=\"code-word\">            !api.caller(caller =&gt; caller &amp;&amp; caller.supportsDynamicImport) &amp;&amp;\n</div></li><li><div class=\"code-word\">            require(<span class=\"hljs-string\">'babel-plugin-dynamic-import-node'</span>),\n</div></li><li><div class=\"code-word\">          [\n</div></li><li><div class=\"code-word\">            require(<span class=\"hljs-string\">'@babel/plugin-proposal-object-rest-spread'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">            {loose: <span class=\"hljs-keyword\">true</span>, useBuiltIns: <span class=\"hljs-keyword\">true</span>},\n</div></li><li><div class=\"code-word\">          ],\n</div></li><li><div class=\"code-word\">          require(<span class=\"hljs-string\">'@babel/plugin-proposal-nullish-coalescing-operator'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">          require(<span class=\"hljs-string\">'@babel/plugin-proposal-optional-chaining'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">        ].filter(Boolean),\n</div></li><li><div class=\"code-word\">        env: {\n</div></li><li><div class=\"code-word\">          development: {\n</div></li><li><div class=\"code-word\">            presets: [\n</div></li><li><div class=\"code-word\">              react &amp;&amp; [\n</div></li><li><div class=\"code-word\">                require(<span class=\"hljs-string\">'@babel/preset-react'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">                {\n</div></li><li><div class=\"code-word\">                  useBuiltIns: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">                  development: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">                  runtime: <span class=\"hljs-string\">'automatic'</span>,\n</div></li><li><div class=\"code-word\">                  ...presetReactOptions,\n</div></li><li><div class=\"code-word\">                },\n</div></li><li><div class=\"code-word\">              ],\n</div></li><li><div class=\"code-word\">            ].filter(Boolean),\n</div></li><li><div class=\"code-word\">          },\n</div></li><li><div class=\"code-word\">          test: {\n</div></li><li><div class=\"code-word\">            presets: [\n</div></li><li><div class=\"code-word\">              [\n</div></li><li><div class=\"code-word\">                require(<span class=\"hljs-string\">'@babel/preset-env'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">                {\n</div></li><li><div class=\"code-word\">                  useBuiltIns: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">                  targets: {node: <span class=\"hljs-string\">'current'</span>},\n</div></li><li><div class=\"code-word\">                  ignoreBrowserslistConfig: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">                  exclude: [<span class=\"hljs-string\">'transform-typeof-symbol'</span>],\n</div></li><li><div class=\"code-word\">                },\n</div></li><li><div class=\"code-word\">              ],\n</div></li><li><div class=\"code-word\">              react &amp;&amp; [\n</div></li><li><div class=\"code-word\">                require(<span class=\"hljs-string\">'@babel/preset-react'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">                {\n</div></li><li><div class=\"code-word\">                  useBuiltIns: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">                  development: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">                  runtime: <span class=\"hljs-string\">'automatic'</span>,\n</div></li><li><div class=\"code-word\">                  ...presetReactOptions,\n</div></li><li><div class=\"code-word\">                },\n</div></li><li><div class=\"code-word\">              ],\n</div></li><li><div class=\"code-word\">            ].filter(Boolean),\n</div></li><li><div class=\"code-word\">            plugins: [\n</div></li><li><div class=\"code-word\">              [\n</div></li><li><div class=\"code-word\">                require(<span class=\"hljs-string\">'@babel/plugin-transform-runtime'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">                {\n</div></li><li><div class=\"code-word\">                  useESModules: <span class=\"hljs-string\">'auto'</span>,\n</div></li><li><div class=\"code-word\">                  absoluteRuntime: absoluteRuntimePath,\n</div></li><li><div class=\"code-word\">                },\n</div></li><li><div class=\"code-word\">              ],\n</div></li><li><div class=\"code-word\">              require(<span class=\"hljs-string\">'babel-plugin-dynamic-import-node'</span>),\n</div></li><li><div class=\"code-word\">            ],\n</div></li><li><div class=\"code-word\">          },\n</div></li><li><div class=\"code-word\">        },\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">  )\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7712\">而对于一个公共库，使用方式为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// babel.config.js</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  presets: [<span class=\"hljs-string\">'@lucas/babel-preset/library'</span>],\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7714\">\n                      对应<code data-backticks=\"1\" data-nodeid=\"7973\"\n                        >@lucas/babel-preset/library</code\n                      >内容为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> create = require(<span class=\"hljs-string\">'../app/create'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = create({\n</div></li><li><div class=\"code-word\">  targets: {node: <span class=\"hljs-string\">'current'</span>},\n</div></li><li><div class=\"code-word\">  ignoreBrowserslistConfig: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">  supportsDynamicImport: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7716\">\n                      这里的预设会将公共库按照当前 Node.js\n                      环境标准编译。如果需要将该公共库编译降级到\n                      ES5，需要使用<code data-backticks=\"1\" data-nodeid=\"7976\"\n                        >@lucas/babel-preset/library/compact</code\n                      >内容为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> create = require(<span class=\"hljs-string\">'../app/create'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = create({\n</div></li><li><div class=\"code-word\">  ignoreBrowserslistConfig: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">  supportsDynamicImport: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7718\">\n                      这里的<code data-backticks=\"1\" data-nodeid=\"7979\"\n                        >../app/create.js</code\n                      >即为上述<code data-backticks=\"1\" data-nodeid=\"7981\"\n                        >@lucas/babel-preset/app</code\n                      >内容。\n                    </p>\n                    <p data-nodeid=\"7719\">我们通过图示来表述整体架构：</p>\n                    <p data-nodeid=\"7720\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/C6/CgqCHl_0Bs2AS-oEABN0rwjVVsY144.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"7986\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7721\">需要说明以下内容。</p>\n                    <p data-nodeid=\"7722\">\n                      <strong data-nodeid=\"8011\"\n                        >1. @lucas/babel-preset/app：</strong\n                      ><br />\n                      应用项目使用，编译项目代码。SSR 项目可以配置参数 target:\n                      'web' | 'node'。<strong data-nodeid=\"8012\"\n                        >默认支持 JSX 语法，并支持一些常用的语法提案</strong\n                      >(如 class properties)。\n                    </p>\n                    <ul data-nodeid=\"7723\">\n                      <li data-nodeid=\"7724\">\n                        <p data-nodeid=\"7725\">web：开启全部 transforms</p>\n                      </li>\n                      <li data-nodeid=\"7726\">\n                        <p data-nodeid=\"7727\">node：编译到 node: 'current'</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7728\">\n                      <strong data-nodeid=\"8042\"\n                        >2. @lucas/babel-preset/dependencies</strong\n                      >：应用项目使用，编译 node_modules。SSR 项目可以配置参数\n                      target: 'web' | 'node'。<strong data-nodeid=\"8043\"\n                        >只支持当前 ES 规范包含的语法，不包含 JSX\n                        语法及提案中的语法支持</strong\n                      >。\n                    </p>\n                    <ul data-nodeid=\"7729\">\n                      <li data-nodeid=\"7730\">\n                        <p data-nodeid=\"7731\">web：开启全部 transforms</p>\n                      </li>\n                      <li data-nodeid=\"7732\">\n                        <p data-nodeid=\"7733\">node：编译到 node: 'current'</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7734\">\n                      <strong data-nodeid=\"8065\"\n                        >3. @lucas/babel-preset/library：</strong\n                      >\n                      公共库项目使用。用于 prepare 阶段的 Babel 编译。(如 ./src\n                      通过 Babel 编译到 ./lib)。<strong data-nodeid=\"8066\"\n                        >默认支持 JSX 语法，并支持一些常用的语法提案</strong\n                      >(如 class properties)。编译到 node: 'current'。如果需要将\n                      library 编译为 ES5，需要使用\n                      @lucas/babel-preset/library/compat；library 打包编译为\n                      UMD，使用 @lucas/babel-preset/app。\n                    </p>\n                    <p data-nodeid=\"7735\">\n                      上述设计，我参考了<a\n                        href=\"https://github.com/facebook/create-react-app/blob/master/packages/babel-preset-react-app/create.js\"\n                        data-nodeid=\"8070\"\n                        >facebook/create-react-app</a\n                      >部分内容，建议你阅读源码，并结合注释理解其细节，比如<a\n                        href=\"https://github.com/facebook/create-react-app/blob/master/packages/babel-preset-react-app/create.js#L87\"\n                        data-nodeid=\"8074\"\n                        >对于 transform-typeof-symbol 的编译</a\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">(isEnvProduction || isEnvDevelopment) &amp;&amp; [\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 最新稳定的 ECMAScript 特性</span>\n</div></li><li><div class=\"code-word\">    require(<span class=\"hljs-string\">'@babel/preset-env'</span>).<span class=\"hljs-keyword\">default</span>,\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">      useBuiltIns: <span class=\"hljs-string\">'entry'</span>,\n</div></li><li><div class=\"code-word\">      corejs: <span class=\"hljs-number\">3</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 排除 transform-typeof-symbol，这会让编译过慢</span>\n</div></li><li><div class=\"code-word\">      exclude: [<span class=\"hljs-string\">'transform-typeof-symbol'</span>],\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">  ],\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7737\">\n                      在使用<code data-backticks=\"1\" data-nodeid=\"8077\"\n                        >@babel/preset-env</code\n                      >时，使用了<code data-backticks=\"1\" data-nodeid=\"8079\"\n                        >useBuiltIns: 'entry'</code\n                      >设置 polyfills，同时将<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"8081\"\n                        >@babel/plugin-transform-typeof-symbol</code\n                      >排除在外，这是因为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"8083\"\n                        >@babel/plugin-transform-typeof-symbol</code\n                      >会劫持 typeof 特性，使得代码运行时变慢。相关讨论可参见\n                      <a\n                        href=\"https://github.com/facebook/create-react-app/pull/5278\"\n                        data-nodeid=\"8087\"\n                        >issue</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"7738\">\n                      最后，这里的预设规范并不代表完全的最佳实践，而是以 React\n                      技术栈风格，统一一个企业级公共库和接入准则，Babel\n                      编译预设可以按照实际项目和企业的需要进行设计，这里更多是一个启迪的作用。\n                    </p>\n                    <h3 data-nodeid=\"7739\">总结</h3>\n                    <p data-nodeid=\"7740\">\n                      这一讲我们从一个“线上问题”出发，剖析了公共库和应用方的不同编译理念，并通过设计一个万能\n                      Babel\n                      预设，阐明了公共库的编译和应用的使用需要密切配合，才能在当前前端生态中保障一个更合理的基础建设根基。相关知识并未完结，我们将在下一讲中，从零打造一个公共库来实践说明相关理论。\n                    </p>\n                    <p data-nodeid=\"7741\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/A4/Cip5yF_0OaOAPb48AAf5-twsvFI497.png\"\n                        alt=\"前端基建 金句.png\"\n                        data-nodeid=\"8094\"\n                      />\n                    </p>\n            "}