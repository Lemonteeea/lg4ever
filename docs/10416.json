{"title":"15 | 如何提升 React 代码可维护性？","context":"\n                    <p data-nodeid=\"43990\" class=\"\">\n                      组件的设计也好，性能优化也好，它们彼此割裂，并不能反映真实的工程质量，也不能反映代码质量。面试中除了探讨造飞机的话题，也需要落地讲讲代码怎么写、怎么放、怎么用，才能更好维护，所以如何提升\n                      React 代码可维护性也是面试官常问的一个问题。\n                    </p>\n                    <h3 data-nodeid=\"43991\">破题</h3>\n                    <p data-nodeid=\"43992\">\n                      在探讨 React\n                      代码的可维护性之前，需要先聊一个话题，即当我们在探讨可维护性的时候，我们究竟在聊什么。你会发现很难用一句话解释清楚这样一个模糊的概念，是指代码规范，还是设计模式呢？如果我们要认真探讨这个问题的话，其实可以有很多维度，并没有标准答案。这里，我提供一个不一样的视角看待这个问题：表面上讨论的是\n                      React 代码，实际上是基于 React\n                      开发的项目，所以可以从<strong data-nodeid=\"44101\"\n                        >软件工程的角度</strong\n                      >去尝试理解。\n                    </p>\n                    <p data-nodeid=\"43993\">\n                      在软件工程中，<strong data-nodeid=\"44115\">可维护性</strong\n                      >对应的单词是 Maintainability，与它相近的概念还有<strong\n                        data-nodeid=\"44116\"\n                        >技术债</strong\n                      >和<strong data-nodeid=\"44117\">代码异味</strong\n                      >，这些都表示当前代码迭代的难易程度。简而言之，当项目可维护性很差的时候，往往意味着该项目既难以修改，也难以拓展。更专业一些的话，就像\n                      ISO/IEC 9126 的国际标准中指出产品可维护性反映了五个特征。\n                    </p>\n                    <ul data-nodeid=\"43994\">\n                      <li data-nodeid=\"43995\">\n                        <p data-nodeid=\"43996\">\n                          <strong data-nodeid=\"44122\">可分析性</strong\n                          >，指工程项目拥有定位产品缺陷的能力，暗指定位缺陷的成本。举一个工作中的例子，你的页面在线上出了问题，但是你找不到相关手段去定位哪里有问题，在自己的电脑上也无法复现，线上代码在\n                          uglify 后也无法阅读，这就是缺少可分析性。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"43997\">\n                        <p data-nodeid=\"43998\">\n                          <strong data-nodeid=\"44127\">可改变性</strong\n                          >，指工程项目拥有基本的迭代能力，暗指迭代的成本。这点相对好理解，通常在你看完代码后，如果觉得这次的内容容易修改，那迭代成本就很低；如果觉得实在改不动，那么这就不具备可变性了。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"43999\">\n                        <p data-nodeid=\"44000\">\n                          <strong data-nodeid=\"44132\">稳定性</strong\n                          >，指避免工程项目因为代码修改而造成线上意外。这点也很好理解，更生活化一点的表达就是，你敢不敢改这段代码？你的修改是否会影响线上运行？如何确保每次迭代都不会影响线上环境，那就是保障了稳定性。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44001\">\n                        <p data-nodeid=\"44002\">\n                          <strong data-nodeid=\"44137\">易测试性</strong\n                          >，指工程项目能够快速发现产品缺陷的能力。如果代码有问题，项目有\n                          Bug，怎么在交付前发现？怎么在引起大规模故障前发现？用什么手段可以发掘？这就是易测试性。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44003\">\n                        <p data-nodeid=\"44004\">\n                          <strong data-nodeid=\"44142\">可维护性的依从性</strong\n                          >，指遵循相关的标准或约定，即团队开发工程规范，比如代码风格的要求、开发流水线的要求等。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"44005\">\n                      基于各个框架开发的项目，其可维护性的基本特征是一致的，区别在于使用\n                      React\n                      构建项目，它的可维护性通过什么额外的方案来保障，比如特殊的文档规范、设计准则还是自动化工具。\n                    </p>\n                    <p data-nodeid=\"44006\">\n                      所以这里需要建立<strong data-nodeid=\"44149\"\n                        >特征与方案之间的联系</strong\n                      >，比如特征是可分析性，那它对应的方案是什么？方案是否有现成的工具可用，你又是如何规范使用的？\n                    </p>\n                    <h3 data-nodeid=\"44007\">审题</h3>\n                    <p data-nodeid=\"44008\">\n                      在有了这样的基本认知下，我们就可以开始整理答题的框架图了。整理上述的思路，本题需要把握两个方面：\n                    </p>\n                    <ul data-nodeid=\"44009\">\n                      <li data-nodeid=\"44010\">\n                        <p data-nodeid=\"44011\">\n                          <strong data-nodeid=\"44160\">特征</strong\n                          >，也就是<strong data-nodeid=\"44161\">答题维度</strong\n                          >，包含了可分析性、可改变性、稳定性、易测试性、可维护性的依从性；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44012\">\n                        <p data-nodeid=\"44013\">\n                          <strong data-nodeid=\"44166\">方案</strong\n                          >，从每个单一维度出发阐述 React\n                          项目的差异与可使用的规范、工具等。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"44014\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/05/DF/CgpVE2ABPF-AXR2dAAGZ3QevoI0621.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"44169\"\n                      />\n                    </p>\n                    <p data-nodeid=\"44015\">\n                      特征可以帮助我们建立一个基本的答题轮廓，再根据实际经验逐步填充完整，你的答案才会呈现出层次感。\n                    </p>\n                    <h3 data-nodeid=\"44016\">入手</h3>\n                    <h4 data-nodeid=\"44017\">可分析性</h4>\n                    <p data-nodeid=\"44018\">\n                      仅凭可分析性的概念，确实难以下手。这里你可以用在第 12 讲<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=566#/detail/pc?id=5802\"\n                        data-nodeid=\"44176\"\n                        >“React 的渲染异常会造成什么后果？”</a\n                      >中提到的做工程的方案，就是预防与兜底：\n                    </p>\n                    <ul data-nodeid=\"44019\">\n                      <li data-nodeid=\"44020\">\n                        <p data-nodeid=\"44021\">\n                          <strong data-nodeid=\"44182\">预防</strong\n                          >，即从上线前开始，可以对代码做哪些措施防止出现线上问题；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44022\">\n                        <p data-nodeid=\"44023\">\n                          <strong data-nodeid=\"44187\">兜底</strong\n                          >，就是上线后又可以做哪些方案加快线上故障的定位速度。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"44024\">\n                      <strong data-nodeid=\"44191\">预防</strong>\n                    </p>\n                    <p data-nodeid=\"44025\">\n                      从预防的角度出发，能够提前发掘代码中的问题点，通过使用人工或者工具审查的方式去实现。\n                    </p>\n                    <p data-nodeid=\"44026\">\n                      <strong data-nodeid=\"44201\">人工审查代码</strong\n                      >的方式，标准称谓是 Code Review。基于 React\n                      写法的易错点，团队内部会总结出一些实践准则，比如这篇由网友分享的\n                      <a\n                        href=\"https://gist.github.com/bigsergey/aef64f68c22b3107ccbc439025ebba12\"\n                        data-nodeid=\"44199\"\n                        >Review checklist</a\n                      >\n                      中的案例就提供了一些实践。\n                    </p>\n                    <p data-nodeid=\"44027\">\n                      <strong data-nodeid=\"44222\">工具审查</strong\n                      >的方式，标准称谓是静态代码检查工具。在 JavaScript\n                      世界中，静态代码检查工具主要有 3 个，分别是<strong\n                        data-nodeid=\"44223\"\n                        >JSLint</strong\n                      >、<strong data-nodeid=\"44224\">JSHint</strong>、<strong\n                        data-nodeid=\"44225\"\n                        >ESLint</strong\n                      >。从生态发展的角度上，支持配置化与插件拓展 ESLint\n                      获得了最终的胜利。基于 ESLint\n                      有不少大厂给出了自己的最佳实践，最经典的规则方案莫过于\n                      Airbnb 的\n                      <a\n                        href=\"https://www.npmjs.com/package/eslint-config-airbnb\"\n                        data-nodeid=\"44220\"\n                        >eslint-config-airbnb</a\n                      >。这些规则方案将人工审查工作转化为工具自动化审查，节约了团队内部的时间。\n                    </p>\n                    <p data-nodeid=\"44028\">\n                      那是不是说明 Code Review\n                      没用了？并不是，工具并不能检查业务逻辑，所以我更推荐团队内部将\n                      Code Review 的重心放到<strong data-nodeid=\"44231\"\n                        >代码的业务逻辑</strong\n                      >上。\n                    </p>\n                    <p data-nodeid=\"44029\">\n                      <strong data-nodeid=\"44235\">兜底</strong>\n                    </p>\n                    <p data-nodeid=\"44030\">\n                      兜底能够快速<strong data-nodeid=\"44241\"\n                        >定位线上报错</strong\n                      >。在线环境的代码通常是经过&nbsp;UglifyJS\n                      混淆并压缩的（当然新版 Webpack\n                      将默认的压缩器替换为了&nbsp;terser），所以直接看报错信息，并不能得知对应的源码是什么样的，不利于排查问题。所以需要考虑线上代码的报错信息收集、汇总与反混淆。\n                    </p>\n                    <p data-nodeid=\"44031\">\n                      最理想的情况莫过于<strong data-nodeid=\"44247\"\n                        >改造编译流水线</strong\n                      >，在发布过程中上传 sourcemap\n                      到报错收集平台。这里以部分开源的 Sentry 平台为例，在\n                      Webpack 中添加 sourcemap 相关插件就可以在编译过程直接上传\n                      sourcemap 到 Sentry 的报错平台。如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> SentryWebpackPlugin = require(<span class=\"hljs-string\">\"@sentry/webpack-plugin\"</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;configureWebpack: {\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;plugins: [\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">new</span> SentryWebpackPlugin({\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;authToken: process.env.SENTRY_AUTH_TOKEN,\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org: <span class=\"hljs-string\">\"exmaple-org\"</span>,\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;project: <span class=\"hljs-string\">\"example-project\"</span>,\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include: <span class=\"hljs-string\">\".\"</span>,\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ignore: [<span class=\"hljs-string\">\"node_modules\"</span>, <span class=\"hljs-string\">\"webpack.config.js\"</span>],\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}),\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;],\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;},\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44033\">\n                      在使用 Sentry\n                      捕获报错时，就能够直接查看对应的源码了，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">&nbsp; aFunctionThatMightFail();\n</div></li><li><div class=\"code-word\">} <span class=\"hljs-keyword\">catch</span> (err) {\n</div></li><li><div class=\"code-word\">&nbsp; Sentry.captureException(err);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44035\">\n                      报错平台具体用哪一家，需要依据自家公司的基建现状，那如果当前的报错平台不支持怎么办呢？可以使用\n                      Mozilla 开源的工具\n                      <a\n                        href=\"https://github.com/mozilla/source-map\"\n                        data-nodeid=\"44252\"\n                        >sourcemap</a\n                      >，直接恢复对应的源代码信息，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> rawSourceMap = { \n</div></li><li><div class=\"code-word\">&nbsp; version: <span class=\"hljs-number\">3</span>, \n</div></li><li><div class=\"code-word\">&nbsp; file: <span class=\"hljs-string\">\"min.js\"</span>, \n</div></li><li><div class=\"code-word\">&nbsp; names: [<span class=\"hljs-string\">\"bar\"</span>, <span class=\"hljs-string\">\"baz\"</span>, <span class=\"hljs-string\">\"n\"</span>], \n</div></li><li><div class=\"code-word\">&nbsp; sources: [<span class=\"hljs-string\">\"one.js\"</span>, <span class=\"hljs-string\">\"two.js\"</span>], \n</div></li><li><div class=\"code-word\">&nbsp; sourceRoot: <span class=\"hljs-string\">\"http://example.com/www/js/\"</span>, \n</div></li><li><div class=\"code-word\">&nbsp; mappings: <span class=\"hljs-string\">\"CAAC,IAAI,IAAM,SAAUA,GAClB,OAAOC,IAAID;CCDb,IAAI,IAAM,SAAUE,GAClB,OAAOA\"</span> \n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> whatever = await SourceMapConsumer.with(rawSourceMap, <span class=\"hljs-keyword\">null</span>, consumer =&gt; { \n</div></li><li><div class=\"code-word\">&nbsp; console.log(consumer.sources); \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-comment\">// [ 'http://example.com/www/js/one.js', </span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-comment\">//&nbsp;&nbsp; 'http://example.com/www/js/two.js' ] </span>\n</div></li><li><div class=\"code-word\">&nbsp; console.log( \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp; consumer.originalPositionFor({ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; line: <span class=\"hljs-number\">2</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; column: <span class=\"hljs-number\">28</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp; }) \n</div></li><li><div class=\"code-word\">&nbsp; ); \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-comment\">// { source: 'http://example.com/www/js/two.js', </span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-comment\">//&nbsp;&nbsp; line: 2, </span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-comment\">//&nbsp;&nbsp; column: 10, </span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-comment\">//&nbsp;&nbsp; name: 'n' } </span>\n</div></li><li><div class=\"code-word\">&nbsp; console.log( \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp; consumer.generatedPositionFor({ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; source: <span class=\"hljs-string\">\"http://example.com/www/js/two.js\"</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; line: <span class=\"hljs-number\">2</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; column: <span class=\"hljs-number\">10</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp; }) \n</div></li><li><div class=\"code-word\">&nbsp; ); \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-comment\">// { line: 2, column: 28 } </span>\n</div></li><li><div class=\"code-word\">&nbsp; consumer.eachMapping(function(m) { \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp; <span class=\"hljs-comment\">// ... </span>\n</div></li><li><div class=\"code-word\">&nbsp; }); \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> computeWhatever(); \n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"44037\">可改变性</h4>\n                    <p data-nodeid=\"44038\">\n                      从代码层面来讲，可变性代表了<strong data-nodeid=\"44268\"\n                        >代码的可拓展能力</strong\n                      >。一提到拓展能力，你可能会想到架构设计或者设计模式一类的概念。在这方面并没有唯一的正确答案，可以说仁者见仁智者见智，但统一的特征是做<strong\n                        data-nodeid=\"44269\"\n                        >划分边界</strong\n                      >、<strong data-nodeid=\"44270\">模块隔离</strong>。\n                    </p>\n                    <p data-nodeid=\"44039\">\n                      在前面的文章中提供了两个思路来提升代码的可拓展性。\n                    </p>\n                    <ul data-nodeid=\"44040\">\n                      <li data-nodeid=\"44041\">\n                        <p data-nodeid=\"44042\">\n                          第 05 讲<a\n                            href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=566#/detail/pc?id=5795\"\n                            data-nodeid=\"44275\"\n                            >“如何设计 React 组件？”</a\n                          >中提到的组件设计模式，即从组件的角度出发，通过分离容器组件与展示组件的方式分离模块。其中推荐了\n                          Storybook 来沉淀展示组件。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44043\">\n                        <p data-nodeid=\"44044\">\n                          第 08 讲<a\n                            href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=566#/detail/pc?id=5798\"\n                            data-nodeid=\"44280\"\n                            >“列举一种你了解的 React 状态管理框架”</a\n                          >中提到的状态管理框架。状态管理框架中有相对成熟的设计模式，比如\n                          Redux 中的 action、reducer\n                          等，它的边界很清楚，你很容易明白业务逻辑该如何拆解、如何放入模块中。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"44045\">\n                      只要跟着框架走就完事了吗？不，面试官还要听你的思考。在前面的章节中反复提过思考是什么：思考是调研方案、对比方案，说明选择这个方案的原因，阐述在该方案基础上的实践。\n                    </p>\n                    <h4 data-nodeid=\"44046\">稳定性</h4>\n                    <p data-nodeid=\"44047\">\n                      要增强项目稳定性，从代码层面来讲，常规的思路是<strong\n                        data-nodeid=\"44289\"\n                        >加测试</strong\n                      >。但写测试并不是一件容易的事。你会发现在前端项目中，无论是单元测试还是集成测试，整体覆盖比例都很低，常常通过人工测试“点点点”的方式保证稳定性。\n                    </p>\n                    <p data-nodeid=\"44048\">\n                      究其主要原因，前端测试并不好写。不好写并不是指代码不好写，而是针对\n                      UI 层不好写。即便是做 Android 和 iOS 开发，其 UI\n                      测试也很少有人认真写。因为国内的业务迭代模式都非常快，快到\n                      UI\n                      层难以有稳定的测试代码，所以通常大家也不会花太多时间去写组件的测试，基于实际情况，有条件写测试的话，也是尽量给<strong\n                        data-nodeid=\"44295\"\n                        >核心业务写测试</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"44049\">\n                      比如购物车的商品与价格计算逻辑，每次有人修改这段代码必然会心惊胆战。如果可以的话，针对这样的核心业务逻辑，测试用例尽量做到完全覆盖；在流水线上确保每次修改后，都能自动化地跑一次单元测试。\n                    </p>\n                    <p data-nodeid=\"44050\">\n                      前端单元测试主要是有 Chai、Mocha 和 Jest，其中 Jest 与\n                      React 生态最为紧密，由 Facebook 主推。\n                    </p>\n                    <p data-nodeid=\"44051\">\n                      综上所述，由于 UI 层迭代更新快，所以在代码中，选取<strong\n                        data-nodeid=\"44303\"\n                        >业务核心逻辑编写测试</strong\n                      >更利于整体项目的稳定性。\n                    </p>\n                    <h4 data-nodeid=\"44052\">易测试性</h4>\n                    <p data-nodeid=\"44053\">\n                      易测试性与整体的代码架构相关。下面采用 Redux\n                      官方的案例说明合理的架构为什么容易测试。\n                    </p>\n                    <p data-nodeid=\"44054\">\n                      比如其中的 Action\n                      是一个纯函数，那么编写测试就非常容易，直接输入输出验证一波就完事了。如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">mport * as actions from <span class=\"hljs-string\">'../../actions/TodoActions'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> * as types from <span class=\"hljs-string\">'../../constants/ActionTypes'</span>\n</div></li><li><div class=\"code-word\">describe(<span class=\"hljs-string\">'actions'</span>, () =&gt; {\n</div></li><li><div class=\"code-word\">  it(<span class=\"hljs-string\">'should create an action to add a todo'</span>, () =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">'Finish docs'</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> expectedAction = {\n</div></li><li><div class=\"code-word\">      type: types.ADD_TODO,\n</div></li><li><div class=\"code-word\">      text\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    expect(actions.addTodo(text)).toEqual(expectedAction)\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44056\">\n                      再比如，它的 Reducer\n                      也是纯函数，那么只需要验证输入输出就可以了。如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> reducer from <span class=\"hljs-string\">'../../structuring-reducers/todos'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> * as types from <span class=\"hljs-string\">'../../constants/ActionTypes'</span>\n</div></li><li><div class=\"code-word\">describe(<span class=\"hljs-string\">'todos reducer'</span>, () =&gt; {\n</div></li><li><div class=\"code-word\">  it(<span class=\"hljs-string\">'should return the initial state'</span>, () =&gt; {\n</div></li><li><div class=\"code-word\">    expect(reducer(undefined, {})).toEqual([\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        text: <span class=\"hljs-string\">'Use Redux'</span>,\n</div></li><li><div class=\"code-word\">        completed: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">        id: <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    ])\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">  it(<span class=\"hljs-string\">'should handle ADD_TODO'</span>, () =&gt; {\n</div></li><li><div class=\"code-word\">    expect(\n</div></li><li><div class=\"code-word\">      reducer([], {\n</div></li><li><div class=\"code-word\">        type: types.ADD_TODO,\n</div></li><li><div class=\"code-word\">        text: <span class=\"hljs-string\">'Run the tests'</span>\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">    ).toEqual([\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        text: <span class=\"hljs-string\">'Run the tests'</span>,\n</div></li><li><div class=\"code-word\">        completed: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">        id: <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    ])\n</div></li><li><div class=\"code-word\">    expect(\n</div></li><li><div class=\"code-word\">      reducer(\n</div></li><li><div class=\"code-word\">        [\n</div></li><li><div class=\"code-word\">          {\n</div></li><li><div class=\"code-word\">            text: <span class=\"hljs-string\">'Use Redux'</span>,\n</div></li><li><div class=\"code-word\">            completed: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">            id: <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">        ],\n</div></li><li><div class=\"code-word\">        {\n</div></li><li><div class=\"code-word\">          type: types.ADD_TODO,\n</div></li><li><div class=\"code-word\">          text: <span class=\"hljs-string\">'Run the tests'</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      )\n</div></li><li><div class=\"code-word\">    ).toEqual([\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        text: <span class=\"hljs-string\">'Run the tests'</span>,\n</div></li><li><div class=\"code-word\">        completed: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">        id: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        text: <span class=\"hljs-string\">'Use Redux'</span>,\n</div></li><li><div class=\"code-word\">        completed: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">        id: <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    ])\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44058\">这里有两点值得我们学习：</p>\n                    <ul data-nodeid=\"44059\">\n                      <li data-nodeid=\"44060\">\n                        <p data-nodeid=\"44061\">\n                          <strong data-nodeid=\"44313\">合理的架构划分</strong\n                          >，使得模块与模块之间互不干涉、各自分离，可以让测试相对独立；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44062\">\n                        <p data-nodeid=\"44063\">\n                          <strong data-nodeid=\"44330\">纯函数</strong\n                          >在测试上有着得天独厚的优势，让测试验证的过程变得更为简单，试想，如果是<strong\n                            data-nodeid=\"44331\"\n                            >一个类</strong\n                          >，有状态流转变化，有缓存机制，那是否会给测试带来困难，所以现在前端有一种思潮就是<strong\n                            data-nodeid=\"44332\"\n                            >编写一个接一个的函数</strong\n                          >，而<strong data-nodeid=\"44333\">比较少写类</strong>。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"44064\">\n                      比如\n                      <a\n                        href=\"https://github.com/microsoft/react-native-code-push\"\n                        data-nodeid=\"44337\"\n                        >react-native-code-push</a\n                      >\n                      这个项目中的代码就是在调用一个接一个的函数。这是 React\n                      社区值得关注的一种现象。\n                    </p>\n                    <h4 data-nodeid=\"44065\">依从性</h4>\n                    <p data-nodeid=\"44066\">\n                      依从性讲的是<strong data-nodeid=\"44361\">约束</strong\n                      >。为什么要约束呢？因为<strong data-nodeid=\"44362\"\n                        >统一编码规范与代码风格可以提升易读性</strong\n                      >，<strong data-nodeid=\"44363\">减少认知差异</strong\n                      >，<strong data-nodeid=\"44364\"\n                        >防止不规范操作埋藏的潜在隐患</strong\n                      >。软件开发又是一个过分依赖人的活动，而人往往是最不可靠的。这里需要注意，强调约束时，落地的方案一定要在<strong\n                        data-nodeid=\"44365\"\n                        >工具</strong\n                      >上，而非人本身。\n                    </p>\n                    <p data-nodeid=\"44067\">\n                      在前端工程中最常见的 Lint 工具包含：\n                    </p>\n                    <ul data-nodeid=\"44068\">\n                      <li data-nodeid=\"44069\">\n                        <p data-nodeid=\"44070\">针对 JavaScript 的 ESLint；</p>\n                      </li>\n                      <li data-nodeid=\"44071\">\n                        <p data-nodeid=\"44072\">针对样式的 Stylelint；</p>\n                      </li>\n                      <li data-nodeid=\"44073\">\n                        <p data-nodeid=\"44074\">针对代码提交的 Commitlint；</p>\n                      </li>\n                      <li data-nodeid=\"44075\">\n                        <p data-nodeid=\"44076\">\n                          针对编辑器风格的 Editorconfig；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44077\">\n                        <p data-nodeid=\"44078\">针对代码风格的 Prettier。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"44079\">这些也都适用于 React 生态。</p>\n                    <h3 data-nodeid=\"44080\">答题</h3>\n                    <p data-nodeid=\"44081\">\n                      通过梳理上述的知识点，可以尝试从软件工程的角度来回答本题。\n                    </p>\n                    <blockquote data-nodeid=\"44082\">\n                      <p data-nodeid=\"44083\">\n                        如何提升 React 代码的可维护性，究其根本是考虑如何提升\n                        React\n                        项目的可维护性。从软件工程的角度出发，可维护性包含了可分析性、可改变性、稳定性、易测试性与可维护性的依从性，接下来我从这五个方面对相关工作进行梳理。\n                      </p>\n                      <p data-nodeid=\"44084\">\n                        可分析性的目标在于快速定位线上问题，可以从预防与兜底两个维度展开工作，预防主要依靠\n                        Lint 工具与团队内部的 Code Review。Lint\n                        工具重在执行代码规划，力图减少不合规的代码；而 Code\n                        Review\n                        的重心在于增强团队内部的透明度，做好业务逻辑层的潜在风险排查。兜底主要是在流水线中加入\n                        sourcemap，能够通过线上报错快速定位源码。\n                      </p>\n                      <p data-nodeid=\"44085\">\n                        可改变性的目标在于使代码易于拓展，业务易于迭代。工作主要从设计模式与架构设计展开。设计模式主要指组件设计模式，通过容器组件与展示组件划分模块边界，隔绝业务逻辑。整体架构设计，采用了\n                        rematch 方案，rematch 中可以设计的 model\n                        概念可以很好地收敛 action、reducer\n                        及副作用，同时支持动态引入\n                        model，保障业务横向拓展的能力。Rematch\n                        的插件机制非常利于做性能优化，这方面后续可以展开聊一下。\n                      </p>\n                      <p data-nodeid=\"44086\">\n                        接下来是稳定性，目标在于避免修改代码引起不必要的线上问题。在这方面，主要通过提升核心业务代码的测试覆盖率来完成。因为业务发展速度快、UI\n                        变化大，所以基于 UI\n                        的测试整体很不划算，但背后沉淀的业务逻辑，比如购物车计算价格等需要长期复用，不时修改，那么就得加测试。举个个人案例，在我自己的项目中，核心业务测试覆盖率核算是\n                        91%，虽然没完全覆盖，但基本解决了团队内部恐惧线上出错的心理障碍。\n                      </p>\n                      <p data-nodeid=\"44087\">\n                        然后是易测试性，目标在于发现代码中的潜在问题。在我个人负责的项目中，采用了\n                        Rematch 的架构完成模块分离，整体业务逻辑挪到了 model\n                        中，且 model 自身是一个 Pure\n                        Object，附加了多个纯函数。纯函数只要管理好输入与输出，在测试上就很容易。\n                      </p>\n                      <p data-nodeid=\"44088\">\n                        最后是可维护性的依从性，目标在于建立团队规范，遵循代码约定，提升代码可读性。这方面的工作就是引入工具，减少人为犯错的概率。其中主要有检查\n                        JavaScript 的 ESLint，检查样式的\n                        stylelint，检查提交内容的 commitlint，配置编辑器的\n                        editorconfig，配置样式的\n                        prettier。总体而言，工具的效果优于文档，团队内的项目整体可保持一致的风格，阅读代码时的切入成本相对较低。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"44089\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/05/DD/Cip5yGABPJ-AX7tWAAGZ3QevoI0417.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"44383\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"44090\">总结</h3>\n                    <p data-nodeid=\"44091\">\n                      本讲提供了一个从软件工程角度论述的思路，但这并不是唯一答案，我们每个人都可以有自己的理论体系，以及讲解重点，只要它体系齐全、逻辑自洽、结构清晰，就能说服面试官。本讲中提到的理论，看一看、读一读，最重要的是有自己的理解，而本讲中提到的相关工具建议重点关注，试一试、用一用，看看是否真的能帮助你提升\n                      React 代码的可维护性。\n                    </p>\n                    <p data-nodeid=\"44092\">\n                      你可以尝试用其他思路思考下本题，通过在留言区留言的方式分享自己的见解。我也会在留言区与你互动。\n                    </p>\n                    <p data-nodeid=\"45188\">\n                      在下一讲中就正式进入 React Hooks 的环节，先看看 Hooks\n                      在使用上有什么限制。\n                    </p>\n                    <hr data-nodeid=\"45189\" />\n                    <p data-nodeid=\"45190\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"45198\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image/M00/72/94/Ciqc1F_EZ0eANc6tAASyC72ZqWw643.png\"\n                          alt=\"Drawing 2.png\"\n                          data-nodeid=\"45197\"\n                      /></a>\n                    </p>\n                    <p data-nodeid=\"45191\">《大前端高薪训练营》</p>\n                    <p data-nodeid=\"45192\" class=\"te-preview-highlight\">\n                      对标阿里 P7 技术需求 + 每月大厂内推，6\n                      个月助你斩获名企高薪 Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"45203\"\n                        >点击链接</a\n                      >，快来领取！\n                    </p>\n            "}