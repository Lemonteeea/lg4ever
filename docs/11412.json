{"title":"10&nbsp;| 双指针：如何掌握最长、定长、最短区间问题的解题决窍？","context":"\n                    <p data-nodeid=\"2047\">\n                      双指针的使用方法，在前面学习链表的时候，已经有所涉及。不过在那时，主要介绍的快慢指针。在这一讲，我们主要介绍双指针在数组上的应用。\n                    </p>\n                    <p data-nodeid=\"2048\">\n                      双指针，通常是命名用两个指针在数组/链表上遍历，然后解决满足某种性质的区间问题。在链表中我们已经介绍过双指针（也可以叫作快慢指针）。不过今天我们将重点介绍：如何利用<strong\n                        data-nodeid=\"2394\"\n                        >双指针</strong\n                      >处理以下 3 方面的区间问题：\n                    </p>\n                    <ul data-nodeid=\"2049\">\n                      <li data-nodeid=\"2050\">\n                        <p data-nodeid=\"2051\">最长区间</p>\n                      </li>\n                      <li data-nodeid=\"2052\">\n                        <p data-nodeid=\"2053\">定长区间</p>\n                      </li>\n                      <li data-nodeid=\"2054\">\n                        <p data-nodeid=\"2055\">最短区间</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2056\">\n                      学完本讲，你将收获双指针的 3\n                      个模板，帮助你通杀所有面试中可能碰到的双指针题目。Ready,\n                      Go Go!\n                    </p>\n                    <h3 data-nodeid=\"2057\">双指针基础</h3>\n                    <p data-nodeid=\"2058\">\n                      考察双指针的题目，绝大多数<strong data-nodeid=\"2414\"\n                        >题眼</strong\n                      >就在<strong data-nodeid=\"2415\">区间</strong\n                      >。见面不含糊，直接尝试挖出题目的<strong\n                        data-nodeid=\"2416\"\n                        >两个特点</strong\n                      >：\n                    </p>\n                    <ol data-nodeid=\"2059\">\n                      <li data-nodeid=\"2060\">\n                        <p data-nodeid=\"2061\">\n                          弄清楚题目要的是<strong data-nodeid=\"2422\"\n                            >什么样的区间</strong\n                          >？是最长，定长，最短这三种里面的哪一种。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2062\">\n                        <p data-nodeid=\"2063\">\n                          区间需要满足的<strong data-nodeid=\"2428\">条件</strong\n                          >是什么？\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2064\">\n                      如果发现题目符合这两个特点，还需要让题目中的连续子串（后文区间\n                      = 连续子串）符合单调性。让我们一起看一下什么是单调性。\n                    </p>\n                    <p data-nodeid=\"2065\">\n                      <em data-nodeid=\"2433\"\n                        >注：这里的双指针只是一种算法的命名，有的人喜欢叫滑动窗口，或者尺取法。我觉得用双指针更加形象一点。“指针”二字并不能对应到\n                        C/C++ 里面的指针类型。在使用的时候，往往是两个下标。</em\n                      >\n                    </p>\n                    <h4 data-nodeid=\"2066\">单调性</h4>\n                    <p data-nodeid=\"2067\">\n                      使用双指针，需要区间满足一个条件：区间状态的<strong\n                        data-nodeid=\"2440\"\n                        >单调性</strong\n                      >。这里可以用一个例子进行描述。比如我们想在如下数组中找到小于等于\n                      6 的最长子串。现在只看以 3\n                      为区间最右端元素的各种情况，如下图所示：\n                    </p>\n                    <p data-nodeid=\"6457\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhT-Abjx2AAA8vUVJFPw202.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"6460\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2069\">那么区间可以分为 3 种：</p>\n                    <p data-nodeid=\"9401\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhUaAau8tAAB0ktRDZ1k620.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"9404\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2071\">\n                      第一种区间：以 3 为右端，其和大于 6。\n                    </p>\n                    <p data-nodeid=\"12345\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2C/02/CioPOWBkhU6AYF-_AAC-KaWKVKw163.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"12348\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2073\">\n                      第二种区间：以 3 为右端的区间，其和等于 6。\n                    </p>\n                    <p data-nodeid=\"15289\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2C/02/CioPOWBkhVOABOSlAACCwqTl-NM650.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"15292\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2075\">\n                      第三种区间：以 3 为右端的区间，其和小于 6。\n                    </p>\n                    <p data-nodeid=\"2076\">\n                      如果我们将这些区间的累计和呈现到数轴上，就会得到如下图所示的一个图像：\n                    </p>\n                    <p data-nodeid=\"18233\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhVqAY6gsAACG8pko9yU592.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"18236\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2078\">\n                      可以看出，区间的状态的变化是单调的，并且是连续的：这就是双指针算法使用的条件。\n                    </p>\n                    <p data-nodeid=\"2079\">\n                      <strong data-nodeid=\"2474\"\n                        >有个快速判断区间属性是否满足单调性的办法，那就是，当往区间里面添加元素的时候，不能出现波折，比如不允许“满足条件</strong\n                      >→<strong data-nodeid=\"2475\">不满足条件</strong>→<strong\n                        data-nodeid=\"2476\"\n                        >满足条件”的情况</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2080\">\n                      比如，我们这里的限定条件改成：需要区间满足 &gt;=\n                      6。我们看一下如下操作步骤：\n                    </p>\n                    <p data-nodeid=\"21177\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2C/02/CioPOWBkhWuAJBqhAAg8Mji53d0501.gif\"\n                        alt=\"1.gif\"\n                        data-nodeid=\"21180\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"30033\" class=\"\">\n                      那么区间的状态变化就是\n                      <strong data-nodeid=\"30047\">“满足条件</strong>→<strong\n                        data-nodeid=\"30048\"\n                        >不满足条件</strong\n                      >→<strong data-nodeid=\"30049\">满足条件”</strong\n                      >。这样就不符合单调性。\n                    </p>\n\n                    <h4 data-nodeid=\"2083\">工作原理</h4>\n                    <p data-nodeid=\"2084\">\n                      那么双指针为什么可以在\n                      O(N)？它的合理性在哪？这里我尽量尝试用最直白的语言来把题目证明一下。\n                    </p>\n                    <p data-nodeid=\"38894\" class=\"\">\n                      首先我们来看<strong data-nodeid=\"38900\"\n                        >区间右端固定集合</strong\n                      >（这个名词是我自创的，因为我没有找到相关的术语来描述这种非常基础的操作）：\n                    </p>\n\n                    <blockquote data-nodeid=\"2086\">\n                      <p data-nodeid=\"2087\">\n                        把 A[i]\n                        元素固定为区间的右端点，只变动区间的左边界形成的所有区间，并且按区间长度需要从长到短排列。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2088\">比如要遍历如下数组：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span>[] A = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2090\">\n                      比如以 A[i = 2] = 3 为例，形成的<strong data-nodeid=\"2518\"\n                        >区间右端固定集合</strong\n                      >为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n</div></li><li><div class=\"code-word\">   [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n</div></li><li><div class=\"code-word\">      [<span class=\"hljs-number\">3</span>]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2092\">\n                      如果对每个元素找到<strong data-nodeid=\"2524\"\n                        >区间右端固定集合</strong\n                      >，我们同样可以遍历一个数组里面的所有的子区间：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">i = <span class=\"hljs-number\">0</span>, A[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span> =&gt; [<span class=\"hljs-number\">1</span>]\n</div></li><li><div class=\"code-word\">i = <span class=\"hljs-number\">1</span>, A[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">2</span> =&gt; [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">2</span>]\n</div></li><li><div class=\"code-word\">i = <span class=\"hljs-number\">2</span>, A[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">3</span> =&gt; [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">3</span>]\n</div></li><li><div class=\"code-word\">i = <span class=\"hljs-number\">3</span>, A[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">4</span> =&gt; [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">4</span>]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2094\">\n                      接下来我们只分析 A[i] 元素的<strong data-nodeid=\"2561\"\n                        >区间右端固定集合</strong\n                      >。比如要找出和 &lt;= 7 的最长区间。当已经处理到 A[2] = 3\n                      的时候，当发现 [1, 2, 3] 这个区间之和 6 已经 &lt;=7\n                      时（<strong data-nodeid=\"2562\">满足要求</strong\n                      >），实际上就没有必要再去处理 [2, 3] 区间和 [3]\n                      区间。因为我们要的就是<strong data-nodeid=\"2563\"\n                        >最长区间！</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"41845\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhYaADxRBAABXMBkDfoQ967.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"41848\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2096\">\n                      通过上述分析，我们可以总结一个<strong data-nodeid=\"2576\"\n                        >区间最优原则</strong\n                      >：从左向右遍历<strong data-nodeid=\"2577\"\n                        >区间右端固定集合中的每个区间，找到一个满足条件的解即可停止</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2097\">\n                      利用这个性质，我们可以再加一个指针 left,\n                      指向区间的左边，与 A[i] 元素构成区间 (left,\n                      i]，注意这里我们又用到了<strong data-nodeid=\"2598\"\n                        >开闭原则，<strong data-nodeid=\"2597\"\n                          >只不过此时是</strong\n                        >左开右闭</strong\n                      >。那么寻找以 A[i] 为右边界的最优解可以分 3 步走：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">step1. 将A[i]加到区间中，形成新区间(left, i]\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 遍历A[i]的区间右端固定集合，直找到以A[i]为右端点的最优解</span>\n</div></li><li><div class=\"code-word\">step2. <span class=\"hljs-keyword\">while</span> (left &lt; i &amp;&amp; (left,i]区间不满足要求) {\n</div></li><li><div class=\"code-word\">  left++;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 此时要么得到一个满足要求的</span>\n</div></li><li><div class=\"code-word\">step <span class=\"hljs-number\">3</span>. (left, i]区间满足要求\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2099\">\n                      前面我们已经找到了 A[2] = 3 的合法最长区间为 (-1,\n                      2]，那么接下来看一下如何再接着处理 A[3] = 4。\n                    </p>\n                    <p data-nodeid=\"44793\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhZKAQoB0AAgbjm0tF6w084.gif\"\n                        alt=\"2.gif\"\n                        data-nodeid=\"44796\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2101\">\n                      通过上述分析，我们可以拿出<strong data-nodeid=\"2627\"\n                        >求解最长区间时双指针的结论：<strong data-nodeid=\"2626\"\n                          >最长区间问题的最优解→只需要遍历</strong\n                        >每个元素 A[i] 的最优解</strong\n                      >即可。\n                    </p>\n                    <p data-nodeid=\"2102\">\n                      以前面给的 A[2] = 3, A[3] = 4\n                      两个元素为例，在找整个最优解的时候，只需要看两个区间：\n                    </p>\n                    <ul data-nodeid=\"2103\">\n                      <li data-nodeid=\"2104\">\n                        <p data-nodeid=\"2105\">[1, 2, 3]</p>\n                      </li>\n                      <li data-nodeid=\"2106\">\n                        <p data-nodeid=\"2107\">[3, 4]</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2108\">\n                      我们发现，在寻找最优解的时候，已经比暴力算法少了很多需要查看的区间。\n                    </p>\n                    <h3 data-nodeid=\"2109\">最长区间</h3>\n                    <p data-nodeid=\"2110\">\n                      使用双指针算法来解决最长区间的问题，一般题目需要具备如下特点：\n                    </p>\n                    <ul data-nodeid=\"2111\">\n                      <li data-nodeid=\"2112\">\n                        <p data-nodeid=\"2113\">给定一个条件</p>\n                      </li>\n                      <li data-nodeid=\"2114\">\n                        <p data-nodeid=\"2115\">求最长区间/最长子串</p>\n                      </li>\n                      <li data-nodeid=\"2116\">\n                        <p data-nodeid=\"2117\">\n                          题目给出的区间需要<strong data-nodeid=\"2652\"\n                            >具备单调性</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2118\">\n                      这里需要特别指出，不是看到题目要求最长子串/最长区间就使用双指针，而是需要题目的求解空间具有单调性。这是一个非常重要具必备的条件。\n                    </p>\n                    <h4 data-nodeid=\"56576\" class=\"\">面试必杀技</h4>\n\n                    <p data-nodeid=\"2120\">\n                      不过，真正在面试的时候，可没有那么多时间让你慢慢去证明，慢慢去推导。放心，我这里已经给你准备好了最长区间的面试必杀技，关键就两招：\n                    </p>\n                    <ol data-nodeid=\"2121\">\n                      <li data-nodeid=\"2122\">\n                        <p data-nodeid=\"2123\">\n                          <strong data-nodeid=\"2668\">两个指针</strong>，left\n                          指针和 right 指针，两个指针形成的区间为 (left,\n                          right]。这里的开闭原则是<strong data-nodeid=\"2669\"\n                            >左开右闭；</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2124\">\n                        <p data-nodeid=\"2125\">\n                          <strong data-nodeid=\"2674\">惰性原则</strong>，如果把\n                          left\n                          指针当成一个人，那么这个人是非常懒惰的，他总是要等到火烧屁股（条件不满足了）才向右移动。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2126\">\n                      求最长区间的代码模板大概会长成这样（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">maxLength</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> N = A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 区间的左指针</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> left = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> ans = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// assert 在加入A[i]之前，(left, i-1]是一个合法有效的区间</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// step 1. 直接将A[i]加到区间中，形成(left, i]</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// step 2. 将A[i]加入之后，惰性原则</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (check((left, i]))<span class=\"hljs-comment\">/*TODO 检查区间状态是否满足条件*/</span>) {\n</div></li><li><div class=\"code-word\">      ++left; <span class=\"hljs-comment\">// 如果不满足条件，移动左指针</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// TODO 修改区间的状态</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// assert 此时(left, i]必然满足条件</span>\n</div></li><li><div class=\"code-word\">    ans = max(ans, i - left);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> ans; <span class=\"hljs-comment\">// 返回最优解</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2128\">\n                      好了，我们的刀已经磨好了，下面就开始准备切题吧。注意上方代码中的<strong\n                        data-nodeid=\"2685\"\n                        >两个“TODO”</strong\n                      >，我们已经把写算法题，变成<strong data-nodeid=\"2686\"\n                        >填空题</strong\n                      >了。\n                    </p>\n                    <h4 data-nodeid=\"2129\">例 1：不含重复字符的最长区间</h4>\n                    <p data-nodeid=\"2130\">\n                      【<strong data-nodeid=\"2693\">题目</strong>】找出一个字符串\n                      s 中无重复字符子串的长度。\n                    </p>\n                    <p data-nodeid=\"2131\">输入： s = \"abcdc\"</p>\n                    <p data-nodeid=\"2132\">输出：4</p>\n                    <p data-nodeid=\"2133\">解释：因为最长的子串就是\"abcd\"</p>\n                    <p data-nodeid=\"2134\">\n                      【<strong data-nodeid=\"2708\">分析</strong\n                      >】首先看题目的特点：\n                    </p>\n                    <ul data-nodeid=\"2135\">\n                      <li data-nodeid=\"2136\">\n                        <p data-nodeid=\"2137\">求最长子串</p>\n                      </li>\n                      <li data-nodeid=\"2138\">\n                        <p data-nodeid=\"2139\">条件为无重复字符</p>\n                      </li>\n                      <li data-nodeid=\"2140\">\n                        <p data-nodeid=\"2141\">单调性</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2142\">\n                      子串是数组的一个区间。那么题目的特点已经和最长区间的特点非常匹配了。再看<strong\n                        data-nodeid=\"2717\"\n                        >单调性</strong\n                      >，当子串在变长的时候，不可能出现“无重复字符 → 重复字符 →\n                      无重复字符”这种可能。因此满足单调性。\n                    </p>\n                    <p data-nodeid=\"2143\">\n                      那么这里我们直接使用双指针进行求解。\n                    </p>\n                    <p data-nodeid=\"2144\">\n                      其实可以直接套用前面总结出的模板，但是我们立马会发现模板中代码并不完整，还有两个“TODO”需要处理。下面我们看一下如何像处理填空题一样把这两个空给填上。\n                    </p>\n                    <h5 data-nodeid=\"59516\" class=\"\">1. 检查区间状态</h5>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (check((left, i]))是否满足条件)\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"2149\">\n                      首先，我们检查区间是否满足条件，那么如何检查？当我们把新字符\n                      s[i] 加入合法区间 (left, i-1]，形成 (left, i]\n                      区间之后，区间的状态就会变成如下图所示的样子：\n                    </p>\n                    <p data-nodeid=\"62453\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhaqAf1zwAABiSObaZeA356.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"62456\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2151\">\n                      这个时候，可以发现区间里面 (left, i]\n                      里面已经有一个'a'了。也就是说：如果我们发现当加入一个字符的时候，这个字符位置在\n                      (left, i-1]\n                      区间里面，此时就产生了重复字符。所以检查条件可以修改成：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// pos[]数组用来记录每个字符的位置</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (left &lt; i &amp;&amp; pos[字符] &gt; left) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 然后移动left</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// TODO 修改区间状态</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h5 data-nodeid=\"65391\" class=\"\">2. 修改区间状态</h5>\n\n                    <p data-nodeid=\"2156\">\n                      我们来看一个例子，当产生重复字符的时候，如何修改呢？具体操作如下：\n                    </p>\n                    <p data-nodeid=\"68323\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2C/03/CioPOWBkhbmARBwhAAn3-RHORc0122.gif\"\n                        alt=\"3.gif\"\n                        data-nodeid=\"68326\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2158\">\n                      也就是 left = pos['a']\n                      就可以。那么状态的更新就可以写成如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// pos[]数组用来记录每个字符的位置</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (left &lt; i &amp;&amp; pos[字符] &gt; left) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 然后移动left</span>\n</div></li><li><div class=\"code-word\">  left = pos[字符];\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2160\">\n                      【<strong data-nodeid=\"2759\">代码</strong\n                      >】填好空的代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">lengthOfLongestSubstring</span><span class=\"hljs-params\">(String s)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = s == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : s.length();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span>[] pos = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">256</span>];\n</div></li><li><div class=\"code-word\">  Arrays.fill(pos, -<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> ans = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> left = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> idx = (<span class=\"hljs-keyword\">int</span>)s.charAt(i);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// (left, i)已经是一个有效的解</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 现在要把s[i]加进来</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 1. 坏了才移动</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 那么看一下是否会坏？</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (pos[idx] &gt; left) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 如果(left, i)里面已经有了s[i]</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 那么需要移动左边，</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 移动的时候，怎么移动？</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 可以直接将left 移动到pos[s[i]]</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 因为我们采用的区间是左开右闭</span>\n</div></li><li><div class=\"code-word\">      left = pos[idx];\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    pos[idx] = i;\n</div></li><li><div class=\"code-word\">    ans = Math.max(ans, i - left);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2162\">\n                      <p data-nodeid=\"2163\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2763\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2767\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2771\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2164\">\n                      <strong data-nodeid=\"2776\">复杂度分析</strong>：时间复杂度\n                      O(N)，空间复杂度 O(1)。\n                    </p>\n                    <p data-nodeid=\"2165\">\n                      【<strong data-nodeid=\"2782\">小结</strong\n                      >】到这里，我们已经学习了最长区间的原理，模板，以及将它巧妙地变成填空题来快速破题。\n                    </p>\n                    <p data-nodeid=\"2166\">\n                      关于最长区间问题，我们可以总结如下：\n                    </p>\n                    <p data-nodeid=\"71257\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/2B/FA/Cgp9HWBkhciAT_0sAADFc6oIePE139.png\"\n                        alt=\"Drawing 10.png\"\n                        data-nodeid=\"71260\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2168\">\n                      接下来，为了巩固已学的知识，我们再一起看几道练习题。\n                    </p>\n                    <p data-nodeid=\"2169\">\n                      <strong data-nodeid=\"2792\">练习题 1</strong\n                      >：给定一个字符串，你可以把字符串里面的某些字符替换成任意字符\n                      k 次。请返回你可以得到的最长相同字符的长度。\n                    </p>\n                    <p data-nodeid=\"2170\">输入：s = 'ABACD', k = 1</p>\n                    <p data-nodeid=\"2171\">输出：3</p>\n                    <p data-nodeid=\"2172\">\n                      解释：只需要把 'ABA' 里面的 B 替换成 'A' 即可。\n                    </p>\n                    <blockquote data-nodeid=\"2173\">\n                      <p data-nodeid=\"2174\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/424.%E6%9B%BF%E6%8D%A2%E5%90%8E%E7%9A%84%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2811\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/424.%E6%9B%BF%E6%8D%A2%E5%90%8E%E7%9A%84%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2815\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/424.%E6%9B%BF%E6%8D%A2%E5%90%8E%E7%9A%84%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2819\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2175\">\n                      <strong data-nodeid=\"2828\">练习题 2</strong\n                      >：你需要实现一个类，实现里面的 insert(char c)\n                      函数，调用者会通过 insert\n                      接口给你一个字符。此外，调用者还会立马调用\n                      firstAppearingOnce()\n                      函数来查询第一个出现的字符。如果不存在，返回 '#' 字符。\n                    </p>\n                    <p data-nodeid=\"2176\">输入：google</p>\n                    <p data-nodeid=\"2177\">输出：ggg#ll</p>\n                    <blockquote data-nodeid=\"2178\">\n                      <p data-nodeid=\"2179\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/64.%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2834\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/64.%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2838\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/64.%E5%AD%97%E7%AC%A6%E6%B5%81%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2842\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2180\">\n                      <strong data-nodeid=\"2850\">练习题 3</strong>：给定一个数组\n                      A[]，请你找到一个最长区间，这个区间里面最多包含两个不一样的数。\n                    </p>\n                    <p data-nodeid=\"2181\">输入：A = [1, 2, 1, 2, 3]</p>\n                    <p data-nodeid=\"2182\">输出：4</p>\n                    <p data-nodeid=\"2183\">\n                      解释：区间 [1, 2, 1, 2] 里面只有两个数，并且是最长区间。\n                    </p>\n                    <blockquote data-nodeid=\"2184\">\n                      <p data-nodeid=\"2185\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2864\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2868\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2872\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2186\">\n                      <strong data-nodeid=\"2877\">练习题 4</strong>：在练习题 3\n                      的基础上，做了一点点扩展，最多包含 k 个不一样的数。\n                    </p>\n                    <blockquote data-nodeid=\"2187\">\n                      <p data-nodeid=\"2188\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/386.%E6%9C%80%E5%A4%9A%E6%9C%89k%E4%B8%AA%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2881\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/386.%E6%9C%80%E5%A4%9A%E6%9C%89k%E4%B8%AA%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2885\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/386.%E6%9C%80%E5%A4%9A%E6%9C%89k%E4%B8%AA%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2889\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2189\">\n                      <strong data-nodeid=\"2894\">练习题 5</strong\n                      >：一个数组里面的数总是增增减减，会出现升序，然后再降序的情况，请找出这个数组里面最长的子串，这个子串刚好形成先升后降的大山峰。\n                    </p>\n                    <blockquote data-nodeid=\"2190\">\n                      <p data-nodeid=\"2191\">\n                        代码:<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/845.%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E5%B1%B1%E8%84%89.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2898\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/845.%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E5%B1%B1%E8%84%89.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2902\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/845.%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E9%95%BF%E5%B1%B1%E8%84%89.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"2906\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2192\">\n                      最长区间问题，经过一小点改动还可以用来解决区间计数问题。下面我们一起来看一下。\n                    </p>\n                    <h4 data-nodeid=\"2193\">例 2: 区间计数</h4>\n                    <p data-nodeid=\"2194\">\n                      【<strong data-nodeid=\"2917\">题目</strong\n                      >】给定一个正数数组A[]，以及一个正整数 k，求乘积小于 k\n                      的子数组的个数。\n                    </p>\n                    <p data-nodeid=\"2195\">\n                      输入：A = [100, 1, 1, 1, 2, 3, 4], k = 6\n                    </p>\n                    <p data-nodeid=\"2196\">输出：12</p>\n                    <p data-nodeid=\"2197\">\n                      解释：乘积小于 6 的子数组一共有 12 个。比如 [1]、\n                      [1]、[1,1,1]，等等。\n                    </p>\n                    <p data-nodeid=\"2198\">\n                      【<strong data-nodeid=\"2942\">分析</strong\n                      >】前面我们介绍的是使用模板求解最长区间，这道题目问题却是在求区间的个数。那么这两者之间有什么联系呢？\n                    </p>\n                    <p data-nodeid=\"2199\">\n                      这里我们只看 A[4] = 2 元素的<strong data-nodeid=\"2952\"\n                        >区间右端固定集合</strong\n                      >。如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">A[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">2</span>:\n</div></li><li><div class=\"code-word\">[<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n</div></li><li><div class=\"code-word\">     [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>] &lt;-- 最优解：乘积 &lt; <span class=\"hljs-number\">6</span>的最长区间\n</div></li><li><div class=\"code-word\">        [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n</div></li><li><div class=\"code-word\">           [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n</div></li><li><div class=\"code-word\">              [<span class=\"hljs-number\">2</span>]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2201\">\n                      可以发现，[1, 1, 1, 2]\n                      是我们寻找最长区间时候的最优解。让我们再回想一下前面提到的<strong\n                        data-nodeid=\"2962\"\n                        >区间最优原则</strong\n                      >：\n                    </p>\n                    <blockquote data-nodeid=\"2202\">\n                      <p data-nodeid=\"2203\">\n                        区间右端固定集合合里面，一旦找到一个最优解，那么最优解右边的区间如果满足条件，但都不是最优解。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2204\">\n                      <strong data-nodeid=\"2984\">区间最优原则</strong\n                      >也在<strong data-nodeid=\"2985\">疯狂暗示</strong\n                      >我们，如果找到以 A[i] 为右端的最优解，那么余下的更短的以\n                      A[i] 为右端的区间，也是满足小于等于 k\n                      的。在统计的时候，我们只需要累计每个 A[i]\n                      的最优解区间的长度就可以了。\n                    </p>\n                    <p data-nodeid=\"2205\">\n                      那么区间计数的模板就变成如下所示的样子（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">rangeCounter</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> N = A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 区间的左指针</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> left = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> ans = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 不变式0: 最开始的区间为(-1, -1] 是一个空区间</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">//         我们认为空区间总是满足条件!</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 不变式1: 在加入A[i]之前，(left, i-1]是一个合法有效的区间</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// step 1. 直接将A[i]加到区间中，形成(left, i]</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// step 2. 将A[i]加入之后，惰性原则</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (check((left, i]))<span class=\"hljs-comment\">/*TODO 检查区间状态是否满足条件*/</span>) {\n</div></li><li><div class=\"code-word\">      ++left; <span class=\"hljs-comment\">// 如果不满足条件，移动左指针</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// TODO 修改区间的状态</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 不变式2：此时(left, i]必然合法</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 累计区间个数</span>\n</div></li><li><div class=\"code-word\">    ans += i - left;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> ans; <span class=\"hljs-comment\">// 返回最优解</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2207\">\n                      好吧，经过上述一番分析，我们又把区间计数问题变成填空题。下面只需要再填好那两个“TODO”的地方就可以了：\n                    </p>\n                    <ul data-nodeid=\"2208\">\n                      <li data-nodeid=\"2209\">\n                        <p data-nodeid=\"2210\">区间状态是否满足条件</p>\n                      </li>\n                      <li data-nodeid=\"2211\">\n                        <p data-nodeid=\"2212\">\n                          移动左指针的时候，修改区间的状态\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2213\">根据题意，这两个都是比较好填的：</p>\n                    <ul data-nodeid=\"2214\">\n                      <li data-nodeid=\"2215\">\n                        <p data-nodeid=\"2216\">\n                          区间状态，我们直接用累积就可以了\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2217\">\n                        <p data-nodeid=\"2218\">条件的判断只需要 s &gt; k</p>\n                      </li>\n                      <li data-nodeid=\"2219\">\n                        <p data-nodeid=\"2220\">\n                          当移动左指针的时候，只需要 s /= A[++left] 即可\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2221\">\n                      【<strong data-nodeid=\"3003\">代码</strong\n                      >】填好空的代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">numSubarrayProductLessThanK</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> k)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> left = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">long</span> ans = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">long</span> s = <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">long</span> x = A[i];\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 将x加到子数组中</span>\n</div></li><li><div class=\"code-word\">    s *= x;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果破坏了约束，那么移动左指针</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (s &gt;= k &amp;&amp; left &lt; i) {\n</div></li><li><div class=\"code-word\">      s /= A[++left];\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 此时必然满足要求</span>\n</div></li><li><div class=\"code-word\">    ans += i - left;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">int</span>)ans;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2223\">\n                      <p data-nodeid=\"2224\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/713.%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8Ek%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3007\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/713.%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8Ek%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3011\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/713.%E4%B9%98%E7%A7%AF%E5%B0%8F%E4%BA%8Ek%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3015\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2225\">\n                      <strong data-nodeid=\"3020\">复杂度分析</strong>：时间复杂度\n                      O(N)，空间复杂度 O(1)。\n                    </p>\n                    <p data-nodeid=\"2226\">\n                      【<strong data-nodeid=\"3030\">小结</strong\n                      >】这里我们再次提到**区间最优原则，**这个原则非常重要，是使用双指针来解决问题的关键与依赖。你可以尝试求解下面这道练习题，细细体会该原则。\n                    </p>\n                    <p data-nodeid=\"2227\">\n                      <strong data-nodeid=\"3038\">练习题 6</strong\n                      >：给定一个有正数也有负数的数组 A[] 和\n                      k，请找到最长的子数组，其和等于 k。\n                    </p>\n                    <blockquote data-nodeid=\"2228\">\n                      <p data-nodeid=\"2229\">\n                        解法 1：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/921.%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E4%B8%BAk.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3042\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/921.%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E4%B8%BAk.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3046\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/921.%E6%9C%80%E9%95%BF%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E4%B8%BAk.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3050\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2230\">\n                      <em data-nodeid=\"3054\"\n                        >注：这里可能需要你好好想一下，为什么不能使用我们刚才所讲的模板。</em\n                      >\n                    </p>\n                    <p data-nodeid=\"74191\">\n                      下面我们整理一下最长区间题目的特点，以及代码模板的适用条件：\n                    </p>\n                    <p data-nodeid=\"74192\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2B/FA/Cgp9HWBkhdyAN1WxAAEbHio0cA8786.png\"\n                        alt=\"Drawing 11.png\"\n                        data-nodeid=\"74196\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2233\">\n                      最长区间的知识点就讲到这里。接下来我们看一下定长区间问题的求解。\n                    </p>\n                    <h3 data-nodeid=\"2234\">定长区间</h3>\n                    <p data-nodeid=\"2235\">\n                      定长区间问题是要找到一个固定长度的区间，并且这个区间必须满足某种条件。所以求解定长区间问题，实质上是需要找满足两个条件的子串。\n                    </p>\n                    <ol data-nodeid=\"2236\">\n                      <li data-nodeid=\"2237\">\n                        <p data-nodeid=\"2238\">\n                          子串的长度固定。由于长度固定，因此，<strong\n                            data-nodeid=\"3067\"\n                            >定长区间问题不需要满足单调性</strong\n                          >。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2239\">\n                        <p data-nodeid=\"2240\">子串必须满足某种条件。</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2241\">\n                      定长区间的解法通常也被称为“<strong data-nodeid=\"3078\"\n                        >滑动窗口算法</strong\n                      >”。在“<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6698&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"3076\"\n                        >第 09 讲</a\n                      >”讲解二分搜索“例 4:\n                      最大平均值”的时候，我们对这种方法有涉及，但是并没有深入地详细展开。这里我们再总结一下这种算法的模板与套路。\n                    </p>\n                    <p data-nodeid=\"2242\">\n                      定长区间，由于长度固定，你可以想象成有一个固定的长度的窗口在数组上滑动。比如有一个长度为\n                      3 的窗口在一个数组上滑动。\n                    </p>\n                    <p data-nodeid=\"77127\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/2B/FA/Cgp9HWBkheeAR-sCAADcf5wNUa0724.png\"\n                        alt=\"Drawing 12.png\"\n                        data-nodeid=\"77130\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2244\">\n                      写定长区间的代码也比较容易。如果我们比较两者的变化，可以发现，只有首尾元素发生了变动。\n                    </p>\n                    <p data-nodeid=\"80061\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2C/03/CioPOWBkhe6AMvLuAAEIxUpEirg181.png\"\n                        alt=\"Drawing 13.png\"\n                        data-nodeid=\"80064\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2246\">\n                      那么我们在处理时，只需要保证加入元素和删除元素的时候，去更新区间的性质，查看是否满足约束条件即可。\n                    </p>\n                    <h4 data-nodeid=\"91788\" class=\"\">面试必杀技</h4>\n\n                    <p data-nodeid=\"2248\">\n                      在面试的时候，如果拿到题目再去慢慢想滑动窗口应该怎么写，会浪费不少时间。这里我已经给你总结好了方法，你拿到题的时候，需要从题目中分析两个特点。\n                    </p>\n                    <ol data-nodeid=\"2249\">\n                      <li data-nodeid=\"2250\">\n                        <p data-nodeid=\"2251\">\n                          <strong data-nodeid=\"3101\">固定长度</strong\n                          >：题目要求解的是不是一个<strong data-nodeid=\"3102\"\n                            >固定长度</strong\n                          >的子串？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2252\">\n                        <p data-nodeid=\"2253\">\n                          <strong data-nodeid=\"3107\">约束条件</strong>：\n                          这个定长区间必须要满足什么性质？\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2254\">\n                      如果从题目中分析出以上 2\n                      个特点，那么基本上可以直接套用定长区间的“滑动窗口”解法了。这里我已经整理好了一个通用的模板，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fixedLength</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> windowSize)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> left = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// step 1. 直接将A[i]加到区间中，形成(left, i]</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// TODO 修改区间的状态</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果滑动窗口还太小</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i - left &lt; windowSize) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// assert 此时(left, i]长度必然等于windowSize</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// TODO 判断区间的状态是否满足约束条件</span>\n</div></li><li><div class=\"code-word\">    left++;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// step 2. 移除A[left]</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// TODO 修改区间状态</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> ans; <span class=\"hljs-comment\">// 返回最优解</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2256\">\n                      注意，模板中只有**3 个“\n                      TODO”**要根据题目的具体情况来填。这样，我们又把定长区间算法题变成了填空题。接下来我们再拿两道题来试刀。\n                    </p>\n                    <h4 data-nodeid=\"2257\">例 3: 定长子串 1</h4>\n                    <p data-nodeid=\"2258\">\n                      【<strong data-nodeid=\"3120\">题目</strong>】给定两个字符串\n                      A，B。判断 B 字符串是否有包含 A 字符串的任意排列。\n                    </p>\n                    <p data-nodeid=\"2259\">输入：A = \"ab\", B = \"bac\"</p>\n                    <p data-nodeid=\"2260\">输出：true</p>\n                    <p data-nodeid=\"2261\">\n                      <strong data-nodeid=\"3146\">解释</strong>：因为 B\n                      字符串是包含 \"ba\"，而 \"ba\" 是字符串 \"ab\" 的一个排列。\n                    </p>\n                    <p data-nodeid=\"2262\">\n                      【<strong data-nodeid=\"3152\">分析</strong\n                      >】首先我们看题目的特点，A\n                      字符串的任意排列，透露出两个特点：\n                    </p>\n                    <ol data-nodeid=\"2263\">\n                      <li data-nodeid=\"2264\">\n                        <p data-nodeid=\"2265\">\n                          任意排列的长度肯定等于 A.length()\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2266\">\n                        <p data-nodeid=\"2267\">\n                          任意排列的字符的数目的统计结果必然相同\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2268\">从这两个特点，我们可以知道：</p>\n                    <ul data-nodeid=\"2269\">\n                      <li data-nodeid=\"2270\">\n                        <p data-nodeid=\"2271\">\n                          固定长度，并且区间的长度就是 A 字符串的长度；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2272\">\n                        <p data-nodeid=\"2273\">\n                          约束条件，区间里面的字符的统计个数必须相等。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2274\">\n                      如果现在我们直接套用模板，并且直接用数组来统计字符个数。就可以写出如下代码了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">checkInclusion</span><span class=\"hljs-params\">(String A, String B)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// B contains A的任意排列？</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> blen = B == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : B.length();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> alen = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 统计A字符串里面各个字符的出现次数</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span>[] astat = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">256</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; alen; i++) {\n</div></li><li><div class=\"code-word\">    astat[A.charAt(i)]++;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 统计B字符串里面的子串的字符的出现次数</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span>[] bstat = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">256</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 滑动窗口的左边起始点，我们使用(left, i]来表示这个</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 定长区间</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> left = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; blen; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// step 1. 直接将A[i]加到区间中，形成(left, i]</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// DONE 修改区间的状态</span>\n</div></li><li><div class=\"code-word\">    Character c = B.charAt(i);\n</div></li><li><div class=\"code-word\">    bstat[c]++;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果窗口还太小，此时不满足定长的条件</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i - left &lt; alen) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// assert 此时(left, i]长度必然等于windowSize</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// DONE 判断区间的状态是否满足约束</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">boolean</span> same = <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">256</span> &amp;&amp; same; j++) {\n</div></li><li><div class=\"code-word\">      same = astat[j] == bstat[j];\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (same)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 移除滑动窗口的尾巴!</span>\n</div></li><li><div class=\"code-word\">    left++;\n</div></li><li><div class=\"code-word\">    bstat[B.charAt(left)]--;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2276\">\n                      我们发现，套用模板还是挺好求解的。不过这里面还有一个小问题，在对比统计结果的时候，我们采用的方式比较暴力，总是遍历了统计结果里面的每一项。那么有没有更好的办法呢？\n                    </p>\n                    <p data-nodeid=\"2277\">\n                      不难发现，需要比较的 astat 与 bstat，其中 A\n                      字符串的统计结果<strong data-nodeid=\"3169\"\n                        >astat 是固定不变的</strong\n                      >。并且 bstat 里面的统计结果，每次<strong\n                        data-nodeid=\"3170\"\n                        >仅有一项会发生增减 1</strong\n                      >的情况。那么我们可以采用这种办法：\n                    </p>\n                    <ul data-nodeid=\"2278\">\n                      <li data-nodeid=\"2279\">\n                        <p data-nodeid=\"2280\">\n                          equal = 0，表示一开始只有 0 项字符的统计结果是相等的；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2281\">\n                        <p data-nodeid=\"2282\">\n                          当 bstat[x]++ 之后。如果发现 bstat[x] ==\n                          astat[x]，那么证明其中又有一个字符的统计结果满足要求了，equal\n                          ++；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2283\">\n                        <p data-nodeid=\"2284\">\n                          如果发现 equal\n                          等于需要统计的字符个数，那么就得到了一个正确的解；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2285\">\n                        <p data-nodeid=\"2286\">\n                          在滑动窗口的尾巴移除之前，如果 bstat[x] ==\n                          astat[x]，那么说明我们要把一个统计结果相等的字符给删除掉，equal--。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2287\">\n                      为了方便你记忆，我把这四个办法总结为一句话，<strong\n                        data-nodeid=\"3204\"\n                        >那就是：“刚好等于 astat[x] 时进行增/减”</strong\n                      >。这样我们就可以写出更加高效的代码了，不需要再去逐个对比统计结果里面的每一项是否相等。\n                    </p>\n                    <p data-nodeid=\"2288\">\n                      【<strong data-nodeid=\"3210\">代码</strong\n                      >】最终优化后的代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 统计类</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Counter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">astatashMap</span>&lt;<span class=\"hljs-title\">Character</span>, <span class=\"hljs-title\">Integer</span>&gt; </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(Character k)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> containsKey(k) ? <span class=\"hljs-keyword\">super</span>.get(k) : <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(Character k, <span class=\"hljs-keyword\">int</span> v)</span> </span>{\n</div></li><li><div class=\"code-word\">    put(k, get(k) + v);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (get(k) &lt;= <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      remove(k);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">checkInclusion</span><span class=\"hljs-params\">(String A, String B)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// B contains A?</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> blen = B == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : B.length();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> alen = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 统计A字符串里面每个字符的出现次数。</span>\n</div></li><li><div class=\"code-word\">  Counter astat = <span class=\"hljs-keyword\">new</span> Counter();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; alen; i++) {\n</div></li><li><div class=\"code-word\">    astat.add(A.charAt(i), <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 统计B字符串里面每个字符的出现次数。</span>\n</div></li><li><div class=\"code-word\">  Counter bstat = <span class=\"hljs-keyword\">new</span> Counter();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> left = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 比较bstat与astat，有多少个字符的统计结果已经是相等的。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> equal = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; blen; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 将B[i]添加到区间中</span>\n</div></li><li><div class=\"code-word\">    Character c = B.charAt(i);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 更新区间的状态</span>\n</div></li><li><div class=\"code-word\">    bstat.add(c, <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 更新两个计数器相等的计数项的个数</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (bstat.get(c) == astat.get(c)) {\n</div></li><li><div class=\"code-word\">      equal++;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果窗口太小</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i - left &lt; alen) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// assert 此时(left, i]长度必然等于windowSize</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// DONE 判断区间的状态是否满足约</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (equal == astat.size()) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 移除滑动窗口的尾巴!</span>\n</div></li><li><div class=\"code-word\">    left++;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 更新移动后的区间的状态</span>\n</div></li><li><div class=\"code-word\">    Character rm = B.charAt(left);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (bstat.get(rm) == astat.get(rm)) {\n</div></li><li><div class=\"code-word\">      equal--;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    bstat.add(rm, -<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2290\">\n                      <p data-nodeid=\"2291\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.fix.window.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3214\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.fix.window.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3218\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.fix.window.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3222\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2292\">\n                      <strong data-nodeid=\"3227\">复杂度分析</strong>：时间复杂度\n                      O(N)，空间复杂度 O(1)。由于字符个数是固定的 256\n                      个。虽然使用了哈希表，但是占用的空间是固定的。因此，空间复杂度为\n                      O(1)。\n                    </p>\n                    <p data-nodeid=\"2293\">\n                      【<strong data-nodeid=\"3233\">小结</strong\n                      >】接下来我们看一下定长区间的知识结构：\n                    </p>\n                    <p data-nodeid=\"100570\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/2C/03/CioPOWBkhgOACLehAACpKHyfg0E724.png\"\n                        alt=\"Drawing 14.png\"\n                        data-nodeid=\"100573\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2295\">\n                      通过上图的总结我们可以发现：<strong data-nodeid=\"3246\"\n                        >定长区间的核心问题就是关注区间状态的表达</strong\n                      >。所以，这道题目的<strong data-nodeid=\"3247\">考点</strong\n                      >也非常明确：\n                    </p>\n                    <ul data-nodeid=\"2296\">\n                      <li data-nodeid=\"2297\">\n                        <p data-nodeid=\"2298\">\n                          如何用统计的办法来表达区间的状态\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2299\">\n                        <p data-nodeid=\"2300\">如何验证两个哈希表是否相等</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2301\">\n                      这里我再给你留个小练习，不要偷懒，一定要尝试自己解答！\n                    </p>\n                    <p data-nodeid=\"2302\">\n                      <strong data-nodeid=\"3255\">练习题 7</strong>：在例 3\n                      中我们使用了哈希表来处理字符的统计，主要是为了 Counter\n                      类的通用性。由于字符只有 256\n                      个。你能用数组来加速这个算法吗？\n                    </p>\n                    <blockquote data-nodeid=\"2303\">\n                      <p data-nodeid=\"2304\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.array.hash.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3259\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.fix.window.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3263\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/567.%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.fix.window.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3267\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2305\">\n                      接下来我们看一下这道题目的一个变形。\n                    </p>\n                    <h4 data-nodeid=\"2306\">例 4: 定长子串 2</h4>\n                    <p data-nodeid=\"2307\">\n                      【<strong data-nodeid=\"3275\">题目</strong>】给定一个字符串\n                      s，以及一个相同长度的单词列表。请找到所有的子串，这些子串必须包含列表中所有的单词（单词的顺序可以乱）。所有符合要求的子串的起始位置。\n                    </p>\n                    <p data-nodeid=\"2308\">\n                      输入：s = \"AABBCCBBAA\", D = {\"AA\", \"BB\"};\n                    </p>\n                    <p data-nodeid=\"2309\">输出：[0, 6]</p>\n                    <p data-nodeid=\"2310\">\n                      <strong data-nodeid=\"3305\">解释</strong>：在 s\n                      字符串中，以下标 0 和下标 6 起始的子串 \"AABB\", \"BBAA\"\n                      符合要求。\n                    </p>\n                    <p data-nodeid=\"2311\">\n                      【<strong data-nodeid=\"3311\">分析</strong\n                      >】每个单词的长度是固定的，设为 L，那么需要把 s 按长度 L\n                      进行切分。那么当 L = 2 的时候，切分方式可以如下：\n                    </p>\n                    <p data-nodeid=\"103498\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/2C/03/CioPOWBkhhOAV3QYAAD_YpJTpAU095.png\"\n                        alt=\"Drawing 15.png\"\n                        data-nodeid=\"103501\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2313\">\n                      其他的切分方式都是这两种切分方式的子集。更进一步，我们可以有如下<strong\n                        data-nodeid=\"3320\"\n                        >切分结论</strong\n                      >：字符串 s 要按固定长度 L 切分时，只有 L 种切分方式。\n                    </p>\n                    <p data-nodeid=\"2314\">\n                      不同的切分方式，就好像生成了不同的数组一样，如下图所示：\n                    </p>\n                    <p data-nodeid=\"106426\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/2C/03/CioPOWBkhhmAZHlVAACMmgO8dAQ651.png\"\n                        alt=\"Drawing 16.png\"\n                        data-nodeid=\"106429\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2316\">\n                      这个操作代码可以写成如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> start = <span class=\"hljs-number\">0</span>; start &lt; L; start++) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里开始遍历</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 数组0. [\"AA\", \"BB\", \"CC\", \"BB\", \"AA\"]</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 数组1. [\"AB\", \"BC\", \"CB\", \"BA\"]</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = start; i + L &lt;= s.length(); i+= L) {\n</div></li><li><div class=\"code-word\">    String tmp = s.substring(i, i + L);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// tmp就是依次取出数组中的单词。</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2318\">\n                      到此时，题目已经变成在 String[]\n                      数组里面找一个子串，这个子串里面包含列表中所有的单词。这么一看，不就是我们前面学习过的例\n                      3 吗。但是与例 3 不同的地方在于：\n                    </p>\n                    <ul data-nodeid=\"2319\">\n                      <li data-nodeid=\"2320\">\n                        <p data-nodeid=\"2321\">\n                          这里表面上看是一个字符串 s，实际上是通过字符串 s 生成\n                          L 个数组；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2322\">\n                        <p data-nodeid=\"2323\">\n                          例 3\n                          中需要统计的是单个的字符，而在这里需要统计的是单词。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2324\">\n                      【<strong data-nodeid=\"3337\">代码</strong>】我们直接基于例\n                      3，再加上一些代码（解析在注释里），就可以解决这道题了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Counter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HashMap</span>&lt;<span class=\"hljs-title\">String</span>, <span class=\"hljs-title\">Integer</span>&gt; </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(String k)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> containsKey(k) ? <span class=\"hljs-keyword\">super</span>.get(k) : <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(String k, <span class=\"hljs-keyword\">int</span> v)</span> </span>{\n</div></li><li><div class=\"code-word\">    put(k, get(k) + v);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (get(k) &lt;= <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      remove(k);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">List&lt;Integer&gt; <span class=\"hljs-title\">findSubstring</span><span class=\"hljs-params\">(String s, String[] D)</span> </span>{\n</div></li><li><div class=\"code-word\">  Counter H = <span class=\"hljs-keyword\">new</span> Counter();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> wordLength = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 统计字典中单词出现的次数</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (String w : D) {\n</div></li><li><div class=\"code-word\">    wordLength = w.length();\n</div></li><li><div class=\"code-word\">    H.add(w, <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  List&lt;Integer&gt; ans = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> start = <span class=\"hljs-number\">0</span>; start &lt; wordLength; start++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 切分点从start开始，相当于我们得到了一个新的数组。</span>\n</div></li><li><div class=\"code-word\">    Counter R = <span class=\"hljs-keyword\">new</span> Counter();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span> left = start - wordLength;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span> equalCount = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 有效的区间是(left, i]</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span> counter = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = start; i + wordLength &lt;= s.length();\n</div></li><li><div class=\"code-word\">            i += wordLength) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 依次取出数组中的单词。</span>\n</div></li><li><div class=\"code-word\">      String tmp = s.substring(i, i + wordLength);\n</div></li><li><div class=\"code-word\">      R.add(tmp, <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (R.get(tmp) == H.get(tmp)) {\n</div></li><li><div class=\"code-word\">        equalCount++;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      counter++;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 如果窗口太小</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (counter &lt; D.length) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 到这里时，窗口的长度已经一样了</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 看一下命中率</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (equalCount == H.size()) {\n</div></li><li><div class=\"code-word\">        ans.add(left + wordLength);\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 移除开头的那个元素</span>\n</div></li><li><div class=\"code-word\">      left += wordLength;\n</div></li><li><div class=\"code-word\">      String rm = s.substring(left, left + wordLength);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (R.get(rm) == H.get(rm)) {\n</div></li><li><div class=\"code-word\">        equalCount--;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      R.add(rm, -<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2326\">\n                      <p data-nodeid=\"2327\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/30.%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2.fix.window.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3341\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/30.%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2.fix.window.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3345\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/30.%E4%B8%B2%E8%81%94%E6%89%80%E6%9C%89%E5%8D%95%E8%AF%8D%E7%9A%84%E5%AD%90%E4%B8%B2.fix.window.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3349\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2328\">\n                      <strong data-nodeid=\"3354\">复杂度分析</strong\n                      >：当单词固定长度为 L 的时候，一共会切分出 L\n                      个数组。每个数组上的单词个数为\n                      N/L，滑动窗口遍历单个数组时间复杂度是O(N/L)，所以最终时间复杂度为\n                      O(N)。空间复杂度由于使用了哈希表，等价于单词的个数。\n                    </p>\n                    <p data-nodeid=\"2329\">\n                      【<strong data-nodeid=\"3360\">小结</strong\n                      >】到这里，我们再总结一下这个题目的考点：\n                    </p>\n                    <p data-nodeid=\"109354\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/2C/03/CioPOWBkhiWAKqnXAACZ5oVzMVw160.png\"\n                        alt=\"Drawing 17.png\"\n                        data-nodeid=\"109357\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2331\">\n                      我们可以发现，在面试中，只要掌握上图中总结的三个知识点，就可以顺利地解决这道面试题。\n                    </p>\n                    <p data-nodeid=\"2332\">接下来我们看一下最短区间问题。</p>\n                    <h3 data-nodeid=\"2333\">最短区间</h3>\n                    <p data-nodeid=\"2334\">\n                      在区间问题中，还有一类区间问题。那就是求最短区间。这类面试题的特点也很明确：\n                    </p>\n                    <ol data-nodeid=\"2335\">\n                      <li data-nodeid=\"2336\">\n                        <p data-nodeid=\"2337\">要求子串必须满足某个条件</p>\n                      </li>\n                      <li data-nodeid=\"2338\">\n                        <p data-nodeid=\"2339\">要求子串的长度越小越好</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2340\">\n                      要特别注意的是，最短区间问题，也<strong data-nodeid=\"3375\"\n                        >必须满足单调性</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"2341\">面试必杀技</h4>\n                    <p data-nodeid=\"2342\">\n                      不过，在真正面试的时候，可没有那么多时间让你慢慢去证明，慢慢去推导。放心，我这里已经给你准备好了最短区间的面试必杀技，关键就两招：\n                    </p>\n                    <ol data-nodeid=\"2343\">\n                      <li data-nodeid=\"2344\">\n                        <p data-nodeid=\"2345\">\n                          <strong data-nodeid=\"3387\">两个指针</strong>，left\n                          指针和 right 指针，这两个指针形成的区间为 (left,\n                          right]，这里的开闭原则是<strong data-nodeid=\"3388\"\n                            >左开右闭；</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2346\">\n                        <p data-nodeid=\"2347\">\n                          <strong data-nodeid=\"3393\">积极原则</strong>，如果把\n                          left\n                          指针当成一个人，那么这个人是非常积极的，他总是主动积极地破坏区间已经满足的条件。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2348\">代码模板如下（解析在注释里）：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">minimalRange</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 子串的左边，采用左开右闭原则(left, i]表示一个子串</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> left = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 记录最短的子串的长度</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> ans = A.length + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 注意 在加入A[i]之前，(left, i-1]可能不满足条件!</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// step 1. 直接将A[i]加到区间中，形成(left, i]</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// step 2. TODO 更新区间的状态</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (区间超出/满足条件) {\n</div></li><li><div class=\"code-word\">      ans = Math.min(ans, i - left);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// step 3. 移除A[++left];</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// step 4. TODO 更新区间的状态</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// assert ! 区间(left, i]到这里肯定不满足条件</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> ans;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2350\">\n                      注意，这里需要与最长区间的代码模板进行对比。两者的差异部分在于里面的\n                      while\n                      循环处理逻辑不同。在最短区间求解时，当满足条件的时候，仍然需要在这个\n                      while 里面进行处理。\n                    </p>\n                    <p data-nodeid=\"2351\">\n                      比如我们仍然以数组 [1, 2, 0, 0, 1, 2, 3] 寻找等于 6\n                      的最短子串为例，如下图所示：\n                    </p>\n                    <p data-nodeid=\"112282\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/2B/FA/Cgp9HWBkhi6AJ0KbAAEVfXDQr3M350.png\"\n                        alt=\"Drawing 18.png\"\n                        data-nodeid=\"112285\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2353\">\n                      当找到一个满足条件的解之后，我们开始不停地查看更短的子串，看看有没有更好的解，并且不停地更新最优解。最终可以得到最优解：长度为\n                      3 的子串 [1, 2, 3]。\n                    </p>\n                    <h4 data-nodeid=\"2354\">例 5：最短子串</h4>\n                    <p data-nodeid=\"2355\">\n                      【<strong data-nodeid=\"3415\">题目</strong>】求 A\n                      字符串中的最短子串，要能够包含 B 字符串中的所有字符。\n                    </p>\n                    <p data-nodeid=\"2356\">输入：A = \"AXCDEFCFCB\", B = \"CBC\"</p>\n                    <p data-nodeid=\"2357\">输出：4</p>\n                    <p data-nodeid=\"2358\">\n                      <strong data-nodeid=\"3437\">解释</strong>：因为 A\n                      字符串有子串 \"CFCB\"，包含了 B 字符串的所有字符\"CBC\"。\n                    </p>\n                    <p data-nodeid=\"2359\">\n                      【<strong data-nodeid=\"3447\">分析</strong\n                      >】不知道你还有没有印象，“<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6698&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"3445\"\n                        >第 09 讲</a\n                      >”中讲解关于二分搜索的练习题 5\n                      时，我们也提到了这道题。不过现在我们要尝试使用复杂度更低的双指针来解决它。首先我们来看题目的特点。\n                    </p>\n                    <ul data-nodeid=\"2360\">\n                      <li data-nodeid=\"2361\">\n                        <p data-nodeid=\"2362\">\n                          最短区间：题目要求一个最短的字符串。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2363\">\n                        <p data-nodeid=\"2364\">\n                          约束条件：这个子串里面包含了 B 字符串的所有字符。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2365\">\n                        <p data-nodeid=\"2366\">\n                          单调性：当区间变长时，包含的字符只会增加。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2367\">\n                      如果用哈希表（也可以用数组）来记录 B\n                      字符串中字符出现的次数，也同样用哈希表来记录 A\n                      的子串中各个字符出现的次数。那么我们还需要面临的一个问题就是如何高效地比较两个哈希是否相等。\n                    </p>\n                    <p data-nodeid=\"2368\">\n                      不过好在例 3\n                      中我们已经学会了这一招，到这里就可以开始着手写代码了。\n                    </p>\n                    <p data-nodeid=\"2369\">\n                      【<strong data-nodeid=\"3458\">代码</strong\n                      >】利用最短区间的代码模板以及判断哈希表相等的思路。我们可以写出代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">String <span class=\"hljs-title\">minWindow</span><span class=\"hljs-params\">(String A, String B)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// A 中包含B中所有字符的最短子串。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 两个字符串的长度。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> alen = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> blen = B == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : B.length();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 统计B字符串里面字符出现的次数</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span>[] bstat = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">256</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// items表示B字符串里面出现的字符的种类。类似于hash.size();</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> items = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; blen; i++) {\n</div></li><li><div class=\"code-word\">    bstat[B.charAt(i)]++;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (bstat[B.charAt(i)] == <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">      items++;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 开始使用最短区间的模板</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> left = -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> ans = alen + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> start = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 用来记录子串里面字符出现的次数</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span>[] astat = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">256</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 用来判断两个哈希表中已经有多少项相等了。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> equal = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; alen; i++) {\n</div></li><li><div class=\"code-word\">    astat[A.charAt(i)]++;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (astat[A.charAt(i)] == bstat[A.charAt(i)]) {\n</div></li><li><div class=\"code-word\">      equal++;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 积极原则，最短区间要主动破坏条件</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (equal &gt;= items) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 更新最优解</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (ans &gt; i - left) {\n</div></li><li><div class=\"code-word\">        start = left + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">        ans = i - left;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 移除最左端的元素，并且更新区间的状态</span>\n</div></li><li><div class=\"code-word\">      ++left;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (astat[A.charAt(left)] == bstat[A.charAt(left)]) {\n</div></li><li><div class=\"code-word\">        equal--;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      astat[A.charAt(left)]--;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> ans &lt;= alen ? \n</div></li><li><div class=\"code-word\">    A.substring(start, start + ans) : <span class=\"hljs-keyword\">new</span> String(<span class=\"hljs-string\">\"\"</span>);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2371\">\n                      <p data-nodeid=\"2372\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3462\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3466\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3470\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2373\">\n                      <strong data-nodeid=\"3475\">复杂度分析</strong>：时间复杂度\n                      O(N)，空间复杂度 O(1)，两个 256\n                      长度的数组，可以认为是常量空间。\n                    </p>\n                    <p data-nodeid=\"2374\">\n                      【<strong data-nodeid=\"3481\">小结</strong\n                      >】到这里，我们可以总结一下这个题目的考点：\n                    </p>\n                    <p data-nodeid=\"115210\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/2B/FA/Cgp9HWBkhjyAbuTpAACpwX81ei4297.png\"\n                        alt=\"Drawing 19.png\"\n                        data-nodeid=\"115213\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"2376\">\n                      如果你能够在面试中清晰地理顺这三个考点，那么写出代码就不成问题了。\n                    </p>\n                    <p data-nodeid=\"2377\">\n                      接下来我们看一个更加简单一点的练习题。\n                    </p>\n                    <p data-nodeid=\"2378\">\n                      <strong data-nodeid=\"3491\">练习题 8</strong\n                      >：给定一个正整数数组\n                      A，求一个最短子串，其和大于等于正整数T。\n                    </p>\n                    <blockquote data-nodeid=\"2379\">\n                      <p data-nodeid=\"2380\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3495\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3499\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/10.DoublePointer/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"3503\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"2381\">总结</h3>\n                    <p data-nodeid=\"2382\">\n                      在这一讲里面我们介绍了三种区间的解法，以及相应的模板，基本上覆盖了绝大部分双指针算法题。我们将这部分知识点做个简单的小结，如下图所示：\n                    </p>\n                    <p data-nodeid=\"118138\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/2C/03/CioPOWBkhkWARgCNAAD_-oFBQLA198.png\"\n                        alt=\"Drawing 20.png\"\n                        data-nodeid=\"118141\"\n                      />\n                    </p>\n\n                    <h3 data-nodeid=\"2384\">思考题</h3>\n                    <p data-nodeid=\"2385\">\n                      这里我给你再留一道思考题：在“<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6698&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"3513\"\n                        >第 09 讲</a\n                      >”中，我们可以利用二分搜索的办法解决一些最长子串、最短子串的题目。其根本原因是什么？练习题\n                      6 不能使用双指针模板，那么二分搜索可以吗？\n                    </p>\n                    <p data-nodeid=\"2386\">\n                      希望你可以把思考写在留言区，我们一起讨论，如果看到有趣的想法，我也会做成加餐和大家分享。：）\n                    </p>\n                    <p data-nodeid=\"2387\">\n                      关于双指针的知识我们就学到这里，并且有相应的代码模板。可是，并不是所有的问题都有模板可以套用的，接下来我们进入没有代码模板的算法类型。11｜贪心：这种思想，没有模板，如何才能掌握它？请和我一起踏上更加奇妙的算法旅程，记得按时来探险。\n                    </p>\n            "}