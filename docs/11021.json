{"title":"第18讲：你是怎么理解“组件”这个概念的？","context":"\n                    <p data-nodeid=\"925\" class=\"\">\n                      不同框架、工具对组件的定义和实现各不相同，但可以用一句话来概括它们对组件的定义：\n                      <strong data-nodeid=\"1030\">组件就是基于视图的模块</strong>\n                      。\n                    </p>\n                    <p data-nodeid=\"926\">\n                      组件的核心任务就是将数据渲染到视图并监听用户在视图上的操作。这一课时，我们以主流的\n                      Vue 2.6 和 React 16.13\n                      的源码为例，讲解较为复杂的数据渲染到视图的实现过程。\n                    </p>\n                    <h3 data-nodeid=\"927\">视图</h3>\n                    <p data-nodeid=\"928\">\n                      虽然 Vue 和 React\n                      在编写组件视图的方式上有所不同，前者采用模板语言，更偏向于\n                      HTML 语法，后者推荐使用语法糖 JSX，更偏向于 JavaScript\n                      语法，但两者都是浏览器所无法直接识别的，所以都需要通过编译器转换成对应的可执行代码。下面来看看它们的实现。\n                    </p>\n                    <h4 data-nodeid=\"929\">Vue</h4>\n                    <p data-nodeid=\"930\">\n                      Vue 的模板编译器可分为 3 步：解析、优化、生成代码。\n                    </p>\n                    <p data-nodeid=\"931\">\n                      <strong data-nodeid=\"1041\">1. 解析</strong>\n                    </p>\n                    <p data-nodeid=\"932\">\n                      解析过程包括\n                      <strong data-nodeid=\"1051\">词法分析</strong> 和\n                      <strong data-nodeid=\"1052\">语法分析</strong>\n                      ，其中词法分析是将字符串转化成令牌。Vue 有 3\n                      个词法分析器，分别是 parseText()、parseFilter() 和\n                      parseHTML()，其中 parseHTML()\n                      用来解析视图模板字符串，词法分析的方式也是通过 while\n                      循环截取视图模板字符串来实现的，下面的代码是截取的部分源码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (html) { \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (!lastTag || !isPlainTextElement(lastTag)) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> textEnd = html.indexOf(<span class=\"hljs-string\">'&lt;'</span>) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (textEnd === <span class=\"hljs-number\">0</span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (comment.test(html)) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> commentEnd = html.indexOf(<span class=\"hljs-string\">'--&gt;'</span>) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (commentEnd &gt;= <span class=\"hljs-number\">0</span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (options.shouldKeepComment) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; options.comment(html.substring(<span class=\"hljs-number\">4</span>, commentEnd), index, index + commentEnd + <span class=\"hljs-number\">3</span>) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; advance(commentEnd + <span class=\"hljs-number\">3</span>) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">continue</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (conditionalComment.test(html)) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (conditionalEnd &gt;= <span class=\"hljs-number\">0</span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; advance(conditionalEnd + <span class=\"hljs-number\">2</span>) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">continue</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">advance</span> (<span class=\"hljs-params\">n</span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; index += n \n</div></li><li><div class=\"code-word\">&nbsp; html = html.substring(n) \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"934\">\n                      编译器在调用 parseHTML() 函数时，还传入了一个回调函数\n                      start()，让 parseHTML() 在进行词法分析时的同时通过调用\n                      start() 函数将令牌传给编译器进行语法分析，最终生成\n                      AST，如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">parseHTML(template, { \n</div></li><li><div class=\"code-word\">&nbsp; start (tag, attrs, unary, start, end) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> ns = (currentParent &amp;&amp; currentParent.ns) || platformGetTagNamespace(tag) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (isIE &amp;&amp; ns === <span class=\"hljs-string\">'svg'</span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; attrs = guardIESVGBug(attrs) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> element: ASTElement = createASTElement(tag, attrs, currentParent) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (ns) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; element.ns = ns \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; preTransforms.length; i++) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; element = preTransforms[i](element, options) || element \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (!inVPre) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; processPre(element) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (element.pre) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; inVPre = <span class=\"hljs-literal\">true</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (platformIsPreTag(element.tag)) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; inPre = <span class=\"hljs-literal\">true</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (inVPre) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; processRawAttrs(element) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!element.processed) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; processFor(element) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; processIf(element) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; processOnce(element) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (!unary) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; currentParent = element \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; stack.push(element) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; closeElement(element) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"936\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/39/02/Ciqc1F8espmAbE4lAAAX5545fVc183.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1056\"\n                      />\n                    </p>\n                    <div data-nodeid=\"937\">\n                      <p style=\"text-align: center\">生成的 AST 结构示例图</p>\n                    </div>\n                    <p data-nodeid=\"938\">\n                      <strong data-nodeid=\"1062\">2. 优化</strong>\n                    </p>\n                    <p data-nodeid=\"939\">\n                      Vue 并没有直接使用生成的\n                      AST，而是进行一个优化操作。优化操作的目的就是将那些不会发生变化的静态\n                      AST 节点进行标记，避免每次更新视图的时候操作它们。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">markStaticRoots</span> (<span class=\"hljs-params\">node: ASTNode, isInFor: <span class=\"hljs-built_in\">boolean</span></span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (node.type === <span class=\"hljs-number\">1</span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (node.static || node.once) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; node.staticInFor = isInFor \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (node.static &amp;&amp; node.children.length &amp;&amp; !( \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; node.children.length === <span class=\"hljs-number\">1</span> &amp;&amp; \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; node.children[<span class=\"hljs-number\">0</span>].type === <span class=\"hljs-number\">3</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; )) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; node.staticRoot = <span class=\"hljs-literal\">true</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; node.staticRoot = <span class=\"hljs-literal\">false</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (node.children) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, l = node.children.length; i &lt; l; i++) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; markStaticRoots(node.children[i], isInFor || !!node.for) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (node.ifConditions) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>, l = node.ifConditions.length; i &lt; l; i++) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; markStaticRoots(node.ifConditions[i].block, isInFor) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"941\">\n                      <strong data-nodeid=\"1069\">3. 生成代码</strong>\n                    </p>\n                    <p data-nodeid=\"942\">\n                      编译的最后一步就是将优化后的 AST\n                      转化成可执行的代码。这个转化的过程就是遍历\n                      AST，然后判断节点类型，按照元素、指令解析成对应可执行的 JS\n                      代码。\n                    </p>\n                    <p data-nodeid=\"943\">\n                      Vue\n                      中的编译根据不同平台有所区别，下面是浏览器端的编译部分代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 视图模板 </span>\n</div></li><li><div class=\"code-word\">&lt;div&nbsp;id=<span class=\"hljs-string\">\"app\"</span>&gt; \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello&nbsp;{{text}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&nbsp;<span class=\"hljs-attr\">v-bind:id</span>=<span class=\"hljs-string\">\"message\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span> \n</div></li><li><div class=\"code-word\">&lt;/div&gt; \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 可执行的 js 代码 </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">\"with(this){return _c('div',{attrs:{\"</span>id<span class=\"hljs-string\">\":\"</span>app<span class=\"hljs-string\">\"}},[_c('h1',[_v(\"</span>Hello <span class=\"hljs-string\">\"+_s(text))]),_v(\"</span> <span class=\"hljs-string\">\"),_c('span',{attrs:{\"</span>id<span class=\"hljs-string\">\":message}})])}\"</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"945\">React</h4>\n                    <p data-nodeid=\"946\">\n                      React 组件视图则使用 JS 的语法糖 jsx 来编写（不用 jsx\n                      也可以编写组件），这种语法糖其实就是混合了 HTML 和 JS\n                      两种语言，浏览器也是无法直接识别的，所以用到了 babel\n                      及其插件 babel-plugin-transform-react-jsx 对 jsx\n                      进行预编译，编译步骤和之前提到的基本一致，这里就不再赘述了。\n                    </p>\n                    <h3 data-nodeid=\"947\">\n                      延伸 1：虚拟 DOM 是用来提升性能的吗？\n                    </h3>\n                    <p data-nodeid=\"948\">\n                      虽然 Vue 和 React\n                      有着种种差异，但在某些地方达成了共识，比如都使用了虚拟 DOM\n                      技术。对于使用过 React 或 Vue 的同学对虚拟 DOM\n                      应该不陌生，其实就是 JavaScript 用来模拟真实 DOM\n                      的数据对象。\n                    </p>\n                    <p data-nodeid=\"949\">DOM 的作用有以下两个。</p>\n                    <ul data-nodeid=\"950\">\n                      <li data-nodeid=\"951\">\n                        <p data-nodeid=\"952\">\n                          <strong data-nodeid=\"1085\">优化性能</strong> 。DOM\n                          操作是比较耗时的，对于大量、频繁的 DOM 操作，如果先在\n                          JavaScript\n                          中模拟进行，然后再通过计算比对，找到真正需要更新的节点，这样就有可能减少不必要的\n                          DOM 操作，从而提升渲染性能。但并不是所有的 DOM\n                          操作都能通过虚拟 DOM\n                          提升性能，比如单次删除某个节点，直接操作 DOM\n                          肯定比虚拟 DOM 计算比对之后再删除要快。总体而言，\n                          <strong data-nodeid=\"1086\"\n                            >虚拟 DOM 提升了 DOM 操作的性能下限，降低了 DOM\n                            操作的性能上限。</strong\n                          >\n                          所以会看到一些对渲染性能要求比较高的场景，比如在线文档、表格编辑，还是会使用原生\n                          DOM 操作。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"953\">\n                        <p data-nodeid=\"954\">\n                          <strong data-nodeid=\"1091\">跨平台</strong> 。由于虚拟\n                          DOM 以 JavaScript\n                          对象为基础，所以可根据不同的运行环境进行代码转换（比如浏览器、服务端、原生应用等），这使得它具有了跨平台的能力。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"955\">数据模型</h3>\n                    <p data-nodeid=\"956\">\n                      虽然组件屏蔽了 DOM\n                      操作，但提供了数据模型作为操作接口。下面来看看 Vue 和\n                      React 组件的另一个要素“数据模型”。\n                    </p>\n                    <h4 data-nodeid=\"957\">Vue</h4>\n                    <p data-nodeid=\"958\">\n                      Vue 组件内部提供了一个值为函数的 data\n                      属性，调用这个函数时会返回一个对象。下面的代码分别在组件声明时将\n                      data 属性定义为函数和对象，当定义为对象时会报错。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 正确 </span>\n</div></li><li><div class=\"code-word\">Vue.component(<span class=\"hljs-string\">'item'</span>, { \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'&lt;p&gt;item:{{name}}&lt;/p&gt;'</span>, \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// data 必须是函数 </span>\n</div></li><li><div class=\"code-word\">&nbsp; data() { \n</div></li><li><div class=\"code-word\">  &nbsp; <span class=\"hljs-keyword\">return</span>&nbsp;{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">Math</span>.random() } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">}) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 报错：The \"data\" option should be a function that returns a per-instance value in component definitions. </span>\n</div></li><li><div class=\"code-word\">Vue.component(<span class=\"hljs-string\">'item'</span>, { \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'&lt;p&gt;item:{{name}}&lt;/p&gt;'</span>, \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-attr\">data</span>: { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">Math</span>.random() \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"960\">\n                      但我们在修改数据模型的时候，data\n                      指代的却是一个对象。那为什么在声明的时候还要通过函数来返回对象呢？\n                    </p>\n                    <p data-nodeid=\"961\">\n                      按照官方的说法，是为了保证“每个实例可以维护一份对返回对象的独立复制”，具体实现就是调用\n                      data() 函数，并将其 this 指向当前组件实例\n                      vm，同时将当前实例作为参数传递给 data()\n                      函数，然后将返回的数据对象存储到组件实例 vm._data\n                      属性中。下面代码是截取的部分源码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">function initData (vm: Component) { \n</div></li><li><div class=\"code-word\">&nbsp; let data = vm.$options.data \n</div></li><li><div class=\"code-word\">&nbsp; data = vm._data = typeof data === 'function' \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; ? getData(data, vm) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; : data || {} \n</div></li><li><div class=\"code-word\">&nbsp; if (!isPlainObject(data)) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; data = {} \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; process.env.NODE_ENV !== 'production' &amp;&amp; warn( \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; 'data functions should return an object:\\n' + \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; vm \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; ) \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"963\">\n                      需要注意的是，有一种例外情况，那就是 Vue 实例中的 data\n                      属性是一个对象，因为 Vue\n                      实例是全局唯一的，所以不需要通过调用函数的方式来创建数据对象副本。\n                    </p>\n                    <h4 data-nodeid=\"964\">React</h4>\n                    <p data-nodeid=\"965\">\n                      虽然通过调用函数的方式确实可以保证每个组件实例拥有自己的数据，但如果\n                      data 改成对象就一定不可以吗？\n                    </p>\n                    <p data-nodeid=\"966\">\n                      答案当然是否定的。在\n                      <a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=180#/detail/pc?id=3178\"\n                        data-nodeid=\"1106\"\n                        >第 07 课时“关于 JavaScript 的数据类型，你知多少</a\n                      >”中实现过一个深拷贝函数，理论上通过深拷贝函数来创建数据对象副本，也是完全可行的。\n                    </p>\n                    <p data-nodeid=\"967\">\n                      React 组件的数据模型 state，其值就是\n                      <strong data-nodeid=\"1113\">对象类型</strong> 。但 React\n                      并没有直接采用深拷贝的方式来实现，因为深拷贝操作性能开销太大。下面的一段代码是创建对象和深拷贝对象的时间开销对比，耗时相差一倍，对于结构更加复杂的对象，这个差异可能会变得更大。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 创建对象 </span>\n</div></li><li><div class=\"code-word\">console.time(<span class=\"hljs-string\">'create'</span>) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> obj = {} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(let i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">100</span>;i++) { \n</div></li><li><div class=\"code-word\">&nbsp; obj[Math.random()] = Math.random() \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\">console.timeEnd(<span class=\"hljs-string\">'create'</span>) <span class=\"hljs-comment\">// create: 0.288818359375ms </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 深拷贝 </span>\n</div></li><li><div class=\"code-word\">console.time(<span class=\"hljs-string\">'clone'</span>) \n</div></li><li><div class=\"code-word\">_.cloneDeep(obj) \n</div></li><li><div class=\"code-word\">console.timeEnd(<span class=\"hljs-string\">'clone'</span>) <span class=\"hljs-comment\">// clone: 0.637939453125ms</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"969\">\n                      React 组件是通过将 state\n                      设置为不可变对象的方式来实现的，不可变对象指的就是当一个变量被创建后，它的值不可以被修改。这也就意味着当组件状态发生变化时，不修改\n                      state 属性，而是重新创建新的 state 状态对象。\n                    </p>\n                    <p data-nodeid=\"970\">\n                      React 中的不可变对象通过 Structural\n                      Sharing（结构共享）的操作，大大减少了性能开销。这种操作的原理就是，如果对象中的一个属性发生变化，那么只深拷贝当前属性，然后将对象属性指向这个深拷贝的属性，其他节点仍然进行共享。\n                    </p>\n                    <p data-nodeid=\"971\">\n                      下面的示例代码，验证了 React 组件的状态对象 state\n                      的不可变性。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span>&nbsp;o&nbsp;=&nbsp;{<span class=\"hljs-attr\">val</span>:&nbsp;<span class=\"hljs-number\">0</span>} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span>&nbsp;b&nbsp;=&nbsp;{<span class=\"hljs-attr\">val</span>:&nbsp;<span class=\"hljs-number\">0</span>} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>&nbsp;<span class=\"hljs-title\">Child</span>&nbsp;<span class=\"hljs-keyword\">extends</span>&nbsp;<span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span>&nbsp;</span>{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">constructor</span>()&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">super</span>() \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">this</span>.state&nbsp;=&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;click(p)&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">this</span>.setState({ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[p]:&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-attr\">val</span>:&nbsp;<span class=\"hljs-built_in\">this</span>.state[p].val+<span class=\"hljs-number\">1</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;<span class=\"hljs-function\">()&nbsp;=&gt;</span>&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'o:'</span>,&nbsp;<span class=\"hljs-built_in\">this</span>.state.o&nbsp;===&nbsp;o) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'b:'</span>,&nbsp;<span class=\"hljs-built_in\">this</span>.state.b&nbsp;===&nbsp;b) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;}) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;render()&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;( \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span> \n</span></div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&nbsp;<span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.click.bind(this,</span>&nbsp;'<span class=\"hljs-attr\">o</span>')}&gt;</span>按钮o<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&nbsp;<span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.click.bind(this,</span>&nbsp;'<span class=\"hljs-attr\">b</span>')}&gt;</span>按钮b<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>o.val:&nbsp;{this.state.o.val}&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>b.val:&nbsp;{this.state.b.val}&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>&nbsp;<span class=\"hljs-title\">App</span>&nbsp;<span class=\"hljs-keyword\">extends</span>&nbsp;<span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span>&nbsp;</span>{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;render()&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;( \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span> \n</span></div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span>/&gt;</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">window</span>.onload&nbsp;=&nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;(<span class=\"hljs-params\"></span>)&nbsp;</span>{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;ReactDOM.render(&nbsp;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>&nbsp;,&nbsp;<span class=\"hljs-built_in\">window</span>.app) \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"973\">\n                      创建两个值为对象的变量 o 和 b，在 Child\n                      组件的构造函数中赋值给 state，Child\n                      组件中有两个按钮，分别用来修改 state.o 属性和 state.b\n                      属性。如果只点击“按钮o”，通过控制台输出结果可以观察到，state.o\n                      进行了深拷贝之后发生了改变，所以不等于对象 o，而 state.b\n                      没有改变，仍然等于对象 b。\n                    </p>\n                    <h3 data-nodeid=\"974\">渲染</h3>\n                    <p data-nodeid=\"975\">\n                      当数据发生变化时，如何修改视图呢？Vue 和 React\n                      采取了两种不同的策略。\n                    </p>\n                    <h4 data-nodeid=\"976\">Vue</h4>\n                    <p data-nodeid=\"977\">\n                      Vue 采取的是响应式的视图更新方式，基于\n                      Object.defineProperty()\n                      函数，监听数据对象属性的变化，然后再更新到视图。下面深入分析它的实现细节。\n                    </p>\n                    <p data-nodeid=\"978\">\n                      Vue 在组件初始化的时候会将 data() 函数返回的数据对象传入\n                      observe() 函数，在这个函数中会将数据对象作为参数来创建一个\n                      Observer 实例，在这个实例的构造函数中将会通过\n                      Object.defineProperty 为数据对象的每个属性设置监听。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Observer { \n</div></li><li><div class=\"code-word\">&nbsp; value: <span class=\"hljs-built_in\">any</span>; \n</div></li><li><div class=\"code-word\">&nbsp; dep: Dep; \n</div></li><li><div class=\"code-word\">&nbsp; vmCount: <span class=\"hljs-built_in\">number</span>; \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">constructor</span> (<span class=\"hljs-params\">value: <span class=\"hljs-built_in\">any</span></span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.value = value \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.dep = <span class=\"hljs-keyword\">new</span> Dep() \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.vmCount = <span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; def(value, <span class=\"hljs-string\">'__ob__'</span>, <span class=\"hljs-built_in\">this</span>) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(value)) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (hasProto) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; protoAugment(value, arrayMethods) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; copyAugment(value, arrayMethods, arrayKeys) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.observeArray(value) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.walk(value) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; walk (obj: <span class=\"hljs-built_in\">Object</span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> keys = <span class=\"hljs-built_in\">Object</span>.keys(obj) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; keys.length; i++) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; defineReactive(obj, keys[i]) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; observeArray (items: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">any</span>&gt;) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, l = items.length; i &lt; l; i++) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; observe(items[i]) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"980\">\n                      当监听到数据变化时，该进行什么操作呢？这里我们查看\n                      defineReactive()\n                      的源码可以看到，除了为数据对象设置值之外，还会调用一个\n                      dep.notify() 函数。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reactiveSetter</span>(<span class=\"hljs-params\">newVal</span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">const</span> value = getter ? getter.call(obj) : val \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span> &amp;&amp; customSetter) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; customSetter() \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (getter &amp;&amp; !setter) <span class=\"hljs-keyword\">return</span> \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (setter) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; setter.call(obj, newVal) \n</div></li><li><div class=\"code-word\">&nbsp; } <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; val = newVal \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; childOb = !shallow &amp;&amp; observe(newVal) \n</div></li><li><div class=\"code-word\">&nbsp; dep.notify() \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"982\">\n                      这里的 dep 是在建立监听的时候创建的 Dep\n                      实例，它相当于一个事件代理，内部有一个 subs\n                      队列属性，用来存储依赖它的 Watcher 实例。当调用\n                      dep.notify() 函数时，会遍历内部的 Watcher\n                      队列，分别调用它们的 update() 函数。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> Dep { \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">static</span> target: ?Watcher; \n</div></li><li><div class=\"code-word\">&nbsp; id: <span class=\"hljs-built_in\">number</span>; \n</div></li><li><div class=\"code-word\">&nbsp; subs: <span class=\"hljs-built_in\">Array</span>&lt;Watcher&gt;; \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">constructor</span> (<span class=\"hljs-params\"></span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.id = uid++ \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.subs = [] \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; addSub (sub: Watcher) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.subs.push(sub) \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; removeSub (sub: Watcher) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; remove(<span class=\"hljs-built_in\">this</span>.subs, sub) \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; depend () { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (Dep.target) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; Dep.target.addDep(<span class=\"hljs-built_in\">this</span>) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; notify () { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> subs = <span class=\"hljs-built_in\">this</span>.subs.slice() \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span> &amp;&amp; !config.async) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; subs.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a.id - b.id) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, l = subs.length; i &lt; l; i++) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; subs[i].update() \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1155\" class=\"\">\n                      Watcher\n                      实例会在挂载组件的时候被创建，主要功能是一方面将自身添加到\n                      Dep 实例的 subs\n                      数组属性中；另一方面在收到更新通知后更新视图。值得注意的是，这个更新操作是延迟执行的，每次有新的数据变更要放入队列时都会进行判断，如果已存在则跳过，等所有变更都添加到队列后再进行统一更新操作。这么做的好处是如果同一个\n                      watcher\n                      被多次触发，只会被推入到队列中一次，从而避免了同一时刻重复操作\n                      DOM 导致性能损耗。\n                    </p>\n\n                    <p data-nodeid=\"985\">\n                      具体实现是通过调用 queueWatcher() 函数，将当前 Watcher\n                      实例放入到一个队列中进行缓冲。queueWatcher()\n                      函数的源码如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">queueWatcher</span> (<span class=\"hljs-params\">watcher: Watcher</span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">const</span> id = watcher.id \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (has[id] == <span class=\"hljs-literal\">null</span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; has[id] = <span class=\"hljs-literal\">true</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (!flushing) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; queue.push(watcher) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// if already flushing, splice the watcher based on its id </span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">// if already past its id, it will be run next immediately. </span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> i = queue.length - <span class=\"hljs-number\">1</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; i-- \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; queue.splice(i + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, watcher) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-comment\">// queue the flush </span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (!waiting) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; waiting = <span class=\"hljs-literal\">true</span> \n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span> &amp;&amp; !config.async) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; flushSchedulerQueue() \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; nextTick(flushSchedulerQueue) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"987\">\n                      在上面的代码中，flushSchedulerQueue 函数负责遍历队列并调用\n                      watcher.run()\n                      函数进行视图更新相关操作，实现异步队列的关键在于\n                      nextTick() 函数，在调用该函数时，会将回调函数\n                      flushSchedulerQueue() 放入一个 callbacks\n                      数组中，然后执行一个 timerFunc()\n                      函数，该函数会根据不同的运行环境选择可行的延迟执行方式，比如在现代浏览器中会优先使用\n                      Promise.resolve().then，而在老版本的浏览器中会使用\n                      setTimeout。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">Promise</span> !== <span class=\"hljs-string\">'undefined'</span> &amp;&amp; isNative(<span class=\"hljs-built_in\">Promise</span>)) { \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-built_in\">Promise</span>.resolve() \n</div></li><li><div class=\"code-word\">&nbsp; timerFunc = <span class=\"hljs-function\">() =&gt;</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; p.then(flushCallbacks) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (isIOS) <span class=\"hljs-built_in\">setTimeout</span>(noop) \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; isUsingMicroTask = <span class=\"hljs-literal\">true</span> \n</div></li><li><div class=\"code-word\">} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!isIE &amp;&amp; <span class=\"hljs-keyword\">typeof</span> MutationObserver !== <span class=\"hljs-string\">'undefined'</span> &amp;&amp; ( \n</div></li><li><div class=\"code-word\">&nbsp; isNative(MutationObserver) || \n</div></li><li><div class=\"code-word\">&nbsp; MutationObserver.toString() === <span class=\"hljs-string\">'[object MutationObserverConstructor]'</span> \n</div></li><li><div class=\"code-word\">)) { \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">let</span> counter = <span class=\"hljs-number\">1</span> \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">const</span> observer = <span class=\"hljs-keyword\">new</span> MutationObserver(flushCallbacks) \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">const</span> textNode = <span class=\"hljs-built_in\">document</span>.createTextNode(<span class=\"hljs-built_in\">String</span>(counter)) \n</div></li><li><div class=\"code-word\">&nbsp; observer.observe(textNode, { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; characterData: <span class=\"hljs-literal\">true</span> \n</div></li><li><div class=\"code-word\">&nbsp; }) \n</div></li><li><div class=\"code-word\">&nbsp; timerFunc = <span class=\"hljs-function\">() =&gt;</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; counter = (counter + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">2</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; textNode.data = <span class=\"hljs-built_in\">String</span>(counter) \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; isUsingMicroTask = <span class=\"hljs-literal\">true</span> \n</div></li><li><div class=\"code-word\">} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> setImmediate !== <span class=\"hljs-string\">'undefined'</span> &amp;&amp; isNative(setImmediate)) { \n</div></li><li><div class=\"code-word\">&nbsp; timerFunc = <span class=\"hljs-function\">() =&gt;</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; setImmediate(flushCallbacks) \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">} <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">&nbsp; timerFunc = <span class=\"hljs-function\">() =&gt;</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">setTimeout</span>(flushCallbacks, <span class=\"hljs-number\">0</span>) \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"989\">\n                      虽然功能实现了，但 Object.defineProperty()\n                      这个函数本身还存在一个缺陷，就是当属性值为对象类型的时候，无法监听对象内部的数据变化。像下面的代码，监听对象属性\n                      obj 和数组属性 array 都会失败。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>} \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">var</span> array = [] \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">Object</span>.defineProperty(o, <span class=\"hljs-string\">'obj'</span>, { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>, \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>, \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> obj \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }, \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'set object'</span>) <span class=\"hljs-comment\">// 不会执行 </span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; obj = val \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; }) \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">Object</span>.defineProperty(o, <span class=\"hljs-string\">'array'</span>, { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>, \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>, \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> array \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }, \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'set array'</span>) <span class=\"hljs-comment\">// 不会执行 </span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; array = val \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; }) \n</div></li><li><div class=\"code-word\">})() \n</div></li><li><div class=\"code-word\">o.obj.id = <span class=\"hljs-number\">2</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(o.obj); <span class=\"hljs-comment\">// {id: 2} </span>\n</div></li><li><div class=\"code-word\">o.array.push(<span class=\"hljs-number\">1</span>) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(o.array); <span class=\"hljs-comment\">// [1]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"991\">\n                      为了解决这个问题，Vue\n                      分别采取了两个措施。对于对象属性，遍历对象属性逐层进行监听，下面是组件初始化断点调试的截图，从图中可看出，在组件初始化的时候分别对对象\n                      data 的 o 属性和对象 o 的 name 属性进行了监听。\n                    </p>\n                    <p data-nodeid=\"992\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/39/0D/CgqCHl8esvyAfqbBAABHCUKHL3U110.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1132\"\n                      />\n                    </p>\n                    <p data-nodeid=\"993\">\n                      同时监听了对象 data 的 o 属性和对象 data.o 的 name 属性\n                    </p>\n                    <p data-nodeid=\"994\">\n                      对于数组属性，修改了会引起数组变化的 7 个函数，包括：\n                    </p>\n                    <ul data-nodeid=\"995\">\n                      <li data-nodeid=\"996\">\n                        <p data-nodeid=\"997\">push()</p>\n                      </li>\n                      <li data-nodeid=\"998\">\n                        <p data-nodeid=\"999\">pop()</p>\n                      </li>\n                      <li data-nodeid=\"1000\">\n                        <p data-nodeid=\"1001\">shift()</p>\n                      </li>\n                      <li data-nodeid=\"1002\">\n                        <p data-nodeid=\"1003\">unshift()</p>\n                      </li>\n                      <li data-nodeid=\"1004\">\n                        <p data-nodeid=\"1005\">splice()</p>\n                      </li>\n                      <li data-nodeid=\"1006\">\n                        <p data-nodeid=\"1007\">sort()</p>\n                      </li>\n                      <li data-nodeid=\"1008\">\n                        <p data-nodeid=\"1009\">reverse()</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1010\">\n                      具体实现包括两步，第一步是根据 Array.prototype\n                      创建一个新的原型对象 arrayMethods，通过\n                      Object.defineProperty() 函数对 arrayMethods 对象的上述 7\n                      个函数进行劫持和修改，当调用这些方法时发送消息告知视图需要更新，下面是相关源码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> arrayProto = <span class=\"hljs-built_in\">Array</span>.prototype \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> arrayMethods = <span class=\"hljs-built_in\">Object</span>.create(arrayProto) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> methodsToPatch = [ \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-string\">'push'</span>, \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-string\">'pop'</span>, \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-string\">'shift'</span>, \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-string\">'unshift'</span>, \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-string\">'splice'</span>, \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-string\">'sort'</span>, \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-string\">'reverse'</span> \n</div></li><li><div class=\"code-word\">] \n</div></li><li><div class=\"code-word\">methodsToPatch.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">method</span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">const</span> original = arrayProto[method] \n</div></li><li><div class=\"code-word\">&nbsp; def(arrayMethods, method, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mutator</span> (<span class=\"hljs-params\">...args</span>) </span>{ \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> result = original.apply(<span class=\"hljs-built_in\">this</span>, args) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> ob = <span class=\"hljs-built_in\">this</span>.__ob__ \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">let</span> inserted \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">switch</span> (method) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'push'</span>: \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'unshift'</span>: \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; inserted = args \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">break</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'splice'</span>: \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; inserted = args.slice(<span class=\"hljs-number\">2</span>) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">break</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (inserted) ob.observeArray(inserted) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; ob.dep.notify() \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> result \n</div></li><li><div class=\"code-word\">&nbsp; }) \n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1012\">\n                      第二步就是当遇到值为数组类型的属性时，将它的原型指向\n                      arrayMethods 对象。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Observer { \n</div></li><li><div class=\"code-word\">&nbsp; value: <span class=\"hljs-built_in\">any</span>; \n</div></li><li><div class=\"code-word\">&nbsp; dep: Dep; \n</div></li><li><div class=\"code-word\">&nbsp; vmCount: <span class=\"hljs-built_in\">number</span>; \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">constructor</span> (<span class=\"hljs-params\">value: <span class=\"hljs-built_in\">any</span></span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.value = value \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.dep = <span class=\"hljs-keyword\">new</span> Dep() \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.vmCount = <span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; def(value, <span class=\"hljs-string\">'__ob__'</span>, <span class=\"hljs-built_in\">this</span>) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(value)) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (hasProto) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; protoAugment(value, arrayMethods) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; copyAugment(value, arrayMethods, arrayKeys) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.observeArray(value) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">this</span>.walk(value) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; walk (obj: <span class=\"hljs-built_in\">Object</span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">const</span> keys = <span class=\"hljs-built_in\">Object</span>.keys(obj) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; keys.length; i++) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; defineReactive(obj, keys[i]) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; observeArray (items: <span class=\"hljs-built_in\">Array</span>&lt;<span class=\"hljs-built_in\">any</span>&gt;) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, l = items.length; i &lt; l; i++) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; observe(items[i]) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1014\">\n                      当然 Vue 3 中使用 Proxy 能更好地解决这个问题，Proxy\n                      可以直接监听整个数据对象而不再需要分别监听每个属性，同时还提供了更多的\n                      API 函数，只是在兼容性方面不如 Object.defineProperty()\n                      函数。\n                    </p>\n                    <h4 data-nodeid=\"1015\">React</h4>\n                    <p data-nodeid=\"1016\">\n                      React 组件中的视图更新，并不是像 Vue\n                      中那样自动响应的，而是需要手动调用 setState() 函数来触发。\n                    </p>\n                    <p data-nodeid=\"1017\">\n                      React\n                      为了提升组件更新时的性能，不仅将状态更新包装成任务放入了异步队列，而且还使用了类似协程的方式来调度这些队列中的更新任务。任务的执行顺序会根据每个任务的优先级来进行调整，并且任务的执行过程中可能会被中断，但状态会被保存，直到合适的时候会再次读取状态并继续执行任务。整个实现过程相当复杂，由于篇幅所限，不对其原理展开分析了，有兴趣的同学可自行查阅相关资料学习。\n                    </p>\n                    <p data-nodeid=\"1018\">\n                      对于组件的开发者而言，这种调度机制的具体表现就是：在组件内部调用\n                      setState() 来修改状态时将异步更新视图，而在原生 DOM\n                      事件或异步操作中（比如\n                      setTimeout、setInterval、Promise）则是同步更新视图。\n                    </p>\n                    <h3 data-nodeid=\"1019\">总结</h3>\n                    <p data-nodeid=\"1020\">\n                      这一课时我们讲解了主流视图库 Vue 和 React 的组件实现机制。\n                    </p>\n                    <p data-nodeid=\"1021\">\n                      两种框架用了不同的方式来描述组件视图，Vue 采用风格偏向\n                      HTML 的模板语言，React 则采用了风格偏向 JavaScript 的 JSX\n                      语法糖，虽然两者风格迥异，但都必须通过编译器进行编译之后才能在浏览器端执行。\n                    </p>\n                    <p data-nodeid=\"1022\">\n                      在组件的数据定义上，两者也有明显的区别。Vue\n                      通过函数来创建并返回数据对象，React\n                      组件的状态对象则具有不可变性。这两种方式都保证了不同组件实例拥有独立的数据（状态）对象。\n                    </p>\n                    <p data-nodeid=\"1023\">\n                      在渲染机制上，Vue\n                      通过监听数据对象属性实现响应式的数据绑定，通过建立异步更新队列来提升性能。React\n                      则需要手动调用 setState()\n                      函数才能触发更新，同时建立了异步任务队列来提升性能。通过类似协程的方式来调度这些任务。\n                    </p>\n                    <p data-nodeid=\"1024\" class=\"\">\n                      最后布置一道思考题：你还知道哪些数据绑定的实现方式？\n                    </p>\n            "}