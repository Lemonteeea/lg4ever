{"title":"30 | 模板方法模式：如何实现同一模板框架下的算法扩展？","context":"\n                    <p data-nodeid=\"1102\">\n                      今天我们继续来学习一个新的行为型设计模式：模板方法模式。模板方法模式的原理和代码实现都比较简单，在软件开发中也被广泛应用，但是因为使用继承机制，副作用往往盖过了主要作用，所以在使用时尤其要小心谨慎。不过，通过今天的学习，相信你能够把握好这个度。\n                    </p>\n                    <p data-nodeid=\"1103\">话不多说，让我们开始今天的学习吧。</p>\n                    <h3 data-nodeid=\"1104\">模式原理分析</h3>\n                    <p data-nodeid=\"1105\">\n                      模板方法模式原始定义是：在操作中定义算法的框架，将一些步骤推迟到子类中。模板方法让子类在不改变算法结构的情况下重新定义算法的某些步骤。\n                    </p>\n                    <p data-nodeid=\"1106\">\n                      从这个定义中，我们能看出模板方法模式的定位很清楚，就是<strong\n                        data-nodeid=\"1185\"\n                        >为了解决算法框架这类特定的问题</strong\n                      >，同时明确表示<strong data-nodeid=\"1186\"\n                        >需要使用继承的结构</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2167\">\n                      我们来看一下模板方法模式的 UML 图：\n                    </p>\n                    <p data-nodeid=\"2535\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/47/FE/CioPOWDS6AKAGr16AAA-DoP_sPQ666.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"2538\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"1109\">\n                      在这个 UML 图中，模板方法模式包含的关键角色有两个。\n                    </p>\n                    <ul data-nodeid=\"1110\">\n                      <li data-nodeid=\"1111\">\n                        <p data-nodeid=\"1112\">\n                          <strong data-nodeid=\"1194\">抽象父类</strong\n                          >：定义一个算法所包含的所有步骤，并提供一些通用的方法逻辑。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1113\">\n                        <p data-nodeid=\"1114\">\n                          <strong data-nodeid=\"1199\">具体子类</strong\n                          >：继承自抽象父类，根据需要重写父类提供的算法步骤中的某些步骤。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1115\">\n                      接下来，我们再来看看 UML 对应的代码实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AbstractClassTemplate</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">step1</span><span class=\"hljs-params\">(String key)</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//dosomthing</span>\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"=== 在模板类里 执行步骤 1\"</span>);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (step2(key)) {\n</div></li><li><div class=\"code-word\">            step3();\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            step4();\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        step5();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">step2</span><span class=\"hljs-params\">(String key)</span></span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"=== 在模板类里 执行步骤 2\"</span>);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">\"x\"</span>.equals(key)) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">step3</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">step4</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">step5</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"=== 在模板类里 执行步骤 5\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(String key)</span></span>{\n</div></li><li><div class=\"code-word\">        step1(key);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConcreteClassA</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractClassTemplate</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">step3</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"===在子类 A 中 执行：步骤3\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">step4</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"===在子类 A 中 执行：步骤4\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConcreteClassB</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractClassTemplate</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">step3</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"===在子类 B 中 执行：步骤3\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">step4</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"===在子类 B 中 执行：步骤4\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">        AbstractClassTemplate concreteClassA = <span class=\"hljs-keyword\">new</span> ConcreteClassA();\n</div></li><li><div class=\"code-word\">        concreteClassA.run(<span class=\"hljs-string\">\"\"</span>);\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"===========\"</span>);\n</div></li><li><div class=\"code-word\">        AbstractClassTemplate concreteClassB = <span class=\"hljs-keyword\">new</span> ConcreteClassB();\n</div></li><li><div class=\"code-word\">        concreteClassB.run(<span class=\"hljs-string\">\"x\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//输出结果：</span>\n</div></li><li><div class=\"code-word\">=== 在模板类里 执行步骤 <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">=== 在模板类里 执行步骤 <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\">===在子类 A 中 执行：步骤<span class=\"hljs-number\">4</span>\n</div></li><li><div class=\"code-word\">=== 在模板类里 执行步骤 <span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\">===========\n</div></li><li><div class=\"code-word\">=== 在模板类里 执行步骤 <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">=== 在模板类里 执行步骤 <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\">===在子类 B 中 执行：步骤<span class=\"hljs-number\">3</span>\n</div></li><li><div class=\"code-word\">=== 在模板类里 执行步骤 <span class=\"hljs-number\">5</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1117\">\n                      这段代码实现还是比较简单的，从最后测试输出的结果看，父类实现了完整的步骤\n                      1 到 5，不同的子类实现各自的优化步骤 3 或步骤\n                      4，这里我们在步骤 2 的时候，简单根据输入来判断选择使用步骤\n                      3 还是步骤 4。\n                    </p>\n                    <p data-nodeid=\"1118\">\n                      总之，模板方法模式的实现原理很简单，就是<strong\n                        data-nodeid=\"1207\"\n                        >一个父类下面的子类通过继承父类而使用通用的逻辑，同时根据各自需要优化其中某些步骤</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1119\">为什么使用模板方法模式？</h3>\n                    <p data-nodeid=\"1120\">使用模板方法模式的原因主要有两个。</p>\n                    <p data-nodeid=\"2895\" class=\"\">\n                      <strong data-nodeid=\"2900\"\n                        >第一个，期望在一个通用的算法或流程框架下进行自定义开发。</strong\n                      >\n                      比如，在使用 Jenkins\n                      的持续集成发布系统中，可以定制一个固定的 Jenkins Job\n                      任务，将打包、发布、部署的流程作为一个通用的流程。对于不同的系统来说，只需要根据自身的需求增加步骤或删除步骤，就能轻松定制自己的持续发布流程。\n                    </p>\n\n                    <p data-nodeid=\"1122\">\n                      <strong data-nodeid=\"1218\"\n                        >第二个，避免同样的代码逻辑进行重复编码</strong\n                      >。比如，当调用 HTTP 接口时，我们会使用 HttpClient、OkHttp\n                      等工具类进行二次开发，不过我们经常会遇见这样的情况，明明有人已经封装过同样的功能，但还是忍不住想要对这些工具类进行二次封装开发，实际上最终实现的功能都只是调用\n                      HTTP\n                      接口，这样“重复造轮子”会非常浪费开发时间。这时如果使用模板方法模式定义个统一的调用\n                      HTTP 接口的逻辑，就能很好地避免重复编码。\n                    </p>\n                    <h3 data-nodeid=\"1123\">使用场景分析</h3>\n                    <p data-nodeid=\"1124\">模板方法模式的使用场景一般有：</p>\n                    <ul data-nodeid=\"1125\">\n                      <li data-nodeid=\"1126\">\n                        <p data-nodeid=\"1127\">\n                          多个类有相同的方法并且逻辑可以共用时；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1128\">\n                        <p data-nodeid=\"1129\">\n                          将通用的算法或固定流程设计为模板，在每一个具体的子类中再继续优化算法步骤或流程步骤时；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1130\">\n                        <p data-nodeid=\"1131\">\n                          重构超长代码时，发现某一个经常使用的公有方法。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1132\">\n                      为了帮助你更好地理解模板方法模式的使用场景，这里我们还是通过一个具体的示例来讲解。假设我们正在设计一个简单的持续集成发布系统——研发部开发的代码放在\n                      GitLab\n                      上，并使用一个固定的发布流程来进行程序的上线发布，我们打算使用模板方法模式来定义一系列规范的流程。\n                    </p>\n                    <p data-nodeid=\"1133\">\n                      首先，我们定义一个通用的流程框架类\n                      DeployFlow，定义的步骤有六步，分别是：从 GitLab\n                      上拉取代码、编译打包、部署测试环境、测试、上传包到线上环境、启动程序。其中，从\n                      GitLab\n                      上拉取代码、编译打包、部署测试环境和测试这四个步骤，需要子类来进行实现，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DeployFlow</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//使用final关键字来约束步骤不能轻易修改</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">buildFlow</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        pullCodeFromGitlab(); <span class=\"hljs-comment\">//从GitLab上拉取代码</span>\n</div></li><li><div class=\"code-word\">        compileAndPackage();  <span class=\"hljs-comment\">//编译打包</span>\n</div></li><li><div class=\"code-word\">        copyToTestServer();   <span class=\"hljs-comment\">//部署测试环境</span>\n</div></li><li><div class=\"code-word\">        testing();            <span class=\"hljs-comment\">//测试</span>\n</div></li><li><div class=\"code-word\">        copyToRemoteServer(); <span class=\"hljs-comment\">//上传包到线上环境</span>\n</div></li><li><div class=\"code-word\">        startApp();           <span class=\"hljs-comment\">//启动程序</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">pullCodeFromGitlab</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">compileAndPackage</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">copyToTestServer</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testing</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">copyToRemoteServer</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"统一自动上传 启动App包到对应线上服务器\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">startApp</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"统一自动 启动线上App\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1135\">\n                      我们分别实现两个子类：①实现本地的打包编译和上传；②实现全自动化的持续集成式的发布。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LocalDeployFlow</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">DeployFlow</span></span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">pullCodeFromGitlab</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"手动将代码拉取到本地电脑......\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">compileAndPackage</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"在本地电脑上手动执行编译打包......\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">copyToTestServer</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"手动通过 SSH 上传包到本地的测试服务......\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testing</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"执行手工测试......\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CicdDeployFlow</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">DeployFlow</span></span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">pullCodeFromGitlab</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"持续集成服务器将代码拉取到节点服务器上......\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">compileAndPackage</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"自动进行编译&amp;打包......\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">copyToTestServer</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"自动将包拷贝到测试环境服务器......\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testing</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"执行自动化测试......\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1137\">\n                      我们再来运行一个单元测试，测试一下本地发布 LocalDeployFlow\n                      和持续集成发布 CicdDeployFlow。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Client</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"开始本地手动发布流程======\"</span>);\n</div></li><li><div class=\"code-word\">        DeployFlow localDeployFlow = <span class=\"hljs-keyword\">new</span> LocalDeployFlow();\n</div></li><li><div class=\"code-word\">        localDeployFlow.buildFlow();\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"********************\"</span>);\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"开始 CICD 发布流程======\"</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">        DeployFlow cicdDeployFlow = <span class=\"hljs-keyword\">new</span> CicdDeployFlow();\n</div></li><li><div class=\"code-word\">        cicdDeployFlow.buildFlow();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//输出结果</span>\n</div></li><li><div class=\"code-word\">开始本地 手动发布流程======\n</div></li><li><div class=\"code-word\">手动将代码拉取到本地电脑......\n</div></li><li><div class=\"code-word\">在本地电脑上手动执行 编译打包......\n</div></li><li><div class=\"code-word\">手动通过 SSH 上传包 到 本地的测试服务......\n</div></li><li><div class=\"code-word\">执行手工测试......\n</div></li><li><div class=\"code-word\">统一自动上传 启动App包到对应线上服务器\n</div></li><li><div class=\"code-word\">统一自动 启动线上App\n</div></li><li><div class=\"code-word\">********************\n</div></li><li><div class=\"code-word\">开始 CICD 发布流程======\n</div></li><li><div class=\"code-word\">持续集成服务器将代码拉取到节点服务器上......\n</div></li><li><div class=\"code-word\">自动进行编译&amp;打包......\n</div></li><li><div class=\"code-word\">自动将包拷贝到测试环境服务器......\n</div></li><li><div class=\"code-word\">执行 自动化 测试......\n</div></li><li><div class=\"code-word\">统一自动上传 启动App包到对应线上服务器\n</div></li><li><div class=\"code-word\">统一自动 启动线上App\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1139\">\n                      虽然例子比较简单，但是充分展示了模板方法模式的使用方法，也就是需要设置一个父类用于定义整个的算法或流程框架，然后让各自的子类去优化不同的算法步骤细节。\n                    </p>\n                    <p data-nodeid=\"1140\">\n                      从上面场景的分析中，我们能看出，模板方法模式应用场景的最大特征在于，<strong\n                        data-nodeid=\"1238\"\n                        >通常是对算法的特定步骤进行优化，而不是对整个算法进行修改</strong\n                      >。一旦整体的算法框架被定义完成，子类便无法进行直接修改，因为<strong\n                        data-nodeid=\"1239\"\n                        >子类的使用场景直接受到了父类场景的影响</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1141\">收益什么？损失什么？</h3>\n                    <p data-nodeid=\"1142\">\n                      通过上面的分析，我们可以得出使用模板方法模式主要有以下两个优点。\n                    </p>\n                    <ul data-nodeid=\"3633\">\n                      <li data-nodeid=\"3634\">\n                        <p data-nodeid=\"3635\" class=\"\">\n                          <strong data-nodeid=\"3642\">有效去除重复代码。</strong>\n                          模板方法模式的父类保存通用的代码逻辑，这样可以让子类不再需要重复处理公用逻辑，只用关注特定的逻辑，从而起到去除子类中重复代码的目的。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3636\">\n                        <p data-nodeid=\"3637\">\n                          <strong data-nodeid=\"3647\"\n                            >有助于找到更通用的模板。</strong\n                          >\n                          由于子类间重复的代码逻辑都会被抽取到父类中，父类也就慢慢变成了更通用的模板，这样有助于积累更多通用的模板，提升代码复用性和扩展性。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"1148\">当然，模板方法模式也有一些缺点。</p>\n                    <ul data-nodeid=\"4781\">\n                      <li data-nodeid=\"4782\">\n                        <p data-nodeid=\"4783\">\n                          <strong data-nodeid=\"4793\">不符合开闭原则。</strong>\n                          一个父类调用子类实现操作，通过子类扩展增加新的行为，但是子类执行的结果便会受到父类的影响，不符合开闭原则的“对修改关闭”。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4784\">\n                        <p data-nodeid=\"4785\">\n                          <strong data-nodeid=\"4798\"\n                            >增加代码阅读的难度。</strong\n                          >\n                          由于父类的某些步骤或方法被延迟到子类执行，那么需要跳转不同的子类阅读代码逻辑，如果子类的数量很多的话，跳转会很多，不方便联系上下文逻辑线索。而且模板方法中的步骤越多，其维护工作就可能会越困难。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4786\">\n                        <p data-nodeid=\"4787\" class=\"te-preview-highlight\">\n                          <strong data-nodeid=\"4803\">违反里氏替换原则。</strong>\n                          虽然模板方法模式中的父类会提供通用的实现方法，但是延迟到子类的操作便会变成某种定制化的操作，一旦替换子类，可能会导致父类不可用或整体逻辑发生变化。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"4788\">总结</h3>\n\n                    <p data-nodeid=\"1157\">\n                      从上面的分析中，我们能看出，模板方法模式封装了三个变化：\n                    </p>\n                    <ul data-nodeid=\"1158\">\n                      <li data-nodeid=\"1159\">\n                        <p data-nodeid=\"1160\">算法具体的实现步骤；</p>\n                      </li>\n                      <li data-nodeid=\"1161\">\n                        <p data-nodeid=\"1162\">每一个步骤的具体执行逻辑；</p>\n                      </li>\n                      <li data-nodeid=\"1163\">\n                        <p data-nodeid=\"1164\">实现步骤的数量。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1165\">\n                      模板方法模式是一个比较常用的结构型设计模式，它能帮助我们快速构建一个通用模板，对于固定流程、通用协议而言，模板方法模式都是一个很好的选择。\n                    </p>\n                    <p data-nodeid=\"1166\">\n                      虽然模板方法模式简单实用有很多优势，但是劣势同样明显。比如，继承的结构容易带来“修改一个类而影响所有类”的情况，另外，阅读代码的体验也不是很好，经常需要各个类之间不断切换，并且要想搞清楚整个算法完整的逻辑，可能需要阅读所有子类和父类的代码逻辑。\n                    </p>\n                    <p data-nodeid=\"1167\">\n                      总之，<strong data-nodeid=\"1275\"\n                        >模板方法模式的使用范围通常比较局限，当我们的子类和父类在频繁进行修改的时候，就需要重新评估算法步骤是否合理</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1168\">课后思考</h3>\n                    <p data-nodeid=\"1169\">\n                      你能在现实中的哪些场景中使用模板方法模式？另外，能否使用其他模式替换模板方法模式？欢迎你在留言区与我分享。\n                    </p>\n                    <p data-nodeid=\"1170\">\n                      在下一讲，我会接着与你分享“策略模式和解决不同活动策略的营销推荐场景”的相关内容，记得按时来听课！\n                    </p>\n            "}