{"title":"22 | 面试中那些坑了无数人的算法题","context":"\n                    <p data-nodeid=\"1381\" class=\"\">\n                      前面的课时，我们学习了“代数与统计”“算法与数据结构”，至今这门课程的主体知识已告一段落，下面我们进入彩蛋环节，我会向你介绍两个应用到数学的场景，第一个是求职面试，第二个是做人生规划。\n                    </p>\n                    <p data-nodeid=\"1382\">\n                      这一讲，我们先聊一聊求职面试时常见的数学题。\n                    </p>\n                    <p data-nodeid=\"1383\">\n                      毕业后，相信你一定参加过不少的面试吧。在求职面试的时候，即使目标工作岗位很少需要直接使用数学知识，也依然有不少面试官非常注重候选人的数学水平，而这并不是没有依据的。因为绝大多数的岗位，都需要候选人具有逻辑推理能力和解决问题的能力。而这些能力在数学上都能有所体现。\n                    </p>\n                    <p data-nodeid=\"1384\">\n                      下面，我们通过三个例题，带大家体验一下面试中的数学。\n                    </p>\n                    <h3 data-nodeid=\"1385\">例题1 抛硬币问题</h3>\n                    <p data-nodeid=\"1386\">\n                      假设你和大漂亮在玩抛硬币游戏。硬币的正面朝上可得 1\n                      分，背面朝上则分数不变。如果大漂亮可以抛 51\n                      次硬币，而你只能抛 50\n                      次硬币，那么大漂亮分数比你高的概率是多少？\n                    </p>\n                    <p data-nodeid=\"1387\">\n                      这个问题如果用计算机进行仿真求解，就会非常容易，我们给出下面的代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> random\n</div></li><li><div class=\"code-word\">dapiaoliang = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">you = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">win = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1000</span>):\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">51</span>):\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> random.randint(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">1</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dapiaoliang += <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">50</span>):\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> random.randint(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">1</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; you += <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> dapiaoliang &gt; you:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; win += <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; dapiaoliang = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; you = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> win\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1389\">我们对代码进行走读：</p>\n                    <ul data-nodeid=\"1390\">\n                      <li data-nodeid=\"1391\">\n                        <p data-nodeid=\"1392\">\n                          第 3、4 行，分别定义两个变量来保存大漂亮和你的得分；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1393\">\n                        <p data-nodeid=\"1394\">\n                          第 5 行，用 win 变量来记录大漂亮获胜的次数；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1395\">\n                        <p data-nodeid=\"1396\">\n                          第 6 行开始，执行一个重复 1000 次的循环；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1397\">\n                        <p data-nodeid=\"1398\">\n                          在每次的循环内部，先在第 7～9 行，通过 51\n                          次的循环，模拟出大漂亮的得分；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1399\">\n                        <p data-nodeid=\"1400\">\n                          再在第 10～12 行，通过 50 次的循环，模拟出你的得分；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1401\">\n                        <p data-nodeid=\"1402\">\n                          在 13、14\n                          行判断，如果大漂亮分数比你高，则大漂亮获胜一局。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1403\">\n                      最终，打印出大漂亮获胜的局数。我们运行代码的结果如下图。\n                    </p>\n                    <p data-nodeid=\"1404\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/5A/CgpVE1_tlQqAHftLAABE5ruo4OM414.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1520\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1405\">\n                      可见，在 1000 次的游戏中，大漂亮获胜了 502\n                      次。这样，我们可以估算出，大漂亮获胜的概率为 0.502。\n                    </p>\n                    <h4 data-nodeid=\"1406\">【数学角度解答】</h4>\n                    <p data-nodeid=\"1407\">\n                      我们再从数学的角度重新计算一下这道题。在这里，我们需要通过加乘法则去拆解一下事件。假设\n                      A 事件代表大漂亮抛 51 次硬币的得分，B 事件代表你抛 50\n                      次硬币的得分，要计算的目标是 A 大于 B 的概率 P(A&gt;B)。\n                    </p>\n                    <p data-nodeid=\"1408\">\n                      每次抛硬币是独立的事件，独立事件共同发生的概率满足乘法法则。因此，可以把大漂亮的得分，拆解为前\n                      50 次抛硬币的得分（M 事件）和最后一次抛硬币的得分（ N\n                      事件）。\n                    </p>\n                    <blockquote data-nodeid=\"1409\">\n                      <p data-nodeid=\"1410\">\n                        而其中，最后一次抛硬币，只有正面得 1 分或者背面得 0\n                        分两种情况。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1411\">\n                      对于一个事件的两个可能的结果分支，可以通过加法法则来求概率，因此有下面的公式。\n                    </p>\n                    <p data-nodeid=\"3808\" class=\"\">\n                      P(A&gt;B)=P(M+N&gt;B)=<br />\n                      P(N=0)·P(M+0&gt;B)+P(N=1)·P(M+1&gt;B)=<br />\n                      0.5·P(M+0&gt;B) + 0.5·P(M+1&gt;B)\n                    </p>\n\n                    <p data-nodeid=\"1413\">\n                      对于最后一项 P(M+1&gt;B) 等价于 P(M≥B)。这是因为，如果 M\n                      大于或等于 B，则 M+1 必然是大于 B 的；反过来，M 和 B\n                      是抛硬币正面朝上的次数，所以必然是整数。如果 M+1 比 B\n                      大，那么 M 必然会大于或等于 B。因此，有二者概率相等，即\n                      P(M+1&gt;B) = P(M≥B)。\n                    </p>\n                    <p data-nodeid=\"1414\">\n                      我们把这个关系带入到 P(A&gt;B) 中，则有\n                      P(A&gt;B)=0.5·P(M&gt;B)+0.5·P(M&gt;=B)\n                    </p>\n                    <p data-nodeid=\"1415\">\n                      再根据加法法则，则有\n                      P(A&gt;B)=0.5·P(M&gt;B)+0.5·P(M&gt;B)+0.5·P(M=B)\n                    </p>\n                    <p data-nodeid=\"1416\">\n                      别忘了，M 事件代表“大漂亮前 50 次抛硬币的得分”，而 B\n                      事件是“你抛 50\n                      次硬币的得分”。区别只剩下了抛硬币的人不一样。不管是谁抛硬币，正面朝上的概率始终都是1/2。所以从结果来看，这两个事件是完全等价的，\n                    </p>\n                    <p data-nodeid=\"1417\">则有 P(M&gt;B) =&nbsp;P(M&lt;B)。</p>\n                    <p data-nodeid=\"4512\" class=\"te-preview-highlight\">\n                      因此 P(A&gt;B)<br />\n                      =&nbsp;0.5·P(M&gt;B)+0.5·P(M&lt;B)+0.5·P(M=B)\n                      =&nbsp;0.5·[P(M&gt;B)+P(M&lt;B)+P(M=B)]\n                    </p>\n\n                    <p data-nodeid=\"1419\">\n                      注意：M 和 B 的关系只有大于、小于或者等于，所以\n                      P(M&gt;B)+P(M&lt;B)+P(M=B) 之和为 1。因此，可以得到结果为\n                      P(A&gt;B) =&nbsp;0.5·[P(M&gt;B)+P(M&lt;B)+P(M=B)] = 0.5\n                    </p>\n                    <p data-nodeid=\"1420\">\n                      这与我们用代码仿真计算的结果是一致的。\n                    </p>\n                    <h3 data-nodeid=\"1421\">例题2 数据上溢问题</h3>\n                    <p data-nodeid=\"1422\">\n                      对于一个 Sigmoid\n                      函数，y=1/(1+e<sup>-x</sup>)。假设输入的自变量 x 很小，为\n                      -1000000。因为要先计算 e<sup>-x</sup> 的值，即\n                      e<sup>1000000</sup>，如下图所示，直接计算就会先得到一个非常大的数字而抛出异常。那么在线上代码中，该如何规避这种情况，计算出输出值呢？\n                    </p>\n                    <p data-nodeid=\"1423\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/82/CgqCHl_tlRyAGEVyAAOiGgi9i8A083.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1569\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1424\">\n                      其实，这里可以用到一个非常简单的技巧，对公式做个变形就能让程序适应这种情况了。我们知道，Sigmoid\n                      函数的结果是一个在 0~1\n                      之间的连续值。而之所以产生数据溢出是因为要先计算e<sup\n                        >-x</sup\n                      >\n                      的值。处理这种情况，我们可以从数学的角度，对分子和分母都乘以\n                      e<sup>x</sup> 这一项，则有\n                    </p>\n                    <p data-nodeid=\"1425\">\n                      y = 1/(1+e<sup>-x</sup>) =\n                      e<sup>x</sup>/(e<sup>x</sup>+1)。\n                    </p>\n                    <p data-nodeid=\"1426\">\n                      此时，输入 x=-1000000，则需要计算\n                      e<sup>x</sup>，得到结果为 0.0。再带入到 Sigmoid\n                      函数中，就可以得到结果啦。\n                    </p>\n                    <p data-nodeid=\"1427\">\n                      可能你还会问，对公式做了变形之后，如果 x 为很大的正数，如\n                      1000000，岂不是又数据溢出抛异常了吗？如果 x\n                      为很大的正数，我们直接用 Sigmoid 函数的原始形态\n                      y=1/(1+e<sup>-x</sup>) 就可以了。\n                    </p>\n                    <p data-nodeid=\"1428\">\n                      综合上面两种情况，我们可将x分正数及非正数分别计算，来避免数据的溢出。即\n                    </p>\n                    <ul data-nodeid=\"1429\">\n                      <li data-nodeid=\"1430\">\n                        <p data-nodeid=\"1431\">\n                          如果 x&gt;0，则 y = 1/(1+e<sup>-x</sup>)\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1432\">\n                        <p data-nodeid=\"1433\">\n                          如果 x&lt;0，则 y = e<sup>x</sup>/(1+e<sup>x</sup>)\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1434\">实现的代码如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> math\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sigmoid</span>(<span class=\"hljs-params\">x</span>):</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> x &lt; <span class=\"hljs-number\">0</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; y = math.pow(math.e,x) / (<span class=\"hljs-number\">1</span> + math.pow(math.e,x))\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">else</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; y = <span class=\"hljs-number\">1</span> / (<span class=\"hljs-number\">1</span> + math.pow(math.e,-x))\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> y\n</div></li><li><div class=\"code-word\">a = <span class=\"hljs-number\">-1000000</span>\n</div></li><li><div class=\"code-word\">b = <span class=\"hljs-number\">1000000</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> sigmoid(a)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> sigmoid(b)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1436\">我们对代码进行走读：</p>\n                    <ul data-nodeid=\"1437\">\n                      <li data-nodeid=\"1438\">\n                        <p data-nodeid=\"1439\">\n                          在 Sigmoid 函数的代码中，第 4 行，判断 x 和 0\n                          的大小关系；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1440\">\n                        <p data-nodeid=\"1441\">\n                          如果 x 为负数，则通过第 5 行的公式计算 y；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1442\">\n                        <p data-nodeid=\"1443\">\n                          如果 x 不是负数，则通过第 7 行的公式来计算 y。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1444\">\n                      我们在主函数中，分别输入了非常小和非常大的两个数字，并顺利得到结果分别为\n                      0.0 和 1.0，如下图所示。\n                    </p>\n                    <p data-nodeid=\"1445\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/82/CgqCHl_tlSeAJpQ6AABCtn1OaL8521.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"1629\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"1446\">例题3&nbsp;投点距离期望问题</h3>\n                    <p data-nodeid=\"1447\">\n                      假设在墙上有一个半径为 10\n                      厘米的圆形区域，现在大迷糊用飞镖向这个圆形区域进行均匀随机的投射。假设大迷糊不会“脱靶”，求大迷糊扎到的点到圆形区域圆心距离的期望。\n                    </p>\n                    <p data-nodeid=\"1448\">\n                      这个题用代码仿真会非常容易，我们给出下面的代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> random\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> math\n</div></li><li><div class=\"code-word\">inCircle = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">distance = <span class=\"hljs-number\">0.0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1000</span>):\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; x = <span class=\"hljs-number\">1.0</span> * random.randint(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1000</span>) / <span class=\"hljs-number\">100</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; y = <span class=\"hljs-number\">1.0</span> * random.randint(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1000</span>) / <span class=\"hljs-number\">100</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> x * x + y * y &gt; <span class=\"hljs-number\">100</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">continue</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">else</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; inCircle += <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; distance += math.sqrt(x * x + y * y)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> distance / inCircle\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1450\">我们对代码进行走读：</p>\n                    <ul data-nodeid=\"1451\">\n                      <li data-nodeid=\"1452\">\n                        <p data-nodeid=\"1453\">\n                          第 4 行，保存合法的投射次数变量；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1454\">\n                        <p data-nodeid=\"1455\">\n                          第 5 行，是累计的距离之和变量；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1456\">\n                        <p data-nodeid=\"1457\">\n                          第 6 行，通过 for 循环执行多次的投射动作；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1458\">\n                        <p data-nodeid=\"1459\">\n                          每次投射，第 7 行和第 8 行，随机地生成投射点的坐标变量\n                          x 和 y（在这里，我们精确到小数点后两位）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1460\">\n                        <p data-nodeid=\"1461\">\n                          第 9 行，如果坐标点的平方和超过 100，也就是投射点在 10\n                          厘米的圆形之外；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1462\">\n                        <p data-nodeid=\"1463\">\n                          那么第 10 行，执行 continue，继续下一轮循环；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1464\">\n                        <p data-nodeid=\"1465\">\n                          否则，说明投射点在圆内，执行第 11 行的代码；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1466\">\n                        <p data-nodeid=\"1467\">第 12 行，合法投射次数加 1；</p>\n                      </li>\n                      <li data-nodeid=\"1468\">\n                        <p data-nodeid=\"1469\">\n                          第 13\n                          行，通过本次投射点到圆心的距离，更新累计的距离之和；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1470\">\n                        <p data-nodeid=\"1471\">\n                          最后第 14\n                          行，打印累计距离和合法投射次数的比值，得到了平均距离。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1472\">\n                      这也是投射点到圆心距离的期望，我们运行代码的结果为 6.66\n                      厘米，如下图所示。\n                    </p>\n                    <p data-nodeid=\"1473\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/77/Ciqc1F_tlS6AK2f7AABGjfsXxYU116.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"1647\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1474\">\n                      接下来，我们再从数学的角度来计算一下这个题目。\n                    </p>\n                    <h4 data-nodeid=\"1475\">【数学角度解答】</h4>\n                    <p data-nodeid=\"1476\">\n                      题目中，要求解的是一个点到圆心距离这个随机变量的期望。很显然，点到圆心的距离是个连续值。要求某个连续型随机变量的期望，可以用期望的定义式来计算，即\n                    </p>\n                    <p data-nodeid=\"1477\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/9F/Cip5yF_0HUqAOF9BAAAjCCYcaoY309.png\"\n                        alt=\"图片8.png\"\n                        data-nodeid=\"1653\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1478\">\n                      所以，当你在工作中遇到“某连续型变量的期望”时，它一定可以写成上面的积分形式，这是定义式，也是公理。\n                    </p>\n                    <p data-nodeid=\"1479\">\n                      在我们这个问题中，随机变量 x\n                      是点到圆心的距离。由于投射点不可以在圆形以外，所以这个距离的取值范围是\n                      0～10。因此，我们可以把上面的公式改写为\n                    </p>\n                    <p data-nodeid=\"1480\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/9F/Cip5yF_0HVKAbUCQAAAicNJwXKI890.png\"\n                        alt=\"图片9.png\"\n                        data-nodeid=\"1658\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1481\">\n                      那么问题来了，这里的概率密度函数 f(x)\n                      的表达式是什么呢？别忘了，概率论告诉我们，概率密度函数是概率分布函数的导数。\n                    </p>\n                    <p data-nodeid=\"1482\">\n                      我们不妨试着求一下投射问题的概率分布函数。假设在圆内有一个小圆，半径是\n                      x<sub>0</sub>。那么投射点恰好也在小圆内的概率为\n                      P(x&lt;x<sub>0</sub>) = π·x<sub>0<sup>2</sup></sub\n                      >/π·10<sup>2</sup> = x<sub>0<sup>2</sup></sub\n                      >/10<sup>2</sup>。\n                    </p>\n                    <p data-nodeid=\"1483\">\n                      因此，概率分布函数为 F(x) =\n                      x<sup>2</sup>/10<sup>2</sup>；又因为，概率密度函数是概率分布函数的导数，所以概率密度函数为\n                      f(x) = 2x/10<sup>2</sup>。\n                    </p>\n                    <p data-nodeid=\"1484\">\n                      我们把这些条件都带入到期望的公式中，则有\n                    </p>\n                    <p data-nodeid=\"1485\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/CA/CgqCHl_0HaWAJ0mbAADyboYaUTE926.png\"\n                        alt=\"1.png\"\n                        data-nodeid=\"1709\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1486\">\n                      这与我们用代码求解的 6.66 厘米是一致的。\n                    </p>\n                    <h3 data-nodeid=\"1487\">小结</h3>\n                    <p data-nodeid=\"1488\">\n                      我们对这一讲进行总结。这一课时的内容是面试中的数学，面试官会通过一个简单的数学题，考察候选人解决问题的思考路径。\n                    </p>\n                    <p data-nodeid=\"1489\">\n                      数学题的魅力就在于活学活用，你很难遇到同一道题，所以靠死记硬背是不行的。只有深入理解数学原理，才能做到在面试的数学考察中游刃有余。在备考的时候，应该注意在基本功方面多花时间去做到深入理解。对于每个知识点的适用范围，来龙去脉做到掌握。\n                    </p>\n                    <p data-nodeid=\"1490\">\n                      如果你遇到了一个让你束手无策的题目，不妨试着从下面两个角度寻找突破口。\n                    </p>\n                    <ul data-nodeid=\"1491\">\n                      <li data-nodeid=\"1492\">\n                        <p data-nodeid=\"1493\">\n                          第一个角度，从问题出发去寻找突破口。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1494\">\n                      例如，本课时的投点距离期望问题。这个题目要计算的是连续型随机变量的期望，那么它一定可以用连续型随机变量期望的定义式表示。接下来，问题就变成了对这个定义式的未知量进行计算求解。\n                    </p>\n                    <ul data-nodeid=\"1495\">\n                      <li data-nodeid=\"1496\">\n                        <p data-nodeid=\"1497\">\n                          第二个角度，从已知条件出发去寻找突破口。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1498\">\n                      例如，在抛硬币问题中，已知条件是大漂亮抛了 51 次，你抛了\n                      50 次。抛 51 次，可以拆分为抛 50 次和抛 1\n                      次。这样，我们就得到了大漂亮抛 50 次和你抛 50\n                      次，这样等价的两个事件。基于这两个事件，就能推导出大漂亮得分比你高的概率。\n                    </p>\n                    <p data-nodeid=\"1499\">\n                      这些寻找突破口的方法，是候选人解决问题能力的集中体现；也是数学题、算法题千变万化后，唯一不变的规律。\n                    </p>\n                    <p data-nodeid=\"1500\">\n                      下一讲，我将向你讲解《23 |\n                      站在生活的十字路口，如何用数学抉择？》让你用数学为自己补充智慧锦囊。\n                    </p>\n                    <hr data-nodeid=\"1501\" />\n                    <p data-nodeid=\"1502\" class=\"\">\n                      <a\n                        href=\"https://wj.qq.com/s2/7812549/4cd8/\"\n                        data-nodeid=\"1725\"\n                        >课程评价入口，挑选 5 名小伙伴赠送小礼品～</a\n                      >\n                    </p>\n            "}