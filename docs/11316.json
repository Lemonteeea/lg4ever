{"title":"15 | 版本特性：Webpack 5 中的优化细节","context":"\n                    <p data-nodeid=\"45253\">\n                      开始课程前，我们先来解答上一节课的思考题：为什么在开启增量构建后，有时候\n                      rebuild\n                      还是会很慢呢？我们可以从两方面来找原因。首先，Webpack 4\n                      中的增量构建只运用到了新增模块与生成 Chunk\n                      产物阶段，其他处理过程（如代码压缩）仍需要通过其他方式进行优化，例如分包和压缩插件的缓存。其次，过程中的一些处理会额外增加构建时间，例如生成\n                      Source Map\n                      等。因此还是需要通过统计各阶段的执行时间来具体问题具体分析。\n                    </p>\n\n                    <p data-nodeid=\"44334\">\n                      然后开始这节课的学习。在上节课里，我们讨论了 Webpack 4\n                      中增量构建的原理，也分析了为什么在生产环境下难以使用增量构建，其中最主要的一点是\n                      Webpack 4 中没有基于文件系统的持久化缓存。这个问题在\n                      Webpack 5 中得到了解决，这节课我们就来看看 Webpack 5\n                      有哪些新的功能特性。\n                    </p>\n                    <h3 data-nodeid=\"44335\">Webpack 5 中的效率优化点</h3>\n                    <p data-nodeid=\"44336\">\n                      Webpack 5 中的变化有很多，完整的功能变更清单参见<a\n                        href=\"https://github.com/webpack/changelog-v5\"\n                        data-nodeid=\"44427\"\n                        >官方文档</a\n                      >，这里我们介绍其中与构建效率相关的几个主要功能点：\n                    </p>\n                    <ul data-nodeid=\"44337\">\n                      <li data-nodeid=\"44338\">\n                        <p data-nodeid=\"44339\">Persistent Caching</p>\n                      </li>\n                      <li data-nodeid=\"44340\">\n                        <p data-nodeid=\"44341\">Tree Shaking</p>\n                      </li>\n                      <li data-nodeid=\"44342\">\n                        <p data-nodeid=\"44343\">Logs</p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"44344\">Persistent Caching</h3>\n                    <p data-nodeid=\"44345\">\n                      首先我们通过示例来看下 Webpack 5 中缓存方面的变化。\n                    </p>\n                    <h4 data-nodeid=\"44346\">持久化缓存的示例</h4>\n                    <p data-nodeid=\"44347\">如下面的代码和图片所示：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">./webpack.cache.config.js\n</div></li><li><div class=\"code-word\">...\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">  cache: {\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-string\">'filesystem'</span>,\n</div></li><li><div class=\"code-word\">    cacheLocation: path.resolve(__dirname, <span class=\"hljs-string\">'.appcache'</span>),\n</div></li><li><div class=\"code-word\">    buildDependencies: {\n</div></li><li><div class=\"code-word\">      config: [__filename],\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"48270\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/57/04/Ciqc1F9sT2WAI_vnAAGUeALmmZo570.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"48273\"\n                      /><br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/57/0F/CgqCHl9sT2qAexnjAADgsW9ijYU168.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"48277\"\n                      /><br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/57/04/Ciqc1F9sT26AIkKYAAEVjcm9aeY144.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"48281\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"44352\">\n                      可以看到，初次构建完整花费了\n                      3282ms，而在不修改代码进行再次构建的情况下，只花费了不到原先时间的\n                      1/10。在修改代码文件的新情况下也只花费了\n                      628ms，多花费的时间体现在构建被修改的文件的编译上，这就实现了上一课时所寻求的<strong\n                        data-nodeid=\"44450\"\n                        >生产环境下的增量构建</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"44353\">Cache 基本配置</h4>\n                    <p data-nodeid=\"48892\" class=\"\">\n                      在 Webpack 4 中，cache 只是单个属性的配置，所对应的赋值为\n                      true 或\n                      false，用来代表是否启用缓存，或者赋值为对象来表示在构建中使用的缓存对象。而在\n                      Webpack 5 中，<a\n                        href=\"https://webpack.js.org/configuration/other-options/#cache\"\n                        data-nodeid=\"48896\"\n                        >cache</a\n                      >\n                      配置除了原本的 true 和 false\n                      外，还增加了许多子配置项，例如：\n                    </p>\n\n                    <ul data-nodeid=\"44355\">\n                      <li data-nodeid=\"44356\">\n                        <p data-nodeid=\"44357\">\n                          cache.<strong data-nodeid=\"44466\">type</strong\n                          >：缓存类型。值为\n                          'memory'或‘filesystem’，分别代表基于内存的临时缓存，以及基于文件系统的持久化缓存。在选择\n                          filesystem 的情况下，下面介绍的其他属性生效。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44358\">\n                        <p data-nodeid=\"44359\">\n                          cache.<strong data-nodeid=\"44474\"\n                            >cacheDirectory</strong\n                          >：缓存目录。默认目录为 node_modules/.cache/webpack。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44360\">\n                        <p data-nodeid=\"44361\">\n                          cache.<strong data-nodeid=\"44480\">name</strong\n                          >：缓存名称。同时也是 cacheDirectory\n                          中的子目录命名，默认值为 Webpack 的\n                          ${config.name}-${config.mode}。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44362\">\n                        <p data-nodeid=\"44363\">\n                          cache.<strong data-nodeid=\"44486\"\n                            >cacheLocation</strong\n                          >：缓存真正的存放地址。默认使用的是上述两个属性的组合：path.resolve(cache.cacheDirectory,\n                          cache.name)。该属性在赋值情况下将忽略上面的\n                          cacheDirectory 和 name 属性。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"44364\">单个模块的缓存失效</h4>\n                    <p data-nodeid=\"44365\">\n                      Webpack 5\n                      会跟踪每个模块的依赖项：fileDependencies、contextDependencies、missingDependencies。当模块本身或其依赖项发生变更时，Webpack\n                      能找到所有受影响的模块，并重新进行构建处理。\n                    </p>\n                    <p data-nodeid=\"44366\">\n                      这里需要注意的是，对于 node_modules\n                      中的第三方依赖包中的模块，出于性能考虑，Webpack\n                      不会跟踪具体模块文件的内容和修改时间，而是依据依赖包里<strong\n                        data-nodeid=\"44498\"\n                        >package.json 的 name 和 version 字段</strong\n                      >来判断模块是否发生变更。因此，单纯修改 node_modules\n                      中的模块内容，在构建时不会触发缓存的失效。\n                    </p>\n                    <h4 data-nodeid=\"44367\">全局的缓存失效</h4>\n                    <p data-nodeid=\"44368\">\n                      当模块代码没有发生变化，但是构建处理过程本身发生变化时（例如升级了\n                      Webpack\n                      版本、修改了配置文件、改变了环境变量等），也可能对构建后的产物代码产生影响。因此在这种情况下不能复用之前缓存的数据，而需要让全局缓存失效，重新构建并生成新的缓存。在\n                      Webpack 5 中共提供了 3 种不同维度的全局缓存失效配置。\n                    </p>\n                    <p data-nodeid=\"49508\" class=\"\">\n                      <strong data-nodeid=\"49512\">buildDependencies</strong>\n                    </p>\n\n                    <p data-nodeid=\"44370\">\n                      第一种配置是cache.buildDependencies，用于指定可能对构建过程产生影响的依赖项。\n                    </p>\n                    <p data-nodeid=\"44371\">\n                      它的默认选项是{defaultWebpack:\n                      [\"webpack/lib\"]}。这一选项的含义是，当 node_modules 中的\n                      Webpack 或 Webpack 的依赖项（例如 watchpack\n                      等）发生变化时，当前的构建缓存即失效。\n                    </p>\n                    <p data-nodeid=\"44372\">\n                      上述选项是默认内置的，无须写在项目配置文件中。配置文件中的\n                      buildDenpendencies 还支持增加另一种选项 {config:\n                      [__filename]}，它的作用是当配置文件内容或配置文件依赖的模块文件发生变化时，当前的构建缓存即失效。\n                    </p>\n                    <p data-nodeid=\"44373\">\n                      <strong data-nodeid=\"44530\">version</strong>\n                    </p>\n                    <p data-nodeid=\"44374\">\n                      第二种配置是\n                      cache.version。当配置文件和代码都没有发生变化，但是构建的外部依赖（如环境变量）发生变化时，预期的构建产物代码也可能不同。这时就可以使用\n                      version\n                      配置来防止在外部依赖不同的情况下混用了相同的缓存。例如，可以传入\n                      cache: {version:\n                      process.env.NODE_ENV}，达到当不同环境切换时彼此不共用缓存的效果。\n                    </p>\n                    <p data-nodeid=\"44375\">\n                      <strong data-nodeid=\"44537\">name</strong>\n                    </p>\n                    <p data-nodeid=\"44376\">\n                      缓存的名称除了作为默认的缓存目录下的子目录名称外，也起到区分缓存数据的作用。例如，可以传入\n                      cache: {name:\n                      process.env.NODE_ENV}。这里有两点需要补充说明：\n                    </p>\n                    <ul data-nodeid=\"44377\">\n                      <li data-nodeid=\"44378\">\n                        <p data-nodeid=\"44379\">\n                          <strong data-nodeid=\"44553\">name 的特殊性</strong>：与\n                          version 或 buildDependencies 等配置不同，name\n                          在默认情况下是作为缓存的子目录名称存在的，因此可以利用\n                          name<strong data-nodeid=\"44554\">保留多套缓存</strong\n                          >。在 name 切换时，若已存在同名称的缓存，则可以<strong\n                            data-nodeid=\"44555\"\n                            >复用之前的缓存</strong\n                          >。与之相比，当其他全局配置发生变化时，会直接将之前的缓存失效，即使切换回之前已缓存过的设置，也会当作无缓存处理。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44380\">\n                        <p data-nodeid=\"44381\">\n                          当 cacheLocation 配置存在时，将忽略 name\n                          的缓存目录功能，上述多套缓存复用的功能<strong\n                            data-nodeid=\"44561\"\n                            >也将失效</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"51908\" class=\"\">其他</h4>\n\n                    <p data-nodeid=\"44383\">\n                      除了上述介绍的配置项外，cache\n                      还支持其他属性：managedPath、hashAlgorithm、store、idleTimeout\n                      等，具体功能可以通过<a\n                        href=\"https://webpack.js.org/configuration/other-options/#cache\"\n                        data-nodeid=\"44569\"\n                        >官方文档</a\n                      >进行查询。\n                    </p>\n                    <p data-nodeid=\"52502\" class=\"\">\n                      此外，在 Webpack 4\n                      中，部分插件是默认启用缓存功能的（例如压缩代码的 Terser\n                      插件等），项目在生产环境下构建时，可能无意识地享受缓存带来的效率提升，但是在\n                      Webpack 5 中则不行。无论是否设置 cache 配置，Webpack 5\n                      都将忽略各插件的缓存设置（例如\n                      <a\n                        href=\"https://webpack.js.org/plugins/terser-webpack-plugin/#cache\"\n                        data-nodeid=\"52506\"\n                        >TerserWebpackPlugin</a\n                      >），而由引擎自身提供构建各环节的缓存读写逻辑。<strong\n                        data-nodeid=\"52511\"\n                        >因此，项目在迁移到 Webpack 5 时都需要通过上面介绍的\n                        cache 属性来单独配置缓存。</strong\n                      >\n                    </p>\n\n                    <h3 data-nodeid=\"44385\">Tree Shaking</h3>\n                    <p data-nodeid=\"44386\">\n                      Webpack 5 中的另一项优化体现在 Tree Shaking\n                      功能方面。在之前课程中介绍过，Webpack 4 中的 Tree Shaking\n                      功能在使用上存在限制：只支持 ES6\n                      类型的模块代码分析，且需要相应的依赖包或需要函数声明为无副作用等。这使得在实际项目构建过程中\n                      Tree Shaking 的优化效果往往不尽如人意。而这一问题在\n                      Webpack 5 中得到了不少改善。\n                    </p>\n                    <h4 data-nodeid=\"44387\">Nested Tree Shaking</h4>\n                    <p data-nodeid=\"44388\">\n                      Webpack 5\n                      增加了对嵌套模块的导出跟踪功能，能够找到那些嵌套在最内层而未被使用的模块属性。例如下面的示例代码，在构建后的结果代码中只包含了引用的内部模块的一个属性，而忽略了不被引用的内部模块和中间模块的其他属性：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">//./src/inner-module.js</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-string\">'inner_a'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">'inner_b'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//.src/nested-module.js</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> inner <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./inner-module'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> nested = <span class=\"hljs-string\">'nested'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> { inner, nested }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//./src/example-tree-nested.js</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> nested <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./nested-module'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(nested.inner.a)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//./dist/tree-nest.js</span>\n</div></li><li><div class=\"code-word\">(<span class=\"hljs-function\">()=&gt;</span>{<span class=\"hljs-string\">\"use strict\"</span>;<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"inner_a\"</span>)})();\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"53998\">Inner Module Tree Shaking</h4>\n\n                    <p data-nodeid=\"44392\">\n                      除了上面对嵌套引用模块的依赖分析优化外，Webpack 5\n                      中还增加了分析模块中导出项与导入项的依赖关系的功能。通过\n                      optimization.innerGraph（生产环境下默认开启）选项，Webpack\n                      5\n                      可以分析特定类型导出项中对导入项的依赖关系，从而找到更多未被使用的导入模块并加以移除。例如下面的示例代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">//./src/inner-module.js</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-string\">'inner_a'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-string\">'inner_b'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> c = <span class=\"hljs-string\">'inner_c'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//./src/example-tree-nested.js 同上面示例</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//.src/nested-module.js</span>\n</div></li><li><div class=\"code-word\">...\n</div></li><li><div class=\"code-word\">const useB = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> inner.b\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> usingB = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> useB()\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//./dist/tree-nest.js (默认optimization.innerGraph = true)</span>\n</div></li><li><div class=\"code-word\">... const t=<span class=\"hljs-string\">\"inner_a\"</span>,n=<span class=\"hljs-string\">\"inner_b\"</span>} ...\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//./dist/tree-nest.js (optimization.innerGraph =&nbsp;false)</span>\n</div></li><li><div class=\"code-word\">... const t=<span class=\"hljs-string\">\"inner_a\"</span>} ...\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"54590\">\n                      在 nested-module.js 中新增了导出项\n                      usingB，该导出项间接依赖导入项\n                      inner.b，而这一导出项在入口模块中并未使用。在默认情况下，构建完成后只保留真正被使用的\n                      inner.a。但是如果将优化项 innerGraph 关闭（且需要同时设置\n                      concatenateModules:false），构建后会发现间接引用的导出项没有被移除，该导出项间接引用的\n                      inner.b 也被保留到了产物代码中。\n                    </p>\n\n                    <h4 data-nodeid=\"44396\">CommonJS Tree Shaking</h4>\n                    <p data-nodeid=\"44397\">\n                      Webpack 5 中增加了对一些 CommonJS\n                      风格模块代码的静态分析功功能：\n                    </p>\n                    <ul data-nodeid=\"44398\">\n                      <li data-nodeid=\"44399\">\n                        <p data-nodeid=\"44400\">\n                          支持 exports.xxx、this.exports.xxx、module.exports.xxx\n                          语法的导出分析。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44401\">\n                        <p data-nodeid=\"44402\">\n                          支持 object.defineProperty(exports, \"xxxx\", ...)\n                          语法的导出分析。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44403\">\n                        <p data-nodeid=\"44404\">\n                          支持 require('xxxx').xxx 语法的导入分析。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"44405\">例如下面的代码：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">//./src/commonjs-module.js</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">exports</span>.a = <span class=\"hljs-number\">11</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">this</span>.exports.b = <span class=\"hljs-number\">22</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports.c = <span class=\"hljs-number\">33</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'module'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//./src/example-tree-commonjs.js</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./commonjs-module'</span>).a\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(a)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//./dist/tree-commonjs.js</span>\n</div></li><li><div class=\"code-word\">()=&gt;{<span class=\"hljs-keyword\">var</span> o={<span class=\"hljs-number\">263</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">o,r</span>)</span>{r.a=<span class=\"hljs-number\">11</span>,<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"module\"</span>)}}...\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44407\">\n                      可以看到产物代码中只有被引入的属性 a 和 console\n                      语句，而其他两个导出属性 b 和 c 已经在产物中被排除了。\n                    </p>\n                    <h3 data-nodeid=\"44408\">Logs</h3>\n                    <p data-nodeid=\"55752\">\n                      第三个要提到的 Webpack 5\n                      的效率优化点是，它增加了许多内部处理过程的日志，可以通过\n                      stats.logging 来访问。下面两张图是使用相同配置*stats:\n                      {logging: \"verbose\"}*的情况下，Webpack 4 和 Webpack 5\n                      构建输出的日志：\n                    </p>\n                    <p data-nodeid=\"56640\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/57/10/CgqCHl9sT6WAWzGiAACp4k0mjjw366.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"56643\"\n                      /><br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/57/05/Ciqc1F9sT6qAeQs4AAMWioPCn4s820.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"56647\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"44412\">\n                      可以看到，Webpack 5\n                      构建输出的日志要丰富完整得多。通过这些日志能够很好地反映构建各阶段的处理过程、耗费时间，以及缓存使用的情况。在大多数情况下，它已经能够代替之前人工编写的统计插件功能了。\n                    </p>\n                    <h3 data-nodeid=\"44413\">其他功能优化项</h3>\n                    <p data-nodeid=\"57830\" class=\"\">\n                      除了上面介绍的和构建效率相关的几项变化外，Webpack 5\n                      中还有许多大大小小的功能变化，例如新增了改变微前端构建运行流程的\n                      <a\n                        href=\"https://webpack.js.org/concepts/module-federation/\"\n                        data-nodeid=\"57834\"\n                        >Module Federation</a\n                      >\n                      和对产物代码进行优化处理的 Runtime\n                      Modules，优化了处理模块的工作队列，在生命周期 Hooks\n                      中增加了 stage\n                      选项等。感兴趣的话，你可以通过文章顶部的文档链接或官方网站来进一步了解。\n                    </p>\n\n                    <h3 data-nodeid=\"44415\">总结</h3>\n                    <p data-nodeid=\"44416\">\n                      在本节课上线后不久，<a\n                        href=\"https://github.com/webpack/webpack/issues/11406\"\n                        data-nodeid=\"44629\"\n                        >Webpack 5 的稳定版本</a\n                      >将对外发布（2020 年 10 月 10\n                      日）。希望这节课能让你对它有一个初步的印象。\n                    </p>\n                    <p data-nodeid=\"44417\">\n                      本节课我们主要了解了 Webpack\n                      最新版本与构建效率相关的几个优化功能点，其中最重要的就是\n                      Webpack 5\n                      中引入的持久化缓存的特性。在这个部分我们讨论了如何开启和定制持久化缓存，以及通过哪些方式可以让缓存主动失效，以确保在项目里可以安全地享受缓存带来的效率提升。此外，Webpack\n                      5 中对于 Tree Shaking\n                      的优化也能帮助我们更好地优化项目依赖，减小构建产物的体积。\n                    </p>\n                    <p data-nodeid=\"44418\">\n                      本节课的<strong data-nodeid=\"44637\">课后思考题是</strong\n                      >：结合今天所讲的持久化缓存和日志统计，分析一下 Webpack 5\n                      中都有哪些阶段使用到了缓存？\n                    </p>\n                    <p data-nodeid=\"58424\" class=\"\">\n                      Webpack\n                      构建效率优化的系列至此就告一段落了，下节课我们来介绍构建效率篇的最后一个主题：无包构建。\n                    </p>\n            "}