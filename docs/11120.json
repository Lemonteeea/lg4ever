{"title":"19 | 使用 TypeScript 开发 Web 应用的最佳实践","context":"\n                    <p data-nodeid=\"22179\">\n                      18 讲我们学习了如何使用 TypeScript 开发运行 Node.js\n                      端的静态文件服务模块，然而对于大多数的前端人而言，Web\n                      端可能才是主战场。因此，这一讲我们将从 DOM 原生操作和\n                      React 框架这两个方面学习 Web + TypeScript 开发实践。\n                    </p>\n                    <blockquote data-nodeid=\"22180\">\n                      <p data-nodeid=\"22181\">\n                        学习建议：请按照这一讲中的操作步骤，实践一个完整的开发流程。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"22182\">DOM 原生操作</h3>\n                    <p data-nodeid=\"22183\">\n                      无论我们使用前端框架与否，都免不了需要使用原生操作接口，因此将\n                      TypeScript 与 DOM 原生操作组合起来进行学习很有必要。\n                    </p>\n                    <p data-nodeid=\"22184\">\n                      接下来，我们通过手写一个简单的待办管理应用来熟悉常见的操作接口。\n                    </p>\n                    <h4 data-nodeid=\"22185\">配置项目</h4>\n                    <p data-nodeid=\"22186\">\n                      首先，我们可以参照 18 讲中初始化 Node.js\n                      模块的步骤创建一个 todo-web 项目，并安装 TypeScript 依赖。\n                    </p>\n                    <p data-nodeid=\"22187\">\n                      然后，我们可以按需调整 lib 和 alwaysStrict 参数配置\n                      tsconfig，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  \"compilerOptions\": {\n</div></li><li><div class=\"code-word\">    ...,\n</div></li><li><div class=\"code-word\">    \"target\": \"es5\",\n</div></li><li><div class=\"code-word\">    \"lib\": [\"ESNext\", \"DOM\"],                \n</div></li><li><div class=\"code-word\">    \"strict\": true,                       \n</div></li><li><div class=\"code-word\">    \"alwaysStrict\": false,\n</div></li><li><div class=\"code-word\">    ...           \n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22189\">\n                      在以上配置的第 4 行，我们设置了 tagert 参数是“es5”。在第 5\n                      行，我们设置了 lib 参数为 \"ESNext\" 和\n                      \"DOM\"。这样，我们就可以在 TypeScript\n                      中使用最新的语言特性了（比如 Promise.any 等）。\n                    </p>\n                    <blockquote data-nodeid=\"22190\">\n                      <p data-nodeid=\"22191\">\n                        <strong data-nodeid=\"22320\">注意</strong>：因为设置了\n                        target es5，所以这里我们还需要手动引入 ts-polyfill\n                        为新特性打补丁，以兼容较低版本的浏览器。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"22192\">\n                      此外，如果我们想在函数中使用 this，则可以把 alwaysStrict\n                      设置为 false，这样生成的代码中就不会有“use\n                      strict”（关闭严格模式）了。\n                    </p>\n                    <p data-nodeid=\"22193\">\n                      配置好项目后，我们开始进行编码实现。\n                    </p>\n                    <h4 data-nodeid=\"22194\">编码实现</h4>\n                    <p data-nodeid=\"22195\">\n                      首先我们可以创建一个模型\n                      src/model.ts，用来维护待办数据层的增删操作，具体示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">class</span> TodoModel {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">private</span> gid: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> add = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-keyword\">this</span>.gid++;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> remove = <span class=\"hljs-function\">(<span class=\"hljs-params\">id: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">var</span> todoModel: TodoModel;\n</div></li><li><div class=\"code-word\">todoModel = <span class=\"hljs-keyword\">new</span> TodoModel;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22197\">\n                      在上述示例中，我们定义了模型\n                      TodoModel（示例中仅仅实现了架子，你可以按需丰富这个示例），并在第\n                      7~8 行把模型实例赋值给了全局变量 todoModel。\n                    </p>\n                    <p data-nodeid=\"22198\">\n                      接下来我们开始实现 src/view.ts，用来维护视图层操作 Dom\n                      逻辑，具体示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'todo'</span>) <span class=\"hljs-keyword\">as</span> HTMLUListElement | <span class=\"hljs-literal\">null</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> addButton = <span class=\"hljs-built_in\">document</span>.querySelector&lt;HTMLButtonElement&gt;(<span class=\"hljs-string\">'#add'</span>);\n</div></li><li><div class=\"code-word\">addButton?.addEventListener(<span class=\"hljs-string\">'click'</span>, add);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span>: HTMLButtonElement, id: <span class=\"hljs-built_in\">number</span></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> todo = <span class=\"hljs-keyword\">this</span>.parentElement;\n</div></li><li><div class=\"code-word\">  todo &amp;&amp; list?.removeChild(todo) &amp;&amp; todoModel.remove(id);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> id = todoModel.add();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> todoEle = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'li'</span>);\n</div></li><li><div class=\"code-word\">  todoEle.innerHTML = <span class=\"hljs-string\">\\`待办 <span class=\"hljs-subst\">${id}</span> &lt;button&gt;删除&lt;/button&gt;\\`</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> button = todoEle.getElementsByTagName(<span class=\"hljs-string\">'button'</span>)[<span class=\"hljs-number\">0</span>];\n</div></li><li><div class=\"code-word\">  button.style.color = <span class=\"hljs-string\">'red'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (button) {\n</div></li><li><div class=\"code-word\">    button.onclick = remove.bind(button, id);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  list?.appendChild(todoEle);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22200\">\n                      上述示例中，我们在 tsconfig 的 lib 参数中添加了 DOM（如果\n                      lib 参数缺省，则默认包含了 DOM；如果显式设置了 lib\n                      参数，那么一定要添加 DOM），TypeScript 便会自动引入内置的\n                      DOM\n                      类型声明（node_modules/typescript/lib/lib.dom.d.ts），这样所有的\n                      DOM 原生操作都将支持静态类型检测。\n                    </p>\n                    <p data-nodeid=\"22201\">\n                      在第 1 行，我们把通过 id 获取 HTMLElement | null\n                      类型的元素断言为 HTMLUListElement | null，这是因为\n                      HTMLUListElement 是 HTMLElement 的子类型。同样，第 6\n                      行、12 行、14 行的相关元素都也有明确类型。尤其是第 12 行的\n                      createElement、第 14 行的\n                      getElementsByTagName，它们都可以根据标签名返回更确切的元素类型\n                      HTMLLIElement、HTMLButtonElement。\n                    </p>\n                    <p data-nodeid=\"22202\">\n                      然后，在第 2 行我们通过给 querySelector\n                      指定了明确的类型入参，其获取的元素类型也就变成了更明确的\n                      HTMLButtonElement。\n                    </p>\n                    <p data-nodeid=\"22203\">\n                      此外，因为 DOM 元素的 style\n                      属性也支持静态类型检测，所以我们在第 15 行可以把字符串\n                      'red' 赋值给 color。但是，如果我们把数字 1 赋值给\n                      color，则会提示一个 ts(2322) 错误。\n                    </p>\n                    <p data-nodeid=\"22204\">\n                      接下来，我们就可以转译代码，并新建一个 index.html\n                      引入转译后的 lib/model.js、lib/view.js 中，再使用 19\n                      讲中开发的 http-serve CLI 启动服务预览页面。\n                    </p>\n                    <p data-nodeid=\"22205\">\n                      通过这个简单的例子，我们感受到了 TypeScript 对 DOM\n                      强大的支持，并且官方也根据 JavaScript\n                      的发展十分及时地补齐了新语法特性。因此，即便开发原生应用，TypeScript\n                      也会是一个不错的选择。\n                    </p>\n                    <p data-nodeid=\"22206\">\n                      接下来，我们将学习 TypeScript 与前端主流框架 React\n                      的搭配使用。\n                    </p>\n                    <h3 data-nodeid=\"22207\">React 框架</h3>\n                    <p data-nodeid=\"22208\" class=\"\">\n                      React 作为目前非常流行的前端框架，TypeScript\n                      对其支持也是超级完善。在 1.6 版本中，TypeScript\n                      官方专门实现了对 React JSX 语法的静态类型支持，并在\n                      tsconfig 中新增了一个 jsx 参数用来定制 JSX 的转译规则。\n                    </p>\n                    <p data-nodeid=\"22209\">\n                      而且，React 官方及周边生态对 TypeScript\n                      的支持也越来越完善，比如 create-react-app 支持 TypeScript\n                      模板、babel 支持转译 TypeScript。要知道，在 2018\n                      年我们还需要手动搭建 TypeScript\n                      开发环境，现在通过以下命令即可快速创建 TypeScript\n                      应用，并且还不用过分关心 tsconfig\n                      和开发构建相关的配置，只需把重心放在 React 和 TypeScript\n                      的使用上（坏处则是修改默认配置会比较麻烦）。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\">npm i create<span class=\"hljs-literal\">-react</span><span class=\"hljs-literal\">-app</span> <span class=\"hljs-literal\">-g</span>;\n</div></li><li><div class=\"code-word\">create<span class=\"hljs-literal\">-react</span><span class=\"hljs-literal\">-app</span> my<span class=\"hljs-literal\">-ts</span><span class=\"hljs-literal\">-app</span> -<span class=\"hljs-literal\">-template</span> typescript;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">cd</span> my<span class=\"hljs-literal\">-ts</span><span class=\"hljs-literal\">-app</span>;\n</div></li><li><div class=\"code-word\">npm <span class=\"hljs-built_in\">start</span>; // 或者 yarn <span class=\"hljs-built_in\">start</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22211\">\n                      接下来我们将分别从\n                      Service、Component、状态管理这三个分层介绍 TypeScript 在\n                      React App 开发中的实践。\n                    </p>\n                    <h4 data-nodeid=\"22212\">Service 类型化</h4>\n                    <p data-nodeid=\"22213\">\n                      首先我们介绍的是 TypeScript 在 Service 层的应用，称之为\n                      Service 类型化，实际就是把 JavaScript\n                      编写的接口调用代码使用 TypeScript 实现。\n                    </p>\n                    <p data-nodeid=\"22214\">\n                      举个例子， 以下是使用 JavaScript 编写的 getUserById 方法：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getUserById = <span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> fetch(<span class=\"hljs-string\">\\`/api/get/user/by/<span class=\"hljs-subst\">${id}</span>\\`</span>, { <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22216\">\n                      在这个示例中，除了知道参数名 id\n                      以外，我们对该方法接收参数、返回数据的类型和格式一无所知。\n                    </p>\n                    <p data-nodeid=\"22217\">\n                      以上示例换成 TypeScript 实现后效果如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getUserById = (id: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">Promise</span>&lt;{ id: <span class=\"hljs-built_in\">number</span>; name: <span class=\"hljs-built_in\">string</span> }&gt; =&gt;\n</div></li><li><div class=\"code-word\">  fetch(<span class=\"hljs-string\">\\`/api/get/user/by/<span class=\"hljs-subst\">${id}</span>\\`</span>, { method: <span class=\"hljs-string\">'GET'</span> }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> res.json());\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { id2, name } = <span class=\"hljs-keyword\">await</span> getUserById(<span class=\"hljs-string\">'string'</span>); <span class=\"hljs-comment\">// ts(2339) ts(2345)</span>\n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22219\">\n                      在使用 TypeScript 的示例中，我们可以清楚地知道 getUserById\n                      方法接收了一个不可缺省、number 类型的参数\n                      id，返回的数据是一个异步的包含数字类型属性 id\n                      和字符串类型属性 name\n                      的对象。而且如果我们错误地调用该方法，比如第 5\n                      行解构了一个不存在的属性 id2，就提示了一个 ts(2339)\n                      错误，入参 'string' 类型不匹配也提示了一个 ts(2345) 错误。\n                    </p>\n                    <p data-nodeid=\"22220\">\n                      通过两个示例的对比，Service 类型化的优势十分明显。\n                    </p>\n                    <p data-nodeid=\"22221\">\n                      但是，在实际项目中，我们需要调用的接口少则数十个，多则成百上千，如果想通过手写\n                      TypeScript\n                      代码的方式定义清楚参数和返回值的类型结构，肯定不是一件轻松的事情。此时，我们可以借助一些工具，并基于格式化的接口文档自动生成\n                      TypeScript 接口调用代码。\n                    </p>\n                    <p data-nodeid=\"22222\">\n                      在业务实践中，前后端需要约定统一的接口规范，并使用格式化的\n                      Swagger 或者 YAPI 等方式定义接口格式，然后自动生成\n                      TypeScript\n                      接口调用代码。目前，这块已经有很多成熟、开源的技术方案，例如<a\n                        href=\"https://swagger.io/tools/swagger-codegen/\"\n                        data-nodeid=\"22361\"\n                        >Swagger Codegen</a\n                      >、<a\n                        href=\"https://github.com/acacode/swagger-typescript-api\"\n                        data-nodeid=\"22365\"\n                        >swagger-typescript-api</a\n                      >、<a\n                        href=\"https://gogoyqj.github.io/auto-service/\"\n                        data-nodeid=\"22369\"\n                        >Autos</a\n                      >、<a\n                        href=\"https://github.com/fjc0k/yapi-to-typescript\"\n                        data-nodeid=\"22373\"\n                        >yapi-to-typescript</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"22223\">\n                      此外，对于前后端使用 GraphQL\n                      交互的业务场景，我们也可以使用<a\n                        href=\"https://graphql-code-generator.com/\"\n                        data-nodeid=\"22378\"\n                        >GraphQL Code Generator</a\n                      >等工具生成 TypeScript\n                      接口调用代码。你可以通过官方文档了解这些自动化工具的更多信息，这里就不做深入介绍了。\n                    </p>\n                    <p data-nodeid=\"22224\">\n                      <strong data-nodeid=\"22383\"\n                        >以上提到的 Service 类型化其实并未与 React\n                        深度耦合，因此我们也可以在 Vue 或者其他框架中使用\n                        TypeScript 手写或者基于工具生成接口调用代码。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"22225\">\n                      接下来我们将学习 TypeScript 在 React Component\n                      中的应用，将其称之为 Component 类型化。\n                    </p>\n                    <h4 data-nodeid=\"22226\">Component 类型化</h4>\n                    <p data-nodeid=\"22227\">\n                      Component 类型化的本质在于清晰地表达组件的属性、状态以及\n                      JSX 元素的类型和结构。\n                    </p>\n                    <blockquote data-nodeid=\"22228\">\n                      <p data-nodeid=\"22229\">\n                        注意：TypeScript 中有专门的 .tsx 文件用来编写 React\n                        组件，并且不能使用与 JSX\n                        语法冲突的尖括号类型断言（“&lt;类型&gt;”）。此外，我们还需要确保安装了\n                        @types/react、@types/react-dom 类型声明，里边定义了\n                        React 和 ReactDOM 模块所有的接口和类型。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"22230\">\n                      我们首先了解一下最常用的几个接口和类型。\n                    </p>\n                    <p data-nodeid=\"22231\">\n                      <strong data-nodeid=\"22394\">（1）class 组件</strong>\n                    </p>\n                    <p data-nodeid=\"22232\">\n                      所有的 class 组件都是基于****React.Component 和\n                      React.PureComponent 基类创建的，下面我们看一个具体示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> IEProps {\n</div></li><li><div class=\"code-word\">  Cp?: React.ComponentClass&lt;{ id?: <span class=\"hljs-built_in\">number</span> }&gt;;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> IEState { id: <span class=\"hljs-built_in\">number</span>; }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> ClassCp: React.ComponentClass&lt;IEProps, IEState&gt; = <span class=\"hljs-keyword\">class</span> ClassCp <span class=\"hljs-keyword\">extends</span> React.Component&lt;IEProps, IEState&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> state: IEState = { id: <span class=\"hljs-number\">1</span> };\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> { Cp } = <span class=\"hljs-keyword\">this</span>.props <span class=\"hljs-keyword\">as</span> Required&lt;IEProps&gt;;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> &lt;Cp id={<span class=\"hljs-string\">\\`<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.state.id}</span>\\`</span>} /&gt;; <span class=\"hljs-comment\">// ts(2322)</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">static</span> defaultProps: Partial&lt;IEProps&gt; = {\n</div></li><li><div class=\"code-word\">    Cp: <span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> React.Component { render = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-literal\">null</span> }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22234\">\n                      在示例中的第 5~14 行，因为 React.Component 基类接收了\n                      IEProps 和 IEState 两个类型入参，并且类型化了 class 组件 E\n                      的 props、state 和 defaultProps\n                      属性，所以如果我们错误地调用了组件 props 中 Cp 属性，第 9\n                      行就会提示一个 ts(2322) 错误。\n                    </p>\n                    <p data-nodeid=\"23163\" class=\"\">\n                      然后我们可以使用接口类型 React.ComponentClass 来指代所有\n                      class 组件的类型。例如在第 5 行，我们可以把 class 组件\n                      ClassCp 赋值给 React.ComponentClass 类型的变量 ClassCp。\n                    </p>\n\n                    <p data-nodeid=\"22236\" class=\"\">\n                      但在业务实践中，我们往往只使用 React.ComponentClass\n                      来描述外部组件或者高阶组件属性的类型。比如在示例中的第 2\n                      行，我们使用了 React.ComponentClass 描述 class 组件 E 的\n                      Cp 属性，而不会像第 5 行那样，把定义好的 class\n                      组件赋值给一个 React.ComponentClass 类型的变量。\n                    </p>\n                    <p data-nodeid=\"22237\">\n                      此外，在定义 class 组件时，使用 public/private\n                      控制属性/方法的可见性，以及使用Readonly 标记 state、props\n                      为只读，都是特别推荐的实践经验。\n                    </p>\n                    <p data-nodeid=\"22238\">下面我们看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">class</span> ClassCpWithModifier <span class=\"hljs-keyword\">extends</span> React.Component&lt;Readonly&lt;IEProps&gt;, Readonly&lt;IEState&gt;&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">private</span> gid: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> state: Readonly&lt;IEState&gt; = { id: <span class=\"hljs-number\">1</span> };\n</div></li><li><div class=\"code-word\">  render() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.state.id = <span class=\"hljs-number\">2</span>; } <span class=\"hljs-comment\">// ts(2540)</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22240\">\n                      在示例中的第 2 行，如果我们不希望对外暴露 gid\n                      属性，就可以把它标记为 private 私有。\n                    </p>\n                    <p data-nodeid=\"22241\">\n                      如果我们想禁止直接修改 state、props 属性，则可以在第 1\n                      行中使用 Readonly 包裹\n                      IEProps、IEState。此时，如果我们在第 4 行直接给 state id\n                      属性赋值，就会提示一个 ts(2540) 错误。\n                    </p>\n                    <p data-nodeid=\"22242\">\n                      <strong data-nodeid=\"22412\">函数组件</strong>\n                    </p>\n                    <p data-nodeid=\"22243\">\n                      我们可以使用类型 React.FunctionComponent（简写为\n                      React.FC）描述函数组件的类型。因为函数组件没有 state\n                      属性，所以我们只需要类型化 props。\n                    </p>\n                    <p data-nodeid=\"22244\">下面我们看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">interface IEProps { id?: number; }\n</div></li><li><div class=\"code-word\">const ExplicitFC: React.FC&lt;IEProps&gt; = props =&gt; &lt;&gt;{props.id}&lt;/&gt;; // ok\n</div></li><li><div class=\"code-word\">ExplicitFC.defaultProps = { id: 1 } // ok id must be number\n</div></li><li><div class=\"code-word\">const ExplicitFCEle = &lt;ExplicitFC id={1} /&gt;; // ok id must be number\n</div></li><li><div class=\"code-word\">const ExplicitFCWithError: React.FC&lt;IEProps&gt; = props =&gt; &lt;&gt;{props.id2}&lt;/&gt;; // ts(2399)\n</div></li><li><div class=\"code-word\">ExplicitFCWithError.defaultProps = { id2: 1 } // ts(2332)\n</div></li><li><div class=\"code-word\">const thisIsJSX2 = &lt;ExplicitFCWithError id2={2} /&gt;; // ts(2332)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23817\" class=\"te-preview-highlight\">\n                      在上述示例中，因为我们定义了类型是 React.FC<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"23819\"\n                        >&lt;IEProps&gt;</code\n                      >\n                      的组件 ExplicitFC、ExplicitFCWithError，且类型入参 IEProps\n                      可以同时约束 props 参数和 defaultProps 属性的类型，所以第\n                      2~4 行把 number 类型值赋予接口中已定义的 id\n                      属性可以通过静态类型检测。但是，在第 5~7\n                      行，因为操作了未定义的属性 id2，所以提示了 ts(2399)、\n                      ts(2332) 错误。\n                    </p>\n\n                    <blockquote data-nodeid=\"22247\">\n                      <p data-nodeid=\"22248\">\n                        注意：函数组件返回值类型必须是\n                        React.Element（稍后会详细介绍） 或者\n                        null，反过来如果函数返回值类型是 React.Element 或者\n                        null，即便未显式声明类型，函数也是合法的函数组件。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"22249\">\n                      如以下示例中，因为我们定义了未显式声明类型、返回值分别是\n                      null 和 JSX 的函数\n                      ImplicitFCReturnNull、ImplicitFCReturnJSX，所以第 3 行、第\n                      6 行的这两个组件都可以用来创建 JSX。但是，因为第 8\n                      行定义的返回值类型是 number 的函数 NotAFC，所以被用来创建\n                      JSX 时会在第 9 行提示一个 ts(2786) 错误。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ImplicitFCReturnNull</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>; }\n</div></li><li><div class=\"code-word\">ImplicitFCReturnNull.defaultProps = { id: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> ImplicitFCReturnNullEle = &lt;ImplicitFCReturnNull id={<span class=\"hljs-number\">1</span>} /&gt;; <span class=\"hljs-comment\">// ok id must be number</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> ImplicitFCReturnJSX = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> &lt;&gt;&lt;/&gt;;\n</div></li><li><div class=\"code-word\">ImplicitFCReturnJSX.defaultProps = { id2: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> ImplicitFCReturnJSXEle = &lt;ImplicitFCReturnJSX id2={<span class=\"hljs-number\">2</span>} /&gt;; <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 分界线 **/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> NotAFC = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> WithError = &lt;NotAFC /&gt;; <span class=\"hljs-comment\">// ts(2786)</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22251\">\n                      对于编写函数组件而言，显式注解类型是一个好的实践，另外一个好的实践是用\n                      props 解构代替定义 defaultProps 来指定默认属性的值。\n                    </p>\n                    <p data-nodeid=\"22252\">\n                      此外，组件和泛型\n                      class、函数一样，也是可以定义成接收若干个入参的泛型组件。\n                    </p>\n                    <p data-nodeid=\"22253\">\n                      以列表组件为例，<strong data-nodeid=\"22430\"\n                        >我们希望可以根据列表里渲染条目的类型（比如说“User”或“Todo”），分别使用不同的视图组件渲染条目，这个时候就需要使用泛型来约束表示条目类型的入参和视图渲染组件之间的类型关系。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"22254\">下面看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> IUserItem {\n</div></li><li><div class=\"code-word\">  username: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">RenderUser</span>(<span class=\"hljs-params\">props: IUserItem</span>): <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">ReactElement</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> &lt;&gt;{props.username}&lt;/&gt;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> ITodoItem {\n</div></li><li><div class=\"code-word\">  taskName: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">RenderTodo</span>(<span class=\"hljs-params\">props: ITodoItem</span>): <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">ReactElement</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> &lt;&gt;{props.taskName}&lt;/&gt;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ListCp</span>&lt;<span class=\"hljs-title\">Item</span> <span class=\"hljs-title\">extends</span> </span>{}&gt;(props: { Cp: React.ComponentType&lt;Item&gt; }): React.ReactElement {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> &lt;&gt;&lt;/&gt;;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> UserList = &lt;ListCp&lt;IUserItem&gt; Cp={RenderUser} /&gt;; <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> TodoList = &lt;ListCp&lt;ITodoItem&gt; Cp={RenderTodo} /&gt;; <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> UserListError = &lt;ListCp&lt;ITodoItem&gt; Cp={RenderUser} /&gt;; <span class=\"hljs-comment\">// ts(2322)</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> TodoListError = &lt;ListCp&lt;IUserItem&gt; Cp={RenderTodo} /&gt;; <span class=\"hljs-comment\">// ts(2322)</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22256\">\n                      在示例中的第 13 行，定义的泛型组件 ListCp 通过类型入参\n                      Item 约束接收了 props 的 Cp 属性的具体类型。在第 16 行、第\n                      17 行，因为类型入参 IUserItem、ITodoItem 和 Cp 属性\n                      RenderUser、RenderTodo\n                      类型一一对应，所以可以通过静态类型检测。但是，在第 18\n                      行、第 19 行，因为对应关系不正确，所以提示了一个 ts(2322)\n                      错误。\n                    </p>\n                    <p data-nodeid=\"22257\">\n                      <strong data-nodeid=\"22437\"\n                        >class 组件和函数组件类型组成的联合类型被称之为组件类型\n                        React.ComponentType，组件类型一般用来定义高阶组件的属性</strong\n                      >，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">React.ComponentType&lt;P&gt; = React.ComponentClass&lt;P&gt; | React.FunctionComponent&lt;P&gt;;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22259\">最后介绍几个常用类型：</p>\n                    <ul data-nodeid=\"22260\">\n                      <li data-nodeid=\"22261\">\n                        <p data-nodeid=\"22262\">\n                          <strong data-nodeid=\"22443\"\n                            >元素类型 React.ElementType</strong\n                          >：指的是所有可以通过 JSX\n                          语法创建元素的类型组合，包括html 原生标签（比如 div、a\n                          等）和 React.ComponentType，元素类型可以接收一个表示\n                          props 的类型入参；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22263\">\n                        <p data-nodeid=\"22264\">\n                          <strong data-nodeid=\"22448\"\n                            >元素节点类型 React.ReactElement</strong\n                          >：指的是元素类型通过 JSX\n                          语法创建的节点类型，它可以接收两个分别表示 props\n                          和元素类型的类型入参；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22265\">\n                        <p data-nodeid=\"22266\">\n                          <strong data-nodeid=\"22453\"\n                            >节点类型 React.ReactNode</strong\n                          >：指的是由\n                          string、number、boolean、undefined、null、React.ReactElement\n                          和元素类型是 React.ReactElement\n                          的数组类型组成的联合类型，合法的 class 组件 render\n                          方法返回值类型必须是 React.ReactNode；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"22267\">\n                        <p data-nodeid=\"22268\">\n                          <strong data-nodeid=\"22460\"\n                            >JSX 元素类型 JSX.Element</strong\n                          >：指的是元素类型通过 JSX\n                          语法创建的节点类型，JSX.Element 等于\n                          React.ReactElement&lt;any, any&gt;。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"22269\">\n                      以上就是 React Component 相关的类型及简单的类型化。\n                    </p>\n                    <p data-nodeid=\"22270\">\n                      在实际业务中，因为组件接收的 props\n                      数据可能来自路由、Redux，所以我们还需要对类型进行更明确的分解。\n                    </p>\n                    <p data-nodeid=\"22271\">下面我们看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>; \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { bindActionCreators, Dispatch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"redux\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { connect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-redux\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { RouteComponentProps } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-router-dom'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 路由 Props */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> RouteProps = RouteComponentProps&lt;{ routeId: <span class=\"hljs-built_in\">string</span> }&gt;;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/** Redux Store Props */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> StateProps = ReturnType&lt;<span class=\"hljs-keyword\">typeof</span> mapStateToProps&gt;;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mapStateToProps</span>(<span class=\"hljs-params\">state: {}</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    reduxId: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/** Redux Actions Props */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> DispatchProps = ReturnType&lt;<span class=\"hljs-keyword\">typeof</span> mapDispatchToProps&gt;;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mapDispatchToProps</span>(<span class=\"hljs-params\">dispatch: Dispatch</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    actions: bindActionCreators({\n</div></li><li><div class=\"code-word\">      doSomething: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">    }, dispatch),\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 组件属性 */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> IOwnProps {\n</div></li><li><div class=\"code-word\">  ownId: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 最终 Props */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> CpProps = IOwnProps &amp; RouteProps &amp; StateProps &amp; DispatchProps;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> OriginalCp = <span class=\"hljs-function\">(<span class=\"hljs-params\">props: CpProps</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> {\n</div></li><li><div class=\"code-word\">    match: { params: { routeId } }, <span class=\"hljs-comment\">// 路由 Props</span>\n</div></li><li><div class=\"code-word\">    reduxId, <span class=\"hljs-comment\">// Redux Props</span>\n</div></li><li><div class=\"code-word\">    ownId, <span class=\"hljs-comment\">// 组件 Props</span>\n</div></li><li><div class=\"code-word\">    actions: {\n</div></li><li><div class=\"code-word\">      doSomething <span class=\"hljs-comment\">// Action Props</span>\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">  } = props;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> ConnectedCp = connect&lt;StateProps, DispatchProps, IOwnProps&gt;(mapStateToProps, mapDispatchToProps)(OriginalCp <span class=\"hljs-keyword\">as</span> React.ComponentType&lt;IOwnProps&gt;);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> ConnectedCpJSX = &lt;ConnectedCp ownId={<span class=\"hljs-number\">1</span>} /&gt;; <span class=\"hljs-comment\">// ok</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22273\">\n                      在第 7 行，我们定义了\n                      RouteProps，描述的是从路由中获取的属性。在第 9 行获取了\n                      mapStateToProps 函数返回值类型 StateProps，描述的是从\n                      Redux Store 中获取的属性。\n                    </p>\n                    <p data-nodeid=\"22274\">\n                      在第 16 行，我们获取了 mapDispatchToProps 函数返回值类型\n                      DispatchProps，描述的是 Redux Actions 属性。在第 25\n                      行，我们定义的是组件自有的属性，所以最终组件 OriginalCp\n                      的属性类型 CpProps 是\n                      RouteProps、StateProps、DispatchProps 和 IOwnProps\n                      四个类型的交叉类型。在第 31~38 行，我们解构了 props\n                      中不同来源的属性、方法，并且可以通过静态类型检测。\n                    </p>\n                    <p data-nodeid=\"22275\">\n                      <strong data-nodeid=\"22471\"\n                        >这里插播一道思考题：以上示例会提示一个缺少\n                        react-redux、react-router-dom\n                        类型声明的错误，应该如何解决呢？</strong\n                      >\n                    </p>\n                    <blockquote data-nodeid=\"22276\">\n                      <p data-nodeid=\"22277\">\n                        注意：在示例中的第 41 行，connect 之前，我们把组件\n                        OriginalCp 断言为 React.ComponentType<iownprops>\n                          类型，这样在第 42 行使用组件的时候，就只需要传入\n                          IOwnProps 中定义的属性（因为\n                          RouteProps、StateProps、DispatchProps\n                          属性可以通过路由或者 connect 自动注入）。</iownprops\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"22278\">\n                      这里使用的类型断言是开发 HOC 高阶组件（上边示例中\n                      connect(mapStateToProps, mapDispatchToProps)\n                      返回的是一个高阶组件）的一个惯用技巧，一般我们可以通过划分\n                      HOCProps、IOwnProps 或 Omit\n                      来剔除高阶组件注入的属性，如下示例中的第 4 行、第 5 行。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> IHOCProps { injectId: <span class=\"hljs-built_in\">number</span>; }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> IOwnProps { ownId: <span class=\"hljs-built_in\">number</span>; }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> hoc = &lt;C <span class=\"hljs-keyword\">extends</span> React.ComponentType&lt;<span class=\"hljs-built_in\">any</span>&gt;&gt;<span class=\"hljs-function\">(<span class=\"hljs-params\">cp: C</span>) =&gt;</span> cp;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> InjectedCp1 = hoc(OriginalCp <span class=\"hljs-keyword\">as</span> React.ComponentType&lt;IOwnProps&gt;);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> InjectedCp2 = hoc(OriginalCp <span class=\"hljs-keyword\">as</span> React.ComponentType&lt;Omit&lt;IHOCProps &amp; IOwnProps, <span class=\"hljs-string\">'injectId'</span>&gt;&gt;); \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22280\">\n                      组件类型化还涉及 Hooks\n                      等知识点，限于篇幅，本文就不继续展开了。\n                    </p>\n                    <p data-nodeid=\"22281\">\n                      接下来我们简单了解一下使用 Redux\n                      进行状态管理技术方案的类型化，将其称之为 Redux 类型化。\n                    </p>\n                    <h4 data-nodeid=\"22282\">Redux 类型化</h4>\n                    <p data-nodeid=\"22283\">\n                      Redux 类型化涉及 state、action、reducer\n                      三要素类型化，具体示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// src/redux/user.ts</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// state</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> IUserInfoState {\n</div></li><li><div class=\"code-word\">  userid?: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  username?: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> initialState: IUserInfoState = {};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// action</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> LoginAction {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'userinfo/login'</span>;\n</div></li><li><div class=\"code-word\">  payload: Required&lt;IUserInfoState&gt;;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> LogoutAction {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'userinfo/logout'</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doLogin</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title\">LoginAction</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'userinfo/login'</span>,\n</div></li><li><div class=\"code-word\">    payload: {\n</div></li><li><div class=\"code-word\">      userid: <span class=\"hljs-number\">101</span>,\n</div></li><li><div class=\"code-word\">      username: <span class=\"hljs-string\">'乾元亨利贞'</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doLogout</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title\">LogoutAction</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'userinfo/logout'</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// reducer</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">applyUserInfo</span>(<span class=\"hljs-params\">state = initialState, action: LoginAction | LogoutAction</span>): <span class=\"hljs-title\">IUserInfoState</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">switch</span> (action.type) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'userinfo/login'</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        ...action.payload\n</div></li><li><div class=\"code-word\">      };\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'userinfo/logout'</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {};\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22285\">\n                      在示例中的第 2~7 行，我们定义了 state 的详细类型，并在第\n                      8~29 行分别定义了表示登入、登出的 action\n                      类型和函数，还在第 30~40 行定义了处理前边定义的 action 的\n                      reducer 函数。\n                    </p>\n                    <p data-nodeid=\"22286\">\n                      然后，我们就将类型化后的 state、action、reducer 合并到\n                      redux store，再通过 react-redux 关联 React，这样组件在\n                      connect 之后，就能和 Redux 交互了。\n                    </p>\n                    <p data-nodeid=\"22287\">\n                      不过，因为 state、action、reducer\n                      分别类型化的形式写起来十分复杂，所以我们可以借助\n                      typesafe-actions、redux-actions、rematch、dvajs、@ekit/model\n                      等工具更清晰、高效地组织 Redux\n                      代码。限于篇幅，这里就不做深入介绍了，你可以自行到<a\n                        href=\"https://www.npmjs.com/\"\n                        data-nodeid=\"22491\"\n                        >https://www.npmjs.com/</a\n                      >上查看更多信息。\n                    </p>\n                    <h4 data-nodeid=\"22288\">单元测试</h4>\n                    <p data-nodeid=\"22289\">\n                      我们可以选择 Jest + Enzyme + jsdom + ReactTestUtils 作为\n                      React + TypeScript\n                      应用的单元测试技术方案，不过麻烦的地方在于需要手动配置\n                      Jest、Enzyme。因此，我更推荐选择<a\n                        href=\"https://github.com/testing-library/react-testing-library\"\n                        data-nodeid=\"22497\"\n                        >react-testing-library</a\n                      >这个方案，这也是 create-react-app\n                      默认内置的单元测试方案。\n                    </p>\n                    <p data-nodeid=\"22290\">\n                      如下示例，我们为前边定义的 RenderUser 组件编写了单元测试。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { render, screen } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@testing-library/react'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { RenderUser } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Cp'</span>;\n</div></li><li><div class=\"code-word\">test(<span class=\"hljs-string\">'renders learn react link'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">  render(&lt;RenderUser username={<span class=\"hljs-string\">'乾元亨利贞'</span>} /&gt;);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> linkElement = screen.getByText(<span class=\"hljs-regexp\">/乾元亨利贞/i</span>);\n</div></li><li><div class=\"code-word\">  expect(linkElement).toBeInTheDocument();\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"22292\">\n                      <p data-nodeid=\"22293\">\n                        注意：以上介绍的单测执行环境是 Node.js，TypeScript\n                        会被转译成 CommonJS\n                        格式，而在浏览器端运行时，则会被转译成 ES\n                        格式。因此，不同模块之间存在循环依赖时，转译后代码在浏览器端可以正确运行，而在\n                        Node.js\n                        端运行时可能会出现引入的其他模块成员未定义（undefined）的错误。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"22294\">小结和预告</h3>\n                    <p data-nodeid=\"22295\">\n                      以上就是 TypeScript 和 Dom 原生操作及结合 React 框架在 Web\n                      侧开发的实践建议，其核心在于类型化 Dom API 和 React\n                      组件、Redux 和 Service。\n                    </p>\n                    <p data-nodeid=\"22296\">\n                      插播一道思考题：类型化 React\n                      组件的要义是什么？欢迎你在留言区进行互动、交流。\n                    </p>\n                    <p data-nodeid=\"22297\">\n                      20 讲我们将学习如何从 JavaScript 迁移到\n                      TypeScript，敬请期待。\n                    </p>\n                    <p data-nodeid=\"22298\">\n                      另外，如果你觉得本专栏有价值，欢迎分享给更多好友~\n                    </p>\n            "}