{"title":"28 | 设计性能守卫系统：完善 CI/CD 流程","context":"\n                    <p data-nodeid=\"118470\">\n                      性能始终是宏大的话题，前面几讲我们或多或少都有涉及性能优化的各种方案。其实，除了传统的性能优化手段以外，我们还需要对性能进行把关，目的是在性能恶化时有所感知、有所防控。那么，一个性能守卫系统即性能监控系统究竟应该如何设计呢？\n                    </p>\n                    <p data-nodeid=\"118471\">\n                      借助 Node.js 的能力，这一讲我们就下钻到 CI/CD\n                      流程，设计一个性能守卫系统。希望通过这一讲的学习，你可以认识到：Node.js\n                      除了同构直出、数据聚合以外，还能做一些重要的，且有趣的服务。\n                    </p>\n                    <h3 data-nodeid=\"118472\">性能守卫理论基础</h3>\n                    <p data-nodeid=\"118473\">\n                      性能守卫的含义是：对每次上线进行性能把关，对性能恶化做到提前预警。它包含了一个性能监控平台，同时也需要给出更多的性能建议和指标建设。\n                    </p>\n                    <p data-nodeid=\"118474\">\n                      那么我们如何感知到性能的好坏呢？我们对于\n                      Load/DOMContentLoaded 事件、FP/FCP\n                      指标已经耳熟能详了，下面我们再扩充几个更加现代化的指标。\n                    </p>\n                    <ul data-nodeid=\"118475\">\n                      <li data-nodeid=\"118476\">\n                        <p data-nodeid=\"118477\">\n                          <strong data-nodeid=\"118648\"\n                            >LCP（Largest Contentful Paint）</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118478\">\n                      衡量页面的加载体验，它表示视口内可见的最大内容元素的渲染时间。相比\n                      FCP，这个指标可以<strong data-nodeid=\"118654\"\n                        >更加真实地反映具体内容加载速度</strong\n                      >。比如，如果页面渲染前有一个 loading 动画，那么 FCP\n                      可能会以 loading 动画出现的时间为准，而 LCP 定义了 loading\n                      动画加载后，真实渲染出内容的时间。\n                    </p>\n                    <ul data-nodeid=\"118479\">\n                      <li data-nodeid=\"118480\">\n                        <p data-nodeid=\"118481\">\n                          <strong data-nodeid=\"118658\"\n                            >FID（First Input Delay）</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118482\">\n                      衡量可交互性，它表示用户和页面进行首次交互操作所花费的时间。它比\n                      TTI（Time to\n                      Interact）更加提前，这个阶段虽然页面已经显示出部分内容，但并不能完全具备可交互性，对于用户的响应可能会有较大的延迟。\n                    </p>\n                    <ul data-nodeid=\"118483\">\n                      <li data-nodeid=\"118484\">\n                        <p data-nodeid=\"118485\">\n                          <strong data-nodeid=\"118663\"\n                            >CLS（Cumulative Layout Shift）</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118486\">\n                      衡量视觉稳定性，表示页面的整个生命周期中，发生的每个意外的样式移动的所有单独布局更改得分的总和。所以这个分数当然<strong\n                        data-nodeid=\"118669\"\n                        >越小越好</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"118487\">\n                      以上是几个重要的、现代化的性能指标。结合我们传统的\n                      FP/FCP/FMP\n                      时间等，我们可以构建出一个相对完备的指标系统。这里我们就不再一一分析如何获取和收集这些性能指标了，相关内容社区上有不少文章。我们把目光放到更高层面，请你思考一下：如何从这些指标中，得到监控素材？\n                    </p>\n                    <p data-nodeid=\"118488\">\n                      业界公认的监控素材主要由两方面提供：\n                    </p>\n                    <ul data-nodeid=\"118489\">\n                      <li data-nodeid=\"118490\">\n                        <p data-nodeid=\"118491\">\n                          真实用户监控（Real User Monitoring，RUM）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118492\">\n                        <p data-nodeid=\"118493\">\n                          合成监控（Synthetic Monitoring，SYN）\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118494\">\n                      真实用户监控是基于用户真实访问应用情况，在应用生命周期内计算产出性能指标，并进行上报。开发者拉取日志服务器上的指标数据，进行清洗加工，最终生成真实的访问监控报告。\n                    </p>\n                    <p data-nodeid=\"118495\">\n                      真实用户监控一般搭配稳定的 SDK，会<strong\n                        data-nodeid=\"118680\"\n                        >在一定程度上影响用户的访问性能</strong\n                      >，也给用户带来了额外的流量消耗。\n                    </p>\n                    <p data-nodeid=\"118496\">\n                      合成监控是一种实验室数据，它指的是在某一个模拟场景中，通过工具，搭配规则和性能审计条目，得到一个合成的监控报告。\n                    </p>\n                    <p data-nodeid=\"118497\">\n                      合成监控的优点比较明显，它的实现比较简单，有现成成熟的解决方案；如果搭配丰富的场景和规则，得到的数据类型也会较多。但它的缺点是<strong\n                        data-nodeid=\"118691\"\n                        >数据量相对较小</strong\n                      >，且<strong data-nodeid=\"118692\"\n                        >模拟条件配置相对复杂</strong\n                      >，无法完全反映真实场景。\n                    </p>\n                    <p data-nodeid=\"118498\">\n                      而在 CI/CD pipeline\n                      上，我们需要设计的性能守卫方案就是一种合成监控方案。在方案设计上，我们需要做到扬长避短。\n                    </p>\n                    <h3 data-nodeid=\"118499\">Lighthouse 原理介绍</h3>\n                    <p data-nodeid=\"118500\">\n                      前文提到，合成监控有成熟的方案，比如\n                      Lighthouse。我们的方案也基于 Lighthouse 进行，这里对\n                      Lighthouse 原理进行介绍。\n                    </p>\n                    <p data-nodeid=\"118501\">\n                      Lighthouse\n                      是一个开源的自动化工具，它提供了四种使用方式，分别是：\n                    </p>\n                    <ul data-nodeid=\"118502\">\n                      <li data-nodeid=\"118503\">\n                        <p data-nodeid=\"118504\">Chrome DevTools</p>\n                      </li>\n                      <li data-nodeid=\"118505\">\n                        <p data-nodeid=\"118506\">Chrome 插件</p>\n                      </li>\n                      <li data-nodeid=\"118507\">\n                        <p data-nodeid=\"118508\">Node cli</p>\n                      </li>\n                      <li data-nodeid=\"118509\">\n                        <p data-nodeid=\"118510\">Node module</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118511\">\n                      我们先通过 Chrome DevTools 来迅速体验一下 Lighthouse。在\n                      Audits\n                      面板下，进行相关测试，可以得到一个网址的相关测试报告，内容如下图：\n                    </p>\n                    <p data-nodeid=\"120345\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/1E/30/Cgp9HWBQb2CADycKAAQtT4ZYeUw221.png\"\n                        alt=\"2021316-164058.png\"\n                        data-nodeid=\"120348\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"118514\" class=\"\">\n                      这个报告是如何得出的呢？我们先来看 Lighthouse 的架构图：\n                    </p>\n                    <p data-nodeid=\"121089\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/1E/30/Cgp9HWBQb2mAJMDKAAY-FB_Vr9U016.png\"\n                        alt=\"2021316-16411.png\"\n                        data-nodeid=\"121092\"\n                      />\n                    </p>\n\n                    <div data-nodeid=\"121825\" class=\"\">\n                      <p style=\"text-align: center\">Lighthouse 架构图</p>\n                    </div>\n\n                    <p data-nodeid=\"118518\">图中的一些关键名词：</p>\n                    <ul data-nodeid=\"118519\">\n                      <li data-nodeid=\"118520\">\n                        <p data-nodeid=\"118521\">\n                          Driver（驱动器），根据<a\n                            href=\"https://chromedevtools.github.io/devtools-protocol/\"\n                            data-nodeid=\"118720\"\n                            >Chrome Debugging Protocol</a\n                          >协议与浏览器交互的对象；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118522\">\n                        <p data-nodeid=\"118523\">\n                          Gatherers（采集器），调用 Driver\n                          运行浏览器命令后得到的网页基础信息，每个采集器都会收集自己的目标信息，并生成中间产物（Artifacts）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118524\">\n                        <p data-nodeid=\"118525\">\n                          Artifacts（中间产物），一系列 Gatherers 的集合，会被\n                          Audits 使用，并计算得分；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118526\">\n                        <p data-nodeid=\"118527\">\n                          Audits（审计项），以 Artifacts\n                          作为输入，进行性能测试并评估分数后得到的\n                          LHAR（LightHouse Audit Result Object）标准数据对象。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118528\">\n                      我们结合上述名词，对 Lighthouse 架构原理进行分析：\n                    </p>\n                    <ul data-nodeid=\"118529\">\n                      <li data-nodeid=\"118530\">\n                        <p data-nodeid=\"118531\">\n                          首先，Lighthouse 驱动 Driver，底层通过 Chrome DevTool\n                          Protocol 调用浏览器进行应用的加载和渲染；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118532\">\n                        <p data-nodeid=\"118533\">\n                          然后通过 Gatherers 模块集合，获取收集到的 Artifacts\n                          信息；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118534\">\n                        <p data-nodeid=\"118535\">\n                          Artifacts 信息在 Auditing\n                          阶段，通过对自定义指标的审计，得到 Audits\n                          结果，并生成相关文件。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118536\">\n                      从该流程中我们可以得到的关键信息：\n                    </p>\n                    <ul data-nodeid=\"118537\">\n                      <li data-nodeid=\"118538\">\n                        <p data-nodeid=\"118539\">\n                          Lighthouse 会与浏览器建立连接，并通过 CDP\n                          与浏览器进行交互；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118540\">\n                        <p data-nodeid=\"118541\">\n                          通过 Lighthouse，我们可以自定义审计项并得到审计结果。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118542\">\n                      在我们的性能守卫系统中，是采用 Lighthouse\n                      的后两种使用方式（Node.js cli/ Node.js\n                      模块）进行性能跑分的，下面代码给出一个基本的使用方式：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> fs = require(<span class=\"hljs-string\">'fs'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> lighthouse = require(<span class=\"hljs-string\">'lighthouse'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> chromeLauncher = require(<span class=\"hljs-string\">'chrome-launcher'</span>);\n</div></li><li><div class=\"code-word\">(async () =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 启动一个 chrome，</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> chrome = await chromeLauncher.launch({chromeFlags: [<span class=\"hljs-string\">'--headless'</span>]});\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> options = {logLevel: <span class=\"hljs-string\">'info'</span>, output: <span class=\"hljs-string\">'html'</span>, onlyCategories: [<span class=\"hljs-string\">'performance'</span>], port: chrome.port};\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 使用 lighthouse 对目标页面进行跑分</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> runnerResult = <span class=\"hljs-function\">await <span class=\"hljs-title\">lighthouse</span><span class=\"hljs-params\">(<span class=\"hljs-string\">'https://example.com'</span>, options)</span></span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// \\`.report\\` 是一个 html 类型的分析页面</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> reportHtml = runnerResult.report;\n</div></li><li><div class=\"code-word\">  fs.writeFileSync(<span class=\"hljs-string\">'lhreport.html'</span>, reportHtml);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// \\`.lhr\\` 是用于 lighthous-ci 的结果集合</span>\n</div></li><li><div class=\"code-word\">  console.log(<span class=\"hljs-string\">'Report is done for'</span>, runnerResult.lhr.finalUrl);\n</div></li><li><div class=\"code-word\">  console.log(<span class=\"hljs-string\">'Performance score was'</span>, runnerResult.lhr.categories.performance.score * <span class=\"hljs-number\">100</span>);\n</div></li><li><div class=\"code-word\">  await chrome.kill();\n</div></li><li><div class=\"code-word\">})();\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"118544\">\n                      上面的代码描述了一个简单的 Node.js 环境使用 Lighthouse\n                      的场景。其中提到了 lighthous-ci，这是官方给出的 CI/CD\n                      过程接入 Lighthouse 的方案。但一般在企业中，CI/CD\n                      过程相对敏感，我们的性能守卫系统就需要<strong\n                        data-nodeid=\"118738\"\n                        >在私有前提下，介入 CI/CD 流程</strong\n                      >，本质上来说是实现一个专有的 lighthous-ci。\n                    </p>\n                    <h3 data-nodeid=\"118545\">性能守卫系统：Perf-patronus</h3>\n                    <p data-nodeid=\"118546\">\n                      我们暂且给性能守卫系统起名为\n                      Perf-patronus，寓意为性能-护卫神。\n                    </p>\n                    <p data-nodeid=\"118547\">\n                      预计 Perf-patronus 会默认监控以下性能指标：\n                    </p>\n                    <ul data-nodeid=\"118548\">\n                      <li data-nodeid=\"118549\">\n                        <p data-nodeid=\"118550\">FCP</p>\n                      </li>\n                      <li data-nodeid=\"118551\">\n                        <p data-nodeid=\"118552\">Total Blocking Time</p>\n                      </li>\n                      <li data-nodeid=\"118553\">\n                        <p data-nodeid=\"118554\">First CPU Idle</p>\n                      </li>\n                      <li data-nodeid=\"118555\">\n                        <p data-nodeid=\"118556\">TTI</p>\n                      </li>\n                      <li data-nodeid=\"118557\">\n                        <p data-nodeid=\"118558\">Speed Index</p>\n                      </li>\n                      <li data-nodeid=\"118559\">\n                        <p data-nodeid=\"118560\">LCP</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118561\">其工作架构和流程如下图所示：</p>\n                    <p data-nodeid=\"122556\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/1E/2D/CioPOWBQb4SAdIJfAAJdsaoSFEo871.png\"\n                        alt=\"2021316-16414.png\"\n                        data-nodeid=\"122559\"\n                      />\n                    </p>\n\n                    <div data-nodeid=\"123282\" class=\"\">\n                      <p style=\"text-align: center\">\n                        Perf-patronus 工作架构及流程图\n                      </p>\n                    </div>\n\n                    <ul data-nodeid=\"118565\">\n                      <li data-nodeid=\"118566\">\n                        <p data-nodeid=\"118567\">\n                          特定环境完成 MR 部署后，开始进行性能体检服务。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118568\">\n                        <p data-nodeid=\"118569\">\n                          性能体检服务由消息队列 worker 消费完成。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118570\">\n                        <p data-nodeid=\"118571\">\n                          每一次性能体检产出体检数据，根据数据内容是否达标，进行后续消息提醒；体检数据内容同时被性能守卫系统平台所消费，展现相关页面的性能情况。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118572\">\n                        <p data-nodeid=\"118573\">性能数据由 Redis 存储。</p>\n                      </li>\n                      <li data-nodeid=\"118574\">\n                        <p data-nodeid=\"118575\">\n                          性能体检相关富媒体资源（页面截图等）可以由容器持久化目录存储，或上传到\n                          OSS 服务\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118576\">预计平台使用情况，如下图所示：</p>\n                    <p data-nodeid=\"124003\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/1E/2D/CioPOWBQb5CALjlnAAK6aSqJM3s808.png\"\n                        alt=\"2021316-164050.png\"\n                        data-nodeid=\"124006\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"118579\">\n                      技术架构流程相对清晰，但我们需要思考一个重要的问题：如何真实反映用户情况？并以此为出发点，完善性能守卫系统的相关设计。\n                    </p>\n                    <p data-nodeid=\"118580\">\n                      <strong data-nodeid=\"118772\"\n                        >如何真实反映用户情况？</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"118581\">\n                      真实用户访问页面的情况千变万化，即便我们的代码没有变化，其他可变因素也会大量存在。因此我们应该统一共识一个相对稳定可靠的性能评判标准，其中关键一环是分析可能出现的可变因素，对每一类可变因素进行不同针对性设计，保证每次性能服务产出结果的说服力和稳定性。\n                    </p>\n                    <p data-nodeid=\"118582\">\n                      <strong data-nodeid=\"118777\">常见不确定和波动因素</strong>\n                    </p>\n                    <ul data-nodeid=\"118583\">\n                      <li data-nodeid=\"118584\">\n                        <p data-nodeid=\"118585\">\n                          <strong data-nodeid=\"118781\">页面不确定性</strong>\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118586\">\n                      比如 A/B\n                      实验情况。这种情况性能体检服务无法进行处理，需要接入者保证页面性能的可对比性。\n                    </p>\n                    <ul data-nodeid=\"118587\">\n                      <li data-nodeid=\"118588\">\n                        <p data-nodeid=\"118589\">\n                          <strong data-nodeid=\"118786\"\n                            >用户侧网络情况不确定性</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118590\">\n                      针对这种情况，性能体检服务应该设计有可靠的 Throttling\n                      机制，以及较合理的请求等待时间。\n                    </p>\n                    <ul data-nodeid=\"118591\">\n                      <li data-nodeid=\"118592\">\n                        <p data-nodeid=\"118593\">\n                          <strong data-nodeid=\"118791\">终端设备不确定性</strong>\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118594\">\n                      性能体检服务应该设计有可靠的 CPU Simulating 能力，并统一\n                      CPU 能力测试范围标准。\n                    </p>\n                    <ul data-nodeid=\"118595\">\n                      <li data-nodeid=\"118596\">\n                        <p data-nodeid=\"118597\">\n                          <strong data-nodeid=\"118798\"\n                            >页面服务器不稳定性</strong\n                          ><br />\n                          这方面因素影响较小，应该不用过多考虑。对于服务挂掉的情况，反映出性能异常即可。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118598\">\n                        <p data-nodeid=\"118599\">\n                          <strong data-nodeid=\"118802\"\n                            >性能体检服务的稳定性</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118600\">\n                      在同一台机器上，如果不确定有其他应用服务，会影响性能体检服务的稳定性和一致性。不过预计该影响因素不大，可以通过模拟网络环境和\n                      CPU 能力，来保障性能体检服务的稳定性和一致性。\n                    </p>\n                    <p data-nodeid=\"118601\">\n                      在对性能服务的跑分设计时，都需要考虑上述可变因素，大体上我们可以通过以下手段，最大化地磨平差异：\n                    </p>\n                    <ul data-nodeid=\"118602\">\n                      <li data-nodeid=\"118603\">\n                        <p data-nodeid=\"118604\">\n                          保证性能体检服务的硬件/容器能力；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118605\">\n                        <p data-nodeid=\"118606\">\n                          需要接入者清楚代码或页面变动对页面性能可能产生的影响，并做好相应接入侧处理；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118607\">\n                        <p data-nodeid=\"118608\">\n                          <strong data-nodeid=\"118811\"\n                            >自动化重复多次跑性能服务，取平均值</strong\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118609\">\n                        <p data-nodeid=\"118610\">\n                          模拟多种网络/终端情况，设计得分权重。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"118611\">\n                      <strong data-nodeid=\"118816\"\n                        >如何解决有“用户态”页面的鉴权问题？</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"118612\">\n                      对于有登录状态的页面，我们提供以下几种方案进行登录状态的性能服务：\n                    </p>\n                    <ul data-nodeid=\"118613\">\n                      <li data-nodeid=\"118614\">\n                        <p data-nodeid=\"118615\">\n                          通过<a\n                            href=\"https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagesetcookiecookies\"\n                            data-nodeid=\"118821\"\n                            >Puppeteer page.cookie</a\n                          >，测试时通过 script 实现登录态；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"118616\">\n                        <p data-nodeid=\"118617\">\n                          通过请求服务时，传递参数解决登录态问题。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"126858\" class=\"\">整体流程</h4>\n\n                    <p data-nodeid=\"118619\">\n                      下面我们通过代码来串联整个流程。入口任务：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">async <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(runOptions: RunOptions)</span> </span>{\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 检查相关数据</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> results = {};\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 使用 Puppeteer 创建一个无头浏览器</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> context = await <span class=\"hljs-keyword\">this</span>.createPuppeteer(runOptions);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 执行必要的登录流程</span>\n</div></li><li><div class=\"code-word\">    await <span class=\"hljs-keyword\">this</span>.Login(context);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 页面打开前的钩子函数</span>\n</div></li><li><div class=\"code-word\">    await <span class=\"hljs-keyword\">this</span>.before(context);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 打开页面，获取 lighthouse 数据</span>\n</div></li><li><div class=\"code-word\">    await <span class=\"hljs-keyword\">this</span>.getLighthouseResult(context);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 页面打开后的钩子函数</span>\n</div></li><li><div class=\"code-word\">    await <span class=\"hljs-keyword\">this</span>.after(context, results);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 收集页面性能数据</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> await <span class=\"hljs-keyword\">this</span>.collectArtifact(context, results);\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">catch</span> (error) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">throw</span> error;\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">finally</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 关闭页面和无头浏览器</span>\n</div></li><li><div class=\"code-word\">    await <span class=\"hljs-keyword\">this</span>.disposeDriver(context);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"118621\">\n                      其中，创建一个 Puppeteer 无头浏览器的逻辑，如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">async <span class=\"hljs-title\">createPuppeteer</span> <span class=\"hljs-params\">(runOptions: RunOptions)</span> </span>{\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 启动配置项可以参考 [puppeteerlaunchoptions](https://zhaoqize.github.io/puppeteer-api-zh_CN/#?product=Puppeteer&amp;version=v5.3.0&amp;show=api-puppeteerlaunchoptions)</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> launchOptions: puppeteer.LaunchOptions = {\n</div></li><li><div class=\"code-word\">    headless: <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-comment\">// 是否采用无头模式</span>\n</div></li><li><div class=\"code-word\">    defaultViewport: { width: <span class=\"hljs-number\">1440</span>, height: <span class=\"hljs-number\">960</span> }, <span class=\"hljs-comment\">// 指定页面视口宽高</span>\n</div></li><li><div class=\"code-word\">    args: [<span class=\"hljs-string\">'--no-sandbox'</span>, <span class=\"hljs-string\">'--disable-dev-shm-usage'</span>],\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// Chromium 安装路径</span>\n</div></li><li><div class=\"code-word\">    executablePath: <span class=\"hljs-string\">'xxx'</span>,\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建一个浏览器对象</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> browser = await puppeteer.launch(launchOptions);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> page = (await browser.pages())[<span class=\"hljs-number\">0</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 返回浏览器和页面对象</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> { browser, page };\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"118623\">\n                      打开相关页面，并执行 Lighthouse 模块，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">async <span class=\"hljs-title\">getLighthouseResult</span><span class=\"hljs-params\">(context: Context)</span> </span>{\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 获取上下文信息，包括 browser 和页面地址</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { browser, url } = context;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 使用 lighthouse 模块进行性能采集</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { artifacts, lhr } = <span class=\"hljs-function\">await <span class=\"hljs-title\">lighthouse</span><span class=\"hljs-params\">(url, {\n</span></span></div></li><li><div class=\"code-word\">    port: new URL(browser.wsEndpoint()).port,\n</div></li><li><div class=\"code-word\">    output: 'json',\n</div></li><li><div class=\"code-word\">    logLevel: 'info',\n</div></li><li><div class=\"code-word\">    emulatedFormFactor: 'desktop',\n</div></li><li><div class=\"code-word\">    throttling: {\n</div></li><li><div class=\"code-word\">      rttMs: <span class=\"hljs-number\">40</span>,\n</div></li><li><div class=\"code-word\">      throughputKbps: <span class=\"hljs-number\">10</span> * <span class=\"hljs-number\">1024</span>,\n</div></li><li><div class=\"code-word\">      cpuSlowdownMultiplier: <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">      requestLatencyMs: <span class=\"hljs-number\">0</span>, \n</div></li><li><div class=\"code-word\">      downloadThroughputKbps: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">      uploadThroughputKbps: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    disableDeviceEmulation: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 只检测 performance 模块</span>\n</div></li><li><div class=\"code-word\">    onlyCategories: [<span class=\"hljs-string\">'performance'</span>],\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 回填数据</span>\n</div></li><li><div class=\"code-word\">  context.lhr = lhr;\n</div></li><li><div class=\"code-word\">  context.artifacts = artifacts;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"118625\">\n                      上述流程都是常规启用 Lighthouse 模块，在 Node.js\n                      环境中对相关页面执行 Lighthouse 的逻辑。\n                    </p>\n                    <p data-nodeid=\"118626\">\n                      我们自定义的逻辑往往可以通过 Lighthouse 插件实现，一个\n                      Lighthouse 插件就是一个 Node.js 模块，在插件中我们可以定义\n                      Lighthouse 的检查项，并在产出报告中以一个新的 category\n                      呈现。\n                    </p>\n                    <p data-nodeid=\"118627\">\n                      举个例子，我们想要实现“检查页面中是否含有大小超过 5MB 的\n                      GIF 图片”的任务，如以下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 对应 audits</span>\n</div></li><li><div class=\"code-word\">  audits: [{\n</div></li><li><div class=\"code-word\">    path: <span class=\"hljs-string\">'lighthouse-plugin-cinememe/audits/cinememe.js'</span>,\n</div></li><li><div class=\"code-word\">  }],\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 该 plugin 对应的 category</span>\n</div></li><li><div class=\"code-word\">  category: {\n</div></li><li><div class=\"code-word\">    title: <span class=\"hljs-string\">'Obligatory Cinememes'</span>,\n</div></li><li><div class=\"code-word\">    description: <span class=\"hljs-string\">'Modern webapps should have cinememes to ensure a positive '</span> +\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'user experience.'</span>,\n</div></li><li><div class=\"code-word\">    auditRefs: [\n</div></li><li><div class=\"code-word\">      {id: <span class=\"hljs-string\">'cinememe'</span>, weight: <span class=\"hljs-number\">1</span>},\n</div></li><li><div class=\"code-word\">    ],\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"118629\">对应自定义 Audits，如下代码：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">'use strict'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> Audit = require(<span class=\"hljs-string\">'lighthouse'</span>).Audit;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 继承 Audit 类</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CinememeAudit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Audit</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> get <span class=\"hljs-title\">meta</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">      id: <span class=\"hljs-string\">'cinememe'</span>,\n</div></li><li><div class=\"code-word\">      title: <span class=\"hljs-string\">'Has cinememes'</span>,\n</div></li><li><div class=\"code-word\">      failureTitle: <span class=\"hljs-string\">'Does not have cinememes'</span>,\n</div></li><li><div class=\"code-word\">      description: <span class=\"hljs-string\">'This page should have a cinememe in order to be a modern '</span> +\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">'webapp.'</span>,\n</div></li><li><div class=\"code-word\">      requiredArtifacts: [<span class=\"hljs-string\">'ImageElements'</span>],\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title\">audit</span><span class=\"hljs-params\">(artifacts)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 默认 hasCinememe 为 false（大小超过 5MB 的 GIF 图片）</span>\n</div></li><li><div class=\"code-word\">    let hasCinememe = <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 非 Cinememe 图片结果</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> results = [];\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 过滤筛选相关图片</span>\n</div></li><li><div class=\"code-word\">    artifacts.ImageElements.filter(image =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> !image.isCss &amp;&amp;\n</div></li><li><div class=\"code-word\">        image.mimeType &amp;&amp;\n</div></li><li><div class=\"code-word\">        image.mimeType !== <span class=\"hljs-string\">'image/svg+xml'</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">        image.naturalHeight &gt; <span class=\"hljs-number\">5</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">        image.naturalWidth &gt; <span class=\"hljs-number\">5</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">        image.displayedWidth &amp;&amp;\n</div></li><li><div class=\"code-word\">        image.displayedHeight;\n</div></li><li><div class=\"code-word\">    }).forEach(image =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (image.mimeType === <span class=\"hljs-string\">'image/gif'</span> &amp;&amp; image.resourceSize &gt;= <span class=\"hljs-number\">5000000</span>) {\n</div></li><li><div class=\"code-word\">        hasCinememe = <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        results.push(image);\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> headings = [\n</div></li><li><div class=\"code-word\">      {key: <span class=\"hljs-string\">'src'</span>, itemType: <span class=\"hljs-string\">'thumbnail'</span>, text: <span class=\"hljs-string\">''</span>},\n</div></li><li><div class=\"code-word\">      {key: <span class=\"hljs-string\">'src'</span>, itemType: <span class=\"hljs-string\">'url'</span>, text: <span class=\"hljs-string\">'url'</span>},\n</div></li><li><div class=\"code-word\">      {key: <span class=\"hljs-string\">'mimeType'</span>, itemType: <span class=\"hljs-string\">'text'</span>, text: <span class=\"hljs-string\">'MIME type'</span>},\n</div></li><li><div class=\"code-word\">      {key: <span class=\"hljs-string\">'resourceSize'</span>, itemType: <span class=\"hljs-string\">'text'</span>, text: <span class=\"hljs-string\">'Resource Size'</span>},\n</div></li><li><div class=\"code-word\">    ];\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">      score: hasCinememe &gt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">      details: Audit.makeTableDetails(headings, results),\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = CinememeAudit;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"118631\">\n                      通过上面插件，我们就可以在 Node.js 环境中，结合 CI/CD\n                      流程，找出页面中大小超过 5MB 的 GIF 图片了。\n                    </p>\n                    <p data-nodeid=\"118632\">\n                      由插件原理可知，一个性能守卫系统，是通过常规插件和自定义插件集合而成的，具有良好的扩展性。\n                    </p>\n                    <h3 data-nodeid=\"118633\">总结</h3>\n                    <p data-nodeid=\"118634\">\n                      这一讲我们通过一个性能守卫系统，拓宽了 Node.js\n                      的应用场景。我们需要对性能话题有一个更现代化的理论认知：传统的性能指标数据依然重要，但是现代化的性能指标数据也在很大程度上反映了用户体验。我们也应该通过学习，了解\n                      Lighthouse 架构及其原理，并能通过 Lighthouse\n                      插件进行自定义扩展，实现我们自主的性能指标考量。\n                    </p>\n                    <p data-nodeid=\"118635\" class=\"\">本讲内容总结如下：</p>\n                    <p data-nodeid=\"127566\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/1E/2D/CioPOWBQb6SAJRoFAAK5HjTcnpc020.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"127569\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"118637\">\n                      一方面，性能知识把基于 Lighthouse 的 Node.js 相关模块搬上\n                      CI/CD\n                      系统，这样一来我们能够守卫每一次上线，分析每一次上线对性能产生的影响——这是非常重要的实践。任何能力和扩展如果只是在本地，或通过\n                      Chrome 插件的形式尝鲜显然是不够的，借助于\n                      Node.js，我们能做到更多。\n                    </p>\n                    <p data-nodeid=\"118638\">\n                      下一讲，我们将深入讲解 Node.js\n                      另外一个重要的应用场景：企业级 BFF\n                      网关。网关这个话题可以和微服务、Serverless\n                      等概念相结合，想象空间无限大；同时我们又要深入到网关实现代码，抽丝剥茧，请你做好准备。\n                    </p>\n            "}