{"title":"02 | CSS：页面布局的基本规则和方式","context":"\n                    <p data-nodeid=\"3145\" class=\"\">\n                      前端页面的布局和样式编写是传统技能，但页面样式的实现大多数情况下都无法速成，需要通过不断练习、反复地调试才能熟练掌握，因此有一些同学常常会感到疑惑，比如：\n                    </p>\n                    <ol data-nodeid=\"3146\">\n                      <li data-nodeid=\"3147\">\n                        <p data-nodeid=\"3148\">\n                          一个元素总宽高为<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"3373\"\n                            >50px</code\n                          >，要怎么在调整边框大小的时候，不需要重新计算和设置<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"3375\"\n                            >width/height</code\n                          >呢？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3149\">\n                        <p data-nodeid=\"3150\">\n                          为什么给一些元素设置宽高，但是却不生效？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3151\">\n                        <p data-nodeid=\"3152\">\n                          如何将一个元素固定在页面的某个位置，具体怎么做？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3153\">\n                        <p data-nodeid=\"3154\">\n                          为什么将某个元素<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"3380\"\n                            >z-index</code\n                          >设置为<code data-backticks=\"1\" data-nodeid=\"3382\"\n                            >9999999</code\n                          >，但是它依然被其他元素遮挡住了呢？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3155\">\n                        <p data-nodeid=\"3156\">\n                          为什么将某个元素里面的元素设置为<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"3385\"\n                            >float</code\n                          >之后，这个元素的高度就歪了呢？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3157\">\n                        <p data-nodeid=\"3158\">\n                          让一个元素进行垂直和水平居中，有多少种实现方式？\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"3159\">\n                      这些问题产生的根本，是对页面布局规则和常见页面布局方式没掌握透彻。今天我就帮你重新梳理下页面布局的基本规则和布局方式，让以上问题迎刃而解。\n                    </p>\n                    <h3 data-nodeid=\"3160\">页面布局的基本规则</h3>\n                    <p data-nodeid=\"3161\">\n                      我们在调试页面样式的时候，如果你不了解页面布局规则，会经常遇到“这里为什么歪了”“这里为什么又好了”这样的困惑。其实页面的布局不只是“碰运气”似的调整样式，浏览器的页面布局会有一些规则，包括：\n                    </p>\n                    <ul data-nodeid=\"3162\">\n                      <li data-nodeid=\"3163\">\n                        <p data-nodeid=\"3164\">盒模型计算；</p>\n                      </li>\n                      <li data-nodeid=\"3165\">\n                        <p data-nodeid=\"3166\">内联元素与块状元素布局规则；</p>\n                      </li>\n                      <li data-nodeid=\"3167\">\n                        <p data-nodeid=\"3168\">文档流布局；</p>\n                      </li>\n                      <li data-nodeid=\"3169\">\n                        <p data-nodeid=\"3170\">元素堆叠。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3171\">下面我们可以结合问题逐一来看。</p>\n                    <h4 data-nodeid=\"3172\">盒模型计算</h4>\n                    <p data-nodeid=\"3173\">\n                      问题 1：一个元素总宽高为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3398\"\n                        >30px</code\n                      >，要怎么在调整边框大小的时候，不需要重新计算和设置<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3400\"\n                        >width/height</code\n                      >呢？\n                    </p>\n                    <p data-nodeid=\"3174\">\n                      这个问题涉及浏览器布局中的盒模型计算。什么是盒模型？浏览器对文档进行布局的时候，会将每个元素都表示为这样一个盒子。\n                    </p>\n                    <p data-nodeid=\"3175\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/F7/Cgp9HWBwBrWAfuU6AANyH4P_TXw391.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"3405\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3176\">\n                      这就是 CSS\n                      基础盒模型，也就是我们常说的盒模型。盒模型主要用来描述元素所占空间的内容，它由四个部分组成：\n                    </p>\n                    <ul data-nodeid=\"3177\">\n                      <li data-nodeid=\"3178\">\n                        <p data-nodeid=\"3179\">\n                          外边框边界<code data-backticks=\"1\" data-nodeid=\"3408\"\n                            >margin</code\n                          >（橙色部分）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3180\">\n                        <p data-nodeid=\"3181\">\n                          边框边界<code data-backticks=\"1\" data-nodeid=\"3411\"\n                            >border</code\n                          >（黄色部分）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3182\">\n                        <p data-nodeid=\"3183\">\n                          内边距边界<code data-backticks=\"1\" data-nodeid=\"3414\"\n                            >padding</code\n                          >（绿色部分）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3184\">\n                        <p data-nodeid=\"3185\">\n                          内容边界<code data-backticks=\"1\" data-nodeid=\"3417\"\n                            >content</code\n                          >（蓝色部分）\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3186\">\n                      盒模型是根据元素的样式来进行计算的，我们可以通过调整元素的样式来改变盒模型。上图中的盒模型来自下面这个<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3420\"\n                        >&lt;div&gt;</code\n                      >元素，我们给这个元素设置了<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3422\"\n                        >margin</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"3424\"\n                        >padding</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"3426\"\n                        >border</code\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">&lt;style&gt;\n</div></li><li><div class=\"code-word\">  .box-model-sample {\n</div></li><li><div class=\"code-word\">    margin: 10px;\n</div></li><li><div class=\"code-word\">    padding: 10px;\n</div></li><li><div class=\"code-word\">    border: solid 2px #000;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&lt;/style&gt;\n</div></li><li><div class=\"code-word\">&lt;div class=\"box-model-sample\"&gt;这是一个div&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3188\">\n                      在上述代码中，我们通过使用 CSS\n                      样式来控制盒模型的大小和属性。盒模型还常用来控制元素的尺寸、属性（颜色、背景、边框等）和位置，当我们在调试样式的时，比较容易遇到以下这些场景。\n                    </p>\n                    <p data-nodeid=\"3189\">\n                      <strong data-nodeid=\"3439\">1</strong>. 盒模型会发生<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3433\"\n                        >margin</code\n                      >外边距叠加，叠加后的值会以最大边距为准。比如，我们给两个相邻的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3435\"\n                        >&lt;div&gt;</code\n                      >元素分别设置了不同的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3437\"\n                        >margin</code\n                      >外边距：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">&lt;style&gt;\n</div></li><li><div class=\"code-word\">  .box-model-sample {\n</div></li><li><div class=\"code-word\">    margin: 10px;\n</div></li><li><div class=\"code-word\">    padding: 10px;\n</div></li><li><div class=\"code-word\">    border: solid 2px #000;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  .large-margin {\n</div></li><li><div class=\"code-word\">    margin: 20px;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&lt;/style&gt;\n</div></li><li><div class=\"code-word\">&lt;div class=\"box-model-sample\"&gt;这是一个div&lt;/div&gt;\n</div></li><li><div class=\"code-word\">&lt;div class=\"box-model-sample\"&gt;这是另一个div&lt;/div&gt;\n</div></li><li><div class=\"code-word\">&lt;div class=\"box-model-sample large-margin\"&gt;这是一个margin大一点的div&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3191\">\n                      这段代码在浏览器中运行时，我们可以看到，两个<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3441\"\n                        >&lt;div&gt;</code\n                      >元素之间发生了<code data-backticks=\"1\" data-nodeid=\"3443\"\n                        >margin</code\n                      >外边距叠加，它们被合并成单个边距。\n                    </p>\n                    <p data-nodeid=\"3192\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBsGATe5fAACdV1B5j8s079.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"3447\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3193\">\n                      如果两个元素的外边距不一样，叠加的值大小是各个边距中的最大值，比如上面第二个和第三个矩形之间的外边距值，使用的是第三个边框的外边距值\n                      20 px。\n                    </p>\n                    <p data-nodeid=\"3194\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBseATZypAACnWIPJ5fU407.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"3451\"\n                      /><br />\n                      需要注意的是，并不是所有情况下都会发生外边距叠加，比如行内框、浮动框或绝对定位框之间的外边距不会叠加。\n                    </p>\n                    <p data-nodeid=\"3195\">\n                      <strong data-nodeid=\"3462\">2</strong>.\n                      盒模型计算效果有多种，比如元素宽高是否包括了边框。我们可以通过<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3458\"\n                        >box-sizing</code\n                      >属性进行设置盒模型的计算方式，正常的盒模型默认值是<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3460\"\n                        >content-box</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"3196\">\n                      使用<code data-backticks=\"1\" data-nodeid=\"3464\"\n                        >box-sizing</code\n                      >属性可以解决问题\n                      1（调整元素的边框时，不影响元素的宽高），我们可以将元素的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3466\"\n                        >box-sizing</code\n                      >属性设置为<code data-backticks=\"1\" data-nodeid=\"3468\"\n                        >border-box</code\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;style&gt;\n</div></li><li><div class=\"code-word\">  .box-model-sample {\n</div></li><li><div class=\"code-word\">    height: 50px;\n</div></li><li><div class=\"code-word\">    margin: 10px;\n</div></li><li><div class=\"code-word\">    padding: 5px;\n</div></li><li><div class=\"code-word\">    border: solid 2px #000;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  .border-box {\n</div></li><li><div class=\"code-word\">    box-sizing: border-box;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&lt;/style&gt;\n</div></li><li><div class=\"code-word\">&lt;div class=\"box-model-sample\"&gt;这是一个div(content-box)&lt;/div&gt;\n</div></li><li><div class=\"code-word\">&lt;div class=\"box-model-sample border-box\"&gt;这是另一个div(border-box)&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3198\">\n                      对于默认<code data-backticks=\"1\" data-nodeid=\"3471\"\n                        >content-box</code\n                      >的元素来说，元素所占的总宽高为设置的元素宽高(<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3473\"\n                        >width</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"3475\">height</code\n                      >)等于：<code data-backticks=\"1\" data-nodeid=\"3477\"\n                        >content + padding + border</code\n                      >，因此这里该元素总高度为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3479\"\n                        >50 + 5 * 2 + 2 * 2 = 64px</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"3199\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBtmAHIF5AAC8NdjpmFw307.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"3483\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3200\">\n                      当我们设置为<code data-backticks=\"1\" data-nodeid=\"3485\"\n                        >border-box</code\n                      >之后，元素所占的总宽高为设置的元素宽高(<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3487\"\n                        >width</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"3489\">height</code\n                      >)，因此，此时高度为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3491\"\n                        >50px</code\n                      >：\n                    </p>\n                    <p data-nodeid=\"3201\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/00/CioPOWBwBuCAPnYtAADeCHGecrY299.png\"\n                        alt=\"Drawing 9.png\"\n                        data-nodeid=\"3495\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3202\">\n                      也就是说，如果我们在调整元素边框的时候，不影响元素的宽高，可以给元素的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3497\"\n                        >box-sizing</code\n                      >属性设置为<code data-backticks=\"1\" data-nodeid=\"3499\"\n                        >border-box</code\n                      >，这便是问题 1\n                      的答案。通过这种方式，我们可以精确地控制元素的空间占位，同时还能灵活地调整元素边框和内边距。\n                    </p>\n                    <p data-nodeid=\"3203\">\n                      虽然我们可以通过盒模型设置元素的占位情况，但是有些时候我们给元素设置宽高却不生效（见问题\n                      2），这是因为元素本身的性质也做了区分，我们来看一下。\n                    </p>\n                    <h4 data-nodeid=\"3204\">内联元素与块状元素</h4>\n                    <p data-nodeid=\"3205\">\n                      在浏览器中，元素可分为内联元素和块状元素。比如，<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3504\"\n                        >&lt;a&gt;</code\n                      >元素为内联元素，<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3506\"\n                        >&lt;div&gt;</code\n                      >元素为块状元素，我们分别给它们设置宽高：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&lt;style&gt;\n</div></li><li><div class=\"code-word\">  a,\n</div></li><li><div class=\"code-word\">  div {\n</div></li><li><div class=\"code-word\">    width: 100px;\n</div></li><li><div class=\"code-word\">    height: 20px;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&lt;/style&gt;\n</div></li><li><div class=\"code-word\">&lt;a&gt;a-123&lt;/a&gt;&lt;a&gt;a-456&lt;/a&gt;&lt;a&gt;a-789&lt;/a&gt;\n</div></li><li><div class=\"code-word\">&lt;div&gt;div-123&lt;/div&gt;\n</div></li><li><div class=\"code-word\">&lt;div&gt;div-456&lt;/div&gt;\n</div></li><li><div class=\"code-word\">&lt;div&gt;div-789&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3207\">在浏览器中的效果如下图所示：</p>\n                    <p data-nodeid=\"3208\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB1OAfXNsAAFw2Bp-aVw496.png\"\n                        alt=\"Drawing 10.png\"\n                        data-nodeid=\"3511\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3209\">\n                      可以看到，<code data-backticks=\"1\" data-nodeid=\"3513\"\n                        >&lt;a&gt;</code\n                      >元素和<code data-backticks=\"1\" data-nodeid=\"3515\"\n                        >&lt;div&gt;</code\n                      >元素最主要的区别在于：\n                    </p>\n                    <ul data-nodeid=\"3210\">\n                      <li data-nodeid=\"3211\">\n                        <p data-nodeid=\"3212\">\n                          <code data-backticks=\"1\" data-nodeid=\"3517\"\n                            >&lt;a&gt;</code\n                          >元素（内联元素）可以和其他内联元素位于同一行，且宽高设置无效；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3213\">\n                        <p data-nodeid=\"3214\">\n                          <code data-backticks=\"1\" data-nodeid=\"3519\"\n                            >&lt;div&gt;</code\n                          >元素（块状元素）不可和其他元素位于同一行，且宽高设置有效。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3215\">\n                      所以问题 2\n                      的答案是，当我们给某个元素设置宽高不生效，是因为该元素为内联元素。那么有没有办法解决这个问题呢？\n                    </p>\n                    <p data-nodeid=\"3216\">\n                      我们可以通过设置<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3523\"\n                        >display</code\n                      >的值来对元素进行调整。\n                    </p>\n                    <ul data-nodeid=\"3217\">\n                      <li data-nodeid=\"3218\">\n                        <p data-nodeid=\"3219\">\n                          设置为<code data-backticks=\"1\" data-nodeid=\"3526\"\n                            >block</code\n                          >块状元素，此时可以设置宽度<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"3528\"\n                            >width</code\n                          >和高度<code data-backticks=\"1\" data-nodeid=\"3530\"\n                            >height</code\n                          >。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3220\">\n                        <p data-nodeid=\"3221\">\n                          设置为<code data-backticks=\"1\" data-nodeid=\"3533\"\n                            >inline</code\n                          >内联元素，此时宽度高度不起作用。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3222\">\n                        <p data-nodeid=\"3223\">\n                          设置为<code data-backticks=\"1\" data-nodeid=\"3536\"\n                            >inline-block</code\n                          >，可以理解为块状元素和内联元素的结合，布局规则包括：\n                        </p>\n                        <ul data-nodeid=\"3224\">\n                          <li data-nodeid=\"3225\">\n                            <p data-nodeid=\"3226\">\n                              位于块状元素或者其他内联元素内；\n                            </p>\n                          </li>\n                          <li data-nodeid=\"3227\">\n                            <p data-nodeid=\"3228\">\n                              可容纳其他块状元素或内联元素；\n                            </p>\n                          </li>\n                          <li data-nodeid=\"3229\">\n                            <p data-nodeid=\"3230\">宽度高度起作用。</p>\n                          </li>\n                        </ul>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3231\">\n                      除了内联元素和块状元素，我们还可以将元素设置为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3542\"\n                        >inline-block</code\n                      >，<code data-backticks=\"1\" data-nodeid=\"3544\"\n                        >inline-block</code\n                      >可以很方便解决一些问题：使元素居中、给<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3546\"\n                        >inline</code\n                      >元素（<code data-backticks=\"1\" data-nodeid=\"3548\"\n                        >&lt;a&gt;</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"3550\"\n                        >&lt;span&gt;</code\n                      >）设置宽高、将多个块状元素放在一行等。\n                    </p>\n                    <h4 data-nodeid=\"3232\">文档流和元素定位</h4>\n                    <p data-nodeid=\"3233\">\n                      接下来，我们来看问题\n                      3：将一个元素固定在页面的某个位置，可以怎么做？这个问题涉及文档流的布局和元素定位的样式设置。\n                    </p>\n                    <p data-nodeid=\"3234\">\n                      什么是文档流呢？正常的文档流在 HTML\n                      里面为从上到下，从左到右的排版布局。\n                    </p>\n                    <p data-nodeid=\"3235\">\n                      文档流布局方式可以使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3556\"\n                        >position</code\n                      >样式进行调整，包括：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3558\"\n                        >static</code\n                      >（默认值）、<code data-backticks=\"1\" data-nodeid=\"3560\"\n                        >inherit</code\n                      >（继承父元素）、<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3562\"\n                        >relative</code\n                      >（相对定位）、<code data-backticks=\"1\" data-nodeid=\"3564\"\n                        >absolute</code\n                      >（相对非<code data-backticks=\"1\" data-nodeid=\"3566\"\n                        >static</code\n                      >父元素绝对定位）、<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3568\"\n                        >fixed</code\n                      >（相对浏览器窗口进行绝对定位）。\n                    </p>\n                    <p data-nodeid=\"3236\">\n                      我们来分别看下这些<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3571\"\n                        >position</code\n                      >样式设置效果。\n                    </p>\n                    <p data-nodeid=\"3237\">\n                      <strong data-nodeid=\"3597\">1</strong>. 元素<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3577\"\n                        >position</code\n                      >样式属性值为<code data-backticks=\"1\" data-nodeid=\"3579\"\n                        >static</code\n                      >(默认值)时，元素会忽略<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3581\"\n                        >top</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"3583\">bottom</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"3585\">left</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"3587\">right</code\n                      >或者<code data-backticks=\"1\" data-nodeid=\"3589\"\n                        >z-index</code\n                      >声明，比如我们给部分元素设置<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3591\"\n                        >position: static</code\n                      >的样式以及<code data-backticks=\"1\" data-nodeid=\"3593\"\n                        >left</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"3595\">top</code\n                      >定位 ：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"css\"><ol><li><div class=\"code-word\"><span class=\"hljs-selector-tag\">a</span>, <span class=\"hljs-selector-tag\">p</span>, <span class=\"hljs-selector-tag\">div</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">border</span>: solid <span class=\"hljs-number\">1px</span> red;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-selector-class\">.static</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">position</span>: static;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">100px</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">100px</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3239\">\n                      在<a\n                        href=\"https://about-position-1255459943.file.myqcloud.com/position-static.html?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"3601\"\n                        >浏览器</a\n                      >中，我们可以看到给<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3603\"\n                        >position: static</code\n                      >的元素添加定位<code data-backticks=\"1\" data-nodeid=\"3605\"\n                        >left: 100px; top: 100px;</code\n                      >是无效的。\n                    </p>\n                    <p data-nodeid=\"3240\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB2yAK13GAAEoSLhXiR0106.png\"\n                        alt=\"Drawing 12.png\"\n                        data-nodeid=\"3609\"\n                      />\n                    </p>\n                    <div data-nodeid=\"3241\">\n                      <p style=\"text-align: center\">\n                        （static 元素的定位设置无效果）\n                      </p>\n                    </div>\n                    <p data-nodeid=\"3242\">\n                      <strong data-nodeid=\"3624\">2</strong>. 元素<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3614\"\n                        >position</code\n                      >样式属性值为<code data-backticks=\"1\" data-nodeid=\"3616\"\n                        >relative</code\n                      >时，元素会保持原有文档流，但相对本身的原始位置发生位移，且会占用空间，比如我们给部分元素设置<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3618\"\n                        >position: relative</code\n                      >样式以及<code data-backticks=\"1\" data-nodeid=\"3620\"\n                        >left</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"3622\">top</code\n                      >定位：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"css\"><ol><li><div class=\"code-word\"><span class=\"hljs-selector-tag\">a</span>, <span class=\"hljs-selector-tag\">p</span>, <span class=\"hljs-selector-tag\">div</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">border</span>: solid <span class=\"hljs-number\">1px</span> red;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-selector-class\">.relative</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">position</span>: relative;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">100px</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">100px</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3244\">\n                      在<a\n                        href=\"https://about-position-1255459943.file.myqcloud.com/position-relative.html?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"3628\"\n                        >浏览器</a\n                      >中，我们可以看到<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3630\"\n                        >position: relative</code\n                      >的元素相对于其正常位置进行定位，元素占有原本位置（文档流中占有的位置与其原本位置相同），因此下一个元素会排到该元素后方。\n                    </p>\n                    <p data-nodeid=\"3245\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB3mAFFqSAADs-8Jl61g905.png\"\n                        alt=\"Drawing 14.png\"\n                        data-nodeid=\"3634\"\n                      />\n                    </p>\n                    <div data-nodeid=\"3246\">\n                      <p style=\"text-align: center\">\n                        (relative 定位的元素，定位设置可生效)\n                      </p>\n                    </div>\n                    <p data-nodeid=\"3247\">\n                      这里有个需要注意的地方：虽然<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3636\"\n                        >relative</code\n                      >元素占位与<code data-backticks=\"1\" data-nodeid=\"3638\"\n                        >static</code\n                      >相同，但会溢出父元素，撑开整个页面。如下图所示，我们能看到<a\n                        href=\"https://about-position-1255459943.file.myqcloud.com/position-relative-occupation.html?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"3642\"\n                        >浏览器中</a\n                      ><code data-backticks=\"1\" data-nodeid=\"3643\"\n                        >relative</code\n                      >元素撑开父元素看到页面底部有滚动条。\n                    </p>\n                    <p data-nodeid=\"3248\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB5-ANcUmAAC64A1Pkhk727.png\"\n                        alt=\"Drawing 16.png\"\n                        data-nodeid=\"3647\"\n                      />\n                    </p>\n                    <div data-nodeid=\"3249\">\n                      <p style=\"text-align: center\">\n                        (relative 定位的元素，可撑开父元素)\n                      </p>\n                    </div>\n                    <p data-nodeid=\"3250\">\n                      此时给父元素设置<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3649\"\n                        >overflow: hidden;</code\n                      >则可以隐藏溢出部分。\n                    </p>\n                    <p data-nodeid=\"3251\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/F8/Cgp9HWBwB6iARwZZAABrqdhMZGc561.png\"\n                        alt=\"Drawing 18.png\"\n                        data-nodeid=\"3653\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3252\">\n                      （通过设置<code data-backticks=\"1\" data-nodeid=\"3655\"\n                        >overflow: hidden</code\n                      >可隐藏溢出部分元素）\n                    </p>\n                    <p data-nodeid=\"3253\">\n                      <strong data-nodeid=\"3679\">3</strong>. 元素<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3661\"\n                        >position</code\n                      >样式属性值为<code data-backticks=\"1\" data-nodeid=\"3663\"\n                        >absolute</code\n                      >、且设置了定位（<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3665\"\n                        >top</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"3667\">bottom</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"3669\">left</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"3671\">right</code\n                      >）时，元素会脱离文档流，相对于其包含块来定位，且不占位，比如我们给<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3673\"\n                        >position: absolute</code\n                      >的元素设置<code data-backticks=\"1\" data-nodeid=\"3675\"\n                        >left</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"3677\">top</code\n                      >定位 ：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"css\"><ol><li><div class=\"code-word\"><span class=\"hljs-selector-class\">.parent</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">border</span>: solid <span class=\"hljs-number\">1px</span> blue;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">300px</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-selector-class\">.parent</span> &gt; <span class=\"hljs-selector-tag\">div</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">border</span>: solid <span class=\"hljs-number\">1px</span> red;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">300px</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-selector-class\">.absolute</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">position</span>: absolute;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">100px</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3255\">\n                      在<a\n                        href=\"https://about-position-1255459943.file.myqcloud.com/position-absolute.html?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"3683\"\n                        >浏览器</a\n                      >中，我们可以看到<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3685\"\n                        >position: absolute</code\n                      >的元素不占位，因此下一个符合普通流的元素会略过<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3687\"\n                        >absolute</code\n                      >元素排到其上一个元素的后方。\n                    </p>\n                    <p data-nodeid=\"3256\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB7KARvTaAABaLe2qI4k309.png\"\n                        alt=\"Drawing 20.png\"\n                        data-nodeid=\"3691\"\n                      />\n                    </p>\n                    <div data-nodeid=\"3257\">\n                      <p style=\"text-align: center\">（absolute 元素不占位）</p>\n                    </div>\n                    <p data-nodeid=\"3258\">\n                      <strong data-nodeid=\"3708\">4</strong>. 元素<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3696\"\n                        >position</code\n                      >样式属性值为<code data-backticks=\"1\" data-nodeid=\"3698\"\n                        >fixed</code\n                      >时，元素脱离文档流、且不占位，此时看上去与<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3700\"\n                        >absolute</code\n                      >相似。但当我们进行<a\n                        href=\"https://about-position-1255459943.file.myqcloud.com/position-fixed-absolute.html?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"3704\"\n                        >页面</a\n                      >滚动的时候，会发现<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3706\"\n                        >fixed</code\n                      >元素位置没有发生变化。\n                    </p>\n                    <p data-nodeid=\"3259\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB7uAbshiAADWWsHZghM208.png\"\n                        alt=\"Drawing 22.png\"\n                        data-nodeid=\"3711\"\n                      />\n                    </p>\n                    <div data-nodeid=\"3260\">\n                      <p style=\"text-align: center\">（fixed 元素同样不占位）</p>\n                    </div>\n                    <p data-nodeid=\"3261\">\n                      这是因为<code data-backticks=\"1\" data-nodeid=\"3713\"\n                        >fixed</code\n                      >元素相对于浏览器窗口进行定位，而<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3715\"\n                        >absolute</code\n                      >元素只有在满足“无<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3717\"\n                        >static</code\n                      >定位以外的父元素”的时候，才会相对于<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3719\"\n                        >document</code\n                      >进行定位。\n                    </p>\n                    <p data-nodeid=\"3262\">\n                      回到问题\n                      3，将一个元素固定在页面的某个位置，可以通过给元素或是其父类元素添加<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3722\"\n                        >position: fixed</code\n                      >或者<code data-backticks=\"1\" data-nodeid=\"3724\"\n                        >position: absolute</code\n                      >将其固定在浏览器窗口或是文档页面中。\n                    </p>\n                    <p data-nodeid=\"3263\">\n                      使用元素定位可以将某个元素固定，那么同一个位置中存在多个元素的时候，就会发生元素的堆叠。\n                    </p>\n                    <h4 data-nodeid=\"3264\">元素堆叠 z-index</h4>\n                    <p data-nodeid=\"3265\">\n                      元素的堆叠方式和顺序，除了与<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3729\"\n                        >position</code\n                      >定位有关，也与<code data-backticks=\"1\" data-nodeid=\"3731\"\n                        >z-index</code\n                      >有关。通过设置<code data-backticks=\"1\" data-nodeid=\"3733\"\n                        >z-index</code\n                      >值，我们可以设置元素的堆叠顺序，比如我们给同级的元素添加<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3735\"\n                        >z-index值</code\n                      >：\n                    </p>\n                    <p data-nodeid=\"3266\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/F8/Cgp9HWBwB9GAVImUAAC4RJoX2o8350.png\"\n                        alt=\"Drawing 24.png\"\n                        data-nodeid=\"3739\"\n                      />\n                    </p>\n                    <div data-nodeid=\"3267\">\n                      <p style=\"text-align: center\">\n                        （z-index 可改变元素堆叠顺序）\n                      </p>\n                    </div>\n                    <p data-nodeid=\"3268\">\n                      在<a\n                        href=\"https://about-position-1255459943.file.myqcloud.com/position-z-index-same-level.html?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"3743\"\n                        >浏览器</a\n                      >中，我们可以看到：\n                    </p>\n                    <ul data-nodeid=\"3269\">\n                      <li data-nodeid=\"3270\">\n                        <p data-nodeid=\"3271\">\n                          当同级元素不设置<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"3746\"\n                            >z-index</code\n                          >或者<code data-backticks=\"1\" data-nodeid=\"3748\"\n                            >z-index</code\n                          >相等时，后面的元素会叠在前面的元素上方；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3272\">\n                        <p data-nodeid=\"3273\">\n                          当同级元素<code data-backticks=\"1\" data-nodeid=\"3751\"\n                            >z-index</code\n                          >不同时，<code data-backticks=\"1\" data-nodeid=\"3753\"\n                            >z-index</code\n                          >大的元素会叠在<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"3755\"\n                            >z-index</code\n                          >小的元素上方。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3274\">\n                      <code data-backticks=\"1\" data-nodeid=\"3757\">z-index</code\n                      >样式属性比较常用于多个元素层级控制的时候，比如弹窗一般需要在最上层，就可以通过设置较大的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3759\"\n                        >z-index</code\n                      >值来控制。\n                    </p>\n                    <p data-nodeid=\"3275\">\n                      那么，我们来看问题 4： 为什么将某个元素<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3762\"\n                        >z-index</code\n                      >设置为<code data-backticks=\"1\" data-nodeid=\"3764\"\n                        >9999999</code\n                      >，但是它依然被其他元素遮挡住了呢？\n                    </p>\n                    <p data-nodeid=\"3276\">\n                      这是因为除了同级元素以外，<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3767\"\n                        >z-index</code\n                      >值的设置效果还会受到父元素的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3769\"\n                        >z-index</code\n                      >值的影响。<code data-backticks=\"1\" data-nodeid=\"3771\"\n                        >z-index</code\n                      >值的设置只决定同一父元素中的同级子元素的堆叠顺序。因此，即使将某个元素<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3773\"\n                        >z-index</code\n                      >设置为<code data-backticks=\"1\" data-nodeid=\"3775\"\n                        >9999999</code\n                      >，它依然可能因为父元素的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3777\"\n                        >z-index</code\n                      >值小于其他父元素同级的元素，而导致该元素依然被其他元素遮挡。\n                    </p>\n                    <p data-nodeid=\"3277\">\n                      现在，我们解答了问题 1~4，同时还学习了关于 CSS\n                      页面布局的核心规则，包括：\n                    </p>\n                    <ul data-nodeid=\"3278\">\n                      <li data-nodeid=\"3279\">\n                        <p data-nodeid=\"3280\">\n                          盒模型主要用来描述元素所占空间的内容；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3281\">\n                        <p data-nodeid=\"3282\">\n                          一个元素属于内联元素还是块状元素，会影响它是否可以和其他元素位于同一行、宽高设置是否有效；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3283\">\n                        <p data-nodeid=\"3284\">\n                          正常的文档流在 HTML\n                          里面为从上到下、从左到右的排版布局，使用<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"3785\"\n                            >position</code\n                          >属性可以使元素脱离正常的文档流；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3285\">\n                        <p data-nodeid=\"3286\">\n                          使用<code data-backticks=\"1\" data-nodeid=\"3788\"\n                            >z-index</code\n                          >属性可以设置元素的堆叠顺序。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3287\">\n                      掌握了这些页面布局的规则，可以解决我们日常页面中单个元素样式调整中的大多数问题。对于进行整体的页面布局，比如设置元素居中、排版、区域划分等，涉及多个元素的布局，这种情况下常常会用到\n                      Flex、Grid 这样的页面布局方式。下面我们一起来看看。\n                    </p>\n                    <h3 data-nodeid=\"3288\">常见页面布局方式</h3>\n                    <p data-nodeid=\"3289\">\n                      在我们的日常工作中，实现页面的 UI\n                      样式除了会遇到单个元素的样式调整外，还需要对整个页面进行结构布局，比如将页面划分为左中右、上中下模块，实现某些模块的居中对齐，实现页面的响应式布局，等等。\n                    </p>\n                    <p data-nodeid=\"3290\">\n                      要实现对页面的排版布局，需要使用到一些页面布局方式。目前来说，比较常见的布局方式主要有三种：\n                    </p>\n                    <ul data-nodeid=\"3291\">\n                      <li data-nodeid=\"3292\">\n                        <p data-nodeid=\"3293\">传统布局方式；</p>\n                      </li>\n                      <li data-nodeid=\"3294\">\n                        <p data-nodeid=\"3295\">Flex 布局方式；</p>\n                      </li>\n                      <li data-nodeid=\"3296\">\n                        <p data-nodeid=\"3297\">Grid 布局方式。</p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"3298\">传统布局</h4>\n                    <p data-nodeid=\"3299\">\n                      传统布局方式基本上使用上面介绍的布局规则，结合<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3799\"\n                        >display</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"3801\"\n                        >position</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"3803\">float</code\n                      >属性以及一些边距、x/y 轴距离等方式来进行布局。\n                    </p>\n                    <p data-nodeid=\"3300\">\n                      除了使用<code data-backticks=\"1\" data-nodeid=\"3806\"\n                        >position: fixed</code\n                      >或者<code data-backticks=\"1\" data-nodeid=\"3808\"\n                        >position: absolute</code\n                      >时，会使元素脱离文档流，使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3810\"\n                        >float</code\n                      >属性同样会导致元素脱离文档流。\n                    </p>\n                    <p data-nodeid=\"3301\">\n                      这就涉及问题 5：为什么将某个元素里面的元素设置为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3813\"\n                        >float</code\n                      >之后，这个元素的高度就歪了呢？\n                    </p>\n                    <p data-nodeid=\"3302\">\n                      这是因为当我们给元素的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3816\"\n                        >float</code\n                      >属性赋值后，元素会脱离文档流，进行左右浮动，比如这里我们将其中一个<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3818\"\n                        >&lt;div&gt;</code\n                      >元素添加了<code data-backticks=\"1\" data-nodeid=\"3820\"\n                        >float</code\n                      >属性 ：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;style&gt;\n</div></li><li><div class=\"code-word\">  div {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">border</span>: solid <span class=\"hljs-number\">1</span>px red;\n</div></li><li><div class=\"code-word\">    width: <span class=\"hljs-number\">50</span>px;\n</div></li><li><div class=\"code-word\">    height: <span class=\"hljs-number\">50</span>px;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  .float {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">float</span>: left;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&lt;/style&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"float\"</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"float\"</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"float\"</span>&gt;</span>6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3304\">\n                      我们可以在<a\n                        href=\"https://about-position-1255459943.file.myqcloud.com/display-float.html?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"3825\"\n                        >浏览器</a\n                      >中看到，<code data-backticks=\"1\" data-nodeid=\"3827\"\n                        >float</code\n                      >元素会紧贴着父元素或者是上一个同级同浮动元素的边框：\n                    </p>\n                    <p data-nodeid=\"3305\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/33/F8/Cgp9HWBwB-SAZahpAABKURkJ8hE997.png\"\n                        alt=\"Drawing 26.png\"\n                        data-nodeid=\"3831\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3306\">\n                      可以看到当元素设置为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3833\"\n                        >float</code\n                      >之后，它就脱离文档流，同时也不再占据原本的空间。\n                    </p>\n                    <p data-nodeid=\"3307\">\n                      因此，问题 5\n                      的答案为：本属于普通流中的元素浮动之后，父元素内部如果不存在其他普通流元素了，就会表现出高度为\n                      0，又称为高度塌陷。\n                    </p>\n                    <p data-nodeid=\"3308\">\n                      在这样的情况下，我们可以使用以下方法撑开父元素：\n                    </p>\n                    <ul data-nodeid=\"3309\">\n                      <li data-nodeid=\"3310\">\n                        <p data-nodeid=\"3311\">\n                          父元素使用<code data-backticks=\"1\" data-nodeid=\"3838\"\n                            >overflow: hidden</code\n                          >（此时高度为<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"3840\"\n                            >auto</code\n                          >）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3312\">\n                        <p data-nodeid=\"3313\" class=\"\">\n                          使父元素也成为浮动<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"3843\"\n                            >float</code\n                          >元素；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3314\">\n                        <p data-nodeid=\"3315\" class=\"\">\n                          使用<code data-backticks=\"1\" data-nodeid=\"3846\"\n                            >clear</code\n                          >清除浮动。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"57081\" class=\"te-preview-highlight\">\n                      除了\n                      <code data-backticks=\"1\" data-nodeid=\"57083\">clear</code>\n                      清除浮动之外，这些方法为什么可以达到撑开父元素的效果呢，这是因为\n                      BFC（Block Formatting Context，块格式化上下文）的特性。BFC\n                      是 Web 页面的可视 CSS\n                      渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域，详情大家可以私下了解下。\n                    </p>\n\n                    <p data-nodeid=\"3317\">\n                      传统方式布局的优势在于兼容性较好，在一些版本较低的浏览器上也能给到用户较友好的体验。但传统布局需要掌握的知识较多也相对复杂，对于整个页面的布局和排版实现，常常是基于盒模型、使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3850\"\n                        >display</code\n                      >属性+<code data-backticks=\"1\" data-nodeid=\"3852\"\n                        >position</code\n                      >属性+<code data-backticks=\"1\" data-nodeid=\"3854\"\n                        >float</code\n                      >属性的方式来进行，这个过程比较烦琐，因此更多时候我们都会使用开源库（比如\n                      bootstrap）来完成页面布局。\n                    </p>\n                    <p data-nodeid=\"3318\">\n                      后来 W3C\n                      提出了新的布局方式，可以快速、简便地实现页面的排版布局，新的布局方式包括\n                      Flex 布局和 Grid 布局。\n                    </p>\n                    <h4 data-nodeid=\"3319\">使用 Flex 布局</h4>\n                    <p data-nodeid=\"3320\">\n                      Flex 布局（又称为\n                      flexbox）是一种一维的布局模型。在使用此布局时，需掌握几个概念。\n                    </p>\n                    <ol data-nodeid=\"3321\">\n                      <li data-nodeid=\"3322\">\n                        <p data-nodeid=\"3323\">\n                          flexbox 的两根轴线。其中，主轴由<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"3860\"\n                            >flex-direction</code\n                          >定义，交叉轴则垂直于主轴。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3324\">\n                        <p data-nodeid=\"3325\">\n                          在 flexbox 中，使用起始和终止来描述布局方向。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3326\">\n                        <p data-nodeid=\"3327\">认识 flex 容器和 flex 元素。</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"3328\">\n                      想熟练使用 Flex 布局，我们需要了解什么是 flex 容器和 flex\n                      元素。比如我们给一个父元素<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3865\"\n                        >div</code\n                      >设置<code data-backticks=\"1\" data-nodeid=\"3867\"\n                        >display: flex;</code\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;style&gt;\n</div></li><li><div class=\"code-word\">  div {\n</div></li><li><div class=\"code-word\">    border: solid 1px #000;\n</div></li><li><div class=\"code-word\">    margin: 10px;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  .box {\n</div></li><li><div class=\"code-word\">    display: flex;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&lt;/style&gt;\n</div></li><li><div class=\"code-word\">&lt;div class=\"box\"&gt;\n</div></li><li><div class=\"code-word\">  &lt;div&gt;1&lt;/div&gt;\n</div></li><li><div class=\"code-word\">  &lt;div&gt;2&lt;/div&gt;\n</div></li><li><div class=\"code-word\">  &lt;div&gt;3 &lt;br /&gt;有其他 &lt;br /&gt;内容&lt;/div&gt;\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3330\">在浏览器中的效果就会如图所示：</p>\n                    <p data-nodeid=\"3331\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/34/01/CioPOWBwB_WAR3CJAAAti6zxREI918.png\"\n                        alt=\"Drawing 28.png\"\n                        data-nodeid=\"3872\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3332\">\n                      其中，flex 容器为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3874\"\n                        >&lt;div class=\"box\"&gt;</code\n                      >元素及其内部区域，而容器的直系子元素（1、2、3 这 3\n                      个<code data-backticks=\"1\" data-nodeid=\"3876\"\n                        >&lt;div&gt;</code\n                      >）为 flex 元素。\n                    </p>\n                    <p data-nodeid=\"3333\">\n                      在掌握了 flex 容器和 flex 元素之后，我们就可以通过调整\n                      flexbox\n                      轴线方向、排列方向和对齐方式的方式，实现需要的页面效果。\n                    </p>\n                    <p data-nodeid=\"3334\">Flex 布局种常用的方式包括：</p>\n                    <ul data-nodeid=\"3335\">\n                      <li data-nodeid=\"3336\">\n                        <p data-nodeid=\"3337\">\n                          通过<code data-backticks=\"1\" data-nodeid=\"3881\"\n                            >flex-direction</code\n                          >调整 Flex 元素的排列方向（主轴的方向）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3338\">\n                        <p data-nodeid=\"3339\">\n                          用<code data-backticks=\"1\" data-nodeid=\"3884\"\n                            >flex-wrap</code\n                          >实现多行 Flex 容器如何换行；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3340\">\n                        <p data-nodeid=\"3341\">\n                          使用<code data-backticks=\"1\" data-nodeid=\"3887\"\n                            >justify-content</code\n                          >调整 Flex 元素在主轴上的对齐方式；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3342\">\n                        <p data-nodeid=\"3343\">\n                          使用<code data-backticks=\"1\" data-nodeid=\"3890\"\n                            >align-items</code\n                          >调整 Flex 元素在交叉轴上如何对齐；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3344\">\n                        <p data-nodeid=\"3345\">\n                          使用<code data-backticks=\"1\" data-nodeid=\"3893\"\n                            >align-content</code\n                          >调整多根轴线的对齐方式。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3346\">\n                      Flex 布局给<code data-backticks=\"1\" data-nodeid=\"3896\"\n                        >flexbox</code\n                      >的子元素之间提供了强大的空间分布和对齐能力，我们可以方便地使用\n                      Flex 布局来实现垂直和水平居中，比如通过将元素设置为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3898\"\n                        >display: flex;</code\n                      >，并配合使用<code data-backticks=\"1\" data-nodeid=\"3900\"\n                        >align-items: center;</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"3902\"\n                        >justify-content: center;</code\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;style&gt;\n</div></li><li><div class=\"code-word\">  div {\n</div></li><li><div class=\"code-word\">    border: solid 1px #000;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  .box {\n</div></li><li><div class=\"code-word\">    display: flex;\n</div></li><li><div class=\"code-word\">    width: 200px;\n</div></li><li><div class=\"code-word\">    height: 200px;\n</div></li><li><div class=\"code-word\">    align-items: center;\n</div></li><li><div class=\"code-word\">    justify-content: center;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  .in-box {\n</div></li><li><div class=\"code-word\">    width: 80px;\n</div></li><li><div class=\"code-word\">    height: 80px;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&lt;/style&gt;\n</div></li><li><div class=\"code-word\">&lt;div class=\"box\"&gt;\n</div></li><li><div class=\"code-word\">  &lt;div class=\"in-box\"&gt;我想要垂直水平居中&lt;/div&gt;\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3348\">\n                      就可以将一个元素设置为垂直和水平居中：\n                    </p>\n                    <p data-nodeid=\"3349\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/34/01/CioPOWBwCA-Ad4tQAAA-HOY2i2w574.png\"\n                        alt=\"Drawing 30.png\"\n                        data-nodeid=\"3907\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3350\">\n                      对于传统的布局方式来说，要实现上述垂直水平居中，常常需要依赖绝对定位+元素偏移的方式来实现，该实现方式不够灵活（在调整元素大小时需要调整定位）、难以维护。\n                    </p>\n                    <p data-nodeid=\"3351\">\n                      Flex\n                      布局的出现，解决了很多前端开发居中、排版的一些痛点，尤其是垂直居中，因此现在几乎成为主流的布局方式。除此之外，还可以对\n                      Flex 元素设置排列顺序、放大比例、缩小比例等。\n                    </p>\n                    <p data-nodeid=\"3352\">\n                      如果说 Flex 布局是一维布局，那么 Grid\n                      布局则是一种二维布局的方式。\n                    </p>\n                    <h4 data-nodeid=\"3353\">Grid 布局</h4>\n                    <p data-nodeid=\"3354\">\n                      Grid\n                      布局又称为网格布局，它将一个页面划分为几个主要区域，以及定义这些区域的大小、位置、层次等关系。\n                    </p>\n                    <p data-nodeid=\"3355\">\n                      我们知道 Flex 布局是基于轴线布局，与之相对，Grid\n                      布局则是将容器划分成行和列，可以像表格一样按行或列来对齐元素。\n                    </p>\n                    <p data-nodeid=\"3356\">\n                      对于 Grid\n                      布局，同样需要理解几个概念：网格轨道与行列、网格线、网格容器等。其实\n                      Grid 布局很多概念跟 Flex\n                      布局还挺相似的，因此这里不再赘述。\n                    </p>\n                    <p data-nodeid=\"3357\">使用 Grid 布局可以：</p>\n                    <ul data-nodeid=\"3358\">\n                      <li data-nodeid=\"3359\">\n                        <p data-nodeid=\"3360\">实现网页的响应式布局；</p>\n                      </li>\n                      <li data-nodeid=\"3361\">\n                        <p data-nodeid=\"3362\">\n                          实现灵活的 12 列布局（类似于 Bootstrap 的 CSS\n                          布局方式）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3363\">\n                        <p data-nodeid=\"3364\">\n                          与其他布局方式结合，与 css 其他部分协同合作。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3365\">\n                      通过 Grid\n                      布局我们能实现任意组合不同布局，其设计可称得上目前最强大的布局方式，它与\n                      Flex 布局是未来的趋势。其中，Grid\n                      布局适用于较大规模的布局，Flex\n                      布局则适合页面中的组件和较小规模布局。\n                    </p>\n                    <h3 data-nodeid=\"3366\">小结</h3>\n                    <p data-nodeid=\"3367\">\n                      今天我带大家学习了页面布局中比较核心的一些规则，包括盒模型计算、内联元素与块状元素布局规则、文档流布局和元素堆叠顺序。我们在写\n                      CSS\n                      过程中会遇到很多的“神奇”现象，而要理解这些现象并解决问题，掌握这些页面布局的原理逻辑和规则很重要。\n                    </p>\n                    <p data-nodeid=\"3368\">\n                      除了页面布局规则之外，我还带大家认识了常见的页面布局方式，包括传统布局方式、FleX\n                      布局和 Grid 布局。\n                    </p>\n                    <p data-nodeid=\"3369\">\n                      细心的你或许也发现了，我们还遗留了问题 6\n                      没有给出具体的答案：让一个元素进行垂直和水平居中，有多少种实现方式？\n                    </p>\n                    <p data-nodeid=\"3370\" class=\"\">\n                      这个问题，我希望你可以自己进行解答，欢迎你将答案写在留言区～\n                    </p>\n            "}