{"title":"05 | 单线程的 JavaScript 如何管理任务？","context":"\n                    <p data-nodeid=\"1197\" class=\"\">\n                      如果说 JavaScript\n                      代码运行过程中的语法分析阶段、编译阶段和执行阶段属于微观层面的运行逻辑，那么今天我来介绍下宏观角度下的\n                      JavaScript 运行过程，包括 JavaScript\n                      的单线程设计、事件循环的并发模型设计。\n                    </p>\n                    <p data-nodeid=\"1198\">\n                      要怎么理解 JavaScript\n                      是单线程这个概念呢？大概需要从浏览器来说起。\n                    </p>\n                    <p data-nodeid=\"1199\">\n                      JavaScript\n                      最初被设计为浏览器脚本语言，主要用途包括对页面的操作、与浏览器的交互、与用户的交互、页面逻辑处理等。如果将\n                      JavaScript 设计为多线程，那当多个线程同时对同一个 DOM\n                      节点进行操作时，线程间的同步问题会变得很复杂。\n                    </p>\n                    <p data-nodeid=\"1200\">\n                      因此，为了避免复杂性，JavaScript 被设计为单线程。\n                    </p>\n                    <p data-nodeid=\"1201\">\n                      这样一个单线程的\n                      JavaScript，意味着任务需要一个接一个地处理。如果有一个任务是等待用户输入，那在用户进行操作前，所有其他任务都处于等待状态，页面会进入假死状态，用户体验会很糟糕。\n                    </p>\n                    <p data-nodeid=\"1202\">\n                      那么，为了高效进行页面的交互和渲染处理，我们围绕着任务执行是否阻塞\n                      JavaScript 主线程，将 JavaScript\n                      中的任务分为同步任务和异步任务。\n                    </p>\n                    <h3 data-nodeid=\"1203\">同步任务与异步任务</h3>\n                    <ul data-nodeid=\"1204\">\n                      <li data-nodeid=\"1205\">\n                        <p data-nodeid=\"1206\">\n                          同步任务：在主线程上排队执行的任务，前一个任务完整地执行完成后，后一个任务才会被执行。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1207\">\n                        <p data-nodeid=\"1208\">\n                          异步任务：不会阻塞主线程，在其任务执行完成之后，会再根据一定的规则去执行相关的回调。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1209\">\n                      我们先来看一下同步任务在浏览器中的是怎样执行的。\n                    </p>\n                    <h4 data-nodeid=\"1210\">同步任务与函数调用栈</h4>\n                    <p data-nodeid=\"1211\">\n                      在 JavaScript 中，同步任务基本上可以认为是执行 JavaScript\n                      代码。在上一讲内容中，我们提到 JavaScript\n                      在执行过程中每进入一个不同的运行环境时，都会创建一个相应的执行上下文。那么，当我们执行一段\n                      JavaScript 代码时，通常会创建多个执行上下文。\n                    </p>\n                    <p data-nodeid=\"1212\">\n                      而 JavaScript\n                      解释器会以栈的方式管理这些执行上下文、以及函数之间的调用关系，形成函数调用栈（call\n                      stack）（调用栈可理解为一个存储函数调用的栈结构，遵循\n                      FILO（先进后出）的原则）。\n                    </p>\n                    <p data-nodeid=\"1213\">\n                      我们来看一下 JavaScript 中代码执行的过程：\n                    </p>\n                    <ol data-nodeid=\"1214\">\n                      <li data-nodeid=\"1215\">\n                        <p data-nodeid=\"1216\">\n                          首先进入全局环境，全局执行上下文被创建并添加进栈中；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1217\">\n                        <p data-nodeid=\"1218\">\n                          每调用一个函数，该函数执行上下文会被添加进调用栈，并开始执行；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1219\">\n                        <p data-nodeid=\"1220\">\n                          如果正在调用栈中执行的 A 函数还调用了 B 函数，那么 B\n                          函数也将会被添加进调用栈；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1221\">\n                        <p data-nodeid=\"1222\">\n                          一旦 B 函数被调用，便会立即执行；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1223\">\n                        <p data-nodeid=\"1224\">\n                          当前函数执行完毕后，JavaScript\n                          解释器将其清出调用栈，继续执行当前执行环境下的剩余的代码。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1225\">\n                      由此可见，JavaScript 代码执行过程中，<strong\n                        data-nodeid=\"1373\"\n                        >函数调用栈栈底永远是全局执行上下文，栈顶永远是当前执行上下文</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1226\">\n                      在不考虑全局执行上下文时，我们可以理解为刚开始的时候调用栈是空的，每当有函数被调用，相应的执行上下文都会被添加到调用栈中。执行完函数中相关代码后，该执行上下文又会自动被调用栈移除，最后调用栈又回到了空的状态（同样不考虑全局执行上下文）。\n                    </p>\n                    <p data-nodeid=\"1227\">\n                      由于栈的容量是有限制的，所以当我们没有合理调用函数的时候，可能会导致爆栈异常，此时控制台便会抛出错误：\n                    </p>\n                    <p data-nodeid=\"1228\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/A1/Cgp9HWB4EDeACyjFAAAW-kfzUR0259.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1378\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1229\">\n                      这样的一个函数调用栈结构，可以理解为 JavaScript\n                      中同步任务的执行环境，同步任务也可以理解为 JavaScript\n                      代码片段的执行。\n                    </p>\n                    <p data-nodeid=\"1230\">\n                      同步任务的执行会阻塞主线程，也就是说，一个函数执行的时候不会被抢占，只有在它执行完毕之后，才会去执行任何其他的代码。<strong\n                        data-nodeid=\"1385\"\n                        >这意味着如果我们一个任务执行的时间过长，浏览器就无法处理与用户的交互，例如点击或滚动</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1231\">因此，我们还需要用到异步任务。</p>\n                    <h4 data-nodeid=\"1232\">异步任务与回调队列</h4>\n                    <p data-nodeid=\"1233\">\n                      异步任务包括一些需要等待响应的任务，包括用户交互、HTTP\n                      请求、定时器等。\n                    </p>\n                    <p data-nodeid=\"1234\">\n                      我们知道，I/O\n                      类型的任务会有较长的等待时间，对于这类无法立刻得到结果的事件，可以使用异步任务的方式。这个过程中\n                      JavaScript 线程就不用处于等待状态，CPU\n                      也可以处理其他任务。\n                    </p>\n                    <p data-nodeid=\"1235\">\n                      异步任务需要提供回调函数，当异步任务有了运行结果之后，该任务则会被添加到回调队列中，主线程在适当的时候会从回调队列中取出相应的回调函数并执行。\n                    </p>\n                    <p data-nodeid=\"1236\">这里提到的回调队列又是什么呢？</p>\n                    <p data-nodeid=\"1237\">\n                      实际上，JavaScript\n                      在运行的时候，除了函数调用栈之外，还包含了一个待处理的回调队列。在回调队列中的都是已经有了运行结果的异步任务，每一个异步任务都会关联着一个回调函数。\n                    </p>\n                    <p data-nodeid=\"1238\">\n                      回调队列则遵循 FIFO（先进先出）的原则，JavaScript\n                      执行代码过程中，会进行以下的处理：\n                    </p>\n                    <ul data-nodeid=\"1239\">\n                      <li data-nodeid=\"1240\">\n                        <p data-nodeid=\"1241\">\n                          运行时，会从最先进入队列的任务开始，处理队列中的任务；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1242\">\n                        <p data-nodeid=\"1243\">\n                          被处理的任务会被移出队列，该任务的运行结果会作为输入参数，并调用与之关联的函数，此时会产生一个函数调用栈；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1244\">\n                        <p data-nodeid=\"1245\">\n                          函数会一直处理到调用栈再次为空，然后 Event Loop\n                          将会处理队列中的下一个任务。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1246\">\n                      这里我们提到了 Event Loop，它主要是用来管理单线程的\n                      JavaScript 中同步任务和异步任务的执行问题。\n                    </p>\n                    <h3 data-nodeid=\"1247\">\n                      单线程的 JavaScript 是如何管理任务的\n                    </h3>\n                    <p data-nodeid=\"1248\">\n                      我们知道，单线程的设计会存在阻塞问题，为此 JavaScript\n                      中任务被分为同步和异步任务。那么，同步任务和异步任务之间是按照什么顺序来执行的呢？\n                    </p>\n                    <p data-nodeid=\"1249\">\n                      JavaScript\n                      有一个基于事件循环的并发模型，称为事件循环（Event\n                      Loop），它的设计解决了同步任务和异步任务的管理问题。\n                    </p>\n                    <p data-nodeid=\"1250\">\n                      根据 JavaScript 运行环境的不同，Event Loop\n                      也会被分成浏览器的 Event Loop 和 Node.js 中的 Event Loop。\n                    </p>\n                    <h4 data-nodeid=\"1251\">浏览器的 Event Loop</h4>\n                    <p data-nodeid=\"1252\">\n                      在浏览器里，每当一个被监听的事件发生时，事件监听器绑定的相关任务就会被添加进回调队列。通过事件产生的任务是异步任务，常见的事件任务包括：\n                    </p>\n                    <ul data-nodeid=\"1253\">\n                      <li data-nodeid=\"1254\">\n                        <p data-nodeid=\"1255\">\n                          用户交互事件产生的事件任务，比如输入操作；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1256\">\n                        <p data-nodeid=\"1257\">\n                          计时器产生的事件任务，比如<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1406\"\n                            >setTimeout</code\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1258\">\n                        <p data-nodeid=\"1259\">\n                          异步请求产生的事件任务，比如 HTTP 请求。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1260\">\n                      JavaScript 的运行过程，可以借用 Philip Roberts 演讲《Help,\n                      I'm stuck in an event-loop》中经典的一张图来描述：\n                    </p>\n                    <p data-nodeid=\"1261\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/A1/Cgp9HWB4EESAQnXYAAClWLdHiXU406.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1414\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1262\">\n                      如图，主线程运行的时候，会产生堆（heap）和栈（stack），其中堆为内存、栈为函数调用栈。我们能看到，Event\n                      Loop\n                      负责执行代码、收集和处理事件以及执行队列中的子任务，具体包括以下过程。\n                    </p>\n                    <ol data-nodeid=\"1263\">\n                      <li data-nodeid=\"1264\">\n                        <p data-nodeid=\"1265\">\n                          JavaScript\n                          有一个主线程和调用栈，所有的任务最终都会被放到调用栈等待主线程执行。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1266\">\n                        <p data-nodeid=\"1267\">\n                          同步任务会被放在调用栈中，按照顺序等待主线程依次执行。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1268\">\n                        <p data-nodeid=\"1269\">\n                          主线程之外存在一个回调队列，回调队列中的异步任务最终会在主线程中以调用栈的方式运行。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1270\">\n                        <p data-nodeid=\"1271\">\n                          同步任务都在主线程上执行，栈中代码在执行的时候会调用浏览器的\n                          API，此时会产生一些异步任务。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1272\">\n                        <p data-nodeid=\"1273\">\n                          异步任务会在有了结果（比如被监听的事件发生时）后，将异步任务以及关联的回调函数放入回调队列中。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1274\">\n                        <p data-nodeid=\"1275\">\n                          调用栈中任务执行完毕后，此时主线程处于空闲状态，会从回调队列中获取任务进行处理。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1276\">\n                      上述过程会不断重复，这就是 JavaScript\n                      的运行机制，称为事件循环机制（Event Loop）。\n                    </p>\n                    <p data-nodeid=\"1277\">\n                      Event Loop 的设计会带来一些问题，比如<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1424\"\n                        >setTimeout</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1426\"\n                        >setInterval</code\n                      >的时间精确性。这两个方法会设置一个计时器，当计时器计时完成，需要执行回调函数，此时才把回调函数放入回调队列中。\n                    </p>\n                    <p data-nodeid=\"1278\">\n                      如果当回调函数放入队列时，假设队列中还有大量的回调函数在等待执行，此时就会造成任务执行时间不精确。\n                    </p>\n                    <p data-nodeid=\"1279\">\n                      要优化这个问题，可以使用系统时钟来补偿计时器的不准确性，从而提升精确度。举个例子，如果你的计时器会在回调时触发二次计时，可以在每次回调任务结束的时候，根据最初的系统时间和该任务的执行时间进行差值比较，来修正后续的计时器时间。\n                    </p>\n                    <h3 data-nodeid=\"1280\">Node.js 中的 Event Loop</h3>\n                    <p data-nodeid=\"1281\">\n                      除了浏览器，Node.js 中同样存在 Event Loop。由于 JavaScript\n                      是单线程的，Event Loop 的设计使 Node.js\n                      可以通过将操作转移到系统内核中，来执行非阻塞 I/O 操作。\n                    </p>\n                    <p data-nodeid=\"1282\">Node.js 中的事件循环执行过程为：</p>\n                    <ol data-nodeid=\"1283\">\n                      <li data-nodeid=\"1284\">\n                        <p data-nodeid=\"1285\">\n                          当 Node.js\n                          启动时将初始化事件循环，处理提供的输入脚本；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1286\">\n                        <p data-nodeid=\"1287\">\n                          提供的输入脚本可以进行异步 API\n                          调用，然后开始处理事件循环；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1288\">\n                        <p data-nodeid=\"1289\">\n                          在事件循环的每次运行之间，Node.js\n                          会检查它是否正在等待任何异步 I/O\n                          或计时器，如果没有，则将其干净地关闭。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1290\">\n                      与浏览器不一样，Node.js 中事件循环分成不同的阶段：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"> &nbsp; ┌───────────────────────────┐\n</div></li><li><div class=\"code-word\">┌─&gt;│ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; timers &nbsp; &nbsp; &nbsp; &nbsp;  │\n</div></li><li><div class=\"code-word\">│  └─────────────┬─────────────┘\n</div></li><li><div class=\"code-word\">│  ┌─────────────┴─────────────┐\n</div></li><li><div class=\"code-word\">│  │ &nbsp; &nbsp; pending callbacks &nbsp; &nbsp; │\n</div></li><li><div class=\"code-word\">│  └─────────────┬─────────────┘\n</div></li><li><div class=\"code-word\">│  ┌─────────────┴─────────────┐\n</div></li><li><div class=\"code-word\">│  │ &nbsp; &nbsp; &nbsp; idle, prepare &nbsp; &nbsp; &nbsp; │\n</div></li><li><div class=\"code-word\">│  └─────────────┬─────────────┘ &nbsp; &nbsp;  ┌───────────────┐\n</div></li><li><div class=\"code-word\">│  ┌─────────────┴─────────────┐ &nbsp; &nbsp;  │ &nbsp; incoming: &nbsp; │\n</div></li><li><div class=\"code-word\">│  │ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; poll &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  │&lt;─────┤ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |\n</div></li><li><div class=\"code-word\">│  └─────────────┬─────────────┘ &nbsp; &nbsp;  │ &nbsp; data, etc.  │\n</div></li><li><div class=\"code-word\">│  ┌─────────────┴─────────────┐ &nbsp; &nbsp;  └───────────────┘\n</div></li><li><div class=\"code-word\">│  │ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; check &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; │\n</div></li><li><div class=\"code-word\">│  └─────────────┬─────────────┘\n</div></li><li><div class=\"code-word\">│  ┌─────────────┴─────────────┐\n</div></li><li><div class=\"code-word\">└──┤ &nbsp; &nbsp;  close callbacks &nbsp; &nbsp;  │\n</div></li><li><div class=\"code-word\"> &nbsp; └───────────────────────────┘\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3412\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/38/42/CioPOWB5CK-Ae-ZRAAG6BriFZRI860.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"3415\"\n                      /><br />\n                      由于事件循环阶段划分不一致，Node.js\n                      和浏览器在对宏任务和微任务的处理上也不一样。\n                    </p>\n\n                    <h3 data-nodeid=\"1321\" class=\"\">宏任务和微任务</h3>\n                    <p data-nodeid=\"1322\" class=\"te-preview-highlight\">\n                      事件循环中的异步回调队列有两种：宏任务（MacroTask）和微任务（MicroTask）队列。\n                    </p>\n                    <p data-nodeid=\"1323\" class=\"\">什么是宏任务和微任务呢？</p>\n                    <ul data-nodeid=\"1324\">\n                      <li data-nodeid=\"1325\">\n                        <p data-nodeid=\"1326\">\n                          宏任务：包括 script 全部代码、<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1460\"\n                            >setTimeout</code\n                          >、<code data-backticks=\"1\" data-nodeid=\"1462\"\n                            >setInterval</code\n                          >、<code data-backticks=\"1\" data-nodeid=\"1464\"\n                            >setImmediate</code\n                          >（Node.js）、<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1466\"\n                            >requestAnimationFrame</code\n                          >（浏览器）、I/O 操作、UI\n                          渲染（浏览器），这些代码执行便是宏任务。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1327\">\n                        <p data-nodeid=\"1328\">\n                          微任务：包括<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1469\"\n                            >process.nextTick</code\n                          >（Node.js）、<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1471\"\n                            >Promise</code\n                          >、<code data-backticks=\"1\" data-nodeid=\"1473\"\n                            >MutationObserver</code\n                          >，这些代码执行便是微任务。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1329\">\n                      为什么要将异步任务分为宏任务和微任务呢？这是为了避免回调队列中等待执行的异步任务（宏任务）过多，导致某些异步任务（微任务）的等待时间过长。在每个宏任务执行完成之后，会先将微任务队列中的任务执行完毕，再执行下一个宏任务。\n                    </p>\n                    <p data-nodeid=\"1330\">\n                      因此，前面我们所说的回调队列可以理解为宏任务队列，同时还有另外一个任务队列为微任务队列。\n                    </p>\n                    <p data-nodeid=\"1331\">\n                      在浏览器的异步回调队列中，宏任务和微任务的执行过程如下：\n                    </p>\n                    <ol data-nodeid=\"1332\">\n                      <li data-nodeid=\"1333\">\n                        <p data-nodeid=\"1334\">\n                          宏任务队列一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1335\">\n                        <p data-nodeid=\"1336\">\n                          微任务队列中所有的任务都会被依次取出来执行，直到微任务队列为空。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1337\">\n                        <p data-nodeid=\"1338\">\n                          在执行完所有的微任务之后，执行下一个宏任务之前，浏览器会执行\n                          UI 渲染操作、更新界面。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1339\">\n                      我们能看到，在浏览器中每个宏任务执行完成后，会执行微任务队列中的任务。而在\n                      Node.js 中，事件循环分为 6\n                      个阶段，微任务会在事件循环的各个阶段之间执行。也就是说，每当一个阶段执行完毕，就会去执行微任务队列的任务。\n                    </p>\n                    <p data-nodeid=\"1340\">\n                      宏任务和微任务的执行顺序，常常会被用作面试题，比如下面这道考察<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1483\"\n                        >Promise</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1485\"\n                        >setTimeout</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1487\"\n                        >async/await</code\n                      >等 API 执行顺序的题目：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">console.log(<span class=\"hljs-string\">\"script start\"</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">setTimeout(() =&gt; {\n</div></li><li><div class=\"code-word\"> &nbsp;console.log(<span class=\"hljs-string\">\"setTimeout\"</span>);\n</div></li><li><div class=\"code-word\">}, <span class=\"hljs-number\">1000</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">Promise.resolve()\n</div></li><li><div class=\"code-word\">  .then(function () {\n</div></li><li><div class=\"code-word\"> &nbsp; &nbsp;console.log(<span class=\"hljs-string\">\"promise1\"</span>);\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">  .then(function () {\n</div></li><li><div class=\"code-word\"> &nbsp; &nbsp;console.log(<span class=\"hljs-string\">\"promise2\"</span>);\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">async function <span class=\"hljs-title\">errorFunc</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\"> &nbsp;<span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\"> &nbsp; &nbsp;await Promise.reject(<span class=\"hljs-string\">\"error!!!\"</span>);\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">catch</span> (e) {\n</div></li><li><div class=\"code-word\"> &nbsp; &nbsp;console.log(<span class=\"hljs-string\">\"error caught\"</span>); <span class=\"hljs-comment\">// 微1-3</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"> &nbsp;console.log(<span class=\"hljs-string\">\"errorFunc\"</span>);\n</div></li><li><div class=\"code-word\"> &nbsp;<span class=\"hljs-keyword\">return</span> Promise.resolve(<span class=\"hljs-string\">\"errorFunc success\"</span>);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">errorFunc().then((res) =&gt; console.log(<span class=\"hljs-string\">\"errorFunc then res\"</span>));\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">console.log(<span class=\"hljs-string\">\"script end\"</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1342\">\n                      你知道这道题的答案是什么吗？欢迎在留言区写下你的解题过程。\n                    </p>\n                    <h3 data-nodeid=\"1343\">小结</h3>\n                    <p data-nodeid=\"1344\">\n                      今天我介绍了 JavaScript\n                      的单线程设计，它的设计初衷是为了让用户获得更好的交互体验。同时，为了避免单线程的任务执行过程中发生阻塞，事件循环（Event\n                      Loop）机制便出现了。\n                    </p>\n                    <p data-nodeid=\"1345\">\n                      在浏览器和 Node.js 中，都存在单线程的 Event Loop\n                      设计，它们之间的不一致主要表现为 Event Loop\n                      阶段划分以及宏任务和微任务的处理。\n                    </p>\n                    <p data-nodeid=\"1346\">\n                      或许你会感到疑惑，除了应对面试以外，掌握 JavaScript\n                      的事件循环、宏任务和微任务相关机制，对我们有什么用处呢？\n                    </p>\n                    <p data-nodeid=\"1347\">\n                      要知道，浏览器中在执行 JavaScript\n                      代码的时候不会进行页面渲染，如果一项任务花费的时间太长，浏览器将无法执行其他任务（例如处理用户事件）。因此，当存在大量复杂的计算、或导致了死循环的编程错误时，甚至会使页面终止。\n                    </p>\n                    <p data-nodeid=\"1348\" class=\"\">\n                      我们可以更合理地利用这些机制来拆分任务，比如考虑将多次触发的数据变更通过微任务收集起来，再一起进行\n                      UI\n                      的更新和渲染，便可以降低浏览器渲染的频率，提升浏览器的性能，给到用户更好的体验。\n                    </p>\n            "}