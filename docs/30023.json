{"title":"22 | 思路拓展：如何打造高性能的 React 应用？","context":"\n                    <p data-nodeid=\"56901\">\n                      React\n                      应用也是前端应用，如果之前你知道一些前端项目普适的性能优化手段，比如资源加载过程中的优化、减少重绘与回流、服务端渲染、启用\n                      CDN 等，那么这些手段对于 React 来说也是同样奏效的。\n                    </p>\n                    <p data-nodeid=\"56902\">\n                      不过对于 React\n                      项目来说，它有一个区别于传统前端项目的重要特点，就是<strong\n                        data-nodeid=\"57014\"\n                        >以 React 组件的形式来组织逻辑</strong\n                      >：组件允许我们将 UI\n                      拆分为独立可复用的代码片段，并对每个片段进行独立构思。因此，除了前面所提到的普适的前端性能优化手段之外，React\n                      还有一些充满了自身特色的性能优化思路，这些思路基本都围绕“组件性能优化”这个中心思想展开。本讲我将带你认识其中最关键的\n                      3 个思路：\n                    </p>\n                    <ol data-nodeid=\"56903\">\n                      <li data-nodeid=\"56904\">\n                        <p data-nodeid=\"56905\">\n                          <strong data-nodeid=\"57018\"\n                            >使用 shouldComponentUpdate\n                            规避冗余的更新逻辑</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"56906\">\n                        <p data-nodeid=\"56907\">\n                          <strong data-nodeid=\"57022\"\n                            >PureComponent + Immutable.js</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"56908\">\n                        <p data-nodeid=\"56909\">\n                          <strong data-nodeid=\"57026\"\n                            >React.memo 与 useMemo</strong\n                          >\n                        </p>\n                      </li>\n                    </ol>\n                    <blockquote data-nodeid=\"56910\">\n                      <p data-nodeid=\"56911\">\n                        注：<strong data-nodeid=\"57032\"\n                          >这 3 个思路同时也是 React\n                          面试中“性能优化”这一环的核心所在</strong\n                        >。大家在回答类似题目的时候，不管其他的细枝末节的优化策略能不能想起来，以上三点一定要尽量答全。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"56912\">\n                      朴素思路：善用 shouldComponentUpdate\n                    </h3>\n                    <p data-nodeid=\"56913\">\n                      shouldComponentUpdate 是 React 类组件的一个生命周期。关于\n                      shouldComponentUpdate 是什么，我们已经在第 02\n                      讲有过介绍，这里先简单复习一下。\n                    </p>\n                    <p data-nodeid=\"56914\">\n                      shouldComponentUpdate 的调用形式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">shouldComponentUpdate(nextProps, nextState)\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"56916\">\n                      render 方法由于伴随着对虚拟 DOM\n                      的构建和对比，过程可以说相当耗时。而在 React\n                      当中，很多时候我们会不经意间就频繁地调用了\n                      render。为了避免不必要的 render 操作带来的性能开销，React\n                      提供了 shouldComponentUpdate 这个口子。<strong\n                        data-nodeid=\"57041\"\n                        >React 组件会根据 shouldComponentUpdate\n                        的返回值，来决定是否执行该方法之后的生命周期，进而决定是否对组件进行\n                        re-render（重渲染）</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"58253\" class=\"\">\n                      shouldComponentUpdate 的默认值为 true，也就是说\n                      <strong data-nodeid=\"58259\">“无条件 re-render”</strong\n                      >。在实际的开发中，我们往往通过手动往\n                      shouldComponentUpdate 中填充判定逻辑，来实现“有条件的\n                      re-render”。\n                    </p>\n\n                    <p data-nodeid=\"56918\">\n                      接下来我们通过一个 Demo，来感受一下 shouldComponentUpdate\n                      到底是如何解决问题的。在这个 Demo 中会涉及 3\n                      个组件：子组件 ChildA、ChildB 及父组件 App 组件。\n                    </p>\n                    <p data-nodeid=\"56919\">\n                      首先我们来看两个子组件的代码，这里为了尽量简化与数据变更无关的逻辑，ChildA\n                      和 ChildB\n                      都只负责从父组件处读取数据并渲染，它们的编码分别如下所示。\n                    </p>\n                    <p data-nodeid=\"56920\">ChildA.js：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ChildA</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ChildA 的render方法执行了\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"childA\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        子组件A的内容：\n</div></li><li><div class=\"code-word\">        {this.props.text}\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"56922\">ChildB.js：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ChildB</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ChildB 的render方法执行了\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"childB\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        子组件B的内容：\n</div></li><li><div class=\"code-word\">        {this.props.text}\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"56924\">\n                      在共同的父组件 App.js 中，会将 ChildA 和 ChildB\n                      组合起来，并分别向其中注入数据：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> ChildA <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./ChildA'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> ChildB <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./ChildB'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  state = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">textA</span>: <span class=\"hljs-string\">'我是A的文本'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">textB</span>: <span class=\"hljs-string\">'我是B的文本'</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  changeA = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState({\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">textA</span>: <span class=\"hljs-string\">'A的文本被修改了'</span>\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  changeB = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState({\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">textB</span>: <span class=\"hljs-string\">'B的文本被修改了'</span>\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.changeA}</span>&gt;</span>点击修改A处的文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.changeB}</span>&gt;</span>点击修改B处的文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChildA</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">{this.state.textA}/</span>&gt;</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChildB</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">{this.state.textB}/</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"56926\">\n                      App\n                      组件最终渲染到界面上的效果如下图所示，两个子组件在图中分别被不同颜色的标注圈出：\n                    </p>\n                    <p data-nodeid=\"60954\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8B/D3/CgqCHl_ga3-ADPKZAACHTPJhWNw299.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"60957\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"56928\">\n                      通过点击左右两个按钮，我们可以分别对 ChildA 和 ChildB\n                      中的文案进行修改。\n                    </p>\n                    <p data-nodeid=\"56929\">\n                      由于初次渲染时，两个组件的 render\n                      函数都必然会被触发，因此控制台在挂载完成后的输出内容如下图所示：\n                    </p>\n                    <p data-nodeid=\"61496\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/03/AA/CgpVE1_ga4qAdOlsAAAzU_bU8eQ279.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"61499\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"56931\">\n                      接下来我点击左侧的按钮，尝试对 A\n                      处的文本进行修改。我们可以看到界面上只有 A\n                      处的渲染效果发生了改变，如下图箭头处所示：\n                    </p>\n                    <p data-nodeid=\"62038\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/03/A9/Cip5yF_ga5KALnO1AABLrDrgDGM452.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"62041\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"56933\">\n                      但是如果我们打开控制台，会发现输出的内容如下图所示：\n                    </p>\n                    <p data-nodeid=\"62580\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/03/A9/Cip5yF_ga5qABE7ZAABs-adr_7k107.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"62583\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"56935\">\n                      这样的输出结果告诉我们，在刚刚的点击动作后，不仅 ChildA 的\n                      re-render 被触发了，ChildB 的 re-render 也被触发了。\n                    </p>\n                    <p data-nodeid=\"56936\">\n                      在 React 中，<strong data-nodeid=\"57075\"\n                        >只要父组件发生了更新，那么所有的子组件都会被无条件更新</strong\n                      >。这就导致了 ChildB 的 props\n                      尽管没有发生任何变化，它本身也没有任何需要被更新的点，却还是会走一遍更新流程。\n                    </p>\n                    <blockquote data-nodeid=\"56937\">\n                      <p data-nodeid=\"56938\">\n                        注：同样的情况也适用于组件自身的更新：当组件自身调用了\n                        setState 后，那么不管 setState\n                        前后的状态内容是否真正发生了变化，它都会去走一遍更新流程。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"56939\">\n                      而在刚刚这个更新流程中，shouldComponentUpdate\n                      函数没有被手动定义，因此它将返回“true”这个默认值。“true”则意味着对更新流程不作任何制止，也即所谓的“无条件\n                      re-render”。在这种情况下，我们就可以考虑使用\n                      shouldComponentUpdate 来对更新过程进行管控，避免没有意义的\n                      re-render 发生。\n                    </p>\n                    <p data-nodeid=\"56940\">\n                      现在我们就可以为 ChildB 加装这样一段 shouldComponentUpdate\n                      逻辑：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">shouldComponentUpdate(nextProps, nextState) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 判断 text 属性在父组件更新前后有没有发生变化，若没有发生变化，则返回 false</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span>(nextProps.text === <span class=\"hljs-keyword\">this</span>.props.text) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 只有在 text 属性值确实发生变化时，才允许更新进行下去</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"56942\">\n                      在这段逻辑中，我们对 ChildB 中的可变数据，也就是\n                      this.props.text 这个属性进行了判断。\n                    </p>\n                    <p data-nodeid=\"56943\">\n                      这样，当父组件 App 组件发生更新、进而试图触发 ChildB\n                      的更新流程时，shouldComponentUpdate\n                      就会充当一个“守门员”的角色：它会检查新下发的 props.text\n                      是否和之前的值一致，如果一致，那么就没有更新的必要，直接返回“false”将整个\n                      ChildB 的更新生命周期中断掉即可。只有当 props.text\n                      确实发生变化时，它才会“准许” re-render 的发生。\n                    </p>\n                    <p data-nodeid=\"56944\">\n                      在 shouldComponentUpdate\n                      的加持下，当我们再次点击左侧按钮，试图修改 ChildA\n                      的渲染内容时，控制台的输出就会变成下图这样：\n                    </p>\n                    <p data-nodeid=\"63661\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/03/AA/CgpVE1_ga6yAVvq5AABmBay34YA804.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"63664\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"56946\">\n                      我们看到，控制台中现在只有 ChildA 的 re-render\n                      提示。ChildB “稳如泰山”，成功躲开了一次多余的渲染。\n                    </p>\n                    <p data-nodeid=\"56947\">\n                      使用 shouldComponentUpdate\n                      来调停不必要的更新，避免无意义的 re-render 发生，这是\n                      React\n                      组件中最基本的性能优化手段，也是最重要的手段。许多看似高级的玩法，都是基于\n                      shouldComponentUpdate 衍生出来的。我们接下来要讲的\n                      PureComponent，就是这类玩法中的典型。\n                    </p>\n                    <h3 data-nodeid=\"56948\">\n                      进阶玩法：PureComponent &nbsp;+ Immutable.js\n                    </h3>\n                    <h4 data-nodeid=\"56949\">\n                      PureComponent：提前帮你安排好更新判定逻辑\n                    </h4>\n                    <p data-nodeid=\"56950\">\n                      shouldComponentUpdate\n                      虽然一定程度上帮我们解决了性能方面的问题，但每次避免\n                      re-render，都要手动实现一次\n                      shouldComponentUpdate，未免太累了。作为一个不喜欢重复劳动的前端开发者来说，在写了不计其数个\n                      shouldComponentUpdate\n                      逻辑之后，难免会怀疑人生，进而发出由衷的感叹——“这玩意儿要是能内置到组件里该多好啊！”。\n                    </p>\n                    <p data-nodeid=\"65835\" class=\"\">\n                      哪里有需求，哪里就有产品。React 15.3\n                      很明显听到了开发者的声音，它新增了一个叫\n                      <a\n                        href=\"https://zh-hans.reactjs.org/docs/react-api.html#reactpurecomponent\"\n                        data-nodeid=\"65839\"\n                        >PureComponent</a\n                      >\n                      的类，恰到好处地解决了“程序员写 shouldComponentUpdate\n                      写出腱鞘炎”这个问题。\n                    </p>\n\n                    <p data-nodeid=\"56952\">\n                      PureComponent 与 Component 的区别点，就在于它内置了对\n                      shouldComponentUpdate 的实现：PureComponent 将会在\n                      shouldComponentUpdate 中对组件更新前后的 props 和 state\n                      进行<strong data-nodeid=\"57100\">浅比较</strong\n                      >，并根据浅比较的结果，决定是否需要继续更新流程。\n                    </p>\n                    <p data-nodeid=\"56953\">\n                      “浅比较”将针对值类型数据对比其值是否相等，而针对数组、对象等引用类型的数据则对比其引用是否相等。\n                    </p>\n                    <p data-nodeid=\"56954\">\n                      在我们开篇的 Demo 中，若把 ChildB 的父类从 Component\n                      替换为\n                      PureComponent（修改后的代码如下所示），那么无须手动编写\n                      shouldComponentUpdate，也可以达到同样避免 re-render\n                      的目的。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ChildB</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">PureComponent</span> </span>{\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ChildB 的render方法执行了\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"childB\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        子组件B的内容：\n</div></li><li><div class=\"code-word\">        {this.props.text}\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"56956\">\n                      此时再去修改 ChildA 中的文本，我们会发现 ChildB\n                      同样不受影响。点击左侧按钮后，控制台对应的输出内容如下图高亮处所示：\n                    </p>\n                    <p data-nodeid=\"66918\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/03/A9/Cip5yF_ga8qADhf9AACUfTqE0ag890.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"66921\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"56958\">\n                      在值类型数据这种场景下，PureComponent\n                      可以说是战无不胜。但是如果数据类型为引用类型，那么这种基于浅比较的判断逻辑就会带来这样两个风险：\n                    </p>\n                    <ol data-nodeid=\"56959\">\n                      <li data-nodeid=\"56960\">\n                        <p data-nodeid=\"56961\">\n                          若数据内容没变，但是引用变了，那么浅比较仍然会认为“数据发生了变化”，进而触发一次不必要的更新，导致过度渲染；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"56962\">\n                        <p data-nodeid=\"56963\">\n                          若数据内容变了，但是引用没变，那么浅比较则会认为“数据没有发生变化”，进而阻断一次更新，导致不渲染。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"56964\">怎么办呢？Immutable.js 来帮忙！</p>\n                    <h4 data-nodeid=\"56965\">\n                      Immutable：“不可变值”让“变化”无处遁形\n                    </h4>\n                    <p data-nodeid=\"56966\">\n                      PureComponent\n                      浅比较带来的问题，本质上是对“变化”的判断不够精准导致的。那有没有一种办法，能够让引用的变化和内容的变化之间，建立一种必然的联系呢？\n                    </p>\n                    <p data-nodeid=\"56967\">这就是 Immutable.js 所做的事情。</p>\n                    <p data-nodeid=\"56968\">\n                      Immutable 直译过来是“不可变的”，顾名思义，Immutable.js\n                      是对“不可变值”这一思想的贯彻实践。它在 2014 年被 Facebook\n                      团队推出，Facebook\n                      给它的定位是“实现持久性数据结构的库”。<strong\n                        data-nodeid=\"57119\"\n                        >所谓“持久性数据”，指的是这个数据只要被创建出来了，就不能被更改。我们对当前数据的任何修改动作，都会导致一个新的对象的返回</strong\n                      >。这就将数据内容的变化和数据的引用严格地关联了起来，使得“变化”无处遁形。\n                    </p>\n                    <p data-nodeid=\"56969\">\n                      这里我用一个简单的例子，来演示一下 Immutable.js\n                      的效果。请看下面代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 引入 immutable 库里的 Map 对象，它用于创建对象</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { Map } from <span class=\"hljs-string\">'immutable'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 初始化一个对象 baseMap</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> baseMap = Map({\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-string\">'修言'</span>,\n</div></li><li><div class=\"code-word\">  career: <span class=\"hljs-string\">'前端'</span>,\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-number\">99</span>\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 使用 immutable 暴露的 Api 来修改 baseMap 的内容</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> changedMap = baseMap.set({\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-number\">100</span>\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 我们会发现修改 baseMap 后将会返回一个新的对象，这个对象的引用和 baseMap 是不同的</span>\n</div></li><li><div class=\"code-word\">console.log(<span class=\"hljs-string\">'baseMap === changedMap'</span>, baseMap === changedMap)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"56971\">\n                      由此可见，PureComonent 和 Immutable.js\n                      真是一对好基友！在实际的开发中，我们也确实经常左手\n                      PureComonent，右手 Immutable.js，研发质量大大地提升呀！\n                    </p>\n                    <blockquote data-nodeid=\"56972\">\n                      <p data-nodeid=\"56973\">\n                        值得注意的是，由于 Immutable.js\n                        存在一定的学习成本，并不是所有场景下都可以作为最优解被团队采纳。因此，一些团队也会基于\n                        PureComonent 和 Immutable.js\n                        去打造将两者结合的公共类，通过改写 setState\n                        来提升研发体验，这也是不错的思路。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"56974\">\n                      函数组件的性能优化：React.memo 和 useMemo\n                    </h3>\n                    <p data-nodeid=\"56975\">\n                      以上咱们讨论的都是类组件的优化思路。那么在函数组件中，有没有什么通用的手段可以阻止“过度\n                      re-render”的发生呢？接下来我们就一起认识一下“函数版”的\n                      shouldComponentUpdate/Purecomponent —— React.memo。\n                    </p>\n                    <h4 data-nodeid=\"56976\">\n                      React.memo：“函数版”shouldComponentUpdate/PureComponent\n                    </h4>\n                    <p data-nodeid=\"56977\">\n                      React.memo 是 React\n                      导出的一个顶层函数，它本质上是一个高阶组件，负责对函数组件进行包装。基本的调用姿势如下面代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React from <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 定义一个函数组件</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">FunctionDemo</span><span class=\"hljs-params\">(props)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> xxx\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// areEqual 函数是 memo 的第二个入参，我们之前放在 shouldComponentUpdate 里面的逻辑就可以转移至此处</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">areEqual</span><span class=\"hljs-params\">(prevProps, nextProps)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/*\n</span></div></li><li><div class=\"code-word\">  return true if passing nextProps to render would return\n</div></li><li><div class=\"code-word\">  the same result as passing prevProps to render,\n</div></li><li><div class=\"code-word\">  otherwise return false\n</div></li><li><div class=\"code-word\">  */\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 使用 React.memo 来包装函数组件</span>\n</div></li><li><div class=\"code-word\">export <span class=\"hljs-keyword\">default</span> React.memo(FunctionDemo, areEqual);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"56979\">\n                      <strong data-nodeid=\"57131\"\n                        >React.memo\n                        会帮我们“记住”函数组件的渲染结果，在组件前后两次 props\n                        对比结果一致的情况下，它会直接复用最近一次渲染的结果</strong\n                      >。如果我们的组件在相同的 props\n                      下会渲染相同的结果，那么使用 React.memo\n                      来包装它将是个不错的选择。\n                    </p>\n                    <p data-nodeid=\"56980\">\n                      从示例中我们可以看出，React.memo\n                      接收两个参数，第一个参数是我们需要渲染的目标组件，第二个参数\n                      areEqual 则用来承接 props 的对比逻辑。<strong\n                        data-nodeid=\"57137\"\n                        >之前我们在 shouldComponentUpdate\n                        里面做的事情，现在就可以放在 areEqual 里来做</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"56981\">\n                      比如开篇 Demo 中的 ChildB 组件，就完全可以用 Function\n                      Component + React.memo 来改造。改造后的 ChildB 代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 将 ChildB 改写为 function 组件</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ChildB</span>(<span class=\"hljs-params\">props</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ChildB 的render 逻辑执行了\"</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"childB\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      子组件B的内容：\n</div></li><li><div class=\"code-word\">      {props.text}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// areEqual 用于对比 props 的变化</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">areEqual</span>(<span class=\"hljs-params\">prevProps, nextProps</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span>(prevProps.text === nextProps.text) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 使用 React.memo 来包装 ChildB</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> React.memo(ChildB, areEqual);\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"56983\">\n                      改造后的组件在效果上就等价于 shouldComponentUpdate\n                      加持后的类组件 ChildB。\n                    </p>\n                    <p data-nodeid=\"56984\">\n                      <strong data-nodeid=\"57144\"\n                        >这里的 areEqual 函数是一个可选参数，当我们不传入\n                        areEqual 时，React.memo 也可以工作，此时它的作用就类似于\n                        PureComponent——React.memo 会自动为你的组件执行 props\n                        的浅比较逻辑</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"56985\">\n                      和 shouldComponentUpdate 不同的是，React.memo 只负责对比\n                      props，而不会去感知组件内部状态（state）的变化。\n                    </p>\n                    <h4 data-nodeid=\"56986\">useMemo：更加“精细”的 memo</h4>\n                    <p data-nodeid=\"56987\">\n                      通过上面的分析我们知道，React.memo 可以实现类似于\n                      shouldComponentUpdate 或者 PureComponent\n                      的效果，对组件级别的 re-render\n                      进行管控。但是有时候，我们希望复用的并不是整个组件，而是组件中的某一个或几个部分。这种更加“精细化”的管控，就需要\n                      useMemo 来帮忙了。\n                    </p>\n                    <p data-nodeid=\"56988\">\n                      <strong data-nodeid=\"57152\"\n                        >简而言之，React.memo 控制是否需要重渲染一个组件，而\n                        useMemo 控制的则是是否需要重复执行某一段逻辑</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"56989\">\n                      useMemo 的使用方式如下面代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"56991\">\n                      我们可以把目标逻辑作为第一个参数传入，把逻辑的依赖项数组作为第二个参数传入。这样只有当依赖项数组中的某个依赖发生变化时，useMemo\n                      才会重新执行第一个入参中的目标逻辑。\n                    </p>\n                    <p data-nodeid=\"56992\" class=\"\">\n                      这里我仍然以开篇的示例为例，现在我尝试向 ChildB\n                      中传入两个属性：text 和\n                      count，它们分别是一段文本和一个数字。当我点击右边的按钮时，只有\n                      count 数字会发生变化。改造后的 App 组件代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  state = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">textA</span>: <span class=\"hljs-string\">'我是A的文本'</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">stateB</span>: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'我是B的文本'</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">10</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  changeA = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState({\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">textA</span>: <span class=\"hljs-string\">'A的文本被修改了'</span>\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  changeB = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState({\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">stateB</span>: {\n</div></li><li><div class=\"code-word\">        ...this.state.stateB,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">100</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.changeA}</span>&gt;</span>点击修改A处的文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.changeB}</span>&gt;</span>点击修改B处的文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChildA</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">{this.state.textA}/</span>&gt;</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChildB</span> {<span class=\"hljs-attr\">...this.state.stateB</span>}/&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> App;\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"56994\">\n                      在 ChildB 中，使用 useMemo 来加持 text 和 count\n                      各自的渲染逻辑。改造后的 ChildB 代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React,{ useMemo } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ChildB</span>(<span class=\"hljs-params\">{text, count}</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ChildB 的render 逻辑执行了\"</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// text 文本的渲染逻辑</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> renderText = <span class=\"hljs-function\">(<span class=\"hljs-params\">text</span>)=&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'renderText 执行了'</span>)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    子组件B的文本内容：\n</div></li><li><div class=\"code-word\">      {text}\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// count 数字的渲染逻辑</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> renderCount = <span class=\"hljs-function\">(<span class=\"hljs-params\">count</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'renderCount 执行了'</span>)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      子组件B的数字内容：\n</div></li><li><div class=\"code-word\">        {count}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 使用 useMemo 加持两段渲染逻辑</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> textContent = useMemo(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>renderText(text),[text])\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> countContent = useMemo(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>renderCount(count),[count])\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"childB\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      {textContent}\n</div></li><li><div class=\"code-word\">      {countContent}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"56996\">\n                      渲染 App 组件，我们可以看到初次渲染时，renderText 和\n                      renderCount 都执行了，控制台输出如下图所示：\n                    </p>\n                    <p data-nodeid=\"69077\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8B/D3/CgqCHl_ga_SAeZvVAACbMQxPKsc444.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"69080\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"56998\">\n                      点击右边按钮，对 count\n                      进行修改，修改后的界面会发生如下的变化：\n                    </p>\n                    <p data-nodeid=\"69619\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/03/AA/CgpVE1_ga_yAZ5u-AADTkxhPMO8352.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"69622\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"57000\">\n                      可以看出，由于 count 发生了变化，因此 useMemo 针对\n                      renderCount 的逻辑进行了重计算。而 text 没有发生变化，因此\n                      renderText 的逻辑压根没有执行。\n                    </p>\n                    <p data-nodeid=\"57001\">\n                      使用\n                      useMemo，我们可以对函数组件的执行逻辑进行更加细粒度的管控（尤其是定向规避掉一些高开销的计算），同时也弥补了\n                      React.memo\n                      无法感知函数内部状态的遗憾，这对我们整体的性能提升是大有裨益的。\n                    </p>\n                    <h3 data-nodeid=\"57002\">总结</h3>\n                    <p data-nodeid=\"57003\">\n                      本讲，我们学习了 React 组件性能优化中最重要的 3 个思路。\n                    </p>\n                    <p data-nodeid=\"57004\">\n                      这 3\n                      个思路不仅可以作为大家日常实战的知识储备，更能够帮助你在面试场景下做到言之有物。事实上，在“React\n                      性能优化”这个问题下，许多候选人的回答犹如隔靴搔痒，总在一些无关紧要的细节上使劲儿。若你能把握好本讲的内容，择其中一个或多个方向深入探究，相信你已经超越了大部分的同行。\n                    </p>\n                    <p data-nodeid=\"57005\">\n                      下一讲，我们将学习 React\n                      组件的设计模式，为打造“高质量应用”做知识储备。\n                    </p>\n            "}