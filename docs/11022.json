{"title":"第19讲：把路由放在前端意味着什么？","context":"\n                    <p data-nodeid=\"44690\">\n                      当浏览器地址栏中的 URL\n                      发生变化时，会请求对应的网络资源，而负责响应这个网络资源的服务就称为<strong\n                        data-nodeid=\"44756\"\n                        >路由</strong\n                      >。在早期的 Web\n                      开发中，路由都是交由服务端处理，但随着前端技术的快速发展，路由模块逐渐转移交给了前端进行控制，而路由转移到前端，正是前后端分离和单页应用架构\n                      的 基石。这一课时我们来深入理解前端路由的技术细节。\n                    </p>\n                    <h3 data-nodeid=\"44691\">前端路由实现基础</h3>\n                    <p data-nodeid=\"44692\">\n                      默认情况下，当地址栏的 URL\n                      发生变化时，浏览器会向服务端发起新的请求。所以实现前端路由的重要基础就是在修改\n                      URL 时，不引起浏览器向后端请求数据。根据浏览器提供的\n                      API，有下面两种实现方案。\n                    </p>\n                    <h4 data-nodeid=\"44693\">基于 hash 实现</h4>\n                    <p data-nodeid=\"44694\">\n                      前面提到当 URL\n                      变化时浏览器会发送请求，但有一种特例，那就是 hash\n                      值的变化不会触发浏览器发起请求。\n                    </p>\n                    <p data-nodeid=\"47382\" class=\"\">\n                      hash 值是指 URL“#”号后面的内容，通过 location.hash\n                      属性可以读写 hash 值，这个值可以让浏览器将页面滚动到 ID 与\n                      hash 值相等的 DOM 元素位置，不会传给服务端。\n                    </p>\n\n                    <p data-nodeid=\"44696\">\n                      要监听它的变化也比较简单，通过监听 window 对象的\n                      hashchange 事件就可以感知到它的变化。\n                    </p>\n                    <p data-nodeid=\"44697\">\n                      这种实现方式占用了 hash\n                      值，导致默认的页面滚动行为失效，对于有滚动定位需求的情况需要自行手动获取元素的位置并调用\n                      BOM 相关 API 进行滚动。\n                    </p>\n                    <h4 data-nodeid=\"44698\">基于 history 实现</h4>\n                    <p data-nodeid=\"44699\">\n                      HTML 5 提出了一种更规范的前端路由实现方式，那就是通过\n                      history 对象。\n                    </p>\n                    <p data-nodeid=\"44700\">\n                      history 提供了两个函数来修改 URL，即 history.pushState()\n                      和 history.replaceState()，这两个 API\n                      可以在不进行刷新的情况下，来操作浏览器的历史 记录\n                      。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录。\n                    </p>\n                    <p data-nodeid=\"44701\">\n                      监听 URL 变化则可以通过监听 window 对象上的 popstate\n                      事件来实现。但需要注意的是，history.pushState() 或\n                      history.replaceState() 不会触发 popstate\n                      事件，这时我们需要手动触发页面渲染。\n                    </p>\n                    <p data-nodeid=\"44702\">\n                      虽然能通过这种方式实现前端路由功能，但并不能拦截浏览器默认的请求行为，当用户修改地址栏网址时还是会向服务端发起请求，所以还需要服务端进行设置，将所有\n                      URL 请求转向前端页面，交给前端进行解析。\n                    </p>\n                    <p data-nodeid=\"44703\">\n                      下面是 vue-router 官网的 Nginx\n                      配置例子：表示对于匹配的路径，按照指定顺序依次检查对应路径文件是否存在，对应路径目录是否存在，如果没有找到任何文件\n                      或目录 ，就返回 index.html。而 index.html 就会引入对应的\n                      JavaScript 代码在浏览器端进行路由解析。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">location / { \n</div></li><li><div class=\"code-word\">  try_files $uri $uri/ /index.html; \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n\n                    <h3 data-nodeid=\"44705\">路由解析</h3>\n                    <p data-nodeid=\"44706\">\n                      阻止浏览器在 URL\n                      变化时向后端发送请求之后，就需要对路由进行解析了。\n                      <a href=\"https://router.vuejs.org/zh/\" data-nodeid=\"44774\"\n                        >vue-router</a\n                      >和\n                      <a href=\"https://reactrouter.com/\" data-nodeid=\"44778\"\n                        >react-router</a\n                      >都同时依赖了一个第三方库\n                      <a\n                        href=\"https://github.com/pillarjs/path-to-regexp\"\n                        data-nodeid=\"44782\"\n                        >Path-to-RegExp</a\n                      >进行路由解析，下面通过分析\n                      <a\n                        href=\"https://github.com/pillarjs/path-to-regexp/archive/v1.8.0.zip\"\n                        data-nodeid=\"44786\"\n                        >path-to-regexp 1.8 版本</a\n                      >的源码来理解路由是如何被解析的。\n                    </p>\n                    <p data-nodeid=\"44707\">\n                      路由解析又分为两个操作：<strong data-nodeid=\"44797\"\n                        >路由匹配</strong\n                      >和<strong data-nodeid=\"44798\">路由生成</strong>。\n                    </p>\n                    <h4 data-nodeid=\"44708\">路由匹配</h4>\n                    <p data-nodeid=\"44709\">\n                      路由匹配就是当获取到请求路径后，如何找到对应的配置路径。在\n                      path-to-regexp 源码中对应的是默认导出函数\n                      pathToRegexp()，该函数接收 3 个参数：\n                    </p>\n                    <ul data-nodeid=\"44710\">\n                      <li data-nodeid=\"44711\">\n                        <p data-nodeid=\"44712\">\n                          <strong data-nodeid=\"44805\">path</strong\n                          >，必传参数，值可以为自定义的请求路径，如\n                          /user/:id，也可以是正则表达式，还可以是两者组成的数组；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44713\">\n                        <p data-nodeid=\"44714\">\n                          <strong data-nodeid=\"44818\">keys</strong>，可选参数，\n                          值为 数组， 数组元素为 解析\n                          正则表达式风格的字符串或冒号开头的占位符（下文简称为“特殊字符串”）\n                          生成的令牌 ，比如字符串 /user/:id 对应的 keys 为 {\n                          name: 'id', delimiter: '/', optional: false, repeat:\n                          false }\n                          ，这个参数的值最终会被保存到返回的正则表达式对象的\n                          keys 属性中，可用于后面的路由生成；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44715\">\n                        <p data-nodeid=\"44716\">\n                          <strong data-nodeid=\"44823\">options</strong\n                          >，可选参数，执行过程中的配置信息，比如是否大小写敏感。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"44717\">\n                      函数返回值是一个带有 keys 属性的正则表达式，keys\n                      属性值类型和 keys\n                      参数相同，也是一个包含特殊字符串描述信息的数组。\n                    </p>\n                    <p data-nodeid=\"44718\">\n                      由于 path 参数可以是正则表达式、字符串、数组 3\n                      种类型数据，所以在处理 path 参数的时候分别对应 3 个函数\n                      regexpToRegexp()、stringToRegexp()、arrayToRegexp()。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;<span class=\"hljs-title\">pathToRegexp</span>&nbsp;(<span class=\"hljs-params\">path,&nbsp;keys,&nbsp;options</span>)&nbsp;</span>{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>&nbsp;(!isarray(keys))&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;options&nbsp;=&nbsp;<span class=\"hljs-comment\">/**&nbsp;@type&nbsp;{!Object}&nbsp;*/</span>&nbsp;(keys&nbsp;||&nbsp;options) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;keys&nbsp;=&nbsp;[] \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;options&nbsp;=&nbsp;options&nbsp;||&nbsp;{} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>&nbsp;(path&nbsp;<span class=\"hljs-keyword\">instanceof</span>&nbsp;<span class=\"hljs-built_in\">RegExp</span>)&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;regexpToRegexp(path,&nbsp;<span class=\"hljs-comment\">/**&nbsp;@type&nbsp;{!Array}&nbsp;*/</span>&nbsp;(keys)) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>&nbsp;(isarray(path))&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;arrayToRegexp(<span class=\"hljs-comment\">/**&nbsp;@type&nbsp;{!Array}&nbsp;*/</span>&nbsp;(path),&nbsp;<span class=\"hljs-comment\">/**&nbsp;@type&nbsp;{!Array}&nbsp;*/</span>&nbsp;(keys),&nbsp;options) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;stringToRegexp(<span class=\"hljs-comment\">/**&nbsp;@type&nbsp;{string}&nbsp;*/</span>&nbsp;(path),&nbsp;<span class=\"hljs-comment\">/**&nbsp;@type&nbsp;{!Array}&nbsp;*/</span>&nbsp;(keys),&nbsp;options) \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44720\">\n                      arrayToRegexp() 函数会遍历 path 数组然后递归调用函数\n                      pathToRegexp()，将所得的结果拼接成一个新的正则表达式并赋值\n                      keys 属性。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;<span class=\"hljs-title\">arrayToRegexp</span>&nbsp;(<span class=\"hljs-params\">path,&nbsp;keys,&nbsp;options</span>)&nbsp;</span>{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">var</span>&nbsp;parts&nbsp;=&nbsp;[] \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">for</span>&nbsp;(<span class=\"hljs-keyword\">var</span>&nbsp;i&nbsp;=&nbsp;<span class=\"hljs-number\">0</span>;&nbsp;i&nbsp;&lt;&nbsp;path.length;&nbsp;i++)&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;parts.push(pathToRegexp(path[i],&nbsp;keys,&nbsp;options).source) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">var</span>&nbsp;regexp&nbsp;=&nbsp;<span class=\"hljs-keyword\">new</span>&nbsp;<span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">'(?:'</span>&nbsp;+&nbsp;parts.join(<span class=\"hljs-string\">'|'</span>)&nbsp;+&nbsp;<span class=\"hljs-string\">')'</span>,&nbsp;flags(options)) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;attachKeys(regexp,&nbsp;keys) \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44722\">\n                      regexpToRegexp()\n                      函数会找寻正则表达式中的负向后行断言，记录到正则表达式实例的\n                      keys 属性中。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function&nbsp;<span class=\"hljs-title\">regexpToRegexp</span>&nbsp;<span class=\"hljs-params\">(path,&nbsp;keys)</span>&nbsp;</span>{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">var</span>&nbsp;groups&nbsp;=&nbsp;path.source.match(/\\((?!\\?)/g) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>&nbsp;(groups)&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">for</span>&nbsp;(<span class=\"hljs-keyword\">var</span>&nbsp;i&nbsp;=&nbsp;<span class=\"hljs-number\">0</span>;&nbsp;i&nbsp;&lt;&nbsp;groups.length;&nbsp;i++)&nbsp;{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keys.push({ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;i, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix:&nbsp;<span class=\"hljs-keyword\">null</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delimiter:&nbsp;<span class=\"hljs-keyword\">null</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optional:&nbsp;<span class=\"hljs-keyword\">false</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repeat:&nbsp;<span class=\"hljs-keyword\">false</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partial:&nbsp;<span class=\"hljs-keyword\">false</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;asterisk:&nbsp;<span class=\"hljs-keyword\">false</span>, \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pattern:&nbsp;<span class=\"hljs-keyword\">null</span> \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}) \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;} \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;attachKeys(path,&nbsp;keys) \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"44724\">\n                      一般情况下会调用 stringToRegexp()\n                      函数来将字符串转换成正则表达式。函数 stringToRegexp()\n                      只是调用了两个函数 tokensTo Regexp () 和 parse()。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;<span class=\"hljs-title\">stringToRegexp</span>&nbsp;(<span class=\"hljs-params\">path,&nbsp;keys,&nbsp;options</span>)&nbsp;</span>{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;tokensToRegExp(parse(path,&nbsp;options),&nbsp;keys,&nbsp;options) \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44726\">\n                      看到 parse()\n                      这个函数不知道是否会让你想起前面几讲中提到的编译器，该函数的主要作用和编译器中的词法分析比较像，它会将字符串转化为令牌数组。这些令牌分为两类，一类是<strong\n                        data-nodeid=\"44838\"\n                        >非特殊字符串</strong\n                      >，不需要做任何处理，直接以字符串形式放入数组；另一类是<strong\n                        data-nodeid=\"44839\"\n                        >特殊字符串</strong\n                      >，需要依赖一个正则表达式来进行处理。这个核心的正则表达式如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> PATH_REGEXP = <span class=\"hljs-regexp\">/(\\\\.)|([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))/g</span> \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44728\">\n                      可以看到这个正则表达式中有多个通过圆括号形成的分组，通过调用\n                      exec() 函数分别提取不同的信息，放入一个长度为 8\n                      的数组中，对于不匹配的字符串则会返回 null。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">PATH_REGEXP.exec(<span class=\"hljs-string\">\"/:test(\\\\d+)?\"</span>) <span class=\"hljs-comment\">// [\"/:test(\\d+)?\", undefined, \"/\", \"test\", \"\\d+\", undefined, \"?\", undefined] </span>\n</div></li><li><div class=\"code-word\">PATH_REGEXP.exec(<span class=\"hljs-string\">\"/route(\\\\d+)\"</span>) <span class=\"hljs-comment\">// [\"(\\d+)\", undefined, undefined, undefined, undefined, \"\\d+\", undefined, undefined] </span>\n</div></li><li><div class=\"code-word\">PATH_REGEXP.exec(<span class=\"hljs-string\">\"/*\"</span>) <span class=\"hljs-comment\">// [\"/*\", undefined, \"/\", undefined, undefined, undefined, undefined, \"*\"] </span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44730\">\n                      词法分析过程和前面提到的一致，即利用 while\n                      循环以及正则匹配，将匹配到的 子串\n                      转换成令牌对象。例如，字符串\n                      /user/:id，会被转换成包含一个非特殊字符串和特殊字符串的令牌数组：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">[<span class=\"hljs-string\">\"/user\"</span>, \n</div></li><li><div class=\"code-word\">&nbsp; { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">asterisk</span>: <span class=\"hljs-literal\">false</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">delimiter</span>: <span class=\"hljs-string\">\"/\"</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"id\"</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">optional</span>: <span class=\"hljs-literal\">false</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">partial</span>: <span class=\"hljs-literal\">false</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">pattern</span>: <span class=\"hljs-string\">\"[^\\/]+?\"</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">prefix</span>: <span class=\"hljs-string\">\"/\"</span> \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">repeat</span>: <span class=\"hljs-literal\">false</span> \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">] \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44732\">\n                      在得到令牌数组之后，下一步是调用函数 tokensToRegExp()\n                      将它转换成正则表达式。对于字符串令牌，直接转化成转义后的字符串，这个转义的过程也很简单，即在“/”“[”这类具有正则表达式功能的特殊字符前加上“\\”。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">... \n</div></li><li><div class=\"code-word\">if (<span class=\"hljs-keyword\">typeof</span> token === <span class=\"hljs-string\">'string'</span>) { \n</div></li><li><div class=\"code-word\">&nbsp; route += escapeString(token) \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\">... \n</div></li><li><div class=\"code-word\">function escapeString (str) { \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> str.replace(<span class=\"hljs-regexp\">/([.+*?=^!:${}()[\\]|\\/\\\\])/g</span>, <span class=\"hljs-string\">'\\\\$1'</span>) \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44734\">\n                      对于正则表达式令牌，首先放到前面提到的 keys\n                      数组中，然后再对正则表达式令牌的内容进行标准化处理，拼接到最终的正则表达式字符串\n                      route 中，再将 route 实例化为正则表达式对象，并附上 keys\n                      属性。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">... \n</div></li><li><div class=\"code-word\">var prefix = escapeString(token.prefix) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> capture = <span class=\"hljs-string\">'(?:'</span> + token.pattern + <span class=\"hljs-string\">')'</span> \n</div></li><li><div class=\"code-word\">keys.push(token) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (token.repeat) { \n</div></li><li><div class=\"code-word\">&nbsp; capture += <span class=\"hljs-string\">'(?:'</span> + prefix + capture + <span class=\"hljs-string\">')*'</span> \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (token.optional) { \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (!token.partial) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; capture = <span class=\"hljs-string\">'(?:'</span> + prefix + <span class=\"hljs-string\">'('</span> + capture + <span class=\"hljs-string\">'))?'</span> \n</div></li><li><div class=\"code-word\">&nbsp; } <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; capture = prefix + <span class=\"hljs-string\">'('</span> + capture + <span class=\"hljs-string\">')?'</span> \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">} <span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">&nbsp; capture = prefix + <span class=\"hljs-string\">'('</span> + capture + <span class=\"hljs-string\">')'</span> \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\">route += capture \n</div></li><li><div class=\"code-word\">... \n</div></li><li><div class=\"code-word\">return attachKeys(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">'^'</span> + route, flags(options)), keys) \n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"44736\">路由生成</h4>\n                    <p data-nodeid=\"44737\">\n                      路由生成是指通过配置的请求路径字符串和参数生成对应的请求路径，比如配置的请求路径字符串\n                      /user/:id 和参数 {id: \"lagou\"} 可以生成 /user/lagou，在\n                      path-to-regexp 源码中对应的是函数 compile()。\n                    </p>\n                    <p data-nodeid=\"44738\">\n                      compile() 函数接收两个参数：str 和 options。str\n                      为字符串，可能包含特殊字符串；options 同 pathToRegexp()\n                      函数的 options 参数。\n                    </p>\n                    <p data-nodeid=\"44739\">\n                      从参数可以看出，compile()\n                      函数并不直接生成结果字符串，而是返回一个生成函数，将参数传入这个函数中可以生成<strong\n                        data-nodeid=\"44860\"\n                        >结果字符串</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"44740\">\n                      compile() 函数的内部只调用了两个函数 parse() 和\n                      tokensToFunction()，parse()\n                      函数前面已经分析过了，下面来分析函数 tokensToFunction()。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;<span class=\"hljs-title\">compile</span>&nbsp;(<span class=\"hljs-params\">str,&nbsp;options</span>)&nbsp;</span>{ \n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;tokensToFunction(parse(str,&nbsp;options),&nbsp;options) \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44742\">\n                      函数 tokensToFunction()\n                      的核心代码在于返回的匿名函数，匿名函数内部会遍历令牌数组，对于字符串令牌，直接拼接到生成的路径中；而对于正则表达式令牌，则会通过令牌\n                      token.name 属性来找到参数对象 obj\n                      对应的值。如果这个值为字符串，则判断是否匹配 token\n                      中的正则表达式，匹配之后进行 URI 编码并拼接到结果字符串\n                      path\n                      中；如果为数组，则循环执行字符串匹配过程。返回的匿名函数部分代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; tokens.length; i++) { \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">var</span> token = tokens[i] \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (typeof token === <span class=\"hljs-string\">'string'</span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; path += token \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">continue</span> \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">var</span> value = data[token.name] \n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">var</span> segment \n</span></div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(isarray(value)</span>) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; value.length; j++) { \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; segment = encode(value[j]) \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; path += (j === <span class=\"hljs-number\">0</span> ? token.prefix : token.delimiter) + segment \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">continue</span> \n</div></li><li><div class=\"code-word\">&nbsp; } \n</div></li><li><div class=\"code-word\">&nbsp; segment = token.asterisk ? encodeAsterisk(value) : encode(value) \n</div></li><li><div class=\"code-word\">&nbsp; path += token.prefix + segment \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">return</span> path \n</div></li></ol></code></pre>\n                    </div>\n\n                    <h3 data-nodeid=\"44744\">总结</h3>\n                    <p data-nodeid=\"44745\">\n                      这一课时我们先介绍了前端路由的实现基础，包括基于 hash\n                      实现和 history 实现。基于 hash\n                      方式兼容性较好，但是占用了浏览器默认的定位行为，同时会加长\n                      URL 字符串；基于 history 方式可以直接修改 URL\n                      路径，较为美观。\n                    </p>\n                    <p data-nodeid=\"44746\" class=\"\">\n                      然后分析了 vue-router 和 react-router 共同的依赖库\n                      path-to-regexp 中的两个核心函数 pathToRegexp() 和\n                      compile()。pathToRegexp()\n                      会先将配置的请求路径字符串拆分成令牌数组，然后再转化成正则表达式对象，路由库可以通过正则表达式来进行路由匹配，从而将对应的组件渲染到页面；complie()\n                      函数会将配置的请求路径字符串转化成一个匿名函数，这个函数可以传入参数并生成一个请求路径字符串。\n                    </p>\n                    <p data-nodeid=\"52325\">\n                      最后留一道思考题：你在使用前端路由的时候碰到过哪些问题，又是怎么解决的呢？欢迎在留言区写下你的答案和大家一起交流学习。\n                    </p>\n            "}