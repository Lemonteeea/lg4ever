{"title":"16 | 实战：三天实现管理端系统","context":"\n                    <p data-nodeid=\"1621\" class=\"\">\n                      前面几讲我介绍了前端应用开发中常见的工具原理，包括前端框架、前端路由等，还介绍了前端编程的一些开发技巧，比如使用数据驱动、组件化和模块化设计、数据抽象等。这些内容到底该怎么在实际工作中使用呢？\n                    </p>\n                    <p data-nodeid=\"1622\">\n                      今天，我会以最常见的管理端系统为例，带你用这些编程技巧来提升开发效率，三天实现一个管理端系统。\n                    </p>\n                    <p data-nodeid=\"1623\">搭建一个管理端系统包括以下工作：</p>\n                    <ol data-nodeid=\"1624\">\n                      <li data-nodeid=\"1625\">\n                        <p data-nodeid=\"1626\">管理端路由与功能设计；</p>\n                      </li>\n                      <li data-nodeid=\"1627\">\n                        <p data-nodeid=\"1628\">页面功能设计与实现。</p>\n                      </li>\n                    </ol>\n                    <blockquote data-nodeid=\"1629\">\n                      <p data-nodeid=\"1630\">\n                        由于技术选型并不是本节内容的重点，这里我将直接选择入门简单的\n                        Vue、配套 Vue 热门 UI 框架，使用 Vue CLI + Vue +\n                        ElementUI + vue-router\n                        来搭建管理端。关于技术选型的内容，你可以关注后续第 22\n                        讲的内容。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1631\">\n                      本文中我不会花过多的篇幅去描述 Vue\n                      的一些基本概念和工具，包括 Vue 组件、vue-router、ElementUI\n                      组件等，这些内容在官方网站上有很详细的介绍，因此我们专注于介绍搭建思路。\n                    </p>\n                    <p data-nodeid=\"1632\">下面，我们先来设计管理端功能吧！</p>\n                    <h3 data-nodeid=\"1633\">管理端路由与功能设计</h3>\n                    <p data-nodeid=\"1634\">常见的管理端系统长这个样子：</p>\n                    <p data-nodeid=\"1635\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/40/A9/CioPOWCmFiiAX34aAADzfDJYIyY248.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1832\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4490\">\n                      一般来说，管理端系统包括这些功能页面结构。\n                    </p>\n                    <p data-nodeid=\"4491\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/41/92/Cgp9HWCs0QuAPIVjAAE4SLRDAz0369.png\"\n                        alt=\"图片6.png\"\n                        data-nodeid=\"4495\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"1665\">\n                      我们先来设计管理端左侧的菜单，将 2-4\n                      的页面结构都整合进去：\n                    </p>\n                    <p data-nodeid=\"1666\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/40/A1/Cgp9HWCmFi-AJtWCAAAlvFQuXzE052.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1852\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"1667\">页面路由设计</h4>\n                    <p data-nodeid=\"1668\">\n                      菜单内容以及对应的页面结构都确定之后，我们可以先来设计管理端的路由。这时，我们需要将应用进行适当的模块化和组件化拆分。\n                    </p>\n                    <p data-nodeid=\"7454\">\n                      为了更直观地进行说明，我给你梳理了页面路由和页面组件嵌套的关系图（使用框框框起来的代表一个\n                      Vue 组件）：\n                    </p>\n                    <p data-nodeid=\"7455\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/41/92/Cgp9HWCs0UeAb2wzAAIUanH4n50557.png\"\n                        alt=\"图片7.png\"\n                        data-nodeid=\"7459\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"1671\">\n                      将页面和路由的关系梳理清楚，是很关键的一个步骤。\n                    </p>\n                    <p data-nodeid=\"8414\">\n                      根据上述的页面路由和嵌套关系，下面我们以<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"8417\"\n                        >/</code\n                      >作为根路由，进行路由和页面组件的设计。\n                    </p>\n                    <p data-nodeid=\"8415\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/41/9A/CioPOWCs0W2ANX8WAAEiD-NxSGs936.png\"\n                        alt=\"图片8.png\"\n                        data-nodeid=\"8421\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"1717\">\n                      应用的各个页面和路由嵌套关系梳理完成之后，我们可以对项目文件结构进行划分。\n                    </p>\n                    <h4 data-nodeid=\"1718\">目录结构划分</h4>\n                    <p data-nodeid=\"1719\">\n                      项目设计的时候，我们需要初步约定项目代码的组织结构。\n                    </p>\n                    <p data-nodeid=\"1720\">\n                      对于前端项目来说，项目根目录会区分开发代码（src）、编译后代码（dist）和常见的配置（Babel\n                      配置、Eslint\n                      配置、项目配置等）。对于开发代码（src），也会划分为静态资源（assets）、页面（page）、组件库（component）、公共库（util）等。如下述目录结构所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">├─dist                      <span class=\"hljs-comment\">// 编译之后的项目文件</span>\n</div></li><li><div class=\"code-word\">├─src                       <span class=\"hljs-comment\">// 开发目录</span>\n</div></li><li><div class=\"code-word\">│  ├─assets                 <span class=\"hljs-comment\">// 静态资源</span>\n</div></li><li><div class=\"code-word\">│     ├─less                <span class=\"hljs-comment\">// 公共less</span>\n</div></li><li><div class=\"code-word\">│     ├─img                 <span class=\"hljs-comment\">// 图片资源</span>\n</div></li><li><div class=\"code-word\">│  ├─components             <span class=\"hljs-comment\">// **放这里是组件**</span>\n</div></li><li><div class=\"code-word\">│  ├─pages                  <span class=\"hljs-comment\">// **放这里是页面** 根据路由结构划分</span>\n</div></li><li><div class=\"code-word\">│  ├─utils                  <span class=\"hljs-comment\">// 工具库</span>\n</div></li><li><div class=\"code-word\">│  ├─App.vue                <span class=\"hljs-comment\">// 启动页面，最外层容器组件</span>\n</div></li><li><div class=\"code-word\">│  ├─main.js                <span class=\"hljs-comment\">// 入口脚本</span>\n</div></li><li><div class=\"code-word\">├─babel.config.js          <span class=\"hljs-comment\">// babel 配置文件</span>\n</div></li><li><div class=\"code-word\">├─vue.config.js            <span class=\"hljs-comment\">// vue 自定义配置，与 webpack 配置相关</span>\n</div></li><li><div class=\"code-word\">├─<span class=\"hljs-keyword\">package</span>.json             <span class=\"hljs-comment\">// 项目配置</span>\n</div></li><li><div class=\"code-word\">├─README.md                <span class=\"hljs-comment\">// 项目说明</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1722\">\n                      项目的目录结构是否有规范约束、是否结构清晰，对一个项目的可维护性非常重要。通过目录结构，我们可以直观地看到项目中包括了哪些代码、分别都放在哪里。\n                    </p>\n                    <p data-nodeid=\"1723\">\n                      好了，项目目录和路由结构我们划分好了，我们来看看怎么根据上面的设计来配置路由，以及实现相互跳转。\n                    </p>\n                    <h4 data-nodeid=\"1724\">路由配置与开发</h4>\n                    <p data-nodeid=\"1725\">\n                      Vue\n                      框架本身的定位是核心关注视图层，所以路由配置、状态管理、测试工具等都不是自带的，我们需要自己找到对应的开源库配合使用。Vue\n                      官方推荐的工具是<a\n                        href=\"https://router.vuejs.org/zh/?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"1901\"\n                        >vue-router</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"1726\">\n                      根据以上的嵌套关系，我们可以设置最外层的根路由为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1904\"\n                        >\"/\"</code\n                      >，并加上其他嵌套子路由配置，比如登录页面、列表页和详情页等。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 配置路由信息</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 每个路由应该映射一个组件。 其中\"component\" 可以是</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 通过 Vue.extend() 创建的组件构造器，</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 或者，只是一个组件配置对象。</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> routes = [\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    path: <span class=\"hljs-string\">\"/\"</span>, <span class=\"hljs-comment\">// 父路由路径</span>\n</div></li><li><div class=\"code-word\">    component: App, <span class=\"hljs-comment\">// 父路由组件，传入 vue component</span>\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-string\">\"App\"</span>, <span class=\"hljs-comment\">// 路由名称</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 设置子路由</span>\n</div></li><li><div class=\"code-word\">    children: [\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        path: <span class=\"hljs-string\">\"login\"</span>, <span class=\"hljs-comment\">// 子路由路径</span>\n</div></li><li><div class=\"code-word\">        component: Login, <span class=\"hljs-comment\">// 子路由组件，会替换父组件中&lt;router-view&gt;中的内容</span>\n</div></li><li><div class=\"code-word\">        name: <span class=\"hljs-string\">\"Login\"</span>, <span class=\"hljs-comment\">// 路由名称</span>\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 应用首页</span>\n</div></li><li><div class=\"code-word\">        path: <span class=\"hljs-string\">\"home\"</span>,\n</div></li><li><div class=\"code-word\">        component: Home,\n</div></li><li><div class=\"code-word\">        name: <span class=\"hljs-string\">\"Home\"</span>,\n</div></li><li><div class=\"code-word\">        children: [\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 服务列表</span>\n</div></li><li><div class=\"code-word\">          { path: <span class=\"hljs-string\">\"service\"</span>, component: Service, name: <span class=\"hljs-string\">\"Service\"</span> },\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 产品容器</span>\n</div></li><li><div class=\"code-word\">          {\n</div></li><li><div class=\"code-word\">            path: <span class=\"hljs-string\">\"product\"</span>,\n</div></li><li><div class=\"code-word\">            component: Product,\n</div></li><li><div class=\"code-word\">            name: <span class=\"hljs-string\">\"Product\"</span>,\n</div></li><li><div class=\"code-word\">            children: [\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-comment\">// 子路由内容</span>\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-comment\">// 产品列表</span>\n</div></li><li><div class=\"code-word\">              { path: <span class=\"hljs-string\">\"list\"</span>, component: ProductList, name: <span class=\"hljs-string\">\"ProductList\"</span> },\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-comment\">// 产品新增</span>\n</div></li><li><div class=\"code-word\">              { path: <span class=\"hljs-string\">\"add/0\"</span>, component: ProductEdit, name: <span class=\"hljs-string\">\"ProductAdd\"</span> },\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-comment\">// 产品编辑</span>\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-comment\">// 我们能看到，新增和编辑其实最终使用的是同一个组件，所以后面会有一些需要兼容处理的地方</span>\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-comment\">// :id可匹配任意值，且可在组件中通过this.$route.params.id获取该值</span>\n</div></li><li><div class=\"code-word\">              { path: <span class=\"hljs-string\">\"edit/:id\"</span>, component: ProductEdit, name: <span class=\"hljs-string\">\"ProductEdit\"</span> },\n</div></li><li><div class=\"code-word\">            ],\n</div></li><li><div class=\"code-word\">          },\n</div></li><li><div class=\"code-word\">        ],\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">    ],\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">];\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1728\">\n                      上述的路由配置中涵盖了页面的路由嵌套关系，在 Vue\n                      中可以使用<code data-backticks=\"1\" data-nodeid=\"1907\"\n                        >&lt;router-view&gt;</code\n                      >组件，将渲染路径匹配到具体的视图组件，视图组件还可以内嵌自己的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1909\"\n                        >&lt;router-view&gt;</code\n                      >匹配子路由路径，从而渲染嵌套组件。\n                    </p>\n                    <p data-nodeid=\"1729\">\n                      比如，<code data-backticks=\"1\" data-nodeid=\"1912\"\n                        >Home.vue</code\n                      >页面中包括左侧菜单和右侧内容，在右侧内容中可以使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1914\"\n                        >&lt;router-view&gt;</code\n                      >来嵌套子路由的组件进行渲染。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&lt;!-- 这里是 /app/home 路由的组件，Home.vue --&gt;\n</div></li><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  &lt;el-container&gt;\n</div></li><li><div class=\"code-word\">    &lt;!-- 左侧菜单, Menu.vue --&gt;\n</div></li><li><div class=\"code-word\">    &lt;menu&gt;&lt;/menu&gt;\n</div></li><li><div class=\"code-word\">    &lt;!-- 右侧内容 --&gt;\n</div></li><li><div class=\"code-word\">    &lt;el-container&gt;\n</div></li><li><div class=\"code-word\">      &lt;!-- 上边的头部栏 --&gt;\n</div></li><li><div class=\"code-word\">      &lt;el-header&gt;&lt;/el-header&gt;\n</div></li><li><div class=\"code-word\">      &lt;!-- 子路由页面的内容 --&gt;\n</div></li><li><div class=\"code-word\">      &lt;router-view&gt;&lt;/router-view&gt;\n</div></li><li><div class=\"code-word\">    &lt;/el-container&gt;\n</div></li><li><div class=\"code-word\">  &lt;/el-container&gt;\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1731\">\n                      其中，在左侧的在菜单<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1917\"\n                        >&lt;menu&gt;&lt;/menu&gt;</code\n                      >中，可以使用 Vue 中的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1919\"\n                        >&lt;router-link&gt;</code\n                      >组件，来绑定路由的跳转能力，进行页面的导航。\n                    </p>\n                    <p data-nodeid=\"1732\">\n                      路由的配置完成后，我们可以将路由的能力添加到应用中。\n                    </p>\n                    <p data-nodeid=\"1733\">\n                      在第 12\n                      讲中，我们介绍了前端路由库都会支持两种路由模式：Hash 和\n                      History。由于 History 模式需要后台配合，因此这里使用 Hash\n                      模式来加载路由。\n                    </p>\n                    <p data-nodeid=\"1734\">\n                      在 Vue 中可以通过将<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1924\"\n                        >router</code\n                      >配置参数注入路由，给应用添加上路由功能，比如<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1926\"\n                        >&lt;router-link tag=\"div\" :to=\"{name:\n                        路由名字}\"&gt;&lt;/router-link&gt;</code\n                      >。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 加载路由信息</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">new</span> VueRouter({\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// mode: 路由模式，'hash' | 'history'</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// routes：传入路由配置信息，后面会讲怎么配置</span>\n</div></li><li><div class=\"code-word\">  routes, <span class=\"hljs-comment\">// （缩写）相当于 routes: routes</span>\n</div></li><li><div class=\"code-word\">});\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 启动一个 Vue 应用</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">new</span> Vue({\n</div></li><li><div class=\"code-word\">  el: <span class=\"hljs-string\">\"#app\"</span>,\n</div></li><li><div class=\"code-word\">  router, <span class=\"hljs-comment\">// 传入路由能力</span>\n</div></li><li><div class=\"code-word\">  render: (h) =&gt; h(App),\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1736\">\n                      通过新建<code data-backticks=\"1\" data-nodeid=\"1929\"\n                        >VueRouter</code\n                      >，并在<code data-backticks=\"1\" data-nodeid=\"1931\"\n                        >Vue</code\n                      >中传入该路由示例，便可以给应用添加路由能力，这就是\n                      vue-router 的基本功能。\n                    </p>\n                    <p data-nodeid=\"1737\">\n                      除此之外，vue-router\n                      还提供了路由监控能力、鉴权能力等，可以结合实现非登录页的登录状态鉴权，比如使用\n                      vue-router 的<code data-backticks=\"1\" data-nodeid=\"1934\"\n                        >router.beforeEach</code\n                      >导航守卫能力，当用户未登录时，则拒绝进入其他路由页面里：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">router.beforeEach((to, from, next) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (to.name !== <span class=\"hljs-string\">\"Login\"</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 非 login 页面，检查是否登录</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!isUserLogin) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 未登录则跳转去 login 页面</span>\n</div></li><li><div class=\"code-word\">      next({ name: <span class=\"hljs-string\">\"Login\"</span> });\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 其他情况正常执行</span>\n</div></li><li><div class=\"code-word\">  next();\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1739\">\n                      这样，我们就可以在用户未登录时，拦截所有通往内页的操作，并重新定向到登录页面。\n                    </p>\n                    <p data-nodeid=\"1740\">\n                      到这里，我们应用基本具备了登录、导航的能力。当然，这只是个静态页面，距离真正上线，我们还需要进行接口的联调、代码打包、发布上线等工作。\n                    </p>\n                    <p data-nodeid=\"1741\">\n                      管理端路由与功能设计过程中，我们分别使用了前端框架、前端路由以及组件化和模块化的设计。\n                    </p>\n                    <p data-nodeid=\"1742\">\n                      下面我们会结合数据抽象与数据驱动的方式，来进行页面内功能的具体设计与实现。\n                    </p>\n                    <h3 data-nodeid=\"1743\">页面功能设计与实现</h3>\n                    <p data-nodeid=\"1744\">\n                      前面我们已经将管理端划分成多个模块和页面，接下来我会对页面进行组件的拆分，结合数据抽象的方式进行组件的设计。\n                    </p>\n                    <p data-nodeid=\"1745\">\n                      管理端页面的主要包括左侧菜单、列表和表单，我们可以按照这样的结构进行组件设计。\n                    </p>\n                    <p data-nodeid=\"1746\">\n                      下面我们先来分别对它们进行数据抽象和设计。\n                    </p>\n                    <h4 data-nodeid=\"1747\">菜单设计</h4>\n                    <p data-nodeid=\"1748\">\n                      菜单的最终效果如图，这里会包括父菜单和子菜单两层结构。\n                    </p>\n                    <p data-nodeid=\"1749\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/40/A9/CioPOWCmFmiAPxdiAAAYMM7YTz0757.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"1948\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1750\">\n                      其中，每个父菜单需要展示以下的内容：\n                    </p>\n                    <ul data-nodeid=\"1751\">\n                      <li data-nodeid=\"1752\">\n                        <p data-nodeid=\"1753\">\n                          图标<code data-backticks=\"1\" data-nodeid=\"1951\"\n                            >icon</code\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1754\">\n                        <p data-nodeid=\"1755\">\n                          菜单名字<code data-backticks=\"1\" data-nodeid=\"1953\"\n                            >text</code\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1756\">\n                        <p data-nodeid=\"1757\">\n                          （可选）子菜单列表<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1955\"\n                            >subMenus</code\n                          >，以及子菜单名字<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1957\"\n                            >text</code\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1758\">\n                      列表可以用数组来表示，因此我们可以将菜单组件的数据抽象为以下的数据结构（数组+对象）:\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> menus = [\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    text: <span class=\"hljs-string\">\"服务管理\"</span>, <span class=\"hljs-comment\">// 父菜单名字</span>\n</div></li><li><div class=\"code-word\">    icon: <span class=\"hljs-string\">\"el-icon-setting\"</span>, <span class=\"hljs-comment\">// 父菜单图标</span>\n</div></li><li><div class=\"code-word\">    subMenus: [{ text: <span class=\"hljs-string\">\"服务信息\"</span> }, { text: <span class=\"hljs-string\">\"新增\"</span> }], <span class=\"hljs-comment\">// 子菜单列表</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    text: <span class=\"hljs-string\">\"产品管理\"</span>,\n</div></li><li><div class=\"code-word\">    icon: <span class=\"hljs-string\">\"el-icon-menu\"</span>,\n</div></li><li><div class=\"code-word\">    subMenus: [{ text: <span class=\"hljs-string\">\"产品信息\"</span> }],\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    text: <span class=\"hljs-string\">\"日志信息\"</span>,\n</div></li><li><div class=\"code-word\">    icon: <span class=\"hljs-string\">\"el-icon-message\"</span>,\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">];\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1760\">\n                      当我们将菜单用这样的数据结构表示以后，实现 UI\n                      的时候就可以轻松地通过数据绑定的方式来进行。此处使用了\n                      Elmenet 的菜单组件<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1960\"\n                        >&lt;el-menu&gt;</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1962\"\n                        >&lt;el-submenu&gt;</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"1964\"\n                        >&lt;el-menu-item&gt;</code\n                      >如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&lt;!-- 顺便调整了下颜色 --&gt;\n</div></li><li><div class=\"code-word\">&lt;el-menu\n</div></li><li><div class=\"code-word\">  :default-openeds=\"['0', '1']\"\n</div></li><li><div class=\"code-word\">  class=\"el-menu-vertical-demo\"\n</div></li><li><div class=\"code-word\">  background-color=\"#545c64\"\n</div></li><li><div class=\"code-word\">  text-color=\"#fff\"\n</div></li><li><div class=\"code-word\">  active-text-color=\"#ffd04b\"\n</div></li><li><div class=\"code-word\">&gt;\n</div></li><li><div class=\"code-word\">  &lt;!-- 遍历生成父菜单选项 --&gt;\n</div></li><li><div class=\"code-word\">  &lt;template v-for=\"menu in menus\"&gt;\n</div></li><li><div class=\"code-word\">    &lt;!-- 有子菜单的时候，就用 el-submenu，再绑个序号 index --&gt;\n</div></li><li><div class=\"code-word\">    &lt;el-submenu\n</div></li><li><div class=\"code-word\">      v-if=\"menu.subMenus &amp;&amp; menu.subMenus.length\"\n</div></li><li><div class=\"code-word\">      :index=\"menu.index\"\n</div></li><li><div class=\"code-word\">      :key=\"menu.index\"\n</div></li><li><div class=\"code-word\">    &gt;\n</div></li><li><div class=\"code-word\">      &lt;template slot=\"title\"&gt;\n</div></li><li><div class=\"code-word\">        &lt;!-- 绑个父菜单的 icon --&gt;\n</div></li><li><div class=\"code-word\">        &lt;i :class=\"menu.icon\"&gt;&lt;/i&gt;\n</div></li><li><div class=\"code-word\">        &lt;!-- 再绑个父菜单的名称 text --&gt;\n</div></li><li><div class=\"code-word\">        &lt;!-- slot 其实类似于占位符，可以去 Vue 官方文档了解一下插槽 --&gt;\n</div></li><li><div class=\"code-word\">        &lt;span slot=\"title\"&gt;{{menu.text}}&lt;/span&gt;\n</div></li><li><div class=\"code-word\">      &lt;/template&gt;\n</div></li><li><div class=\"code-word\">      &lt;el-menu-item-group&gt;\n</div></li><li><div class=\"code-word\">        &lt;!-- 子菜单也要遍历，同时绑上子菜单名称 text，也要绑个序号 index --&gt;\n</div></li><li><div class=\"code-word\">        &lt;el-menu-item\n</div></li><li><div class=\"code-word\">          v-for=\"subMenu in menu.subMenus\"\n</div></li><li><div class=\"code-word\">          :key=\"subMenu.index\"\n</div></li><li><div class=\"code-word\">          :index=\"subMenu.index\"\n</div></li><li><div class=\"code-word\">          &gt;{{subMenu.text}}&lt;/el-menu-item\n</div></li><li><div class=\"code-word\">        &gt;\n</div></li><li><div class=\"code-word\">      &lt;/el-menu-item-group&gt;\n</div></li><li><div class=\"code-word\">    &lt;/el-submenu&gt;\n</div></li><li><div class=\"code-word\">    &lt;!-- 没子菜单的时候，就用 el-menu-item，也要绑个序号 index --&gt;\n</div></li><li><div class=\"code-word\">    &lt;el-menu-item v-else :index=\"menu.index\" :key=\"menu.index\"&gt;\n</div></li><li><div class=\"code-word\">      &lt;!-- 绑个父菜单的 icon --&gt;\n</div></li><li><div class=\"code-word\">      &lt;i :class=\"menu.icon\"&gt;&lt;/i&gt;\n</div></li><li><div class=\"code-word\">      &lt;!-- 再绑个父菜单的名称 text --&gt;\n</div></li><li><div class=\"code-word\">      &lt;span slot=\"title\"&gt;{{menu.text}}&lt;/span&gt;\n</div></li><li><div class=\"code-word\">    &lt;/el-menu-item&gt;\n</div></li><li><div class=\"code-word\">  &lt;/template&gt;\n</div></li><li><div class=\"code-word\">&lt;/el-menu&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1762\">\n                      如果需要绑定路由，我们还可以添加上一个路由的绑定信息。\n                    </p>\n                    <p data-nodeid=\"1763\">\n                      前面我们说过 vue-router 中可以使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1968\"\n                        >&lt;router-link&gt;</code\n                      >组件来实现路由跳转，你可以试试看要怎么做，文末会有源码地址和最终页面效果参考哦。\n                    </p>\n                    <p data-nodeid=\"1764\">下面我们来看看列表和表单的设计。</p>\n                    <h4 data-nodeid=\"1765\">列表和表单设计</h4>\n                    <p data-nodeid=\"9606\">我们看看列表的最终效果：</p>\n                    <p data-nodeid=\"9607\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/41/92/Cgp9HWCs0ZqAXq9lAAHEks0ftMc985.png\"\n                        alt=\"图片9.png\"\n                        data-nodeid=\"9611\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"1768\">\n                      我们能看到，列表里每行内容包括这些信息：\n                    </p>\n                    <ul data-nodeid=\"1769\">\n                      <li data-nodeid=\"1770\">\n                        <p data-nodeid=\"1771\" class=\"te-preview-highlight\">\n                          日期:<code data-backticks=\"1\" data-nodeid=\"1978\"\n                            >date</code\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1772\">\n                        <p data-nodeid=\"1773\">\n                          姓名:<code data-backticks=\"1\" data-nodeid=\"1981\"\n                            >name</code\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1774\">\n                        <p data-nodeid=\"1775\">\n                          电话:<code data-backticks=\"1\" data-nodeid=\"1984\"\n                            >phone</code\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1776\">\n                        <p data-nodeid=\"1777\" class=\"\">\n                          地址:<code data-backticks=\"1\" data-nodeid=\"1987\"\n                            >address</code\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1778\">\n                      在列表中的每一个数据项，还需要使用一个唯一标识来作为标记（<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1990\"\n                        >id</code\n                      >），便于用户增删查改时进行标识。\n                    </p>\n                    <p data-nodeid=\"1779\">\n                      我们同样可以使用对象的方式来描述列表中的数据项：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> tableItem = {\n</div></li><li><div class=\"code-word\">  id: <span class=\"hljs-number\">123</span>,\n</div></li><li><div class=\"code-word\">  date: <span class=\"hljs-string\">\"2019-05-20\"</span>, <span class=\"hljs-comment\">// 日期</span>\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-string\">\"被删\"</span>, <span class=\"hljs-comment\">// 姓名</span>\n</div></li><li><div class=\"code-word\">  phone: <span class=\"hljs-string\">\"13888888888\"</span>, <span class=\"hljs-comment\">// 电话</span>\n</div></li><li><div class=\"code-word\">  address: <span class=\"hljs-string\">\"深圳市南山区滨海大道 888 号\"</span>, <span class=\"hljs-comment\">// 地址</span>\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1781\">\n                      那么列表则是由以上对象结构的数据组成的数组，我们可以使用\n                      Element-Table 组件来绑定列表的 UI 展示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&lt;!-- data 里绑定表格数据，同时这里调整了下样式 --&gt;\n</div></li><li><div class=\"code-word\">&lt;el-table\n</div></li><li><div class=\"code-word\">  stripe\n</div></li><li><div class=\"code-word\">  :data=\"tableData\"\n</div></li><li><div class=\"code-word\">  style=\"border: 1px solid #ebebeb;border-radius: 3px;margin-top: 10px;\"\n</div></li><li><div class=\"code-word\">&gt;\n</div></li><li><div class=\"code-word\">  &lt;!-- prop 传绑定 tableData 的数据 id，表头名称 id，同时设了下宽度 --&gt;\n</div></li><li><div class=\"code-word\">  &lt;el-table-column prop=\"id\" label=\"id\" width=\"100\"&gt;&lt;/el-table-column&gt;\n</div></li><li><div class=\"code-word\">  &lt;!-- prop 传绑定 tableData 的数据 date，表头名称日期 --&gt;\n</div></li><li><div class=\"code-word\">  &lt;el-table-column prop=\"date\" label=\"日期\" width=\"200\"&gt;&lt;/el-table-column&gt;\n</div></li><li><div class=\"code-word\">  &lt;!-- prop 传绑定 tableData 的数据 name，表头名称姓名 --&gt;\n</div></li><li><div class=\"code-word\">  &lt;el-table-column prop=\"name\" label=\"姓名\" width=\"200\"&gt;&lt;/el-table-column&gt;\n</div></li><li><div class=\"code-word\">  &lt;!-- prop 传绑定 tableData 的数据 phone，表头名称电话 --&gt;\n</div></li><li><div class=\"code-word\">  &lt;el-table-column prop=\"phone\" label=\"电话\" width=\"200\"&gt;&lt;/el-table-column&gt;\n</div></li><li><div class=\"code-word\">  &lt;!-- prop 传绑定 tableData 的数据 address，表头名称地址 --&gt;\n</div></li><li><div class=\"code-word\">  &lt;el-table-column prop=\"address\" label=\"地址\"&gt;&lt;/el-table-column&gt;\n</div></li><li><div class=\"code-word\">  &lt;!-- 该列固定在右侧，表头名称操作 --&gt;\n</div></li><li><div class=\"code-word\">  &lt;el-table-column fixed=\"right\" label=\"操作\" width=\"300\"&gt;\n</div></li><li><div class=\"code-word\">    &lt;template slot-scope=\"scope\"&gt;\n</div></li><li><div class=\"code-word\">      &lt;!-- 添加了个删除按钮，绑定了前面定义的删除事件 deleteTableItem，传入参数 id --&gt;\n</div></li><li><div class=\"code-word\">      &lt;el-button\n</div></li><li><div class=\"code-word\">        @click=\"deleteTableItem(scope.row.id)\"\n</div></li><li><div class=\"code-word\">        type=\"danger\"\n</div></li><li><div class=\"code-word\">        size=\"small\"\n</div></li><li><div class=\"code-word\">        &gt;删除&lt;/el-button\n</div></li><li><div class=\"code-word\">      &gt;\n</div></li><li><div class=\"code-word\">      &lt;!-- 分别添加了上移和下移按钮，绑定了前面定义的移动事件 moveTableItem，传入参数 id 和移动方向 --&gt;\n</div></li><li><div class=\"code-word\">      &lt;el-button @click=\"moveTableItem(scope.row.id, 'up')\" size=\"small\"\n</div></li><li><div class=\"code-word\">        &gt;上移&lt;/el-button\n</div></li><li><div class=\"code-word\">      &gt;\n</div></li><li><div class=\"code-word\">      &lt;el-button @click=\"moveTableItem(scope.row.id, 'down')\" size=\"small\"\n</div></li><li><div class=\"code-word\">        &gt;下移&lt;/el-button\n</div></li><li><div class=\"code-word\">      &gt;\n</div></li><li><div class=\"code-word\">    &lt;/template&gt;\n</div></li><li><div class=\"code-word\">  &lt;/el-table-column&gt;\n</div></li><li><div class=\"code-word\">&lt;/el-table&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1783\">\n                      可以看到，列表中支持了选项的删除、上下移动操作，当我们将页面抽象为数据之后，页面的功能可以对应于数据的如下操作。\n                    </p>\n                    <ul data-nodeid=\"1784\">\n                      <li data-nodeid=\"1785\">\n                        <p data-nodeid=\"1786\">删除：删除数组中的某个对象</p>\n                      </li>\n                      <li data-nodeid=\"1787\">\n                        <p data-nodeid=\"1788\">位置移动：改变数组中对象的排序</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1789\">\n                      这些操作会改变并更新页面中的数据，使用 Vue\n                      可以直接绑定数据操作的方法：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">export <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">  data() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 绑定数据</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">      menus: menus, <span class=\"hljs-comment\">// 菜单数据</span>\n</div></li><li><div class=\"code-word\">      tableData: tableData, <span class=\"hljs-comment\">// 列表数据</span>\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  methods: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 新增一个数据</span>\n</div></li><li><div class=\"code-word\">    addTableItem(item = {}) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 添加到列表中，同时自增 id</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.tableData.push({ ...item, id: <span class=\"hljs-keyword\">this</span>.tableData.length + <span class=\"hljs-number\">1</span> });\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 删除一个数据</span>\n</div></li><li><div class=\"code-word\">    deleteTableItem(id) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 查找到对应的索引，然后删除</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-keyword\">this</span>.tableData.findIndex((x) =&gt; x.id === id);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.tableData.splice(index, <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 移动一个数据</span>\n</div></li><li><div class=\"code-word\">    moveTableItem(id, direction) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> dataLength = <span class=\"hljs-keyword\">this</span>.tableData.length;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 查找到对应的索引，然后取出，再插入</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-keyword\">this</span>.tableData.findIndex((x) =&gt; x.id === id);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">switch</span> (direction) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 上移</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"up\"</span>:\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> (index &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 第一个不进行上移</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">const</span> item = <span class=\"hljs-keyword\">this</span>.tableData.splice(index, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">this</span>.tableData.splice(index - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, item);\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 下移</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"down\"</span>:\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> (index &lt; dataLength - <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 最后一个不进行下移</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">const</span> item = <span class=\"hljs-keyword\">this</span>.tableData.splice(index, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">this</span>.tableData.splice(index + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, item);\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1791\">\n                      由于使用了 Vue\n                      框架，当我们绑定的数据发生变化的时候，框架会自动帮我们更新到页面里（具体实现可以参考第\n                      10 讲）。\n                    </p>\n                    <p data-nodeid=\"1792\">\n                      列表常用于数据项的查看，而表单则通常用于对数据项的编辑和修改。对于同一个数据项来说，表单的数据结构与列表中数据项的结构是一致的，同样可以使用上述的对象结构来表达。\n                    </p>\n                    <p data-nodeid=\"1793\">\n                      使用 Element-Form\n                      组件将表单的数据进行绑定之后，就可以直接进行编辑了：\n                    </p>\n                    <p data-nodeid=\"1794\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/40/A9/CioPOWCmFn-ARWOGAABLpwQSW1Y862.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"2003\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1795\">\n                      到这里，我们已经实现了一个带菜单、列表和表单的页面了，单列表和单表单的页面同样可以通过数据抽象设计+UI\n                      组件绑定的方式来实现。\n                    </p>\n                    <p data-nodeid=\"1796\">\n                      这个页面也有挺多可以完善的地方，例如：\n                    </p>\n                    <ul data-nodeid=\"1797\">\n                      <li data-nodeid=\"1798\">\n                        <p data-nodeid=\"1799\">左侧菜单可以支持收起；</p>\n                      </li>\n                      <li data-nodeid=\"1800\">\n                        <p data-nodeid=\"1801\">列表支持修改；</p>\n                      </li>\n                      <li data-nodeid=\"1802\">\n                        <p data-nodeid=\"1803\">列表支持批量删除；</p>\n                      </li>\n                      <li data-nodeid=\"1804\">\n                        <p data-nodeid=\"1805\">\n                          表单支持校验手机号和其他选项不为空。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1806\">\n                      这些就当作课后作业来完成，最终的实现可以参考以下链接：\n                    </p>\n                    <ul data-nodeid=\"1807\">\n                      <li data-nodeid=\"1808\">\n                        <p data-nodeid=\"1809\">\n                          <a\n                            href=\"http://vue-for-everyone.godbasin.com/2/index.html?fileGuid=xxQTRXtVcqtHK6j8\"\n                            data-nodeid=\"2013\"\n                            >页面的效果查看</a\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1810\">\n                        <p data-nodeid=\"1811\">\n                          <a\n                            href=\"https://codepen.io/godbasin/pen/MMxdjm?fileGuid=xxQTRXtVcqtHK6j8\"\n                            data-nodeid=\"2016\"\n                            >codepen 在线查看代码</a\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1812\">\n                        <p data-nodeid=\"1813\">\n                          <a\n                            href=\"https://github.com/godbasin/vue-element-demo/tree/master/2?fileGuid=xxQTRXtVcqtHK6j8\"\n                            data-nodeid=\"2019\"\n                            >查看源代码</a\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"1814\">小结</h3>\n                    <p data-nodeid=\"1815\">\n                      今天我带你使用开源前端框架、前端路由库，通过模块划分、组件设计、数据抽象的方式来快速搭建实现管理端。\n                    </p>\n                    <p data-nodeid=\"1816\">\n                      虽然文章标题是三天实现管理端，实际上如果熟练之后，这些工作一天就能完成。\n                    </p>\n                    <p data-nodeid=\"1817\">\n                      或许你会觉得，这管理端也太简单了吧。在实际工作中，大家也都会对管理端系统感到苦恼：管理端多半是增删改查的东西，做多了就会变成重复性的工作。\n                    </p>\n                    <p data-nodeid=\"1818\">\n                      其实管理端的开发也可以不只是复制粘贴，我们还可以对管理端的主要功能进行抽象，然后通过配置化的方式来配置完成。如果实现了管理端的配置化，我们就可以从重复烦琐的工作中解放出来，去做更多有意思的事情。\n                    </p>\n                    <p data-nodeid=\"1819\" class=\"\">\n                      在日常工作中，对于前端应用的实现，是否可以使用更好的方式、又可以怎样去在重复的工作中提升自己呢？我认为这些思考才是最重要的，这决定了我们只是一个会用工具的工具人，还是一个可以用工具去改变工作方式的思考者。\n                    </p>\n            "}