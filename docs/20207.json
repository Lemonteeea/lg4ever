{"title":"06 | Go 语言开发快速回顾：语法、数据结构和流程控制","context":"\n                    <p data-nodeid=\"25103\">\n                      Go\n                      语言简单、高效，具备很强的语言表达能力，支持静态类型安全，同时提供动态语言的特性。不仅如此，它还支持自动垃圾回收，能够有效防止内存泄漏，并从底层支持协程并发，充分利用计算机的硬件性能。基于以上种种优势，Go\n                      目前在软件行业发挥着重要作用，不少优秀的开源软件都是基于\n                      Go 进行开发的，包括 Docker、Etcd 和 Kubernetes 等。\n                    </p>\n                    <p data-nodeid=\"25104\">\n                      虽说近几年来 Go\n                      语言发展比较迅猛，但是总体而言，它还是属于新生代语言。鉴于我们课程接下来的实践都是围绕着\n                      Go\n                      来展开的，所以在介绍微服务各个组件的详情之前，非常有必要对\n                      Go 的语法补充一些前置知识。\n                    </p>\n                    <p data-nodeid=\"25105\">\n                      那本课时我就带你回顾 Go 语言开发的一些基础知识，主要包括\n                      Go 语言的基础语法、数据结构和流程控制。\n                    </p>\n                    <h3 data-nodeid=\"26753\" class=\"\">基础语法</h3>\n\n                    <p data-nodeid=\"25107\">\n                      Go 的语法与 C\n                      语言相似，但显得更加精炼。下面我们通过一个简单的小程序来熟悉下\n                      Go 的基础语法，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// fileName: simple.go</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> (\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"sync\"</span>\n</div></li><li><div class=\"code-word\">)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">input</span><span class=\"hljs-params\">(ch <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)</span></span>  {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> wg.Done()\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-built_in\">close</span>(ch)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">var</span> input <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">\tfmt.Println(<span class=\"hljs-string\">\"Enter 'EOF' to shut down: \"</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> {\n</div></li><li><div class=\"code-word\">\t\t_, err := fmt.Scanf(<span class=\"hljs-string\">\"%s\"</span>, &amp;input)\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\t\tfmt.Println(<span class=\"hljs-string\">\"Read input err: \"</span>, err.Error())\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> input == <span class=\"hljs-string\">\"EOF\"</span>{\n</div></li><li><div class=\"code-word\">\t\t\tfmt.Println(<span class=\"hljs-string\">\"Bye!\"</span>)\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t\tch &lt;- input\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">output</span><span class=\"hljs-params\">(ch <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)</span></span>  {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> wg.Done()\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> value := <span class=\"hljs-keyword\">range</span> ch{\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"Your input: \"</span>, value)\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> wg sync.WaitGroup\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">\tch := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">string</span>)\n</div></li><li><div class=\"code-word\">\twg.Add(<span class=\"hljs-number\">2</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">go</span> input(ch) <span class=\"hljs-comment\">// 读取输入</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">go</span> output(ch) <span class=\"hljs-comment\">// 输出到命令行</span>\n</div></li><li><div class=\"code-word\">\twg.Wait()\n</div></li><li><div class=\"code-word\">\tfmt.Println(<span class=\"hljs-string\">\"Exit!\"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25109\">\n                      上述示例代码的功能为：从命令行接受用户的输入并输出到命令行中，可在文件所在命令行下执行\n                      go run simple.go 启动程序。代码中使用 go\n                      关键字启动了两个协程分别处理读取输入和输出到命令行，协程为\n                      Go 中执行代码片段的用户级轻量线程，协程之间通过 chan\n                      进行数据传输，chan\n                      中的数据传输遵循先进先出的顺序，并保证每次只能有一个协程发送或者接收数据。\n                    </p>\n                    <p data-nodeid=\"25110\">\n                      每一个 Go 文件都需要在文件开头标注所属的包，Go\n                      程序是由包组成的，上述代码中的 Go 文件位于 main 包下。Go\n                      中规定可执行程序必须具备 main 包，并且在 main\n                      包下具备可执行的 main 函数。通过 import\n                      关键字就可以导入其他包中的代码进行使用。\n                    </p>\n                    <p data-nodeid=\"25111\">\n                      从上述代码中我们可以了解到 Go 的部分语法特点：\n                    </p>\n                    <ul data-nodeid=\"28401\">\n                      <li data-nodeid=\"28402\">\n                        <p data-nodeid=\"28403\">\n                          变量声明时，变量类型位于变量名后；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"28404\">\n                        <p data-nodeid=\"28405\">\n                          对于 if 和 for 等语句的子句条件，无须使用 “()”\n                          包起来；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"28406\">\n                        <p data-nodeid=\"28407\">\n                          语句结束无须使用“;”之类的分隔符，通过换行区分；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"28408\">\n                        <p data-nodeid=\"28409\" class=\"\">\n                          “{” 必须紧跟在对应语句的后面，不可另起一行。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"25121\">\n                      为了使 Go 程序运行起来，接下来我们就介绍一些简单的 Go\n                      编译工具和命令。\n                    </p>\n                    <p data-nodeid=\"25122\">\n                      第一个，<strong data-nodeid=\"25270\">go run 命令</strong\n                      >。该命令将直接编译和执行源码中的 main\n                      函数，你可以在命令后添加参数，这部分参数会作为代码可以接受的命令行输入提供给程序。以上面的\n                      simple.go 小程序为例子，进入到 simple.go\n                      文件的目录下，执行如下命令即可运行 simple.go 小程序：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">go</span> run simple.<span class=\"hljs-keyword\">go</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"30055\" class=\"\">\n                      第二个，<strong data-nodeid=\"30061\">go build 命令</strong\n                      >。该命令通过 Go\n                      的并发特性对代码进行函数粒度的并发编译，它会将源码编译为可执行文件，默认将编译该目录下的所有源码。也可以在命令后添加多个文件名，go\n                      build 将编译这些源码，输出可执行文件。\n                    </p>\n\n                    <p data-nodeid=\"25125\">\n                      比如，进入到我们上面 simple.go\n                      文件的目录下，执行如下命令：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">go</span> build -o simple <span class=\"hljs-comment\">// -o 用于指定生成可执行文件名称</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25127\">或者</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">go</span> build simple.<span class=\"hljs-keyword\">go</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25129\">\n                      都将在当前目录下生成一个 simple\n                      的可执行文件，可双击直接运行。\n                    </p>\n                    <p data-nodeid=\"25130\">\n                      接下来我们就详细讲解一下 Go\n                      语言中的函数声明、变量的声明与初始化、指针、struct\n                      等基础语法。\n                    </p>\n                    <h4 data-nodeid=\"30598\" class=\"\">1. 函数声明</h4>\n\n                    <p data-nodeid=\"25134\">\n                      Go 中使用关键字 func 来声明函数，声明形式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">funcName</span><span class=\"hljs-params\">(params)</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">return</span> params)</span></span>{\n</div></li><li><div class=\"code-word\">\tfunction body\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25136\">\n                      在同一个包内，函数名不可重名。如果函数希望能在包外被访问，则需要将函数名的首字母大写，表示该函数是包外公开的。\n                    </p>\n                    <p data-nodeid=\"25137\">\n                      函数可以接受 0\n                      个或者以上参数，在声明参数列表时，需要注意参数名在前、类型在后。对于连续类型相同的多个参数，可以省略参数类型，在最后一个参数中保留类型即可。Go\n                      的函数支持多返回值和命名返回值，但是命名返回值和非命名返回值不能混合使用。一个综合的函数声明示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Div</span><span class=\"hljs-params\">(dividend, divisor <span class=\"hljs-keyword\">int</span>)</span><span class=\"hljs-params\">(quotient, remainder <span class=\"hljs-keyword\">int</span>)</span></span> {\n</div></li><li><div class=\"code-word\">    quotient = dividend/divisor\n</div></li><li><div class=\"code-word\">    remainder = dividend%divisor\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25139\">\n                      上述代码中声明了一个包外公开的 Div 函数，接受\n                      dividend、divisor 两个参数，并返回quotient、remainder\n                      两个命名返回值，它们可以在函数体中被直接赋值使用。这里需要注意的是，在使用命名返回值时，我们需要在函数结束时显式使用\n                      return 语句进行返回。\n                    </p>\n                    <h4 data-nodeid=\"31668\" class=\"\">2. 变量的声明与初始化</h4>\n\n                    <p data-nodeid=\"25143\">\n                      Go 中使用关键字 var\n                      声明变量，变量名在前，类型在最后，声明形式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> name T\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25145\">\n                      在 Go\n                      中，声明的变量都必须被使用，否则会编译失败。变量声明之后，会被默认初始化为初值。当然，我们也可以在声明时直接进行初始化，使用赋值符号\n                      “=”，形式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> name T = expression\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25147\">\n                      Go\n                      中支持类型推荐，在变量声明和初始化可以省略类型，由编译器根据\n                      “=” 右边的表达式推导变量的类型。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25149\">\n                      a 中的类型会被编译器推导为 int。Go\n                      中还支持短变量声明和初始化，形式更加精简：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">name := expression\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25151\">\n                      该种形式需要 “:=”\n                      的左值存在没有定义过的变量，且无法在函数外使用。短变量形式支持多个变量的声明和初始化，如：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">value, _ := fmt.Println()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25153\">\n                      在多个短变量的声明和初始化中，需要保证左值最少有一个新变量，否则编译会失败。对于不需要使用的变量，可以使用匿名变量\n                      “<em data-nodeid=\"25299\">” 来处理，如上述例子中使用 “</em\n                      >” 来接受函数调用返回的\n                      error，表示赋予该标识符的值将被直接舍弃，无法在后续代码中使用。匿名变量可以在代码中多次声明使用。\n                    </p>\n                    <h4 data-nodeid=\"32726\" class=\"\">3. 指针</h4>\n\n                    <p data-nodeid=\"25157\">\n                      Go\n                      支持指针操作。指针使得开发人员可以直接操作内存空间，能够有效地提升程序的执行性能，但是传统的指针容易带来指针偏移错误、忘记释放内存等问题，大大提升了指针编程的门槛。Go\n                      移除了指针的运算能力，并引入了自动垃圾回收机制，使得 Go\n                      中的指针在具备高效的内存访问效率同时，不会出现非法修改越界数据和指针占用内存忘记回收等问题。\n                    </p>\n                    <p data-nodeid=\"25158\">\n                      Go 中的指针使用方式与 C 类似：“&amp;” 为取址符号，“*”\n                      为取值符号。声明一个指针类型如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> name *T\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25160\">\n                      这里 *T 为指向 T\n                      类型的指针。我们可以通过指针直接读取和修改变量的值，如下面例子所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\tname := <span class=\"hljs-string\">\"aoho\"</span>\n</div></li><li><div class=\"code-word\">\tp := &amp;name\n</div></li><li><div class=\"code-word\">\tfmt.Println(<span class=\"hljs-string\">\"name is\"</span>, *p)\n</div></li><li><div class=\"code-word\">\t*p = <span class=\"hljs-string\">\"zhu\"</span>\n</div></li><li><div class=\"code-word\">\tfmt.Println(<span class=\"hljs-string\">\"name is\"</span>, name)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25162\">\n                      上述代码中使用了 “&amp;” 获取了 name\n                      变量的指针，并通过该指针读取和修改了 name 变量的值。\n                    </p>\n                    <h4 data-nodeid=\"33776\" class=\"\">4. struct</h4>\n\n                    <p data-nodeid=\"25166\">\n                      Go 中不存在类，但是存在与 C 类似的 struct 类型。struct\n                      作为一种复合类型，由一组字段组成，每一个字段都有自己的类型和名称。struct\n                      的定义需要结合 type 和 struct 关键字，形式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> structName <span class=\"hljs-keyword\">struct</span>{\n</div></li><li><div class=\"code-word\">    value1 T1\n</div></li><li><div class=\"code-word\">    value2 T2\n</div></li><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25168\">\n                      和函数声明类似，struct 名在同一个包内不能重复，将 struct\n                      名的首字母大写表示该 struct 可以在包外被访问。struct\n                      中的字段如果希望包外公开，同样需要将字段名的首字母大写。一个简单的结构体定义如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> {\n</div></li><li><div class=\"code-word\">\tStudentID <span class=\"hljs-keyword\">int64</span>\n</div></li><li><div class=\"code-word\">\tName <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">\tbirth <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25170\">\n                      在上述声明的 Student struct 中，StudentID 和 Name\n                      字段在包外是可访问的，birth 字段只能在包内访问。<br />\n                      struct 可以通过多种形式实例化一个新的结构体，struct\n                      中的字段可以通过 “.” 进行读取和修改，如下面代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\ts0 := Student{}\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">// Key:Value</span>\n</div></li><li><div class=\"code-word\">\ts1 := Student{\n</div></li><li><div class=\"code-word\">\t\tStudentID:<span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">\t\tName:<span class=\"hljs-string\">\"s1\"</span>,\n</div></li><li><div class=\"code-word\">\t\tbirth:<span class=\"hljs-string\">\"19900101\"</span>,\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">// 字段赋值顺序与结构体字段定义顺序一致</span>\n</div></li><li><div class=\"code-word\">\ts2 := Student{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-number\">2</span>,\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-string\">\"s2\"</span>,\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-string\">\"19900102\"</span>,\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">// 获取指针</span>\n</div></li><li><div class=\"code-word\">\ts3 := &amp;Student{\n</div></li><li><div class=\"code-word\">\t\tStudentID:<span class=\"hljs-number\">3</span>,\n</div></li><li><div class=\"code-word\">\t\tName:<span class=\"hljs-string\">\"s3\"</span>,\n</div></li><li><div class=\"code-word\">\t\tbirth:<span class=\"hljs-string\">\"19900103\"</span>,\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">    fmt.Println(s0, s1, s2, s3)\n</div></li><li><div class=\"code-word\">    fmt.Println(s0.Name, s1.Name, s2.Name, s3.Name)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"34298\" class=\"\">数据结构</h3>\n\n                    <p data-nodeid=\"25173\">\n                      在日常开发中，除了掌握基本的语法外，语言的一些基本数据结构也必须要掌握，合理使用数据结构能够带来更高的执行效率。Go\n                      中常使用的数据结构有\n                      array（数组）、slice（切片）和map（字典）。下面让我们来一一回顾它们的用法。\n                    </p>\n                    <h4 data-nodeid=\"34820\" class=\"\">1. array（数组）</h4>\n\n                    <p data-nodeid=\"25177\">\n                      数组为一段连续的内存空间，存储了固定数量和固定类型的数据，数组的大小在声明的时候就已经固定下来。数组的声明样式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> name [size]T\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25179\">\n                      这表示声明了一个长度为 size、存储类型为 T\n                      的数组。一个简单初始化和使用数组的例子如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">var</span> numList1 [<span class=\"hljs-number\">3</span>]<span class=\"hljs-keyword\">int</span>\n</div></li><li><div class=\"code-word\">\tnumList1[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">\tnumList1[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">\tnumList1[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\">\tnumList2 := [<span class=\"hljs-number\">3</span>]<span class=\"hljs-keyword\">int</span>{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>};\n</div></li><li><div class=\"code-word\">\tfmt.Println(numList1, numList2)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25181\">\n                      在上述代码中，我们可以在声明数组后，使用下标的方式对数组成员进行访问和赋值，如\n                      numList1 ；也可以在声明数组时直接初始化数组内的数据，如\n                      numeList2 。\n                    </p>\n                    <h4 data-nodeid=\"35854\" class=\"\">2. slice（切片）</h4>\n\n                    <p data-nodeid=\"25185\">\n                      数组的大小是固定的，在使用时难免会遇到扩容的情况。切片作为数组一个连续片段的引用，它的大小动态可变，我们可以简单将切片理解为动态数组。切片底层由数组实现，在添加数据时，如果切片对应的底层数组不足以容纳新的成员时，该切片将会进行扩容：重新申请一段连续的内存空间作为新数组，通常为原有数组的\n                      2\n                      倍，然后将原有切片的数据复制到新数组中，把新的成员添加新的数组中，创建新的切片，并指向新数组，最后返回新的切片；如果当前切片对应的数组可以容纳更多的数据，添加的操作将在原有数组上进行，这将会覆盖掉原有数组的值，接着创建新的切片，并指向原数组，最后返回新的切片。\n                    </p>\n                    <p data-nodeid=\"36874\">\n                      切片和数组的关系可以通过下图理解：\n                    </p>\n                    <p data-nodeid=\"37394\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/34/12/CgqCHl8RRfGAGPUgAAAac-UEgLk767.png\"\n                        alt=\"Untitled Diagram-16.png\"\n                        data-nodeid=\"37398\"\n                      />\n                    </p>\n                    <div data-nodeid=\"37909\" class=\"\">\n                      <p style=\"text-align: center\">切片的组成</p>\n                    </div>\n\n                    <p data-nodeid=\"25189\">\n                      切片中持有指向底层存储数据数组的指针，长度指当前切片中存储数据的长度，容量指当前切片的容量，即当前切片从它的第一个数据到其对应数组末尾的长度，可以简单理解为切片在其对应数组中可使用的长度。\n                    </p>\n                    <p data-nodeid=\"25190\">\n                      切片可以从数组中直接生成，它将直接关联原有数组，生成样式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">slice := source[begin:end]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25192\">\n                      它从数组中选择一个半开区间，包含 begin\n                      位置的数据，但不包含 end 位置的数据。也可以使用 make\n                      函数创建一个新的切片，样式如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">slice := <span class=\"hljs-built_in\">make</span>([]T, size, <span class=\"hljs-built_in\">cap</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25194\">\n                      在创建时可以指定当前切片的长度和容量。一个简单使用切片的例子如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\tarr1 := [...]<span class=\"hljs-keyword\">int</span>{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>}\n</div></li><li><div class=\"code-word\">\tslice1 := arr1[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">4</span>]\n</div></li><li><div class=\"code-word\">\tslice2 := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i&lt; <span class=\"hljs-number\">4</span> ;i ++{\n</div></li><li><div class=\"code-word\">\t\tslice2[i] = i\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\tslice3 := <span class=\"hljs-built_in\">append</span>(slice1, <span class=\"hljs-number\">5</span>)\n</div></li><li><div class=\"code-word\">\tslice4 := []<span class=\"hljs-keyword\">int</span>{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>}\n</div></li><li><div class=\"code-word\">\tfmt.Println(slice1, slice2, slice3)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25196\">\n                      访问和修改切片中的数据与数组一致，通过下标即可实现。在上述代码中，对\n                      slice1 添加新的数据时，由于 slice1\n                      的容量不足以容纳新的数据，它将发生扩容操作，生成一个新切片\n                      slice3，它和 slice1 对应的底层数组不同，slice1\n                      对应数组中的数据不会发生变化。还有一个需要注意的问题是，由于\n                      append\n                      函数每次都会返回新的切片，为了避免数据的丢失，在每次使用\n                      append 函数添加新的数据后，都要保证后续使用的切片为 append\n                      函数最新返回的切片。最后在声明和初始化 slice4\n                      时，只要不指定 “[]”\n                      中的大小，即可声明和初始化一个切片，否则将会声明和初始化一个固定长度的数组。\n                    </p>\n                    <h4 data-nodeid=\"39438\" class=\"\">3. map（字典）</h4>\n\n                    <p data-nodeid=\"25200\">\n                      map 为 Go\n                      提供的映射关系容器，它将键映射到对应的值。声明一个 map\n                      的样式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> name <span class=\"hljs-keyword\">map</span>[keyType]valueType\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25202\">\n                      这其中，keyType 即键类型，valueType 即键映射的值类型。map\n                      的初值为 nil，无法直接使用，可以使用 make\n                      函数进行初始化，样式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> name <span class=\"hljs-keyword\">map</span>[keyType]valueType\n</div></li><li><div class=\"code-word\">name = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[keyType]valueType)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25204\">一个简单的使用 map 的例子如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\tmap1 := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">string</span>)\n</div></li><li><div class=\"code-word\">\tmap1[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"01\"</span>\n</div></li><li><div class=\"code-word\">\tmap1[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">\"02\"</span>\n</div></li><li><div class=\"code-word\">\tmap1[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-string\">\"03\"</span>\n</div></li><li><div class=\"code-word\">\tmap2 := <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">string</span>{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">\"01\"</span>,\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-number\">2</span>: <span class=\"hljs-string\">\"02\"</span>,\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-number\">3</span>: <span class=\"hljs-string\">\"03\"</span>,\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\tfmt.Println(map1[<span class=\"hljs-number\">0</span>])\n</div></li><li><div class=\"code-word\">\tvalue,ok := map1[<span class=\"hljs-number\">1</span>];<span class=\"hljs-keyword\">if</span> ok{\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"1 is\"</span>, value)\n</div></li><li><div class=\"code-word\">\t}<span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"1 is not existed!\"</span>)\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\tfmt.Println(map2)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25206\">\n                      在初始化 map 后，可以直接为 map 添加 key-value\n                      映射关系，如 map1 ；也可以在初始化时直接使用 key-value\n                      对为 map 添加映射关系，如 map2 。判断一个键是否在 map\n                      中存在，可以使用以下句式：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">value,ok := <span class=\"hljs-keyword\">map</span>[key]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25208\">\n                      如果键存在于 map 中，ok 将会返回 true。如果直接查询 map\n                      中不存在的键，将会返回值类型的初值，如上述例子中查询\n                      map1[0]，将会返回 int 类型的初值 0。\n                    </p>\n                    <h3 data-nodeid=\"40454\" class=\"\">流程控制</h3>\n\n                    <p data-nodeid=\"25210\">\n                      逻辑判断对于日常开发来说必不可少，接下来我们就来了解 Go\n                      中常用的流程控制语句： for、if-else、switch 和 defer。\n                    </p>\n                    <h4 data-nodeid=\"40962\" class=\"\">1. for 循环</h4>\n\n                    <p data-nodeid=\"25214\">\n                      Go 中循环语句仅提供 for 循环结构，基本形式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> init;condition;end{\n</div></li><li><div class=\"code-word\">    circle body\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25216\">\n                      其中， init 为初始化语句，仅在第一次循环前执行；condition\n                      为条件表达式，在每次循环中判断是否满足执行条件；end\n                      为结束语句，在每次循环结束时执行。上述三者都可以缺省，此时\n                      for\n                      将变成一个无限循环语句。如果缺省初始化语句和结束语句，for\n                      将变得类似 while 语句，而 Go 中不存在 while 关键字。<br />\n                      一个简单的 for 循环使用例子如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\tsum1 := <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span> ; i &lt; <span class=\"hljs-number\">10</span> ; i++{\n</div></li><li><div class=\"code-word\">\t\tsum1 += i\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\tsum2 := <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> sum2 &lt; <span class=\"hljs-number\">100</span>{\n</div></li><li><div class=\"code-word\">\t\tsum2 *= <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\tsum3 := <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> sum3 &lt; <span class=\"hljs-number\">100</span>{\n</div></li><li><div class=\"code-word\">\t\t\tsum3 *= <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\">\t\t}<span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\tfmt.Println(sum1, sum2, sum3)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25218\">\n                      在 for 循环中可以使用 break 关键字跳出当前循环，或者使用\n                      continue 关键字跳到下一个循环。\n                    </p>\n                    <h4 data-nodeid=\"41968\" class=\"\">2. 分支控制</h4>\n\n                    <p data-nodeid=\"25222\">\n                      Go 中提供两种分支控制语句，分别为 if-else 语句和 switch\n                      语句。if-else 语句用于进行条件分支控制，简单的表达式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> condition1 {\n</div></li><li><div class=\"code-word\">\tbranch1\n</div></li><li><div class=\"code-word\">} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> condition2 {\n</div></li><li><div class=\"code-word\">\tbranch2\n</div></li><li><div class=\"code-word\">} <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">\tbranch3\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"42468\">\n                      switch 是比 if-else\n                      更为简便的用于编写大量条件分支的方法。Go 中的 switch\n                      与其他编程语言类似，但存在不同之处：Go 中的 switch\n                      只执行匹配 case 后面的代码块，无须使用 break 关键字跳出\n                      switch 选择体。除非明确使用 fallthrough 关键字对上下两个\n                      case 进行连接，否则 switch 执行完匹配 case\n                      后面的代码块后将退出 switch。\n                    </p>\n                    <p data-nodeid=\"42469\">一个简单的 switch 例子如下：</p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> (\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">\"time\"</span>\n</div></li><li><div class=\"code-word\">)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\tnowTime := time.Now()\n</div></li><li><div class=\"code-word\">\t\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">switch</span> nowTime.Weekday(){\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">case</span> time.Saturday:\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"take a rest\"</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">case</span> time.Sunday:\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"take a rest\"</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">default</span>:\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"you need to work\"</span>)\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">switch</span>  {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">case</span> nowTime.Weekday() &gt;= time.Monday &amp;&amp; nowTime.Weekday() &lt;= time.Friday:\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"you need to work\"</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">default</span>:\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"take a rest\"</span>)\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25226\">\n                      当 switch 后没有携带需要判断的条件时，就可以在 case\n                      后面使用判断表达式，如上述代码所示，这种写法就与 if-else\n                      语句十分类似，但显得更为清晰。\n                    </p>\n                    <h4 data-nodeid=\"43468\" class=\"\">3. defer 延迟执行</h4>\n\n                    <p data-nodeid=\"25230\">\n                      Go 中提供 defer 关键字来延迟执行函数，被 defer\n                      延迟执行的函数会在 return\n                      返回前执行，所以一般用来进行资源释放等清理工作。\n                    </p>\n                    <p data-nodeid=\"25231\">\n                      多个被 defer\n                      的函数会按照先进后出的顺序被调用，类似栈数据结构的使用。我们通过一个简单的例子来理解\n                      defer 关键字的使用：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> a + b\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\ta := <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">\tb := <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> fmt.Println(<span class=\"hljs-string\">\"front result: \"</span>, add(a, b)) <span class=\"hljs-comment\">// 3</span>\n</div></li><li><div class=\"code-word\">\ta = <span class=\"hljs-number\">3</span>\n</div></li><li><div class=\"code-word\">\tb = <span class=\"hljs-number\">4</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> fmt.Println(<span class=\"hljs-string\">\"last result: \"</span>, add(a, b)) <span class=\"hljs-comment\">// 7</span>\n</div></li><li><div class=\"code-word\">\ta = <span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\">\tb = <span class=\"hljs-number\">6</span>\n</div></li><li><div class=\"code-word\">\tfmt.Println(add(a, b)) <span class=\"hljs-comment\">// 11</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25233\">\n                      按照 defer 先进后出的执行顺序，预期的执行结果为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">11\n</div></li><li><div class=\"code-word\">7\n</div></li><li><div class=\"code-word\">3\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"25235\">\n                      在上述例子中还需要注意的是，传递给 defer\n                      执行的延迟函数的参数会被立即解析，而非等待到正式执行时才被解析。\n                    </p>\n                    <h4 data-nodeid=\"43964\" class=\"te-preview-highlight\">\n                      小结\n                    </h4>\n\n                    <p data-nodeid=\"25237\">\n                      无可否认，Go\n                      是一门优秀的服务端开发语言，具备语法简单、性能优越、静态类型安全、自动垃圾回收等诸多优点。\n                    </p>\n                    <p data-nodeid=\"25238\">\n                      本课时我们对 Go 语言开发进行了快速回顾，主要介绍了：\n                    </p>\n                    <ul data-nodeid=\"25239\">\n                      <li data-nodeid=\"25240\">\n                        <p data-nodeid=\"25241\">\n                          Go 基本语法，包括函数声明、变量声明与初始化、指针和\n                          struct；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25242\">\n                        <p data-nodeid=\"25243\">\n                          数据结构，包括数组、切片和字典；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"25244\">\n                        <p data-nodeid=\"25245\">\n                          流程控制，包括 for 循环、if-else 与 switch\n                          分支控制、defer 延迟执行。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"25246\">\n                      由于课程接下来的项目实践是围绕着 Go\n                      进行开发的，因此具备基本的 Go\n                      开发能力是必不可少的。希望通过本课时的学习，你能够掌握编写简单\n                      Go 程序的能力，为后面使用 Go\n                      开发微服务应用打下坚实的基础。\n                    </p>\n                    <p data-nodeid=\"25933\">\n                      最后，关于 Go\n                      语言开发你有什么问题或想法，欢迎在留言区和我交流分享。\n                    </p>\n            "}