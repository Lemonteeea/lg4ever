{"title":"26 | Vue Router：如何实现一个前端路由？（上）","context":"\n                    <p data-nodeid=\"68116\">\n                      相信对有一定基础的前端开发工程师来说，路由并不陌生，它最初源于服务端，在服务端中路由描述的是\n                      URL 与处理函数之间的映射关系。\n                    </p>\n\n                    <p data-nodeid=\"67684\">\n                      而在 Web 前端单页应用 SPA 中，路由描述的是 URL\n                      与视图之间的映射关系，这种映射是单向的，即 URL\n                      变化会引起视图的更新。\n                    </p>\n                    <p data-nodeid=\"67685\">\n                      相比于后端路由，前端路由的好处是无须刷新页面，减轻了服务器的压力，提升了用户体验。目前主流支持单页应用的前端框架，基本都有配套的或第三方的路由系统。相应的，Vue.js\n                      也提供了官方前端路由实现 Vue\n                      Router，那么这节课我们就来学习它的实现原理。\n                    </p>\n                    <blockquote data-nodeid=\"67686\">\n                      <p data-nodeid=\"67687\">\n                        Vue.js 3.0 配套的 Vue Router 源码在<a\n                          href=\"https://github.com/vuejs/vue-router-next\"\n                          data-nodeid=\"67761\"\n                          >这里</a\n                        >，建议你学习前先把源码 clone\n                        下来。如果你还不会使用路由，建议你先看它的<a\n                          href=\"https://next.router.vuejs.org/\"\n                          data-nodeid=\"67765\"\n                          >官网文档</a\n                        >，会使用后再来学习本节课。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"67688\">路由的基本用法</h3>\n                    <p data-nodeid=\"67689\">\n                      我们先通过一个简单地示例来看路由的基本用法，希望你也可以使用\n                      Vue cli 脚手架创建一个 Vue.js 3.0 的项目，并安装 4.x\n                      版本的 Vue Router 把项目跑起来。\n                    </p>\n                    <p data-nodeid=\"67690\">\n                      注意，为了让 Vue.js 可以在线编译模板，你需要在根目录下配置\n                      vue.config.js，并且设置 runtimeCompiler 为 true：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  runtimeCompiler: <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"67692\">\n                      然后我们修改页面的 HTML 模板，加上如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;div id=<span class=\"hljs-string\">\"app\"</span>&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello App!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span>Go to Home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/about\"</span>&gt;</span>Go to About<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-link</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">router-view</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">router-view</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"68401\">\n                      其中，RouterLink 和 RouterView 是 Vue Router 内置的组件。\n                    </p>\n                    <p data-nodeid=\"68402\">\n                      RouterLink 表示路由的导航组件，我们可以配置 to\n                      属性来指定它跳转的链接，它最终会在页面上渲染生成 a 标签。\n                    </p>\n                    <p data-nodeid=\"68403\">\n                      RouterView 表示路由的视图组件，它会渲染路径对应的 Vue\n                      组件，也支持嵌套。\n                    </p>\n                    <p data-nodeid=\"68404\">\n                      RouterLink 和 RouterView\n                      的具体实现，我们会放到后面去分析。\n                    </p>\n                    <p data-nodeid=\"68405\">\n                      有了模板之后，我们接下来看如何初始化路由：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { createApp } from <span class=\"hljs-string\">'vue'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { createRouter, createWebHashHistory } from <span class=\"hljs-string\">'vue-router'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 1. 定义路由组件</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> Home = { template: <span class=\"hljs-string\">'&lt;div&gt;Home&lt;/div&gt;'</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> About = { template: <span class=\"hljs-string\">'&lt;div&gt;About&lt;/div&gt;'</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 2. 定义路由配置，每个路径映射一个路由视图组件</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> routes = [\n</div></li><li><div class=\"code-word\">  { path: <span class=\"hljs-string\">'/'</span>, component: Home },\n</div></li><li><div class=\"code-word\">  { path: <span class=\"hljs-string\">'/about'</span>, component: About },\n</div></li><li><div class=\"code-word\">]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 3. 创建路由实例，可以指定路由模式，传入路由配置对象</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> router = createRouter({\n</div></li><li><div class=\"code-word\">  history: createWebHistory(),\n</div></li><li><div class=\"code-word\">  routes\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 4. 创建 app 实例</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> app = createApp({\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 5. 在挂载页面 之前先安装路由</span>\n</div></li><li><div class=\"code-word\">app.use(router)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 6. 挂载页面</span>\n</div></li><li><div class=\"code-word\">app.mount(<span class=\"hljs-string\">'#app'</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"68407\">\n                      可以看到，路由的初始化过程很简单，首先需要定义一个路由配置，这个配置主要用于描述路径和组件的映射关系，即什么路径下\n                      RouterView 应该渲染什么路由组件。\n                    </p>\n                    <p data-nodeid=\"68408\">\n                      接着创建路由对象实例，传入路由配置对象，并且也可以指定路由模式，Vue\n                      Router 目前支持三种模式，hash 模式，HTML5 模式和 memory\n                      模式，我们常用的是前两种模式。\n                    </p>\n                    <p data-nodeid=\"68409\">\n                      最后在挂载页面前，我们需要安装路由，这样我们就可以在各个组件中访问路由对象以及使用路由的内置组件\n                      RouterLink 和 RouterView 了。\n                    </p>\n                    <p data-nodeid=\"68410\">\n                      知道了 Vue Router\n                      的基本用法后，接下来我们就可以探究它的实现原理了。由于 Vue\n                      Router\n                      源码加起来有几千行，限于篇幅，我会把重点放在整体的实现流程上，不会讲实现的细节。\n                    </p>\n                    <h3 data-nodeid=\"68411\">路由的实现原理</h3>\n                    <p data-nodeid=\"68412\">\n                      我们先从用户使用的角度来分析，先从路由对象的创建过程开始。\n                    </p>\n                    <h4 data-nodeid=\"68413\">路由对象的创建</h4>\n                    <p data-nodeid=\"68414\">\n                      Vue Router 提供了一个 createRouter\n                      API，你可以通过它来创建一个路由对象，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createRouter</span><span class=\"hljs-params\">(options)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 定义一些辅助方法和变量 </span>\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建 router 对象</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> router = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 当前路径</span>\n</div></li><li><div class=\"code-word\">    currentRoute,\n</div></li><li><div class=\"code-word\">    addRoute,\n</div></li><li><div class=\"code-word\">    removeRoute,\n</div></li><li><div class=\"code-word\">    hasRoute,\n</div></li><li><div class=\"code-word\">    getRoutes,\n</div></li><li><div class=\"code-word\">    resolve,\n</div></li><li><div class=\"code-word\">    options,\n</div></li><li><div class=\"code-word\">    push,\n</div></li><li><div class=\"code-word\">    replace,\n</div></li><li><div class=\"code-word\">    go,\n</div></li><li><div class=\"code-word\">    back: () =&gt; go(-<span class=\"hljs-number\">1</span>),\n</div></li><li><div class=\"code-word\">    forward: () =&gt; go(<span class=\"hljs-number\">1</span>),\n</div></li><li><div class=\"code-word\">    beforeEach: beforeGuards.add,\n</div></li><li><div class=\"code-word\">    beforeResolve: beforeResolveGuards.add,\n</div></li><li><div class=\"code-word\">    afterEach: afterGuards.add,\n</div></li><li><div class=\"code-word\">    onError: errorHandlers.add,\n</div></li><li><div class=\"code-word\">    isReady,\n</div></li><li><div class=\"code-word\">    install(app) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 安装路由函数</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> router\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"68416\">\n                      我们省略了大部分代码，只保留了路由对象相关的代码，可以看到路由对象\n                      router 就是一个对象，它维护了当前路径\n                      currentRoute，且拥有很多辅助方法。\n                    </p>\n                    <p data-nodeid=\"68417\">\n                      目前你只需要了解这么多，创建完路由对象后，我们现在来安装它。\n                    </p>\n                    <h4 data-nodeid=\"68418\">路由的安装</h4>\n                    <p data-nodeid=\"68419\">\n                      Vue Router 作为 Vue 的插件，当我们执行 app.use(router)\n                      的时候，实际上就是在执行 router 的 install\n                      方法来安装路由，并把 app 作为参数传入，来看它的定义：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> router = {\n</div></li><li><div class=\"code-word\">  install(app) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> router = <span class=\"hljs-keyword\">this</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 注册路由组件</span>\n</div></li><li><div class=\"code-word\">    app.component(<span class=\"hljs-string\">'RouterLink'</span>, RouterLink)\n</div></li><li><div class=\"code-word\">    app.component(<span class=\"hljs-string\">'RouterView'</span>, RouterView)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 全局配置定义 $router 和 $route</span>\n</div></li><li><div class=\"code-word\">    app.config.globalProperties.$router = router\n</div></li><li><div class=\"code-word\">    Object.defineProperty(app.config.globalProperties, <span class=\"hljs-string\">'$route'</span>, {\n</div></li><li><div class=\"code-word\">      get: () =&gt; unref(currentRoute),\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 在浏览器端初始化导航</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (isBrowser &amp;&amp;\n</div></li><li><div class=\"code-word\">      !started &amp;&amp;\n</div></li><li><div class=\"code-word\">      currentRoute.value === START_LOCATION_NORMALIZED) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// see above</span>\n</div></li><li><div class=\"code-word\">      started = <span class=\"hljs-function\"><span class=\"hljs-keyword\">true</span>\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(routerHistory.location)</span>.<span class=\"hljs-title\">catch</span><span class=\"hljs-params\">(err =&gt; {\n</span></div></li><li><div class=\"code-word\">        warn(<span class=\"hljs-string\">'Unexpected error when starting the router:'</span>, err)\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 路径变成响应式</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> reactiveRoute = {}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (let key in START_LOCATION_NORMALIZED) {\n</div></li><li><div class=\"code-word\">      reactiveRoute[key] = computed(() =&gt; currentRoute.value[key])\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 全局注入 router 和 reactiveRoute</span>\n</div></li><li><div class=\"code-word\">    app.provide(routerKey, router)\n</div></li><li><div class=\"code-word\">    app.provide(routeLocationKey, reactive(reactiveRoute))\n</div></li><li><div class=\"code-word\">    let unmountApp = app.unmount\n</div></li><li><div class=\"code-word\">    installedApps.add(app)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 应用卸载的时候，需要做一些路由清理工作</span>\n</div></li><li><div class=\"code-word\">    app.unmount = function () {\n</div></li><li><div class=\"code-word\">      installedApps.delete(app)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (installedApps.size &lt; <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">        removeHistoryListener()\n</div></li><li><div class=\"code-word\">        currentRoute.value = START_LOCATION_NORMALIZED\n</div></li><li><div class=\"code-word\">        started = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">        ready = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      unmountApp.call(<span class=\"hljs-keyword\">this</span>, arguments)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"68421\">\n                      路由的安装的过程我们需要记住以下两件事情。\n                    </p>\n                    <ol data-nodeid=\"68422\">\n                      <li data-nodeid=\"68423\">\n                        <p data-nodeid=\"68424\">\n                          全局注册 RouterView 和 RouterLink\n                          组件——这是你安装了路由后，可以在任何组件中去使用这俩个组件的原因，如果你使用\n                          RouterView 或者 RouterLink 的时候收到提示不能解析\n                          router-link 和\n                          router-view，这说明你压根就没有安装路由。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"68425\">\n                        <p data-nodeid=\"68426\">\n                          通过 provide 方式全局注入 router 对象和 reactiveRoute\n                          对象，其中 router 表示用户通过 createRouter\n                          创建的路由对象，我们可以通过它去动态操作路由，reactiveRoute\n                          表示响应式的路径对象，它维护着路径的相关信息。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"68427\">\n                      那么至此我们就已经了解了路由对象的创建，以及路由的安装，但是前端路由的实现，还需要解决几个核心问题：路径是如何管理的，路径和路由组件的渲染是如何映射的。\n                    </p>\n                    <p data-nodeid=\"68428\">\n                      那么接下来，我们就来更细节地来看，依次来解决这两个问题。\n                    </p>\n                    <h4 data-nodeid=\"68429\">路径的管理</h4>\n                    <p data-nodeid=\"68430\">\n                      路由的基础结构就是一个路径对应一种视图，当我们切换路径的时候对应的视图也会切换，因此一个很重要的方面就是对路径的管理。\n                    </p>\n                    <p data-nodeid=\"68431\">\n                      首先，我们需要维护当前的路径\n                      currentRoute，可以给它一个初始值\n                      START_LOCATION_NORMALIZED，如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> START_LOCATION_NORMALIZED = {\n</div></li><li><div class=\"code-word\">  path: <span class=\"hljs-string\">'/'</span>,\n</div></li><li><div class=\"code-word\">  name: undefined,\n</div></li><li><div class=\"code-word\">  params: {},\n</div></li><li><div class=\"code-word\">  query: {},\n</div></li><li><div class=\"code-word\">  hash: <span class=\"hljs-string\">''</span>,\n</div></li><li><div class=\"code-word\">  fullPath: <span class=\"hljs-string\">'/'</span>,\n</div></li><li><div class=\"code-word\">  matched: [],\n</div></li><li><div class=\"code-word\">  meta: {},\n</div></li><li><div class=\"code-word\">  redirectedFrom: undefined\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"68433\">\n                      可以看到，路径对象包含了非常丰富的路径信息，具体含义我就不在这多说了，你可以参考<a\n                        href=\"https://next.router.vuejs.org/api/#meta-3\"\n                        data-nodeid=\"68492\"\n                        >官方文档</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"68434\">\n                      路由想要发生变化，就是通过改变路径完成的，路由对象提供了很多改变路径的方法，比如\n                      router.push、router.replace，它们的底层最终都是通过\n                      pushWithRedirect 完成路径的切换，我们来看一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">pushWithRedirect</span><span class=\"hljs-params\">(to, redirectedFrom)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> targetLocation = (pendingLocation = resolve(to))\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> from = currentRoute.value\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> data = to.state\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> force = to.force\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> replace = to.replace === <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> toLocation = targetLocation\n</div></li><li><div class=\"code-word\">  toLocation.redirectedFrom = <span class=\"hljs-function\">redirectedFrom\n</span></div></li><li><div class=\"code-word\">  let failure\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(!force &amp;&amp; isSameRouteLocation(stringifyQuery$<span class=\"hljs-number\">1</span>, from, targetLocation)</span>) {\n</div></li><li><div class=\"code-word\">    failure = createRouterError(<span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* NAVIGATION_DUPLICATED */</span>, { to: toLocation, from })\n</div></li><li><div class=\"code-word\">    handleScroll(from, from, <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-keyword\">false</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (failure ? Promise.resolve(failure) : navigate(toLocation, from))\n</div></li><li><div class=\"code-word\">    .<span class=\"hljs-keyword\">catch</span>((error) =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (isNavigationFailure(error, <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* NAVIGATION_ABORTED */</span> |\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* NAVIGATION_CANCELLED */</span> |\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* NAVIGATION_GUARD_REDIRECT */</span>)) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> error\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> triggerError(error)\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">    .then((failure) =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (failure) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 处理错误</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        failure = finalizeNavigation(toLocation, from, <span class=\"hljs-keyword\">true</span>, replace, data)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      triggerAfterEach(toLocation, from, failure)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> failure\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"69779\">\n                      我省略了一部分代码的实现，这里主要来看 pushWithRedirect\n                      的核心思路，首先参数 to\n                      可能有多种情况，可以是一个表示路径的字符串，也可以是一个路径对象，所以要先经过一层\n                      resolve\n                      返回一个新的路径对象，它比前面提到的路径对象多了一个\n                      matched 属性，它的作用我们后续会介绍。\n                    </p>\n                    <p data-nodeid=\"69780\">\n                      得到新的目标路径后，接下来执行 navigate\n                      方法，它实际上是执行路由切换过程中的一系列导航守卫函数，我们后续会介绍。navigate\n                      成功后，会执行 finalizeNavigation\n                      完成导航，在这里完成真正的路径切换，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">finalizeNavigation</span><span class=\"hljs-params\">(toLocation, from, isPush, replace, data)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> error = checkCanceledNavigation(toLocation, from)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (error)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> error\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> isFirstNavigation = from === START_LOCATION_NORMALIZED\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> state = !isBrowser ? {} : history.<span class=\"hljs-function\">state\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(isPush)</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (replace || isFirstNavigation)\n</div></li><li><div class=\"code-word\">      routerHistory.replace(toLocation.fullPath, assign({\n</div></li><li><div class=\"code-word\">        scroll: isFirstNavigation &amp;&amp; state &amp;&amp; state.scroll,\n</div></li><li><div class=\"code-word\">      }, data))\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span>\n</div></li><li><div class=\"code-word\">      routerHistory.push(toLocation.fullPath, data)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  currentRoute.value = <span class=\"hljs-function\">toLocation\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">handleScroll</span><span class=\"hljs-params\">(toLocation, from, isPush, isFirstNavigation)</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">markAsReady</span><span class=\"hljs-params\">()</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"70105\">\n                      这里的 finalizeNavigation\n                      函数，我们重点关注两个逻辑，一个是更新当前的路径\n                      currentRoute 的值，一个是执行 routerHistory.push 或者是\n                      routerHistory.replace 方法更新浏览器的 URL 的记录。\n                    </p>\n                    <p data-nodeid=\"70106\">\n                      每当我们切换路由的时候，会发现浏览器的 URL\n                      发生了变化，但是页面却没有刷新，它是怎么做的呢？\n                    </p>\n\n                    <p data-nodeid=\"69783\">\n                      在我们创建 router 对象的时候，会创建一个 history\n                      对象，前面提到 Vue Router 支持三种模式，这里我们重点分析\n                      HTML5 的 history 的模式：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createWebHistory</span><span class=\"hljs-params\">(base)</span> </span>{\n</div></li><li><div class=\"code-word\">  base = normalizeBase(base)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> historyNavigation = useHistoryStateNavigation(base)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\">function <span class=\"hljs-title\">go</span><span class=\"hljs-params\">(delta, triggerListeners = <span class=\"hljs-keyword\">true</span>)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!triggerListeners)\n</div></li><li><div class=\"code-word\">      historyListeners.pauseListeners()\n</div></li><li><div class=\"code-word\">    history.go(delta)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> routerHistory = assign({\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// it's overridden right after</span>\n</div></li><li><div class=\"code-word\">    location: <span class=\"hljs-string\">''</span>,\n</div></li><li><div class=\"code-word\">    base,\n</div></li><li><div class=\"code-word\">    go,\n</div></li><li><div class=\"code-word\">    createHref: createHref.bind(<span class=\"hljs-keyword\">null</span>, base),\n</div></li><li><div class=\"code-word\">  }, historyNavigation, historyListeners)\n</div></li><li><div class=\"code-word\">  Object.defineProperty(routerHistory, <span class=\"hljs-string\">'location'</span>, {\n</div></li><li><div class=\"code-word\">    get: () =&gt; historyNavigation.location.value,\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">  Object.defineProperty(routerHistory, <span class=\"hljs-string\">'state'</span>, {\n</div></li><li><div class=\"code-word\">    get: () =&gt; historyNavigation.state.value,\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> routerHistory\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"69785\">\n                      对于 routerHistory\n                      对象而言，它有两个重要的作用，一个是路径的切换，一个是监听路径的变化。\n                    </p>\n                    <p data-nodeid=\"69786\">\n                      其中，路径切换主要通过 historyNavigation 来完成的，它是\n                      useHistoryStateNavigation 函数的返回值，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">useHistoryStateNavigation</span><span class=\"hljs-params\">(base)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { history, location } = window\n</div></li><li><div class=\"code-word\">  let currentLocation = {\n</div></li><li><div class=\"code-word\">    value: createCurrentLocation(base, location),\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  let historyState = { value: history.state }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!historyState.value) {\n</div></li><li><div class=\"code-word\">    changeLocation(currentLocation.value, {\n</div></li><li><div class=\"code-word\">      back: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">      current: currentLocation.value,\n</div></li><li><div class=\"code-word\">      forward: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">      position: history.length - <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">      replaced: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">      scroll: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">    }, <span class=\"hljs-keyword\">true</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\">function <span class=\"hljs-title\">changeLocation</span><span class=\"hljs-params\">(to, state, replace)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> url = createBaseLocation() +\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// preserve any existing query when base has a hash</span>\n</div></li><li><div class=\"code-word\">      (base.indexOf(<span class=\"hljs-string\">'#'</span>) &gt; -<span class=\"hljs-number\">1</span> &amp;&amp; location.search\n</div></li><li><div class=\"code-word\">        ? location.pathname + location.search + <span class=\"hljs-string\">'#'</span>\n</div></li><li><div class=\"code-word\">        : base) +\n</div></li><li><div class=\"code-word\">      to\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">      history[replace ? <span class=\"hljs-string\">'replaceState'</span> : <span class=\"hljs-string\">'pushState'</span>](state, <span class=\"hljs-string\">''</span>, url)\n</div></li><li><div class=\"code-word\">      historyState.value = state\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">catch</span> (err) {\n</div></li><li><div class=\"code-word\">      warn(<span class=\"hljs-string\">'Error with push/replace State'</span>, err)\n</div></li><li><div class=\"code-word\">      location[replace ? <span class=\"hljs-string\">'replace'</span> : <span class=\"hljs-string\">'assign'</span>](url)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\">function <span class=\"hljs-title\">replace</span><span class=\"hljs-params\">(to, data)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> state = assign({}, history.state, buildState(historyState.value.back,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// keep back and forward entries but override current position</span>\n</div></li><li><div class=\"code-word\">      to, historyState.value.forward, <span class=\"hljs-keyword\">true</span>), data, { position: historyState.value.position })\n</div></li><li><div class=\"code-word\">    changeLocation(to, state, <span class=\"hljs-keyword\">true</span>)\n</div></li><li><div class=\"code-word\">    currentLocation.value = to\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\">function <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(to, data)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> currentState = assign({},\n</div></li><li><div class=\"code-word\">      historyState.value, history.state, {\n</div></li><li><div class=\"code-word\">        forward: to,\n</div></li><li><div class=\"code-word\">        scroll: computeScrollPosition(),\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> ( !history.state) {\n</div></li><li><div class=\"code-word\">      warn(\\`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state <span class=\"hljs-keyword\">if</span> you are manually calling history.replaceState:\\n\\n\\` +\n</div></li><li><div class=\"code-word\">        \\`history.replaceState(history.state, <span class=\"hljs-string\">''</span>, url)\\n\\n\\` +\n</div></li><li><div class=\"code-word\">        \\`You can find more information at https:<span class=\"hljs-comment\">//next.router.vuejs.org/guide/migration/#usage-of-history-state.\\`)</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    changeLocation(currentState.current, currentState, <span class=\"hljs-keyword\">true</span>)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> state = assign({}, buildState(currentLocation.value, to, <span class=\"hljs-keyword\">null</span>), { position: currentState.position + <span class=\"hljs-number\">1</span> }, data)\n</div></li><li><div class=\"code-word\">    changeLocation(to, state, <span class=\"hljs-keyword\">false</span>)\n</div></li><li><div class=\"code-word\">    currentLocation.value = to\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    location: currentLocation,\n</div></li><li><div class=\"code-word\">    state: historyState,\n</div></li><li><div class=\"code-word\">    push,\n</div></li><li><div class=\"code-word\">    replace\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"69788\">\n                      该函数返回的 push 和 replace 函数，会添加给 routerHistory\n                      对象上，因此当我们调用 routerHistory.push 或者是\n                      routerHistory.replace\n                      方法的时候实际上就是在执行这两个函数。\n                    </p>\n                    <p data-nodeid=\"69789\">\n                      push 和 replace 方法内部都是执行了 changeLocation\n                      方法，该函数内部执行了浏览器底层的 history.pushState 或者\n                      history.replaceState\n                      方法，会向当前浏览器会话的历史堆栈中添加一个状态，这样就在不刷新页面的情况下修改了页面的\n                      URL。\n                    </p>\n                    <p data-nodeid=\"69790\">\n                      我们使用这种方法修改了路径，这个时候假设我们点击浏览器的回退按钮回到上一个\n                      URL，这需要恢复到上一个路径以及更新路由视图，因此我们还需要监听这种\n                      history 变化的行为，做一些相应的处理。\n                    </p>\n                    <p data-nodeid=\"69791\">\n                      History 变化的监听主要是通过 historyListeners\n                      来完成的，它是 useHistoryListeners\n                      函数的返回值，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">useHistoryListeners</span><span class=\"hljs-params\">(base, historyState, currentLocation, replace)</span> </span>{\n</div></li><li><div class=\"code-word\">  let listeners = []\n</div></li><li><div class=\"code-word\">  let teardowns = []\n</div></li><li><div class=\"code-word\">  let pauseState = <span class=\"hljs-keyword\">null</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> popStateHandler = ({ state, }) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> to = createCurrentLocation(base, location)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> from = currentLocation.value\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> fromState = historyState.value\n</div></li><li><div class=\"code-word\">    let delta = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (state) {\n</div></li><li><div class=\"code-word\">      currentLocation.value = to\n</div></li><li><div class=\"code-word\">      historyState.value = <span class=\"hljs-function\">state\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(pauseState &amp;&amp; pauseState === from)</span> {\n</div></li><li><div class=\"code-word\">        pauseState = <span class=\"hljs-keyword\">null</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      delta = fromState ? state.position - fromState.position : <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      replace(to)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    listeners.forEach(listener =&gt; {\n</div></li><li><div class=\"code-word\">      listener(currentLocation.value, from, {\n</div></li><li><div class=\"code-word\">        delta,\n</div></li><li><div class=\"code-word\">        type: NavigationType.pop,\n</div></li><li><div class=\"code-word\">        direction: delta\n</div></li><li><div class=\"code-word\">          ? delta &gt; <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">            ? NavigationDirection.forward\n</div></li><li><div class=\"code-word\">            : NavigationDirection.back\n</div></li><li><div class=\"code-word\">          : NavigationDirection.unknown,\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\">function <span class=\"hljs-title\">pauseListeners</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    pauseState = currentLocation.value\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\">function <span class=\"hljs-title\">listen</span><span class=\"hljs-params\">(callback)</span> </span>{\n</div></li><li><div class=\"code-word\">    listeners.push(callback)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> teardown = () =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> index = listeners.indexOf(callback)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (index &gt; -<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">        listeners.splice(index, <span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    teardowns.push(teardown)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> teardown\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\">function <span class=\"hljs-title\">beforeUnloadListener</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> { history } = <span class=\"hljs-function\">window\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(!history.state)</span>\n</div></li><li><div class=\"code-word\">      return\n</div></li><li><div class=\"code-word\">    history.<span class=\"hljs-title\">replaceState</span><span class=\"hljs-params\">(assign({}, history.state, { scroll: computeScrollPosition()</span> }), '')\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  function <span class=\"hljs-title\">destroy</span><span class=\"hljs-params\">()</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> teardown of teardowns)\n</div></li><li><div class=\"code-word\">      teardown()\n</div></li><li><div class=\"code-word\">    teardowns = []\n</div></li><li><div class=\"code-word\">    window.removeEventListener(<span class=\"hljs-string\">'popstate'</span>, popStateHandler)\n</div></li><li><div class=\"code-word\">    window.removeEventListener(<span class=\"hljs-string\">'beforeunload'</span>, beforeUnloadListener)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  window.addEventListener(<span class=\"hljs-string\">'popstate'</span>, popStateHandler)\n</div></li><li><div class=\"code-word\">  window.addEventListener(<span class=\"hljs-string\">'beforeunload'</span>, beforeUnloadListener)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    pauseListeners,\n</div></li><li><div class=\"code-word\">    listen,\n</div></li><li><div class=\"code-word\">    destroy\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"69793\">\n                      该函数返回了 listen 方法，允许你添加一些侦听器，侦听\n                      hstory 的变化，同时这个方法也被挂载到了 routerHistory\n                      对象上，这样外部就可以访问到了。\n                    </p>\n                    <p data-nodeid=\"69794\">\n                      该函数内部还监听了浏览器底层 Window 的 popstate\n                      事件，当我们点击浏览器的回退按钮或者是执行了 history.back\n                      方法的时候，会触发事件的回调函数\n                      popStateHandler，进而遍历侦听器\n                      listeners，执行每一个侦听器函数。\n                    </p>\n                    <p data-nodeid=\"69795\">\n                      那么，Vue Router\n                      是如何添加这些侦听器的呢？原来在安装路由的时候，会执行一次初始化导航，执行了\n                      push 方法进而执行了 finalizeNavigation 方法。\n                    </p>\n                    <p data-nodeid=\"69796\">\n                      在 finalizeNavigation 的最后，会执行 markAsReady\n                      方法，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">markAsReady</span><span class=\"hljs-params\">(err)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (ready)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">  ready = <span class=\"hljs-function\"><span class=\"hljs-keyword\">true</span>\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">setupListeners</span><span class=\"hljs-params\">()</span>\n</div></li><li><div class=\"code-word\">  readyHandlers\n</div></li><li><div class=\"code-word\">    .<span class=\"hljs-title\">list</span><span class=\"hljs-params\">()</span>\n</div></li><li><div class=\"code-word\">    .<span class=\"hljs-title\">forEach</span><span class=\"hljs-params\">(([resolve, reject])</span> =&gt; (err ? reject(err) : resolve()))\n</div></li><li><div class=\"code-word\">  readyHandlers.reset()\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"69798\">\n                      markAsReady 内部会执行 setupListeners\n                      函数初始化侦听器，且保证只初始化一次。我们再接着来看\n                      setupListeners 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">setupListeners</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  removeHistoryListener = routerHistory.listen((to, _from, info) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> toLocation = resolve(to)\n</div></li><li><div class=\"code-word\">    pendingLocation = toLocation\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> from = currentRoute.<span class=\"hljs-function\">value\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(isBrowser)</span> {\n</div></li><li><div class=\"code-word\">      saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition())\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    navigate(toLocation, from)\n</div></li><li><div class=\"code-word\">      .<span class=\"hljs-keyword\">catch</span>((error) =&gt; {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (isNavigationFailure(error, <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* NAVIGATION_ABORTED */</span> | <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* NAVIGATION_CANCELLED */</span>)) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span> error\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (isNavigationFailure(error, <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* NAVIGATION_GUARD_REDIRECT */</span>)) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> (info.delta)\n</div></li><li><div class=\"code-word\">            routerHistory.go(-info.delta, <span class=\"hljs-keyword\">false</span>)\n</div></li><li><div class=\"code-word\">          pushWithRedirect(error.to, toLocation\n</div></li><li><div class=\"code-word\">          ).<span class=\"hljs-keyword\">catch</span>(noop)\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// avoid the then branch</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span> Promise.reject()\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (info.delta)\n</div></li><li><div class=\"code-word\">          routerHistory.go(-info.delta, <span class=\"hljs-keyword\">false</span>)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> triggerError(error)\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">      .then((failure) =&gt; {\n</div></li><li><div class=\"code-word\">        failure =\n</div></li><li><div class=\"code-word\">          failure ||\n</div></li><li><div class=\"code-word\">          finalizeNavigation(\n</div></li><li><div class=\"code-word\">            toLocation, from, <span class=\"hljs-keyword\">false</span>)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (failure &amp;&amp; info.delta)\n</div></li><li><div class=\"code-word\">          routerHistory.go(-info.delta, <span class=\"hljs-keyword\">false</span>)\n</div></li><li><div class=\"code-word\">        triggerAfterEach(toLocation, from, failure)\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">      .<span class=\"hljs-keyword\">catch</span>(noop)\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"69800\">\n                      侦听器函数也是执行 navigate\n                      方法，执行路由切换过程中的一系列导航守卫函数，在 navigate\n                      成功后执行 finalizeNavigation\n                      完成导航，完成真正的路径切换。这样就保证了在用户点击浏览器回退按钮后，可以恢复到上一个路径以及更新路由视图。\n                    </p>\n                    <p data-nodeid=\"70391\">\n                      至此，我们就完成了路径管理，在内存中通过 currentRoute\n                      维护记录当前的路径，通过浏览器底层 API 实现了路径的切换和\n                      history 变化的监听。\n                    </p>\n            "}