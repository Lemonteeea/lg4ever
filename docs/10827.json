{"title":"21 | v-model：双向绑定到底是怎么实现的？","context":"\n                    <p data-nodeid=\"73652\">\n                      很多人学习 Vue.js，会把 Vue.js\n                      的响应式原理误解为双向绑定。其实响应式原理是一种单向行为，它是数据到\n                      DOM 的映射。而真正的双向绑定，除了数据变化，会引起 DOM\n                      的变化之外，还应该在操作 DOM\n                      改变后，反过来影响数据的变化。\n                    </p>\n\n                    <p data-nodeid=\"73169\">\n                      那么 Vue.js\n                      里有内置的双向绑定的实现吗？答案是有的，v-model\n                      指令就是一种双向绑定的实现，我们在平时项目开发中，也经常会使用\n                      v-model。\n                    </p>\n                    <p data-nodeid=\"73170\">\n                      v-model\n                      也不是可以作用到任意标签，它只能在一些特定的表单标签如\n                      input、select、textarea 和自定义组件中使用。\n                    </p>\n                    <p data-nodeid=\"73171\">\n                      那么 v-model\n                      的实现原理到底是怎样的呢？接下来，我们从普通表单元素和自定义组件两个方面来分别分析它的实现。\n                    </p>\n                    <h3 data-nodeid=\"73172\">在普通表单元素上作用 v-model</h3>\n                    <p data-nodeid=\"73173\">\n                      首先，我们来看在普通表单元素上作用\n                      v-model，还是先举一个基本的示例：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"73249\"\n                        >&lt;input v-model=\"searchText\"/&gt;</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"73174\">\n                      我们先看这个模板编译后生成的 render 函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { vModelText as _vModelText, createVNode as _createVNode, withDirectives as _withDirectives, openBlock as _openBlock, createBlock as _createBlock } from <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export function <span class=\"hljs-title\">render</span><span class=\"hljs-params\">(_ctx, _cache, $props, $setup, $data, $options)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> _withDirectives((_openBlock(), _createBlock(<span class=\"hljs-string\">\"input\"</span>, {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"onUpdate:modelValue\"</span>: $event =&gt; (_ctx.searchText = $event)\n</div></li><li><div class=\"code-word\">  }, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* PROPS */</span>, [<span class=\"hljs-string\">\"onUpdate:modelValue\"</span>])), [\n</div></li><li><div class=\"code-word\">    [_vModelText, _ctx.searchText]\n</div></li><li><div class=\"code-word\">  ])\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"75345\">\n                      可以看到，作用在 input 标签的 v-model\n                      指令在编译后，除了使用 withDirectives 给这个 vnode 添加了\n                      vModelText 指令对象外，还额外传递了一个名为\n                      onUpdate:modelValue 的\n                      prop，它的值是一个函数，这个函数就是用来更新变量\n                      searchText。\n                    </p>\n                    <p data-nodeid=\"75346\">我们来看 vModelText 的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> vModelText = {\n</div></li><li><div class=\"code-word\">  created(el, { value, modifiers: { lazy, trim, number } }, vnode) {\n</div></li><li><div class=\"code-word\">    el.value = value == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-string\">''</span> : value\n</div></li><li><div class=\"code-word\">    el._assign = getModelAssigner(vnode)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> castToNumber = number || el.type === <span class=\"hljs-string\">'number'</span>\n</div></li><li><div class=\"code-word\">    addEventListener(el, lazy ? <span class=\"hljs-string\">'change'</span> : <span class=\"hljs-string\">'input'</span>, e =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (e.target.composing)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">      let domValue = el.<span class=\"hljs-function\">value\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(trim)</span> {\n</div></li><li><div class=\"code-word\">        domValue = domValue.trim()\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (castToNumber) {\n</div></li><li><div class=\"code-word\">        domValue = toNumber(domValue)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      el._assign(domValue)\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (trim) {\n</div></li><li><div class=\"code-word\">      addEventListener(el, <span class=\"hljs-string\">'change'</span>, () =&gt; {\n</div></li><li><div class=\"code-word\">        el.value = el.value.trim()\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!lazy) {\n</div></li><li><div class=\"code-word\">      addEventListener(el, <span class=\"hljs-string\">'compositionstart'</span>, onCompositionStart)\n</div></li><li><div class=\"code-word\">      addEventListener(el, <span class=\"hljs-string\">'compositionend'</span>, onCompositionEnd)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  beforeUpdate(el, { value, modifiers: { trim, number } }, vnode) {\n</div></li><li><div class=\"code-word\">    el._assign = getModelAssigner(vnode)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (document.activeElement === el) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (trim &amp;&amp; el.value.trim() === value) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> ((number || el.type === <span class=\"hljs-string\">'number'</span>) &amp;&amp; toNumber(el.value) === value) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> newValue = value == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-string\">''</span> : <span class=\"hljs-function\">value\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(el.value !== newValue)</span> {\n</div></li><li><div class=\"code-word\">      el.value = newValue\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> getModelAssigner = (vnode) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> fn = vnode.props[<span class=\"hljs-string\">'onUpdate:modelValue'</span>]\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> isArray(fn) ? value =&gt; invokeArrayFns(fn, value) : fn\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">onCompositionStart</span><span class=\"hljs-params\">(e)</span> </span>{\n</div></li><li><div class=\"code-word\">  e.target.composing = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">onCompositionEnd</span><span class=\"hljs-params\">(e)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> target = e.<span class=\"hljs-function\">target\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(target.composing)</span> {\n</div></li><li><div class=\"code-word\">    target.composing = <span class=\"hljs-function\"><span class=\"hljs-keyword\">false</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">trigger</span><span class=\"hljs-params\">(target, <span class=\"hljs-string\">'input'</span>)</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"75803\">\n                      那么接下来，我们就来拆解这个指令的实现。首先，这个指令实现了两个钩子函数，created\n                      和 beforeUpdate。\n                    </p>\n                    <p data-nodeid=\"75804\">\n                      我们先来看 created\n                      部分的实现，根据上节课的分析，我们知道第一个参数 el\n                      是节点的 DOM 对象，第二个参数是 binding 对象，第三个参数\n                      vnode 是节点的 vnode 对象。\n                    </p>\n                    <p data-nodeid=\"75805\">\n                      created 函数首先把 v-model 绑定的值 value 赋值给\n                      el.value，这个就是数据到 DOM 的单向流动；接着通过\n                      getModelAssigner 方法获取 props 中的 onUpdate:modelValue\n                      属性对应的函数，赋值给 el._assign 属性；最后通过\n                      addEventListener 来监听 input 标签的事件，它会根据是否配置\n                      lazy 这个修饰符来决定监听 input 还是 change 事件。\n                    </p>\n                    <p data-nodeid=\"75806\">\n                      我们接着看这个事件监听函数，当用户手动输入一些数据触发事件的时候，会执行函数，并通过\n                      el.value 获取 input 标签新的值，然后调用 el._assign\n                      方法更新数据，这就是 DOM 到数据的流动。\n                    </p>\n                    <p data-nodeid=\"75807\">\n                      至此，我们就实现了数据的双向绑定，就是这么简单。接着我们来看\n                      input v-model 支持的几个修饰符都分别代表什么含义。\n                    </p>\n                    <h4 data-nodeid=\"75808\">lazy 修饰符</h4>\n                    <p data-nodeid=\"75809\">\n                      如果配置了 lazy 修饰符，那么监听的是 input 的 change\n                      事件，它不会在input输入框实时输入的时候触发，而会在 input\n                      元素值改变且失去焦点的时候触发。\n                    </p>\n                    <p data-nodeid=\"75810\">\n                      如果不配置 lazy，监听的是 input 的 input\n                      事件，它会在用户实时输入的时候触发。此外，还会多监听\n                      compositionstart 和 compositionend 事件。\n                    </p>\n                    <p data-nodeid=\"75811\">\n                      当用户在使用一些中文输入法的时候，会触发 compositionstart\n                      事件，这个时候设置 e.target.composing 为 true，这样虽然\n                      input 事件触发了，但是 input 事件的回调函数里判断了\n                      e.target.composing 的值，如果为 true 则直接返回，不会把\n                      DOM 值赋值给数据。\n                    </p>\n                    <p data-nodeid=\"75812\">\n                      然后当用户从输入法中确定选中了一些数据完成输入后，会触发\n                      compositionend 事件，这个时候判断 e.target.composing 为\n                      true 的话则把它设置为 false，然后再手动触发元素的 input\n                      事件，完成数据的赋值。\n                    </p>\n                    <h4 data-nodeid=\"75813\">trim 修饰符</h4>\n                    <p data-nodeid=\"75814\">\n                      如果配置了 trim 修饰符，那么会在 input 或者 change\n                      事件的回调函数中，在获取 DOM 的值后，手动调用 trim\n                      方法去除首尾空格。另外，还会额外监听 change 事件执行\n                      el.value.trim() 把 DOM 的值的首尾空格去除。\n                    </p>\n                    <h4 data-nodeid=\"75815\">number 修饰符</h4>\n                    <p data-nodeid=\"75816\">\n                      如果配置了 number 修饰符，或者 input 的 type 是\n                      number，就会把 DOM 的值转成 number 类型后再赋值给数据。\n                    </p>\n                    <p data-nodeid=\"75817\">\n                      接下来我们再来看一下 beforeUpdate\n                      钩子函数的实现，非常简单，主要就是在组件更新前判断如果数据的值和\n                      DOM 的值不同，则把数据更新到 DOM 上。\n                    </p>\n                    <p data-nodeid=\"75818\">\n                      前面我们的分析的是文本类型的\n                      input，如果我们对示例稍加修改：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&lt;input type=<span class=\"hljs-string\">\"checkbox\"</span> v-model=<span class=\"hljs-string\">\"searchText\"</span>/&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"76256\">\n                      你可以看到，编译的结果不同，调用的指令也不一样了，我希望你可以举一反三，去自学其他类型的表单元素的\n                      v-model 实现。\n                    </p>\n                    <h3 data-nodeid=\"76257\">在自定义组件上作用 v-model</h3>\n                    <p data-nodeid=\"76258\">\n                      接下来，我们来分析自定义组件上作用 v-model，看看它与表单的\n                      v-model 有哪些不同。还是通过一个示例说明：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">app.component(<span class=\"hljs-string\">'custom-input'</span>, {\n</div></li><li><div class=\"code-word\">  props: [<span class=\"hljs-string\">'modelValue'</span>],\n</div></li><li><div class=\"code-word\">  template: \\`\n</div></li><li><div class=\"code-word\">    &lt;input v-model=<span class=\"hljs-string\">\"value\"</span>&gt;\n</div></li><li><div class=\"code-word\">  \\`,\n</div></li><li><div class=\"code-word\">  computed: {\n</div></li><li><div class=\"code-word\">    value: {\n</div></li><li><div class=\"code-word\">      get() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.modelValue\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">      set(value) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.$emit(<span class=\"hljs-string\">'update:modelValue'</span>, value)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"76672\">\n                      我们先通过 app.component 全局注册了一个 custom-input\n                      自定义组件，内部我们使用了原生的 input 并使用了 v-model\n                      指令实现数据的绑定。\n                    </p>\n                    <p data-nodeid=\"76673\">\n                      注意这里我们不能直接把 modelValue 作为 input 对应的\n                      v-model 数据，因为不能直接对 props\n                      的值修改，因此这里使用计算属性。\n                    </p>\n                    <p data-nodeid=\"76674\">\n                      计算属性 value 对应的 getter 函数是直接取 modelValue 这个\n                      prop 的值，而 setter 函数是派发一个自定义事件\n                      update:modelValue。\n                    </p>\n                    <p data-nodeid=\"76675\">\n                      接下来我们就可以在应用的其他的地方使用这个自定义组件了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&lt;custom-input v-model=<span class=\"hljs-string\">\"searchText\"</span>/&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"77081\">\n                      我们来看一下这个模板编译后生成的 render 函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export function <span class=\"hljs-title\">render</span><span class=\"hljs-params\">(_ctx, _cache, $props, $setup, $data, $options)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_custom_input = _resolveComponent(<span class=\"hljs-string\">\"custom-input\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(_component_custom_input, {\n</div></li><li><div class=\"code-word\">    modelValue: _ctx.searchText,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"onUpdate:modelValue\"</span>: $event =&gt; (_ctx.searchText = $event)\n</div></li><li><div class=\"code-word\">  }, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* PROPS */</span>, [<span class=\"hljs-string\">\"modelValue\"</span>, <span class=\"hljs-string\">\"onUpdate:modelValue\"</span>]))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"77481\">\n                      可以看到，编译的结果似乎和指令没有什么关系，并没有调用\n                      withDirective 函数。\n                    </p>\n                    <p data-nodeid=\"77482\">我们对示例稍做修改：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&lt;custom-input :modelValue=<span class=\"hljs-string\">\"searchText\"</span> <span class=\"hljs-meta\">@update</span>:modelValue=<span class=\"hljs-string\">\"$event=&gt;{searchText = $event}\"</span>/&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"77878\">\n                      然后我们再来看它编译后生成的 render 函数：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export function <span class=\"hljs-title\">render</span><span class=\"hljs-params\">(_ctx, _cache, $props, $setup, $data, $options)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_custom_input = _resolveComponent(<span class=\"hljs-string\">\"custom-input\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(_component_custom_input, {\n</div></li><li><div class=\"code-word\">    modelValue: _ctx.searchText,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"onUpdate:modelValue\"</span>: $event=&gt;{_ctx.searchText = $event}\n</div></li><li><div class=\"code-word\">  }, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* PROPS */</span>, [<span class=\"hljs-string\">\"modelValue\"</span>, <span class=\"hljs-string\">\"onUpdate:modelValue\"</span>]))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"79354\">\n                      我们发现，它和前面示例的编译结果是一模一样的，因为 v-model\n                      作用于组件上本质就是一个语法糖，就是往组件传入了一个名为\n                      modelValue 的 prop，它的值是往组件传入的数据\n                      data，另外它还在组件上监听了一个名为 update:modelValue\n                      的自定义事件，事件的回调函数接受一个参数，执行的时候会把参数\n                      $event 赋值给数据 data。\n                    </p>\n                    <p data-nodeid=\"79355\">\n                      正因为这个原理，所以我们想要实现自定义组件的\n                      v-model，首先需要定义一个名为 modelValue 的\n                      prop，然后在数据改变的时候，派发一个名为 update:modelValue\n                      的事件。\n                    </p>\n                    <p data-nodeid=\"79356\">\n                      Vue.js 3.0 关于组件 v-model 的实现和 Vue.js 2.x\n                      实现是很类似的，在 Vue.js 2.x 中，想要实现自定义组件的\n                      v-model，首先需要定义一个名为 value 的\n                      prop，然后在数据改变的时候，派发一个名为 input 的事件。\n                    </p>\n                    <p data-nodeid=\"79357\">\n                      总结下来，作用在组件上的 v-model\n                      实际上就是一种打通数据双向通讯的语法糖，即外部可以往组件上传递数据，组件内部经过某些操作行为修改了数据，然后把更改后的数据再回传到外部。\n                    </p>\n                    <p data-nodeid=\"79358\">\n                      v-model 在自定义组件的设计中非常常用，你可以看到 Element\n                      UI 几乎所有的表单组件都是通过 v-model\n                      的方式完成了数据的交换。\n                    </p>\n                    <p data-nodeid=\"79359\">\n                      一旦我们使用了 v-model 的方式，我们必须在组件中申明一个\n                      modelValue 的 prop，如果不想用这个\n                      prop，想换个名字，当然也是可以的。\n                    </p>\n                    <p data-nodeid=\"79360\">\n                      Vue.js 3.0 给组件的 v-model 提供了参数的方式，允许我们指定\n                      prop 的名称：<code data-backticks=\"1\" data-nodeid=\"79389\"\n                        >&lt;custom-input v-model:text=\"searchText\"/&gt;</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"79361\">\n                      然后我们再来看编译后的 render 函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export function <span class=\"hljs-title\">render</span><span class=\"hljs-params\">(_ctx, _cache, $props, $setup, $data, $options)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_custom_input = _resolveComponent(<span class=\"hljs-string\">\"custom-input\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(_component_custom_input, {\n</div></li><li><div class=\"code-word\">    text: _ctx.searchText,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"onUpdate:text\"</span>: $event =&gt; (_ctx.searchText = $event)\n</div></li><li><div class=\"code-word\">  }, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* PROPS */</span>, [<span class=\"hljs-string\">\"text\"</span>, <span class=\"hljs-string\">\"onUpdate:text\"</span>]))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"79735\">\n                      可以看到，我们往组件传递的 prop 变成了\n                      text，监听的自定义事件也变成了 @update:text 了。\n                    </p>\n                    <p data-nodeid=\"79736\">\n                      显然，如果 v-model\n                      支持了参数，那么我们就可以在一个组件上使用多个 v-model\n                      了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&lt;ChildComponent v-model:title=<span class=\"hljs-string\">\"pageTitle\"</span> v-model:content=<span class=\"hljs-string\">\"pageContent\"</span> /&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"80097\">\n                      至此，我们就掌握了组件 v-model 的实现原理，它\n                    </p>\n                    <p data-nodeid=\"80098\">\n                      的本质就是语法糖：<strong data-nodeid=\"80123\"\n                        >通过 prop 向组件传递数据</strong\n                      >，<strong data-nodeid=\"80124\"\n                        >并监听自定义事件接受组件反传的数据并更新</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"80099\">\n                      prop\n                      的实现原理我们之前分析过，但自定义事件是如何派发的呢？因为从模板的编译结果看，除了\n                      modelValue 这个 prop，还多了一个 onUpdate:modelValue 的\n                      prop，它和自定义事件有什么关系？接下来我们就来分析这部分的实现。\n                    </p>\n                    <h3 data-nodeid=\"80100\">自定义事件派发</h3>\n                    <p data-nodeid=\"80101\">\n                      从前面的示例我们知道，子组件会执行<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"80128\"\n                        >this.$emit('update:modelValue',value)</code\n                      >方法派发自定义事件，$emit 内部执行了 emit\n                      方法，我们来看一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">emit</span><span class=\"hljs-params\">(instance, event, ...args)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> props = instance.vnode.props || EMPTY_OBJ\n</div></li><li><div class=\"code-word\">  let handlerName = \\`on${capitalize(event)}\\`\n</div></li><li><div class=\"code-word\">  let handler = props[handlerName]\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!handler &amp;&amp; event.startsWith(<span class=\"hljs-string\">'update:'</span>)) {\n</div></li><li><div class=\"code-word\">    handlerName = \\`on${capitalize(hyphenate(event))}\\`\n</div></li><li><div class=\"code-word\">    handler = props[handlerName]\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (handler) {\n</div></li><li><div class=\"code-word\">    callWithAsyncErrorHandling(handler, instance, <span class=\"hljs-number\">6</span> <span class=\"hljs-comment\">/* COMPONENT_EVENT_HANDLER */</span>, args)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"80454\">\n                      emit 方法支持 3 个参数，第一个参数 instance\n                      是组件的实例，也就是执行 $emit 方法的组件实例，第二个参数\n                      event 是自定义事件名称，第三个参数 args 是事件传递的参数。\n                    </p>\n                    <p data-nodeid=\"80455\">\n                      emit 方法首先获取事件名称，把传递的 event\n                      首字母大写，然后前面加上 on 字符串，比如我们前面派发的\n                      update:modelValue 事件名称，处理后就变成了\n                      onUpdate:modelValue。\n                    </p>\n                    <p data-nodeid=\"80456\">\n                      接下来，通过这个事件名称，从 props 中根据事件名找到对应的\n                      prop 值，作为事件的回调函数。\n                    </p>\n                    <p data-nodeid=\"80457\">\n                      如果找不到对应的 prop 并且 event 是以 update:\n                      开头的，则尝试把 event 名先转成连字符形式然后再处理。\n                    </p>\n                    <p data-nodeid=\"80458\">\n                      找到回调函数 handler 后，再去执行这个回调函数，并且把参数\n                      args 传入。针对 v-model\n                      场景，这个回调函数就是拿到子组件回传的数据然后修改父元素传入到子组件的\n                      prop 数据，这样就达到了数据双向通讯的目的。\n                    </p>\n                    <h3 data-nodeid=\"80459\">总结</h3>\n                    <p data-nodeid=\"80460\">\n                      好的，到这里我们这一节的学习也要结束啦，通过这节课的学习，你应该要了解\n                      v-model\n                      在普通表单元素上以及在自定义指令上的实现原理分别是怎样的，以及了解自定义事件派发的实现原理。\n                    </p>\n                    <p data-nodeid=\"80461\">\n                      最后，给你留一道思考题目，如果自定义组件不用\n                      v-model，也不用自定义事件监听的方式，如何实现和 v-model\n                      一样的效果，怎么做呢？欢迎你在留言区与我分享。\n                    </p>\n                    <blockquote data-nodeid=\"80462\">\n                      <p data-nodeid=\"80463\">\n                        本节课的相关代码在源代码中的位置如下：<br />\n                        packages/runtime-dom/src/directives/vModel.ts\n                      </p>\n                    </blockquote>\n            "}