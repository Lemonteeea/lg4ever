{"title":"03 | 继承实现：探究 JS 常见的 6 种继承方式","context":"\n                    <p data-nodeid=\"725\" class=\"\">\n                      这一讲我要带你一起探究 JavaScript 的继承方式。\n                    </p>\n                    <p data-nodeid=\"726\">\n                      我先来简单介绍一下继承的概念。继承是面向对象的，使用这种方式我们可以更好地复用以前的开发代码，缩短开发的周期、提升开发效率。\n                    </p>\n                    <p data-nodeid=\"727\">\n                      继承在各种编程语言中都充当着至关重要的角色，特别是在\n                      JavaScript\n                      中，它天生的灵活性，使应用场景更加丰富。JavaScript\n                      的继承也经常会在用在前端工程基础库的底层搭建上面，在整个\n                      JavaScript 的学习中尤为重要。\n                    </p>\n                    <p data-nodeid=\"728\">\n                      因此，我希望这一讲，能让你对 JavaScript\n                      的继承有更深一步的理解，更加得心应手地运用在业务代码中，并可以轻松掌握和\n                      JavaScript 继承相关的面试题目。\n                    </p>\n                    <p data-nodeid=\"729\">\n                      那么，为了方便你更好地理解本讲的内容，在课程开始前请你先思考几个问题：\n                    </p>\n                    <ol data-nodeid=\"730\">\n                      <li data-nodeid=\"731\">\n                        <p data-nodeid=\"732\">\n                          JS 的继承到底有多少种实现方式呢？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"733\">\n                        <p data-nodeid=\"734\">\n                          ES6 的 extends 关键字是用哪种继承方式实现的呢？\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"735\">\n                      是不是这几个问题并不是那么容易地回答出来？那么我们带着思考，开始学习。\n                    </p>\n                    <h3 data-nodeid=\"736\">继承概念的探究</h3>\n                    <p data-nodeid=\"737\">\n                      说到继承的概念，首先要说一个经典的例子。\n                    </p>\n                    <p data-nodeid=\"738\">\n                      先定义一个类（Class）叫汽车，汽车的属性包括颜色、轮胎、品牌、速度、排气量等，由汽车这个类可以派生出“轿车”和“货车”两个类，那么可以在汽车的基础属性上，为轿车添加一个后备厢、给货车添加一个大货箱。这样轿车和货车就是不一样的，但是二者都属于汽车这个类，这样从这个例子中就能详细说明汽车、轿车以及卡车之间的继承关系。\n                    </p>\n                    <p data-nodeid=\"739\">\n                      继承可以使得子类别具有父类的各种方法和属性，比如上面的例子中“轿车”\n                      和 “货车”\n                      分别继承了汽车的属性，而不需要再次在“轿车”中定义汽车已经有的属性。在“轿车”继承“汽车”的同时，也可以重新定义汽车的某些属性，并重写或覆盖某些属性和方法，使其获得与“汽车”这个父类不同的属性和方法。\n                    </p>\n                    <p data-nodeid=\"740\">\n                      继承的基本概念就初步介绍这些，下面我们就来看看 JavaScript\n                      中都有哪些实现继承的方法。\n                    </p>\n                    <h3 data-nodeid=\"741\">JS 实现继承的几种方式</h3>\n                    <h4 data-nodeid=\"742\">第一种：原型链继承</h4>\n                    <p data-nodeid=\"743\">\n                      原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例，三者之间存在着一定的关系，即每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数的指针，而实例则包含一个原型对象的指针。\n                    </p>\n                    <p data-nodeid=\"744\">下面我们结合代码来了解一下。</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent1</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.name = <span class=\"hljs-string\">'parent1'</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.play = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child1</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.type = <span class=\"hljs-string\">'child2'</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  Child1.prototype = <span class=\"hljs-keyword\">new</span> Parent1();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> Child1());\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"746\">\n                      上面的代码看似没有问题，虽然父类的方法和属性都能够访问，但其实有一个潜在的问题，我再举个例子来说明这个问题。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> s1 = <span class=\"hljs-keyword\">new</span> Child1();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> s2 = <span class=\"hljs-keyword\">new</span> Child2();\n</div></li><li><div class=\"code-word\">  s1.play.push(<span class=\"hljs-number\">4</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(s1.play, s2.play);\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"748\">\n                      这段代码在控制台执行之后，可以看到结果如下：\n                    </p>\n                    <p data-nodeid=\"749\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/05/2A/CgpVE1_9B-GAE-pIAAAYEv_K_84787.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"834\"\n                      />\n                    </p>\n                    <p data-nodeid=\"750\">\n                      明明我只改变了 s1 的 play 属性，为什么 s2\n                      也跟着变了呢？原因很简单，因为两个实例使用的是同一个原型对象。它们的内存空间是共享的，当一个发生变化的时候，另外一个也随之进行了变化，这就是使用原型链继承方式的一个缺点。\n                    </p>\n                    <p data-nodeid=\"751\">\n                      那么要解决这个问题的话，我们就得再看看其他的继承方式，下面我们看看能解决原型属性共享问题的第二种方法。\n                    </p>\n                    <h4 data-nodeid=\"752\">第二种：构造函数继承（借助 call）</h4>\n                    <p data-nodeid=\"753\">直接通过代码来了解，如下所示。</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent1</span>(<span class=\"hljs-params\"></span>)</span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.name = <span class=\"hljs-string\">'parent1'</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  Parent1.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child1</span>(<span class=\"hljs-params\"></span>)</span>{\n</div></li><li><div class=\"code-word\">    Parent1.call(<span class=\"hljs-keyword\">this</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.type = <span class=\"hljs-string\">'child1'</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> child = <span class=\"hljs-keyword\">new</span> Child1();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(child);  <span class=\"hljs-comment\">// 没问题</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(child.getName());  <span class=\"hljs-comment\">// 会报错</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"755\">\n                      执行上面的这段代码，可以得到这样的结果。\n                    </p>\n                    <p data-nodeid=\"756\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/05/2A/CgpVE1_9B-qAHGGjAABBe0l-7oE835.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"842\"\n                      />\n                    </p>\n                    <p data-nodeid=\"757\">\n                      可以看到最后打印的 child 在控制台显示，除了 Child1 的属性\n                      type 之外，也继承了 Parent1 的属性\n                      name。这样写的时候子类虽然能够拿到父类的属性值，解决了第一种继承方式的弊端，但问题是，父类原型对象中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法。这种情况的控制台执行结果如下图所示。\n                    </p>\n                    <p data-nodeid=\"758\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/42/Ciqc1F_9B_KACrgnAABDSFXfnx0666.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"846\"\n                      />\n                    </p>\n                    <p data-nodeid=\"759\">\n                      因此，从上面的结果就可以看到构造函数实现继承的优缺点，它使父类的引用属性不会被共享，优化了第一种继承方式的弊端；但是随之而来的缺点也比较明显——只能继承父类的实例属性和方法，不能继承原型属性或者方法。\n                    </p>\n                    <p data-nodeid=\"760\">\n                      上面的两种继承方式各有优缺点，那么结合二者的优点，于是就产生了下面这种组合的继承方式。\n                    </p>\n                    <h4 data-nodeid=\"761\">第三种：组合继承（前两种组合）</h4>\n                    <p data-nodeid=\"762\">\n                      这种方式结合了前两种继承方式的优缺点，结合起来的继承，代码如下。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent3</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.name = <span class=\"hljs-string\">'parent3'</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.play = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  Parent3.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child3</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 第二次调用 Parent3()</span>\n</div></li><li><div class=\"code-word\">    Parent3.call(<span class=\"hljs-keyword\">this</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.type = <span class=\"hljs-string\">'child3'</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 第一次调用 Parent3()</span>\n</div></li><li><div class=\"code-word\">  Child3.prototype = <span class=\"hljs-keyword\">new</span> Parent3();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 手动挂上构造器，指向自己的构造函数</span>\n</div></li><li><div class=\"code-word\">  Child3.prototype.constructor = Child3;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> s3 = <span class=\"hljs-keyword\">new</span> Child3();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> s4 = <span class=\"hljs-keyword\">new</span> Child3();\n</div></li><li><div class=\"code-word\">  s3.play.push(<span class=\"hljs-number\">4</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(s3.play, s4.play);  <span class=\"hljs-comment\">// 不互相影响</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(s3.getName()); <span class=\"hljs-comment\">// 正常输出'parent3'</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(s4.getName()); <span class=\"hljs-comment\">// 正常输出'parent3'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"764\">\n                      执行上面的代码，可以看到控制台的输出结果，之前方法一和方法二的问题都得以解决。\n                    </p>\n                    <p data-nodeid=\"765\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/42/Ciqc1F_9B_uAHQtBAAAgMta5Vz8933.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"854\"\n                      />\n                    </p>\n                    <p data-nodeid=\"766\">\n                      但是这里又增加了一个新问题：通过注释我们可以看到 Parent3\n                      执行了两次，第一次是改变Child3 的 prototype\n                      的时候，第二次是通过 call 方法调用 Parent3 的时候，那么\n                      Parent3\n                      多构造一次就多进行了一次性能开销，这是我们不愿看到的。\n                    </p>\n                    <p data-nodeid=\"767\">\n                      那么是否有更好的办法解决这个问题呢？请你再往下学习，下面的第六种继承方式可以更好地解决这里的问题。\n                    </p>\n                    <p data-nodeid=\"768\">\n                      上面介绍的更多是围绕着构造函数的方式，那么对于 JavaScript\n                      的普通对象，怎么实现继承呢？\n                    </p>\n                    <h4 data-nodeid=\"769\">第四种：原型式继承</h4>\n                    <p data-nodeid=\"770\">\n                      这里不得不提到的就是 ES5 里面的 Object.create\n                      方法，这个方法接收两个参数：一是用作新对象原型的对象、二是为新对象定义额外属性的对象（可选参数）。\n                    </p>\n                    <p data-nodeid=\"771\">\n                      我们通过一段代码，看看普通对象是怎么实现的继承。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> parent4 = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"parent4\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">friends</span>: [<span class=\"hljs-string\">\"p1\"</span>, <span class=\"hljs-string\">\"p2\"</span>, <span class=\"hljs-string\">\"p3\"</span>],\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">getName</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> person4 = <span class=\"hljs-built_in\">Object</span>.create(parent4);\n</div></li><li><div class=\"code-word\">  person4.name = <span class=\"hljs-string\">\"tom\"</span>;\n</div></li><li><div class=\"code-word\">  person4.friends.push(<span class=\"hljs-string\">\"jerry\"</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> person5 = <span class=\"hljs-built_in\">Object</span>.create(parent4);\n</div></li><li><div class=\"code-word\">  person5.friends.push(<span class=\"hljs-string\">\"lucy\"</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(person4.name);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(person4.name === person4.getName());\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(person5.name);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(person4.friends);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(person5.friends);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"773\">\n                      从上面的代码中可以看到，通过 Object.create\n                      这个方法可以实现普通对象的继承，不仅仅能继承属性，同样也可以继承\n                      getName 的方法，请看这段代码的执行结果。\n                    </p>\n                    <p data-nodeid=\"774\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/4E/CgqCHl_9CASAJMvwAAA_d30-jH8783.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"864\"\n                      />\n                    </p>\n                    <p data-nodeid=\"775\">\n                      第一个结果“tom”，比较容易理解，person4 继承了 parent4 的\n                      name 属性，但是在这个基础上又进行了自定义。\n                    </p>\n                    <p data-nodeid=\"776\">\n                      第二个是继承过来的 getName 方法检查自己的 name\n                      是否和属性里面的值一样，答案是 true。\n                    </p>\n                    <p data-nodeid=\"777\">\n                      第三个结果“parent4”也比较容易理解，person5 继承了 parent4\n                      的 name 属性，没有进行覆盖，因此输出父对象的属性。\n                    </p>\n                    <p data-nodeid=\"778\">\n                      最后两个输出结果是一样的，讲到这里你应该可以联想到 02\n                      讲中浅拷贝的知识点，关于引用数据类型“共享”的问题，其实\n                      Object.create 方法是可以为一些对象实现浅拷贝的。\n                    </p>\n                    <p data-nodeid=\"779\">\n                      那么关于这种继承方式的缺点也很明显，多个实例的引用类型属性指向相同的内存，存在篡改的可能，接下来我们看一下在这个继承基础上进行优化之后的另一种继承方式——寄生式继承。\n                    </p>\n                    <h4 data-nodeid=\"780\">第五种：寄生式继承</h4>\n                    <p data-nodeid=\"781\">\n                      使用原型式继承可以获得一份目标对象的浅拷贝，然后利用这个浅拷贝的能力再进行增强，添加一些方法，这样的继承方式就叫作寄生式继承。\n                    </p>\n                    <p data-nodeid=\"782\">\n                      虽然其优缺点和原型式继承一样，但是对于普通对象的继承方式来说，寄生式继承相比于原型式继承，还是在父类基础上添加了更多的方法。那么我们看一下代码是怎么实现。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">   <span class=\"hljs-keyword\">let</span> parent5 = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"parent5\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">friends</span>: [<span class=\"hljs-string\">\"p1\"</span>, <span class=\"hljs-string\">\"p2\"</span>, <span class=\"hljs-string\">\"p3\"</span>],\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">getName</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">clone</span>(<span class=\"hljs-params\">original</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> clone = <span class=\"hljs-built_in\">Object</span>.create(original);\n</div></li><li><div class=\"code-word\">    clone.getFriends = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.friends;\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> clone;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> person5 = clone(parent5);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(person5.getName());\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(person5.getFriends());\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"784\">\n                      通过上面这段代码，我们可以看到 person5\n                      是通过寄生式继承生成的实例，它不仅仅有 getName\n                      的方法，而且可以看到它最后也拥有了 getFriends\n                      的方法，结果如下图所示。\n                    </p>\n                    <p data-nodeid=\"785\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/4E/CgqCHl_9CA2AT-ozAAAWLoCKBTA043.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"876\"\n                      />\n                    </p>\n                    <p data-nodeid=\"786\">\n                      从最后的输出结果中可以看到，person5 通过 clone\n                      的方法，增加了 getFriends 的方法，从而使 person5\n                      这个普通对象在继承过程中又增加了一个方法，这样的继承方式就是寄生式继承。\n                    </p>\n                    <p data-nodeid=\"787\">\n                      我在上面第三种组合继承方式中提到了一些弊端，即两次调用父类的构造函数造成浪费，下面要介绍的寄生组合继承就可以解决这个问题。\n                    </p>\n                    <h4 data-nodeid=\"788\">第六种：寄生组合式继承</h4>\n                    <p data-nodeid=\"789\">\n                      结合第四种中提及的继承方式，解决普通对象的继承问题的\n                      Object.create\n                      方法，我们在前面这几种继承方式的优缺点基础上进行改造，得出了寄生组合式的继承方式，这也是所有继承方式里面相对最优的继承方式，代码如下。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">clone</span> (<span class=\"hljs-params\">parent, child</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span>\n</div></li><li><div class=\"code-word\">    child.prototype = <span class=\"hljs-built_in\">Object</span>.create(parent.prototype);\n</div></li><li><div class=\"code-word\">    child.prototype.constructor = child;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent6</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.name = <span class=\"hljs-string\">'parent6'</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.play = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">   Parent6.prototype.getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.name;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child6</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    Parent6.call(<span class=\"hljs-keyword\">this</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.friends = <span class=\"hljs-string\">'child5'</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  clone(Parent6, Child6);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  Child6.prototype.getFriends = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.friends;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> person6 = <span class=\"hljs-keyword\">new</span> Child6();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(person6);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(person6.getName());\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(person6.getFriends());\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"791\">\n                      通过这段代码可以看出来，这种寄生组合式继承方式，基本可以解决前几种继承方式的缺点，较好地实现了继承想要的结果，同时也减少了构造次数，减少了性能的开销，我们来看一下上面这一段代码的执行结果。\n                    </p>\n                    <p data-nodeid=\"792\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/4E/CgqCHl_9CBWATQbEAABszTJIdBQ249.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"884\"\n                      />\n                    </p>\n                    <p data-nodeid=\"793\">\n                      可以看到 person6\n                      打印出来的结果，属性都得到了继承，方法也没问题，可以输出预期的结果。\n                    </p>\n                    <p data-nodeid=\"794\">\n                      整体看下来，这六种继承方式中，寄生组合式继承是这六种里面最优的继承方式。另外，ES6\n                      还提供了继承的关键字 extends，我们再看下 extends\n                      的底层实现继承的逻辑。\n                    </p>\n                    <h3 data-nodeid=\"795\">ES6 的 extends 关键字实现逻辑</h3>\n                    <p data-nodeid=\"796\">\n                      我们可以利用 ES6 里的 extends\n                      的语法糖，使用关键词很容易直接实现 JavaScript\n                      的继承，但是如果想深入了解 extends\n                      语法糖是怎么实现的，就得深入研究 extends 的底层逻辑。\n                    </p>\n                    <p data-nodeid=\"797\">\n                      我们先看下用利用 extends 如何直接实现继承，代码如下。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>(name) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.name = name\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 原型方法</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 即 Person.prototype.getName = function() { }</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 下面可以简写为 getName() {...}</span>\n</div></li><li><div class=\"code-word\">  getName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Person:'</span>, <span class=\"hljs-keyword\">this</span>.name)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Gamer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Person</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>(name, age) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">super</span>(name)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.age = age\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> asuna = <span class=\"hljs-keyword\">new</span> Gamer(<span class=\"hljs-string\">'Asuna'</span>, <span class=\"hljs-number\">20</span>)\n</div></li><li><div class=\"code-word\">asuna.getName() <span class=\"hljs-comment\">// 成功访问到父类的方法</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"799\">\n                      因为浏览器的兼容性问题，如果遇到不支持 ES6\n                      的浏览器，那么就得利用 babel 这个编译工具，将 ES6\n                      的代码编译成 ES5，让一些不支持新语法的浏览器也能运行。\n                    </p>\n                    <p data-nodeid=\"800\">\n                      那么最后 extends\n                      编译成了什么样子呢？我们看一下转译之后的代码片段。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_possibleConstructorReturn</span> (<span class=\"hljs-params\">self, call</span>) </span>{ \n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> call &amp;&amp; (<span class=\"hljs-keyword\">typeof</span> call === <span class=\"hljs-string\">'object'</span> || <span class=\"hljs-keyword\">typeof</span> call === <span class=\"hljs-string\">'function'</span>) ? call : self; \n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_inherits</span> (<span class=\"hljs-params\">subClass, superClass</span>) </span>{ \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 这里可以看到</span>\n</div></li><li><div class=\"code-word\">\tsubClass.prototype = <span class=\"hljs-built_in\">Object</span>.create(superClass &amp;&amp; superClass.prototype, { \n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-attr\">constructor</span>: { \n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-attr\">value</span>: subClass, \n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">false</span>, \n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">true</span>, \n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span> \n</div></li><li><div class=\"code-word\">\t\t} \n</div></li><li><div class=\"code-word\">\t}); \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> (superClass) <span class=\"hljs-built_in\">Object</span>.setPrototypeOf ? <span class=\"hljs-built_in\">Object</span>.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; \n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> Parent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 验证是否是 Parent 构造出来的 this</span>\n</div></li><li><div class=\"code-word\">\t_classCallCheck(<span class=\"hljs-keyword\">this</span>, Parent);\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> Child = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_Parent</span>) </span>{\n</div></li><li><div class=\"code-word\">\t_inherits(Child, _Parent);\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">\t\t_classCallCheck(<span class=\"hljs-keyword\">this</span>, Child);\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> _possibleConstructorReturn(<span class=\"hljs-keyword\">this</span>, (Child.__proto__ || <span class=\"hljs-built_in\">Object</span>.getPrototypeOf(Child)).apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>));\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> Child;\n</div></li><li><div class=\"code-word\">}(Parent));\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"802\">\n                      从上面编译完成的源码中可以看到，它采用的也是寄生组合继承方式，因此也证明了这种方式是较优的解决继承的方式。\n                    </p>\n                    <p data-nodeid=\"803\">\n                      到这里，JavaScript\n                      中实现继承的方式也基本讲解差不多了，本课时也将告一段落。\n                    </p>\n                    <h3 data-nodeid=\"804\">总结</h3>\n                    <p data-nodeid=\"805\">\n                      下面我将 JavaScript\n                      的继承方式做了个总结的脑图，方便你更清晰地回顾本课时所讲的内容。\n                    </p>\n                    <p data-nodeid=\"806\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/4A/Ciqc1F_9SVuAfHXWAAEfwyAfiC0647.png\"\n                        alt=\"图片7.png\"\n                        data-nodeid=\"898\"\n                      />\n                    </p>\n                    <p data-nodeid=\"807\">\n                      通过 Object.create\n                      来划分不同的继承方式，最后的寄生式组合继承方式是通过组合继承改造之后的最优继承方式，而\n                      extends 的语法糖和寄生组合继承的方式基本类似。\n                    </p>\n                    <p data-nodeid=\"808\">\n                      综上，我们可以看到不同的继承方式有不同的优缺点，我们需要深入了解各种方式的优缺点，这样才能在日常开发中，选择最适合当前场景的继承方式。\n                    </p>\n                    <p data-nodeid=\"809\">\n                      在日常的前端开发工作中，开发者往往会忽视对继承相关的系统性学习，但因为继承的方法比较多，每个实现的方法细节也比较零散，很多开发者很难有一个系统的、整体的认识，造成效率低下，以及代码能力难以进一步提升等问题。\n                    </p>\n                    <p data-nodeid=\"810\">\n                      因此我希望通过这一讲的学习，你能很好地掌握 JavaScript\n                      的继承方式，以便在开发中规避我所说的这些问题。\n                    </p>\n                    <p data-nodeid=\"811\">\n                      在后续的课时中，我将继续带领你尝试一些和继承相关的 API\n                      方法的实现，比如 call、apply\n                      等。同时希望你多动手练习以熟练上面的代码，也欢迎你在下方留言讨论自己在学习过程中遇到的困惑，以及学习感悟等，让我们共同进步。\n                    </p>\n                    <p data-nodeid=\"812\" class=\"\">我们下一讲再见~</p>\n            "}