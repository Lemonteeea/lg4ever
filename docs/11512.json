{"title":"10 | 系统稳定：如何监控和保护进程安全？","context":"\n                    <p data-nodeid=\"184402\" class=\"\">\n                      在开始本讲之前，我们先了解一个特点，<strong\n                        data-nodeid=\"184547\"\n                        >在前端因为某些用户的特殊性，导致的逻辑 Bug\n                        会造成这个用户服务异常，但是在服务端如果没有做好异常保护，因为某个用户的特殊操作可能会导致整个进程退出，从而无法提供服务</strong\n                      >，因此如何做好监控和进程安全保护就显得尤为重要。\n                    </p>\n                    <p data-nodeid=\"184403\">\n                      本讲我将介绍在 Node.js\n                      代码层面应该如何降低异常出现的概率，其次会介绍当出现现网问题时，如何及时发现并通知相应的开发去处理。\n                    </p>\n                    <h3 data-nodeid=\"184404\">Node.js 进程安全</h3>\n                    <p data-nodeid=\"184405\">\n                      这里我们主要讲解为什么 Node.js\n                      的进程安全和健康状况很重要。\n                    </p>\n                    <h4 data-nodeid=\"184406\">进程安全很重要</h4>\n                    <p data-nodeid=\"184407\">\n                      这里举一个例子，想象一下我们家庭电网的安全保护策略，一般情况下家庭都会有<strong\n                        data-nodeid=\"184557\"\n                        >短路跳闸设施</strong\n                      >，其次插座或者电器也设有短路保护功能。\n                    </p>\n                    <p data-nodeid=\"184408\">\n                      如果电器没有安全保护措施，就会直接导致家庭电网跳闸整体不可用，但是由于有了跳闸保护，至少我们可以重启，从而服务正常，但是这期间一家人由于一个人的原因，导致了比如说弟弟无法继续看书了、爸爸无法继续洗热水澡了、妈妈无法继续做饭了。\n                    </p>\n                    <p data-nodeid=\"184409\">\n                      再说 Node.js，<strong data-nodeid=\"184564\"\n                        >由于一个用户的异常访问或者数据异常，加上没有做好异常处理和安全保护，直接导致了整个\n                        Node.js\n                        服务重启了，从而中断了所有人的请求，用户体验非常差</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"184410\">\n                      接下来我们再往上升级，如果家庭电网没有跳闸短路保护措施，将直接导致上一层电网异常重启，从而影响到其他居民，这样影响面又更大了，从而导致的问题也更严重了。\n                    </p>\n                    <p data-nodeid=\"184411\">\n                      这就是和 Node.js 一样的原理，因此我们<strong\n                        data-nodeid=\"184571\"\n                        >要尽可能地在最小处进行安全保护</strong\n                      >，也就是我们所说的在每个插电设备上尽量装有短路保护设备一样，这样就最小地影响用户，比如这个用户的异常数据只影响了该用户，而不会因为这个用户影响到整个服务的用户。\n                    </p>\n                    <h4 data-nodeid=\"184412\">哪些场景会导致 Node.js 异常？</h4>\n                    <ul data-nodeid=\"184413\">\n                      <li data-nodeid=\"184414\">\n                        <p data-nodeid=\"184415\">\n                          由于 Node.js 使用的是 JavaScript，而<strong\n                            data-nodeid=\"184582\"\n                            >JavaScript 是一个弱类型语言</strong\n                          >，因此<strong data-nodeid=\"184583\"\n                            >在现网经常会引发一些由代码逻辑的异常导致的进程异常退出</strong\n                          >。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184416\">\n                        <p data-nodeid=\"184417\">\n                          其次在 Node.js\n                          中也经常会因为内存的使用不当，导致内存泄漏，当在 64\n                          位系统中达到 1.4 G（32 位系统 0.7 G）时，Node.js\n                          就会异常崩溃。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184418\">\n                        <p data-nodeid=\"184419\">\n                          再而由于<strong data-nodeid=\"184590\"\n                            >Node.js 的 I/O 较多也较为频繁</strong\n                          >，当启用较多 I/O\n                          句柄，但是没有及时释放，同样会引发进程问题。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"184420\">\n                      这些都会导致服务器异常退出，就没办法正常提供服务了，从而引发现网问题。\n                    </p>\n                    <p data-nodeid=\"184421\">\n                      接下来我们就从<strong data-nodeid=\"184601\"\n                        >代码逻辑</strong\n                      >和<strong data-nodeid=\"184602\">服务器异常</strong\n                      >两个方面来介绍哪些场景会导致这些问题，并且我们应该如何去杜绝这类问题，其次还将演示一个搭建\n                      Node.js 性能告警平台，来解决告警通知机制。\n                    </p>\n                    <h3 data-nodeid=\"184422\">代码逻辑异常汇总</h3>\n                    <p data-nodeid=\"184423\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/2D/97/Cgp9HWBmwJGAJi8vAAFeHpxgYKQ954.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"184606\"\n                      />\n                    </p>\n                    <div data-nodeid=\"184424\">\n                      <p style=\"text-align: center\">图 1 Node.js 异常问题</p>\n                    </div>\n                    <p data-nodeid=\"184425\">\n                      以上是一个异常问题的部分汇总，前端同学都应该掌握这些基本问题的解决方案，不过我们也来详细地看看每个问题出现的场景。\n                    </p>\n                    <h4 data-nodeid=\"184426\">null.property</h4>\n                    <p data-nodeid=\"184427\">\n                      由于 JavaScript 是一个弱类型语言，因此<strong\n                        data-nodeid=\"184614\"\n                        >如果对数据没有严格的判断就进行逻辑处理的话，会导致代码服务异常退出，从而影响用户体验</strong\n                      >。这里我们统一看 null.property 这种问题。\n                    </p>\n                    <p data-nodeid=\"184428\">\n                      首先第一种就是<strong data-nodeid=\"184620\"\n                        >多层数据嵌套时 (data.str?.str)</strong\n                      >，需要逐层地进行数据判断，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> Controller = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../core/controller'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Error</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Controller</span> </span>{\n</div></li><li><div class=\"code-word\">    obj() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> data = {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">'userinfo'</span> : {\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'nick'</span> : <span class=\"hljs-string\">'node'</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'name'</span> : <span class=\"hljs-string\">'nodejs'</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'age'</span>  : <span class=\"hljs-number\">10</span>\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        };\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> nick = data.userinfo.nick;\n</div></li><li><div class=\"code-word\">        data.userinfo = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 中间经过一系列处理，userinfo 被设置为了 null</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> name = data.userinfo.name; <span class=\"hljs-comment\">// 此时再去访问 userinfo 的信息就无法处理了</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.resApi(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'good'</span>, {nick, name});\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-built_in\">Error</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"184430\">\n                      <strong data-nodeid=\"184625\"\n                        >你可以看到由于 userinfo 是一个 null，使用 null.name\n                        是一定会报错的，而这个报错就会直接导致进程退出</strong\n                      >，在我们源码的框架中由于做了保护，是不会退出，而是给出一个如下的提示信息：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">TypeError: Cannot read property <span class=\"hljs-string\">'name'</span> of <span class=\"hljs-keyword\">null</span>\n</div></li><li><div class=\"code-word\">at Error.obj (/Users/XXX/Desktop/专栏技术/nodejs/nodejs-column/<span class=\"hljs-number\">10</span>/src/controller/error.js:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">34</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"184432\">\n                      data.str?.str 和 data[$str]?[$str] 是类似的，但是<strong\n                        data-nodeid=\"184647\"\n                        >data[$str]?[$str] 这种问题在现网出现会更多</strong\n                      >，由于 $str 是一个变量，因此这个变量都有可能为\n                      null，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">    arrObj() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> data = {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">'userinfo'</span> : {\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'nick'</span> : <span class=\"hljs-string\">'node'</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'name'</span> : <span class=\"hljs-string\">'nodejs'</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'lastName'</span> : <span class=\"hljs-string\">'js'</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'age'</span>  : <span class=\"hljs-number\">10</span>\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">'js-nodejs'</span> : {\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'Chinese'</span> : <span class=\"hljs-string\">'90'</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'English'</span> : <span class=\"hljs-string\">'80'</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'Mathematics'</span> : <span class=\"hljs-string\">'99'</span>\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        };\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> lastName = data.userinfo.lastName;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> name = data.userinfo.name;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> fullName =  <span class=\"hljs-string\">\\`<span class=\"hljs-subst\">${lastName}</span> <span class=\"hljs-subst\">${name}</span>\\`</span>; <span class=\"hljs-comment\">// 获取用户真实姓名，由于数据中使用的是 - 连接，这里使用的是空格，导致了异常 </span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> chineseFraction = data[fullName][<span class=\"hljs-string\">'Chinese'</span>]; <span class=\"hljs-comment\">// 由于 fullName 不存在，所以会导致异常</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.resApi(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'good'</span>, {chineseFraction});\n</div></li><li><div class=\"code-word\">    }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"184434\">\n                      以上问题在实际开发过程中更常见，由于 fullName\n                      是一个变量，而变量往往是不同的值，因此出现问题的概率性更高。\n                    </p>\n                    <p data-nodeid=\"184435\">\n                      避免上面两个问题的方式也非常简单，就是对数据进行一些必要的检查就可以了，下面就是修复后的逻辑：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> nick = data.userinfo.nick;\n</div></li><li><div class=\"code-word\">data.userinfo = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// 中间经过一系列处理，userinfo 被设置为了 null</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span>(!data || !data.userinfo){ <span class=\"hljs-comment\">// 注意既需要判断 data 也需要判断 userinfo</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.resApi(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'data error'</span>);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> name = data.userinfo.name; <span class=\"hljs-comment\">// 此时再去访问 userinfo 的信息就无法处理</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"184437\">\n                      <strong data-nodeid=\"184654\"\n                        >主要是对每一层数据都进行校验</strong\n                      >，从 data 到\n                      data.userinfo，而如果有四层，那么就需要前三层逐层去判断，代码可读性以及后期可维护性都比较低。\n                    </p>\n                    <p data-nodeid=\"184438\">\n                      这样会发现一个问题，<strong data-nodeid=\"184660\"\n                        >当数据结构非常复杂时，你的判断逻辑也会非常复杂，从而影响了开发效率，为了解决这个问题我们可以使用\n                        lodash 这个库的 get 方法</strong\n                      >，代码修改如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> lastName = data.userinfo.lastName;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> name = data.userinfo.name;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> fullName =  <span class=\"hljs-string\">\\`<span class=\"hljs-subst\">${lastName}</span> <span class=\"hljs-subst\">${name}</span>\\`</span>; <span class=\"hljs-comment\">// 获取用户真实姓名，由于数据中使用的是 - 连接，这里使用的是空格，导致了异常 </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> chineseFraction = _.get(data, <span class=\"hljs-string\">\\`<span class=\"hljs-subst\">${fullName}</span>.Chinese\\`</span>, <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// 使用 lodash 来简化</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"184440\">\n                      在上面代码中的第 5\n                      行，就简化了这部分判断逻辑，可以直接去获取属性，如果未获取到则设置默认\n                      0 这个值，避免异常情况。\n                    </p>\n                    <p data-nodeid=\"184441\">\n                      这样以后在系统层面就不会报错了，建议后续我们都使用这种方法来尽量避免以上的异常问题。\n                    </p>\n                    <p data-nodeid=\"184442\">\n                      <strong data-nodeid=\"184677\">object?.forEach</strong\n                      >和<strong data-nodeid=\"184678\"\n                        >for(let i=0;i&lt;arr?.length:i++){}</strong\n                      >\n                      这类问题和上面基本相似。不过这里是<strong\n                        data-nodeid=\"184679\"\n                        >类型的判断</strong\n                      >，应用这些方法之前都需要进行类型的检测，不然也会引发现网异常，例如下面这种处理方式才是正确的。\n                    </p>\n                    <p data-nodeid=\"184443\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/2D/97/Cgp9HWBmwOiAAUQHAACrzbEZSFM047.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"184682\"\n                      /><br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2D/9F/CioPOWBmwO6AFikrAADYDnDm-Ts197.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"184686\"\n                      />\n                    </p>\n                    <div data-nodeid=\"184444\">\n                      <p style=\"text-align: center\">图 2 for 类型检测方法</p>\n                    </div>\n                    <p data-nodeid=\"184445\">\n                      我们对比下左右两边的逻辑，<strong data-nodeid=\"184692\"\n                        >只需要判断是否为 null 就行了，因为我们需要使用数组的\n                        length 属性，如果是一个 null.length 则会引发报错</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"184446\">parameters error</h4>\n                    <p data-nodeid=\"184447\">\n                      接下来我们看下<strong data-nodeid=\"184703\"\n                        >内部参数导致的一些问题</strong\n                      >，主要来看下常用的<strong data-nodeid=\"184704\"\n                        >JSON.parse</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"184448\">\n                      <strong data-nodeid=\"184709\"\n                        >关于 JSON.parse\n                        很多时候我们都比较自然地将其他接口或者第三方的数据拿来解析，但是这里往往会忽略其非\n                        JSON 字符串的问题</strong\n                      >，比如下面这段代码就会引发异常：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">jsonParse() {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">'nodejs'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-built_in\">JSON</span>.parse(str);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.resApi(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'good'</span>, obj);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"184450\">\n                      为了解决这个问题，我们需要进行<strong data-nodeid=\"184715\"\n                        >try catch 异常判断</strong\n                      >，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">jsonParse() {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">'nodejs'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> obj = {};\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">    obj = <span class=\"hljs-built_in\">JSON</span>.parse(str);\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">catch</span> (err) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(err);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.resApi(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'good'</span>, obj);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"184452\">\n                      在我们框架中也存在一个问题，就是<strong\n                        data-nodeid=\"184725\"\n                        >require</strong\n                      >的时候未进行异常判断，这部分你可以去<a\n                        href=\"https://github.com/love-flutter/nodejs-column?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"184723\"\n                        >第 09 讲源码中</a\n                      >查看，并与本讲的代码进行对比，看看哪部份进行了修改。\n                    </p>\n                    <p data-nodeid=\"184453\">\n                      <strong data-nodeid=\"184730\"\n                        >其次 Node.js 的 fs 这个模块应用是非常多的，在应用 fs\n                        的方法时，最好是使用 try catch 进行异常处理</strong\n                      >，因为很多时候可能存在权限不足或者文件不存在等问题。\n                    </p>\n                    <h4 data-nodeid=\"184454\">other errors</h4>\n                    <p data-nodeid=\"184455\">\n                      JavaScript 也存在一些语法问题，由于 Node.js\n                      是运行时报错，因此语法问题也只会在运行期间被发现，比如我们常发现的同变量重新申明的问题，<strong\n                        data-nodeid=\"184737\"\n                        >特别是 let 和 var 声明同一个变量</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"184456\">\n                      <strong data-nodeid=\"184742\"\n                        >当前 Node.js 的 Promise 应用越来越广泛了，因此对于\n                        Promise 的 catch 也应该多进行重视</strong\n                      >，对于每个 Promise 都应该要处理其异常 catch\n                      逻辑，不然系统会提示 warning 信息。\n                    </p>\n                    <p data-nodeid=\"184457\">\n                      还有一些常见的长连接的服务，比如 Socket、Redis、Memcache\n                      等等，我们需要在连接异常时进行处理，如果没有处理同样会导致异常，<strong\n                        data-nodeid=\"184748\"\n                        >比如 Socket 提供了 Socket.on(‘error’) 的监听</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"184458\">\n                      还有其他的常见问题，希望各位同学在下面补充，我们一起来完善这份报错指引。\n                    </p>\n                    <h3 data-nodeid=\"184459\">常见服务异常解析</h3>\n                    <p data-nodeid=\"184460\">\n                      服务器异常在 Node.js 中最常见的问题主要是<strong\n                        data-nodeid=\"184764\"\n                        >内存泄漏</strong\n                      >、<strong data-nodeid=\"184765\">句柄泄漏</strong\n                      >以及<strong data-nodeid=\"184766\">网络模块调用</strong>。\n                    </p>\n                    <p data-nodeid=\"184461\">\n                      接下来我们看看一些更深层次的关于 Node.js\n                      的问题，我们先来回顾下在《08 | 优化设计：在 I/O\n                      方面应该注意哪些要点？》所介绍的高性能日志模块的设计：\n                    </p>\n                    <ul data-nodeid=\"184462\">\n                      <li data-nodeid=\"184463\">\n                        <p data-nodeid=\"184464\">\n                          <strong data-nodeid=\"184776\"\n                            >设置最大临时缓存数，超出则不使用缓存</strong\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184465\">\n                        <p data-nodeid=\"184466\">\n                          <strong data-nodeid=\"184781\"\n                            >设置最大缓存句柄数，超出则不使用缓存</strong\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184467\">\n                        <p data-nodeid=\"184468\">\n                          <strong data-nodeid=\"184786\"\n                            >定时清理当前的临时缓存和句柄缓存</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"184469\">\n                      这三个设计的目的主要是<strong data-nodeid=\"184792\"\n                        >为了避免内存泄漏、句柄泄漏问题</strong\n                      >。可以思考下，如果不进行定时清理或者上限限制，随着时间的增长，其中文件句柄会越来越多，其次在并发较高时，临时缓存的日志内容可能超出\n                      1.4 G，从而引发重启。\n                    </p>\n                    <p data-nodeid=\"184470\">\n                      具体实际开发中还有哪些场景我们也来详细分析下。\n                    </p>\n                    <h4 data-nodeid=\"184471\">全局变量</h4>\n                    <p data-nodeid=\"184472\">\n                      <strong data-nodeid=\"184799\"\n                        >一般情况下不建议使用全局变量</strong\n                      >，因为全局变量是最容易引发内存泄漏问题的，举个简单的例子，比如我们需要将用户的\n                      session 保存在一个全局变量中，随着用户越来越多，这个\n                      session\n                      变量保存的数据也会越来越大，而且没有清理的规则，即使有清理规则，清理时间的长短影响用户体验，其次也影响内存的大小。\n                    </p>\n                    <p data-nodeid=\"184473\">\n                      包括我们上面所说的日志模块就是一个全局变量，这个全局变量必须要<strong\n                        data-nodeid=\"184805\"\n                        >有一定的上限和清理规则才能保证服务的安全</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"184474\">单例模块中的变量</h4>\n                    <p data-nodeid=\"184475\">\n                      要注意一个点，有些模块我们使用单例的模式，就是在每次\n                      require\n                      后都返回这个对象，这种情况也比较容易引发内存泄漏的问题。\n                    </p>\n                    <p data-nodeid=\"184476\">\n                      因为<strong data-nodeid=\"184813\"\n                        >单例模式会引发每个用户访问的数据的叠加</strong\n                      >，比如下面这个模块的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> singleton;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> userList = [];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singleton</span> </span>{\n</div></li><li><div class=\"code-word\">    add(uid) {\n</div></li><li><div class=\"code-word\">        userList.push(uid);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    getLength() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> userList.length;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>(singleton){\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> singleton;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    singleton = <span class=\"hljs-keyword\">new</span> Singleton();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> singleton;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"184478\">\n                      以上代码就是一个单例模式，其中会无限地往 userList push\n                      数据，每调用一次 add\n                      插入一条数据，这样会导致内存泄漏的问题，我们在 GitHub\n                      源码的 error.js 中的 controller 有一个 singletonTest\n                      方法，你会发现每调用一次数组长度就\n                      +1，并且永远不会减少，除非重启。\n                    </p>\n                    <p data-nodeid=\"184479\">\n                      对于这种单例的代码，<strong data-nodeid=\"184820\"\n                        >我们要严格地进行 CR</strong\n                      >，因为这种问题真的很容易被忽视。\n                    </p>\n                    <h4 data-nodeid=\"184480\">打开文件后，未主动关闭</h4>\n                    <p data-nodeid=\"184481\">\n                      这个是最容易理解的，一般打开文件句柄后，我们都应该主动关闭，<strong\n                        data-nodeid=\"184827\"\n                        >如果未主动关闭，就会导致文件句柄越来越多，从而引发句柄泄漏问题</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"184482\">\n                      在 Node.js 里 fs\n                      的模块中都提供了打开文件句柄关闭的方法，比如 fs.open\n                      提供了 fs.close 的方法，其次比如 fs.createWriteStream\n                      提供了 fileStream.end 的方法。\n                    </p>\n                    <h4 data-nodeid=\"184483\">网络句柄</h4>\n                    <p data-nodeid=\"184484\">\n                      网络句柄超出的情况一般还好，因为目标服务器会主动拒绝了你的请求，但是作为调用方，应该也要复用句柄，主动避免这类问题。其次还要注意连接超时控制，特别是在使用\n                      Node.js 第三方库 request 以及 Socket 模块时。\n                    </p>\n                    <h3 data-nodeid=\"184485\">监控告警介绍</h3>\n                    <p data-nodeid=\"184486\">\n                      图 3\n                      是一个最简单的层级结构图，具体每个层级设计其实是非常复杂的。\n                    </p>\n                    <p data-nodeid=\"184487\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/2D/98/Cgp9HWBmwY2AXDslAABuqH1Pwi0559.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"184835\"\n                      />\n                    </p>\n                    <div data-nodeid=\"184488\">\n                      <p style=\"text-align: center\">\n                        图 3 监控告警平台简单流程图\n                      </p>\n                    </div>\n                    <p data-nodeid=\"184489\">\n                      我们可以看到在 Node.js 服务器中，会包含两部分：\n                    </p>\n                    <ul data-nodeid=\"184490\">\n                      <li data-nodeid=\"184491\">\n                        <p data-nodeid=\"184492\">\n                          <strong data-nodeid=\"184841\"\n                            >自动定时采集进程的指标数据</strong\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184493\">\n                        <p data-nodeid=\"184494\">\n                          <strong data-nodeid=\"184846\"\n                            >接口被调用或者访问后主动上报的信息</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"184495\">\n                      以上的两部分信息都会异步地发送给本地一个采集服务，落地到本地临时缓存中，然后定时地将本地临时缓存的上报信息发送给监控数据处理服务。\n                    </p>\n                    <p data-nodeid=\"184496\">\n                      监控数据处理经过一系列的复杂计算，按照一定的数据要求落入监控平台的数据存储中，告警平台则使用特定\n                      QL 语法查询数据库，主要服务于三种类型：\n                    </p>\n                    <ul data-nodeid=\"184497\">\n                      <li data-nodeid=\"184498\">\n                        <p data-nodeid=\"184499\">\n                          <strong data-nodeid=\"184853\">触发告警</strong\n                          >，根据告警平台的设置，当数据落入后判断是否满足告警机制，满足则调用告警模块触发告警；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184500\">\n                        <p data-nodeid=\"184501\">\n                          <strong data-nodeid=\"184858\">查询视图</strong\n                          >，这部分就是一个前端可交互的界面，用户可以在这个平台查询监控信息；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184502\">\n                        <p data-nodeid=\"184503\">\n                          <strong data-nodeid=\"184863\">API 接口</strong\n                          >，有些情况需要针对告警进行一些研发操作，因此也支持\n                          API 来查询监控告警信息。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"184504\">\n                      接下来我们再来看看 Node.js\n                      到底有哪些监控告警平台，以及监控的指标会有哪些。\n                    </p>\n                    <h4 data-nodeid=\"184505\">平台介绍</h4>\n                    <p data-nodeid=\"184506\">\n                      在系统监控告警方面，<strong data-nodeid=\"184871\"\n                        >Node.js 的 PM2 提供了付费服务</strong\n                      >，你可以直接用 PM2\n                      来构建一个专门的监控告警机制，其中覆盖的进程管理功能也是比较齐全的。\n                    </p>\n                    <p data-nodeid=\"184507\">\n                      不过还有另外一个方式就是<strong data-nodeid=\"184881\"\n                        >自己构建一套开源免费的 prometheus 服务</strong\n                      >，如果是公司级别应用的话，可以参考 prometheus\n                      官网自己搭建一套这种服务，其对 Node.js\n                      的支持也是非常到位的，扩展请参考<a\n                        href=\"https://github.com/siimon/prom-client?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"184879\"\n                        >GitHub prom-client 库</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"184508\">\n                      而在业务告警方面你可以直接<strong data-nodeid=\"184895\"\n                        >复用当前后台侧的业务告警系统</strong\n                      >，或者<strong data-nodeid=\"184896\">prometheus</strong\n                      >也是可以的，又或者目前常用的一套组合系统<strong\n                        data-nodeid=\"184897\"\n                        >Grafana（主要是监控系统界面操作平台）+InfluxDB（数据存储）+telegraf（数据采集）</strong\n                      >\n                      也可以。\n                    </p>\n                    <p data-nodeid=\"184509\">\n                      以上工具，具体如何安装、配置、使用，你可以去官网按照指引进行即可，我们接下来看下到底会监控哪些指标以及各个指标的含义。\n                    </p>\n                    <h4 data-nodeid=\"184510\">监控指标</h4>\n                    <p data-nodeid=\"184511\">\n                      在进程监控告警层面，我们要了解到底应该监控 Node.js\n                      的哪些指标属性，其次在业务层面我们又应该主动上报哪些信息来作为监控指标。\n                    </p>\n                    <p data-nodeid=\"184512\">\n                      在 Node.js 进程方面我们要监控以下几个指标。\n                    </p>\n                    <ul data-nodeid=\"184513\">\n                      <li data-nodeid=\"184514\">\n                        <p data-nodeid=\"184515\">\n                          <strong data-nodeid=\"184914\">事件延迟</strong>，因为\n                          Node.js\n                          主要是事件循环，如果主线程被长时间占用，就会导致事件执行有延迟，而最简单的办法就是<strong\n                            data-nodeid=\"184915\"\n                            >使用 setTimeout 来判断</strong\n                          >。当我们设定 1000ms\n                          执行某个事件，但是真正开始执行的时间大于\n                          1000ms，那么我们就可能存在事件延迟了，而如果这个延迟越来越长，那么就必须进行<strong\n                            data-nodeid=\"184916\"\n                            >告警</strong\n                          >提示开发者需要查看是否有异常事件被卡住，或者服务压力过大。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184516\">\n                        <p data-nodeid=\"184517\">\n                          <strong data-nodeid=\"184925\">CPU 使用率</strong\n                          >，这是一个非常重要的指标，当发现 CPU 使用率长期维持在\n                          70% 以上，我们就要<strong data-nodeid=\"184926\"\n                            >考虑是否需要扩容，或者是增加进程的方式来解决这个问题</strong\n                          >，如果长期在 100%\n                          那么肯定是需要扩容，或者检查内部代码逻辑是否存在问题。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184518\">\n                        <p data-nodeid=\"184519\">\n                          <strong data-nodeid=\"184935\">内存变化</strong\n                          >，Node.js 的内存泄漏还是比较常见的，其<strong\n                            data-nodeid=\"184936\"\n                            >最大的问题就是导致垃圾回收时间变长，从而影响\n                            Node.js\n                            的服务性能，最大的影响就是内存达到上限后进行重启，从而中断用户请求，引发在重启过程中的用户请求</strong\n                          >。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184520\">\n                        <p data-nodeid=\"184521\">\n                          <strong data-nodeid=\"184941\">句柄变化</strong\n                          >，由于服务器的句柄是有上限的，如果无节制地开启句柄，将会导致系统性能损耗，从而影响进程的性能，因此我们必须在未使用句柄时进行释放，而如果长期不释放就会在达到上限时，导致新的请求无法开启新的句柄，从而无法正常提供服务。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184522\">\n                        <p data-nodeid=\"184523\">\n                          <strong data-nodeid=\"184946\">进程异常重启次数</strong\n                          >，也是用来判断我们代码逻辑是否足够健壮的一个点，如果存在异常重启次数，那么一定是我们代码中存在未\n                          catch 住的异常，或者说上面提到的内存泄漏上限问题。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"184524\">\n                      以上指标在达到一定限度的时候，就应该进行告警提示开发者。\n                    </p>\n                    <p data-nodeid=\"184525\">\n                      在业务层面，我们主要是关心服务提供的<strong\n                        data-nodeid=\"184953\"\n                        >业务响应速度</strong\n                      >，我们需要把所有的接口按照以下指标进行上报（这点和其他后台服务差异不大）。\n                    </p>\n                    <ul data-nodeid=\"184526\">\n                      <li data-nodeid=\"184527\">\n                        <p data-nodeid=\"184528\">\n                          <strong data-nodeid=\"184958\">接口名称</strong\n                          >，主要是用来区分接口的唯一性。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184529\">\n                        <p data-nodeid=\"184530\">\n                          <strong data-nodeid=\"184963\"\n                            >接口请求时服务器时间</strong\n                          >，用来保留用户请求的时间节点。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184531\">\n                        <p data-nodeid=\"184532\">\n                          <strong data-nodeid=\"184968\"\n                            >接口的请求用户分类标识</strong\n                          >，有些需要根据设备、地区、网络运营商、版本信息等进行不同纬度的数据统计，因此这部分需要根据自身业务进行上报。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184533\">\n                        <p data-nodeid=\"184534\">\n                          <strong data-nodeid=\"184973\">接口请求耗时</strong\n                          >，尽量细分，比如 Node.js\n                          内部逻辑耗时、第三方接口耗时以及一些存储服务的请求耗时，例如\n                          Redis、MySQL、MongoDB 等。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"184535\">\n                        <p data-nodeid=\"184536\">\n                          <strong data-nodeid=\"184978\">当前服务器 IP</strong\n                          >，有些可能和服务器有关，比如如果负载均衡未做好，导致部分机器分发的请求过大，从而引发部分机器过载的问题，因此上报当前服务器的\n                          IP 也是非常关键的点。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"184537\">\n                      拿到上面这些指标数据后，我们就可以在类似 Grafana\n                      平台中进行数据配置和监控告警设置，当接口耗时对比昨天同时刻出现较大波动时，或者超出用户可接受的响应时间时则进行告警。\n                    </p>\n                    <h3 data-nodeid=\"184538\">总结</h3>\n                    <p data-nodeid=\"184539\">\n                      学完本讲后，你首先应该明白为什么进程的安全是一个比较重要的原因，其次要掌握一些基础的会导致进程异常的问题以及如何优化的方案，最后就是要了解目前\n                      Node.js 监控指标以及当前适合 Node.js 的告警监控平台。\n                    </p>\n                    <p data-nodeid=\"184540\">\n                      别忘了上文提到的，让我们在留言区一起完善报错指引。\n                    </p>\n                    <p data-nodeid=\"186150\">\n                      下一讲我们将针对本讲中所提到的内存泄漏问题进行详细阐述，教你如何一步步定位到内存泄漏的问题，其次在\n                      GitHub 源码中会发现 router\n                      的路由对象越来越大了，我们也需要进一步去优化，在下一讲中，我们会直接使用优化后的路由文件，也会顺便介绍优化的方法。\n                    </p>\n                    <hr data-nodeid=\"186151\" />\n                    <p data-nodeid=\"186152\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"186160\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image6/M00/12/FA/CioPOWBBrAKAAod-AASyC72ZqWw233.png\"\n                          alt=\"Drawing 2.png\"\n                          data-nodeid=\"186159\"\n                      /></a>\n                    </p>\n                    <p data-nodeid=\"186153\">\n                      <strong data-nodeid=\"186164\">《大前端高薪训练营》</strong>\n                    </p>\n                    <p data-nodeid=\"186154\" class=\"te-preview-highlight\">\n                      对标阿里 P7 技术需求 + 每月大厂内推，6\n                      个月助你斩获名企高薪 Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"186168\"\n                        >点击链接</a\n                      >，快来领取！\n                    </p>\n            "}