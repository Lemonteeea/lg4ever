{"title":"开篇词 | 掌握 Go 和微服务，跟进未来服务端开发的主流趋势","context":"\n                    <p data-nodeid=\"4630\">\n                      你好，我是 aoho，一名服务端技术开发专家，已有五年多<strong\n                        data-nodeid=\"4636\"\n                        >微服务开发</strong\n                      >经验，曾就职于美团等一线互联网公司，现任源图信息有限公司架构负责人。由于我很早就关注了微服务架构，对于云原生、微服务、容器化等都有过深入的研究和实践。\n                    </p>\n\n                    <p data-nodeid=\"4195\">\n                      平时我非常乐于个人技术分享，喜欢与同行交流，所以在工作之余我经常会写一些技术性的文章，总结我的工作经验和实践。在个人微信公众号“aoho\n                      求索”中，我一直致力于分享服务端开发技术和实践，目前已发布了近百篇文章，得到很多读者的认可。2020\n                      年初，我和同行联合写作的《Go\n                      语言高并发与微服务实战》一书面市，希望帮助读者在开发实践中获取一些经验和灵感，少走一些弯路，以提升开发体验和企业产品迭代效率。\n                    </p>\n                    <p data-nodeid=\"4196\"></p>\n                    <h3 data-nodeid=\"9424\" class=\"\">为什么要学习 Go 微服务</h3>\n\n                    <p data-nodeid=\"4198\">\n                      在早期的单体应用开发时代，我们会将所有的代码和配置都封装在一个独立的\n                      war 包中，然后再部署到 Web\n                      服务器上。但随着开发团队的不断壮大和产品需求的不断增加，一系列连锁反应就出现了，单体应用的代码快速膨胀，模块之间交互越加复杂，代码复杂度越来越高，代码可维护性变差，维护成本变高，大大降低了开发效率。除此之外，每次改动还都要重新编译打包整个\n                      war 包，然后到服务器上重新进行部署，毫无便捷性可言。\n                    </p>\n                    <p data-nodeid=\"4199\">\n                      云原生技术的迅猛发展，彻底改变了互联网应用的开发模式。开发者可以在云上快速便捷地构建、发布和部署应用，并使用云服务商提供的各种“利器”高效地开发和维护应用。\n                    </p>\n                    <p data-nodeid=\"7702\">\n                      <strong data-nodeid=\"7715\"\n                        >作为云原生技术落地实践的代表技术</strong\n                      >，<strong data-nodeid=\"7716\">微服务架构</strong\n                      >将原本臃肿的单体应用根据业务拆分为职责单一的微服务，其中每个微服务都可以独立部署和开发，并对外提供服务，<strong\n                        data-nodeid=\"7717\"\n                        >这种“分而治之”的手段大大提升了应用的开发效率</strong\n                      >。纵观国内一线互联网公司，大多数都走在微服务落地实践的前沿，或将已有系统逐步拆分为互相协作的微服务，或使用微服务来开发新系统。\n                    </p>\n\n                    <p data-nodeid=\"4202\">\n                      而 Go\n                      作为当前炙手可热的高性能编译型编程语言，以其简明的语法、丰富的内置类型和极高的并发性能吸引了大量开发者的青睐，成为落地微服务架构实践的绝佳利器。正是考虑到\n                      Go\n                      简单易上手、静态编译、性能优越等优点，目前各大公司都在将服务端技术栈往\n                      Go 迁移，如腾讯、字节跳动等互联网大厂，都在将原有的\n                      Python/C/C++ 实现的系统往 Go 上迁移，或者完全采用 Go\n                      去开发新的系统。\n                    </p>\n                    <p data-nodeid=\"8215\">\n                      可以这么说，<strong data-nodeid=\"8222\"\n                        >用 Go 落地践行微服务架构逐渐成为一种趋势</strong\n                      >，所以掌握相关知识和技能将大大提升你个人的就业竞争力，升职加薪不再是梦。\n                    </p>\n                    <p data-nodeid=\"9210\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/29/57/Ciqc1F76rkaARRZlAAIMgf54ezU781.png\"\n                        alt=\"image (12).png\"\n                        data-nodeid=\"9217\"\n                      /><br />\n                      　　（来源：拉勾网 Golang 开发工程师职位）\n                    </p>\n\n                    <h3 data-nodeid=\"9630\" class=\"\">课程设置</h3>\n\n                    <p data-nodeid=\"4207\">\n                      目前业内存在大量成熟的开源微服务开发脚手架，如\n                      Go-kit、Go-micro、Spring\n                      Cloud、Tars等，它们经受过大量线上真实业务环境的考验，能够为计划进行微服务架构实践的开发团队提供一站式服务，使得开发人员更加专注于业务开发。\n                    </p>\n                    <p data-nodeid=\"4208\">\n                      微服务和 Go\n                      的学习资料在网上一抓一大把，但是经常出现的情况是单单利用这些你很难进行系统性地学习，可能遇到的问题有：\n                    </p>\n                    <ul data-nodeid=\"4209\">\n                      <li data-nodeid=\"4210\">\n                        <p data-nodeid=\"4211\">\n                          没有实战开发经验，掌握了大量微服务架构相关的知识，却没有真正在一个系统开发中实践过；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4212\">\n                        <p data-nodeid=\"4213\">\n                          案例分散，目前网上的资料大多数都是零零散散地讲解各个微服务组件的应用，没有一个完整的案例应用详尽地讲解微服务架构开发设计落地的完整过程；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4214\">\n                        <p data-nodeid=\"4215\">\n                          Go\n                          微服务实践的案例较少，目前讲解微服务架构实践大多数以\n                          Java 为主；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4216\">\n                        <p data-nodeid=\"4217\">\n                          没有云上开发的经历，很多时候都是在本地机器上运行应用。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"4218\">\n                      在本课程中，我会首先介绍云原生的相关背景知识，描述应用如何在云计算平台上开发、部署和运行，接着详细介绍微服务架构中各个基础组件的设计和原理，并使用\n                      Go 来落地微服务架构的实践。\n                    </p>\n                    <p data-nodeid=\"4219\">\n                      另外，为了加深你对知识的理解和应用，也为了让你在实践中少走弯路，我会以<strong\n                        data-nodeid=\"4315\"\n                        >一个货运平台的业务案例</strong\n                      >为主线，阐述一个业务需求是如何经过划分后，被设计为多个微服务，并采用\n                      Go\n                      进行开发，然后如何在云计算平台上部署、上线和运行的。本课程主要由\n                      4 部分组成：\n                    </p>\n                    <ul data-nodeid=\"4220\">\n                      <li data-nodeid=\"4221\">\n                        <p data-nodeid=\"4222\">\n                          第一部分（模块\n                          1），主要介绍云原生诞生的背景及其概念、微服务的组成和发展趋势，并讲解如何使用\n                          DDD（领域驱动设计）来划分微服务，以及介绍下一代微服务架构\n                          Service\n                          Mesh。这部分知识能够帮助你充分理解云原生和微服务的基础概念，以及云原生应用开发的流程和方法论，为你接下来学习各微服务组件的原理和应用打下坚实的理论基础。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4223\">\n                        <p data-nodeid=\"4224\">\n                          第二部分（模块 2），主要介绍&nbsp;Go\n                          开发的基础知识，包括 Go 语法和流程控制、Go 并发和 Go\n                          Web 应用开发等，并阐述如何采用 DDD\n                          对货运平台的业务进行划分，以及相关案例应用实战（微服务部署、容器编排、持续集成和自动化测试等）。这部分主要是补充\n                          Go 语言开发基础，帮助没有了解过 Go 的同学快速掌握 Go\n                          开发的基本要领，也方便接下来讲解如何使用 Go\n                          搭建微服务应用。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4225\">\n                        <p data-nodeid=\"4226\">\n                          第三部分（模块 3 ~ 模块\n                          9），主要讲解微服务架构中基础组件的原理和 Go\n                          业务案例的实战，包括服务注册与发现、RPC\n                          调用、网关、容错处理、负载均衡、统一认证与授权，以及分布式链路追踪等。我们会重点关注各个组件背后的实现原理和使用\n                          Go\n                          开源或者自实现的方式为案例微服务添加组件能力。最后，我还会介绍如何通过\n                          Service Mesh 来整合这些组件提供的能力。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4227\">\n                        <p data-nodeid=\"4228\">\n                          第四部分（模块 10），主要分享 Go\n                          微服务开发中的相关经验和要点，包括日志采集、Go\n                          错误处理、并发陷阱和系统监控等。通过我多年在 Go\n                          微服务开发中积累的相关实践经验，进而避免你在未来的开发中“踩坑”。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"9836\" class=\"te-preview-highlight\">\n                      作者寄语\n                    </h3>\n\n                    <p data-nodeid=\"4230\">\n                      当前，微服务架构已经成为服务端开发的主流，使用 Go\n                      进行微服务开发也越来越受到开发者的青睐。我希望能够通过该课程帮助你深入理解微服务架构，以及使用\n                      Go\n                      语言快速加入微服务开发队列中，这样无论在将来的面试还是开发中，你都能切中微服务应用开发的要点，将原理和应用结合起来，充分体现个人的核心竞争力，从而在激励竞争中脱颖而出，充分实现自己的个人价值。\n                    </p>\n                    <p data-nodeid=\"4231\">\n                      在课程的开始，我建议你给自己定个目标，然后将目标进行拆分，每天进步一点点，整个课程跟下来你的成长绝对是指数级的。也欢迎你在留言区介绍你的工作和学习情况，分享你的成长经验和心得，倾诉你的学习痛点，不仅方便我后续有针对性地讲解，也增进我们彼此的了解。\n                    </p>\n                    <p data-nodeid=\"4232\">\n                      最后，我希望你能和我一起坚持下来，我们一起学习、一起交流，共同成长。期待你的蜕变！加油！\n                    </p>\n            "}