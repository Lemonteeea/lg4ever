{"title":"19 | 微服务网关如何作为服务端统一入口点？","context":"\n                    <p data-nodeid=\"137235\" class=\"\">\n                      在单体架构中，客户端在向服务端发起请求时，会通过类似 Nginx\n                      的负载均衡组件获取到多个相同的应用程序实例中的一个。请求由该服务实例进行处理，服务端处理完之后返回响应给客户端。\n                    </p>\n                    <p data-nodeid=\"137236\">\n                      而在微服务架构下，原来的单体应用拆分成了多个业务微服务。此时，直接对外暴露这些业务微服务，必然会存在一些问题。客户端直接向每个微服务发送请求，其问题主要如下：\n                    </p>\n                    <ul data-nodeid=\"137237\">\n                      <li data-nodeid=\"137238\">\n                        <p data-nodeid=\"137239\">\n                          API\n                          粒度的问题，客户端需求和每个微服务暴露的细粒度可能存在\n                          API 不匹配的情况。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137240\">\n                        <p data-nodeid=\"137241\" class=\"\">\n                          微服务之间的调用可能不仅仅基于 HTTP\n                          的方式，还有可能使用 Thrift、gRPC 和 AMQP\n                          消息传递协议，这些 API 无法暴露出去。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137242\">\n                        <p data-nodeid=\"137243\">\n                          直接对外暴露接口，使得微服务难以重构，特别是服务数量达到一个量级，这类重构就非常困难了。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"137244\">\n                      如上问题，解决的方案是使用微服务网关。<strong\n                        data-nodeid=\"137331\"\n                        >网关在一个 API\n                        架构中的作用是保护、增强和控制外部请求对于 API\n                        服务的访问</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"137245\">什么是微服务网关</h3>\n                    <p data-nodeid=\"137246\">\n                      在微服务架构中，网关位于接入层之下和业务服务层之上。微服务网关是微服务架构中的一个基础服务，从面向对象设计的角度看，它与外观模式类似。\n                    </p>\n                    <p data-nodeid=\"137439\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/49/51/Ciqc1F9PEWKAY5XRAAEa4_VCymc032.png\"\n                        alt=\"image (9).png\"\n                        data-nodeid=\"137443\"\n                      />\n                    </p>\n                    <div data-nodeid=\"140508\" class=\"\">\n                      <p style=\"text-align: center\">微服务架构图</p>\n                    </div>\n\n                    <p data-nodeid=\"137248\">\n                      微服务网关封装了系统内部架构，为每个客户端提供一个定制的\n                      API，用来保护、增强和控制对于微服务的访问。换句话来讲，<strong\n                        data-nodeid=\"137344\"\n                        >微服务网关就是一个处于应用程序或服务之前的系统，用来管理授权、访问控制和流量限制等</strong\n                      >，这样微服务就会被微服务网关保护起来，对所有的调用者透明。因此，隐藏在微服务网关后面的业务系统就可以更加专注于业务本身。\n                    </p>\n                    <h3 data-nodeid=\"137249\">微服务网关的功能特性</h3>\n                    <p data-nodeid=\"137250\">\n                      作为连接服务消费方和服务提供方的中间件系统，微服务网关将各自业务系统的演进和发展做了天然的隔离，使业务系统更加专注于业务服务本身，同时微服务网关还可以为服务提供和沉淀更多附加功能。\n                    </p>\n                    <p data-nodeid=\"137251\">\n                      微服务网关的主要功能特性如下图所示：\n                    </p>\n                    <p data-nodeid=\"138887\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/49/5F/CgqCHl9PFI2AGA5BAADjWoNo2mw717.png\"\n                        alt=\"Lark20200902-114139.png\"\n                        data-nodeid=\"138890\"\n                      />\n                    </p>\n\n                    <div data-nodeid=\"140105\" class=\"\">\n                      <p style=\"text-align: center\">网关的功能特性示意图</p>\n                    </div>\n\n                    <p data-nodeid=\"137253\">\n                      结合该图，我们就来具体介绍下这四类功能。\n                    </p>\n                    <ul data-nodeid=\"137254\">\n                      <li data-nodeid=\"137255\">\n                        <p data-nodeid=\"137256\">\n                          <strong data-nodeid=\"137358\">请求接入</strong\n                          >。管理所有接入请求，作为所有 API\n                          接口的请求入口。在生产环境中，为了保护内部系统的安全性，往往内网与外网都是隔离的，服务端应用都是运行在内网环境中，为了安全，一般不允许外部直接访问。网关可以通过校验规则和配置白名单，对外部请求进行初步过滤，这种方式更加动态灵活。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137257\">\n                        <p data-nodeid=\"137258\">\n                          <strong data-nodeid=\"137363\">统一管理</strong\n                          >。可以提供统一的监控工具、配置管理和接口的 API\n                          文档管理等基础设施。例如，统一配置日志切面，并记录对应的日志文件。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137259\">\n                        <p data-nodeid=\"137260\">\n                          <strong data-nodeid=\"137368\">解耦</strong\n                          >。可以使得微服务系统的各方能够独立、自由、高效、灵活地调整，而不用担心给其他方面带来影响。软件系统的整个过程中包括不同的角色，有服务的开发提供方、服务的用户、运维人员、安全管理人员等，每个角色的职责和关注点都不同。微服务网关可以很好地解耦各方的相互依赖关系，让各个角色的用户更加专注自己的目标。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137261\">\n                        <p data-nodeid=\"137262\">\n                          <strong data-nodeid=\"137373\">拦截插件</strong\n                          >。服务网关层除了处理请求的路由转发外，还需要负责认证鉴权、限流熔断、监控和安全防范等，这些功能的实现方式，往往随着业务的变化不断调整。这就要求网关层提供一套机制，可以很好地支持这种动态扩展。拦截策略提供了一个扩展点，方便通过扩展机制对请求进行一系列加工和处理。同时还可以提供统一的安全、路由和流控等公共服务组件。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"137263\">实战案例：自己动手实现一个网关</h3>\n                    <p data-nodeid=\"137264\">\n                      API\n                      网关最基础的功能是对请求进行路由转发，根据配置的转发规则将请求动态地转发到指定的服务实例。动态是指与服务发现结合，如\n                      Consul、ZooKeeper\n                      等组件，我们在前面的“服务注册与发现”模块已详细讲解。本课时我们将会使用\n                      Go 实现一个简易的 API 网关。\n                    </p>\n                    <p data-nodeid=\"137265\">\n                      API 网关根据客户端 HTTP\n                      请求，动态查询注册中心的服务实例，通过<strong\n                        data-nodeid=\"137381\"\n                        >反向代理</strong\n                      >实现对后台服务的调用。\n                    </p>\n                    <p data-nodeid=\"137266\">\n                      API\n                      网关将符合规则的请求路由调用对应的后端服务。这里的规则可以有很多种，如\n                      HTTP\n                      请求的资源路径、方法、头部和参数等。这里我们以最简单的请求路径为例，规则为\n                      <strong data-nodeid=\"137387\">：/{serviceName}/#</strong\n                      >。即：路径第一部分为注册中心服务实例名称，其余部分为服务实例的\n                      REST 路径。如：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">/cargo-service/cargos/\n</div></li><li><div class=\"code-word\"><span class=\"hljs-regexp\">/cargo-service/</span>locations\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"137268\">其中：</p>\n                    <ul data-nodeid=\"137269\">\n                      <li data-nodeid=\"137270\">\n                        <p data-nodeid=\"137271\">/cargo-service 为服务名称；</p>\n                      </li>\n                      <li data-nodeid=\"137272\">\n                        <p data-nodeid=\"137273\">\n                          /locations 为 cargo-service 服务提供的接口。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"137274\">1. 实现思路</h4>\n                    <p data-nodeid=\"137275\">\n                      客户端向网关发起请求，网关解析请求资源路径中的信息，根据服务名称查询注册中心的服务实例；然后使用反向代理技术把客户端请求转发至后端真实的服务实例，请求执行完毕后，再把响应信息返回客户端。\n                    </p>\n                    <p data-nodeid=\"139295\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/49/5C/CgqCHl9PEZSAS2voAAETpEE9DGU705.png\"\n                        alt=\"image (11).png\"\n                        data-nodeid=\"139299\"\n                      />\n                    </p>\n                    <div data-nodeid=\"139702\" class=\"\">\n                      <p style=\"text-align: center\">\n                        自定义网关的调用请求示意图\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"137277\">\n                      我们设计实现的网关的功能主要包含如下几点：\n                    </p>\n                    <ul data-nodeid=\"137278\">\n                      <li data-nodeid=\"137279\">\n                        <p data-nodeid=\"137280\">\n                          HTTP请求的规则遵循 /{serviceName}/#，否则不予通过。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137281\">\n                        <p data-nodeid=\"137282\">\n                          使用 Go 提供的反向代理包 httputil.ReverseProxy\n                          实现一个简单的反向代理，它能够对请求实现负载均衡，随机地把请求发送给服务实例。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137283\">\n                        <p data-nodeid=\"137284\">\n                          使用 Consul 客户端 API 动态查询服务实例。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"137285\">2. 编写反向代理方法</h4>\n                    <p data-nodeid=\"137286\">\n                      创建目录 gateway，然后新建 main.go 文件。NewReverseProxy\n                      方法接受<strong data-nodeid=\"137412\"\n                        >两个参数：Consul 客户端对象 api.Client 和日志记录工具\n                        log.Logger</strong\n                      >，返回反向代理对象。该方法的实现过程如下：\n                    </p>\n                    <ul data-nodeid=\"137287\">\n                      <li data-nodeid=\"137288\">\n                        <p data-nodeid=\"137289\">\n                          获取请求路径，检查是否符合规则，不符合规则直接返回；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137290\">\n                        <p data-nodeid=\"137291\">\n                          解析请求路径，获取服务名称（请求路径的第一部分）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137292\">\n                        <p data-nodeid=\"137293\">\n                          使用 Consul\n                          客户端查询服务实例，若查询到结果，则随机选择一个作为目标实例；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137294\">\n                        <p data-nodeid=\"137295\">\n                          根据选定的目标实例，设置反向代理参数 Schema、Host 和\n                          Path。\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 位于 section19/gateway/main.go</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// NewReverseProxy 创建反向代理处理方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">func <span class=\"hljs-title\">NewReverseProxy</span><span class=\"hljs-params\">(client *api.Client, logger log.Logger)</span> *httputil.ReverseProxy </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//创建 Director</span>\n</div></li><li><div class=\"code-word\">    director := func(req *http.Request) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//查询原始请求路径，如：/arithmetic/calculate</span>\n</div></li><li><div class=\"code-word\">        reqPath := req.URL.Path\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> reqPath == <span class=\"hljs-string\">\"\"</span> {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//按照分隔符'/'对路径进行分解，获取服务名称serviceName</span>\n</div></li><li><div class=\"code-word\">        pathArray := strings.Split(reqPath, <span class=\"hljs-string\">\"/\"</span>)\n</div></li><li><div class=\"code-word\">        serviceName := pathArray[<span class=\"hljs-number\">1</span>]\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//调用consul api查询serviceName的服务实例列表</span>\n</div></li><li><div class=\"code-word\">        result, _, err := client.Catalog().Service(serviceName, <span class=\"hljs-string\">\"\"</span>, nil)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> err != nil {\n</div></li><li><div class=\"code-word\">            logger.Log(<span class=\"hljs-string\">\"ReverseProxy failed\"</span>, <span class=\"hljs-string\">\"query service instace error\"</span>, err.Error())\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-function\"><span class=\"hljs-keyword\">if</span> <span class=\"hljs-title\">len</span><span class=\"hljs-params\">(result)</span> </span>== <span class=\"hljs-number\">0</span> {\n</div></li><li><div class=\"code-word\">            logger.Log(<span class=\"hljs-string\">\"ReverseProxy failed\"</span>, <span class=\"hljs-string\">\"no such service instance\"</span>, serviceName)\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//重新组织请求路径，去掉服务名称部分</span>\n</div></li><li><div class=\"code-word\">        destPath := strings.Join(pathArray[<span class=\"hljs-number\">2</span>:], <span class=\"hljs-string\">\"/\"</span>)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//随机选择一个服务实例</span>\n</div></li><li><div class=\"code-word\">        tgt := result[rand.Int()%len(result)]\n</div></li><li><div class=\"code-word\">        logger.Log(<span class=\"hljs-string\">\"service id\"</span>, tgt.ServiceID)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//设置代理服务地址信息</span>\n</div></li><li><div class=\"code-word\">        req.URL.Scheme = <span class=\"hljs-string\">\"http\"</span>\n</div></li><li><div class=\"code-word\">        req.URL.Host = fmt.Sprintf(<span class=\"hljs-string\">\"%s:%d\"</span>, tgt.ServiceAddress, tgt.ServicePort)\n</div></li><li><div class=\"code-word\">        req.URL.Path = <span class=\"hljs-string\">\"/\"</span> + destPath\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> &amp;httputil.ReverseProxy{Director: director}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code><ol><li><div class=\"code-word\">\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"137298\">\n                      在反向转发处理的时候，我们只是根据请求中的服务名直接转发，如果需要对外屏蔽服务名的话，这样的路由转发规则显然是不够的。为了增加路由配置的多样性，我们可以抽出路由配置层，根据指定的规则进行路由转发，如根据配置名称、头部的信息、请求的参数、请求的\n                      body 等规则转发到指定的服务。\n                    </p>\n                    <h4 data-nodeid=\"137299\">3. 编写入口方法</h4>\n                    <p data-nodeid=\"137300\">\n                      main 方法的主要任务是创建 Consul\n                      连接对象、创建日志记录对象和开启反向代理 HTTP\n                      服务。整个过程与前面课时创建用户服务类似，代码如下（为了测试方便，直接指定了\n                      Consul 服务地址信息）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 位于 section19/gateway/main.go:65</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">func <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 创建环境变量</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> (\n</div></li><li><div class=\"code-word\">        consulHost = flag.String(<span class=\"hljs-string\">\"consul.host\"</span>, <span class=\"hljs-string\">\"127.0.0.1\"</span>, <span class=\"hljs-string\">\"consul server ip address\"</span>)\n</div></li><li><div class=\"code-word\">        consulPort = flag.String(<span class=\"hljs-string\">\"consul.port\"</span>, <span class=\"hljs-string\">\"8500\"</span>, <span class=\"hljs-string\">\"consul server port\"</span>)\n</div></li><li><div class=\"code-word\">    )\n</div></li><li><div class=\"code-word\">    flag.Parse()\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//创建日志组件</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> logger log.Logger\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">        logger = log.NewLogfmtLogger(os.Stderr)\n</div></li><li><div class=\"code-word\">        logger = log.With(logger, <span class=\"hljs-string\">\"ts\"</span>, log.DefaultTimestampUTC)\n</div></li><li><div class=\"code-word\">        logger = log.With(logger, <span class=\"hljs-string\">\"caller\"</span>, log.DefaultCaller)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 创建consul api客户端</span>\n</div></li><li><div class=\"code-word\">    consulConfig := api.DefaultConfig()\n</div></li><li><div class=\"code-word\">    consulConfig.Address = <span class=\"hljs-string\">\"http://\"</span> + *consulHost + <span class=\"hljs-string\">\":\"</span> + *consulPort\n</div></li><li><div class=\"code-word\">    consulClient, err := api.NewClient(consulConfig)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> err != nil {\n</div></li><li><div class=\"code-word\">        logger.Log(<span class=\"hljs-string\">\"err\"</span>, err)\n</div></li><li><div class=\"code-word\">        os.Exit(<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//创建反向代理</span>\n</div></li><li><div class=\"code-word\">    proxy := NewReverseProxy(consulClient, logger)\n</div></li><li><div class=\"code-word\">    errc := make(chan error)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\">go <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        c := make(chan os.Signal)\n</div></li><li><div class=\"code-word\">        signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)\n</div></li><li><div class=\"code-word\">        errc &lt;- fmt.Errorf(<span class=\"hljs-string\">\"%s\"</span>, &lt;-c)\n</div></li><li><div class=\"code-word\">    }()\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//开始监听</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\">go <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        logger.Log(<span class=\"hljs-string\">\"transport\"</span>, <span class=\"hljs-string\">\"HTTP\"</span>, <span class=\"hljs-string\">\"addr\"</span>, <span class=\"hljs-string\">\"9099\"</span>)\n</div></li><li><div class=\"code-word\">        errc &lt;- http.ListenAndServe(<span class=\"hljs-string\">\":9099\"</span>, proxy)\n</div></li><li><div class=\"code-word\">    }()\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 开始运行，等待结束</span>\n</div></li><li><div class=\"code-word\">    logger.Log(<span class=\"hljs-string\">\"exit\"</span>, &lt;-errc)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"137302\">\n                      如上的代码实现，为了创建反向代理，需要先创建日志组件和\n                      Consul\n                      连接对象。反向代理处理器一般还可以使用装饰者模式封装，如增加中间件\n                      Hystrix 断路器、链路追踪 Tracer（Zipkin、Jaeger）组件等。\n                    </p>\n                    <h4 data-nodeid=\"137303\">4. 运行货运与网关服务</h4>\n                    <p data-nodeid=\"137304\">\n                      做好如上的准备步骤之后，我们开始运行货运服务。为了测试负载均衡效果，启动两个实例。这里我们是在一台主机上测试，所以需要使用不同的端口。首先编译货运服务：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">$</span>  <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">build</span> <span class=\"hljs-string\">-o</span> <span class=\"hljs-string\">cmd/cargo</span> <span class=\"hljs-string\">cmd/main.go</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"137306\">\n                      在 cmd 目录下生成了 cargo\n                      可执行文件，下面我们就分别来启动两个货运服务实例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">./cargo/cmd/cargo -consul.host localhost -consul.port <span class=\"hljs-number\">8500</span> -service.host <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> -service.port <span class=\"hljs-number\">8000</span>\n</div></li><li><div class=\"code-word\">./cargo/cmd/cargo -consul.host localhost -consul.port <span class=\"hljs-number\">8500</span> -service.host <span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span> -service.port <span class=\"hljs-number\">8002</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"137308\">\n                      启动成功并注册到 Consul，控制台输出如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">ts=<span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">28</span>T10:<span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">12.974789</span>Z transport=http address=<span class=\"hljs-number\">8000</span> msg=listening\n</div></li><li><div class=\"code-word\">ts=<span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">28</span>T10:<span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">13.006241</span>Z service=cargo-service tags=<span class=\"hljs-string\">\"[cargo-service aoho]\"</span> address=localhost action=register\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"137310\">\n                      再切换至目录 gateway，执行 go build\n                      完成编译，最后启动网关服务。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&gt; ./gateway -consul.host localhost -consul.port <span class=\"hljs-number\">8500</span>\n</div></li><li><div class=\"code-word\">&gt; ts=<span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">28</span>T10:<span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">37.662124</span>Z caller=main.go:<span class=\"hljs-number\">56</span> transport=HTTP addr=<span class=\"hljs-number\">9099</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"137312\">5. 测试</h4>\n                    <p data-nodeid=\"137313\">\n                      网关服务和两个货运服务实例启动好之后，我们通过命令行请求货运服务的接口\n                      /cargos，以获取指定 Id 的货运信息，请求如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">$</span> <span class=\"hljs-string\">curl</span> <span class=\"hljs-string\">-X</span> <span class=\"hljs-string\">POST</span> <span class=\"hljs-string\">\\</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">http://localhost:9099/cargo-service/cargos/</span> <span class=\"hljs-string\">\\</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">-H</span> <span class=\"hljs-string\">'Content-Type: application/json'</span> <span class=\"hljs-string\">\\</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">-d</span> <span class=\"hljs-string\">'{\n</span></div></li><li><div class=\"code-word\">  \"Id\": \"ABC123\"\n</div></li><li><div class=\"code-word\">}'\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"cargo\":</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"arrival_deadline\":</span> <span class=\"hljs-string\">\"2020-08-11T18:56:44.627+08:00\"</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"destination\":</span> <span class=\"hljs-string\">\"CNHKG\"</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"misrouted\":</span> <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"origin\":</span> <span class=\"hljs-string\">\"SESTO\"</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"routed\":</span> <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"tracking_id\":</span> <span class=\"hljs-string\">\"ABC123\"</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"137315\">\n                      同时，在终端可以看到如下输出，说明多次请求访问了不同的服务实例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">ts=<span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">28</span>T10:<span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">51.108611</span>Z caller=main.go:<span class=\"hljs-number\">96</span> serviceid=cargo-service64ffdd53-<span class=\"hljs-number\">9</span>c66-<span class=\"hljs-number\">43</span>cb-<span class=\"hljs-number\">9</span>ada-<span class=\"hljs-number\">0d</span>48ebddc632\n</div></li><li><div class=\"code-word\">ts=<span class=\"hljs-number\">2020</span>-<span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">28</span>T10:<span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">00</span>.<span class=\"hljs-number\">215364</span>Z caller=main.go:<span class=\"hljs-number\">96</span> serviceid=cargo-servicee8c53e6f-e4ff-<span class=\"hljs-number\">4737</span>-a3bd-f1b11b0b2e95\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"137317\">\n                      本案例我们使用反向代理技术，并结合注册中心 Consul\n                      实现了简单的 API 网关。Go\n                      提供了反向代理工具包，使得整个实现过程变得比较简单。实际项目中使用的产品，如\n                      Zuul、Nginx\n                      等，还包含了限流、请求过滤、身份认证等功能。该网关虽然仅仅实现了请求的代理，但重点在于帮助你了解了网关实现的基本原理，从而为后续网关功能的扩增打下基础。\n                    </p>\n                    <h3 data-nodeid=\"137318\">小结</h3>\n                    <p data-nodeid=\"137319\">\n                      本课时我们首先介绍了微服务网关产生的背景及其相关概念，然后还介绍了微服务网关在微服务架构中的职能。作为服务端的统一入口点，微服务网关主要用来实现接入请求、统一管理、解耦和配置拦截策略等功能。最后，为便于你更加详细地了解网关组件相关功能的实现原理，我们还自己动手实现了一个\n                      Go 微服务网关，你可以跟着上手实操下。\n                    </p>\n                    <p data-nodeid=\"137320\" class=\"\">\n                      学完本课时，你可以结合自己的实践经验，思考下我们实现的简易网关还需要承担哪些微服务架构中的职责。欢迎你在留言区积极发言和讨论。\n                    </p>\n            "}