{"title":"09 | 枚举类型：详解常见枚举类型的 7 种用法","context":"\n                    <p data-nodeid=\"14018\">\n                      08\n                      讲我们介绍了联合和交叉类型，其中有一个使用字面量联合类型来列举可能的类型（间接列举值）的场景，比如说表示星期的类型：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> Day = <span class=\"hljs-string\">'SUNDAY'</span> | <span class=\"hljs-string\">'MONDAY'</span> | <span class=\"hljs-string\">'TUESDAY'</span> | <span class=\"hljs-string\">'WEDNESDAY'</span> | <span class=\"hljs-string\">'THURSDAY'</span> | <span class=\"hljs-string\">'FRIDAY'</span> | <span class=\"hljs-string\">'SATURDAY'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> SUNDAY: Day = <span class=\"hljs-string\">'SUNDAY'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> SATURDAY: Day = <span class=\"hljs-string\">'SATURDAY'</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14020\">\n                      通过这些有着明确含义的单词来定义表示星期几的状态，使得我们的代码更具备可读性。\n                    </p>\n                    <p data-nodeid=\"14021\">\n                      当然，为了更简洁和高效，我们也可以使用纯数值表示星期几，比如使用\n                      0 到 1 表示从 'SUNDAY' 到\n                      'MONDAY'。因为我们真正关注的是星期几这个状态，而不是具体的值，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> Day = <span class=\"hljs-number\">0</span> | <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">2</span> | <span class=\"hljs-number\">3</span> | <span class=\"hljs-number\">4</span> | <span class=\"hljs-number\">5</span> | <span class=\"hljs-number\">6</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14023\">\n                      那有没有一种兼具语义化和简洁值优点的类型呢？在 C/C++/C#\n                      中有能满足这个诉求的类型，它就是枚举（Enums），用来表示一个被命名的整型常数的集合。\n                    </p>\n                    <blockquote data-nodeid=\"14024\">\n                      <p data-nodeid=\"14025\">\n                        学习建议：请使用 VS Code 新建一个 09.ts\n                        文件，尝试这一讲中的所有示例。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"14026\">枚举类型</h3>\n                    <p data-nodeid=\"14027\">\n                      在 JavaScript 原生语言中并没有与枚举匹配的概念，而\n                      TypeScript 中实现了枚举类型（Enums），这就意味着枚举也是\n                      TypeScript 特有的语法（相对于 JavaScript）。\n                    </p>\n                    <p data-nodeid=\"14028\">\n                      在 TypeScript\n                      中，我们可以使用枚举定义包含被命名的常量的集合，比如\n                      TypeScript 支持数字、字符两种常量值的枚举类型。\n                    </p>\n                    <p data-nodeid=\"14029\">\n                      我们也可以使用 enum 关键字定义枚举类型，格式是 enum +\n                      枚举名字 + 一对花括弧，花括弧里则是被命名了的常量成员。\n                    </p>\n                    <p data-nodeid=\"14030\">\n                      下面我们把前边表示星期的联合类型示例使用枚举类型实现一遍，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">    SUNDAY,\n</div></li><li><div class=\"code-word\">    MONDAY,\n</div></li><li><div class=\"code-word\">    TUESDAY,\n</div></li><li><div class=\"code-word\">    WEDNESDAY,\n</div></li><li><div class=\"code-word\">    THURSDAY,\n</div></li><li><div class=\"code-word\">    FRIDAY,\n</div></li><li><div class=\"code-word\">    SATURDAY\n</div></li><li><div class=\"code-word\">  }  \n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"14032\">\n                      <p data-nodeid=\"14033\">\n                        <strong data-nodeid=\"14172\">注意</strong\n                        >：相对于其他类型，enum\n                        也是一种比较特殊的类型，因为它兼具值和类型于一体，有点类似\n                        class（在定义 class 结构时， 其实我们也自动定义了 class\n                        实例的类型）。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"14034\">\n                      在上述示例中，Day\n                      既可以表示集合，也可以表示集合的类型，所有成员（enum\n                      member）的类型都是 Day 的子类型。\n                    </p>\n                    <p data-nodeid=\"14035\">\n                      前边我们说过，JavaScript\n                      中其实并没有与枚举类型对应的原始实现，而 TypeScript\n                      转译器会把枚举类型转译为一个属性为常量、命名值从 0\n                      开始递增数字映射的对象，在功能层面达到与枚举一致的效果（然而不是所有的特性在\n                      JavaScript 中都有对应的实现）。\n                    </p>\n                    <p data-nodeid=\"14036\">\n                      下面我们通过如下所示示例看看将如上示例转译为 JavaScript\n                      后的效果。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> Day = <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Day</span>) </span>{\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"SUNDAY\"</span>] = <span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">\"SUNDAY\"</span>;\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"MONDAY\"</span>] = <span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"MONDAY\"</span>;\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"TUESDAY\"</span>] = <span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">\"TUESDAY\"</span>;\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"WEDNESDAY\"</span>] = <span class=\"hljs-number\">3</span>] = <span class=\"hljs-string\">\"WEDNESDAY\"</span>;\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"THURSDAY\"</span>] = <span class=\"hljs-number\">4</span>] = <span class=\"hljs-string\">\"THURSDAY\"</span>;\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"FRIDAY\"</span>] = <span class=\"hljs-number\">5</span>] = <span class=\"hljs-string\">\"FRIDAY\"</span>;\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"SATURDAY\"</span>] = <span class=\"hljs-number\">6</span>] = <span class=\"hljs-string\">\"SATURDAY\"</span>;\n</div></li><li><div class=\"code-word\">    })(Day || (Day = {}));\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14038\">\n                      我们可以看到 Day.SUNDAY 被赋予 0 作为值，Day.SATURDAY\n                      被赋予 6 作为值。\n                    </p>\n                    <p data-nodeid=\"14039\">\n                      在 TypeScript\n                      中，我们可以通过“枚举名字.常量命名”的格式获取枚举集合里的成员，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">work</span>(<span class=\"hljs-params\">d: Day</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">switch</span> (d) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> Day.SUNDAY:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> Day.SATURDAY:\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'take a rest'</span>;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> Day.MONDAY:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> Day.TUESDAY:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> Day.WEDNESDAY:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> Day.THURSDAY:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> Day.FRIDAY:\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'work hard'</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14041\">\n                      示例中的第 3 行到第 10 行，我们通过 Day.SUNDAY\n                      这样的格式就可以访问枚举的所有成员了。 上面示例中的 work\n                      函数转译为 JavaScript 后，里面的 switch\n                      分支运行时的效果实际上等价于如下所示代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">    switch (d) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'take a rest'</span>;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'work hard'</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    ...\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14043\">\n                      这就意味着在 JavaScript 中调用 work\n                      函数时，传递的参数无论是 enum\n                      还是数值，逻辑上将没有区别，当然这也符合 TypeScript\n                      静态类型检测规则，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  work(Day.SUNDAY); <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">  work(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// ok</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14045\">\n                      这里我们既可以把枚举成员 Day.SUNDAY 作为 work\n                      函数的入参，也可以把数字字面量 0 作为 work 函数的入参。\n                    </p>\n                    <p data-nodeid=\"14046\">\n                      下面我们就来详细介绍一下 7 种常见的枚举类型：<strong\n                        data-nodeid=\"14185\"\n                        >数字类型、字符串类型、异构类型、常量成员和计算（值）成员、枚举成员类型和联合枚举、常量枚举、外部枚举。</strong\n                      >\n                    </p>\n                    <h4 data-nodeid=\"14047\">数字枚举</h4>\n                    <p data-nodeid=\"14048\">\n                      从上边示例可知，在仅仅指定常量命名的情况下，我们定义的就是一个默认从\n                      0 开始递增的数字集合，称之为数字枚举。\n                    </p>\n                    <p data-nodeid=\"14049\">\n                      如果我们希望枚举值从其他值开始递增，则可以通过“常量命名 =\n                      数值” 的格式显示指定枚举成员的初始值，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">    SUNDAY = <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">    MONDAY,\n</div></li><li><div class=\"code-word\">    TUESDAY,\n</div></li><li><div class=\"code-word\">    WEDNESDAY,\n</div></li><li><div class=\"code-word\">    THURSDAY,\n</div></li><li><div class=\"code-word\">    FRIDAY,\n</div></li><li><div class=\"code-word\">    SATURDAY\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14051\">\n                      在上述示例中，我们指定了从 1 开始递增。\n                    </p>\n                    <p data-nodeid=\"14052\">\n                      事实上，我们可以给 SUNDAY\n                      指定任意类型（比如整数、负数、小数等）、任意起始的数字，其后未显示指定值的成员会递增加\n                      1。上边的示例转译为 JavaScript 之后，则是一个属性值从 1\n                      开始递增的对象，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> Day = <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">MyDay</span>) </span>{\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"SUNDAY\"</span>] = <span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">\"SUNDAY\"</span>;\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"MONDAY\"</span>] = <span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">\"MONDAY\"</span>;\n</div></li><li><div class=\"code-word\">        ...\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"SATURDAY\"</span>] = <span class=\"hljs-number\">7</span>] = <span class=\"hljs-string\">\"SATURDAY\"</span>;\n</div></li><li><div class=\"code-word\">    })(Day || (Day = {}));\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14054\">\n                      这里 Day.SUNDAY 被赋予了 1 作为值，Day.SATURDAY 则被赋予了\n                      7 作为值。\n                    </p>\n                    <p data-nodeid=\"14055\">\n                      当然我们也可以给任意位置的成员指定值，如下所示示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">    SUNDAY,\n</div></li><li><div class=\"code-word\">    MONDAY,\n</div></li><li><div class=\"code-word\">    TUESDAY,\n</div></li><li><div class=\"code-word\">    WEDNESDAY,\n</div></li><li><div class=\"code-word\">    THURSDAY,\n</div></li><li><div class=\"code-word\">    FRIDAY,\n</div></li><li><div class=\"code-word\">    SATURDAY = <span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\">  } \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14057\">\n                      这里我们给最后一个成员 SATURDAY 指定了初始值\n                      5，但转译后的结果就比较尴尬了，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"FRIDAY\"</span>] = <span class=\"hljs-number\">5</span>] = <span class=\"hljs-string\">\"FRIDAY\"</span>;\n</div></li><li><div class=\"code-word\">        Day[Day[<span class=\"hljs-string\">\"SATURDAY\"</span>] = <span class=\"hljs-number\">5</span>] = <span class=\"hljs-string\">\"SATURDAY\"</span>;\n</div></li><li><div class=\"code-word\">  ...\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14059\">\n                      我们可以看到 MyDay.FRIDAY 和 MyDay.SATURDAY 的值都是数字\n                      5，这就导致使用 Day 枚举作为 switch 分支条件的函数\n                      work，在接收 MyDay.SATURDAY 作为入参时，也会进入\n                      MyDay.FRIDAY 的分支，从而出现逻辑错误。\n                    </p>\n                    <p data-nodeid=\"14060\">\n                      这个经验告诉我们，由于枚举默认的值自递增且完全无法保证稳定性，所以给部分数字类型的枚举成员显式指定数值或给函数传递数值而不是枚举类型作为入参都属于不明智的行为，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">    SATURDAY = <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">// bad</span>\n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">  work(<span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// bad</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14062\">\n                      此外，常量命名、结构顺序都一致的两个枚举，即便转译为\n                      JavaScript 后，同名成员的值仍然一样（满足恒等 === ）。但在\n                      TypeScript 看来，它们不相同、不满足恒等，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> MyDay {\n</div></li><li><div class=\"code-word\">    SUNDAY,\n</div></li><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  Day.SUNDAY === MyDay.SUNDAY; <span class=\"hljs-comment\">// ts(2367) 两个枚举值恒不相等</span>\n</div></li><li><div class=\"code-word\">  work(MyDay.SUNDAY); <span class=\"hljs-comment\">// ts(2345) 'MyDay.SUNDAY' 不能赋予 'Day'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14064\">\n                      这里的 MyDay 和上边的 Day 看似一样，但是如果我们拿 MyDay\n                      和 Day 的成员进行比较（第 6 行），或者把 MyDay\n                      传值给形参是 Day 类型的 work 函数（第 7\n                      行），就会发现都会提示错误。\n                    </p>\n                    <p data-nodeid=\"14065\">\n                      不仅仅是数字类型枚举，所有其他枚举都仅和自身兼容，这就消除了由于枚举不稳定性可能造成的风险，所以这是一种极其安全的设计。不过，这可能会使得枚举变得不那么好用，因为不同枚举之间完全不兼容，所以不少\n                      TypeScript\n                      编程人员觉得枚举类型是一种十分鸡肋的类型。而两个结构完全一样的枚举类型如果互相兼容，则会更符合我们的预期，比如说基于\n                      Swagger\n                      自动生成的不同模块中结构相同且描述同一个常量集合的多个同名枚举。\n                    </p>\n                    <p data-nodeid=\"14066\">\n                      不过，此时我们可能不得不使用类型断言（as）或者重构代码将“相同“的枚举类型抽离为同一个公共的枚举（我们更推荐后者）。\n                    </p>\n                    <h4 data-nodeid=\"14067\">字符串枚举</h4>\n                    <p data-nodeid=\"14068\">\n                      在 TypeScript\n                      中，我们将定义值是字符串字面量的枚举称之为字符串枚举，字符串枚举转译为\n                      JavaScript 之后也将保持这些值，我们来看下如下所示示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">    SUNDAY = <span class=\"hljs-string\">'SUNDAY'</span>,\n</div></li><li><div class=\"code-word\">    MONDAY = <span class=\"hljs-string\">'MONDAY'</span>,\n</div></li><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14070\">\n                      这里我们定义了成员 SUNDAY 的值是 'SUNDAY'、MONDAY 的值是\n                      'MONDAY'。\n                    </p>\n                    <p data-nodeid=\"14071\">\n                      而上述示例转译为 JavaScript 后，Day.SUNDAY 的值依旧是\n                      'SUNDAY'，Day.MONDAY 的值依旧是 'MONDAY'，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> Day = <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Day</span>) </span>{\n</div></li><li><div class=\"code-word\">        Day[<span class=\"hljs-string\">\"SUNDAY\"</span>] = <span class=\"hljs-string\">\"SUNDAY\"</span>;\n</div></li><li><div class=\"code-word\">        Day[<span class=\"hljs-string\">\"MONDAY\"</span>] = <span class=\"hljs-string\">\"MONDAY\"</span>;\n</div></li><li><div class=\"code-word\">    })(Day || (Day = {}));\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14073\">\n                      相比于没有明确意义的递增值的数字枚举，字符串枚举的成员在运行和调试阶段，更具备明确的含义和可读性，枚举成员的值就是我们显式指定的字符串字面量。\n                    </p>\n                    <h4 data-nodeid=\"14074\">异构枚举（Heterogeneous enums）</h4>\n                    <p data-nodeid=\"14075\">\n                      从技术上来讲，TypeScript\n                      支持枚举类型同时拥有数字和字符类型的成员，这样的枚举被称之为异构枚举。\n                    </p>\n                    <p data-nodeid=\"14076\">\n                      当然，异构枚举也被认为是很“鸡肋”的类型。比如如下示例中，我们定义了成员\n                      SUNDAY 是 'SUNDAY'、MONDAY 是\n                      2，很抱歉，我也不知道这样的枚举能在哪些有用的场合进行使用。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">    SUNDAY = <span class=\"hljs-string\">'SUNDAY'</span>,\n</div></li><li><div class=\"code-word\">    MONDAY = <span class=\"hljs-number\">2</span>,\n</div></li><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14078\">\n                      枚举成员的值既可以是数字、字符串这样的常量，也可以是通过表达式所计算出来的值。这就涉及枚举里成员的一个分类，即常量成员和计算成员。\n                    </p>\n                    <h4 data-nodeid=\"14079\">常量成员和计算（值）成员</h4>\n                    <p data-nodeid=\"14080\">\n                      在前边示例中，涉及的枚举成员的值都是字符串、数字字面量和未指定初始值从\n                      0 递增数字常量，都被称作常量成员。\n                    </p>\n                    <p data-nodeid=\"14081\">\n                      另外，在转译时，通过被计算的常量枚举表达式定义值的成员，也被称作常量成员，比如如下几种情况：\n                    </p>\n                    <ul data-nodeid=\"14082\">\n                      <li data-nodeid=\"14083\">\n                        <p data-nodeid=\"14084\">\n                          引用来自预先定义的常量成员，比如来自当前枚举或其他枚举；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"14085\">\n                        <p data-nodeid=\"14086\">\n                          圆括弧 () 包裹的常量枚举表达式；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"14087\">\n                        <p data-nodeid=\"14088\">\n                          在常量枚举表达式上应用的一元操作符 +、 -、~ ；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"14089\">\n                        <p data-nodeid=\"14090\">\n                          操作常量枚举表达式的二元操作符\n                          +、-、*、/、%、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;、&amp;、|、^。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"14091\">\n                      除以上这些情况之外，其他都被认为是计算（值）成员。\n                    </p>\n                    <p data-nodeid=\"14092\">\n                      如下所示示例（援引自官方示例）中，除了 G\n                      是计算成员之外，其他都属于常量成员。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> FileAccess {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 常量成员</span>\n</div></li><li><div class=\"code-word\">    None,\n</div></li><li><div class=\"code-word\">    Read = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">    Write = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">2</span>,\n</div></li><li><div class=\"code-word\">    ReadWrite = Read | Write,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 计算成员</span>\n</div></li><li><div class=\"code-word\">    G = <span class=\"hljs-string\">\"123\"</span>.length,\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"14094\">\n                      <p data-nodeid=\"14095\">\n                        <strong data-nodeid=\"14251\">注意</strong\n                        >：关于常量成员和计算成员的划分其实比较难理解，实际上它们也并没有太大的用处，只是告诉我们通过这些途径可以定义枚举成员的值。因此，我们只需记住缺省值（从\n                        0 递增）、数字字面量、字符串字面量肯定是常量成员就够了。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"14096\">枚举成员类型和联合枚举</h4>\n                    <p data-nodeid=\"14097\">\n                      另外，对于不需要计算（值）的常量类型成员，即缺省值（从 0\n                      递增）、数字字面量、字符串字面量这三种情况（这就是为什么我们只需记住这三种情况），被称之为字面量枚举成员。\n                    </p>\n                    <p data-nodeid=\"14098\">\n                      前面我们提到枚举值和类型是一体的，枚举成员的类型是枚举类型的子类型。\n                    </p>\n                    <p data-nodeid=\"14843\" class=\"te-preview-highlight\">\n                      <strong data-nodeid=\"14848\"\n                        >枚举成员和枚举类型之间的关系分两种情况：</strong\n                      >\n                      如果枚举的成员同时包含字面量和非字面量枚举值，枚举成员的类型就是枚举本身（枚举类型本身也是本身的子类型）；如果枚举成员全部是字面量枚举值，则所有枚举成员既是值又是类型，如下代码所示：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">    SUNDAY,\n</div></li><li><div class=\"code-word\">    MONDAY,\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> MyDay {\n</div></li><li><div class=\"code-word\">    SUNDAY,\n</div></li><li><div class=\"code-word\">    MONDAY = Day.MONDAY\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> mondayIsDay: Day.MONDAY = Day.MONDAY; <span class=\"hljs-comment\">// ok: 字面量枚举成员既是值，也是类型</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> mondayIsSunday = MyDay.SUNDAY; <span class=\"hljs-comment\">// ok: 类型是 MyDay，MyDay.SUNDAY 仅仅是值</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> mondayIsMyDay2: MyDay.MONDAY = MyDay.MONDAY; <span class=\"hljs-comment\">// ts(2535)，MyDay 包含非字面量值成员，所以 MyDay.MONDAY 不能作为类型</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14101\">\n                      这里因为 Day 的所有成员都是字面量枚举成员，所以 Day.MONDAY\n                      可以同时作为值和类型使用（第 11 行）。但是 MyDay 的成员\n                      MONDAY 是非字面量枚举成员（但是是常量枚举成员），所以\n                      MyDay.MONDAY 仅能作为值使用（第 12 行 ok，第 13\n                      行提示错误）。\n                    </p>\n                    <p data-nodeid=\"14102\">\n                      另外，如果枚举仅有一个成员且是字面量成员，那么这个成员的类型等于枚举类型，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">  MONDAY\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> mondayIsDay: Day = Day.MONDAY; <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> mondayIsDay1: Day.MONDAY = mondayIsDay <span class=\"hljs-keyword\">as</span> Day; <span class=\"hljs-comment\">// ok</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14104\">\n                      因为枚举 Day 仅包含一个字面量成员 MONDAY，所以类型 Day 和\n                      Day.MONDAY 可以互相兼容。比如第 4 行和第 5 行，我们既能把\n                      Day.MONDAY 类型赋值给 Day 类型，也能把 Day 类型赋值给\n                      Day.MONDAY 类型。\n                    </p>\n                    <p data-nodeid=\"14105\">\n                      此外，回想 04\n                      讲中介绍的字面量类型特性，不同成员的类型就是不同的字面量类型。纯字面量成员枚举类型也具有字面量类型的特性，也就等价于枚举的类型将变成各个成员类型组成的联合（枚举）类型。\n                    </p>\n                    <p data-nodeid=\"14106\">\n                      联合类型使得 TypeScript\n                      可以更清楚地枚举集合里的确切值，从而检测出一些永远不会成立的条件判断（俗称\n                      Dead Code），如下所示示例（援引自官方恒为真的示例）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">    SUNDAY,\n</div></li><li><div class=\"code-word\">    MONDAY,\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> work = <span class=\"hljs-function\">(<span class=\"hljs-params\">x: Day</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (x !== Day.SUNDAY || x !== Day.MONDAY) { <span class=\"hljs-comment\">// ts(2367)</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14108\">\n                      在上边示例中，TypeScript 确定 x 的值要么是\n                      Day.SUNDAY，要么是 Day.MONDAY。因为 Day\n                      是纯字面量枚举类型，可以等价地看作联合类型 Day.SUNDAY |\n                      Day.MONDAY，所以我们判断出第 7\n                      行的条件语句恒为真，于是提示了一个 ts(2367) 错误。\n                    </p>\n                    <p data-nodeid=\"14109\">\n                      不过，如果枚举包含需要计算（值）的成员情况就不一样了。如下示例中，TypeScript\n                      不能区分枚举 Day 中的每个成员。因为每个成员类型都是\n                      Day，所以无法判断出第 7\n                      行的条件语句恒为真，也就不会提示一个 ts(2367) 错误。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">    SUNDAY = +<span class=\"hljs-string\">'1'</span>,\n</div></li><li><div class=\"code-word\">    MONDAY = <span class=\"hljs-string\">'aa'</span>.length,\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> work = <span class=\"hljs-function\">(<span class=\"hljs-params\">x: Day</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (x !== Day.SUNDAY || x !== Day.MONDAY) { <span class=\"hljs-comment\">// ok</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14111\">\n                      此外，字面量类型所具有的类型推断、类型缩小的特性，也同样适用于字面量枚举类型，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">    SUNDAY,\n</div></li><li><div class=\"code-word\">    MONDAY,\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> SUNDAY = Day.SUNDAY; <span class=\"hljs-comment\">// 类型是 Day</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> SUNDAY2 = Day.SUNDAY; <span class=\"hljs-comment\">// 类型 Day.SUNDAY</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> work = <span class=\"hljs-function\">(<span class=\"hljs-params\">x: Day</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (x === Day.SUNDAY) {\n</div></li><li><div class=\"code-word\">      x; <span class=\"hljs-comment\">// 类型缩小为 Day.SUNDAY</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14113\">\n                      在上述代码中，我们在第 5 行通过 let\n                      定义了一个未显式声明类型的变量 SUNDAY，TypeScript\n                      可推断其类型是 Day；在第 6 行通过 const\n                      定义了一个未显式声明类型的变量 SUNDAY2，TypeScript\n                      可推断其类型是 Day.SUNDAY；在第 8 行的 if 条件判断中，变量\n                      x 类型也从 Day 缩小为 Day.SUNDAY。\n                    </p>\n                    <h4 data-nodeid=\"14114\">常量枚举（const enums）</h4>\n                    <p data-nodeid=\"14115\">\n                      枚举的作用在于定义被命名的常量集合，而 TypeScript\n                      提供了一些途径让枚举更加易用，比如常量枚举。\n                    </p>\n                    <p data-nodeid=\"14116\">\n                      我们可以通过添加 const\n                      修饰符定义常量枚举，常量枚举定义转译为 JavaScript\n                      之后会被移除，并在使用常量枚举成员的地方被替换为相应的内联值，因此常量枚举的成员都必须是常量成员（字面量\n                      + 转译阶段可计算值的表达式），如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">    SUNDAY,\n</div></li><li><div class=\"code-word\">    MONDAY\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> work = <span class=\"hljs-function\">(<span class=\"hljs-params\">d: Day</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">switch</span> (d) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> Day.SUNDAY:\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'take a rest'</span>;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">case</span> Day.MONDAY:\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'work hard'</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14118\">\n                      这里我们定义了常量枚举\n                      Day，它的成员都是值自递增的常量成员，并且在 work 函数的\n                      switch 分支里引用了 Day。\n                    </p>\n                    <p data-nodeid=\"14119\">\n                      转译为成 JavaScript 后，Day 枚举的定义就被移除了，work\n                      函数中对 Day 的引用也变成了常量值的引用（第 3 行内联了\n                      0、第 5 行内联了 1），如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> work = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">d</span>) </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">switch</span> (d) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* SUNDAY */</span>:\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'take a rest'</span>;\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* MONDAY */</span>:\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'work hard'</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }; \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14121\">\n                      从以上示例我们可以看到，使用常量枚举不仅能减少转译后的\n                      JavaScript\n                      代码量（因为抹除了枚举定义），还不需要到上级作用域里查找枚举定义（因为直接内联了枚举值字面量）。\n                    </p>\n                    <p data-nodeid=\"14122\">\n                      因此，通过定义常量枚举，我们可以以清晰、结构化的形式维护相关联的常量集合，比如\n                      switch\n                      case分支，使得代码更具可读性和易维护性。而且因为转译后抹除了定义、内联成员值，所以在代码的体积和性能方面并不会比直接内联常量值差。\n                    </p>\n                    <h4 data-nodeid=\"14123\">外部枚举（Ambient enums）</h4>\n                    <p data-nodeid=\"14124\">\n                      在 TypeScript 中，我们可以通过 declare\n                      描述一个在其他地方已经定义过的变量，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">let</span> $: <span class=\"hljs-built_in\">any</span>;\n</div></li><li><div class=\"code-word\">$(<span class=\"hljs-string\">'#id'</span>).addClass(<span class=\"hljs-string\">'show'</span>); <span class=\"hljs-comment\">// ok</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14126\">\n                      第 1 行我们使用 declare 描述类型是 any 的外部变量 $，在第\n                      2 行则立即使用 $ ，此时并不会提示一个找不到 $ 变量的错误。\n                    </p>\n                    <p data-nodeid=\"14127\">\n                      同样，我们也可以使用 declare\n                      描述一个在其他地方已经定义过的枚举类型，通过这种方式定义出来的枚举类型，被称之为外部枚举，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">enum</span> Day {\n</div></li><li><div class=\"code-word\">  SUNDAY,\n</div></li><li><div class=\"code-word\">  MONDAY,\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> work = <span class=\"hljs-function\">(<span class=\"hljs-params\">x: Day</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (x === Day.SUNDAY) {\n</div></li><li><div class=\"code-word\">    x; <span class=\"hljs-comment\">// 类型是 Day</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14129\">\n                      这里我们认定在其他地方已经定义了一个 Day\n                      这种结构的枚举，且 work 函数中使用了它。\n                    </p>\n                    <p data-nodeid=\"14130\">\n                      转译为 JavaScript\n                      之后，外部枚举的定义也会像常量枚举一样被抹除，但是对枚举成员的引用会被保留（第\n                      2 行保留了对 Day.SUNDAY 的引用），如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> work = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (x === Day.SUNDAY) {\n</div></li><li><div class=\"code-word\">        x;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14132\">\n                      外部枚举和常规枚举的差异在于以下几点：\n                    </p>\n                    <ul data-nodeid=\"14133\">\n                      <li data-nodeid=\"14134\">\n                        <p data-nodeid=\"14135\">\n                          在外部枚举中，如果没有指定初始值的成员都被当作计算（值）成员，这跟常规枚举恰好相反；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"14136\">\n                        <p data-nodeid=\"14137\">\n                          即便外部枚举只包含字面量成员，这些成员的类型也不会是字面量成员类型，自然完全不具备字面量类型的各种特性。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"14138\">\n                      我们可以一起使用 declare 和 const\n                      定义外部常量枚举，使得它转译为 JavaScript\n                      之后仍像常量枚举一样。在抹除枚举定义的同时，我们可以使用内联枚举值替换对枚举成员的引用。\n                    </p>\n                    <p data-nodeid=\"14139\">\n                      外部枚举的作用在于为两个不同枚举（实际上是指向了同一个枚举类型）的成员进行兼容、比较、被复用提供了一种途径，这在一定程度上提升了枚举的可用性，让其显得不那么“鸡肋”。\n                    </p>\n                    <h3 data-nodeid=\"14140\">小结与预告</h3>\n                    <p data-nodeid=\"14141\">\n                      以上就是“鸡肋”枚举的全部内容，下面我们提炼一下核心的几个知识点和建议：\n                    </p>\n                    <ol data-nodeid=\"14142\">\n                      <li data-nodeid=\"14143\">\n                        <p data-nodeid=\"14144\">\n                          使用常量枚举管理相关的常量，能提高代码的可读性和易维护性；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"14145\">\n                        <p data-nodeid=\"14146\">\n                          不要使用其他任何类型替换所使用的枚举成员；\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"14147\">\n                      下面我们插播一个思考题，也是这一讲的核心点：枚举有什么特性？常量枚举有什么特性？欢迎你在留言区进行互动、交流。\n                    </p>\n                    <p data-nodeid=\"14148\">\n                      10 讲我们将学习 TypeScript\n                      最有意思的类型——泛型，敬请期待！\n                    </p>\n                    <p data-nodeid=\"14149\">\n                      另外，如果你觉得本专栏有价值，欢迎分享给更多好友。\n                    </p>\n            "}