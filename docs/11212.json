{"title":"10 | 代码拆分和按需加载：缩减 bundle size，把性能做到极致","context":"\n                    <p data-nodeid=\"1801\" class=\"\">\n                      这一讲，我们将对代码拆分和按需加载这一话题进行解析。\n                    </p>\n                    <p data-nodeid=\"1802\">\n                      随着 Webpack\n                      等构建工具的能力越来越强，开发者在构建阶段可以随心所欲打造项目流程，代码拆分和按需加载技术在业界曝光量也越来越高。事实上，代码拆分和按需加载的设计决定着工程化构建的结果，这将直接影响应用的性能表现，因为合理的加载时机和代码拆分能够使初始代码体积更小，页面加载更快。因此，如何合理设计代码拆分和按需加载，是对一个项目架构情况的直接考量。\n                    </p>\n                    <p data-nodeid=\"1803\">\n                      下面我们从代码拆分和按需加载的场景入手，一同体会这一技术手段的必要性和业务价值。\n                    </p>\n                    <h3 data-nodeid=\"1804\">代码拆分和按需加载场景</h3>\n                    <p data-nodeid=\"1805\">\n                      我们来看一个案例。如下图所示场景：点击左图播放按钮后，页面出现视频列表浮层（如右侧图所示，类似单页应用，视频列表仍为同一页面）。视频列表浮层包含了滚动处理、视频播放等多项复杂逻辑，因此这个浮层对应的脚本在页面初始化时，不需要被加载。那么在工程上，我们需要对视频浮层脚本单独进行拆分，和初始化脚本进行分离。当用户点击浮层触发按钮后，执行某一单独部分脚本的请求。\n                    </p>\n                    <p data-nodeid=\"1806\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/42/Ciqc1F_9Bu2AB133AAluXVg4Mlw240.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1974\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1807\">\n                      这其实是一个我接手并重构过的真实线上案例，通过后期对页面交互的统计数据分析发现，用户点击触发视频浮层出现按钮的概率只有\n                      10%\n                      左右。也就是说，大部分用户（90%）并不会看到这一浮层，也就不需要对相关脚本进行加载执行，因此延迟按需加载设计是有统计数据支持的。现在你已经了解了这个场景，下面我们从技术环节详细展开。\n                    </p>\n                    <h3 data-nodeid=\"1808\">代码拆分和按需技术实现</h3>\n                    <h4 data-nodeid=\"1809\">按需加载和按需打包区分</h4>\n                    <p data-nodeid=\"1810\">\n                      从技术角度介绍按需加载概念前，我们需要先和另外一个概念：<strong\n                        data-nodeid=\"1983\"\n                        >按需打包</strong\n                      >，进行区分。事实上，当前社区对于按需加载和按需打包并没有一个准确的命名上的划分约定。因此从两者命名上，难以区分其实际含义。\n                    </p>\n                    <p data-nodeid=\"1811\">\n                      其实，<strong data-nodeid=\"1993\"\n                        >按需加载表示代码模块在交互需要时，动态引入</strong\n                      >；而<strong data-nodeid=\"1994\"\n                        >按需打包针对第三方依赖库，及业务模块，只打包真正在运行时可能会需要的代码</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1812\">\n                      我们不妨先说明按需打包的概念和实施方法，目前按需打包一般通过两种方式进行：\n                    </p>\n                    <ul data-nodeid=\"1813\">\n                      <li data-nodeid=\"1814\">\n                        <p data-nodeid=\"1815\">\n                          使用 ES Module 支持的 Tree Shaking\n                          方案，在使用构建工具打包时，完成按需打包；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1816\">\n                        <p data-nodeid=\"1817\">\n                          使用以<code data-backticks=\"1\" data-nodeid=\"1998\"\n                            >babel-plugin-import</code\n                          >为主的 Babel 插件，实现自动按需打包 。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1818\">\n                      <strong data-nodeid=\"2003\"\n                        >Tree Shaking 实现按需打包</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1819\">\n                      我们来看一个场景，假设业务中使用 antd 的 Button 组件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { Button } from <span class=\"hljs-string\">'antd'</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1821\">\n                      这样的引用，会使得最终打包的代码中包含所有 antd\n                      导出来的内容。假设应用中并没有使用 antd 提供的 TimePicker\n                      组件，那么对于打包结果来说，无疑增加了代码体积。在这种情况下，如果组件库提供了\n                      ES Module 版本，并开启了 Tree\n                      Shaking，我们就可以通过“摇树”特性，将不会被使用的代码在构建阶段移除。\n                    </p>\n                    <p data-nodeid=\"1822\">\n                      Webpack 可以在 package.json 中设置<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2007\"\n                        >sideEffects: false</code\n                      >。我们在\n                      <a\n                        href=\"https://github.com/ant-design/ant-design/blob/master/package.json#L38\"\n                        data-nodeid=\"2011\"\n                        >antd 源码</a\n                      >当中可以找到（<a\n                        href=\"https://github.com/ant-design/ant-design/pull/10043\"\n                        data-nodeid=\"2015\"\n                        >相关 chore commit</a\n                      >）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">\"sideEffects\"</span>: [\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"dist/*\"</span>,\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"es/**/style/*\"</span>,\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"lib/**/style/*\"</span>,\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"*.less\"</span>\n</div></li><li><div class=\"code-word\">],\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1824\">\n                      指定副作用模块——这是一种值得推荐的开发习惯，建议你注意\n                      Tree Shaking 的使用，最好实际观察一下打包结果。\n                    </p>\n                    <p data-nodeid=\"1825\">\n                      <strong data-nodeid=\"2021\"\n                        >学习编写 Babel 插件，实现按需打包</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1826\">\n                      如果第三方库不支持 Tree Shaking，我们依然可以<strong\n                        data-nodeid=\"2027\"\n                        >通过 Babel 插件，改变业务代码中对模块的引用路径</strong\n                      >来实现按需打包。\n                    </p>\n                    <p data-nodeid=\"1827\">\n                      比如\n                      <a\n                        href=\"https://github.com/ant-design/babel-plugin-import\"\n                        data-nodeid=\"2031\"\n                        >babel-plugin-import</a\n                      >\n                      这个插件，它是 antd 团队推出的一个 Babel\n                      插件，我们通过一个例子来理解它的原理，比如：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> {Button as Btn,Input,TimePicker,ConfigProvider,Haaaa} from <span class=\"hljs-string\">'antd'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1829\">这样的代码就可以被编译为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> _ConfigProvider from <span class=\"hljs-string\">\"antd/lib/config-provider\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> _Button from <span class=\"hljs-string\">\"antd/lib/button\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> _Input from <span class=\"hljs-string\">\"antd/lib/input\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> _TimePicker from <span class=\"hljs-string\">\"antd/lib/time-picker\"</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1831\">\n                      编写一个类似的 Babel 插件也不是一件难事，Babel\n                      插件核心依赖于对 AST\n                      的解析和操作。它本质上就是一个函数，在 Babel 对 AST\n                      语法树进行转换的过程中介入，通过相应的操作，最终让生成的结果发生改变。\n                    </p>\n                    <p data-nodeid=\"1832\">\n                      Babel 已经内置了几个核心分析、操作 AST 的工具集，Babel\n                      插件通过<strong data-nodeid=\"2040\"\n                        >观察者 + 访问者模式</strong\n                      >，对 AST\n                      节点统一遍历，因此具备了良好的扩展性和灵活性。比如这段代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">   <span class=\"hljs-keyword\">import</span> {Button as Btn, Input} from <span class=\"hljs-string\">'antd'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1834\">\n                      这样的代码，经过 Babel AST 分析后，得到结构：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"ImportDeclaration\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"specifiers\"</span>: [\n</div></li><li><div class=\"code-word\">        {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"ImportSpecifier\"</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"imported\"</span>: {\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"Identifier\"</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"loc\"</span>: {\n</div></li><li><div class=\"code-word\">                    <span class=\"hljs-string\">\"identifierName\"</span>: <span class=\"hljs-string\">\"Button\"</span>\n</div></li><li><div class=\"code-word\">                },\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Button\"</span>\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"importKind\"</span>: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"local\"</span>: {\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"Identifier\"</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"loc\"</span>: {\n</div></li><li><div class=\"code-word\">                    <span class=\"hljs-string\">\"identifierName\"</span>: <span class=\"hljs-string\">\"Btn\"</span>\n</div></li><li><div class=\"code-word\">                },\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Btn\"</span>\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        },\n</div></li><li><div class=\"code-word\">        {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"ImportSpecifier\"</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"imported\"</span>: {\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"Identifier\"</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"loc\"</span>: {\n</div></li><li><div class=\"code-word\">                    <span class=\"hljs-string\">\"identifierName\"</span>: <span class=\"hljs-string\">\"Input\"</span>\n</div></li><li><div class=\"code-word\">                },\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Input\"</span>\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"importKind\"</span>: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\"local\"</span>: {\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"Identifier\"</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-number\">23</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"end\"</span>: <span class=\"hljs-number\">28</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"loc\"</span>: {\n</div></li><li><div class=\"code-word\">                    <span class=\"hljs-string\">\"identifierName\"</span>: <span class=\"hljs-string\">\"Input\"</span>\n</div></li><li><div class=\"code-word\">                },\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"Input\"</span>\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    ],\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"importKind\"</span>: <span class=\"hljs-string\">\"value\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"source\"</span>: {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"StringLiteral\"</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"antd\"</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1836\">\n                      通过上述结构，我们很容易实现遍历 specifiers\n                      属性，至于更改最后代码的 import 部分，你可以参考\n                      <a\n                        href=\"https://github.com/ant-design/babel-plugin-import/blob/master/src/Plugin.js\"\n                        data-nodeid=\"2045\"\n                        >babel-plugin-import 相关处理逻辑</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"1837\">\n                      首先通过<code data-backticks=\"1\" data-nodeid=\"2048\"\n                        >buildExpressionHandler</code\n                      >方法对 import 路径进行改写：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">buildExpressionHandler(node, props, path, state) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 获取文件</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> file = (path &amp;&amp; path.hub &amp;&amp; path.hub.file) || (state &amp;&amp; state.file);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> { types } = <span class=\"hljs-keyword\">this</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> pluginState = <span class=\"hljs-keyword\">this</span>.getPluginState(state);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 进行遍历</span>\n</div></li><li><div class=\"code-word\">    props.forEach(prop =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!types.isIdentifier(node[prop])) <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (\n</div></li><li><div class=\"code-word\">        pluginState.specified[node[prop].name] &amp;&amp;\n</div></li><li><div class=\"code-word\">        types.isImportSpecifier(path.scope.getBinding(node[prop].name).path)\n</div></li><li><div class=\"code-word\">      ) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 修改路径内容</span>\n</div></li><li><div class=\"code-word\">        node[prop] = <span class=\"hljs-keyword\">this</span>.importMethod(pluginState.specified[node[prop].name], file, pluginState); <span class=\"hljs-comment\">// eslint-disable-line</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1839\">\n                      <code data-backticks=\"1\" data-nodeid=\"2050\"\n                        >buildExpressionHandler</code\n                      >方法依赖<code data-backticks=\"1\" data-nodeid=\"2052\"\n                        >importMethod</code\n                      >方法：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">importMethod(methodName, file, pluginState) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!pluginState.selectedMethods[methodName]) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> { style, libraryDirectory } = <span class=\"hljs-keyword\">this</span>;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 获取执行方法名</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> transformedMethodName = <span class=\"hljs-keyword\">this</span>.camel2UnderlineComponentName <span class=\"hljs-comment\">// eslint-disable-line</span>\n</div></li><li><div class=\"code-word\">        ? transCamel(methodName, <span class=\"hljs-string\">'_'</span>)\n</div></li><li><div class=\"code-word\">        : <span class=\"hljs-keyword\">this</span>.camel2DashComponentName\n</div></li><li><div class=\"code-word\">        ? transCamel(methodName, <span class=\"hljs-string\">'-'</span>)\n</div></li><li><div class=\"code-word\">        : methodName;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 获取相应路径</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> path = winPath(\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.customName\n</div></li><li><div class=\"code-word\">          ? <span class=\"hljs-keyword\">this</span>.customName(transformedMethodName, file)\n</div></li><li><div class=\"code-word\">          : join(<span class=\"hljs-keyword\">this</span>.libraryName, libraryDirectory, transformedMethodName, <span class=\"hljs-keyword\">this</span>.fileName), <span class=\"hljs-comment\">// eslint-disable-line</span>\n</div></li><li><div class=\"code-word\">      );\n</div></li><li><div class=\"code-word\">      pluginState.selectedMethods[methodName] = <span class=\"hljs-keyword\">this</span>.transformToDefaultImport <span class=\"hljs-comment\">// eslint-disable-line</span>\n</div></li><li><div class=\"code-word\">        ? addDefault(file.path, path, { nameHint: methodName })\n</div></li><li><div class=\"code-word\">        : addNamed(file.path, methodName, path);\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.customStyleName) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> stylePath = winPath(<span class=\"hljs-keyword\">this</span>.customStyleName(transformedMethodName));\n</div></li><li><div class=\"code-word\">        addSideEffect(file.path, \\`${stylePath}\\`);\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.styleLibraryDirectory) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> stylePath = winPath(\n</div></li><li><div class=\"code-word\">          join(<span class=\"hljs-keyword\">this</span>.libraryName, <span class=\"hljs-keyword\">this</span>.styleLibraryDirectory, transformedMethodName, <span class=\"hljs-keyword\">this</span>.fileName),\n</div></li><li><div class=\"code-word\">        );\n</div></li><li><div class=\"code-word\">        addSideEffect(file.path, \\`${stylePath}\\`);\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (style === <span class=\"hljs-keyword\">true</span>) {\n</div></li><li><div class=\"code-word\">        addSideEffect(file.path, \\`${path}/style\\`);\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (style === <span class=\"hljs-string\">'css'</span>) {\n</div></li><li><div class=\"code-word\">        addSideEffect(file.path, \\`${path}/style/css\\`);\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (typeof style === <span class=\"hljs-string\">'function'</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> stylePath = style(path, file);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (stylePath) {\n</div></li><li><div class=\"code-word\">          addSideEffect(file.path, stylePath);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> { ...pluginState.selectedMethods[methodName] };\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1841\">\n                      <code data-backticks=\"1\" data-nodeid=\"2054\"\n                        >importMethod</code\n                      >方法调用了<code data-backticks=\"1\" data-nodeid=\"2056\"\n                        >@babel/helper-module-imports</code\n                      >中的<code data-backticks=\"1\" data-nodeid=\"2058\"\n                        >addSideEffect</code\n                      >方法执行路径的转换操作。<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"2060\"\n                        >addSideEffect</code\n                      >方法在源码中通过实例化一个 Import\n                      Injector，并调用实例方法完成了 AST\n                      转换，具体源码可以参考：<a\n                        href=\"https://github.com/babel/babel/blob/eea156b2cb8deecfcf82d52aa1b71ba4995c7d68/packages/babel-helper-module-imports/src/index.js\"\n                        data-nodeid=\"2064\"\n                        >babel-helper-module-imports</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"1842\">\n                      现在我们已经看完了按需加载打包内容，接下来，我们看看动态导入以及按需加载这个重要概念。\n                    </p>\n                    <h4 data-nodeid=\"1843\">\n                      “重新认识” dynamic import（动态导入）\n                    </h4>\n                    <p data-nodeid=\"1844\">\n                      ES module\n                      无疑在工程化方面给前端插上了一双起飞的翅膀。溯源历史我们发现：早期\n                      import 是完全静态化的，而如今 dynamic import\n                      的提案早已横空出世，目前已经进入了 stage 4 阶段。dynamic\n                      import\n                      简单翻译为动态导入，从名字上看，我们就能知晓这个新特性和按需加载密不可分。但在深入讲解\n                      dynamic import\n                      之前，我想先从静态导入说起，以帮助你全方位地理解。\n                    </p>\n                    <p data-nodeid=\"1845\">\n                      <strong data-nodeid=\"2072\">静态导入的性能优劣</strong>\n                    </p>\n                    <p data-nodeid=\"1846\">\n                      标准用法的 import 属于静态导入，它只支持一个字符串类型的\n                      module\n                      specifier（模块路径声明），这样的特性会使所有<strong\n                        data-nodeid=\"2078\"\n                        >被 import 的模块在加载时就被编译</strong\n                      >。从某些角度看，这种做法对于绝大多数场景来说性能是友好的，因为这意味着对工程代码的静态分析成为可能，进而使得类似\n                      tree-shaking 的技术有了应用空间。\n                    </p>\n                    <p data-nodeid=\"1847\">\n                      但是对于一些特殊场景，静态导入也可能成为性能的短板，比如，当我们需要：\n                    </p>\n                    <ul data-nodeid=\"1848\">\n                      <li data-nodeid=\"1849\">\n                        <p data-nodeid=\"1850\">按需加载一个模块；</p>\n                      </li>\n                      <li data-nodeid=\"1851\">\n                        <p data-nodeid=\"1852\">按运行事件选定一个模块。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1853\">\n                      此时，dynamic import 就变得尤为重要。比如在<strong\n                        data-nodeid=\"2087\"\n                        >浏览器侧，根据用户的系统语言选择加载不同的语言模块，根据用户的操作去加载不同的内容逻辑</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1854\">\n                      <a\n                        href=\"https://developer.mozilla.org/en-us/docs/web/javascript/reference/statements/import\"\n                        data-nodeid=\"2090\"\n                        >MDN 文档</a\n                      >中给出了 dynamic import 更具体的使用场景：\n                    </p>\n                    <ul data-nodeid=\"8619\">\n                      <li data-nodeid=\"8620\">\n                        <p data-nodeid=\"8621\">\n                          静态导入的模块很明显降低了代码的加载速度且被使用的可能性很低，或者并不需要马上使用它；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8622\">\n                        <p data-nodeid=\"8623\">\n                          静态导入的模块很明显占用了大量系统内存且被使用的可能性很低；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8624\">\n                        <p data-nodeid=\"8625\">\n                          被导入的模块在加载时并不存在，需要异步获取；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8626\">\n                        <p data-nodeid=\"8627\">\n                          导入模块的说明符，需要动态构建（静态导入只能使用静态说明符）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8628\">\n                        <p data-nodeid=\"8629\" class=\"te-preview-highlight\">\n                          被导入的模块有副作用（可以理解为模块中会直接运行的代码），这些副作用只有在触发某些条件时才被需要。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"1866\">\n                      <strong data-nodeid=\"2100\"\n                        >深入理解 dynamic import（动态导入）</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1867\">\n                      这里我们不再赘述 dynamic import 的标准用法，你可以从<a\n                        href=\"https://tc39.es/proposal-dynamic-import/#sec-import-calls\"\n                        data-nodeid=\"2104\"\n                        >官方规范</a\n                      >和\n                      <a\n                        href=\"https://github.com/tc39/proposal-dynamic-import\"\n                        data-nodeid=\"2108\"\n                        >tc39 proposal</a\n                      >\n                      中找到最全面和原始的内容。\n                    </p>\n                    <p data-nodeid=\"1868\">\n                      除了基础用法，我想从语言层面强调一个 Function-like\n                      的概念。我们先看这样一段代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">// html 部分\n</div></li><li><div class=\"code-word\">&lt;nav&gt;\n</div></li><li><div class=\"code-word\">  &lt;a href=\"\" data-script-path=\"books\"&gt;Books&lt;/a&gt;\n</div></li><li><div class=\"code-word\">  &lt;a href=\"\" data-script-path=\"movies\"&gt;Movies&lt;/a&gt;\n</div></li><li><div class=\"code-word\">  &lt;a href=\"\" data-script-path=\"video-games\"&gt;Video Games&lt;/a&gt;\n</div></li><li><div class=\"code-word\">&lt;/nav&gt;\n</div></li><li><div class=\"code-word\">&lt;div id=\"content\"&gt;\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li><li><div class=\"code-word\">// script 部分\n</div></li><li><div class=\"code-word\">&lt;script&gt;\n</div></li><li><div class=\"code-word\">  // 获取 element\n</div></li><li><div class=\"code-word\">  const contentEle = document.querySelector('#content');\n</div></li><li><div class=\"code-word\">  const links = document.querySelectorAll('nav &gt; a');\n</div></li><li><div class=\"code-word\">  // 遍历绑定点击逻辑\n</div></li><li><div class=\"code-word\">  for (const link of links) {\n</div></li><li><div class=\"code-word\">    link.addEventListener('click', async (event) =&gt; {\n</div></li><li><div class=\"code-word\">      event.preventDefault();\n</div></li><li><div class=\"code-word\">      try {\n</div></li><li><div class=\"code-word\">        const asyncScript = await import(\\`/${link.dataset.scriptPath}.js\\`);\n</div></li><li><div class=\"code-word\">        // 异步加载脚本\n</div></li><li><div class=\"code-word\">        asyncScript.loadContentTo(contentEle);\n</div></li><li><div class=\"code-word\">      } catch (error) {\n</div></li><li><div class=\"code-word\">        contentEle.textContent = \\`We got error: ${error.message}\\`;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&lt;/script&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1870\">\n                      点击页面当中的 a\n                      标签后，会动态加载一个模块，并调用模块定义的 loadContentTo\n                      方法完成页面内容的填充。\n                    </p>\n                    <p data-nodeid=\"1871\">\n                      表面上看，await import() 的用法使得 import\n                      像一个函数，该函数通过 () 操作符调用并返回一个\n                      Promise。事实上，<strong data-nodeid=\"2117\"\n                        >dynamic import 只是一个 function like\n                        的语法形式</strong\n                      >。在 ES class 特性中，super() 与 dynamic import\n                      类似，也是一个 function like\n                      语法形式。所以它和函数还是有着本质的区别，比如：\n                    </p>\n                    <ul data-nodeid=\"1872\">\n                      <li data-nodeid=\"1873\">\n                        <p data-nodeid=\"1874\">\n                          dynamic import 并非继承自\n                          Function.prototype，因此不能使用 Function\n                          构造函数原型上的方法 impoort.call(null,\n                          <code data-backticks=\"1\" data-nodeid=\"2119\"\n                            >${path}</code\n                          >)，调用它是不合法的；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1875\">\n                        <p data-nodeid=\"1876\">\n                          dynamic import 并非继承自\n                          Object.prototype，因此不能使用 Object\n                          构造函数原型上的方法。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1877\">\n                      虽然 dynamic import\n                      并不是一个真正意义上的函数，但我们可以通过实现一个\n                      dynamicImport 函数模式来实现 dynamic\n                      import，进一步加深对其语法特性的理解。\n                    </p>\n                    <p data-nodeid=\"1878\">\n                      <strong data-nodeid=\"2126\"\n                        >实现一个 dynamic import（动态导入）</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1879\">dynamicImport 函数实现如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> importModule = url =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 返回一个新的 Promise 实例</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Promise((resolve, reject) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 创建 script 标签</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> script = document.createElement(<span class=\"hljs-string\">\"script\"</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> tempGlobal = <span class=\"hljs-string\">\"__tempModuleLoadingVariable\"</span> + Math.random().toString(<span class=\"hljs-number\">32</span>).substring(<span class=\"hljs-number\">2</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    script.type = <span class=\"hljs-string\">\"module\"</span>;\n</div></li><li><div class=\"code-word\">    script.textContent = \\`<span class=\"hljs-keyword\">import</span> * as m from <span class=\"hljs-string\">\"${url}\"</span>; window.${tempGlobal} = m;\\`;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// load 回调</span>\n</div></li><li><div class=\"code-word\">    script.onload = () =&gt; {\n</div></li><li><div class=\"code-word\">      resolve(window[tempGlobal]);\n</div></li><li><div class=\"code-word\">      delete window[tempGlobal];\n</div></li><li><div class=\"code-word\">      script.remove();\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// error 回调</span>\n</div></li><li><div class=\"code-word\">    script.onerror = () =&gt; {\n</div></li><li><div class=\"code-word\">      reject(<span class=\"hljs-keyword\">new</span> Error(<span class=\"hljs-string\">\"Failed to load module script with URL \"</span> + url));\n</div></li><li><div class=\"code-word\">      delete window[tempGlobal];\n</div></li><li><div class=\"code-word\">      script.remove();\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">    document.documentElement.appendChild(script);\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1881\">\n                      这里，我们通过动态插入一个 script 标签实现对目标 script\n                      url 的加载，并通过将模块导出内容赋值给 window\n                      对象。我们使用<code data-backticks=\"1\" data-nodeid=\"2129\"\n                        >__tempModuleLoadingVariable\" +\n                        Math.random().toString(32).substring(2) key</code\n                      >保证模块导出对象的命名不会出现冲突。\n                    </p>\n                    <p data-nodeid=\"1882\">\n                      至此，我们对 dynamic import\n                      的分析告一段落。总之，代码拆分和按需加载并不完全是工程化的实施，同时也要求对语言深刻掌握。\n                    </p>\n                    <h3 data-nodeid=\"1883\">Webpack 赋能代码拆分和按需加载</h3>\n                    <p data-nodeid=\"1884\">\n                      通过前面的学习，我们了解了代码拆分和按需加载，学习了动态导入这一特性。接下来，我想请你思考，如何在代码中安全地使用动态导入而不用去过多关心浏览器的兼容情况，如何在工程环境中实现代码拆分和按需加载呢？\n                    </p>\n                    <p data-nodeid=\"1885\">\n                      以最常见、最典型的前端构建工具——Webpack\n                      为例，我们来分析如何在 Webpack\n                      环境下支持代码拆分和按需加载。\n                    </p>\n                    <p data-nodeid=\"1886\">\n                      总的来说，Webpack 提供了三种相关能力：\n                    </p>\n                    <ul data-nodeid=\"1887\">\n                      <li data-nodeid=\"1888\">\n                        <p data-nodeid=\"1889\">\n                          <strong data-nodeid=\"2139\"\n                            >通过入口配置手动分割代码；</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1890\">\n                        <p data-nodeid=\"1891\">\n                          <strong data-nodeid=\"2143\">动态导入支持；</strong>\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1892\">\n                        <p data-nodeid=\"1893\">\n                          <strong data-nodeid=\"2148\"\n                            >通过 splitChunk\n                            插件提取公共代码（公共代码分割）</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1894\">\n                      其中第一种是通过配置 Entry\n                      来由开发者手动进行代码项目打包，与我们这节内容主题并不相关，就不展开讲解了。下面我们从动态导入和\n                      splitChunk 插件进行详细解析。\n                    </p>\n                    <h4 data-nodeid=\"1895\">\n                      Webpack 对 dynamic import 能力支持\n                    </h4>\n                    <p data-nodeid=\"1896\">\n                      事实上，在 Webpack 早期版本中，提供了 require.ensure()\n                      能力。请注意这是 Webpack 特有的实现：<strong\n                        data-nodeid=\"2156\"\n                        >require.ensure() 能够将其参数对应的文件拆分到一个单独的\n                        bundle 中，此 bundle 会被异步加载</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1897\">\n                      目前 require.ensure() 已经被符合 ES 规范的 dynamic import\n                      取代。调用\n                      import()，被请求的模块和它引用的所有子模块，会分离到一个单独的\n                      chunk 中。值得学习的是，Webpack 对于 import()\n                      的支持和处理非常“巧妙”，我们知道 ES 中关于 dynamic import\n                      的规范，只接受一个参数，表示模块的路径：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span>(\\`${path}\\`) -&gt; Promise\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1899\">\n                      但是 Webpack 是一个构建工具，Webpack 中对于 import()\n                      的处理，可以通过注释接收一些特殊的参数，无须破坏 ES 对于\n                      dynamic import 规定。比如：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span>(\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/* webpackChunkName: \"chunk-name\" */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/* webpackMode: \"lazy\" */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">'module'</span>\n</div></li><li><div class=\"code-word\">);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3155\" class=\"\">\n                      Webpack 在构建时，可以读取到 import\n                      参数，即便是参数内的注释部分，Webpack\n                      也可以获取并处理。如上述代码，<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3157\"\n                        >webpackChunkName: \"chunk-name\"</code\n                      >表示自定义新 chunk 名称；<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"3159\"\n                        >webpackMode: \"lazy\"</code\n                      >表示每个 import()\n                      导入的模块，会生成一个可延迟加载（lazy-loadable）\n                      chunk。此外，webpackMode 的取值还可以是\n                      lazy-once、eager、weak，具体含义可参考：<a\n                        href=\"https://www.webpackjs.com/api/module-methods/#import-\"\n                        data-nodeid=\"3163\"\n                        >Webpack import()</a\n                      >。\n                    </p>\n\n                    <p data-nodeid=\"1902\">\n                      你可能很好奇：Webpack 在编译构建时，会如何处理代码中的\n                      dynamic import 呢？下面，我们一探究竟。\n                    </p>\n                    <p data-nodeid=\"1903\">index.js 文件：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./module'</span>).then((data) =&gt; {\n</div></li><li><div class=\"code-word\">  console.log(data)\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1905\">module.js 文件：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">module</span> = {\n</div></li><li><div class=\"code-word\">\tvalue: <span class=\"hljs-string\">'moduleValue'</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">export <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">module</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1907\">\n                      我们配置入口文件为 index.js，输出文件为 bundle.js，简单的\n                      Webpack 配置信息（webpack@4.44.2）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> path = require(<span class=\"hljs-string\">'path'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  mode: <span class=\"hljs-string\">'development'</span>,\n</div></li><li><div class=\"code-word\">  entry: <span class=\"hljs-string\">'./index.js'</span>,\n</div></li><li><div class=\"code-word\">  output: {\n</div></li><li><div class=\"code-word\">    filename: <span class=\"hljs-string\">'bundle.js'</span>,\n</div></li><li><div class=\"code-word\">    path: path.resolve(__dirname, <span class=\"hljs-string\">'dist'</span>),\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1909\">运行构建命令后，得到两个文件：</p>\n                    <ul data-nodeid=\"1910\">\n                      <li data-nodeid=\"1911\">\n                        <p data-nodeid=\"1912\">0.bundle.js</p>\n                      </li>\n                      <li data-nodeid=\"1913\">\n                        <p data-nodeid=\"1914\">bundle.js</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1915\">\n                      bundle.js 中对 index.js dynamic import 编译结果为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> ({\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/***/</span> <span class=\"hljs-string\">\"./index.js\"</span>:\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/*!******************!*\\\n</span></div></li><li><div class=\"code-word\">  !*** ./index.js ***!\n</div></li><li><div class=\"code-word\">  \\******************/\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/*! no static exports found */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/***/</span> (function(<span class=\"hljs-keyword\">module</span>, <span class=\"hljs-keyword\">exports</span>, __webpack_require__) {\n</div></li><li><div class=\"code-word\">eval(<span class=\"hljs-string\">\"__webpack_require__.e(/*! import() */ 0).then(__webpack_require__.bind(null, /*! ./module */ \\\"./module.js\\\")).then((data) =&gt; {\\n  console.log(data)\\n});\\n\\n//# sourceURL=webpack:///./index.js?\"</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/***/</span> })\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> });\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1917\">\n                      由此可知，Webpack 对于业务中写到的 dynamic import\n                      代码，会转换成了 Webpack 自己自定义的 webpack_require.e\n                      函数，这个函数返回了一个 promise\n                      数组，最终模拟出了动态导入的效果，webpack_require.e\n                      源码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t<span class=\"hljs-comment\">// This file contains only the entry chunk.</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t<span class=\"hljs-comment\">// The chunk loading function for additional chunks</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t__webpack_require__.e = <span class=\"hljs-function\">function <span class=\"hljs-title\">requireEnsure</span><span class=\"hljs-params\">(chunkId)</span> </span>{\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-keyword\">var</span> promises = [];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-comment\">// JSONP chunk loading for javascript</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-keyword\">var</span> installedChunkData = installedChunks[chunkId];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-keyword\">if</span>(installedChunkData !== <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// 0 means \"already installed\".</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t<span class=\"hljs-comment\">// a Promise means \"currently loading\".</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t<span class=\"hljs-keyword\">if</span>(installedChunkData) {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\tpromises.push(installedChunkData[<span class=\"hljs-number\">2</span>]);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t} <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t<span class=\"hljs-comment\">// setup Promise in chunk cache</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t<span class=\"hljs-keyword\">var</span> promise = <span class=\"hljs-keyword\">new</span> Promise(function(resolve, reject) {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t});\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\tpromises.push(installedChunkData[<span class=\"hljs-number\">2</span>] = promise);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t<span class=\"hljs-comment\">// start chunk loading</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t<span class=\"hljs-keyword\">var</span> script = document.createElement(<span class=\"hljs-string\">'script'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t<span class=\"hljs-keyword\">var</span> onScriptComplete;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\tscript.charset = <span class=\"hljs-string\">'utf-8'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\tscript.timeout = <span class=\"hljs-number\">120</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t<span class=\"hljs-keyword\">if</span> (__webpack_require__.nc) {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\tscript.setAttribute(<span class=\"hljs-string\">\"nonce\"</span>, __webpack_require__.nc);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t<span class=\"hljs-comment\">// create error before stack unwound to get useful stacktrace later</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t<span class=\"hljs-keyword\">var</span> error = <span class=\"hljs-keyword\">new</span> Error();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\tonScriptComplete = function (event) {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t<span class=\"hljs-comment\">// avoid mem leaks in IE.</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\tscript.onerror = script.onload = <span class=\"hljs-keyword\">null</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\tclearTimeout(timeout);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t<span class=\"hljs-keyword\">var</span> chunk = installedChunks[chunkId];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t<span class=\"hljs-keyword\">if</span>(chunk !== <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t\t<span class=\"hljs-keyword\">if</span>(chunk) {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t\t\t<span class=\"hljs-keyword\">var</span> errorType = event &amp;&amp; (event.type === <span class=\"hljs-string\">'load'</span> ? <span class=\"hljs-string\">'missing'</span> : event.type);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t\t\t<span class=\"hljs-keyword\">var</span> realSrc = event &amp;&amp; event.target &amp;&amp; event.target.src;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t\t\terror.message = <span class=\"hljs-string\">'Loading chunk '</span> + chunkId + <span class=\"hljs-string\">' failed.\\n('</span> + errorType + <span class=\"hljs-string\">': '</span> + realSrc + <span class=\"hljs-string\">')'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t\t\terror.name = <span class=\"hljs-string\">'ChunkLoadError'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t\t\terror.type = errorType;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t\t\terror.request = realSrc;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t\t\tchunk[<span class=\"hljs-number\">1</span>](error);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t\t}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\t}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t<span class=\"hljs-keyword\">var</span> timeout = setTimeout(function(){\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t\tonScriptComplete({ type: <span class=\"hljs-string\">'timeout'</span>, target: script });\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\t}, <span class=\"hljs-number\">120000</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\tdocument.head.appendChild(script);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-keyword\">return</span> Promise.all(promises);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1919\">\n                      代码已经非常直观，webpack_require.e 主要做了如下内容：\n                    </p>\n                    <ul data-nodeid=\"1920\">\n                      <li data-nodeid=\"1921\">\n                        <p data-nodeid=\"1922\">\n                          定义一个 promise 数组 promises，最终以\n                          Promise.all(promises) 形式返回；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1923\">\n                        <p data-nodeid=\"1924\">\n                          通过 installedChunkData\n                          变量判断当前模块是否已经被加载，如果已经加载过，将模块内容\n                          push 到 promises 数组中；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1925\">\n                        <p data-nodeid=\"1926\">\n                          如果当前模块没有被加载过，则先定义一个\n                          promise，然后创建一个 script\n                          标签，加载模块内容，并定义此 script 的 onload 和\n                          onerror 回调；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1927\">\n                        <p data-nodeid=\"1928\">\n                          最终对新增 script 标签对应的 promise\n                          （resolve/reject）处理定义在 webpackJsonpCallback\n                          函数中。\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t<span class=\"hljs-function\">function <span class=\"hljs-title\">webpackJsonpCallback</span><span class=\"hljs-params\">(data)</span> </span>{\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-keyword\">var</span> chunkIds = data[<span class=\"hljs-number\">0</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-keyword\">var</span> moreModules = data[<span class=\"hljs-number\">1</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-comment\">// add \"moreModules\" to the modules object,</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-comment\">// then flag all \"chunkIds\" as loaded and fire callback</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-keyword\">var</span> moduleId, chunkId, i = <span class=\"hljs-number\">0</span>, resolves = [];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-keyword\">for</span>(;i &lt; chunkIds.length; i++) {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\tchunkId = chunkIds[i];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t<span class=\"hljs-keyword\">if</span>(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) &amp;&amp; installedChunks[chunkId]) {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\tresolves.push(installedChunks[chunkId][<span class=\"hljs-number\">0</span>]);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\tinstalledChunks[chunkId] = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-keyword\">for</span>(moduleId in moreModules) {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t<span class=\"hljs-keyword\">if</span>(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\t}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-keyword\">if</span>(parentJsonpFunction) parentJsonpFunction(data);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t<span class=\"hljs-keyword\">while</span>(resolves.length) {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t\tresolves.shift()();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t\t}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/******/</span> \t};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1930\">\n                      完整的源码内容我们不再一一粘贴，你可以参考下图的整个处理流程：\n                    </p>\n                    <p data-nodeid=\"1931\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/05/28/Cip5yF_9BziALsMpAAFUvdp7KoQ251.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"2191\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1932\">\n                      <p style=\"text-align: center\">\n                        webpack_require.e 处理流程图\n                      </p>\n                    </div>\n                    <h4 data-nodeid=\"1933\">\n                      Webpack 中 splitChunk 插件和代码分割\n                    </h4>\n                    <p data-nodeid=\"1934\">\n                      你可能对 Webpack 4.0 版本推出的 splitChunk\n                      插件并不陌生。这里需要注意的是，<strong data-nodeid=\"2206\"\n                        >代码分割区别于动态加载，它们本质上是两个概念</strong\n                      >。前文介绍到的 dynamic\n                      import（动态导入）技术本质上一种是懒加载——<strong\n                        data-nodeid=\"2207\"\n                        >按需加载</strong\n                      >，即只有在需要的时候，才加载代码。而以 splitChunk\n                      插件为代表的代码分割，是一种<strong data-nodeid=\"2208\"\n                        >代码拆包</strong\n                      >技术，与代码合并打包是一个相逆的过程。\n                    </p>\n                    <p data-nodeid=\"1935\">\n                      代码分割的核心意义在于<strong data-nodeid=\"2214\"\n                        >避免重复打包以及提升缓存利用率，进而提升访问速度</strong\n                      >。比如，我们将不常变化的第三方依赖库进行代码拆分，方便对第三方依赖库缓存，同时抽离公共逻辑，减少单个文件的\n                      size 大小。\n                    </p>\n                    <p data-nodeid=\"1936\">\n                      了解了代码分割的概念，那么就很好理解 Webpack splitChunk\n                      插件满足下述条件时，自动进行代码分割：\n                    </p>\n                    <ul data-nodeid=\"4972\">\n                      <li data-nodeid=\"4973\">\n                        <p data-nodeid=\"4974\">\n                          可以被共享的（即重复被引用的）模块或者 node_modules\n                          中的模块；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4975\">\n                        <p data-nodeid=\"4976\" class=\"\">\n                          在压缩前体积大于 30KB 的模块；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4977\">\n                        <p data-nodeid=\"4978\">\n                          在按需加载模块时，并行加载的模块不得超过 5 个；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4979\">\n                        <p data-nodeid=\"4980\">\n                          在页面初始化加载时，并行加载的模块不得超过 3 个。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"1946\">\n                      当然，上述配置数据是完全可以由开发者掌握主动权，并根据项目实际情况进行调整的。更多内容可以参考：<a\n                        href=\"https://www.webpackjs.com/plugins/split-chunks-plugin/\"\n                        data-nodeid=\"2225\"\n                        >split-chunks-plugin</a\n                      >。不过需要注意的是，关于 splitChunk 插件的默认参数是\n                      Webpack\n                      团队所设定的通用性优化手段，是经过“千挑万选”确定的，因此适用于多数开发场景。<strong\n                        data-nodeid=\"2231\"\n                        >如果在没有实践测量的情况下，不建议开发者手动优化这些参数</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1947\">\n                      另外， Webpack splitChunk\n                      插件也支持上文提到的“按需加载”，即可以和 dynamic import\n                      搭配使用。比如，page1 和 page2 页面里动态引入 async.js，即\n                      page1.js 和 page2.js 都有这样的逻辑：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-comment\">/* webpackChunkName: \"async.js\" */</span><span class=\"hljs-string\">\"./async\"</span>).then(common =&gt; {\n</div></li><li><div class=\"code-word\"> console.log(common);\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1949\">\n                      在进行构建后，async.js 会被单独打包。如果进一步在 async.js\n                      文件中引入 module.js 模块，即 async.js 中的代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span>(<span class=\"hljs-comment\">/* webpackChunkName: \"module.js\" */</span><span class=\"hljs-string\">\"./module.js\"</span>).then(<span class=\"hljs-keyword\">module</span> =&gt; {\n</div></li><li><div class=\"code-word\"> console.log(<span class=\"hljs-keyword\">module</span>);\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1951\">依赖关系图如下图所示：</p>\n                    <p data-nodeid=\"1952\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/58/CgqCHl_9YFqAKybyAAGp092kEyI435.png\"\n                        alt=\"Lark20210112-163942.png\"\n                        data-nodeid=\"2237\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1953\">\n                      <p style=\"text-align: center\">三重依赖关系图</p>\n                    </div>\n                    <p data-nodeid=\"1954\">\n                      最终打包结果会按需动态引入 async.js，同时 module.js\n                      也被成功单独拆分出来。\n                    </p>\n                    <h3 data-nodeid=\"1955\">总结</h3>\n                    <p data-nodeid=\"1956\">\n                      这一讲我们就代码拆分和按需加载这一话题进行了分析：\n                    </p>\n                    <ul data-nodeid=\"1957\">\n                      <li data-nodeid=\"1958\">\n                        <p data-nodeid=\"1959\">\n                          首先从代码拆分和按需加载的业务场景入手，分析了这一技术手段的必要性和业务价值；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1960\">\n                        <p data-nodeid=\"1961\">\n                          接着，我们从 ES 规范入手，深入解读了 dynamic import\n                          动态加载这一核心语言特性，同时从 Tree Shaking 和编写\n                          Babel\n                          插件的角度，在较深层的语法和工程理念上对比了按需打包这一话题；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1962\">\n                        <p data-nodeid=\"1963\">\n                          最后，我们通过对 Webpack\n                          能力的探究，剖析了如何在工程中实现代码拆分和按需加载。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1964\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/05/34/CgpVE1_9YDyAVOWwAAel8VpUNt4885.png\"\n                        alt=\"Lark20210112-163852.png\"\n                        data-nodeid=\"2246\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1965\">\n                      在实际工作中，我希望你能利用本节内容，并结合项目实际情况，排查代码拆分和按需加载是否合理；如果有不合理之处，可以动手实践、实验，进行论证。\n                    </p>\n                    <p data-nodeid=\"1966\" class=\"\">\n                      本节内容既有理论内容，又有工程实践，只要你有“庖丁解牛”的决心，相信很快就有“入木三分”的理解。\n                    </p>\n            "}