{"title":"09&nbsp;| 二分搜索：为什么说有序皆可用二分？","context":"\n                    <p data-nodeid=\"323100\" class=\"\">\n                      二分搜索在工程中有很多的应用，比如：操作系统、MySQL\n                      、Hadoop、Spark，查找数据的时候都会用到二分搜索。\n                    </p>\n                    <p data-nodeid=\"323101\">\n                      今天我们主要介绍如何使用两个简单的二分搜索模板，搞定所有的二分题目。你将收获：\n                    </p>\n                    <ul data-nodeid=\"323102\">\n                      <li data-nodeid=\"323103\">\n                        <p data-nodeid=\"323104\">二分搜索的两个标准模板</p>\n                      </li>\n                      <li data-nodeid=\"323105\">\n                        <p data-nodeid=\"323106\">二分搜索的提问破题法</p>\n                      </li>\n                      <li data-nodeid=\"323107\">\n                        <p data-nodeid=\"323108\">二分搜索的切分法</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323109\">\n                      掌握这些知识点，足够应对面试中出现的二分搜索题了。Let's\n                      GO！\n                    </p>\n                    <h3 data-nodeid=\"323110\">二分搜索基础</h3>\n                    <p data-nodeid=\"323111\">\n                      二分搜索的目的是在一个有序的数组 A\n                      里面，找到一个给定的数。比如我们想要在下面的数组里面查找\n                      target=3。（<strong data-nodeid=\"323523\"\n                        >小写字母 l 与 1 不太容易区分，文中都用大写 L\n                        来表示。但是在图片和代码中，仍然用小写。</strong\n                      >）\n                    </p>\n                    <p data-nodeid=\"323112\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BB/Cgp9HWBdnQ2ADowqABN13BB0LLU138.gif\"\n                        alt=\"1.gif\"\n                        data-nodeid=\"323526\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323113\">\n                      【<strong data-nodeid=\"323532\">代码</strong\n                      >】这里我们一起来复习一下这段代码（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span>[] A, <span class=\"hljs-keyword\">long</span> target)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (A == <span class=\"hljs-keyword\">null</span> || A.length == <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 首先设定初始区间，这里我们采用开闭原则[l, r)</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>, r = A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 循环结束的判断条件是整个区间为空区间，那么运行结束。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 我们使用的是开闭原则来表示一个区间，所以当l &lt; r的时候</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 我们要查找的区间还不是一个空区间。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">while</span> (l &lt; r) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> m = l + ((r - l) &gt;&gt; <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (A[m] == target) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (A[m] &lt; target) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 当中点比目标值小时，需要把左边的部分扔掉。即[l, m]</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 这个区间扔掉，由于我们采用的是开闭原则，所以新的区间需要是</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// [m + 1, r), 因引需要将l = m + 1</span>\n</div></li><li><div class=\"code-word\">      l = m + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 当中点比目标值大时，需要把右边的部分扔掉，即[m, r)这个区间扔掉。</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 那么新区间变成[l, m)。由于我们使用的是开闭原则，</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 只需要设置r = m即可。</span>\n</div></li><li><div class=\"code-word\">      r = m;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"323115\">\n                      <p data-nodeid=\"323116\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/T1560.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323536\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/T1560.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323540\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/T1560.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323544\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323117\">\n                      <strong data-nodeid=\"323549\">复杂度分析</strong\n                      >：在实行二分查找时，由于每次我们都会扔掉一半的数据，所以总共只需要\n                      O(lgn)的时间复杂度，空间复杂度是 O(1)。\n                    </p>\n                    <p data-nodeid=\"323118\">\n                      【<strong data-nodeid=\"323558\">小结</strong\n                      >】虽然二分搜索是一个非常基础的题目，但作为面试官，我看到很多候选人一不小心就栽在它上面。因此，这里我需要重点强调一下二分搜索里面的<strong\n                        data-nodeid=\"323559\"\n                        >几个关键考点。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"323119\">\n                      <strong data-nodeid=\"323574\">1. 开闭原则</strong\n                      >，开闭原则是一段区间的表示法。你一定要注意，写二分搜索的时候，每一个区间的表示都是<strong\n                        data-nodeid=\"323575\"\n                        >严格按照开闭原则进行</strong\n                      >的。这是面试中一个<strong data-nodeid=\"323576\"\n                        >非常重要的考点</strong\n                      >（敲黑板，我待过的几家公司都喜欢考察）。\n                    </p>\n                    <p data-nodeid=\"323120\">\n                      <strong data-nodeid=\"323583\">2. 区间的变化</strong\n                      >，要深度理解区间的三种情况：\n                    </p>\n                    <p data-nodeid=\"323121\">\n                      1）扔掉左区间为什么是 L = M + 1，扔掉右区间为什么是 R =\n                      M；\n                    </p>\n                    <p data-nodeid=\"323122\">\n                      2）为什么一个 L 要加 1，一个 R 不加 1；\n                    </p>\n                    <p data-nodeid=\"323123\">\n                      3）为什么循环的条件需要是 L &lt; R。\n                    </p>\n                    <p data-nodeid=\"323124\">\n                      <strong data-nodeid=\"323595\">3. 代码流畅度</strong\n                      >，这已经是一个非常非常基础的算法了，如果你在写代码的时候还会出现卡壳，那么我建议你思考以下两个问题：\n                    </p>\n                    <p data-nodeid=\"323125\">\n                      1）是否真的深度理解开闭原则在二分搜索里面的体现？\n                    </p>\n                    <p data-nodeid=\"323126\">2）是否真的记住这个代码模板了？</p>\n                    <p data-nodeid=\"323127\">\n                      这里请你思考，或者说再联想一下，其他算法是否深度依赖<strong\n                        data-nodeid=\"323603\"\n                        >开闭原则</strong\n                      >呢？\n                    </p>\n                    <p data-nodeid=\"323128\">\n                      根据条件，在运行过程中，不断<strong data-nodeid=\"323609\"\n                        >扔掉一半数据</strong\n                      >，然后在剩下的一半数据进行查找的算法还有哪些？这里我简单罗列了一下，如下图所示：\n                    </p>\n                    <p data-nodeid=\"323129\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BB/Cgp9HWBdnTWAWu8YAADoiX1uAos462.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"323612\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323130\">\n                      你还能做进一步的补充吗？在学习的过程中，一定要有意识地让新的知识与旧的知识产生联系。上图展示的是一种广度拓展，接下来我们来看一下深度拓展。\n                    </p>\n                    <h4 data-nodeid=\"323131\">例 1：有序数组中最左边的元素</h4>\n                    <p data-nodeid=\"323132\">\n                      【<strong data-nodeid=\"323620\">题目</strong\n                      >】给定一个有序数组，返回指定元素在数组的最左边的位置\n                    </p>\n                    <p data-nodeid=\"323133\">\n                      输入：A = [1, 2, 2, 2, 2, 3, 3], target = 2\n                    </p>\n                    <p data-nodeid=\"323134\">输出：1</p>\n                    <p data-nodeid=\"323135\">\n                      解释：第一个出现的 2 位于下标\n                      1，是从左往右看时，第一个出现 2 的位置。\n                    </p>\n                    <p data-nodeid=\"323136\">\n                      【<strong data-nodeid=\"323641\">分析</strong\n                      >】我曾经在很多公司的电面中遇到过这个题目。其实它并不难，本质上，是一个<strong\n                        data-nodeid=\"323642\"\n                        >模板题</strong\n                      >，是我们解决后续问题的基础，你需要<strong\n                        data-nodeid=\"323643\"\n                        >非常牢固地理解并且记忆它的代码</strong\n                      >。否则你的二分搜索就是“沙上建塔”。\n                    </p>\n                    <p data-nodeid=\"323137\">\n                      这道题目可能会存在一些<strong data-nodeid=\"323649\"\n                        >变形</strong\n                      >，比如：“找到有序数组中第一个出现的\n                      2”，或者“找到数组中最后一个出现的 2”。\n                    </p>\n                    <p data-nodeid=\"323138\">\n                      一个<strong data-nodeid=\"323655\">不正确的回答</strong\n                      >是：“先利用二分找到一个\n                      2，然后再向左右两边搜索”。但是这么一来，时间复杂度就变成\n                      O(N)。\n                    </p>\n                    <p data-nodeid=\"323139\">\n                      那么有没有办法降低复杂度呢？这里我们一起来看一下在二分搜索的基础上，<strong\n                        data-nodeid=\"323661\"\n                        >如何找到最左边的元素</strong\n                      >。我们还是先模拟一把。\n                    </p>\n                    <p data-nodeid=\"323140\">\n                      <strong data-nodeid=\"323667\">1. 模拟</strong>\n                    </p>\n                    <p data-nodeid=\"323141\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/B7/CioPOWBdnUqAayqLABLk-NmvXA0875.gif\"\n                        alt=\"2.gif\"\n                        data-nodeid=\"323670\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323142\">\n                      <strong data-nodeid=\"323676\">2. 规律</strong>\n                    </p>\n                    <p data-nodeid=\"323143\">\n                      我们看一下上面模拟的目的已经变为：找到一个<strong\n                        data-nodeid=\"323692\"\n                        >最终切分点 L</strong\n                      >，需要满足 [0, L) 区间里面的元素都必须小于 target，而 [L,\n                      ~) 右边的元素都 &gt;= target。<strong data-nodeid=\"323693\"\n                        >左边界操作原则如下</strong\n                      >：\n                    </p>\n                    <ul data-nodeid=\"323144\">\n                      <li data-nodeid=\"323145\">\n                        <p data-nodeid=\"323146\">\n                          查找的区间一直是一个左开右闭区间 [L, R)；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323147\">\n                        <p data-nodeid=\"323148\">\n                          每次总是把 &gt;= target 的区间扔掉，<strong\n                            data-nodeid=\"323702\"\n                            >大于等于的不要了，然后设置 R = M</strong\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323149\">\n                        <p data-nodeid=\"323150\">\n                          当最后的区间元素都小于 target 的时候，移动 L，<strong\n                            data-nodeid=\"323708\"\n                            >小于的也不要了，然后设置 L = M + 1</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323151\">\n                      可以总结为“<strong data-nodeid=\"323714\"\n                        >这也不要，那也不要”</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"323152\">\n                      那么当程序最终执行结束的时候，L 必然处于以下情况之一。\n                    </p>\n                    <ul data-nodeid=\"323153\">\n                      <li data-nodeid=\"323154\">\n                        <p data-nodeid=\"323155\">\n                          如果有序数组中<strong data-nodeid=\"323721\"\n                            >存在 target</strong\n                          >，那么必然找到最左边的 target\n                          的位置。也就是我们模拟的情况，找到最左边的第一个 2。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323156\">\n                        <p data-nodeid=\"323157\">\n                          如果有序数组中<strong data-nodeid=\"323727\"\n                            >不存在 target</strong\n                          >，那么：\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323158\">\n                      1）当数组中的元素都比 target 小时，L\n                      指向数组的长度，此时访问 A[L] 非法；\n                    </p>\n                    <p data-nodeid=\"323159\">2）否则，A[L] 必然 &gt; target。</p>\n                    <p data-nodeid=\"323160\">\n                      可以总结为“<strong data-nodeid=\"323743\"\n                        >要么越界，要么大于等于 target</strong\n                      >”。\n                    </p>\n                    <p data-nodeid=\"323161\">\n                      <strong data-nodeid=\"323749\">3. 匹配</strong>\n                    </p>\n                    <p data-nodeid=\"323162\">\n                      如果仔细一点，可以发现，这里我们在二分的时候，与传统的二分搜索相比，只是去掉了如下这个条件，最终就可以让\n                      L 指到正确的位置。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (A[m] == target) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323164\">\n                      <strong data-nodeid=\"323756\">4. 边界</strong>\n                    </p>\n                    <p data-nodeid=\"323165\">实际上还有几种边界情况需要讨论：</p>\n                    <ul data-nodeid=\"323166\">\n                      <li data-nodeid=\"323167\">\n                        <p data-nodeid=\"323168\">空数组，或长度为 0 的数组；</p>\n                      </li>\n                      <li data-nodeid=\"323169\">\n                        <p data-nodeid=\"323170\">数组中的元素都小于 target；</p>\n                      </li>\n                      <li data-nodeid=\"323171\">\n                        <p data-nodeid=\"323172\">数组中的元素都大于 target；</p>\n                      </li>\n                      <li data-nodeid=\"323173\">\n                        <p data-nodeid=\"323174\">\n                          数组中的元素有大有小，但是 target 不存在里面；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323175\">\n                        <p data-nodeid=\"323176\">\n                          数组中的元素只有一个 target。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323177\">\n                      以上这些边界都很重要，由于篇幅的原因，这里我不再详细展开。你可以自己找到一些例子来试一下“<strong\n                        data-nodeid=\"323768\"\n                        >左边界操作原则</strong\n                      >”。\n                    </p>\n                    <p data-nodeid=\"323178\">\n                      <strong data-nodeid=\"323777\">面试官的建议</strong\n                      >：<strong data-nodeid=\"323778\">真实的面试中</strong\n                      >，很多人写的二分搜索的代码，经常卡在上面这几种边界上。因此，在面试中写完代码之后，主动写上测试用例是一个加分项。\n                    </p>\n                    <p data-nodeid=\"323179\">\n                      【<strong data-nodeid=\"323788\">代码</strong>】<strong\n                        data-nodeid=\"323789\"\n                        >模板代码</strong\n                      >如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">lowerBound</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span>[] A, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">long</span> target)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>, r = n;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">while</span> (l &lt; r) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> m = l + ((r - l) &gt;&gt; <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (A[m] &lt; target) {\n</div></li><li><div class=\"code-word\">      l = m + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      r = m;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> l;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"323181\">\n                      <p data-nodeid=\"323182\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/T1560.2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323793\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/T1560.2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323797\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/T1560.2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323801\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323183\">\n                      <strong data-nodeid=\"323806\">复杂度分析</strong\n                      >：我们总是利用二分搜索一直进行下去，直接找到目标解。因此，算法的时间复杂度为\n                      O(lgn)，空间复杂度为 O(1)。\n                    </p>\n                    <p data-nodeid=\"323184\">\n                      【<strong data-nodeid=\"323812\">小结</strong\n                      >】代码虽然短，但是我在面试候选人的时候，发现大家很容易写错这块代码。下面我给你总结一下面试时的考点。\n                    </p>\n                    <p data-nodeid=\"323185\">\n                      <strong data-nodeid=\"323817\">面试考察点</strong>：\n                    </p>\n                    <ul data-nodeid=\"323186\">\n                      <li data-nodeid=\"323187\">\n                        <p data-nodeid=\"323188\">\n                          循环什么时候终止？（对应代码第 3 行）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323189\">\n                        <p data-nodeid=\"323190\">\n                          什么情况下更新左边界？如何更新的？（对应代码第 5~6\n                          行）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323191\">\n                        <p data-nodeid=\"323192\">\n                          什么情况下更新右边界？如何更新的？（对应代码第 7~8\n                          行）\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323193\">\n                      所有这些问题的本质，都可以归结到一个知识点：<strong\n                        data-nodeid=\"323830\"\n                        >开闭原则</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"323194\">\n                      <strong data-nodeid=\"323834\">变形与延伸：</strong>\n                    </p>\n                    <p data-nodeid=\"323195\">\n                      如果我们有了 lowerBound 函数，就可以利用 lowerBound\n                      函数来写新的 binarySearch 算法了。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">binarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span>[] A, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">long</span> target)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> l = lowerBound(A, n, target);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> l &lt; n &amp;&amp; A[l] == target;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323197\">\n                      实际上，在 C++ 的 STL 库里面的 binary_search\n                      函数就是通过这种方式实现的。\n                    </p>\n                    <p data-nodeid=\"323198\">\n                      接下来我们看第二个模板 upperBound，它的要求是：写一个函数\n                      upperBound 寻找数组中给定元素的上界。注意，上界是刚好比\n                      target 大的那个元素的位置。比如 A = [1, 1, 100,\n                      100]，target = 1，那么 upperBound 应该返回下标 2。\n                    </p>\n                    <p data-nodeid=\"323199\">\n                      upperBound 函数是找一个切分点 y，使得：\n                    </p>\n                    <ul data-nodeid=\"323200\">\n                      <li data-nodeid=\"323201\">\n                        <p data-nodeid=\"323202\">\n                          所有 [0, y) 左区间里面的元素 &lt;= target\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323203\">\n                        <p data-nodeid=\"323204\">\n                          target &lt; 所有 [y, ~) 右区间里面的元素\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323205\">\n                      根据 upperBound 的目标，我们需要调整一下二分的策略：\n                    </p>\n                    <ul data-nodeid=\"323206\">\n                      <li data-nodeid=\"323207\">\n                        <p data-nodeid=\"323208\">\n                          当 A[M] &lt;= target 的时候，需要把 [L, M]\n                          区间扔掉。此时需要设置 L = M + 1；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323209\">\n                        <p data-nodeid=\"323210\">\n                          当 A[M] &gt; target 的时候，需要把 (M, R)\n                          区间扔掉。此时需要设置 R = M。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323211\">\n                      那么我们可以写出<strong data-nodeid=\"323879\"\n                        >模板代码</strong\n                      >如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">upperBound</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span>[] A, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">long</span> target)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>, r = n;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">while</span> (l &lt; r) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> m = l + ((r - l) &gt;&gt; <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (A[m] &lt;= target) {\n</div></li><li><div class=\"code-word\">      l = m + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      r = m;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> l;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"323213\">\n                      <p data-nodeid=\"323214\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/T1562.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323883\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/T1562.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323887\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/T1562.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323891\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323215\">\n                      到现在为止，我们已经收获了<strong data-nodeid=\"323897\"\n                        >两个模板代码</strong\n                      >：\n                    </p>\n                    <ul data-nodeid=\"323216\">\n                      <li data-nodeid=\"323217\">\n                        <p data-nodeid=\"323218\">\n                          lowerBound，可以用来顺便解决掉 binarySearch；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323219\">\n                        <p data-nodeid=\"323220\">upperBound。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323221\">\n                      <strong data-nodeid=\"323916\">重要</strong\n                      >：在准备面试前，一定要<strong data-nodeid=\"323917\"\n                        >理解并且熟记</strong\n                      >这两个模板代码。有个小技巧，其实 lowerBound 与 upperBound\n                      代码是完全一样的。<strong data-nodeid=\"323918\"\n                        >唯一</strong\n                      >不一样的是 A[m] 与 target 比较的时候：\n                    </p>\n                    <ul data-nodeid=\"323222\">\n                      <li data-nodeid=\"323223\">\n                        <p data-nodeid=\"323224\">\n                          lowerBound 是 A[m] &lt; target\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323225\">\n                        <p data-nodeid=\"323226\">\n                          upperBound 是 A[m] &lt;= target\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323227\">\n                      如果熟练地掌握了这两个模板，那么已经有一些题目就可以轻松解决了，这里我给你留了\n                      2 道练习题，帮你巩固下这个知识点。\n                    </p>\n                    <p data-nodeid=\"323228\">\n                      <strong data-nodeid=\"323938\">练习题 1</strong\n                      >：给定一个有序数组和一个数\n                      target，请返回起始位置和终止位置。\n                    </p>\n                    <blockquote data-nodeid=\"323229\">\n                      <p data-nodeid=\"323230\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/34.%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323942\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/34.%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323946\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/34.%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323950\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323231\">\n                      <strong data-nodeid=\"323955\">练习题 2</strong\n                      >：给定一个有序数组，如果要将一个数\n                      target，插入到数组中，结果仍然有序。返回插入位置。\n                    </p>\n                    <blockquote data-nodeid=\"323232\">\n                      <p data-nodeid=\"323233\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/35.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323959\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/35.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323963\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/35.%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"323967\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323234\">\n                      这里我们就这两个模板做个简单的小结：\n                    </p>\n                    <p data-nodeid=\"323235\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/27/B8/CioPOWBdnWuAHlaZAACvdO-eOpY916.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"323971\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323236\">\n                      接下来我们看一下一些藏得比较“深”，但是可以用二分搜索来破解的题。\n                    </p>\n                    <h3 data-nodeid=\"323237\">提问破题法</h3>\n                    <p data-nodeid=\"323238\">\n                      到这里我们已经学习了两个二分的模板，一个 lowerBound，一个\n                      upperBound。如果将前面学过的二分搜索进行更高层次的抽象，可以发现，利用二分搜索需要<strong\n                        data-nodeid=\"323979\"\n                        >2 个条件</strong\n                      >：\n                    </p>\n                    <ul data-nodeid=\"323239\">\n                      <li data-nodeid=\"323240\">\n                        <p data-nodeid=\"323241\">确定搜索空间</p>\n                      </li>\n                      <li data-nodeid=\"323242\">\n                        <p data-nodeid=\"323243\">搜索空间里面的值有序</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323244\">\n                      这里我们引入两个符号：x 和 f(x)（放心，我们<strong\n                        data-nodeid=\"323987\"\n                        >不会讲太多数学</strong\n                      >的）。\n                    </p>\n                    <ul data-nodeid=\"323245\">\n                      <li data-nodeid=\"323246\">\n                        <p data-nodeid=\"323247\">x 表示搜索空间</p>\n                      </li>\n                      <li data-nodeid=\"323248\">\n                        <p data-nodeid=\"323249\">f(x) 表示通过 x 得到的值</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323250\">对于最原始版本的二分搜索来说：</p>\n                    <ul data-nodeid=\"323251\">\n                      <li data-nodeid=\"323252\">\n                        <p data-nodeid=\"323253\">\n                          x 就是下标 i，范围为 [0, N)，其中 N 表示数组的长度；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323254\">\n                        <p data-nodeid=\"323255\">f(x) 就是 A[i]。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323256\">\n                      不过，有的面试题给的数组 A[]\n                      并不是有序的，此时需要寻找新的 x 和 f(x) 来破题。\n                    </p>\n                    <p data-nodeid=\"323257\">\n                      那么如何找到 x 和 f(x)？这里就一句话：<strong\n                        data-nodeid=\"324012\"\n                        >提问就是关键</strong\n                      >。是时候拿出二分搜索比较通用的<strong\n                        data-nodeid=\"324013\"\n                        >提问破题法</strong\n                      >了，不过这个方法需要通过例题才能学会，让我们一起看例题。\n                    </p>\n                    <h4 data-nodeid=\"323258\">例 2：寻找山峰</h4>\n                    <p data-nodeid=\"323259\">\n                      【<strong data-nodeid=\"324020\">题目</strong\n                      >】数组里的元素组成一个山峰，位于峰顶的元素，总是比它左边和右边的元素大。请把这个下标找出来。\n                    </p>\n                    <p data-nodeid=\"323260\">输入：A = [1, 2, 3, 2, 1]</p>\n                    <p data-nodeid=\"323261\">输出：2</p>\n                    <p data-nodeid=\"323262\">\n                      <strong data-nodeid=\"324034\">解释</strong>：我们发现 A[2]\n                      = 3 大于左边和右边的所有元素，并且数组刚好是个山峰。\n                    </p>\n                    <p data-nodeid=\"323263\">\n                      【<strong data-nodeid=\"324052\">分析</strong\n                      >】前面我们说过击破二分搜索题的关键就是<strong\n                        data-nodeid=\"324053\"\n                        >看提问</strong\n                      >。<strong data-nodeid=\"324054\">提问破题法</strong\n                      >的<strong data-nodeid=\"324055\">第一步</strong\n                      >：要什么，什么就是 x。\n                    </p>\n                    <blockquote data-nodeid=\"323264\">\n                      <p data-nodeid=\"323265\">\n                        找到下标，满足比左边和右边的元素都大\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323266\">\n                      问题要的是“数组<strong data-nodeid=\"324068\">的下标</strong\n                      >”，所以我们可以确定：<strong data-nodeid=\"324069\"\n                        >x 就是数组的下标</strong\n                      >。范围就是 [1, N-1)，其中 N 表示数组的长度。\n                    </p>\n                    <p data-nodeid=\"323267\">\n                      注意这道题的要求，因为最优解的左边有元素，所以最小下标必然为\n                      1。而最优解的右边也有元素，所以最大下标值为\n                      N-2。那么范围用开闭原则表示，就应该是 [1,\n                      N-1)。此时我们已经可以写出一点草稿代码了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>, r = N-<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (l &lt; r) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> m = l + ((r-l)&gt;&gt;<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 这个m就是我们的x</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> mov = f(m); <span class=\"hljs-comment\">// 待定：这里mov表示是中间映射的值，即f(x)</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 待定：使用lowerBound还是upperBound?</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323269\">\n                      那么我们再看一下如何确定 f(x)。<strong\n                        data-nodeid=\"324082\"\n                        >提问破题法</strong\n                      >的<strong data-nodeid=\"324083\">第二步</strong\n                      >：满足约束条件的 f(x)=0。\n                    </p>\n                    <p data-nodeid=\"323270\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/27/B8/CioPOWBdnXmAS4ZMAABruIWMDas017.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"324086\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323271\">\n                      这就得出 f(x) 表示的含义：当给定一个下标 x，如果 A[x - 1]\n                      &lt;A[x] &gt;A[x + 1]，那么 f(x) =\n                      0。注意，此时我们是把满足条件情况设置为\n                      0（实际上，也可以设置为其他值，只是 0\n                      在后面操作时更加容易简化代码）。分析到这里，我们可以再加上一点草稿代码了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> m)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (A[m-<span class=\"hljs-number\">1</span>] &lt; A[m] &amp;&amp; A[m] &lt; A[m+<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 待定：其他情况返回什么？</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>, r = N-<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (l &lt; r) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> m = l + ((r-l)&gt;&gt;<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 这个m就是我们的x</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> mov = f(m);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 待定：使用lowerBound还是upperBound?</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323273\">\n                      接下来我们看一下不满足要求的 f(x)。这里需要用<strong\n                        data-nodeid=\"324115\"\n                        >提问破题法</strong\n                      >的<strong data-nodeid=\"324116\">第三步</strong>：<strong\n                        data-nodeid=\"324117\"\n                        >不满足</strong\n                      >约束条件的 f(x) 设置为 -1 或者 1。那么到底是设置为\n                      -1，还是 1 呢？这个时候需要回到题目的场景中。\n                    </p>\n                    <p data-nodeid=\"323274\">\n                      由于整个数组形成了一个山峰，山峰的左边是升序，山峰的右边是降序。我们发现f(x)的值空间就只有三种情况：\n                    </p>\n                    <ul data-nodeid=\"323275\">\n                      <li data-nodeid=\"323276\">\n                        <p data-nodeid=\"323277\">\n                          山峰左边的元素满足 A[i-1] &lt; A[i] &lt;\n                          A[i+1]，可以把这种关系记录为 -1；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323278\">\n                        <p data-nodeid=\"323279\">\n                          山峰元素满足 A[i-1] &lt; A[i] &amp;&amp; A[i] &gt;\n                          A[i+1]，可以把这种关系记录 0；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323280\">\n                        <p data-nodeid=\"323281\">\n                          山峰右边的元素满足 A[i-1] &gt; A[i] &gt;\n                          A[i+1]，可以把这种关系记录为\n                          <strong data-nodeid=\"324175\">1</strong>。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323282\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/27/B8/CioPOWBdnYmAddOFAAETfQMy6vc139.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"324178\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323283\">\n                      经过再次映射，就可以得到 C 数组，此时，C\n                      数组就是一个有序的数组了。最终确定 f(x)\n                      可以映射成一个有序数组 C[] = {-1, -1, 0, 1, 1, 1}。\n                    </p>\n                    <p data-nodeid=\"323284\">\n                      此时我们我们已经可以补全 f(x) 函数了，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> m)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (A[i - <span class=\"hljs-number\">1</span>] &lt; A[i] &amp;&amp; A[i] &lt; A[i + <span class=\"hljs-number\">1</span>]) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (A[i - <span class=\"hljs-number\">1</span>] &lt; A[i] &amp;&amp; A[i] &gt; A[i + <span class=\"hljs-number\">1</span>]) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>, r = N-<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (l &lt; r) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> m = l + ((r-l)&gt;&gt;<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> mov = f(m);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 待定：使用lowerBound还是upperBound?</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323286\">\n                      在写代码时，还有一个问题待定：到底应该使用 lowerBound 还是\n                      upperBound？<strong data-nodeid=\"324196\"\n                        >提问破题法</strong\n                      >的<strong data-nodeid=\"324197\">第四步</strong>：最优解 0\n                      在 C[] 的最左边还是最右边，决定使用 lowerBound 还是\n                      upperBound。\n                    </p>\n                    <p data-nodeid=\"323287\">\n                      比如在这里 C[] = {-1, -1, 0, 1, 1,\n                      1}。山峰元素就只有一个，可以认为是一个最左边的元素，那么只需要用\n                      lowerBound 就可以了。\n                    </p>\n                    <p data-nodeid=\"323288\">\n                      转念一想，那么岂不是要先遍历一遍生成 C\n                      数组？实际上没有必要，这个映射关系可以通过函数来完成。每次要获取的时候，就生成\n                      C[i] 的值好了。\n                    </p>\n                    <p data-nodeid=\"323289\">\n                      【<strong data-nodeid=\"324212\">代码</strong\n                      >】到这里我们已经可以写出代码了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 面试中如果直接写函数名f(int)容易被面试官喷代码规范</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 不过好在我们可以认为我们是把原来的数组A[]映射到了一个</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 新的数组C[]，f(int x)可以认为是在读取C[]数组中的值。</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getC</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> i)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 利用函数的方式拿到C数组的值</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (A[i - <span class=\"hljs-number\">1</span>] &lt; A[i] &amp;&amp; A[i] &lt; A[i + <span class=\"hljs-number\">1</span>]) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (A[i - <span class=\"hljs-number\">1</span>] &lt; A[i] &amp;&amp; A[i] &gt; A[i + <span class=\"hljs-number\">1</span>]) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">peakIndexInMountainArray</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (A == <span class=\"hljs-keyword\">null</span> || A.length &lt; <span class=\"hljs-number\">3</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 在C数组上进行二分，这里直接用lowerBound就可以了。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>, r = A.length - <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">while</span> (l &lt; r) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> m = l + ((r - l) &gt;&gt; <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> mov = getC(A, m);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (mov &lt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      l = m + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      r = m;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> l;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"323291\">\n                      <p data-nodeid=\"323292\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/852.%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324216\"\n                          >Java/C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/852.%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E7%9A%84%E5%B3%B0%E9%A1%B6%E7%B4%A2%E5%BC%95.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324220\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323293\">\n                      <strong data-nodeid=\"324228\">复杂度分析</strong\n                      >：时间复杂度 O(lgN)，空间复杂度\n                      O(1)。这里比较有趣的是，映射数组 C[]\n                      并不需要构建，而是通过一个函数 getC 生成的。\n                    </p>\n                    <p data-nodeid=\"323294\">\n                      【<strong data-nodeid=\"324238\">小结</strong\n                      >】这里我们总结一下<strong data-nodeid=\"324239\"\n                        >提问破题法</strong\n                      >。\n                    </p>\n                    <ul data-nodeid=\"323295\">\n                      <li data-nodeid=\"323296\">\n                        <p data-nodeid=\"323297\">\n                          <strong data-nodeid=\"324244\">第一步</strong\n                          >：要什么，什么就是 x。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323298\">\n                        <p data-nodeid=\"323299\">\n                          <strong data-nodeid=\"324249\">第二步</strong\n                          >：满足约束条件的 f(x) = 0。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323300\">\n                        <p data-nodeid=\"323301\">\n                          <strong data-nodeid=\"324258\">第三步</strong>：<strong\n                            data-nodeid=\"324259\"\n                            >不满足</strong\n                          >约束条件的 f(x) 设置为 -1 或者 1。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323302\">\n                        <p data-nodeid=\"323303\">\n                          <strong data-nodeid=\"324267\">第四步</strong>：最优解 0\n                          在 C[] 的最左边还是最右边，决定使用 lowerBound 还是\n                          upperBound。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323304\">\n                      接下来，我们看一些练习题，在<strong data-nodeid=\"324277\"\n                        >头条</strong\n                      >和<strong data-nodeid=\"324278\">美团</strong\n                      >的面试中都遇到过这个题目。希望你可以在课下尝试解答一下，如果有什么疑问，也可以写在留言区，我们一起讨论。\n                    </p>\n                    <p data-nodeid=\"323305\">\n                      <strong data-nodeid=\"324283\">练习题 3</strong\n                      >：给定一个有序数组，找出数组中下标与值相等的那些数。\n                    </p>\n                    <blockquote data-nodeid=\"323306\">\n                      <p data-nodeid=\"323307\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/69.%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%80%BC%E5%92%8C%E4%B8%8B%E6%A0%87%E7%9B%B8%E7%AD%89%E7%9A%84%E5%85%83%E7%B4%A0.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324287\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/69.%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%80%BC%E5%92%8C%E4%B8%8B%E6%A0%87%E7%9B%B8%E7%AD%89%E7%9A%84%E5%85%83%E7%B4%A0.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324291\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/69.%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%80%BC%E5%92%8C%E4%B8%8B%E6%A0%87%E7%9B%B8%E7%AD%89%E7%9A%84%E5%85%83%E7%B4%A0.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324295\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323308\">\n                      <strong data-nodeid=\"324300\">练习题 4</strong\n                      >：给定一个有序数组，找出数组中下标与值相等的数的范围。\n                    </p>\n                    <blockquote data-nodeid=\"323309\">\n                      <p data-nodeid=\"323310\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/69.%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%80%BC%E5%92%8C%E4%B8%8B%E6%A0%87%E7%9B%B8%E7%AD%89%E7%9A%84%E5%85%83%E7%B4%A0.2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324304\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/69.%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%80%BC%E5%92%8C%E4%B8%8B%E6%A0%87%E7%9B%B8%E7%AD%89%E7%9A%84%E5%85%83%E7%B4%A0.2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324308\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/69.%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%80%BC%E5%92%8C%E4%B8%8B%E6%A0%87%E7%9B%B8%E7%AD%89%E7%9A%84%E5%85%83%E7%B4%A0.2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324312\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323311\">\n                      如果从<strong data-nodeid=\"324318\">考点</strong>上来说，x\n                      和 f(x)\n                      还可以进行一些变化。我们还需要进一步深挖这个考点，以应对面试中可能出现的变形。\n                    </p>\n                    <h4 data-nodeid=\"323312\">例 3：最小长度连续子数组</h4>\n                    <p data-nodeid=\"323313\">\n                      【<strong data-nodeid=\"324325\">题目</strong\n                      >】一个正整数数组 A，以及正数\n                      s，找出最小长度的连续子数组，使得子数组和 &gt;= s。\n                    </p>\n                    <p data-nodeid=\"323314\">输入：A = [5, 2], s = 3</p>\n                    <p data-nodeid=\"323315\">输出：1</p>\n                    <p data-nodeid=\"323316\">\n                      解释：数组中存在长度为1的子数组 [5]，其和大于给定数 3。\n                    </p>\n                    <p data-nodeid=\"323317\">\n                      【<strong data-nodeid=\"324346\">分析</strong>】<strong\n                        data-nodeid=\"324347\"\n                        >提问破题法</strong\n                      >的四步法我们依次使用出来。\n                    </p>\n                    <p data-nodeid=\"323318\">\n                      <strong data-nodeid=\"324352\">1</strong>.\n                      第一步：要什么，什么就是 x。\n                    </p>\n                    <blockquote data-nodeid=\"323319\">\n                      <p data-nodeid=\"323320\">\n                        最小长度的连续子数组，使得子数组和 &gt;= s\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323321\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/27/B8/CioPOWBdnb-ABFgaAABqYrb0MiY105.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"324356\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323322\">\n                      我们要求的是“最小长度的连续子数组”。不过在实施的时候，需要<strong\n                        data-nodeid=\"324362\"\n                        >把“最小，最大”这种字样去掉</strong\n                      >，然后变为 x。\n                    </p>\n                    <p data-nodeid=\"323323\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/27/B8/CioPOWBdnamADeEOAABqG8sccSs175.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"324365\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323324\">\n                      确定了 x 之后，我们还需要确定 x\n                      的范围。连续子数组的长度，在这个题里面只能可能是 [1, N +\n                      1)。因为 A[] 数组和 s\n                      都是正数。所以最短的连续子数组不可能为 0。\n                      而最长可以是整个数组 N。那么用开闭原则表示就应该是 [0, N +\n                      1)。\n                    </p>\n                    <p data-nodeid=\"323325\">\n                      <strong data-nodeid=\"324378\">2</strong>.\n                      第二步：满足约束条件的 f(x) = 0。\n                    </p>\n                    <p data-nodeid=\"323326\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BB/Cgp9HWBdncyAQiAyAABi-zz0PQo044.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"324381\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323327\">\n                      对于一个给定的子数组长度 x，f(x)\n                      表示的含义：满足约束条件（长度为 x\n                      的连续子数组的和的最大值 &gt;= s），f(x) = 0。\n                    </p>\n                    <p data-nodeid=\"323328\">\n                      <strong data-nodeid=\"324391\">3</strong>.\n                      <strong data-nodeid=\"324392\">不满足</strong>约束条件的\n                      f(x) 设置为 -1 或者 1。\n                    </p>\n                    <p data-nodeid=\"323329\">\n                      那么到底是设置为 -1，还是 1\n                      呢？这个时候我们需要回到题目的场景中进一步思考。此时可以确定\n                      f(x) = 长度为 x 的子数组最大和。接下来可以得出：f(x +\n                      1)≥f(x)\n                    </p>\n                    <p data-nodeid=\"323330\">\n                      <strong data-nodeid=\"324398\">证明</strong>：当已经得到\n                      f(x) 之后，只需要在长度为 x\n                      的子数组的左边/右边再加延长一下就可以得到\n                      f(x+1)。如下图所示：\n                    </p>\n                    <p data-nodeid=\"323331\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/B8/CioPOWBdndSAVa20AACc21JFZlk639.png\"\n                        alt=\"Drawing 9.png\"\n                        data-nodeid=\"324401\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323332\">\n                      由于数组中的元素都是正数，那么可以肯定的是 f(x + 1) ≥\n                      f(x)。那么我们可以得到一个单调递增的函数，那就是：\n                    </p>\n                    <p data-nodeid=\"323333\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BB/Cgp9HWBdndqAIWGAAABwzAeOXWE704.png\"\n                        alt=\"Drawing 10.png\"\n                        data-nodeid=\"324405\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323334\">\n                      那么子数组的和实际上只有 2 种情况：\n                    </p>\n                    <ul data-nodeid=\"323335\">\n                      <li data-nodeid=\"323336\">\n                        <p data-nodeid=\"323337\">\n                          小于 s，此时可以设置 f(x) = -1；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323338\">\n                        <p data-nodeid=\"323339\">\n                          大于等于\n                          s（这道题只需要求大于等于，所以这里把等于和大于合在一起）f(x)\n                          = 0。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323340\">\n                      如果把 f(x) 看成一个映射，那么映射之后的数组 C[] = {-1,\n                      -1, 0, 0, 0}。\n                    </p>\n                    <p data-nodeid=\"323341\">\n                      <strong data-nodeid=\"324420\">4</strong>. 最优解 0 在 C[]\n                      的最左边还是最右边，决定使用 lowerBound 还是 upperBound。\n                    </p>\n                    <p data-nodeid=\"323342\">\n                      按照题目要求，需要找到的是长度最小的连续子数组，实际上就是在\n                      C[] 数组中找到最左边的 0，所以应该用 lowerBound。\n                    </p>\n                    <p data-nodeid=\"323343\">\n                      【<strong data-nodeid=\"324430\">代码</strong\n                      >】到此为止，我们已经能够写出代码了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 参数：数组A[], 子数组长度len</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// return: 是否存在长度为len的子数组的和 &gt;= s</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//      0 has find</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//     -1 not found</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getC</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> len, <span class=\"hljs-keyword\">int</span> s)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">long</span> sum = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里相当于滑动一个固定长度为len的窗口，并求出这个窗口的和</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    sum += A[i];\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &lt; len - <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果发现这个固定长度为len的和 &gt;= s</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 那么返回0</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (sum &gt;= s) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    sum -= A[i - (len - <span class=\"hljs-number\">1</span>)];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// lowerBound的函数模板</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">minSubArrayLen</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">int</span>[] A)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">1</span>, r = N + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">while</span> (l &lt; r) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> m = l + ((r - l) &gt;&gt; <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> mov = getC(A, m, s);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (mov &lt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      l = m + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      r = m;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> l &gt; N ? <span class=\"hljs-number\">0</span> : l;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"323345\">\n                      <p data-nodeid=\"323346\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324434\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324438\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324442\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323347\">\n                      <strong data-nodeid=\"324447\">复杂度分析</strong\n                      >：搜索空间长度为 N 并且有序，在里面二分的时候，只需要运行\n                      O(lgN) 次。而在每次 getC 获取映射值的时候，复杂度为\n                      O(N)。那么时间复杂度为 O(NlgN)，空间复杂度为 O(1)。\n                    </p>\n                    <p data-nodeid=\"323348\">\n                      【<strong data-nodeid=\"324457\">小结</strong\n                      >】到这里，我们已经可以总结出二分搜索比较<strong\n                        data-nodeid=\"324458\"\n                        >通用的提问破题法</strong\n                      >了，通过提问来确定：\n                    </p>\n                    <ul data-nodeid=\"323349\">\n                      <li data-nodeid=\"323350\">\n                        <p data-nodeid=\"323351\">确定搜索空间，即 x 的范围；</p>\n                      </li>\n                      <li data-nodeid=\"323352\">\n                        <p data-nodeid=\"323353\">\n                          确定f(x)是否有序。有可能你还需要一个简单的证明。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323354\">\n                      这里我们可以再看一下下面这几个练习题。\n                    </p>\n                    <p data-nodeid=\"323355\">\n                      <strong data-nodeid=\"324466\">练习题 5</strong\n                      >：包含所有子串的最短子串。给定两个字符串\n                      A，B。要求在字符串 A\n                      中找到一个最短的子串，在这个子串中包含了所有的 B\n                      中的字符。\n                    </p>\n                    <blockquote data-nodeid=\"323356\">\n                      <p data-nodeid=\"323357\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324470\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324474\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324478\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323358\">\n                      注：我们使用了复杂度为 O(NlgN) 的二分搜索来求解例 3\n                      和练习题 5，实际上有 O(N)\n                      的求解办法，你能想一下吗？（关于这块内容，我们将在“第 10\n                      讲”中详细介绍）。\n                    </p>\n                    <h4 data-nodeid=\"323359\">例 4：最大平均值</h4>\n                    <p data-nodeid=\"323360\">\n                      【<strong data-nodeid=\"324486\">题目</strong\n                      >】给定一个正整数数组 A 和\n                      k，要求找到子数组，输出其最大平均值，并且子数组长度要满足大于等于\n                      k。\n                    </p>\n                    <p data-nodeid=\"323361\">\n                      输入：A = [1,12,-5,-6,50,3], k = 3\n                    </p>\n                    <p data-nodeid=\"323362\">输出：15.667</p>\n                    <p data-nodeid=\"323363\">\n                      解释：在所有长度大于等于 3 的子数组中，(-6 + 50 + 3) / 3 =\n                      15.667 是最大的。\n                    </p>\n                    <p data-nodeid=\"323364\">\n                      【<strong data-nodeid=\"324499\">分析】提问破题法</strong\n                      >的四步法我们依次使用出来。\n                    </p>\n                    <p data-nodeid=\"323365\">\n                      <strong data-nodeid=\"324504\">1</strong>.\n                      第一步：要什么，什么就是 x\n                    </p>\n                    <blockquote data-nodeid=\"323366\">\n                      <p data-nodeid=\"323367\">\n                        输出子数组最大平均值，并且子数组长度 &gt;= k。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323368\">\n                      要输出的是子数组的最大平均值，所以搜索空间 x\n                      就是连续子数组的平均值，如下图所示：\n                    </p>\n                    <p data-nodeid=\"323369\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/B8/CioPOWBdnfCAfgTUAABrY1hyi1k406.png\"\n                        alt=\"Drawing 11.png\"\n                        data-nodeid=\"324509\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323370\">\n                      再看一下范围：x 的最小值，就是数组的最小值。而 x\n                      的最大值，就是数组的最大值。\n                    </p>\n                    <p data-nodeid=\"323371\">\n                      如果是在面试时，那么我们已经可以写出如下代码框架了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> small = Integer.INT_MIN;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> large = Integer.INT_MAX;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">  small = Math.min(small, A[i]);\n</div></li><li><div class=\"code-word\">  large = Math.max(large, A[i]);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">double</span> l = small, r = large + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (l &lt; r) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">double</span> m = (l + r) / <span class=\"hljs-number\">2.0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">double</span> mov = ? ? <span class=\"hljs-comment\">// 待定</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (mov &lt; ? ?) {<span class=\"hljs-comment\">// 待定</span>\n</div></li><li><div class=\"code-word\">    l = m + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    r = m;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323373\">剩下的就是需要找到 f(x)。</p>\n                    <p data-nodeid=\"323374\">\n                      <strong data-nodeid=\"324517\">2</strong>.\n                      第二步：满足约束条件的 f(x) = 0。\n                    </p>\n                    <p data-nodeid=\"323375\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BB/Cgp9HWBdngWALZ9zAABhy_ZI9lg598.png\"\n                        alt=\"Drawing 12.png\"\n                        data-nodeid=\"324520\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323376\">\n                      对于 f(x) 来说，其含义为：给定的平均值 x，如果存在：\n                    </p>\n                    <p data-nodeid=\"323377\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BB/Cgp9HWBdnieAbr7hAABBUtXsXLI943.png\"\n                        alt=\"Drawing 17.png\"\n                        data-nodeid=\"324524\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323378\">\n                      <strong data-nodeid=\"324533\">3</strong>.\n                      <strong data-nodeid=\"324534\">不满足</strong>约束条件的\n                      f(x) 设置为 -1 或者 1。\n                    </p>\n                    <p data-nodeid=\"323379\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/B8/CioPOWBdnhGADWo8AABejsjHA-g049.png\"\n                        alt=\"Drawing 20.png\"\n                        data-nodeid=\"324537\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323380\">\n                      <strong data-nodeid=\"324545\">4</strong>. 最优解 0 在 C[]\n                      的最左边还是最右边，决定使用 lowerBound 还是 upperBound。\n                    </p>\n                    <p data-nodeid=\"323381\">\n                      由于我们求解最大平均值，就是找到满足条件的最大的 x。也就是\n                      C[] 数组里面的最右边的 0。此时应该使用 upperBound 的模板。\n                    </p>\n                    <p data-nodeid=\"323382\">\n                      <strong data-nodeid=\"324554\">难点</strong>：f(x)\n                      函数的代码。\n                    </p>\n                    <p data-nodeid=\"323383\">\n                      我们之前写过的代码里面，f(x)\n                      都比较直观，比较容易写。但是这道题里面。你先弄懂如下问题\n                      1，才能继续往后思考。\n                    </p>\n                    <blockquote data-nodeid=\"323384\">\n                      <p data-nodeid=\"323385\">\n                        问题 1：给定的平均值 x，是否存在连续子数组平均值 &gt;=\n                        x，并且长度 &gt;= k\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323386\">\n                      要解决这个问题，我们不妨把问题化简一下。把子数组长度 &gt;=\n                      k\n                      去掉，看看可不可以简单一点，如果可以，那么我们就可以从简单一点的问题入手。问题就变成如下问题\n                      2。\n                    </p>\n                    <blockquote data-nodeid=\"323387\">\n                      <p data-nodeid=\"323388\">\n                        问题 2：给定的平均值，是否存在连续的子数组平均值 &gt;= x\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323389\">\n                      平均值最后是平均到每个元素身上的。那么我们事先从数组 A[]\n                      中将这个平均值 x 减掉。用代码可以表示如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> B[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[A.length];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.length; i++) {\n</div></li><li><div class=\"code-word\">  B[i] = A[i] - x;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323391\">\n                      如果要找到“连续的子数组的平均值 &gt;= x”，实际上就变成在\n                      B[] 数组上找到一个连续的子数组，要求其和 &gt;=\n                      0。如果我们能找到 B[]\n                      数组上的连续子数组的最大和，再看一下这个最大和是否 &gt;= 0\n                      就可以了。这样问题已经变成求一个数组的最大子数组和，如下问题\n                      3。\n                    </p>\n                    <blockquote data-nodeid=\"323392\">\n                      <p data-nodeid=\"323393\">\n                        问题 3: 给定一个数组 B[]，求这个数组上的最大子数组和。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323394\">\n                      在解决问题 3 时，我们采用一种<strong data-nodeid=\"324620\"\n                        >落差法</strong\n                      >，求出 B[] 数组的前缀和数组 C[]，所以说前缀和数组，即\n                      C[i] = B[0] + B[1] + .. + B[i]。当得到 C[] 数组之后，C[i]\n                      与 min(C[0], .... , C[i-1]) 的差就是以 B[i]\n                      结尾的连续子数组的最大和。用图表示如下：\n                    </p>\n                    <p data-nodeid=\"323395\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/B8/CioPOWBdnj6AXSEoAABxSRrShKU892.png\"\n                        alt=\"Drawing 21.png\"\n                        data-nodeid=\"324623\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323396\">\n                      那么问题 3 可以求解如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Q3</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] B)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = B == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : B.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// pre表示C[i]的值</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">long</span> pre = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// pre_min表示C[0] ... C[i-1]的最小值</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// pre - pre_min就是落差，也就是B[]数组的连续子数组和</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">long</span> pre_min = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">long</span> ans = Integer.MIN_VALUE;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// pre表示的是C[i]的值</span>\n</div></li><li><div class=\"code-word\">    pre += B[i];\n</div></li><li><div class=\"code-word\">    ans = Math.max(ans, pre - pre_min);\n</div></li><li><div class=\"code-word\">    pre_min = Math.min(pre_min, pre);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">int</span>)ans;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"323398\">\n                      <p data-nodeid=\"323399\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324628\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324632\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324636\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323400\">\n                      有了问题 3 的求解，我们就可以返回去求解问题\n                      2。只需要在问题 3 的基础上做如下操作即可。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">Q2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A)</span> </span>{\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">if</span> (Q3(A) &gt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323402\">\n                      接下来，我们再返回去看问题 1。当我们仍然利用 A[]\n                      数组中的每个元素减去 x 得到 B[] 数组之后，问题 1\n                      等价于以下问题 4。\n                    </p>\n                    <blockquote data-nodeid=\"323403\">\n                      <p data-nodeid=\"323404\">\n                        问题 4: 给定一个数组 B[]，是否存在长度 &gt;= k\n                        的连续子数组，其和 &gt;= 0。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323405\">\n                      这里多加的一个条件“长度 &gt;= k\"，实际上是要求：\n                    </p>\n                    <p data-nodeid=\"323406\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/B8/CioPOWBdnkeACjFwAAB2QUb2OP8106.png\"\n                        alt=\"Drawing 22.png\"\n                        data-nodeid=\"324654\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323407\">\n                      也就是 j 和 i 的距离要 &gt;= k。这里就需要用到<strong\n                        data-nodeid=\"324660\"\n                        >滑动窗口</strong\n                      >的方法了。可以将代码写为如下的样子（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 问题1与问题4都是同样的代码。</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Q4</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">double</span> m, <span class=\"hljs-keyword\">int</span> k)</span> </span>{ \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span>[] B = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[N];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span>[] C = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[N];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 给定平均值m (也就是文中描述的x)</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 利用A[]数组减去它，得到B[]</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    B[i] = (<span class=\"hljs-keyword\">double</span>)A[i] - m;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 再利用B[]数组得到C[]数组。</span>\n</div></li><li><div class=\"code-word\">  C[<span class=\"hljs-number\">0</span>] = B[<span class=\"hljs-number\">0</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    C[i] = C[i - <span class=\"hljs-number\">1</span>] + B[i];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里利用落差法来求解</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">double</span> pre_min = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = k - <span class=\"hljs-number\">1</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// i &gt;= k - 1</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 才有可能形成长度 &gt;= k的子数组</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 形成的子数组是[i + 1 - k, i + 1)</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (C[i] &gt;= pre_min) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 滑动窗口要移出去的时候</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 要把B[i + 1 - k]移出去了</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 注意，这里不是直接取min(pre_min, C[i])</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 因为要保证子数组长度 &gt;= k，所以只能取滑动窗口中</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 将要移出去的元素。</span>\n</div></li><li><div class=\"code-word\">    pre_min = Math.min(pre_min, C[i + <span class=\"hljs-number\">1</span> - k]);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323409\">到这里，我们已经求解出 f(x)。</p>\n                    <p data-nodeid=\"323410\">\n                      【<strong data-nodeid=\"324667\">代码</strong\n                      >】根据前面的分析，相信你已经可以根据思路写出代码了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getC</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">double</span>[] B, <span class=\"hljs-keyword\">double</span> m, <span class=\"hljs-keyword\">int</span> k)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    B[i] = (<span class=\"hljs-keyword\">double</span>)A[i] - m;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 再把B[]数组变成自身的前缀和数组C[]</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这样可以省去申请C[]数组的空间</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    B[i] += B[i - <span class=\"hljs-number\">1</span>];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// pre_min用来记录滑动窗口之前的最小值。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">double</span> pre_min = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = k - <span class=\"hljs-number\">1</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// i &gt;= k - 1</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 才有可能形成长度 &gt;= k的子数组</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 形成的子数组是[i + 1 - k, i + 1)</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (B[i] &gt;= pre_min) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 滑动窗口要移出去的时候</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 要把B[i + 1 - k]移出去了</span>\n</div></li><li><div class=\"code-word\">    pre_min = Math.min(pre_min, B[i + <span class=\"hljs-number\">1</span> - k]);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">maxAverage</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> k)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> small = Integer.MAX_VALUE;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> large = Integer.MIN_VALUE;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n</div></li><li><div class=\"code-word\">    small = Math.min(small, A[i]);\n</div></li><li><div class=\"code-word\">    large = Math.max(large, A[i]);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">double</span>[] B = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">double</span>[N];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">double</span> l = small;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">double</span> r = (<span class=\"hljs-keyword\">double</span>)large + <span class=\"hljs-number\">1.0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 注意浮点数的循环处理，要求这两个数不要相等</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">while</span> (r - l &gt; <span class=\"hljs-number\">1e-6</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">double</span> m = (l + r) / <span class=\"hljs-number\">2.0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">int</span> mov = getC(A, B, m, k);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (mov &lt;= <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 移动左边界时，对于double类型的数来说</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 直接取l = m即可。</span>\n</div></li><li><div class=\"code-word\">      l = m;\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      r = m;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 如果l已经是0，那么直接返回0，不要返回-0.00</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> Math.abs(l) &lt; <span class=\"hljs-number\">1e-6</span> ? <span class=\"hljs-number\">0</span> : l;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"323412\">\n                      <p data-nodeid=\"323413\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/617._%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC_II.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324671\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/617._%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC_II.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324675\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/617._%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC_II.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324679\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323414\">\n                      <strong data-nodeid=\"324684\">复杂度分析</strong\n                      >：upperBound 主循环部分为 O(lgN)，但是在每次 getC\n                      函数执行时，其复杂度为 O(N)。所以时间复杂度为\n                      O(NlgN)，空间复杂度为 O(N)。\n                    </p>\n                    <p data-nodeid=\"323415\">\n                      【<strong data-nodeid=\"324690\">小结</strong\n                      >】写出这道题之后，这里我们再总结一下这道题的考点，如下图所示：\n                    </p>\n                    <p data-nodeid=\"323416\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BB/Cgp9HWBdnmyAMTEQAAHbOIJo-JU000.png\"\n                        alt=\"Drawing 23.png\"\n                        data-nodeid=\"324693\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323417\">\n                      这道题的考点无非就是将<strong data-nodeid=\"324703\"\n                        >连续子数组和</strong\n                      >与<strong data-nodeid=\"324704\">二分搜索</strong\n                      >组合了一下，只要你熟练地掌握这 2\n                      个关键技能，击破这类面试题就不难了。\n                    </p>\n                    <p data-nodeid=\"323418\">\n                      关于二分搜索的扩展，我们已经讲了很多，那么就这道题而言，是否还有可以深挖的点呢？比如：连续子数组求最大平均值的小技巧就是每个元素减去平均值。我们可以将题目变成连续子数组的最大和问题。而连续子数组的<strong\n                        data-nodeid=\"324710\"\n                        >最大和</strong\n                      >问题又可以分出 4 种情况。\n                    </p>\n                    <p data-nodeid=\"323419\">\n                      <strong data-nodeid=\"324723\">1</strong>.\n                      长度无限制，是最常见的<strong data-nodeid=\"324724\"\n                        >连续最大子数组和</strong\n                      >问题。这里我们采用<strong data-nodeid=\"324725\"\n                        >落差法</strong\n                      >来求解，也可以利用双指针或者 DP\n                      来进行求解（这两种解法分别会在“第 10 讲”和“第 14\n                      讲”详细讲解）。\n                    </p>\n                    <blockquote data-nodeid=\"323420\">\n                      <p data-nodeid=\"323421\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324729\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324733\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324737\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323422\">\n                      <strong data-nodeid=\"324746\">2</strong>.\n                      连续子数组的长度必须等于 k。采用<strong\n                        data-nodeid=\"324747\"\n                        >滑动窗口法</strong\n                      >来求解。\n                    </p>\n                    <blockquote data-nodeid=\"323423\">\n                      <p data-nodeid=\"323424\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/868._%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324751\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/868._%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324755\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/868._%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%B9%B3%E5%9D%87%E5%80%BC.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324759\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323425\">\n                      <strong data-nodeid=\"324768\">3</strong>. 长度 &gt;= k\n                      的连续子数组，采用<strong data-nodeid=\"324769\"\n                        >滑动窗口 + 落差法</strong\n                      >来求解。代码参考前面例题 4 的代码。\n                    </p>\n                    <p data-nodeid=\"323426\">\n                      <strong data-nodeid=\"324776\">4</strong>.\n                      如果限制长度必须要 &lt;= k\n                      的连续子数组的最大和，这个时候应该怎么办？\n                    </p>\n                    <blockquote data-nodeid=\"323427\">\n                      <p data-nodeid=\"323428\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/MaxSumLengthSmallerK.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324780\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/MaxSumLengthSmallerK.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324784\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/MaxSumLengthSmallerK.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"324788\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"323429\">三步切分法</h3>\n                    <p data-nodeid=\"323430\">\n                      前面介绍的提问破题法已经能够解决相当一部分问题了，下面我们再来看一下二分搜索的最后一种面试中的常考题型——<strong\n                        data-nodeid=\"324795\"\n                        >切分题</strong\n                      >，这种题目比较适合使用切分法。\n                    </p>\n                    <p data-nodeid=\"323431\">\n                      所谓<strong data-nodeid=\"324813\">切分法</strong\n                      >，顾名思义就是把搜索范围<strong data-nodeid=\"324814\"\n                        >分</strong\n                      >为两半，然后把我们不想要的那部分搜索区域<strong\n                        data-nodeid=\"324815\"\n                        >切</strong\n                      >掉（扔掉），也可以叫<strong data-nodeid=\"324816\"\n                        >三步切分法</strong\n                      >：\n                    </p>\n                    <ol data-nodeid=\"323432\">\n                      <li data-nodeid=\"323433\">\n                        <p data-nodeid=\"323434\">找出一个分界元素；</p>\n                      </li>\n                      <li data-nodeid=\"323435\">\n                        <p data-nodeid=\"323436\">\n                          将<strong data-nodeid=\"324827\">有序的</strong\n                          >搜索空间分为两半（复杂度为 O(1)），<strong\n                            data-nodeid=\"324828\"\n                            >扔掉</strong\n                          >不需要的那一半；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323437\">\n                        <p data-nodeid=\"323438\">\n                          在<strong data-nodeid=\"324834\">剩下的空间</strong\n                          >中递归使用切分法。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"323439\">\n                      实际上在“<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6697&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"324838\"\n                        >第 08 讲</a\n                      >”里面，我们介绍<strong data-nodeid=\"324844\"\n                        >三路切分</strong\n                      >的时候，也用到了切分法的思路。这里我们将两者做个对比。\n                    </p>\n                    <p data-nodeid=\"323440\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BB/Cgp9HWBdnpuAJXhnAAEBs7isOFc504.png\"\n                        alt=\"Drawing 24.png\"\n                        data-nodeid=\"324847\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323441\">\n                      二分搜索和三路切分都可以不停地缩小搜索空间，但是两者的使用条件也不太一样：\n                    </p>\n                    <ul data-nodeid=\"323442\">\n                      <li data-nodeid=\"323443\">\n                        <p data-nodeid=\"323444\">\n                          二分搜索<strong data-nodeid=\"324854\"\n                            >需要有序性</strong\n                          >，复杂度为 O(lgN)；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323445\">\n                        <p data-nodeid=\"323446\">\n                          三路切分<strong data-nodeid=\"324860\">不需要</strong\n                          >有序性，复杂度为 O(N)。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323447\">\n                      在标准的模板代码 lowerBound 和 upperBound\n                      里面，我们在查找时，都使用了切分法切掉我们不想要的搜索空间，只在剩下的搜索空间里面继续搜索。\n                    </p>\n                    <p data-nodeid=\"323448\">\n                      不过，对于有的面试题来说，有序性并不会给得那么赤祼祼，此时就需要利用三步切分法的帮助。下面我们一起通过例题看看怎么运用切分法。\n                    </p>\n                    <h4 data-nodeid=\"323449\">例 5：旋转数组的查找</h4>\n                    <p data-nodeid=\"323450\">\n                      【<strong data-nodeid=\"324869\">题目</strong\n                      >】给定一有序数组\n                      A（没有重复元素），某个位置发生了旋转，给定元素 x，请输出\n                      x 在数组 A 中的下标。如果不存在，输出 -1。\n                    </p>\n                    <p data-nodeid=\"323451\">\n                      输入：A = [1, 2, 3, -1, 0], x = 3\n                    </p>\n                    <p data-nodeid=\"323452\">输出：2</p>\n                    <p data-nodeid=\"323453\">\n                      <strong data-nodeid=\"324884\">解释</strong>：因为 A[2] == 3\n                      所以返回下标 2\n                    </p>\n                    <p data-nodeid=\"323454\">\n                      【<strong data-nodeid=\"324890\">分析</strong\n                      >】这里如果我们要使用二分搜索来解决这个问题。面临的最大问题是，数组并不是有序的。如果将数组的值画在坐标轴上，那么形成的效果可能是：\n                    </p>\n                    <p data-nodeid=\"323455\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BB/Cgp9HWBdnqWAGZStAABeKdrevNw727.png\"\n                        alt=\"Drawing 25.png\"\n                        data-nodeid=\"324893\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323456\">\n                      但是，我们很快可以发现，虽然整个数组不是有序的，但是数组的两个部分分别是有序的。这个信息很关键，如果能够利用上，就一定能够破题。\n                    </p>\n                    <p data-nodeid=\"323457\">\n                      在进行二分搜索的时候，我们首先是需要取中间值。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> m = l + ((r-l)&gt;&gt;<span class=\"hljs-number\">1</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323459\">\n                      那么此时我们已经知道了 A[L]、A[M]、A[R]\n                      三个值，可以在进一步二分之前加一个处理。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (A[l] == x) <span class=\"hljs-keyword\">return</span> l;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (A[m] == x) <span class=\"hljs-keyword\">return</span> m;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (A[r-<span class=\"hljs-number\">1</span>] == x) <span class=\"hljs-keyword\">return</span> r-<span class=\"hljs-number\">1</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323461\">\n                      通过这样的处理之后，后面我们在进行二分操作的时候，会更加简单一点。接下来我们再看\n                      A[M] 的值，A[M]\n                      有两种可能：一种是掉落在左边，一种是掉落在右边区域。\n                    </p>\n                    <p data-nodeid=\"323462\">\n                      <strong data-nodeid=\"324926\">1</strong>. A[m]\n                      掉落在左边区域。如下图所示：\n                    </p>\n                    <p data-nodeid=\"323463\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BB/Cgp9HWBdnrKAAUj2AABniw2Zc2k297.png\"\n                        alt=\"Drawing 26.png\"\n                        data-nodeid=\"324929\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323464\">\n                      当 A[L] &lt; A[M]\n                      的时候，中间值肯定是掉落在左边的。在这种情况下，我们需要再分\n                      （a）、（b） 两种情况。\n                    </p>\n                    <p data-nodeid=\"323465\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/B8/CioPOWBdnr2AT9D1AABp_yYk9aA263.png\"\n                        alt=\"Drawing 27.png\"\n                        data-nodeid=\"324943\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323466\">\n                      （a）x 位于 A[m] 的左边。此时需要满足条件：A[L] &lt; x\n                      &lt;\n                      A[M]。在这种情况下，右边的区域是没有必要保留的。可以通过 R\n                      = M 来扔掉。\n                    </p>\n                    <p data-nodeid=\"323467\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BC/Cgp9HWBdnsWABOwBAABuoIxhu84288.png\"\n                        alt=\"Drawing 28.png\"\n                        data-nodeid=\"324963\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323468\">\n                      （b）x 位于 A[m]\n                      的右边。此时左边的部分是没有必要保留的，把左边切掉，让 L =\n                      M+ 1。\n                    </p>\n                    <p data-nodeid=\"323469\">\n                      <strong data-nodeid=\"324987\">2</strong>. A[m]\n                      掉落在右边区域。需要满足条件 A[M] &lt; A[R]。如下图所示：\n                    </p>\n                    <p data-nodeid=\"323470\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/27/B8/CioPOWBdntCAT8kvAABlgSswVU8127.png\"\n                        alt=\"Drawing 29.png\"\n                        data-nodeid=\"324990\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323471\">\n                      此时我们要找的值 x 可以分成（c）、（d）两种情况：\n                    </p>\n                    <p data-nodeid=\"323472\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BC/Cgp9HWBdnteAAYFWAABom4eopCw440.png\"\n                        alt=\"Drawing 30.png\"\n                        data-nodeid=\"324994\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323473\">\n                      （c）位于最右边区域。此时需要满足条件，A[M] &lt; x &lt;\n                      A[R]。那么可以直接把左边区域扔掉，设置 L = M + 1 即可。\n                    </p>\n                    <p data-nodeid=\"323474\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/27/BC/Cgp9HWBdnt2AYcGmAABpvhp8n8M685.png\"\n                        alt=\"Drawing 31.png\"\n                        data-nodeid=\"325010\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323475\">\n                      （d）位于左边区域，此时只需要把右边区域扔掉即可。即设置 R\n                      = M。\n                    </p>\n                    <p data-nodeid=\"323476\">\n                      【<strong data-nodeid=\"325017\">代码</strong\n                      >】经过详细的分析，我们已经可以写代码了（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] A, <span class=\"hljs-keyword\">int</span> x)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> N = A == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-number\">0</span> : A.length;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-number\">0</span>, r = N;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">while</span> (l &lt; r) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> m = l + ((r - l) &gt;&gt; <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 先处理掉能够取到的3个值。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (A[l] == x)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> l;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (A[m] == x)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> m;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 这里不能用A[r]，因为我们使用的是</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 开闭原则，右边始终是不能取到的。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (A[r - <span class=\"hljs-number\">1</span>] == x)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> r - <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 这里开始把不要的区间切掉</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (A[m] &gt; A[l]) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (A[l] &lt; x &amp;&amp; x &lt; A[m]) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// case (a)</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 到这里，A[m]已经不可能等于x</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 所以需要将[m, ...., r)</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 这段区间一起扔掉</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 留下[l, m)这段区间，续断查找</span>\n</div></li><li><div class=\"code-word\">        r = m;\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// case (b)</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// A[m]已经不可能等于x</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 所以这里将[l, ..., m]这个区间切掉</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 留下[m + 1, r)</span>\n</div></li><li><div class=\"code-word\">        l = m + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (A[m] &lt; x &amp;&amp; x &lt; A[r - <span class=\"hljs-number\">1</span>]) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// case (c)</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 到这里，左边的区间[l, ... , m]已经不需要了</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 只需要留下[m + 1, r)</span>\n</div></li><li><div class=\"code-word\">        l = m + <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// case (d)</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 到这里，右边的区间[m, ... , r)</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 已经不需要了，只需要留下区间[l, ... , m)</span>\n</div></li><li><div class=\"code-word\">        r = m;\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"323478\">\n                      <p data-nodeid=\"323479\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/33.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325021\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/33.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325025\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/33.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325029\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323480\">\n                      <strong data-nodeid=\"325034\">复杂度分析</strong\n                      >：时间复杂度为 O(lgN)，空间复杂度 O(1)。\n                    </p>\n                    <p data-nodeid=\"323481\">\n                      【<strong data-nodeid=\"325040\">小结</strong\n                      >】虽然整个数组不是有序的，但是我们可以每次都在一个小范围里面利用二分进行搜索。\n                    </p>\n                    <p data-nodeid=\"323482\">\n                      <strong data-nodeid=\"325049\">考点</strong>：\n                      这道题的考点就是分清楚\n                      （a）、(b）、（c）、（d）四种情况。要特别注意的是，在处理（a）、(b）两种情况的时候，<strong\n                        data-nodeid=\"325050\"\n                        >要用 if 判断有序的部分，else 处理无序的部分</strong\n                      >。比如：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (A[l] &lt; x &amp;&amp; x &lt; A[m]) { <span class=\"hljs-comment\">/*case (a)*/</span>} <span class=\"hljs-comment\">// if处理有序的部分。</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">/*case (b)*/</span>};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323484\">\n                      （c）、（d）两个条件的处理也是如此。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (A[m] &lt; x &amp;&amp; x &lt; A[r-<span class=\"hljs-number\">1</span>]) { <span class=\"hljs-comment\">/* case (c)*/</span>} <span class=\"hljs-comment\">// if处理有序的部分 </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">/*case (d)*/</span>}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"323486\">\n                      我在面试时，曾经遇到不少候选人在处理这四情况的时候没有想到上面这个小技巧，因此浪费了很长时间。\n                    </p>\n                    <p data-nodeid=\"323487\">\n                      <strong data-nodeid=\"325061\">练习题 6</strong>：例 5\n                      还可以利用前面我们介绍过的<strong data-nodeid=\"325062\"\n                        >提问破题法</strong\n                      >来进行求解。你能想一下吗？\n                    </p>\n                    <blockquote data-nodeid=\"323488\">\n                      <p data-nodeid=\"323489\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/33.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325066\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/33.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325070\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/33.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325074\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323490\">\n                      <strong data-nodeid=\"325079\">练习题 7</strong\n                      >：题目限制了没有重复元素，如果有重复元素，如何进行查找呢？\n                    </p>\n                    <blockquote data-nodeid=\"323491\">\n                      <p data-nodeid=\"323492\">\n                        解法 1:<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/81.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-ii.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325083\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/81.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-ii.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325087\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/81.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-ii.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325091\"\n                          >Python</a\n                        ><br />\n                        解法 2:<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/81.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-ii.2.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325096\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/81.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-ii.2.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325100\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/81.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84-ii.2.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325104\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"323493\">\n                      <strong data-nodeid=\"325109\">练习题 8</strong\n                      >：一个有序数组经过了旋转，请找出这里面最小的元素（有重复元素）。\n                    </p>\n                    <blockquote data-nodeid=\"323494\">\n                      <p data-nodeid=\"323495\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/154.%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC-ii.java?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325113\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/154.%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC-ii.cpp?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325117\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/09.BinarySearch/154.%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC-ii.py?fileGuid=xxQTRXtVcqtHK6j8\"\n                          data-nodeid=\"325121\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"323496\">总结</h3>\n                    <p data-nodeid=\"323497\">\n                      到这里我们已经可以总结一下二分搜索涉及的知识点了，如下图所示：\n                    </p>\n                    <p data-nodeid=\"323498\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/27/B8/CioPOWBdnvmAHabcAAJ_yPY2KLM697.png\"\n                        alt=\"Drawing 32.png\"\n                        data-nodeid=\"325126\"\n                      />\n                    </p>\n                    <p data-nodeid=\"323499\">如果要顺利地解决二分搜索，那么：</p>\n                    <ul data-nodeid=\"323500\">\n                      <li data-nodeid=\"323501\">\n                        <p data-nodeid=\"323502\">\n                          首先你需要熟练地写出两个 lowerBound 和 upperBound\n                          的模板\n                        </p>\n                      </li>\n                      <li data-nodeid=\"323503\">\n                        <p data-nodeid=\"323504\">\n                          然后你需要学会应用提问破题法和切分法\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"323505\">\n                      掌握以上两个技巧，那么绝大部分涉及二分搜索的面试题就再也难不住你了。\n                    </p>\n                    <h3 data-nodeid=\"323506\">思考题</h3>\n                    <p data-nodeid=\"323507\">\n                      我再给你留一道<strong data-nodeid=\"325141\">思考题</strong\n                      >：给定两个有序数组，请找出这两个有序数组的中位数。(是的，这是“<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=685#/detail/pc?id=6697&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"325139\"\n                        >第 08 讲</a\n                      >”例 2）。不过我希望你能够用二分搜索的办法来进行求解。\n                    </p>\n                    <p data-nodeid=\"323508\" class=\"te-preview-highlight\">\n                      接下来请和我一起踏上更加奇妙的算法旅程。让我们继续前进。下一讲将介绍\n                      10 |双指针：如何掌握解决最长，定长，最短区间问题的决窍。\n                    </p>\n            "}