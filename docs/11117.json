{"title":"16 | tsconfig.json 配置：如何定制 TypeScript 的行为？","context":"\n                    <p data-nodeid=\"15965\">\n                      tsconfig.json 是 TypeScript\n                      项目的配置文件。如果一个目录下存在一个 tsconfig.json\n                      文件，那么往往意味着这个目录就是 TypeScript 项目的根目录。\n                    </p>\n                    <p data-nodeid=\"15966\">\n                      tsconfig.json 包含 TypeScript\n                      编译的相关配置，通过更改编译配置项，我们可以让 TypeScript\n                      编译出 ES6、ES5、node 的代码。\n                    </p>\n                    <p data-nodeid=\"15967\">\n                      这一讲我们将分别介绍 tsconfig.json\n                      中的相关配置选项，并对比较重要的编译选项进行着重介绍。\n                    </p>\n                    <h3 data-nodeid=\"15968\">compilerOptions</h3>\n                    <p data-nodeid=\"15969\">\n                      编译选项是 TypeScript 配置的核心部分，compilerOptions\n                      内的配置根据功能可以分为 6\n                      个部分，接下来我们分别介绍一下。\n                    </p>\n                    <h4 data-nodeid=\"15970\">项目选项</h4>\n                    <p data-nodeid=\"15971\">\n                      这些选项用于配置项目的运行时期望、转译 JavaScript\n                      的输出方式和位置，以及与现有 JavaScript 代码的集成级别。\n                    </p>\n                    <p data-nodeid=\"15972\">\n                      <strong data-nodeid=\"16128\">target</strong>\n                    </p>\n                    <p data-nodeid=\"15973\">\n                      target 选项用来指定 TypeScript\n                      编译代码的目标，不同的目标将影响代码中使用的特性是否会被降级。\n                    </p>\n                    <p data-nodeid=\"15974\">\n                      target 的可选值包括<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"16131\"\n                        >ES3</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"16133\">ES5</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"16135\">ES6</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"16137\">ES7</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"16139\"\n                        >ES2017</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"16141\"\n                        >ES2018</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"16143\"\n                        >ES2019</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"16145\"\n                        >ES2020</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"16147\"\n                        >ESNext</code\n                      >这几种。\n                    </p>\n                    <p data-nodeid=\"15975\">\n                      一般情况下，target 的默认值为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"16150\"\n                        >ES3</code\n                      >，如果不配置选项的话，代码中使用的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"16152\"\n                        >ES6</code\n                      >特性，比如箭头函数会被转换成等价的函数表达式。\n                    </p>\n                    <p data-nodeid=\"15976\">\n                      <strong data-nodeid=\"16157\">module</strong>\n                    </p>\n                    <p data-nodeid=\"15977\">\n                      module 选项可以用来设置 TypeScript 代码所使用的模块系统。\n                    </p>\n                    <p data-nodeid=\"15978\">\n                      如果 target 的值设置为 ES3、ES5 ，那么 module 的默认值则为\n                      CommonJS；如果 target 的值为 ES6 或者更高，那么 module\n                      的默认值则为 ES6。\n                    </p>\n                    <p data-nodeid=\"15979\">\n                      另外，module 还支持 ES2020、UMD、AMD、System、ESNext、None\n                      的选项。\n                    </p>\n                    <p data-nodeid=\"15980\">\n                      <strong data-nodeid=\"16164\">jsx</strong>\n                    </p>\n                    <p data-nodeid=\"15981\">\n                      jsx 选项用来控制 jsx 文件转译成 JavaScript\n                      的输出方式。该选项只影响<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"16166\"\n                        >.tsx</code\n                      >文件的 JS 文件输出，并且没有默认值选项。\n                    </p>\n                    <ul data-nodeid=\"15982\">\n                      <li data-nodeid=\"15983\">\n                        <p data-nodeid=\"15984\">\n                          react: 将 jsx 改为等价的对 React.createElement\n                          的调用，并生成 .js 文件。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15985\">\n                        <p data-nodeid=\"15986\">\n                          react-jsx: 改为 __jsx 调用，并生成 .js 文件。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15987\">\n                        <p data-nodeid=\"15988\">\n                          react-jsxdev: 改为 __jsx 调用，并生成 .js 文件。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15989\">\n                        <p data-nodeid=\"15990\">\n                          preserve: 不对 jsx 进行改变，并生成 .jsx 文件。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"15991\">\n                        <p data-nodeid=\"15992\">\n                          react-native: 不对 jsx 进行改变，并生成 .js 文件。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"15993\">\n                      <strong data-nodeid=\"16180\">incremental</strong>\n                    </p>\n                    <p data-nodeid=\"15994\">\n                      incremental 选项用来表示是否启动增量编译。incremental\n                      为<code data-backticks=\"1\" data-nodeid=\"16182\">true</code\n                      >时，则会将上次编译的工程图信息保存到磁盘上的文件中。\n                    </p>\n                    <p data-nodeid=\"15995\">\n                      <strong data-nodeid=\"16187\">declaration</strong>\n                    </p>\n                    <p data-nodeid=\"15996\">\n                      declaration 选项用来表示是否为项目中的 TypeScript 或\n                      JavaScript 文件生成 .d.ts 文件，这些 .d.ts\n                      文件描述了模块导出的 API 类型。\n                    </p>\n                    <p data-nodeid=\"15997\">\n                      具体的行为你可以在<a\n                        href=\"http://www.typescriptlang.org/play\"\n                        data-nodeid=\"16192\"\n                        >Playground</a\n                      >中编写代码，并在右侧的 .D.TS 观察输出。\n                    </p>\n                    <p data-nodeid=\"15998\">\n                      <strong data-nodeid=\"16197\">sourceMap</strong>\n                    </p>\n                    <p data-nodeid=\"15999\">\n                      sourceMap 选项用来表示是否生成<a\n                        href=\"https://developer.mozilla.org/docs/Tools/Debugger/How_to/Use_a_source_map\"\n                        data-nodeid=\"16201\"\n                        >sourcemap 文件</a\n                      >，这些文件允许调试器和其他工具在使用实际生成的 JavaScript\n                      文件时，显示原始的 TypeScript 代码。\n                    </p>\n                    <p data-nodeid=\"16000\">\n                      Source map 文件以 .js.map （或\n                      .jsx.map）文件的形式被生成到与 .js\n                      文件相对应的同一个目录下。\n                    </p>\n                    <p data-nodeid=\"16001\">\n                      <strong data-nodeid=\"16207\">lib</strong>\n                    </p>\n                    <p data-nodeid=\"16002\">\n                      在 13 讲中我们介绍过，安装 TypeScript 时会顺带安装一个\n                      lib.d.ts 声明文件，并且默认包含了\n                      ES5、DOM、WebWorker、ScriptHost 的库定义。\n                    </p>\n                    <p data-nodeid=\"16003\">\n                      lib\n                      配置项允许我们更细粒度地控制代码运行时的库定义文件，比如说\n                      Node.js 程序，由于并不依赖浏览器环境，因此不需要包含 DOM\n                      类型定义；而如果需要使用一些最新的、高级 ES\n                      特性，则需要包含 ESNext 类型。\n                    </p>\n                    <p data-nodeid=\"16004\">\n                      具体的详情你可以在<a\n                        href=\"https://github.com/microsoft/TypeScript/tree/master/lib\"\n                        data-nodeid=\"16213\"\n                        >TypeScript 源码</a\n                      >中查看完整的列表，并且自定义编译需要的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"16215\"\n                        >lib</code\n                      >类型定义。\n                    </p>\n                    <h4 data-nodeid=\"16005\">严格模式</h4>\n                    <p data-nodeid=\"16006\">\n                      TypeScript 兼容 JavaScript\n                      的代码，默认选项允许相当大的灵活性来适应这些模式。\n                    </p>\n                    <p data-nodeid=\"16007\">\n                      在迁移 JavaScript\n                      代码时，你可以先暂时关闭一些严格模式的设置。在正式的\n                      TypeScript 项目中，我推荐开启 strict\n                      设置启用更严格的类型检查，以减少错误的发生。\n                    </p>\n                    <p data-nodeid=\"16008\">\n                      <strong data-nodeid=\"16223\">strict</strong>\n                    </p>\n                    <p data-nodeid=\"16009\">\n                      开启 strict\n                      选项时，一般我们会同时开启一系列的类型检查选项，以便更好地保证程序的正确性。\n                    </p>\n                    <p data-nodeid=\"16010\">\n                      strict 为 true 时，一般我们会开启以下编译配置。\n                    </p>\n                    <ul data-nodeid=\"16011\">\n                      <li data-nodeid=\"16012\">\n                        <p data-nodeid=\"16013\">\n                          alwaysStrict：保证编译出的文件是 ECMAScript\n                          的严格模式，并且每个文件的头部会添加 'use strict'。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16014\">\n                        <p data-nodeid=\"16015\">\n                          strictNullChecks：更严格地检查 null 和 undefined\n                          类型，比如数组的 find 方法的返回类型将是更严格的 T |\n                          undefined。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16016\">\n                        <p data-nodeid=\"16017\">\n                          strictBindCallApply：更严格地检查 call、bind、apply\n                          函数的调用，比如会检查参数的类型与函数类型是否一致。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16018\">\n                        <p data-nodeid=\"16019\">\n                          strictFunctionTypes：更严格地检查函数参数类型和类型兼容性。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16020\">\n                        <p data-nodeid=\"16021\">\n                          strictPropertyInitialization：更严格地检查类属性初始化，如果类的属性没有初始化，则会提示错误。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16022\">\n                        <p data-nodeid=\"16023\">\n                          noImplicitAny：禁止隐式 any\n                          类型，需要显式指定类型。TypeScript\n                          在不能根据上下文推断出类型时，会回退到 any 类型。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16024\">\n                        <p data-nodeid=\"16025\">\n                          noImplicitThis：禁止隐式 this 类型，需要显示指定 this\n                          的类型。\n                        </p>\n                      </li>\n                    </ul>\n                    <blockquote data-nodeid=\"16026\">\n                      <p data-nodeid=\"16027\">\n                        <strong data-nodeid=\"16244\">注意：将</strong\n                        ><code data-backticks=\"1\" data-nodeid=\"16240\"\n                          >strict</code\n                        >设置为<code data-backticks=\"1\" data-nodeid=\"16242\"\n                          >true</code\n                        >，开启严格模式，是本课程极力推荐的最佳实践。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"16028\">额外检查</h4>\n                    <p data-nodeid=\"16029\">\n                      TypeScript\n                      支持一些额外的代码检查，在某种程度上介于编译器与静态分析工具之间。如果你想要更多的代码检查，可能更适合使用\n                      ESLint 这类工具。\n                    </p>\n                    <ul data-nodeid=\"16030\">\n                      <li data-nodeid=\"16031\">\n                        <p data-nodeid=\"16032\">\n                          <strong data-nodeid=\"16251\">noImplicitReturns</strong\n                          >：禁止隐式返回。如果代码的逻辑分支中有返回，则所有的逻辑分支都应该有返回。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16033\">\n                        <p data-nodeid=\"16034\">\n                          <strong data-nodeid=\"16256\">noUnusedLocals</strong\n                          >：禁止未使用的本地变量。如果一个本地变量声明未被使用，则会抛出错误。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16035\">\n                        <p data-nodeid=\"16036\">\n                          <strong data-nodeid=\"16261\">noUnusedParameters</strong\n                          >：禁止未使用的函数参数。如果函数的参数未被使用，则会抛出错误。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"16037\">\n                        <p data-nodeid=\"16038\">\n                          <strong data-nodeid=\"16266\"\n                            >noFallthroughCasesInSwitch</strong\n                          >：禁止 switch 语句中的穿透的情况。开启\n                          noFallthroughCasesInSwitch 后，如果 switch\n                          语句的流程分支中没有 break 或 return\n                          ，则会抛出错误，从而避免了意外的 swtich\n                          判断穿透导致的问题。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"16039\">模块解析</h4>\n                    <p data-nodeid=\"16040\">\n                      模块解析部分的编译配置会影响代码中模块导入以及编译相关的配置。\n                    </p>\n                    <p data-nodeid=\"16041\">\n                      <strong data-nodeid=\"16272\">moduleResolution</strong>\n                    </p>\n                    <p data-nodeid=\"16042\">\n                      moduleResolution 用来指定模块解析策略。\n                    </p>\n                    <p data-nodeid=\"16043\">\n                      module 配置值为 AMD、UMD、System、ES6 时，moduleResolution\n                      默认为 classic，否则为\n                      node。在目前的新代码中，我们一般都是使用\n                      node，而不使用classic。\n                    </p>\n                    <p data-nodeid=\"16044\">\n                      具体的模块解析策略，你可以查看<a\n                        href=\"https://www.typescriptlang.org/docs/handbook/module-resolution.html#module-resolution-strategies\"\n                        data-nodeid=\"16278\"\n                        >模块解析策略</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"16045\">\n                      <strong data-nodeid=\"16283\">baseUrl</strong>\n                    </p>\n                    <p data-nodeid=\"16046\">\n                      baseUrl\n                      指的是基准目录，用来设置解析非绝对路径模块名时的基准目录。比如设置\n                      baseUrl 为 './' 时，TypeScript 将会从 tsconfig.json\n                      所在的目录开始查找文件。\n                    </p>\n                    <p data-nodeid=\"16047\">\n                      <strong data-nodeid=\"16292\">paths</strong>\n                    </p>\n                    <p data-nodeid=\"16048\">\n                      paths 指的是路径设置，用来将模块路径重新映射到相对于\n                      baseUrl 定位的其他路径配置。这里我们可以将 paths 理解为\n                      webpack 的 alias 别名配置。\n                    </p>\n                    <p data-nodeid=\"16049\">下面我们看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"paths\"</span>: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"@src/*\"</span>: [<span class=\"hljs-string\">\"src/*\"</span>],\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"@utils/*\"</span>: [<span class=\"hljs-string\">\"src/utils/*\"</span>]\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"16051\">\n                      在上面的例子中，TypeScript\n                      模块解析支持以一些自定义前缀来寻找模块，避免在代码中出现过长的相对路径。\n                    </p>\n                    <blockquote data-nodeid=\"16052\">\n                      <p data-nodeid=\"16053\">\n                        <strong data-nodeid=\"16299\"\n                          >注意：因为 paths\n                          中配置的别名仅在类型检测时生效，所以在使用 tsc\n                          转译或者 webpack 构建 TypeScript\n                          代码时，我们需要引入额外的插件将源码中的别名替换成正确的相对路径。</strong\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"16054\">\n                      <strong data-nodeid=\"16303\">rootDirs</strong>\n                    </p>\n                    <p data-nodeid=\"16055\">\n                      rootDirs\n                      可以指定多个目录作为根目录。这将允许编译器在这些“虚拟”目录中解析相对应的模块导入，就像它们被合并到同一目录中一样。\n                    </p>\n                    <p data-nodeid=\"16056\">\n                      <strong data-nodeid=\"16308\">typeRoots</strong>\n                    </p>\n                    <p data-nodeid=\"16057\">\n                      typeRoots 用来指定类型文件的根目录。\n                    </p>\n                    <p data-nodeid=\"16058\">\n                      在默认情况下，所有 node_modules/@types\n                      中的任何包都被认为是可见的。如果手动指定了 typeRoots\n                      ，则仅会从指定的目录里查找类型文件。\n                    </p>\n                    <p data-nodeid=\"16059\">\n                      <strong data-nodeid=\"16316\">types</strong>\n                    </p>\n                    <p data-nodeid=\"16060\">\n                      在默认情况下，所有的 typeRoots 包都将被包含在编译过程中。\n                    </p>\n                    <p data-nodeid=\"16061\">\n                      手动指定 types\n                      时，只有列出的包才会被包含在全局范围内，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"types\"</span>: [<span class=\"hljs-string\">\"node\"</span>, <span class=\"hljs-string\">\"jest\"</span>, <span class=\"hljs-string\">\"express\"</span>]\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"16063\">\n                      在上述示例中可以看到，手动指定 types 时 ，仅包含了\n                      node、jest、express 三个 node 模块的类型包。\n                    </p>\n                    <p data-nodeid=\"16064\">\n                      <strong data-nodeid=\"16323\"\n                        >allowSyntheticDefaultImports</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"16065\">\n                      allowSyntheticDefaultImports****允许合成默认导出。\n                    </p>\n                    <p data-nodeid=\"16066\">\n                      当 allowSyntheticDefaultImports 设置为\n                      true，即使一个模块没有默认导出（export\n                      default），我们也可以在其他模块中像导入包含默认导出模块一样的方式导入这个模块，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// allowSyntheticDefaultImports: true 可以使用</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// allowSyntheticDefaultImports: false</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"16068\">\n                      在上面的示例中，对于没有默认导出的模块 react，如果设置了\n                      allowSyntheticDefaultImports 为 true，则可以直接通过\n                      import 导入 react；但如果设置 allowSyntheticDefaultImports\n                      为 false，则需要通过 import * as 导入 react。\n                    </p>\n                    <p data-nodeid=\"16069\">\n                      <strong data-nodeid=\"16334\">esModuleInterop</strong>\n                    </p>\n                    <p data-nodeid=\"16070\">\n                      esModuleInterop 指的是 ES 模块的互操作性。\n                    </p>\n                    <p data-nodeid=\"16071\">\n                      在默认情况下，TypeScript 像 ES6 模块一样对待 CommonJS /\n                      AMD / UMD，但是此时的 TypeScript 代码转移会导致不符合 ES6\n                      模块规范。不过，开启 esModuleInterop\n                      后，这些问题都将得到修复。\n                    </p>\n                    <p data-nodeid=\"16072\">\n                      一般情况下，在启用 esModuleInterop 时，我们将同时启用\n                      allowSyntheticDefaultImports。\n                    </p>\n                    <h4 data-nodeid=\"16073\">Source Maps</h4>\n                    <p data-nodeid=\"16074\">\n                      为了支持丰富的调试工具，并为开发人员提供有意义的崩溃报告，TypeScript\n                      支持生成符合 JavaScript Source Map 标准的附加文件（即 .map\n                      文件）。\n                    </p>\n                    <p data-nodeid=\"16075\">\n                      <strong data-nodeid=\"16343\">sourceRoot</strong>\n                    </p>\n                    <p data-nodeid=\"16076\">\n                      sourceRoot 用来指定调试器需要定位的 TypeScript\n                      文件位置，而不是相对于源文件的路径。\n                    </p>\n                    <p data-nodeid=\"16077\">\n                      sourceRoot<strong data-nodeid=\"16350\">的</strong\n                      >取值可以是路径或者 URL。\n                    </p>\n                    <p data-nodeid=\"16078\">\n                      <strong data-nodeid=\"16354\">mapRoot</strong>\n                    </p>\n                    <p data-nodeid=\"16079\">\n                      mapRoot 用来指定调试器需要定位的 source map\n                      文件的位置，而不是生成的文件位置。\n                    </p>\n                    <p data-nodeid=\"16080\">\n                      <strong data-nodeid=\"16359\">inlineSourceMap</strong>\n                    </p>\n                    <p data-nodeid=\"16081\">\n                      开启 inlineSourceMap 选项时，将不会生成 .js.map\n                      文件，而是将 source map 文件内容生成内联字符串写入对应的\n                      .js 文件中。虽然这样会生成较大的 JS 文件，但是在不支持\n                      .map 调试的环境下将会很方便。\n                    </p>\n                    <p data-nodeid=\"16082\">\n                      <strong data-nodeid=\"16364\">inlineSources</strong>\n                    </p>\n                    <p data-nodeid=\"16083\">\n                      开启 inlineSources\n                      选项时，将会把源文件的所有内容生成内联字符串并写入 source\n                      map 中。这个选项的用途和 inlineSourceMap 是一样的。\n                    </p>\n                    <h4 data-nodeid=\"16084\">实验选项</h4>\n                    <p data-nodeid=\"16085\">\n                      TypeScript 支持一些尚未在 JavaScript\n                      提案中稳定的语言特性，因此在 TypeScript\n                      中实验选项是作为实验特性存在的。\n                    </p>\n                    <p data-nodeid=\"16086\">\n                      <strong data-nodeid=\"16371\"\n                        >experimentalDecorators</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"16087\">\n                      experimentalDecorators****选项会开启<a\n                        href=\"https://github.com/tc39/proposal-decorators\"\n                        data-nodeid=\"16377\"\n                        >装饰器提案</a\n                      >的特性。\n                    </p>\n                    <p data-nodeid=\"16088\">\n                      <strong data-nodeid=\"16382\"\n                        >目前，装饰器提案在 stage 2 仍未完全批准到 JavaScript\n                        规范中，且 TypeScript 实现的装饰器版本可能和 JavaScript\n                        有所不同。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"16089\">\n                      <strong data-nodeid=\"16386\">emitDecoratorMetadata</strong>\n                    </p>\n                    <p data-nodeid=\"16090\">\n                      emitDecoratorMetadata****选项允许装饰器使用反射数据的特性。\n                    </p>\n                    <h4 data-nodeid=\"16091\">高级选项</h4>\n                    <p data-nodeid=\"16092\">\n                      <strong data-nodeid=\"16394\">skipLibCheck</strong>\n                    </p>\n                    <p data-nodeid=\"16093\">\n                      开启 skipLibCheck****选项，表示可以跳过检查声明文件。\n                    </p>\n                    <p data-nodeid=\"16094\">\n                      如果我们开启了这个选项，则可以节省编译期的时间，但可能会牺牲类型系统的准确性。<strong\n                        data-nodeid=\"16406\"\n                        >在设置该选项时，我推荐值为</strong\n                      >true**。**\n                    </p>\n                    <p data-nodeid=\"16095\">\n                      <strong data-nodeid=\"16410\"\n                        >forceConsistentCasingInFileNames</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"16096\">\n                      TypeScript\n                      对文件的大小写是敏感的。如果有一部分的开发人员在大小写敏感的系统开发，而另一部分的开发人员在大小写不敏感的系统开发，则可能会出现问题。\n                    </p>\n                    <p data-nodeid=\"16097\">\n                      <strong data-nodeid=\"16415\"\n                        >开启此选项后，如果开发人员正在使用和系统不一致的大小写规则，则会抛出错误。</strong\n                      >\n                    </p>\n                    <h3 data-nodeid=\"16098\">include</h3>\n                    <p data-nodeid=\"16099\">\n                      include 用来指定需要包括在 TypeScript\n                      项目中的文件或者文件匹配路径。如果我们指定了 files\n                      配置项，则 include 的 默认值为 []，否则 include 默认值为\n                      [\"**/*\"] ，即包含了目录下的所有文件。\n                    </p>\n                    <p data-nodeid=\"16100\">\n                      如果 glob 匹配的文件中没有包含文件的扩展名，则只有 files\n                      支持的扩展名会被包含。\n                    </p>\n                    <p data-nodeid=\"16101\">\n                      一般来说，include 的默认值为.ts、.tsx 和\n                      .d.ts。如果我们开启了 allowJs 选项，还包括 .js 和 .jsx\n                      文件。\n                    </p>\n                    <h3 data-nodeid=\"16102\">exclude</h3>\n                    <p data-nodeid=\"16103\">\n                      exclude 用来指定解析 include\n                      配置中需要跳过的文件或者文件匹配路径。一般来说，exclude\n                      的默认值为 [\"node_modules\", \"bower_components\",\n                      \"jspm_packages\"]。\n                    </p>\n                    <blockquote data-nodeid=\"16104\">\n                      <p data-nodeid=\"16105\">\n                        <strong data-nodeid=\"16461\">需要注意</strong>：<code\n                          data-backticks=\"1\"\n                          data-nodeid=\"16457\"\n                          >exclude</code\n                        >配置项只会改变<code\n                          data-backticks=\"1\"\n                          data-nodeid=\"16459\"\n                          >include</code\n                        >配置项中的结果。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"16106\">files</h3>\n                    <p data-nodeid=\"16107\">\n                      files 选项用来指定 TypeScript 项目中需要包含的文件列表。\n                    </p>\n                    <p data-nodeid=\"16108\">\n                      如果项目非常小，那么我们可以使用 files<strong\n                        data-nodeid=\"16472\"\n                        >指定项目的文件，否则更适合使用</strong\n                      >include<strong data-nodeid=\"16473\"\n                        >指定项目文件。</strong\n                      >\n                    </p>\n                    <h3 data-nodeid=\"16109\">extends</h3>\n                    <p data-nodeid=\"16110\">\n                      extends\n                      配置项的值是一个字符串，用来声明当前配置需要继承的另外一个配置的路径，这个路径使用\n                      Node.js 风格的解析模式。TypeScript 首先会加载 extends\n                      的配置文件，然后使用当前的 tsconfig.json\n                      文件里的配置覆盖继承的文件里的配置。\n                    </p>\n                    <p data-nodeid=\"16111\">\n                      TypeScript 会基于当前 tsconfig.json\n                      配置文件的路径解析所继承的配置文件中出现的相对路径。\n                    </p>\n                    <h3 data-nodeid=\"16112\">小结和预告</h3>\n                    <p data-nodeid=\"16113\">\n                      tsconfig.json 是 TypeScript\n                      项目非常重要的配置文件，这一讲我们着重介绍了编译选项中不同功能的常用选项，更多的\n                      TypeScript 配置可以在<a\n                        href=\"https://www.typescriptlang.org/tsconfig\"\n                        data-nodeid=\"16481\"\n                        >TSConfig Reference</a\n                      >中查看学习。\n                    </p>\n                    <p data-nodeid=\"16114\">\n                      你也可以结合这一讲的内容新建项目并更改 tsconfig.json\n                      实践学习。\n                    </p>\n                    <p data-nodeid=\"16115\">\n                      17 讲我们将介绍解析在 TypeScript\n                      项目开发中常见的类型错误以及如何为 TypeScript\n                      类型编写单元测试，敬请期待！\n                    </p>\n                    <p data-nodeid=\"16116\">\n                      另外，如果你觉得本专栏有价值，欢迎分享给更多好友。\n                    </p>\n            "}