{"title":"19 | 如何理解软件开发灵活性和高定制性？","context":"\n                    <p data-nodeid=\"929\" class=\"\">\n                      前两讲我们介绍了前端开发领域常见的开发模式和封装思想，这一讲，我们将该主题升华，聊一聊软件开发灵活性和高定制性这个话题。\n                    </p>\n                    <p data-nodeid=\"930\">\n                      业务需求是烦琐多变的，因此开发灵活性至关重要，这直接决定了开发效率，而与灵活性相伴相生的话题就是定制性。本讲主要从设计模式和函数式思想入手，从实际代码出发，来阐释灵活性和高定制性。\n                    </p>\n                    <h3 data-nodeid=\"931\">设计模式</h3>\n                    <p data-nodeid=\"932\">\n                      设计模式——我认为这是一个“一言难尽”的概念。维基百科对设计模式的定义为：\n                    </p>\n                    <blockquote data-nodeid=\"933\">\n                      <p data-nodeid=\"934\">\n                        在软件工程中，设计模式（Design\n                        Pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich\n                        Gamma）等人在 1990\n                        年代从建筑设计领域引入到计算机科学的。设计模式并不是直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"935\">\n                      设计模式一般认为有 23 种，这 23\n                      种设计模式的本质是面向对象设计原则的实际运用，是对<strong\n                        data-nodeid=\"1038\"\n                        >类的封装性、继承性和多态性，以及类的关联关系和组合关系</strong\n                      >的总结应用。\n                    </p>\n                    <p data-nodeid=\"936\">\n                      事实上，设计模式是一种经验总结，它就是一套“兵法”，最终是为了更好的代码重用性、可读性、可靠性、可维护性。我认为设计模式不能只停留在理论上，而是应该结合到实际代码当中。在平常开发中，“也许你不知道，但是已经在使用设计模式了”。\n                    </p>\n                    <p data-nodeid=\"937\">\n                      下面我们将从前端中最常见的两种设计模式展开讲解。\n                    </p>\n                    <h4 data-nodeid=\"938\">代理模式</h4>\n                    <p data-nodeid=\"939\">\n                      代理模式大家应该都不陌生，ES.next 提供的 Proxy\n                      特性让我们实现代理模式变得更加容易。关于 Proxy\n                      特性的使用这些基础内容这里不过多赘述，我们直接来看一些代理模式的应用场景。\n                    </p>\n                    <p data-nodeid=\"940\">\n                      一个常见的代理模式应用场景是针对计算成本比较高的函数，我们可以<strong\n                        data-nodeid=\"1048\"\n                        >通过对函数进行代理，来缓存函数对应参数的计算返回结果</strong\n                      >。在函数执行时，优先使用缓存值，否则返回执行计算值，如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> getCacheProxy = (fn, cache = <span class=\"hljs-keyword\">new</span> Map()) =&gt; \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 代理函数 fn</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">new</span> Proxy(fn, {\n</div></li><li><div class=\"code-word\">  \t<span class=\"hljs-comment\">// 代理 fn 的调用方法</span>\n</div></li><li><div class=\"code-word\">    apply(target, context, args) {\n</div></li><li><div class=\"code-word\">    \t<span class=\"hljs-comment\">// 将调用参数字符串化，方便作为存储 key</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> argsString = args.join(<span class=\"hljs-string\">' '</span>)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 判断是否存在缓存，如果存在直接返回缓存值</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (cache.has(argsString)) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> cache.get(argsString)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 执行 fn 方法，得到计算结果</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> result = fn(...args)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 存储相关计算结果</span>\n</div></li><li><div class=\"code-word\">      cache.set(argsString, result)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> result\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  })\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"942\">\n                      利用上述实现思想，我们还可以很轻松地实现一个根据调用频率来进行截流的函数代理，如下代码实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> createThrottleProxy = (fn, timer) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 计算时间差</span>\n</div></li><li><div class=\"code-word\">  let last = Date.now() - timer\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 代理函数 fn</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Proxy(fn, {\n</div></li><li><div class=\"code-word\">  \t <span class=\"hljs-comment\">// 代理函数调用</span>\n</div></li><li><div class=\"code-word\">    apply(target, context, args) {\n</div></li><li><div class=\"code-word\">    \t<span class=\"hljs-comment\">// 计算距离上次调用的时间差，如果大于 rate 则直接调用</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (Date.now() - last &gt;= rate) {\n</div></li><li><div class=\"code-word\">        fn(args)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 记录此次调用时间</span>\n</div></li><li><div class=\"code-word\">        last = Date.now()\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"944\">\n                      我们再看一个 jQuery 中的一个例子，jQuery 中<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1051\"\n                        >$.proxy()</code\n                      >方法接受一个已有的函数，并返回一个带有特定上下文的新函数。比如对于向一个特定对象的元素添加事件回调，如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">$( <span class=\"hljs-string\">\"button\"</span> ).on( <span class=\"hljs-string\">\"click\"</span>, function () {\n</div></li><li><div class=\"code-word\">  setTimeout(function () {\n</div></li><li><div class=\"code-word\">    $(<span class=\"hljs-keyword\">this</span>).addClass( <span class=\"hljs-string\">\"active\"</span> );\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"946\">\n                      上述代码中的<code data-backticks=\"1\" data-nodeid=\"1054\"\n                        >$(this)</code\n                      >因为是在<code data-backticks=\"1\" data-nodeid=\"1056\"\n                        >setTimeout</code\n                      >中执行，不再是预期之中的“当前触发事件的元素”，我们可以存储\n                      this 指向来完成：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">$( <span class=\"hljs-string\">\"button\"</span> ).on( <span class=\"hljs-string\">\"click\"</span>, function () {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> that = $(<span class=\"hljs-keyword\">this</span>)\n</div></li><li><div class=\"code-word\">  setTimeout(function () {\n</div></li><li><div class=\"code-word\">    that.addClass( <span class=\"hljs-string\">\"active\"</span> );\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"948\">\n                      也可以使用 jQuey 中的代理方法。如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">$( <span class=\"hljs-string\">\"button\"</span> ).on( <span class=\"hljs-string\">\"click\"</span>, function () {\n</div></li><li><div class=\"code-word\">    setTimeout($.proxy( unction () {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 这里的 this 指向正确</span>\n</div></li><li><div class=\"code-word\">        $(<span class=\"hljs-keyword\">this</span>).addClass( <span class=\"hljs-string\">\"active\"</span> );\n</div></li><li><div class=\"code-word\">    }, <span class=\"hljs-keyword\">this</span>), <span class=\"hljs-number\">500</span>);\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"950\">\n                      其实，jQuery 源码中<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1060\"\n                        >$.proxy</code\n                      >的实现也并不困难：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">proxy: function( fn, context ) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 模拟 bind 方法</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> args = slice.call(arguments, <span class=\"hljs-number\">2</span>),\n</div></li><li><div class=\"code-word\">    proxy = function() {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> fn.apply( context, args.concat( slice.call( arguments ) ) );\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里的做法主要为了使得 proxy 全局唯一，以便后续删除</span>\n</div></li><li><div class=\"code-word\">  proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> proxy;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"952\">\n                      上述代码中我们模拟了<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1063\"\n                        >bind</code\n                      >方法，以保证 this 上下文的准确。\n                    </p>\n                    <p data-nodeid=\"953\">\n                      事实上，代理模式在前端中的使用场景非常多。我们熟悉的 Vue\n                      框架，为了完成对数据的拦截和代理，以便结合观察者模式，对数据变化进行响应，在最新版本中，也使用了\n                      Proxy 特性，这些都是代理模式的典型应用。\n                    </p>\n                    <h4 data-nodeid=\"954\">装饰者模式</h4>\n                    <p data-nodeid=\"955\">\n                      简单来说，装饰者模式就是<strong data-nodeid=\"1072\"\n                        >在不改变原对象的基础上，对其对象进行包装和拓展，使原对象能够应对更加复杂的需求</strong\n                      >。这有点像高阶函数，因此在前端开发中很常见，如下面代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React, { Component } from <span class=\"hljs-string\">'react'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> {connect} from <span class=\"hljs-string\">'react-redux'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\"> render() {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">//...</span>\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title\">connect</span><span class=\"hljs-params\">(mapStateToProps,actionCreators)</span><span class=\"hljs-params\">(App)</span></span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"957\">\n                      react-redux 类库中的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1074\"\n                        >connect</code\n                      >方法，对相关 React 组件进行包装，以拓展新的\n                      Props。另外，这种方法在 ant-design\n                      中也有非常典型的应用，如下面代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CustomizedForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{}\n</div></li><li><div class=\"code-word\">CustomizedForm = Form.create({})(CustomizedForm)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"959\">\n                      如上代码，我们将一个 React\n                      组件进行“装饰”，使其获得了表单组件的一些特性。\n                    </p>\n                    <p data-nodeid=\"960\">\n                      事实上，我们将上述介绍的两种模式相结合，很容易衍生出 AOP\n                      面向切面编程的概念。如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">Function.prototype.before = function(fn) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 函数本身</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> self = <span class=\"hljs-function\"><span class=\"hljs-keyword\">this</span>\n</span></div></li><li><div class=\"code-word\">  return <span class=\"hljs-title\">function</span><span class=\"hljs-params\">()</span> {\n</div></li><li><div class=\"code-word\">  \t <span class=\"hljs-comment\">// 执行 self 函数前，需要执行的函数 fn</span>\n</div></li><li><div class=\"code-word\">    fn.apply(<span class=\"hljs-keyword\">new</span>(self), arguments)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> self.apply(<span class=\"hljs-keyword\">new</span>(self), arguments)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">Function.prototype.after = function(fn) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> self = <span class=\"hljs-function\"><span class=\"hljs-keyword\">this</span>\n</span></div></li><li><div class=\"code-word\">  return <span class=\"hljs-title\">function</span><span class=\"hljs-params\">()</span> {\n</div></li><li><div class=\"code-word\">  \t <span class=\"hljs-comment\">// 先执行 self 函数</span>\n</div></li><li><div class=\"code-word\">    self.apply(<span class=\"hljs-keyword\">new</span>(self), arguments)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 执行 self 函数后，需要执行的函数 fn</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> fn.apply(<span class=\"hljs-keyword\">new</span>(self), arguments)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"962\">\n                      如上代码，我们对函数原型进行了扩展，在函数调用前后分别调用了相关切面方法。一个典型的场景就是对表单提交值进行验证。如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> validate = function(){\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 表单验证逻辑</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> formSubmit = function() {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 表单提交逻辑</span>\n</div></li><li><div class=\"code-word\">  ajax( <span class=\"hljs-string\">'http:// xxx.com/login'</span>, param )\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">submitBtn.onclick = function() {\n</div></li><li><div class=\"code-word\">  formSubmit.before( validate )\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"964\">\n                      至此，我们对前端中常见的两种设计模式进行了分析，实际上，在前端中还处处可见观察者模式等经典设计模式的应用，我们将在下一讲中，进行更多说明。\n                    </p>\n                    <h3 data-nodeid=\"965\">函数式思想应用</h3>\n                    <p data-nodeid=\"966\">\n                      前面我们介绍了设计模式相关内容，事实上，设计模式和面向对象话题相伴相生，而面向对象和函数式思想“相互对立”，互为补充。函数式思想在前端领域同样应用颇多，这里我们简单对函数式思想的基础应用进行说明。\n                    </p>\n                    <h4 data-nodeid=\"967\">函数组合的简单应用</h4>\n                    <p data-nodeid=\"968\">纯函数是指：</p>\n                    <blockquote data-nodeid=\"969\">\n                      <p data-nodeid=\"970\">\n                        一个函数如果输入参数确定，输出结果是唯一确定的，那么它就是纯函数。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"971\">\n                      同时，需要强调的是<strong data-nodeid=\"1090\"\n                        >纯函数不能修改外部变量，不能调用 Math.radom()\n                        方法以及发送异步请求等</strong\n                      >，因为这些操作都不具有确定性，可能会产生副作用。\n                    </p>\n                    <p data-nodeid=\"972\">\n                      纯函数是函数式编程中最基本的概念。另一个基本概念是——高阶函数：\n                    </p>\n                    <blockquote data-nodeid=\"973\">\n                      <p data-nodeid=\"974\">\n                        高阶函数体现了“函数是第一等公民”，它是指这样的一类函数：该函数接受一个函数作为参数，返回另外一个函数。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"975\">\n                      我们来看一个例子：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1094\"\n                        >filterLowerThan10</code\n                      >这个函数接受一个数组作为参数，它会挑选出数组中数值小于 10\n                      的项目，所有符合条件的值都会构成新数组被返回：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> filterLowerThan10 = array =&gt; {\n</div></li><li><div class=\"code-word\">    let result = []\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>, length = array.length; i &lt; length; i++) {\n</div></li><li><div class=\"code-word\">        let currentValue = array[i]\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (currentValue &lt; <span class=\"hljs-number\">10</span>) result.push(currentValue)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> result\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"977\">\n                      另外一个需求，挑选出数组中非数值项目，所有符合条件的值都会构成新数组被返回，如下<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1097\"\n                        >filterNaN</code\n                      >函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> filterNaN = array =&gt; {\n</div></li><li><div class=\"code-word\">    let result = []\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>, length = array.length; i &lt; length; i++) {\n</div></li><li><div class=\"code-word\">        let currentValue = array[i]\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (isNaN(currentValue)) result.push(currentValue)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> result\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"979\">\n                      上面两个函数都是比较典型的纯函数，不够优雅的一点是\n                      filterLowerThan10 和 filterNaN<strong data-nodeid=\"1104\"\n                        >都有遍历的逻辑，都存在了重复的 for 循环</strong\n                      >。它们本质上都是遍历一个列表，并用给定的条件过滤列表。那么我们能否用函数式的思想，将遍历和筛选解耦呢？\n                    </p>\n                    <p data-nodeid=\"980\">\n                      好在 JavaScript 对函数式较为友好，我们使用 Filter\n                      函数来完成，并进行一定程度的改造，如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> lowerThan10 = value =&gt; value &lt; <span class=\"hljs-number\">10</span>\n</div></li><li><div class=\"code-word\">[<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">89</span>].filter(lowerThan10)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"982\">\n                      继续延伸我们的场景，如果输入比较复杂，想先过滤出小于 10\n                      的项目，需要先保证数组中每一项都是 Number\n                      类型，那么可以使用下面的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[<span class=\"hljs-number\">12</span>, <span class=\"hljs-string\">'sd'</span>, <span class=\"hljs-keyword\">null</span>, undefined, {}, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>].filter(value=&gt; !isNaN(value) &amp;&amp; value !== <span class=\"hljs-keyword\">null</span>).filter(lowerThan10)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"984\">我们通过组合，实现了更多的场景。</p>\n                    <h4 data-nodeid=\"985\">curry 和 uncurry</h4>\n                    <p data-nodeid=\"986\">\n                      继续思考上面的例子，filterLowerThan10 还是硬编码写死了 10\n                      这个阈值，我们用 curry 化的思想将其改造，如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> filterLowerNumber = number =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> array =&gt; {\n</div></li><li><div class=\"code-word\">        let result = []\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>, length = array.length; i &lt; length; i++) {\n</div></li><li><div class=\"code-word\">            let currentValue = array[i]\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (currentValue &lt; number) result.push(currentValue)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> result\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> filterLowerThan10 = filterLowerNumber(<span class=\"hljs-number\">10</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"988\">\n                      上面代码中我们提到了 curry 化这个概念，简单说明：\n                    </p>\n                    <blockquote data-nodeid=\"989\">\n                      <p data-nodeid=\"990\">\n                        curry\n                        化，柯里化（currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由克里斯托弗·斯特雷奇以逻辑学家哈斯凯尔·加里命名的。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"991\">curry 化的优势非常明显：</p>\n                    <ul data-nodeid=\"992\">\n                      <li data-nodeid=\"993\">\n                        <p data-nodeid=\"994\">提高复用性</p>\n                      </li>\n                      <li data-nodeid=\"995\">\n                        <p data-nodeid=\"996\">减少重复传递不必要的参数</p>\n                      </li>\n                      <li data-nodeid=\"997\">\n                        <p data-nodeid=\"998\">动态根据上下文创建函数</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"999\">\n                      其中动态根据上下文创建函数，也是一种<strong\n                        data-nodeid=\"1121\"\n                        >惰性求值</strong\n                      >的体现。比如这段代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> addEvent = (function() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (window.addEventListener) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> function (type, element, handler, capture) {\n</div></li><li><div class=\"code-word\">            element.addEventListener(type, handler, capture)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (window.attachEvent){\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> function (type, element, fn) {\n</div></li><li><div class=\"code-word\">            element.attachEvent(<span class=\"hljs-string\">'on'</span> + type, fn)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">})()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1001\">\n                      这是一个典型兼容 IE9 浏览器事件 API\n                      的例子，根据兼容性的嗅探，充分利用 curry\n                      化思想，完成了需求。\n                    </p>\n                    <p data-nodeid=\"1002\">\n                      那么我们如何编写一个通用化的 curry\n                      函数呢？下面我给出一种方案：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> curry = (fn, length) =&gt; {\n</div></li><li><div class=\"code-word\">\t <span class=\"hljs-comment\">// 记录函数的行参个数</span>\n</div></li><li><div class=\"code-word\">    length = length || fn.<span class=\"hljs-function\">length\n</span></div></li><li><div class=\"code-word\">    return <span class=\"hljs-title\">function</span> <span class=\"hljs-params\">(...args)</span> {\n</div></li><li><div class=\"code-word\">    \t  <span class=\"hljs-comment\">// 当参数未满时，递归调用</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (args.length &lt; length) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> curry(fn.bind(<span class=\"hljs-keyword\">this</span>, ...args), length - args.length)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 参数已满，执行 fn 函数</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> fn.call(<span class=\"hljs-keyword\">this</span>, ...args)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1004\">\n                      如果不想使用 bind，另一种常规思路是<strong\n                        data-nodeid=\"1129\"\n                        >对每次调用时产生的参数进行存储</strong\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> curry = fn =&gt;\n</div></li><li><div class=\"code-word\">    judge = (...arg1) =&gt;\n</div></li><li><div class=\"code-word\">    \t <span class=\"hljs-comment\">// 判断参数是否已满</span>\n</div></li><li><div class=\"code-word\">        arg1.length &gt;= fn.length\n</div></li><li><div class=\"code-word\">            ? fn(...arg1) <span class=\"hljs-comment\">// 执行函数</span>\n</div></li><li><div class=\"code-word\">            : (...arg2) =&gt; judge(...arg1, ...arg2) <span class=\"hljs-comment\">// 将参数合并，继续递归调用</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1006\">\n                      对应 curry 化，还有一种反 curry 化的概念：<strong\n                        data-nodeid=\"1135\"\n                        >反 curry\n                        化在于扩大函数的适用性，使本来作为特定对象所拥有的功能函数可以被任意对象使用</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1007\">\n                      有一个 UI 组件 Toast，如下代码简化为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">Toast</span> <span class=\"hljs-params\">(options)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.message = <span class=\"hljs-string\">''</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">Toast.prototype = {\n</div></li><li><div class=\"code-word\">    showMessage: function () {\n</div></li><li><div class=\"code-word\">        console.log(<span class=\"hljs-keyword\">this</span>.message)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1009\">\n                      这样的代码，使得 Toast 实例均可使用 ShowMessage\n                      方法，使用方式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">new</span> Toast({message: <span class=\"hljs-string\">'show me'</span>}).showMessage()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1011\">\n                      如果脱离组件场景，我们不想实现 Toast 实例，而使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1139\"\n                        >Toast.prototype.showMessage</code\n                      >方法，预期通过反 curry 化实现，如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 反 curry 化通用函数</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 核心实现思想是：先取出要执行 fn 方法的对象，标记为 obj1，同时从 arguments 中删除，在调用 fn 时，将 fn 执行上下文环境改为 obj1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> unCurry = fn =&gt; (...args) =&gt; fn.call(...args)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> obj = {\n</div></li><li><div class=\"code-word\">    message: <span class=\"hljs-string\">'uncurry test'</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> unCurryShowMessaage = unCurry(Toast.prototype.showMessage)\n</div></li><li><div class=\"code-word\">unCurryShowMessaage(obj)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1013\">\n                      以上是正常函数实现 uncurry 的实现。我们也可以将 uncurry\n                      挂载在函数原型上，如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 反 curry 化通用函数挂载在函数原型上</span>\n</div></li><li><div class=\"code-word\">Function.prototype.unCurry = !Function.prototype.unCurry || function () {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> self = <span class=\"hljs-function\"><span class=\"hljs-keyword\">this</span>\n</span></div></li><li><div class=\"code-word\">    return <span class=\"hljs-title\">function</span> <span class=\"hljs-params\">()</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> Function.prototype.call.apply(self, arguments)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1015\">当然，我们可以借助 bind 实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">Function.prototype.unCurry = function() {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.call.bind(<span class=\"hljs-keyword\">this</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1017\">我们通过下面这个例子来理解：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 将 Array.prototype.push 反 curry 化，实现一个适用于对象的 push 方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> push = Array.prototype.push.unCurry()\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> test = { foo: <span class=\"hljs-string\">'lucas'</span> }\n</div></li><li><div class=\"code-word\">push(test, <span class=\"hljs-string\">'messi'</span>, <span class=\"hljs-string\">'ronaldo'</span>, <span class=\"hljs-string\">'neymar'</span>)\n</div></li><li><div class=\"code-word\">console.log(test) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// {0: \"messi\", 1: \"ronaldo\", 2: \"neymar\", foo: \"lucas\", length: 3}</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1019\">\n                      反 curry 化的核心思想就在于：<strong data-nodeid=\"1149\"\n                        >利用第三方对象和上下文环境，“强行改命，为我所用”</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1020\">\n                      最后我们再看一个例子，我们将对象原型上的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1151\"\n                        >toString</code\n                      >方法“为我所用”，实现了一个更普遍适用的类型检测函数。如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 利用反 curry 化，创建一个检测数据类型的函数 checkType</span>\n</div></li><li><div class=\"code-word\">let checkType = uncurring(Object.prototype.toString)\n</div></li><li><div class=\"code-word\">checkType(<span class=\"hljs-string\">'lucas'</span>); <span class=\"hljs-comment\">// [object String]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"1022\">总结</h3>\n                    <p data-nodeid=\"1023\">\n                      这一讲我们从设计模式和函数式两大编程思想流派入手，分析了如何在编程中做到灵活性和高定制性，并通过大量的实例来强化思想，巩固认识。\n                    </p>\n                    <p data-nodeid=\"2345\">本讲主要内容如下：</p>\n                    <p data-nodeid=\"2346\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/04/4C/CioPOWAotoKAV0zTAAd4xm7pR44651.png\"\n                        alt=\"前端基建 金句.png\"\n                        data-nodeid=\"2350\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"1026\">\n                      事实上，前端领域中的灵活性和高定制性编码方案和其他领域相关思想是完全一致的，设计模式和函数式具有“普世意义”，我们将会在下一讲中继续延伸这类话题。\n                    </p>\n                    <p data-nodeid=\"1027\" class=\"\">\n                      这里我也给大家留一个思考题：你还用过哪些设计模式的使用场景呢？欢迎在留言区和我分享你的经历。下一讲，我们将深入对象和原型，理解\n                      JavaScript\n                      在这个方向上的能力。请注意，下一讲我们不再过多赘述基础，而是面向进阶，需要你具有一定的知识准备。我们下一讲再见。\n                    </p>\n            "}