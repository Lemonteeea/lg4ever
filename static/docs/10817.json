{"title":"模块三导读 | 编译和优化：了解编译过程和背后的优化思想","context":"\n                    <p data-nodeid=\"88\">\n                      在组件实现的章节，我们分析了组件生成到页面 DOM 会经历创建\n                      vnode、渲染 vnode 到 DOM\n                      的过程。但其实我们编写组件时，并不会直接去手写组件\n                      vnode，其中创建 vnode 的过程，实际上是 Vue.js\n                      内部帮我们完成的。\n                    </p>\n\n                    <p data-nodeid=\"4\">\n                      我们知道在组件的渲染过程中，会通过 renderComponentRoot\n                      方法渲染子树 vnode，然后再把子树 vnode patch 生成\n                      DOM。renderComponentRoot 内部主要通过执行组件实例的 render\n                      函数，创建生成子树 vnode。\n                    </p>\n                    <p data-nodeid=\"5\">\n                      而我们最常见的开发组件的方式就是编写 template\n                      模板去描述组件的 DOM 结构，很少直接去编写组件的 render\n                      函数，那么 Vue.js 内部就需要把 template 编译生成 render\n                      函数，这就是 Vue.js 的编译过程。\n                    </p>\n                    <p data-nodeid=\"6\">\n                      组件 template\n                      的编译过程，可以离线完成，也可以运行时完成，在前面的章节我们已经介绍过了。Vue.js\n                      3.0\n                      为了运行时的性能优化，在编译阶段也是下了不少功夫，所以我们这一模块的学习目标主要就两点：<strong\n                        data-nodeid=\"19\"\n                        >了解编译过程以及背后的优化思想</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"7\">\n                      由于编译过程平时开发中很难接触到，所以不需要你对每一个细节都了解，你只要对整体有一个理解和掌握即可。另外，后续我们在分析\n                      Vue.js\n                      的一些特性时，也会结合编译过程一起分析，也会经常回顾编译的过程和结果，帮你加深印象。\n                    </p>\n                    <p data-nodeid=\"140\" class=\"\">\n                      最后，在学习这章节内容的过程中，希望你可以使用官方的一个<a\n                        href=\"https://vue-next-template-explorer.netlify.app/\"\n                        data-nodeid=\"144\"\n                        >模板导出工具</a\n                      >，在线调试模板的实时编译结果，辅助学习。如果你想在线调试编译的过程，可以在\n                      vue-next 的源码\n                      packages/template-explorer/dist/template-explorer.global.js\n                      中的关键流程上打debugger 断点，然后在根目录下运行 npm run\n                      dev-compiler 命令，接着访问\n                      <a\n                        href=\"http://localhost:5000/packages/template-explorer\"\n                        data-nodeid=\"148\"\n                        >http://localhost:5000/packages/template-explorer</a\n                      >调试即可。\n                    </p>\n            "}