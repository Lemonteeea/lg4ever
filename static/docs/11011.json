{"title":"第09讲：为什么代码没有按照编写顺序执行？","context":"\n                    <p data-nodeid=\"1281\" class=\"\">\n                      前端工程师算是最幸运的软件工程师，因为从一开始就可以接触到“异步”这种高级特性，比如\n                      DOM 事件、AJAX\n                      请求及定时器；同时也是最不幸的软件工程师，因为入门\n                      JavaScript 的时候就要习惯<strong data-nodeid=\"1393\"\n                        >异步</strong\n                      >这种高难度的开发方式，比如上一课时提到的那道经典的笔试题，就是异步造成的输出结果与预期不一致。\n                    </p>\n                    <p data-nodeid=\"1282\">\n                      这一课时我们就来深入讲解前端工程师熟悉但并不完全了解的\n                      JavaScript 异步。\n                    </p>\n                    <h3 data-nodeid=\"1283\">了解异步</h3>\n                    <h4 data-nodeid=\"1284\">异步和同步</h4>\n                    <p data-nodeid=\"1285\">\n                      相比<strong data-nodeid=\"1406\">异步</strong\n                      >而言，大多数工程师可能更熟悉的是<strong\n                        data-nodeid=\"1407\"\n                        >同步</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1286\">\n                      要比较同步和异步，可以将调用函数的过程分成两部分：<strong\n                        data-nodeid=\"1413\"\n                        >执行操作和返回结果</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1287\">\n                      程序在同步调用函数的时候，会<strong data-nodeid=\"1423\"\n                        >立即执行操作并等待得到返回结果后再继续运行</strong\n                      >，也就是说<strong data-nodeid=\"1424\"\n                        >同步执行是阻塞的</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1288\">\n                      而异步会将操作和结果在时间上分隔开来，在当下执行操作，在未来某个时刻返回结果，在这个等待返回结果的过程中，程序将继续执行后面的代码。也就是说<strong\n                        data-nodeid=\"1430\"\n                        >异步执行是非阻塞的</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1289\">再举个简单的例子来说明同步和异步。</p>\n                    <p data-nodeid=\"1290\">\n                      下面的代码定义了同步函数 syncAdd 和异步函数 asyncAdd，调用\n                      syncAdd(1,2)\n                      函数时会等待得到结果之后再执行后面的代码。而调用\n                      asyncAdd(1,2,console.log)\n                      时则会在得到结果之前继续执行，直到 1 秒后得到结果并打印。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">syncAdd</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> a + b;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">syncAdd(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// 立即得到结果 3</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">asyncAdd</span>(<span class=\"hljs-params\">a, b, cb</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; cb(a + b);\n</div></li><li><div class=\"code-word\">&nbsp; }, <span class=\"hljs-number\">1000</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">asyncAdd(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">console</span>.log) <span class=\"hljs-comment\">// 1s后打印结果 3</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"1292\">异步与回调</h4>\n                    <p data-nodeid=\"1293\">\n                      如果你经常调用 JavaScript\n                      的异步函数可能会形成一个结论：<strong data-nodeid=\"1439\"\n                        >异步操作都采用回调函数的形式</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1294\">\n                      毕竟从浏览器端的 DOM 事件、AJAX 请求、定时器到 Node.js\n                      端的文件读写、多进程，都是采用的回调形式。但事实真是如此吗？\n                    </p>\n                    <p data-nodeid=\"1295\">\n                      下面是一段简单的代码，定义了一个 JSON 对象\n                      a，然后把它打印到控制台，最后再将对象 a 的 couter.index\n                      属性值自增 1。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">counter</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">index</span>: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log( a ); <span class=\"hljs-comment\">// ?</span>\n</div></li><li><div class=\"code-word\">a.counter.index++;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1297\">\n                      如果你把上面的代码复制粘贴到浏览器控制台中运行，应该可以看到控制台打印了一个可能和你预期不一致的\n                      JSON 对象：{conter:{index: 2}}。<br />\n                      原因在于浏览器在运行代码的时候，把控制台打印这种涉及 I/O\n                      的操作进行了延迟执行。可能你会猜想是不是控制台打印的只是将对象\n                      a\n                      进行了类似“浅拷贝”的操作，否定这种猜想很简单，此时再执行一次自增操作，就会发现被打印的对象值并没有发生变化。\n                    </p>\n                    <p data-nodeid=\"1298\">\n                      既然并非所有异步都回调，那么反过来，是否所有回调函数都是异步执行的呢？答案也是否定的。\n                    </p>\n                    <p data-nodeid=\"1299\">\n                      在上一课时中我们就提到过回调形式的同步函数，比如数组原型函数\n                      forEach，又比如改变 this 指向的 call。\n                    </p>\n                    <h3 data-nodeid=\"1300\">异步原理</h3>\n                    <p data-nodeid=\"1301\">\n                      回顾了异步的基础概念，下面就来深入讲解异步的原理。\n                    </p>\n                    <h4 data-nodeid=\"1302\">事件循环</h4>\n                    <p data-nodeid=\"1303\">\n                      对于大多数语言而言，实现异步会通过启动额外的进程、线程或协程来实现，而我们在前面已经提到过，JavaScript\n                      是单线程的。\n                    </p>\n                    <p data-nodeid=\"1304\">\n                      <strong data-nodeid=\"1455\"\n                        >为什么单线程还能实现异步呢</strong\n                      >？\n                    </p>\n                    <p data-nodeid=\"1305\">\n                      其实也没有什么特殊的黑魔法，只是把一些操作交给了其他线程处理，然后采用了一种称之为“<strong\n                        data-nodeid=\"1461\"\n                        >事件循环</strong\n                      >”（也称“事件轮询”）的机制来处理返回结果。\n                    </p>\n                    <p data-nodeid=\"1306\">\n                      下面用一段简化的代码，来帮助你快速地理解事件循环机制。\n                    </p>\n                    <p data-nodeid=\"1307\">\n                      数组 eventLoop 表示<strong data-nodeid=\"1468\"\n                        >事件队列</strong\n                      >（也有称作“任务队列”），用来存放需要执行的任务事件（可以理解为回调函数），对象\n                      event 变量表示当前需要执行的任务事件。\n                    </p>\n                    <p data-nodeid=\"1308\">\n                      用一个永不停止的 while\n                      循环来表示事件循环，每一次循环称为一个 tick。\n                    </p>\n                    <p data-nodeid=\"1309\">\n                      对每个 tick\n                      而言，如果在队列中有等待事件，那么就会从队列中获取一个事件并执行，这些事件通常是回调函数的形式。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> eventLoop = []; <span class=\"hljs-comment\">// 事件队列，先进先出</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> event; <span class=\"hljs-comment\">// 事件执行成功的回调回调函数</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 一次tick</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (eventLoop.length &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 队列中取出回调函数</span>\n</div></li><li><div class=\"code-word\">    event = eventLoop.shift();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">      event();\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">catch</span> (err) {\n</div></li><li><div class=\"code-word\">      reportError(err);&nbsp;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1311\">\n                      那么这个事件队列里的事件是怎么来的呢？\n                    </p>\n                    <p data-nodeid=\"1312\">\n                      以 AJAX 请求为例，当我们发出一个 AJAX\n                      请求时，浏览器会将请求任务分派给网络线程来进行处理，当对应的网络线程拿到返回的数据之后，就会把回调函数插入到事件队列中。\n                    </p>\n                    <p data-nodeid=\"1313\">\n                      setTimeout 和 setInterval 也是同样的道理，当我们执行\n                      setTimeout\n                      的时候并不是直接把回调函数放入事件队列中。它所做的是交给定时器线程来处理，当定时器到时后，再把回调函数放在事件队列中，这样，在未来的某轮\n                      tick 中获取并执行这个回调函数。\n                    </p>\n                    <p data-nodeid=\"1314\">\n                      这么做有一个隐性的问题，如果事件队列中已经有其他事件，那么这个回调就会排队等待。\n                    </p>\n                    <p data-nodeid=\"1315\">\n                      所以说 setTimeout/setInterval\n                      定时器的精度并不高。准确地说，它只能确保回调函数不会在指定的时间间隔之前运行，但可能会在那个时刻运行，也可能在那之后运行，这就要根据事件队列的状态而定。\n                    </p>\n                    <h4 data-nodeid=\"1316\">事件队列</h4>\n                    <p data-nodeid=\"1317\">\n                      在讲述 setTimeout/setInterval\n                      原理的时候也暴露了事件队列的一个缺陷：<strong\n                        data-nodeid=\"1481\"\n                        >事件队列按照先进先出的顺序执行，那么如果队列较长时，排在后面的事件即使较为“紧急”，也得需要等待前面的任务先执行完成。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1318\">\n                      JavaScript 解决这个问题的思路就是：<strong\n                        data-nodeid=\"1487\"\n                        >设置多个队列，按照优先级来执行</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1319\">\n                      下面这段代码可以验证 JavaScript 内部拥有优先级不同的 2\n                      个队列，在下图中分别用绿色和红色表示，其中红色队列优先级高于绿色队列。\n                    </p>\n                    <p data-nodeid=\"1320\">\n                      这段代码定义了 4 个异步函数 f1、f2、f3、f4，其中：\n                    </p>\n                    <ul data-nodeid=\"1321\">\n                      <li data-nodeid=\"1322\">\n                        <p data-nodeid=\"1323\">\n                          函数 f1 通过定时器 setTimeout\n                          向绿色队列中插入一个控制台打印任务，输出数字 1；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1324\">\n                        <p data-nodeid=\"1325\">\n                          函数 f2 通过 Promise\n                          向红色队列中插入一个控制台打印任务，输出数字 2；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1326\">\n                        <p data-nodeid=\"1327\">\n                          函数 f3 通过定时器 setTimeout\n                          向绿色队列中插入一个回调函数，该回调函数会调用控制台打印数字\n                          3，并且调用函数 f2；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1328\">\n                        <p data-nodeid=\"1329\">\n                          函数 f4 通过 Promise\n                          向红色队列中插入一个回调函数，该回调函数会调用控制台打印数字\n                          4，并且调用函数 f1。\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f1</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-built_in\">console</span>.log.bind(<span class=\"hljs-literal\">null</span>,<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f2</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">Promise</span>.resolve().then(<span class=\"hljs-built_in\">console</span>.log.bind(<span class=\"hljs-literal\">null</span>,<span class=\"hljs-number\">2</span>))\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f3</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">3</span>)\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; f2()\n</div></li><li><div class=\"code-word\">&nbsp; }, <span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f4</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">Promise</span>.resolve().then(<span class=\"hljs-function\">() =&gt;</span> {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">4</span>)\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; f1()\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">f3()\n</div></li><li><div class=\"code-word\">f4()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4017\">\n                      这段代码的执行过程和结果可以查看下图，当调用函数 f3 和函数\n                      f4 之后，绿色队列和红色队列都会被插入一个匿名回调函数。\n                    </p>\n                    <ul data-nodeid=\"4018\">\n                      <li data-nodeid=\"4019\">\n                        <p data-nodeid=\"4020\">\n                          第 1 次\n                          tick，由于红色队列优先级高，所以先执行红色匿名函数，控制台打印数字\n                          4，然后调用函数 f1，向绿色队列中插入一个打印函数；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4021\">\n                        <p data-nodeid=\"4022\">\n                          第 2 次\n                          tick，按照先进先出原则，此时调用匿名函数打印数字\n                          3，并调用函数 f2，向红色队列中插入一个打印函数；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4023\">\n                        <p data-nodeid=\"4024\">\n                          第 3 次 tick，调用红色队列中的打印函数，控制台打印数字\n                          2；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4025\">\n                        <p data-nodeid=\"4026\">\n                          第 4 次 tick，调用绿色队列中的打印函数，控制台打印数字\n                          1。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"4027\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/1F/41/CgqCHl7m1W-AUWjTAAGFy-O9UzA843.png\"\n                        alt=\"image\"\n                        data-nodeid=\"4081\"\n                      />\n                    </p>\n                    <p data-nodeid=\"4028\">\n                      关于红色队列和绿色队列，一般称为“<strong\n                        data-nodeid=\"4100\"\n                        >宏任务队列</strong\n                      >（Macro Task Queue）”和“<strong data-nodeid=\"4101\"\n                        >微任务队列</strong\n                      >（Micro Task Queue）”，也有的称为“Task Queue”和“Job\n                      Queue”。不管如何称呼，我们需要记住的是，<strong\n                        data-nodeid=\"4103\"\n                        >不同队列优先级不同，每次事件循环时会从优先级高的队列中获取事件，只有当优先级高的队列为空时才会从优先级<b\n                          ><strong data-nodeid=\"4102\">低</strong></b\n                        >的队列中获取事件，同级队列之间的事件不存在优先级，只遵循先进先出的原则。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"4029\">\n                      常见的异步函数优先级如下，从上到下优先级逐层降低：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">process.nextTick(Node.js) &gt; \n</div></li><li><div class=\"code-word\">MutationObserver(浏览器)/promise.then(<span class=\"hljs-keyword\">catch</span>、finnally)&gt;\n</div></li><li><div class=\"code-word\">setImmediate(IE) &gt; \n</div></li><li><div class=\"code-word\">setTimeout/setIntervalrequestAnimationFrame &gt;\n</div></li><li><div class=\"code-word\">其他 I/O 操作 / 浏览器 DOM 事件\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"4031\">处理异步</h3>\n                    <p data-nodeid=\"4032\">\n                      由于回调函数这种形式的代码可读性非常差，所以在编写代码的时候要尽量将回调形式转化成返回\n                      Promise 对象的形式，一方面由于 ES6 标准下提供了原生\n                      Promise 对象及方法，另一方面 Promise\n                      的可操作性也更强，比如可以配合 async/await\n                      关键字使用，也可以转换成\n                      <a\n                        href=\"https://rxjs.dev/api/index/function/from\"\n                        data-nodeid=\"4109\"\n                        >Observable</a\n                      >\n                      对象。所以越来越多的第三方库异步函数都开始返回 Promise\n                      对象。\n                    </p>\n                    <p data-nodeid=\"4033\">\n                      下面我们就以 Promise\n                      形式的异步函数为例，讲解几个常见的异步场景。\n                    </p>\n                    <h4 data-nodeid=\"4034\">异步串行</h4>\n                    <p data-nodeid=\"4035\">\n                      将异步转化为串行执行是非常常见的操作，先通过一个简单的例子来回顾基本实现方式。\n                    </p>\n                    <p data-nodeid=\"4036\">\n                      考虑异步函数 asyncF1 和 asyncF2，且 asyncF2 依赖 asyncF1\n                      的返回结果执行。使用 Promise 提供的 then\n                      函数可以直接实现，伪代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">asyncF1()\n</div></li><li><div class=\"code-word\">.then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> asyncF2(data))\n</div></li><li><div class=\"code-word\">.then(<span class=\"hljs-function\">() =&gt;</span> {\n</div></li><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\">.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.error(e))\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4038\">\n                      如果使用 async/await 可以摆脱链式调用，代码可读性更好：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> asyncFn1()\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-keyword\">await</span> asyncFn2(data)\n</div></li><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">catch</span>(e) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.error(e)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">})()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4040\">\n                      回顾完基础用法，来提升一下难度。假设现在要按照顺序执行调用\n                      asyncF 函数 n 次，该怎么实现呢？\n                    </p>\n                    <p data-nodeid=\"4041\">\n                      对于这种场景可以通过数组函数 reduce\n                      来实现，而不是简单地使用 for 循环或数组的 forEach\n                      函数，比如像下面这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">[<span class=\"hljs-number\">1.</span>..n].reduce(<span class=\"hljs-keyword\">async</span> (lastPromise, i) =&gt; {\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">await</span> lastPromise\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">await</span> asyncF())\n</div></li><li><div class=\"code-word\">&nbsp; } <span class=\"hljs-keyword\">catch</span>(e) {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.error(e)\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">}, <span class=\"hljs-built_in\">Promise</span>.resolve())\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4043\">\n                      再升级一下难度，通过一道笔试题来加深理解。\n                    </p>\n                    <p data-nodeid=\"4044\">\n                      现在需要延迟打印数组 [1,2,3,4,5]，每一次打印的初始延迟为\n                      1000ms，增长延迟为 500ms。打印结果如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-number\">0</span>s:    <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">1</span>s:    <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">2.5</span>s: <span class=\"hljs-number\">3</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">4.5</span>s: <span class=\"hljs-number\">4</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">7</span>s:    <span class=\"hljs-number\">5</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4046\">\n                      这道题也是将多个异步函数改为串行执行的典型例子，所以也可以通过\n                      reduce\n                      函数来实现。由于引入了递增的延迟执行，所以都需要得到上一次执行的延迟时间。具体代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n</div></li><li><div class=\"code-word\">arr.reduce(<span class=\"hljs-keyword\">async</span> (prs, cur, index) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-keyword\">await</span> prs\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> time = index === <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1000</span> + (index - <span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">500</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-built_in\">console</span>.log(cur);\n</div></li><li><div class=\"code-word\">      res(time)\n</div></li><li><div class=\"code-word\">    }, time)\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">}, <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">0</span>))\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"4048\">异步并行</h4>\n                    <p data-nodeid=\"4049\">\n                      并行也是异步常用的场景，重点掌握下面 3 个静态函数。\n                    </p>\n                    <p data-nodeid=\"4050\">\n                      （1）<strong data-nodeid=\"4135\"\n                        >Promise.all([promise1 ...... promiseN])</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"4051\">\n                      调用函数 Promise.all 会返回一个新的 Promise\n                      实例，该实例在参数内所有的 promise 都完成 (resolved)\n                      时回调完成 (resolve)；如果参数中&nbsp; promise\n                      有一个失败（rejected），那么此实例返回第一个失败 promise\n                      的结果。\n                    </p>\n                    <p data-nodeid=\"4052\">\n                      当执行的异步函数具有强一致性时可以使用它，比如要更新一个较大的表单数据，会发送多个请求分别更新不同的数据，如果一个请求更新失败则放弃本次提交。\n                    </p>\n                    <p data-nodeid=\"4053\">\n                      （2）<strong data-nodeid=\"4146\"\n                        >Promise.allSettled([promise1......promiseN])</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"4054\">\n                      调用函数 Promise.allsellted 会返回一个新的 Promise\n                      实例，该实例会在所有给定的 promise\n                      已经执行完成时返回一个对象数组，每个对象表示对应的 promise\n                      结果。\n                    </p>\n                    <p data-nodeid=\"4055\">\n                      这个函数适用于需要并发执行多个异步函数，这些异步函数的执行结果相互独立。比如同时发送多个\n                      AJAX 请求来分别更新多条数据。\n                    </p>\n                    <p data-nodeid=\"4056\">\n                      （3）<strong data-nodeid=\"4157\"\n                        >Promise.race([promise1......promiseN])</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"4057\">\n                      调用函数 Promise.race 会返回一个新的 promise\n                      实例，一旦参数中的某个 promise 执行完成，新的 promise\n                      实例就会返回对应 promise 的执行结果。\n                    </p>\n                    <p data-nodeid=\"4058\">\n                      这个函数会让多个并发函数产生“竞争”，从而挑选出最先执行完成的。比如尝试从多个网址加载图片资源。\n                    </p>\n                    <h4 data-nodeid=\"4059\">异常处理</h4>\n                    <p data-nodeid=\"4060\">\n                      Promise 有一个隐藏的“坑”，那就是内部的异常不能在外部通过\n                      try/catch\n                      所捕获，当内部发生异常时，会自动进入失败状态（rejected）。所以下面的代码是等价的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// 等价于&nbsp; reject(new Error(0))&nbsp;</span>\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4062\">\n                      所以建议尽量使用 catch 子句而不是在 then 子句中捕获\n                      Promise 异常，因为这样可以捕获 then 子句中的异常信息。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">.then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> arr = data.split(<span class=\"hljs-string\">''</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">//...</span>\n</div></li><li><div class=\"code-word\">}, <span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> {  <span class=\"hljs-comment\">// 这里捕获不到</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">.then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> arr = data.split(<span class=\"hljs-string\">''</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\">.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> { <span class=\"hljs-comment\">// 这里可以捕获</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"4064\">补充：Promise 的局限性</h3>\n                    <p data-nodeid=\"4065\">\n                      虽然 Promise\n                      相对于回调具有明显的优势，但其仍然有一些局限性，至少有下面\n                      2 个方面的问题。\n                    </p>\n                    <h4 data-nodeid=\"4066\">立即执行</h4>\n                    <p data-nodeid=\"4067\">\n                      当一个 Promise\n                      实例被创建时，内部的代码就会立即被执行，而且无法从外部停止。比如无法取消超时或消耗性能的异步调用，容易导致资源的浪费。\n                    </p>\n                    <h4 data-nodeid=\"4068\">单次执行</h4>\n                    <p data-nodeid=\"4069\">\n                      Promise 处理的问题都是“一次性”的，因为一个 Promise\n                      实例只能 resolve 或 reject\n                      一次，所以面对某些需要持续响应的场景时就会变得力不从心。比如上传文件获取进度时，默认采用的就是通过事件监听的方式来实现。\n                    </p>\n                    <p data-nodeid=\"4070\">\n                      所以说 Promise\n                      并不是万能的，全面了解其优缺点能帮助我们更好地使用\n                      Promise。上述这些问题其实都有解决方案，比如使用\n                      <a href=\"https://rxjs.dev/\" data-nodeid=\"4172\">RxJS</a\n                      >，期待你在工作中多思考、多积累，找到更多更好的解决方案。\n                    </p>\n                    <h3 data-nodeid=\"4071\">总结</h3>\n                    <p data-nodeid=\"4072\">\n                      这一课时涉及了 JavaScript\n                      的核心特性——异步，先从异步概念说起，然后深入异步原理讲述了事件循环和事件队列，最后列举了\n                      3\n                      个常见异步场景的处理方法。异步属于笔试题必考的考点，比如任务队列部分，将\n                      setTimeout/Promise/nextTick\n                      这些异步函数和对象进行任意组合即可出题，所以一定要理解原理。\n                    </p>\n                    <p data-nodeid=\"4073\">\n                      最后布置一道思考题：尝试使用\n                      <a href=\"https://rxjs.dev/\" data-nodeid=\"4179\">RxJS</a>\n                      实现多个 Promise\n                      的串行和并行，并说说它在处理异步方面的优缺点。\n                    </p>\n            "}