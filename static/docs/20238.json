{"title":"37 | 如何处理 Go 错误异常与并发陷阱？","context":"\n                    <p data-nodeid=\"316442\" class=\"\">\n                      错误处理是软件开发中不可回避的问题，<strong\n                        data-nodeid=\"316526\"\n                        >Go 中主要通过 error 和 panic 分别表示错误和异常</strong\n                      >，并提供了较为简洁的错误异常处理机制。作为一门并发性能优越的语言，Go\n                      虽然降低了协程并发开发的难度，但也存在一些<strong\n                        data-nodeid=\"316527\"\n                        >并发陷阱</strong\n                      >，这就需要我们在开发时额外注意。\n                    </p>\n                    <p data-nodeid=\"316443\">\n                      在本课时，我们就来介绍 Go\n                      中的一些错误处理机制，并讲解如何去规避一些常见的并发陷阱。\n                    </p>\n                    <h3 data-nodeid=\"316444\">Errors are values</h3>\n                    <p data-nodeid=\"316445\">\n                      错误处理是每个开发人员都需要面对的问题，在我过去接触的编程语言中，大多是通过<strong\n                        data-nodeid=\"316539\"\n                        >try-catch 的方式</strong\n                      >对可能出现错误的代码块进行包装：<strong\n                        data-nodeid=\"316540\"\n                        >程序运行 try 中代码，如果 try\n                        中的代码运行出错，程序将会立即跳转到 catch\n                        中执行异常处理逻辑</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"316446\">\n                      与其他的编程语言不同，Go 中倡导“Errors are\n                      values!”的处理思想，它将 error\n                      作为一个返回值，来迫使调用者对 error\n                      进行处理或者忽略。于是，在代码中我们将会编写大量的 if\n                      判断语句对 error 进行判断，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">result, err := dothing(<span class=\"hljs-string\">\"work\"</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">\tlog.Fatal(err)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// do other thing</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316448\">\n                      当项目的代码快速增长起来时，我们会发现代码中到处都是类似\n                      err != nil\n                      的判断片段。虽然这会使代码变得很烦琐，但是这种设计和约定也会鼓励开发人员明确检查和确定错误发生的位置。\n                    </p>\n                    <p data-nodeid=\"316449\">在 Go 中，error 接口定义如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> error <span class=\"hljs-keyword\">interface</span> {\n</div></li><li><div class=\"code-word\">\tError() <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316451\">\n                      最常用的 error 实现是 Go 标准库 errors 包中内置的\n                      errorString，它是一个仅包含错误信息的error 实现，可以通过\n                      errors.New 和 fmt.Errorf 函数创建。内置的 error\n                      接口使得开发人员可以为错误添加任何所需的信息，error\n                      可以是实现 Error()\n                      方法的任何类型，比如我们可以为错误添加错误码和调用栈信息，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> Error <span class=\"hljs-keyword\">struct</span> {\n</div></li><li><div class=\"code-word\">\tMsg <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">\tCode <span class=\"hljs-keyword\">int32</span>\n</div></li><li><div class=\"code-word\">\tSt []<span class=\"hljs-keyword\">uintptr</span> <span class=\"hljs-comment\">// 调用栈</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 获取调用栈信息</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">callers</span><span class=\"hljs-params\">()</span> []<span class=\"hljs-title\">uintptr</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">var</span> pcs [<span class=\"hljs-number\">32</span>]<span class=\"hljs-keyword\">uintptr</span>\n</div></li><li><div class=\"code-word\">\tn := runtime.Callers(<span class=\"hljs-number\">3</span>, pcs[:])\n</div></li><li><div class=\"code-word\">\tst := pcs[<span class=\"hljs-number\">0</span>:n]\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> st\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">New</span><span class=\"hljs-params\">(code <span class=\"hljs-keyword\">int32</span>, msg <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">error</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> &amp;Error{\n</div></li><li><div class=\"code-word\">\t\tCode: <span class=\"hljs-keyword\">int32</span>(code),\n</div></li><li><div class=\"code-word\">\t\tMsg:  msg,\n</div></li><li><div class=\"code-word\">\t\tSt: callers(),\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(e *Error)</span> <span class=\"hljs-title\">Error</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">string</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> e == <span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"OK\"</span>\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">\"code:%d, msg:%s\"</span>, e.Code, e.Msg)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316453\">\n                      通过<strong data-nodeid=\"316554\">断言</strong>的方式可以将\n                      error 转化为特定的类型从而进行特异化处理，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> e, ok := err.(*Error); ok {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 取出堆栈信息进行处理</span>\n</div></li><li><div class=\"code-word\">\tst := e.st\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// ....</span>\n</div></li><li><div class=\"code-word\">}<span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 其他错误处理</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316455\">\n                      在 Go 1.13 版本之后，errors 包中添加了 errors.Is 和\n                      errors.As 函数：errors.Is 方法用来比较两个 error\n                      是否相等，而 errors.As 函数用来判断 error 是否为特定类型。\n                    </p>\n                    <p data-nodeid=\"316456\">\n                      由于 error 是一个值，因此我们可以对其进行编程，简化 Go\n                      错误处理的重复代码。在一些管道和循环的代码中，只要其中一次处理出现错误，就应该退出本次管道或者循环。寻常的做法是在每次迭代都检查错误，但为了让管道和循环的操作显得更加自然，我们可以将\n                      error\n                      封装到独立的方法或者变量中返回，以避免错误处理掩盖控制流程，如\n                      gorm 中的 DB 设计所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">err := DB.Where(queryString, queryValue...).\n</div></li><li><div class=\"code-word\">\t\tTable(<span class=\"hljs-string\">\"table_name\"</span>).\n</div></li><li><div class=\"code-word\">\t\tUpdates(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">interface</span>{}{...}).Error\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 错误处理逻辑</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316458\">\n                      这里 error 是从 gorm.DB 的 Error\n                      成员变量中获取的。在数据库请求执行结束之后，程序才从 DB\n                      中获取执行错误，这样的写法使得错误处理不会中断执行流程。但需要注意的是，无论如何简化\n                      error 的设计，程序都要检查和处理错误，错误是无法避免的。\n                    </p>\n                    <h3 data-nodeid=\"316459\">defer、panic 和 recover</h3>\n                    <p data-nodeid=\"316460\">\n                      错误一般是一些开发人员“意料之内”的错误，比如获取数据库连接失败等，这些都是在\n                      Go 中通过 error\n                      表达并可控。但当程序出现异常，如数组访问越界这类“意料之外”的错误时，它能够导致程序运行崩溃，此时就需要开发人员捕获异常并恢复程序的正常运行流程。\n                    </p>\n                    <p data-nodeid=\"316461\">\n                      接下来我们就介绍 defer、panic 和 recover\n                      如何组合恢复运行时执行异常的 Go 程序。\n                    </p>\n                    <p data-nodeid=\"316462\">\n                      <strong data-nodeid=\"316565\"\n                        >defer 是 Go 中提供的一种延迟执行机制</strong\n                      >，每次执行\n                      defer，都会将对应的函数压入栈中。在函数返回或者 panic\n                      异常结束时，Go 会依次从栈中取出延迟函数执行。\n                    </p>\n                    <p data-nodeid=\"316463\">\n                      在编程的时候，经常需要打开一些资源，比如数据库连接、文件等，在资源使用完成之后需要释放，不然有可能会造成资源泄漏。这个时候，我们可以通过\n                      defer\n                      语句在函数执行完之后，自动释放资源，避免在每个函数返回之前手动释放资源，减少冗余代码。\n                    </p>\n                    <p data-nodeid=\"316464\">\n                      defer 有三个比较重要的特点。<strong data-nodeid=\"316576\"\n                        >第一个是按照调用 defer 的逆序执行</strong\n                      >，即后调用的在函数退出时先执行，<strong\n                        data-nodeid=\"316577\"\n                        >后进先出</strong\n                      >。如下例子所示:\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> fmt.Println(<span class=\"hljs-string\">\"I register at first, but execute at last\"</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> fmt.Println(<span class=\"hljs-string\">\"I register at middle, execute at middle\"</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> fmt.Println(<span class=\"hljs-string\">\"I register at last, execute at first\"</span>)\n</div></li><li><div class=\"code-word\">\tfmt.Println(<span class=\"hljs-string\">\"test begin\"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316466\">预期的结果为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\">test <span class=\"hljs-keyword\">begin</span>\n</div></li><li><div class=\"code-word\">I register at last, execute at first\n</div></li><li><div class=\"code-word\">I register at middle, execute at middle\n</div></li><li><div class=\"code-word\">I register at first, but execute at last\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316468\">\n                      <strong data-nodeid=\"316583\"\n                        >第二个特点是 defer\n                        被定义时，参数变量会被立即解析，传递参数的值拷贝</strong\n                      >。在函数内使用的变量其实是对外部变量的一个拷贝，在函数体内，对变量更改也不会影响外部变量，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\ti := <span class=\"hljs-number\">10</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> fmt.Printf(<span class=\"hljs-string\">\"defer i is %d\\n\"</span>, i)\n</div></li><li><div class=\"code-word\">\ti = <span class=\"hljs-number\">20</span>\n</div></li><li><div class=\"code-word\">\tfmt.Printf(<span class=\"hljs-string\">\"current i is %d\\n\"</span>, i)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316470\">预期结果为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\">current i is <span class=\"hljs-number\">20</span>\n</div></li><li><div class=\"code-word\">defer i is <span class=\"hljs-number\">10</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316472\">\n                      然而当 defer\n                      以闭包的方式引用外部变量时，则会在延迟函数真正执行的时候，根据整个上下文确定当前的值，如下示例代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++ {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">\t\t\tfmt.Println(i)\n</div></li><li><div class=\"code-word\">\t\t}()\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316474\">预期的输出结果为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\"><span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-number\">5</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316476\">\n                      上述例子为了演示简单，在 for 循环中使用了 defer，但<strong\n                        data-nodeid=\"316592\"\n                        >在日常开发中，我建议你还是不要在循环中使用\n                        defer</strong\n                      >。因为相较于直接调用，defer 的执行存在着额外的开销，例如\n                      defer 会对其后需要的参数进行内存拷贝，还会对 defer\n                      结构进行压栈出栈操作。因此，在循环中使用 defer\n                      可能会带来较大的性能开销。\n                    </p>\n                    <p data-nodeid=\"316477\">\n                      <strong data-nodeid=\"316597\"\n                        >defer\n                        的第三个特点是可以读取并修改函数的命名返回值</strong\n                      >，如下面的例子所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\tfmt.Println(test())\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> <span class=\"hljs-params\">(i <span class=\"hljs-keyword\">int</span>)</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> { i++ }()\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316479\">预期的返回结果为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">2\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316481\">\n                      这是因为对于命名返回值，defer 和 return 的执行顺序如下：\n                    </p>\n                    <ul data-nodeid=\"316482\">\n                      <li data-nodeid=\"316483\">\n                        <p data-nodeid=\"316484\">将 1 赋给 i；</p>\n                      </li>\n                      <li data-nodeid=\"316485\">\n                        <p data-nodeid=\"316486\">执行 i++；</p>\n                      </li>\n                      <li data-nodeid=\"316487\">\n                        <p data-nodeid=\"316488\">返回 i 作为函数返回值。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"316489\">\n                      defer 的内部实现为一个<strong data-nodeid=\"316608\"\n                        >延迟调用链表</strong\n                      >，如下图所示：\n                    </p>\n                    <p data-nodeid=\"317621\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/67/D7/Ciqc1F-iaTOALrVCAAC28gcQ66k361.png\"\n                        alt=\"Lark20201104-164037.png\"\n                        data-nodeid=\"317624\"\n                      /><br />\n                      defer 延迟调用链表示意图\n                    </p>\n\n                    <p data-nodeid=\"316491\">\n                      其中，g 代表 goroutine 的数据结构。每个 goroutine\n                      中都有一个 _defer 链表，当代码中遇到 defer 关键字时，Go\n                      都会将 defer 相关的函数和参数封装到 _defer\n                      结构体中，然后将其注册到当前 goroutine 的 _defer\n                      链表的表头。在当前函数执行完毕之后，Go 会从 goroutine 的\n                      _defer 链表头部取出来注册的 defer 执行并返回。\n                    </p>\n                    <p data-nodeid=\"316492\">\n                      _defer 结构体中存储 defer 执行相关的信息，定义如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> _defer <span class=\"hljs-keyword\">struct</span> {\n</div></li><li><div class=\"code-word\">\tsiz       <span class=\"hljs-keyword\">int32</span> <span class=\"hljs-comment\">// 参数与结果内存大小</span>\n</div></li><li><div class=\"code-word\">\tstarted   <span class=\"hljs-keyword\">bool</span> \n</div></li><li><div class=\"code-word\">\theap      <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-comment\">// 是否在堆上分配</span>\n</div></li><li><div class=\"code-word\">\topenDefer <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-comment\">//是否经过开放编码优化</span>\n</div></li><li><div class=\"code-word\">\tsp        <span class=\"hljs-keyword\">uintptr</span> <span class=\"hljs-comment\">// 栈指针</span>\n</div></li><li><div class=\"code-word\">\tpc        <span class=\"hljs-keyword\">uintptr</span> <span class=\"hljs-comment\">// 调用方的程序计数器</span>\n</div></li><li><div class=\"code-word\">\tfn        *funcval <span class=\"hljs-comment\">// defer 传入的函数</span>\n</div></li><li><div class=\"code-word\">\t_panic    *_panic \n</div></li><li><div class=\"code-word\">\tlink      *_defer <span class=\"hljs-comment\">// 下一个 _defer</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316494\">\n                      <strong data-nodeid=\"316629\"\n                        >panic 是一个内置函数，用于抛出程序执行的异常</strong\n                      >。它会终止其后将要执行的代码，并依次逆序执行 panic\n                      所在函数可能存在的 defer\n                      函数列表；然后返回该函数的调用方，如果函数的调用方中也有\n                      defer\n                      函数列表，也将被逆序执行，执行结束后再返回到上一层调用方，直到返回当前\n                      goroutine\n                      中的所有函数为止，最后报告异常，程序崩溃退出。异常可以直接通过\n                      panic\n                      函数调用抛出，也可能是因为运行时错误而引发，比如访问了空指针等。\n                    </p>\n                    <p data-nodeid=\"316495\">\n                      而<strong data-nodeid=\"316635\"\n                        >recover 内置函数可用于捕获\n                        panic，重新恢复程序正常执行流程，但是 recover 函数只有在\n                        defer 内部使用才有效</strong\n                      >。如下面例子所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">\terr := panicAndReturnErr()\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\tfmt.Printf(<span class=\"hljs-string\">\"err is %+v\\n\"</span>, err)\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\tfmt.Println(<span class=\"hljs-string\">\"returned normally from panicAndReturnErr\"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">panicAndReturnErr</span><span class=\"hljs-params\">()</span> <span class=\"hljs-params\">(err error)</span></span>{\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 从 panic 中恢复</span>\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> e := <span class=\"hljs-built_in\">recover</span>(); e != <span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 打印栈信息</span>\n</div></li><li><div class=\"code-word\">\t\t\tbuf := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">byte</span>, <span class=\"hljs-number\">1024</span>)\n</div></li><li><div class=\"code-word\">\t\t\tbuf = buf[:runtime.Stack(buf, <span class=\"hljs-literal\">false</span>)]\n</div></li><li><div class=\"code-word\">\t\t\terr = fmt.Errorf(<span class=\"hljs-string\">\"[PANIC]%v\\n%s\\n\"</span>, e, buf)\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}()\n</div></li><li><div class=\"code-word\">\tfmt.Println(<span class=\"hljs-string\">\"panic begin\"</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">\"panic this game\"</span>)\n</div></li><li><div class=\"code-word\">\tfmt.Println(<span class=\"hljs-string\">\"panic over\"</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316497\">预期的执行结果为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">panic</span> begin\n</div></li><li><div class=\"code-word\">err is [PANIC]<span class=\"hljs-built_in\">panic</span> this game\n</div></li><li><div class=\"code-word\">goroutine <span class=\"hljs-number\">1</span> [running]:\n</div></li><li><div class=\"code-word\">main.panicAndReturnErr.func1(<span class=\"hljs-number\">0xc000062f08</span>)\n</div></li><li><div class=\"code-word\">\t/Users/apple/Desktop/micro-<span class=\"hljs-keyword\">go</span>-course/section37/defer_example.<span class=\"hljs-keyword\">go</span>:<span class=\"hljs-number\">21</span> +<span class=\"hljs-number\">0xa1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-number\">0x10ad640</span>, <span class=\"hljs-number\">0x10eb360</span>)\n</div></li><li><div class=\"code-word\">\t/usr/local/<span class=\"hljs-keyword\">go</span>/src/runtime/<span class=\"hljs-built_in\">panic</span>.<span class=\"hljs-keyword\">go</span>:<span class=\"hljs-number\">969</span> +<span class=\"hljs-number\">0x166</span>\n</div></li><li><div class=\"code-word\">main.panicAndReturnErr(<span class=\"hljs-number\">0x0</span>, <span class=\"hljs-number\">0x0</span>)\n</div></li><li><div class=\"code-word\">\t/Users/apple/Desktop/micro-<span class=\"hljs-keyword\">go</span>-course/section37/defer_example.<span class=\"hljs-keyword\">go</span>:<span class=\"hljs-number\">26</span> +<span class=\"hljs-number\">0xc2</span>\n</div></li><li><div class=\"code-word\">main.main()\n</div></li><li><div class=\"code-word\">\t/Users/apple/Desktop/micro-<span class=\"hljs-keyword\">go</span>-course/section37/defer_example.<span class=\"hljs-keyword\">go</span>:<span class=\"hljs-number\">10</span> +<span class=\"hljs-number\">0x26</span>\n</div></li><li><div class=\"code-word\">returned normally from panicAndReturnErr\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316499\">\n                      从这个执行结果可以看出，panicAndReturnErr 函数在 panic\n                      之后将会执行 defer\n                      定义的延迟函数，恢复程序的正常执行逻辑。在上述例子中，我们在\n                      defer 函数中使用 recover 函数帮助程序从 panic\n                      中恢复过来，并获取异常堆栈信息组成 error\n                      返回调用方。panicAndReturnErr 从 panic\n                      中恢复后将直接返回，不会执行函数中 panic 后的其他代码。\n                    </p>\n                    <p data-nodeid=\"316500\">\n                      在日常开发中，对于可能出现执行异常的函数，如数组越界、操作空指针等，在函数中定义一个使用\n                      recover 函数的 defer\n                      延迟函数，有利提高程序执行的健壮性，避免程序运行时异常崩溃。\n                    </p>\n                    <h3 data-nodeid=\"316501\">常见的并发陷阱</h3>\n                    <p data-nodeid=\"316502\">\n                      最后我们再来介绍与 Go 并发相关的几个小技巧，帮助你规避 Go\n                      并发开发的一些陷阱。\n                    </p>\n                    <p data-nodeid=\"316503\">\n                      首先是循环并发时闭包传递参数的问题，如下错误例子所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span> ; i &lt; <span class=\"hljs-number\">5</span> ; i++{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">\t\t\tfmt.Println(<span class=\"hljs-string\">\"current i is \"</span>, i)\n</div></li><li><div class=\"code-word\">\t\t}()\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\ttime.Sleep(time.Second)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316505\">这段代码极有可能的输出为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">current i is <span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\">current i is <span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\">current i is <span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\">current i is <span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\">current i is <span class=\"hljs-number\">5</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316507\">\n                      这是因为 i 使用的地址空间在循环中被复用，在 goroutine\n                      执行时，i 的值可能在被主 goroutine 修改，而此时其他\n                      goroutine\n                      也在读取使用，从而导致了并发错误。针对这种错误可以通过<strong\n                        data-nodeid=\"316652\"\n                        >复制拷贝</strong\n                      >或者<strong data-nodeid=\"316653\">传参拷贝</strong\n                      >的方式规避，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">func <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>  </span>{\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span> ; i &lt; <span class=\"hljs-number\">5</span> ; i++{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-function\">go <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(v <span class=\"hljs-keyword\">int</span>)</span> </span>{\n</div></li><li><div class=\"code-word\">\t\t\tfmt.Println(<span class=\"hljs-string\">\"current i is\"</span>, v)\n</div></li><li><div class=\"code-word\">\t\t}(i)\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\ttime.Sleep(time.Second)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316509\">\n                      前面介绍 panic 时我们了解到 panic 异常的出现会导致 Go\n                      程序的崩溃。但其实即使 panic 是出现在其他启动的子\n                      goroutine 中，也会导致 Go 程序的崩溃退出，同时 panic\n                      只能捕获 goroutine 自身的异常，因此**对于每个启动的\n                      goroutine，都需要在入口处捕获\n                      panic，并尝试打印堆栈信息并进行异常处理，<strong\n                        data-nodeid=\"316662\"\n                        >从而避免子 goroutine 的 panic\n                        导致整个程序的崩溃退出</strong\n                      >。如下面的例子所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">RecoverPanic</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 从 panic 中恢复并打印栈信息</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> e := <span class=\"hljs-built_in\">recover</span>(); e != <span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">\t\tbuf := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">byte</span>, <span class=\"hljs-number\">1024</span>)\n</div></li><li><div class=\"code-word\">\t\tbuf = buf[:runtime.Stack(buf, <span class=\"hljs-literal\">false</span>)]\n</div></li><li><div class=\"code-word\">\t\tfmt.Printf(<span class=\"hljs-string\">\"[PANIC]%v\\n%s\\n\"</span>, e, buf)\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> i:= <span class=\"hljs-number\">0</span> ; i &lt; <span class=\"hljs-number\">5</span> ; i++{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// defer 注册 panic 捕获函数</span>\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">defer</span> RecoverPanic()\n</div></li><li><div class=\"code-word\">\t\t\tdothing()\n</div></li><li><div class=\"code-word\">\t\t}()\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"316511\">\n                      最后一个技巧是要<strong data-nodeid=\"316668\"\n                        >善于结合使用 select、timer 和 context\n                        进行超时控制</strong\n                      >。在 goroutine 中进行一些耗时较长的操作，最好都加上超时\n                      timer，在并发的时候也要传递\n                      context，这样在取消的时候就不会有遗漏，进而达到回收\n                      goroutine\n                      的目的，避免内存泄漏的发生。如下面的例子所示，通过 select\n                      同时监听任务和定时器状态，在定时器到达而任务未完成之时，提前结束任务，清理资源并返回。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">select</span> {\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// do logic process</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">case</span> msg &lt;- input:\n</div></li><li><div class=\"code-word\">   ....\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// has been canceled</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ...资源清理</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 2 second timeout</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">case</span> &lt;-time.After(time.Second * <span class=\"hljs-number\">2</span>)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ...资源清理 </span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">default</span>:\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"316513\">小结</h3>\n                    <p data-nodeid=\"316514\">\n                      在本课时我们主要介绍了 Go\n                      中常见的错误处理机制和一些并发开发技巧。\n                    </p>\n                    <p data-nodeid=\"316515\">\n                      Go\n                      倡导将错误作为返回值返回给调用方，由调用方决定如何处理或者忽略错误。通过\n                      defer 和 recover 内置函数，我们可以轻易地将运行时异常的 Go\n                      程序恢复到正常执行流程。另外，Go\n                      并发开发中存在不少的并发陷阱，这些都需要我们在开发中额外留意并规避。\n                    </p>\n                    <p data-nodeid=\"316516\" class=\"\">\n                      最后，对于 Go\n                      中的错误处理和并发技巧，你还有哪些经验？欢迎在留言区与我分享。\n                    </p>\n            "}