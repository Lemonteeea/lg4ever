{"title":"03 | 为什么 React 16 要更改组件的生命周期？（下）","context":"\n                    <p data-nodeid=\"13784\" class=\"\">\n                      通过对上一个课时的学习，你已经对 React 15\n                      的生命周期有了系统的掌握和理解。本课时，我将在此基础上，对\n                      React 16\n                      以来的生命周期进行剖析。在理解“是什么”的基础上，我将带你对比新旧两个版本生命周期之间的差异，并探寻变化背后的原因。\n                    </p>\n                    <p data-nodeid=\"13785\">\n                      通过本课时的学习，你将明白 React\n                      团队“动作频频”背后的思量与野心，同时也将对时下大热的 Fiber\n                      架构形成初步的认知。\n                    </p>\n                    <h3 data-nodeid=\"13786\">\n                      进化的生命周期方法：React 16 生命周期工作流详解\n                    </h3>\n                    <p data-nodeid=\"13787\">\n                      关于 React 16 以来的生命周期，<a\n                        href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\"\n                        data-nodeid=\"13940\"\n                        >这个民间开源项目</a\n                      >为我们提供了目前公认的比较优秀的流程大图（在下不才，自己动手画了半天仍然自觉无法超越下图，所以这里就直接引用过来辅助讲解）。我们先来看\n                      React 16.3 的大图：\n                    </p>\n                    <p data-nodeid=\"13788\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5D/D9/CgqCHl-FVVeAaMJvAAKXOyLlUwM592.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"13944\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13789\">\n                      这里之所以特意将版本号精确到了小数点后面一位，是因为在<strong\n                        data-nodeid=\"13950\"\n                        >React 16.4</strong\n                      >之后，React\n                      生命周期在之前版本的基础上又经历了一次微调。不过你先不用着急，在理解\n                      16.3 生命周期的基础上，掌握这个“微调”对你来说将易如反掌。\n                    </p>\n                    <p data-nodeid=\"13790\">\n                      接下来，我会先把上面这张 React 16.3\n                      生命周期大图中所涉及的内容讲清楚，然后再对 16.4\n                      的改动进行介绍。还是老规矩，这里我先提供一个\n                      Demo，它将辅助你理解新的生命周期。Demo 代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-dom\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 定义子组件</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LifeCycle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>(props) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"进入constructor\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">super</span>(props);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// state 可以在 constructor 里初始化</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.state = { <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"子组件的文本\"</span> };\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化/更新时调用</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">static</span> getDerivedStateFromProps(props, state) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"getDerivedStateFromProps方法执行\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">fatherText</span>: props.text\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化渲染时调用</span>\n</div></li><li><div class=\"code-word\">  componentDidMount() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"componentDidMount方法执行\"</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 组件更新时调用</span>\n</div></li><li><div class=\"code-word\">  shouldComponentUpdate(prevProps, nextState) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"shouldComponentUpdate方法执行\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 组件更新时调用</span>\n</div></li><li><div class=\"code-word\">  getSnapshotBeforeUpdate(prevProps, prevState) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"getSnapshotBeforeUpdate方法执行\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"haha\"</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 组件更新后调用</span>\n</div></li><li><div class=\"code-word\">  componentDidUpdate(preProps, preState, valueFromSnapshot) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"componentDidUpdate方法执行\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"从 getSnapshotBeforeUpdate 获取到的值是\"</span>, valueFromSnapshot);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 组件卸载时调用</span>\n</div></li><li><div class=\"code-word\">  componentWillUnmount() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"子组件的componentWillUnmount方法执行\"</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 点击按钮，修改子组件文本内容的方法</span>\n</div></li><li><div class=\"code-word\">  changeText = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState({\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"修改后的子组件文本\"</span>\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"render方法执行\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.changeText}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"changeText\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">          修改子组件文本内容\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"textContent\"</span>&gt;</span>{this.state.text}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"fatherContent\"</span>&gt;</span>{this.props.text}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 定义 LifeCycle 组件的父组件</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LifeCycleContainer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// state 也可以像这样用属性声明的形式初始化</span>\n</div></li><li><div class=\"code-word\">  state = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"父组件的文本\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">hideChild</span>: <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 点击按钮，修改父组件文本的方法</span>\n</div></li><li><div class=\"code-word\">  changeText = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState({\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"修改后的父组件文本\"</span>\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 点击按钮，隐藏（卸载）LifeCycle 组件的方法</span>\n</div></li><li><div class=\"code-word\">  hideChild = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState({\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">hideChild</span>: <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"fatherContainer\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.changeText}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"changeText\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">          修改父组件文本内容\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.hideChild}</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"hideChild\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">          隐藏子组件\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        {this.state.hideChild ? null : <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LifeCycle</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">{this.state.text}</span> /&gt;</span>}\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LifeCycleContainer</span> /&gt;</span></span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"root\"</span>));\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"13792\">\n                      React 16\n                      以来的生命周期也可以按照“挂载”“更新”和“卸载”三个阶段来看，所以接下来我们要做的事情仍然是分阶段拆解工作流程。在这个过程中，我将把\n                      React 16 新增的生命周期方法，以及流程上相对于 React 15\n                      产生的一些差异，作为我们学习的重点。对于和 React 15\n                      保持一致的部分，这里不再重复讲解。\n                    </p>\n                    <h4 data-nodeid=\"13793\">\n                      Mounting 阶段：组件的初始化渲染（挂载）\n                    </h4>\n                    <p data-nodeid=\"13794\">\n                      为了凸显 16 和 15\n                      两个版本生命周期之间的差异，我将两个流程绘制到了同一张大图里，请看下面这张图：\n                    </p>\n                    <p data-nodeid=\"13795\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5F/B0/Ciqc1F-Klv6AIeOPAADAZZgLu7U105.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"13957\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13796\">\n                      你现在可以打开开篇我给出的 Demo，将你的 React 版本更新到\n                      16.3，然后运行这个项目，你就可以在控制台看到新的生命周期执行过程了。控制台的输出如图所示：\n                    </p>\n                    <p data-nodeid=\"13797\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5D/CE/Ciqc1F-FVW6AAX_PAADMEGvjdFI487.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"13961\"\n                      />\n                    </p>\n                    <h5 data-nodeid=\"13798\">\n                      消失的 componentWillMount，新增的 getDerivedStateFromProps\n                    </h5>\n                    <p data-nodeid=\"13799\">\n                      从上图中不难看出，React 15 生命周期和 React 16.3\n                      生命周期在挂载阶段的主要差异在于，<strong\n                        data-nodeid=\"13968\"\n                        >废弃了 componentWillMount，新增了\n                        getDerivedStateFromProps</strong\n                      >。\n                    </p>\n                    <blockquote data-nodeid=\"13800\">\n                      <p data-nodeid=\"13801\">\n                        注：细心的你可能记得，React 16 对 render\n                        方法也进行了一些改进。React 16\n                        之前，render方法必须返回单个元素，而 React 16\n                        允许我们返回元素数组和字符串。但本课时我们更加侧重讨论的是生命周期升级过程中的“主要矛盾”，也就是“工作流”层面的改变，故对现有方法的迭代细节，以及不在主要工作流里的<a\n                          href=\"https://zh-hans.reactjs.org/docs/react-component.html#componentdidcatch\"\n                          data-nodeid=\"13972\"\n                          >componentDidCatch</a\n                        >\n                        等生命周期不再予以赘述。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"13802\">\n                      一些同学在初次发现这个改变的时候，倾向于认为是 React 16.3\n                      在试图用\n                      getDerivedStateFromProps代替componentWillMount，这种想法是不严谨的。\n                    </p>\n                    <h5 data-nodeid=\"13803\">\n                      getDerivedStateFromProps 不是 componentWillMount 的替代品\n                    </h5>\n                    <p data-nodeid=\"13804\">\n                      事实上，<strong data-nodeid=\"13981\"\n                        >componentWillMount\n                        的存在不仅“鸡肋”而且危险，因此它并不值得被“代替”，它就应该被废弃。</strong\n                      >\n                      为了证明这点，我将在本文后续的“透过现象看本质”环节为大家细数\n                      componentWillMount 的几宗“罪”。\n                    </p>\n                    <p data-nodeid=\"13805\">\n                      而 getDerivedStateFromProps 这个\n                      API，其设计的初衷不是试图替换掉\n                      <strong data-nodeid=\"13995\">componentWillMount</strong\n                      >，而是试图替换掉\n                      <strong data-nodeid=\"13996\"\n                        >componentWillReceiveProps</strong\n                      >，因此它有且仅有一个用途：<strong data-nodeid=\"13997\"\n                        >使用 props 来派生/更新 state</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"13806\">\n                      React 团队为了确保 getDerivedStateFromProps\n                      这个生命周期的纯洁性，直接从命名层面约束了它的用途（getDerivedStateFromProps\n                      直译过来就是“从 Props 里派生\n                      State”）。所以，如果你不是出于这个目的来使用\n                      getDerivedStateFromProps，原则上来说都是不符合规范的。\n                    </p>\n                    <p data-nodeid=\"13807\">\n                      值得一提的是，getDerivedStateFromProps\n                      在更新和挂载两个阶段都会“出镜”（这点不同于仅在更新阶段出现的\n                      componentWillReceiveProps）。这是因为“派生\n                      state”这种诉求不仅在 props 更新时存在，<strong\n                        data-nodeid=\"14004\"\n                        >在 props 初始化的时候也是存在的</strong\n                      >。React 16\n                      以提供特定生命周期的形式，对这类诉求提供了更直接的支持。\n                    </p>\n                    <p data-nodeid=\"13808\">\n                      由此看来，挂载阶段的生命周期改变，并不是一个简单的“替换”逻辑，而是一个雄心勃勃的“进化”逻辑。\n                    </p>\n                    <h5 data-nodeid=\"13809\">认识 getDerivedStateFromProps</h5>\n                    <p data-nodeid=\"13810\">\n                      这个新生命周期方法的调用规则如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-title\">getDerivedStateFromProps</span><span class=\"hljs-params\">(props, state)</span>\n</span></div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13812\">在使用层面，你需要把握三个重点。</p>\n                    <p data-nodeid=\"13813\">\n                      第一个重点是最特别的一点：<strong data-nodeid=\"14018\"\n                        >getDerivedStateFromProps 是一个静态方法</strong\n                      >。静态方法不依赖组件实例而存在，因此你在这个方法内部是<strong\n                        data-nodeid=\"14019\"\n                        >访问不到 this</strong\n                      >\n                      的。若你偏要尝试这样做，必定报错，报错形式如下图所示：\n                    </p>\n                    <p data-nodeid=\"13814\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5D/DA/CgqCHl-FVZSAX16PAAK3atPnbSg411.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"14022\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13815\">\n                      第二个重点，该方法可以接收两个参数：props 和\n                      state，它们分别代表当前组件接收到的来自父组件的 props\n                      和当前组件自身的 state。我们可以尝试在 Demo\n                      中输出这两个参数看一看，输出效果如下图所示：\n                    </p>\n                    <p data-nodeid=\"13816\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5D/DA/CgqCHl-FVZqAJnD-AAQlZUXOgq0760.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"14026\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13817\">\n                      可以看出，挂载阶段输出的 props\n                      正是初始化阶段父组件传进来的 this.props 对象；而 state 是\n                      LifeCycle 组件自身的 state 对象。\n                    </p>\n                    <p data-nodeid=\"13818\">\n                      第三个重点，getDerivedStateFromProps\n                      需要一个对象格式的返回值。如果你没有指定这个返回值，那么大概率会被\n                      React 警告一番，警告内容如下图所示：\n                    </p>\n                    <p data-nodeid=\"13819\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5D/CE/Ciqc1F-FVaCAOOnzAALVyD02cdg817.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"14031\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13820\">\n                      <strong data-nodeid=\"14036\"\n                        >getDerivedStateFromProps 的返回值之所以不可或缺，是因为\n                        React 需要用这个返回值来更新（派生）组件的 state</strong\n                      >。因此当你确实不存在“使用 props 派生 state\n                      ”这个需求的时候，最好是直接省略掉这个生命周期方法的编写，否则一定记得给它\n                      return 一个 null。\n                    </p>\n                    <p data-nodeid=\"13821\">\n                      注意，<strong data-nodeid=\"14046\"\n                        >getDerivedStateFromProps 方法对 state\n                        的更新动作并非“覆盖”式的更新</strong\n                      >，<strong data-nodeid=\"14047\"\n                        >而是针对某个属性的定向更新</strong\n                      >。比如这里我们在 getDerivedStateFromProps\n                      里返回的是这样一个对象，对象里面有一个 fatherText\n                      属性用于表示“父组件赋予的文本”：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">fatherText</span>: props.text\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13823\">\n                      该对象并不会替换掉组件原始的这个 state：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">this</span>.state = { text: <span class=\"hljs-string\">\"子组件的文本\"</span> };\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13825\">\n                      而是仅仅针对 fatherText 这个属性作更新（这里原有的 state\n                      里没有\n                      fatherText，因此直接新增）。更新后，原有属性与新属性是共存的，如下图所示：\n                    </p>\n                    <p data-nodeid=\"13826\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5D/DA/CgqCHl-FVbiAR1FtAABja-0bwL0578.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"14052\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"13827\">Updating 阶段：组件的更新</h4>\n                    <p data-nodeid=\"13828\">\n                      React 15 与 React 16.3 的更新流程对比如下图所示：\n                    </p>\n                    <p data-nodeid=\"13829\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5F/BB/CgqCHl-KlxyAB5MpAAFaH-Kgggo887.png\"\n                        alt=\"图片2.png\"\n                        data-nodeid=\"14057\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13830\">\n                      注意，咱们前面提到 React 16.4\n                      对生命周期流程进行了“微调”，其实就调在了更新过程的getDerivedStateFromProps\n                      这个生命周期上。先来看一张 React 16.4+\n                      的生命周期大图（出处仍然是<a\n                        href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\"\n                        data-nodeid=\"14061\"\n                        >Wojciech Maj 的 react-lifecycle-methods-diagram</a\n                      >）：\n                    </p>\n                    <p data-nodeid=\"13831\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5D/CF/Ciqc1F-FVcSALRwNAAIomWwVcQU231.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"14065\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13832\">\n                      React 16.4 的挂载和卸载流程都是与 React 16.3\n                      保持一致的，差异在于更新流程上：\n                    </p>\n                    <ul data-nodeid=\"13833\">\n                      <li data-nodeid=\"13834\">\n                        <p data-nodeid=\"13835\">\n                          在 React 16.4 中，<strong data-nodeid=\"14072\"\n                            >任何因素触发的组件更新流程</strong\n                          >（包括由 this.setState 和 forceUpdate\n                          触发的更新流程）都会触发 getDerivedStateFromProps；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13836\">\n                        <p data-nodeid=\"13837\">\n                          而在 v 16.3 版本时，<strong data-nodeid=\"14078\"\n                            >只有父组件的更新</strong\n                          >会触发该生命周期。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13838\">\n                      到这里，你已经对 getDerivedStateFromProps\n                      相关的改变有了充分的了解。接下来，我们就基于这层了解，问出生命周期改变背后的第一个“Why”。\n                    </p>\n                    <h5 data-nodeid=\"13839\">\n                      改变背后的第一个“Why”：为什么要用 getDerivedStateFromProps\n                      代替 componentWillReceiveProps？\n                    </h5>\n                    <p data-nodeid=\"13840\">\n                      对于 getDerivedStateFromProps 这个 API，React\n                      官方曾经给出过这样的描述：\n                    </p>\n                    <blockquote data-nodeid=\"13841\">\n                      <p data-nodeid=\"13842\">\n                        与 componentDidUpdate\n                        一起，这个新的生命周期涵盖过时componentWillReceiveProps\n                        的所有用例。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"13843\">\n                      在这里，请你细细品味这句话，这句话里蕴含了下面两个关键信息：\n                    </p>\n                    <ul data-nodeid=\"13844\">\n                      <li data-nodeid=\"13845\">\n                        <p data-nodeid=\"13846\">\n                          getDerivedStateFromProps 是作为一个<strong\n                            data-nodeid=\"14089\"\n                            >试图代替 componentWillReceiveProps</strong\n                          >\n                          的 API 而出现的；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13847\">\n                        <p data-nodeid=\"13848\">\n                          getDerivedStateFromProps<strong data-nodeid=\"14095\"\n                            >不能完全和 componentWillReceiveProps 画等号</strong\n                          >，其特性决定了我们曾经在 componentWillReceiveProps\n                          里面做的事情，不能够百分百迁移到getDerivedStateFromProps\n                          里。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13849\">接下来我们就展开说说这两点。</p>\n                    <ul data-nodeid=\"13850\">\n                      <li data-nodeid=\"13851\">\n                        <p data-nodeid=\"13852\">\n                          关于 getDerivedStateFromProps\n                          是如何代替componentWillReceiveProps\n                          的，在“挂载”环节已经讨论过：getDerivedStateFromProps\n                          可以代替 componentWillReceiveProps 实现<strong\n                            data-nodeid=\"14102\"\n                            >基于 props 派生 state</strong\n                          >。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13853\">\n                        <p data-nodeid=\"13854\">\n                          至于它为何不能完全和 componentWillReceiveProps\n                          画等号，则是因为它过于“专注”了。这一点，单单从getDerivedStateFromProps\n                          这个 API\n                          名字上也能够略窥一二。原则上来说，它能做且只能做这一件事。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13855\">\n                      乍一看，原来的 API 能做的事情更多，现在的 API\n                      却限制重重，难道是 React 16 的生命周期方法“退化”了？\n                    </p>\n                    <p data-nodeid=\"13856\">\n                      当然不是。如果你对设计模式有所了解的话，就会知道，<strong\n                        data-nodeid=\"14110\"\n                        >一个 API 并非越庞大越复杂才越优秀</strong\n                      >。或者说得更直接一点，庞大和复杂的 API\n                      往往会带来维护层面的“灾难”。\n                    </p>\n                    <p data-nodeid=\"13857\">\n                      说回 getDerivedStateFromProps 这个 API，它相对于早期的\n                      componentWillReceiveProps 来说，正是做了“<strong\n                        data-nodeid=\"14116\"\n                        >合理的减法</strong\n                      >”。而做这个减法的决心之强烈，从 getDerivedStateFromProps\n                      直接被定义为 static 方法这件事上就可见一斑—— static\n                      方法内部拿不到组件实例的 this，这就导致你无法在\n                      getDerivedStateFromProps 里面做任何类似于\n                      this.fetch()、不合理的\n                      this.setState（会导致死循环的那种）这类可能会产生副作用的操作。\n                    </p>\n                    <p data-nodeid=\"13858\">\n                      因此，getDerivedStateFromProps 生命周期替代\n                      componentWillReceiveProps 的背后，<strong\n                        data-nodeid=\"14122\"\n                        >是 React 16 在强制推行“只用 getDerivedStateFromProps\n                        来完成 props 到 state 的映射”这一最佳实践</strong\n                      >。意在确保生命周期函数的行为更加可控可预测，从根源上帮开发者避免不合理的编程方式，避免生命周期的滥用；同时，也是在为新的\n                      Fiber 架构铺路。\n                    </p>\n                    <p data-nodeid=\"13859\">\n                      到这里，相信你已经对 getDerivedStateFromProps\n                      吃得透透的了。至于什么是 Fiber\n                      架构，这条路该怎么铺，你将在本课时后续的内容中找到答案。现在，我们得回到“更新”这条工作流里来，一起去看看getSnapshotBeforeUpdate\n                      是怎么一回事儿。\n                    </p>\n                    <h5 data-nodeid=\"13860\">\n                      消失的 componentWillUpdate 与新增的\n                      getSnapshotBeforeUpdate\n                    </h5>\n                    <p data-nodeid=\"13861\">\n                      咱们先来看看 getSnapshotBeforeUpdate 是什么：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">getSnapshotBeforeUpdate(prevProps, prevState) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13863\">\n                      这个方法和 getDerivedStateFromProps\n                      颇有几分神似，它们都强调了“我需要一个返回值”这回事。区别在于\n                      <strong data-nodeid=\"14141\"\n                        >getSnapshotBeforeUpdate 的返回值会作为第三个参数给到\n                        componentDidUpdate</strong\n                      >。<strong data-nodeid=\"14142\"\n                        >它的执行时机是在 render 方法之后，真实 DOM\n                        更新之前</strong\n                      >。在这个阶段里，我们可以<strong data-nodeid=\"14143\"\n                        >同时获取到更新前的真实 DOM 和更新前后的 state&amp;props\n                        信息</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"13864\">\n                      尽管在实际工作中，需要用到这么多信息的场景并不多，但在对于实现一些特殊的需求来说，没它还真的挺难办。这里我举一个非常有代表性的例子：实现一个内容会发生变化的滚动列表，要求根据滚动列表的内容是否发生变化，来决定是否要记录滚动条的当前位置。\n                    </p>\n                    <p data-nodeid=\"13865\">\n                      这个需求的前半截要求我们对比更新前后的数据（感知变化），后半截则需要获取真实的\n                      DOM 信息（获取位置），这时用 getSnapshotBeforeUpdate\n                      来解决就再合适不过了。\n                    </p>\n                    <p data-nodeid=\"13866\">\n                      对于这个生命周期，需要重点把握的是它与 componentDidUpdate\n                      间的通信过程。在 Demo\n                      中我给出了一个使用示例，它将帮助你更加具体地认知这个过程。代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 组件更新时调用</span>\n</div></li><li><div class=\"code-word\">getSnapshotBeforeUpdate(prevProps, prevState) {\n</div></li><li><div class=\"code-word\">  console.log(<span class=\"hljs-string\">\"getSnapshotBeforeUpdate方法执行\"</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"haha\"</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 组件更新后调用</span>\n</div></li><li><div class=\"code-word\">componentDidUpdate(prevProps, prevState, valueFromSnapshot) {\n</div></li><li><div class=\"code-word\">  console.log(<span class=\"hljs-string\">\"componentDidUpdate方法执行\"</span>);\n</div></li><li><div class=\"code-word\">  console.log(<span class=\"hljs-string\">\"从 getSnapshotBeforeUpdate 获取到的值是\"</span>, valueFromSnapshot);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13868\">\n                      现在我们点击 Demo\n                      界面上“修改子组件文本内容”按钮，就可以看到这两个生命周期的通信效果，如下图所示：\n                    </p>\n                    <p data-nodeid=\"13869\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5D/CF/Ciqc1F-FVlOAX7VMAAE_3SdYf2M700.png\"\n                        alt=\"Drawing 9.png\"\n                        data-nodeid=\"14150\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13870\">\n                      值得一提的是，这个生命周期的设计初衷，是为了“与\n                      componentDidUpdate 一起，涵盖过时的 componentWillUpdate\n                      的所有用例”（引用自 React 官网）。<strong\n                        data-nodeid=\"14156\"\n                        >getSnapshotBeforeUpdate 要想发挥作用，离不开\n                        componentDidUpdate 的配合</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"13871\">\n                      那么换个角度想想，<strong data-nodeid=\"14163\"\n                        >为什么 componentWillUpdate 就非死不可呢</strong\n                      >？说到底，还是因为它“挡了 Fiber\n                      的路”。各位莫慌，咱们离真相越来越近了~\n                    </p>\n                    <h4 data-nodeid=\"13872\">Unmounting 阶段：组件的卸载</h4>\n                    <p data-nodeid=\"13873\">\n                      我们先继续把完整的生命周期流程走完，以下是组件卸载阶段的示意图：\n                    </p>\n                    <p data-nodeid=\"13874\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5F/B0/Ciqc1F-KlzqACUOPAABE6JqN9E0200.png\"\n                        alt=\"图片3.png\"\n                        data-nodeid=\"14168\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13875\">\n                      卸载阶段的生命周期与 React 15 完全一致，只涉及\n                      componentWillUnmount 这一个生命周期，此处不再重复讲解。\n                    </p>\n                    <p data-nodeid=\"13876\">\n                      接下来，就让一切变化背后的”始作俑者“ Fiber\n                      架构来和大家打个招呼吧！\n                    </p>\n                    <h3 data-nodeid=\"13877\">\n                      透过现象看本质：React 16 缘何两次求变？\n                    </h3>\n                    <h5 data-nodeid=\"13878\">Fiber 架构简析</h5>\n                    <p data-nodeid=\"13879\">\n                      Fiber 是 React 16 对 React 核心算法的一次重写。关于\n                      Fiber，我将在“模块二：核心原理”花大量的篇幅来介绍它的原理和细节。在本课时，你只需要\n                      get 到这一个点：<strong data-nodeid=\"14178\"\n                        >Fiber 会使原本同步的渲染过程变成异步的</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"13880\">\n                      在 React 16 之前，每当我们触发一次组件的更新，React\n                      都会构建一棵新的虚拟 DOM 树，通过与上一次的虚拟 DOM 树进行\n                      diff，实现对 DOM\n                      的定向更新。这个过程，是一个递归的过程。下面这张图形象地展示了这个过程的特征：\n                    </p>\n                    <p data-nodeid=\"13881\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5F/B0/Ciqc1F-Kl0WAO2mzAABxddWHnXI121.png\"\n                        alt=\"图片4.png\"\n                        data-nodeid=\"14182\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13882\">\n                      如图所示，<strong data-nodeid=\"14196\"\n                        >同步渲染的递归调用栈是非常深的</strong\n                      >，只有最底层的调用返回了，整个渲染过程才会开始逐层返回。<strong\n                        data-nodeid=\"14198\"\n                        >这个漫长且不可打断的更新过程，将会带来用户体验层面的巨大风险：<strong\n                          data-nodeid=\"14197\"\n                          >同步渲染一旦开始，便会牢牢抓住主线程不放，直到递归彻底完成。在这个过程中，浏览器没有办法处理任何渲染之外的事情，会进入一种</strong\n                        >无法处理用户交互</strong\n                      >的状态。因此若渲染时间稍微长一点，页面就会面临卡顿甚至卡死的风险。\n                    </p>\n                    <p data-nodeid=\"13883\">\n                      而 React 16 引入的 Fiber\n                      架构，恰好能够解决掉这个风险：<strong data-nodeid=\"14212\"\n                        >Fiber 会将一个大的更新任务拆解为许多个小任务</strong\n                      >。每当执行完一个小任务时，<strong data-nodeid=\"14213\"\n                        >渲染线程都会把主线程交回去</strong\n                      >，看看有没有优先级更高的工作要处理，确保不会出现其他任务被“饿死”的情况，进而避免同步渲染带来的卡顿。在这个过程中，<strong\n                        data-nodeid=\"14214\"\n                        >渲染线程不再“一去不回头”，而是可以被打断的</strong\n                      >，这就是所谓的“异步渲染”，它的执行过程如下图所示：\n                    </p>\n                    <p data-nodeid=\"13884\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5F/B0/Ciqc1F-Kl1CAA6pwAADpyi-xSnM494.png\"\n                        alt=\"图片5.png\"\n                        data-nodeid=\"14217\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13885\">\n                      如果你初学\n                      Fiber，对上面的两段描述感到陌生或者说“吃不透”，这都是正常的。在本课时，你大可不必如此苛求自己，只需对“同步渲染”和“异步渲染”这两个概念有一个大致的印象，同时把握住\n                      Fiber\n                      架构下“任务拆解”和“可打断”这两个特性即可。接下来，我们继续往下走，看看“同步”变“异步”这个过程，是如何对生命周期构成影响的。\n                    </p>\n                    <h5 data-nodeid=\"13886\">换个角度看生命周期工作流</h5>\n                    <p data-nodeid=\"13887\">\n                      Fiber 架构的重要特征就是<strong data-nodeid=\"14229\"\n                        >可以被打断的</strong\n                      >异步渲染模式。但这个“打断”是有原则的，根据“<strong\n                        data-nodeid=\"14230\"\n                        >能否被打断</strong\n                      >”这一标准，React 16 的生命周期被划分为了 render 和 commit\n                      两个阶段，而 commit 阶段又被细分为了 pre-commit 和\n                      commit。每个阶段所涵盖的生命周期如下图所示：\n                    </p>\n                    <p data-nodeid=\"13888\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5D/CF/Ciqc1F-FVn6AEtlxAAIomWwVcQU485.png\"\n                        alt=\"Drawing 13.png\"\n                        data-nodeid=\"14233\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13889\">\n                      我们先来看下三个阶段各自有哪些特征（以下特征翻译自上图）。\n                    </p>\n                    <ul data-nodeid=\"13890\">\n                      <li data-nodeid=\"13891\">\n                        <p data-nodeid=\"13892\">\n                          render 阶段：纯净且没有副作用，可能会被 React\n                          暂停、终止或重新启动。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13893\">\n                        <p data-nodeid=\"13894\">\n                          pre-commit 阶段：可以读取 DOM。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13895\">\n                        <p data-nodeid=\"13896\">\n                          commit 阶段：可以使用 DOM，运行副作用，安排更新。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13897\">\n                      <strong data-nodeid=\"14241\"\n                        >总的来说，render 阶段在执行过程中允许被打断，而 commit\n                        阶段则总是同步执行的。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"13898\">\n                      为什么这样设计呢？简单来说，由于 render\n                      阶段的操作对用户来说其实是“不可见”的，所以就算打断再重启，对用户来说也是零感知。而\n                      commit 阶段的操作则涉及真实 DOM\n                      的渲染，再狂的框架也不敢在用户眼皮子底下胡乱更改视图，所以这个过程必须用同步渲染来求稳。\n                    </p>\n                    <h5 data-nodeid=\"13899\">\n                      细说生命周期“废旧立新”背后的思考\n                    </h5>\n                    <p data-nodeid=\"13900\">\n                      在 Fiber 机制下，<strong data-nodeid=\"14253\"\n                        >render 阶段是允许暂停、终止和重启的</strong\n                      >。当一个任务执行到一半被打断后，下一次渲染线程抢回主动权时，这个任务被重启的形式是“重复执行一遍整个任务”而非“接着上次执行到的那行代码往下走”。<strong\n                        data-nodeid=\"14254\"\n                        >这就导致 render\n                        阶段的生命周期都是有可能被重复执行的</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"13901\">\n                      带着这个结论，我们再来看看 React 16\n                      打算废弃的是哪些生命周期：\n                    </p>\n                    <ul data-nodeid=\"13902\">\n                      <li data-nodeid=\"13903\">\n                        <p data-nodeid=\"13904\">componentWillMount；</p>\n                      </li>\n                      <li data-nodeid=\"13905\">\n                        <p data-nodeid=\"13906\">componentWillUpdate；</p>\n                      </li>\n                      <li data-nodeid=\"13907\">\n                        <p data-nodeid=\"13908\">componentWillReceiveProps。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13909\">\n                      这些生命周期的共性，<strong data-nodeid=\"14264\"\n                        >就是它们都处于 render 阶段，都可能重复被执行</strong\n                      >，而且由于这些 API\n                      常年被滥用，它们在重复执行的过程中都存在着不可小觑的风险。\n                    </p>\n                    <p data-nodeid=\"13910\">\n                      别的不说，说说我自己在团队 code review\n                      中见过的“骚操作”吧。在“componentWill”开头的生命周期里，你习惯于做的事情可能包括但不限于:\n                    </p>\n                    <ul data-nodeid=\"13911\">\n                      <li data-nodeid=\"13912\">\n                        <p data-nodeid=\"13913\">setState()；</p>\n                      </li>\n                      <li data-nodeid=\"13914\">\n                        <p data-nodeid=\"13915\">fetch 发起异步请求；</p>\n                      </li>\n                      <li data-nodeid=\"13916\">\n                        <p data-nodeid=\"13917\">操作真实 DOM。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13918\">\n                      这些操作的问题（或不必要性）包括但不限于以下 3 点：\n                    </p>\n                    <p data-nodeid=\"13919\">\n                      <strong data-nodeid=\"14274\"\n                        >（1）完全可以转移到其他生命周期（尤其是\n                        componentDidxxx）里去做</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"13920\">\n                      比如在 componentWillMount\n                      里发起异步请求。很多同学因为太年轻，以为这样做就可以让异步请求回来得“早一点”，从而避免首次渲染白屏。\n                    </p>\n                    <p data-nodeid=\"13921\">\n                      可惜你忘了，异步请求再怎么快也快不过（React 15\n                      下）同步的生命周期。componentWillMount 结束后，render\n                      会迅速地被触发，所以说<strong data-nodeid=\"14281\"\n                        >首次渲染依然会在数据返回之前执行</strong\n                      >。这样做不仅没有达到你预想的目的，还会导致服务端渲染场景下的冗余请求等额外问题，得不偿失。\n                    </p>\n                    <p data-nodeid=\"13922\">\n                      <strong data-nodeid=\"14286\"\n                        >（2）在 Fiber\n                        带来的异步渲染机制下，可能会导致非常严重的 Bug</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"13923\">\n                      试想，假如你在 componentWillxxx 里发起了一个付款请求。由于\n                      render 阶段里的生命周期都可以重复执行，在 componentWillxxx\n                      被<strong data-nodeid=\"14292\">打断 + 重启多次</strong\n                      >后，就会发出多个付款请求。\n                    </p>\n                    <p data-nodeid=\"13924\">\n                      比如说，这件商品单价只要 10\n                      块钱，用户也只点击了一次付款。但实际却可能因为\n                      componentWillxxx 被<strong data-nodeid=\"14298\"\n                        >打断 + 重启多次</strong\n                      >而多次调用付款接口，最终付了 50\n                      块钱；又或者你可能会习惯在 componentWillReceiveProps\n                      里操作 DOM（比如说删除符合某个特征的元素），那么\n                      componentWillReceiveProps\n                      若是执行了两次，你可能就会一口气删掉两个符合该特征的元素。\n                    </p>\n                    <p data-nodeid=\"13925\">\n                      结合上面的分析，我们再去思考 getDerivedStateFromProps\n                      为何会在设计层面直接被约束为一个触碰不到 this\n                      的静态方法，其背后的原因也就更加充分了——避免开发者触碰\n                      this，就是在避免各种危险的骚操作。\n                    </p>\n                    <p data-nodeid=\"13926\">\n                      <strong data-nodeid=\"14303\"\n                        >（3）即使你没有开启异步，React 15\n                        下也有不少人能把自己“玩死”。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"13927\">\n                      比如在 componentWillReceiveProps &nbsp;和\n                      componentWillUpdate 里滥用 setState\n                      导致重复渲染死循环的，大家都懂哈（邪魅一笑）。\n                    </p>\n                    <p data-nodeid=\"13928\">\n                      总的来说，<strong data-nodeid=\"14322\"\n                        >React 16 改造生命周期的主要动机是为了配合 Fiber\n                        架构带来的异步渲染机制</strong\n                      >。在这个改造的过程中，React 团队精益求精，<strong\n                        data-nodeid=\"14323\"\n                        >针对生命周期中长期被滥用的部分推行了具有强制性的最佳实践</strong\n                      >。这一系列的工作做下来，首先是<strong data-nodeid=\"14324\"\n                        >确保了 Fiber 机制下数据和视图的安全性</strong\n                      >，同时也<strong data-nodeid=\"14325\"\n                        >确保了生命周期方法的行为更加纯粹、可控、可预测</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"13929\">总结</h3>\n                    <p data-nodeid=\"13930\">\n                      通过 02 和 03 两个课时的学习，大家已经对 React 15、16\n                      两个版本的生命周期有了深入的掌握，同时对 React\n                      生命周期的一系列的变化以及其背后的原因都有了深刻而健全的理解。\n                    </p>\n                    <p data-nodeid=\"13931\" class=\"\">\n                      生命周期看似简单，但要想真正吃透，竟然需要挑战这么长的一个知识链路，实在不简单！在使用\n                      React 进行项目开发的 5\n                      年里，我曾不止一次地为各路合作伙伴在生命周期里“为所欲为”而感到痛苦，也曾不止一次地为\n                      React\n                      基础知识结构摇摇欲坠的候选人感到可惜。若你能够耐下心来彻底消化掉这两个课时，相信这世上定能多出一个靠谱的前端！\n                    </p>\n                    <p data-nodeid=\"13932\">\n                      话说回来，现有的生命周期，虽然已经对方法的最佳实践做了强约束，但是仍然无法覆盖所有的“误操作”，其中最为典型的，就是对\n                      getDerivedStateFromProps\n                      的滥用。关于这点，社区的讨论不是很多，但是\n                      <a\n                        href=\"https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\"\n                        data-nodeid=\"14332\"\n                        >React 团队给出的这篇文章</a\n                      >就帮助大家规避“误操作”来说是绰绰有余的。\n                    </p>\n                    <p data-nodeid=\"13933\" class=\"\">\n                      经过了漫长的两个课时的学习，我们终于征服了生命周期这座小山包。一个组件的一生如何度过，我们已经领教过了。那么，多个组件之间如何“心意相通”呢？在下个课时，将围绕“数据在组件间的流动”展开讲解，探索“心意相通”的艺术。\n                    </p>\n            "}