{"title":"17 | 生成代码：AST 如何生成可运行的代码？（下）","context":"\n                    <p data-nodeid=\"71646\">\n                      上节课，我们已经知道了在 AST 转换后，会执行 generate\n                      函数生成代码，而 generate\n                      主要做五件事情：创建代码生成上下文，生成预设代码，生成渲染函数，生成资源声明代码，以及生成创建\n                      VNode 树的表达式。这节课我们继续分析，来看生成创建 VNode\n                      树的表达式的过程。\n                    </p>\n                    <h3 data-nodeid=\"71647\">生成创建 VNode 树的表达式</h3>\n                    <p data-nodeid=\"71648\">我们先来看它的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 生成创建 VNode 树的表达式</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (ast.codegenNode) {\n</div></li><li><div class=\"code-word\">  genNode(ast.codegenNode, context);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">  push(\\`<span class=\"hljs-keyword\">null</span>\\`);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71650\">\n                      前面我们在转换过程中给根节点添加了\n                      codegenNode，所以接下来就是通过 genNode 生成创建 VNode\n                      树的表达式，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">genNode</span><span class=\"hljs-params\">(node, context)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (shared.isString(node)) {\n</div></li><li><div class=\"code-word\">    context.push(node)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (shared.isSymbol(node)) {\n</div></li><li><div class=\"code-word\">    context.push(context.helper(node))\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">switch</span> (node.type) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>:\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>:\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* FOR */</span>:\n</div></li><li><div class=\"code-word\">      genNode(node.codegenNode, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span>:\n</div></li><li><div class=\"code-word\">      genText(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>:\n</div></li><li><div class=\"code-word\">      genExpression(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* INTERPOLATION */</span>:\n</div></li><li><div class=\"code-word\">      genInterpolation(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">12</span> <span class=\"hljs-comment\">/* TEXT_CALL */</span>:\n</div></li><li><div class=\"code-word\">      genNode(node.codegenNode, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* COMPOUND_EXPRESSION */</span>:\n</div></li><li><div class=\"code-word\">      genCompoundExpression(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* COMMENT */</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span>:\n</div></li><li><div class=\"code-word\">      genVNodeCall(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">/* JS_CALL_EXPRESSION */</span>:\n</div></li><li><div class=\"code-word\">      genCallExpression(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">15</span> <span class=\"hljs-comment\">/* JS_OBJECT_EXPRESSION */</span>:\n</div></li><li><div class=\"code-word\">      genObjectExpression(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">17</span> <span class=\"hljs-comment\">/* JS_ARRAY_EXPRESSION */</span>:\n</div></li><li><div class=\"code-word\">      genArrayExpression(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">18</span> <span class=\"hljs-comment\">/* JS_FUNCTION_EXPRESSION */</span>:\n</div></li><li><div class=\"code-word\">      genFunctionExpression(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">19</span> <span class=\"hljs-comment\">/* JS_CONDITIONAL_EXPRESSION */</span>:\n</div></li><li><div class=\"code-word\">      genConditionalExpression(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">20</span> <span class=\"hljs-comment\">/* JS_CACHE_EXPRESSION */</span>:\n</div></li><li><div class=\"code-word\">      genCacheExpression(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// SSR only types</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">21</span> <span class=\"hljs-comment\">/* JS_BLOCK_STATEMENT */</span>:\n</div></li><li><div class=\"code-word\">      genNodeList(node.body, context, <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-keyword\">false</span>)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-comment\">/* JS_TEMPLATE_LITERAL */</span>:\n</div></li><li><div class=\"code-word\">      genTemplateLiteral(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">23</span> <span class=\"hljs-comment\">/* JS_IF_STATEMENT */</span>:\n</div></li><li><div class=\"code-word\">      genIfStatement(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">24</span> <span class=\"hljs-comment\">/* JS_ASSIGNMENT_EXPRESSION */</span>:\n</div></li><li><div class=\"code-word\">      genAssignmentExpression(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">25</span> <span class=\"hljs-comment\">/* JS_SEQUENCE_EXPRESSION */</span>:\n</div></li><li><div class=\"code-word\">      genSequenceExpression(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">26</span> <span class=\"hljs-comment\">/* JS_RETURN_STATEMENT */</span>:\n</div></li><li><div class=\"code-word\">      genReturnStatement(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71652\">\n                      genNode\n                      主要的思路就是根据不同的节点类型，生成不同的代码，这里有十几种情况，我就不全部讲一遍了，仍然是以我们的示例为主，来分析它们的实现，没有分析到的分支我的建议是大致了解即可，未来如果遇到相关的场景，你再来详细看它们的实现也不迟。\n                    </p>\n                    <p data-nodeid=\"71653\">\n                      现在，我们来看一下根节点 codegenNode 的值：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  type: <span class=\"hljs-number\">13</span>, <span class=\"hljs-comment\">/* VNODE_CALL */</span>\n</div></li><li><div class=\"code-word\">  tag: <span class=\"hljs-string\">\"div\"</span>,\n</div></li><li><div class=\"code-word\">  children: [\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 子节点</span>\n</div></li><li><div class=\"code-word\">  ],\n</div></li><li><div class=\"code-word\">  props: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 属性表达式节点</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  directives: undefined,\n</div></li><li><div class=\"code-word\">  disableTracking: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">  dynamicProps: undefined,\n</div></li><li><div class=\"code-word\">  isBlock: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">  patchFlag: undefined\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71655\">\n                      由于根节点的 codegenNode 类型是 13，也就是一个\n                      VNodeCall，所以会执行 genVNodeCall 生成创建 VNode\n                      节点的表达式代码，它的实现如下 :\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">genVNodeCall</span><span class=\"hljs-params\">(node, context)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { push, helper, pure } = context\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { tag, props, children, patchFlag, dynamicProps, directives, isBlock, disableTracking } = <span class=\"hljs-function\">node\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(directives)</span> {\n</div></li><li><div class=\"code-word\">    push(helper(WITH_DIRECTIVES) + \\`(\\`)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (isBlock) {\n</div></li><li><div class=\"code-word\">    push(\\`(${helper(OPEN_BLOCK)}(${disableTracking ? \\`<span class=\"hljs-keyword\">true</span>\\` : \\`\\`}), \\`)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (pure) {\n</div></li><li><div class=\"code-word\">    push(PURE_ANNOTATION)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  push(helper(isBlock ? CREATE_BLOCK : CREATE_VNODE) + \\`(\\`, node)\n</div></li><li><div class=\"code-word\">  genNodeList(genNullableArgs([tag, props, children, patchFlag, dynamicProps]), context)\n</div></li><li><div class=\"code-word\">  push(\\`)\\`)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (isBlock) {\n</div></li><li><div class=\"code-word\">    push(\\`)\\`)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (directives) {\n</div></li><li><div class=\"code-word\">    push(\\`, \\`)\n</div></li><li><div class=\"code-word\">    genNode(directives, context)\n</div></li><li><div class=\"code-word\">    push(\\`)\\`)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71657\">\n                      根据我们的示例来看，directives 没定义，不用处理，isBlock\n                      为 true，disableTracking 为 false，那么生成如下打开 Block\n                      的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock()\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71659\">\n                      接着往下看，会判断 pure 是否为\n                      true，如果是则生成相关的注释，虽然这里的 pure 为\n                      false，但是之前我们在生成静态提升变量相关代码的时候 pure\n                      为 true，所以生成了注释代码 /<strong data-nodeid=\"71765\"\n                        >#<strong data-nodeid=\"71764\">PURE</strong></strong\n                      >/。\n                    </p>\n                    <p data-nodeid=\"71660\">\n                      接下来会判断 isBlock，如果它为 true 则在生成创建 Block\n                      相关代码，如果它为 false，则生成创建 VNode 的相关代码。\n                    </p>\n                    <p data-nodeid=\"71661\">\n                      因为这里 isBlock 为 true，所以生成如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71663\">\n                      生成了一个_createBlock\n                      的函数调用后，下面就需要生成函数的参数，通过如下代码生成：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">genNodeList(genNullableArgs([tag,</span> <span class=\"hljs-string\">props,</span> <span class=\"hljs-string\">children,</span> <span class=\"hljs-string\">patchFlag,</span> <span class=\"hljs-string\">dynamicProps]),</span> <span class=\"hljs-string\">context)</span>\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71665\">\n                      依据代码的执行顺序，我们先来看 genNullableArgs 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">genNullableArgs</span><span class=\"hljs-params\">(args)</span> </span>{\n</div></li><li><div class=\"code-word\">  let i = args.<span class=\"hljs-function\">length\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">while</span> <span class=\"hljs-params\">(i--)</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (args[i] != <span class=\"hljs-keyword\">null</span>)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> args.slice(<span class=\"hljs-number\">0</span>, i + <span class=\"hljs-number\">1</span>).map(arg =&gt; arg || \\`<span class=\"hljs-keyword\">null</span>\\`)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71667\">\n                      这个方法很简单，就是倒序遍历参数数组，找到第一个不为空的参数，然后返回该参数前面的所有参数构成的新数组。\n                    </p>\n                    <p data-nodeid=\"71668\">\n                      genNullableArgs 传入的参数数组依次是\n                      tag、props、children、patchFlag 和\n                      dynamicProps，对于我们的示例而言，此时 patchFlag 和\n                      dynamicProps 为 undefined，所以 genNullableArgs\n                      返回的是一个<code data-backticks=\"1\" data-nodeid=\"71774\"\n                        >[tag, props, children]</code\n                      >这样的数组。\n                    </p>\n                    <p data-nodeid=\"71669\">\n                      其实这是很好理解的，对于一个 vnode\n                      节点而言，构成它的主要几个部分就是节点的标签 tag，属性\n                      props 以及子节点\n                      children，我们的目标就是生成类似下面的代码：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"71777\"\n                        >_createBlock(tag, props, children)</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"71670\">\n                      因此接下来，我们再通过 genNodeList\n                      来生成参数相关的代码，来看一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">genNodeList</span><span class=\"hljs-params\">(nodes, context, multilines = <span class=\"hljs-keyword\">false</span>, comma = <span class=\"hljs-keyword\">true</span>)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { push, newline } = <span class=\"hljs-function\">context\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">for</span> <span class=\"hljs-params\">(let i = <span class=\"hljs-number\">0</span>; i &lt; nodes.length; i++)</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> node = nodes[i]\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (shared.isString(node)) {\n</div></li><li><div class=\"code-word\">      push(node)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shared.isArray(node)) {\n</div></li><li><div class=\"code-word\">      genNodeListAsArray(node, context)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      genNode(node, context)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &lt; nodes.length - <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (multilines) {\n</div></li><li><div class=\"code-word\">        comma &amp;&amp; push(<span class=\"hljs-string\">','</span>)\n</div></li><li><div class=\"code-word\">        newline()\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        comma &amp;&amp; push(<span class=\"hljs-string\">', '</span>)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71672\">\n                      genNodeList 就是通过遍历 nodes，拿到每一个 node，然后判断\n                      node 的类型，如果 node\n                      是字符串，就直接添加到代码中；如果是一个数组，则执行\n                      genNodeListAsArray\n                      生成数组形式的代码，否则是一个对象，则递归执行 genNode\n                      生成节点代码。\n                    </p>\n                    <p data-nodeid=\"71673\">\n                      我们还是根据示例代码走完这个流程，此时 nodes 的值如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[<span class=\"hljs-string\">'div'</span>, {\n</div></li><li><div class=\"code-word\">  type: <span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>\n</div></li><li><div class=\"code-word\">  content: <span class=\"hljs-string\">'_hoisted_1'</span>,\n</div></li><li><div class=\"code-word\">  isConstant: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">  isStatic: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">  hoisted: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 对象表达式节点</span>\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  [\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">      type: <span class=\"hljs-number\">9</span>, <span class=\"hljs-comment\">/* IF */</span>\n</div></li><li><div class=\"code-word\">      branches: [\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// v-if 解析出的 2 个分支对象</span>\n</div></li><li><div class=\"code-word\">      ],\n</div></li><li><div class=\"code-word\">      codegenNode: {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 代码生成节点</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  ]\n</div></li><li><div class=\"code-word\">]\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71675\">\n                      接下来我们依据 nodes 的值继续生成代码，首先 nodes\n                      第一个元素的值是 'div'\n                      字符串，根据前面的逻辑，直接把字符串添加到代码上即可，由于\n                      multilines 为 false，comma 为 true，因此生成如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>,\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71677\">\n                      接下来看 nodes 第二个元素，它代表的是 vnode 的属性\n                      props，是一个简单的对象表达式，就会递归执行\n                      genNode，进一步执行 genExpression，来看一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">genExpression</span><span class=\"hljs-params\">(node, context)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { content, isStatic } = node\n</div></li><li><div class=\"code-word\">  context.push(isStatic ? JSON.stringify(content) : content, node)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71679\">\n                      这里 genExpression 非常简单，就是往代码中添加 content\n                      的内容。此时 node 中的 content 值是 _hoisted_1，再回到\n                      genNodeList，由于 multilines 为 false，comma 为\n                      true，因此生成如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_1,\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71681\">\n                      接下来我们再看 nodes 第三个元素，它代表的是子节点\n                      chidren，是一个数组，那么会执行\n                      genNodeListAsArray，来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">genNodeListAsArray</span><span class=\"hljs-params\">(nodes, context)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> multilines = nodes.length &gt; <span class=\"hljs-number\">3</span> || nodes.some(n =&gt; isArray(n) || !isText$<span class=\"hljs-number\">1</span>(n))\n</div></li><li><div class=\"code-word\">  context.push(\\`[\\`)\n</div></li><li><div class=\"code-word\">  multilines &amp;&amp; context.indent()\n</div></li><li><div class=\"code-word\">  genNodeList(nodes, context, multilines);\n</div></li><li><div class=\"code-word\">  multilines &amp;&amp; context.deindent()\n</div></li><li><div class=\"code-word\">  context.push(\\`]\\`)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71683\">\n                      genNodeListAsArray 主要是把一个 node\n                      列表生成一个类似数组形式的代码，所以前后会添加中括号，并且判断是否要生成多行代码，如果是多行，前后还需要加减代码的缩进，而中间部分的代码，则继续递归调用\n                      genNodeList 生成。\n                    </p>\n                    <p data-nodeid=\"71684\">\n                      那么针对我们的示例，此时参数 nodes 的值如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-number\">9</span>, <span class=\"hljs-comment\">/* IF */</span>\n</div></li><li><div class=\"code-word\">    branches: [\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// v-if 解析出的 2 个分支对象</span>\n</div></li><li><div class=\"code-word\">    ],\n</div></li><li><div class=\"code-word\">    codegenNode: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 代码生成节点</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">]\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71686\">\n                      它是一个长度为 1\n                      的数组，但是这个数组元素的类型是一个对象，所以 multilines\n                      为 true。那么在执行 genNodeList 之前，生成的代码是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_1, [\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71688\">\n                      接下来就是递归执行 genNodeList 的过程，由于 nodes\n                      数组只有一个对象类型的元素，则执行\n                      genNode，并且这个对象的类型是 IF 表达式，回顾 genNode\n                      的实现，此时会执行到<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"71798\"\n                        >genNode(node.codegenNode, context)</code\n                      >，也就是取节点的 codegenNode，进一步执行\n                      genNode，我们来看一下这个 codegenNode：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  type: <span class=\"hljs-number\">19</span>, <span class=\"hljs-comment\">/* JS_CONDITIONAL_EXPRESSION */</span>\n</div></li><li><div class=\"code-word\">  consequent: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 主逻辑</span>\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-number\">13</span>, <span class=\"hljs-comment\">/* VNODE_CALL */</span>\n</div></li><li><div class=\"code-word\">    tag: <span class=\"hljs-string\">\"_component_hello\"</span>,\n</div></li><li><div class=\"code-word\">    children: undefined,\n</div></li><li><div class=\"code-word\">    props: {\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-comment\">// 属性表达式节点</span>\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    directives: undefined,\n</div></li><li><div class=\"code-word\">    disableTracking: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">    dynamicProps: undefined,\n</div></li><li><div class=\"code-word\">    isBlock: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">    patchFlag: undefined\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  alternate: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 备选逻辑</span>\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-number\">13</span>, <span class=\"hljs-comment\">/* VNODE_CALL */</span>\n</div></li><li><div class=\"code-word\">    tag: <span class=\"hljs-string\">\"div\"</span>,\n</div></li><li><div class=\"code-word\">    children: [\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 长度为 3 的子节点</span>\n</div></li><li><div class=\"code-word\">    ],\n</div></li><li><div class=\"code-word\">    props: {\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-comment\">// 属性表达式节点</span>\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    directives: undefined,\n</div></li><li><div class=\"code-word\">    disableTracking: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">    dynamicProps: undefined,\n</div></li><li><div class=\"code-word\">    isBlock: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">    patchFlag: undefined\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  test: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 逻辑测试</span>\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>\n</div></li><li><div class=\"code-word\">    content: <span class=\"hljs-string\">\"_ctx.flag\"</span>,\n</div></li><li><div class=\"code-word\">    isConstant: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">    isStatic: <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  newline: <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71690\">\n                      它是一个条件表达式节点，它主要包括 3 个重要的属性，其中\n                      test 表示逻辑测试，它是一个表达式节点，consequent\n                      表示主逻辑，它是一个 vnode 调用节点，alternate\n                      表示备选逻辑，它也是一个 vnode 调用节点。\n                    </p>\n                    <p data-nodeid=\"71691\">\n                      其实条件表达式节点要生成代码就是一个条件表达式，用伪代码表示是：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"71802\"\n                        >test ? consequent : alternate</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"71692\">\n                      genNode 遇到条件表达式节点会执行\n                      genConditionalExpression，我们来看一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">genConditionalExpression</span><span class=\"hljs-params\">(node, context)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { test, consequent, alternate, newline: needNewline } = node\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { push, indent, deindent, newline } = context\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 生成条件表达式</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (test.type === <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> needsParens = !isSimpleIdentifier(test.content)\n</div></li><li><div class=\"code-word\">    needsParens &amp;&amp; push(\\`(\\`)\n</div></li><li><div class=\"code-word\">    genExpression(test, context)\n</div></li><li><div class=\"code-word\">    needsParens &amp;&amp; push(\\`)\\`)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    push(\\`(\\`)\n</div></li><li><div class=\"code-word\">    genNode(test, context)\n</div></li><li><div class=\"code-word\">    push(\\`)\\`)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 换行加缩进</span>\n</div></li><li><div class=\"code-word\">  needNewline &amp;&amp; indent()\n</div></li><li><div class=\"code-word\">  context.indentLevel++\n</div></li><li><div class=\"code-word\">  needNewline || push(\\` \\`)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 生成主逻辑代码</span>\n</div></li><li><div class=\"code-word\">  push(\\`? \\`)\n</div></li><li><div class=\"code-word\">  genNode(consequent, context)\n</div></li><li><div class=\"code-word\">  context.indentLevel--\n</div></li><li><div class=\"code-word\">  needNewline &amp;&amp; newline()\n</div></li><li><div class=\"code-word\">  needNewline || push(\\` \\`)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 生成备选逻辑代码</span>\n</div></li><li><div class=\"code-word\">  push(\\`: \\`)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> isNested = alternate.type === <span class=\"hljs-number\">19</span> <span class=\"hljs-comment\">/* JS_CONDITIONAL_EXPRESSION */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!isNested) {\n</div></li><li><div class=\"code-word\">    context.indentLevel++\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  genNode(alternate, context)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!isNested) {\n</div></li><li><div class=\"code-word\">    context.indentLevel--\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  needNewline &amp;&amp; deindent(<span class=\"hljs-keyword\">true</span> <span class=\"hljs-comment\">/* without newline */</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71694\">\n                      genConditionalExpression\n                      的主要目的就是生成条件表达式代码，所以首先它会生成逻辑测试的代码。对于示例，我们这里是一个简单表达式节点，所以生成的代码是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_1, [\n</div></li><li><div class=\"code-word\">    (_ctx.flag)\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71696\">\n                      接下来就是生成一些换行和缩进，紧接着生成主逻辑代码，也就是把\n                      consequent 这个 vnode 调用节点通过 genNode\n                      转换生成代码，这又是一个递归过程，其中的细节我就不再赘述了，执行完后会生成如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_1, [\n</div></li><li><div class=\"code-word\">    (_ctx.flag)\n</div></li><li><div class=\"code-word\">      ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71698\">\n                      接下来就是生成备选逻辑的代码，即把 alternate 这个 vnode\n                      调用节点通过 genNode\n                      转换生成代码，同样内部的细节我就不赘述了，感兴趣同学可以自行调试。\n                    </p>\n                    <p data-nodeid=\"71699\">\n                      需要注意的是，<strong data-nodeid=\"71817\"\n                        >alternate 对应的节点的 isBlock 属性是 true</strong\n                      >，<strong data-nodeid=\"71818\"\n                        >所以会生成创建 Block 相关的代码</strong\n                      >，最终生成的代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_1, [\n</div></li><li><div class=\"code-word\">    (_ctx.flag)\n</div></li><li><div class=\"code-word\">      ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n</div></li><li><div class=\"code-word\">      : (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_2, [\n</div></li><li><div class=\"code-word\">          _createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"&gt;hello \"</span> + _toDisplayString(_ctx.msg + _ctx.test), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n</div></li><li><div class=\"code-word\">          _hoisted_3,\n</div></li><li><div class=\"code-word\">          _hoisted_4\n</div></li><li><div class=\"code-word\">        ]))\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71701\">\n                      接下来我们回到 genNodeListAsArray 函数，处理完\n                      children，那么下面就会减少缩进，并添加闭合的中括号，就会生成如下的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_1, [\n</div></li><li><div class=\"code-word\">    (_ctx.flag)\n</div></li><li><div class=\"code-word\">      ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n</div></li><li><div class=\"code-word\">      : (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_2, [\n</div></li><li><div class=\"code-word\">          _createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"&gt;hello \"</span> + _toDisplayString(_ctx.msg + _ctx.test), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n</div></li><li><div class=\"code-word\">          _hoisted_3,\n</div></li><li><div class=\"code-word\">          _hoisted_4\n</div></li><li><div class=\"code-word\">        ]))\n</div></li><li><div class=\"code-word\">  ]\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71703\">\n                      genNodeListAsArray 处理完子节点后，回到\n                      genNodeList，发现所有 nodes 也处理完了，则回到\n                      genVNodeCall\n                      函数，接下来的逻辑就是补齐函数调用的右括号，此时生成的代码是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_1, [\n</div></li><li><div class=\"code-word\">    (_ctx.flag)\n</div></li><li><div class=\"code-word\">      ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n</div></li><li><div class=\"code-word\">      : (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_2, [\n</div></li><li><div class=\"code-word\">          _createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"&gt;hello \"</span> + _toDisplayString(_ctx.msg + _ctx.test), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n</div></li><li><div class=\"code-word\">          _hoisted_3,\n</div></li><li><div class=\"code-word\">          _hoisted_4\n</div></li><li><div class=\"code-word\">        ]))\n</div></li><li><div class=\"code-word\">  ]))\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71705\">\n                      那么至此，根节点 vnode 树的表达式就创建好了。我们再回到\n                      generate 函数，接下来就需要添加右括号 “}”\n                      来闭合渲染函数，最终生成如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_1, [\n</div></li><li><div class=\"code-word\">    (_ctx.flag)\n</div></li><li><div class=\"code-word\">      ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n</div></li><li><div class=\"code-word\">      : (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_2, [\n</div></li><li><div class=\"code-word\">          _createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"hello \"</span> + _toDisplayString(_ctx.msg + _ctx.test), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n</div></li><li><div class=\"code-word\">          _hoisted_3,\n</div></li><li><div class=\"code-word\">          _hoisted_4\n</div></li><li><div class=\"code-word\">        ]))\n</div></li><li><div class=\"code-word\">  ]))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71707\">\n                      这就是示例 template\n                      编译生成的最终代码，虽然我们忽略了其中子节点的一些实现细节，但是整体流程还是很容易理解的，主要就是一个递归的思想，遇到不同类型的节点，执行相应的代码生成函数生成代码即可。\n                    </p>\n                    <p data-nodeid=\"71708\">\n                      节点生成代码的所需的信息可以从节点的属性中获取，这完全得益于前面\n                      transform 的语法分析阶段生成的\n                      codegenNode，根据这些信息就能很容易地生成对应的代码了。\n                    </p>\n                    <p data-nodeid=\"71709\">\n                      至此，我们已经了解了模板的编译到代码的全部流程。相比\n                      Vue.js 2.x，Vue.js 3.0 在编译阶段设计了 Block\n                      的概念，我们上述示例编译出来的代码就是通过创建一个 Block\n                      来创建对应的 vnode。\n                    </p>\n                    <p data-nodeid=\"71710\">\n                      那么，这个 Block\n                      在运行时是怎么玩的呢？为什么它会对性能优化起到很大的作用呢？接下来我们就来分析它背后的实现原理。\n                    </p>\n                    <h3 data-nodeid=\"71711\">运行时优化</h3>\n                    <p data-nodeid=\"71712\">\n                      首先，我们来看一下 openBlock 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> blockStack = []\n</div></li><li><div class=\"code-word\">let currentBlock = <span class=\"hljs-function\"><span class=\"hljs-keyword\">null</span>\n</span></div></li><li><div class=\"code-word\">function <span class=\"hljs-title\">openBlock</span><span class=\"hljs-params\">(disableTracking = <span class=\"hljs-keyword\">false</span>)</span> {\n</div></li><li><div class=\"code-word\">  blockStack.push((currentBlock = disableTracking ? <span class=\"hljs-keyword\">null</span> : []));\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71714\">\n                      Vue.js 3.0 在运行时设计了一个 blockStack 和\n                      currentBlock，其中 blockStack 表示一个 Block\n                      Tree，因为要考虑嵌套 Block 的情况，而currentBlock\n                      表示当前的 Block。\n                    </p>\n                    <p data-nodeid=\"71715\">\n                      openBlock 的实现很简单，往当前 blockStack push 一个新的\n                      Block，作为 currentBlock。\n                    </p>\n                    <p data-nodeid=\"71716\">\n                      那么设计 Block 的目的是什么呢？主要就是收集动态的 vnode\n                      的节点，这样才能在 patch 阶段只比对这些动态 vnode\n                      节点，避免不必要的静态节点的比对，优化了性能。\n                    </p>\n                    <p data-nodeid=\"71717\">\n                      那么动态 vnode 节点是什么时候被收集的呢？其实是在\n                      createVNode 阶段，我们来回顾一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createVNode</span><span class=\"hljs-params\">(type, props = <span class=\"hljs-keyword\">null</span>\n</span></span></div></li><li><div class=\"code-word\">,children = <span class=\"hljs-keyword\">null</span>) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 处理 props 相关逻辑，标准化 class 和 style</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 对 vnode 类型信息编码 </span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建 vnode 对象</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 标准化子节点，把不同数据类型的 children 转成数组或者文本类型。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 添加动态 vnode 节点到 currentBlock 中</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (shouldTrack &gt; <span class=\"hljs-number\">0</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">    !isBlockNode &amp;&amp;\n</div></li><li><div class=\"code-word\">    currentBlock &amp;&amp;\n</div></li><li><div class=\"code-word\">    patchFlag !== <span class=\"hljs-number\">32</span> <span class=\"hljs-comment\">/* HYDRATE_EVENTS */</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">    (patchFlag &gt; <span class=\"hljs-number\">0</span> ||\n</div></li><li><div class=\"code-word\">      shapeFlag &amp; <span class=\"hljs-number\">128</span> <span class=\"hljs-comment\">/* SUSPENSE */</span> ||\n</div></li><li><div class=\"code-word\">      shapeFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span> ||\n</div></li><li><div class=\"code-word\">      shapeFlag &amp; <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* STATEFUL_COMPONENT */</span> ||\n</div></li><li><div class=\"code-word\">      shapeFlag &amp; <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* FUNCTIONAL_COMPONENT */</span>)) {\n</div></li><li><div class=\"code-word\">    currentBlock.push(vnode);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> vnode\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71719\">\n                      注释中写的前面几个过程，我们在之前的章节已经讲过了，我们来看函数的最后，这里会判断\n                      vnode 是不是一个动态节点，如果是则把它添加到 currentBlock\n                      中，这就是动态 vnode 节点的收集过程。\n                    </p>\n                    <p data-nodeid=\"71720\">我们接着来看 createBlock 的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createBlock</span><span class=\"hljs-params\">(type, props, children, patchFlag, dynamicProps)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> vnode = createVNode(type, props, children, patchFlag, dynamicProps, <span class=\"hljs-keyword\">true</span> <span class=\"hljs-comment\">/* isBlock: 阻止这个 block 收集自身 */</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 在 vnode 上保留当前 Block 收集的动态子节点</span>\n</div></li><li><div class=\"code-word\">  vnode.dynamicChildren = currentBlock || EMPTY_ARR\n</div></li><li><div class=\"code-word\">  blockStack.pop()\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 当前 Block 恢复到父 Block</span>\n</div></li><li><div class=\"code-word\">  currentBlock = blockStack[blockStack.length - <span class=\"hljs-number\">1</span>] || <span class=\"hljs-keyword\">null</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 节点本身作为父 Block 收集的子节点</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (currentBlock) {\n</div></li><li><div class=\"code-word\">    currentBlock.push(vnode)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> vnode\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71722\">\n                      这时候你可能会好奇，为什么要设计 openBlock 和 createBlock\n                      两个函数呢？比如下面这个函数<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"71835\"\n                        >render()</code\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">render</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (openBlock(),createBlock(<span class=\"hljs-string\">'div'</span>, <span class=\"hljs-keyword\">null</span>, [<span class=\"hljs-comment\">/*...*/</span>]))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71724\">\n                      为什么不把 openBlock 和 createBlock\n                      放在一个函数中执行呢，像下面这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">render</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (createBlock(<span class=\"hljs-string\">'div'</span>, <span class=\"hljs-keyword\">null</span>, [<span class=\"hljs-comment\">/*...*/</span>]))\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createBlock</span><span class=\"hljs-params\">(type, props, children, patchFlag, dynamicProps)</span> </span>{\n</div></li><li><div class=\"code-word\">  openBlock()\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建 vnode</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> vnode = createVNode(type, props, children, patchFlag, dynamicProps, <span class=\"hljs-keyword\">true</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// ...  </span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> vnode\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"98160\">\n                      这样是不行的！其中原因其实很简单，createBlock\n                      函数的第三个参数是 children，这些 children\n                      中的元素也是经过 createVNode\n                      创建的，显然一个函数的调用需要先去执行参数的计算，也就是优先去创建子节点的\n                      vnode，然后才会执行父节点的 createBlock 或者是\n                      createVNode。\n                    </p>\n                    <p data-nodeid=\"98161\">\n                      所以在父节点的 createBlock 函数执行前，子节点就已经通过\n                      createVNode 创建了对应的 vnode ，如果把 openBlock\n                      的逻辑放在了 createBlock 中，就相当于在子节点创建后才创建\n                      currentBlock，这样就不能正确地收集子节点中的动态 vnode\n                      了。\n                    </p>\n\n                    <p data-nodeid=\"71727\">\n                      再回到 createBlock\n                      函数内部，这个时候你要明白动态子节点已经被收集到\n                      currentBlock 中了。\n                    </p>\n                    <p data-nodeid=\"71728\">\n                      函数首先会执行 createVNode 创建一个 vnode\n                      节点，注意最后一个参数是 true，这表明它是一个 Block\n                      node，所以就不会把自身当作一个动态 vnode 收集到\n                      currentBlock 中。\n                    </p>\n                    <p data-nodeid=\"71729\">\n                      接着把收集动态子节点的 currentBlock 保留到当前的 Block\n                      vnode 的 dynamicChildren 中，为后续 patch\n                      过程访问这些动态子节点所用。\n                    </p>\n                    <p data-nodeid=\"71730\">\n                      最后把当前 Block 恢复到父 Block，如果父 Block\n                      存在的话，则把当前这个 Block node 作为动态节点添加到父\n                      Block 中。\n                    </p>\n                    <p data-nodeid=\"71731\">\n                      Block Tree\n                      的构造过程我们搞清楚了，那么接下来我们就来看它在 patch\n                      阶段具体是如何工作的。\n                    </p>\n                    <p data-nodeid=\"71732\">\n                      我们之前分析过，在 patch 阶段更新节点元素的时候，会执行\n                      patchElement 函数，我们再来回顾一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, optimized) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> el = (n2.el = n1.el)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> oldProps = (n1 &amp;&amp; n1.props) || EMPTY_OBJ\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> newProps = n2.props || EMPTY_OBJ\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 更新 props</span>\n</div></li><li><div class=\"code-word\">  patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> areChildrenSVG = isSVG &amp;&amp; n2.type !== <span class=\"hljs-string\">'foreignObject'</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 更新子节点</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (n2.dynamicChildren) {\n</div></li><li><div class=\"code-word\">    patchBlockChildren(n1.dynamicChildren, n2.dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!optimized) {\n</div></li><li><div class=\"code-word\">    patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71734\">\n                      我们在前面组件更新的章节分析过这个流程，在分析子节点更新的部分，当时并没有考虑到优化的场景，所以只分析了全量比对更新的场景。\n                    </p>\n                    <p data-nodeid=\"71735\">\n                      而实际上，如果这个 vnode 是一个 Block\n                      vnode，那么我们不用去通过 patchChildren\n                      全量比对，只需要通过 patchBlockChildren 去比对并更新 Block\n                      中的动态子节点即可。\n                    </p>\n                    <p data-nodeid=\"71736\">我们来看一下它的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; newChildren.length; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> oldVNode = oldChildren[i]\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> newVNode = newChildren[i]\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 确定待更新节点的容器</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> container =\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 对于 Fragment，我们需要提供正确的父容器</span>\n</div></li><li><div class=\"code-word\">      oldVNode.type === Fragment ||\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 在不同节点的情况下，将有一个替换节点，我们也需要正确的父容器</span>\n</div></li><li><div class=\"code-word\">      !isSameVNodeType(oldVNode, newVNode) ||\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 组件的情况，我们也需要提供一个父容器</span>\n</div></li><li><div class=\"code-word\">      oldVNode.shapeFlag &amp; <span class=\"hljs-number\">6</span> <span class=\"hljs-comment\">/* COMPONENT */</span>\n</div></li><li><div class=\"code-word\">        ? hostParentNode(oldVNode.el)\n</div></li><li><div class=\"code-word\">        :\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 在其他情况下，父容器实际上并没有被使用，所以这里只传递 Block 元素即可</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-function\">fallbackContainer\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">patch</span><span class=\"hljs-params\">(oldVNode, newVNode, container, <span class=\"hljs-keyword\">null</span>, parentComponent, parentSuspense, isSVG, <span class=\"hljs-keyword\">true</span>)</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"71738\">\n                      patchBlockChildren\n                      的实现很简单，遍历新的动态子节点数组，拿到对应的新旧动态子节点，并执行\n                      patch 更新子节点即可。\n                    </p>\n                    <p data-nodeid=\"71739\">\n                      这样一来，更新的复杂度就变成和动态节点的数量正相关，而不与模板大小正相关，如果一个模板的动静比越低，那么性能优化的效果就越明显。\n                    </p>\n                    <h3 data-nodeid=\"71740\">总结</h3>\n                    <p data-nodeid=\"71741\">\n                      好的，到这里我们这一节的学习也要结束啦，通过这节课的学习，你应该了解了\n                      AST 是如何生成可运行的代码，也应该明白了 Vue.js 3.0\n                      是如何通过 Block 的方式实现了运行时组件更新的性能优化。\n                    </p>\n                    <p data-nodeid=\"71742\">\n                      我也推荐你写一些其他的示例，通过断点调试的方式，看看不同的场景的代码生成过程。\n                    </p>\n                    <p data-nodeid=\"71743\">\n                      最后，给你留一道思考题目，Block\n                      数组是一维的，但是动态的子节点可能有嵌套关系，patchBlockChildren\n                      内部也是递归执行了 patch\n                      函数，那么在整个更新的过程中，会出现子节点重复更新的情况吗，为什么？欢迎你在留言区与我分享。\n                    </p>\n                    <blockquote data-nodeid=\"71744\">\n                      <p data-nodeid=\"71745\">\n                        本节课的相关代码在源代码中的位置如下：<br />\n                        packages/compiler-core/src/codegen.ts<br />\n                        packages/runtime-core/src/vnode.ts<br />\n                        packages/runtime-core/src/renderer.ts\n                      </p>\n                    </blockquote>\n            "}