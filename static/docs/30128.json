{"title":"加餐 | 模块五思考题解答","context":"\n                    <p data-nodeid=\"50474\" class=\"\">\n                      今天我会带你把《<strong data-nodeid=\"50480\"\n                        >模块五：网络安全</strong\n                      >》中涉及的课后练习题，逐一讲解，并给出每个课时练习题的解题思路和答案。\n                    </p>\n\n                    <h3 data-nodeid=\"50177\">练习题详解</h3>\n                    <h4 data-nodeid=\"50178\">\n                      19 | 网络安全概述：对称、非对称加密的区别是？\n                    </h4>\n                    <p data-nodeid=\"50179\">\n                      【<strong data-nodeid=\"50221\">问题</strong\n                      >】自己写一个程序实测下对称加密和非对称加密的性能差距。\n                    </p>\n                    <p data-nodeid=\"50180\">\n                      【<strong data-nodeid=\"50227\">解答</strong>】以下是我用\n                      Java 写的一段测试程序：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> test;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> com.github.javafaker.Faker;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> org.junit.Test;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> javax.crypto.*;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> javax.crypto.spec.IvParameterSpec;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> java.security.*;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> java.security.spec.InvalidKeySpecException;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> java.security.spec.PKCS8EncodedKeySpec;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RSA</span> </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-meta\">@Test</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">rsaEncode</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> keyPairGen = KeyPairGenerator.getInstance(<span class=\"hljs-string\">\"RSA\"</span>);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> pair = keyPairGen.generateKeyPair();\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> privateKey = pair.getPrivate().getEncoded();\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> faker = <span class=\"hljs-keyword\">new</span> Faker();\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> start = System.currentTimeMillis();\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> keyFactory = KeyFactory.getInstance(<span class=\"hljs-string\">\"RSA\"</span>);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> keySpec = <span class=\"hljs-keyword\">new</span> PKCS8EncodedKeySpec(privateKey);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> key = keyFactory.generatePrivate(keySpec);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10000</span>; i++) {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> randomBytes = faker.shakespeare().asYouLikeItQuote().getBytes();\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> cipher = Cipher.getInstance(keyFactory.getAlgorithm());\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cipher.init(Cipher.ENCRYPT_MODE, key);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> resultBytes = cipher.doFinal(randomBytes);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span>(i % <span class=\"hljs-number\">100</span> == <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.format(<span class=\"hljs-string\">\"%d/10000 done.\\n\"</span>, i);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; System.out.format(<span class=\"hljs-string\">\"time: %dms\\n\"</span>, System.currentTimeMillis() - start);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-meta\">@Test</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">aesEncode</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> keyGenerator = KeyGenerator.getInstance(<span class=\"hljs-string\">\"AES\"</span>);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; keyGenerator.init(<span class=\"hljs-number\">128</span>);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> key = keyGenerator.generateKey();\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> faker = <span class=\"hljs-keyword\">new</span> Faker();\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> ivBytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">byte</span>[<span class=\"hljs-number\">16</span>];\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> start = System.currentTimeMillis();\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10000</span>; i++) {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> randomBytes = faker.shakespeare().asYouLikeItQuote().getBytes();\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> cipher = Cipher.getInstance(<span class=\"hljs-string\">\"AES/CBC/PKCS5Padding\"</span>);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">new</span> SecureRandom().nextBytes(ivBytes);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> iv = <span class=\"hljs-keyword\">new</span> IvParameterSpec(ivBytes);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> result = cipher.doFinal(randomBytes);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; System.out.format(<span class=\"hljs-string\">\"time: %dms\\n\"</span>, System.currentTimeMillis() - start);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"50182\">\n                      其中用 RSA 非对称加密算法加密 10000\n                      个莎士比亚书中的句子，用时在 11s 左右，而采用 AES\n                      对称加密算法加密，用时在 400ms 左右。\n                    </p>\n                    <h4 data-nodeid=\"50183\">\n                      20 | 信任链：为什么可以相信一个 HTTPS 网站？\n                    </h4>\n                    <p data-nodeid=\"50184\">\n                      【<strong data-nodeid=\"50235\">问题</strong\n                      >】如果公司要求你生成一个公私钥对，然后去证书机构申请证书，请问如果你丢失了这个公私钥对有什么危害？你要如何保护这个公私钥对？\n                    </p>\n                    <p data-nodeid=\"50185\">\n                      【<strong data-nodeid=\"50241\">解答</strong\n                      >】先明说说为什么会有这个问题。网站拥有者向 CA\n                      机构申请证书时，证书请求文件中只包含公钥，不包含私钥。\n                      证书私钥由网站保存，证书请求文件提交给 CA\n                      机构进行认证和签名后对外公开。而大部分公司都会规定：含有敏感信息的数据不能带出公司，比如只能存放在公司的笔记本、公司的网盘、公司的服务器上，但是显然对于存储证书的场景不适用。因为私钥太敏感了，有了私钥相当于可以解密用户发送给服务器的数据，泄漏的危害性非常大。\n                    </p>\n                    <p data-nodeid=\"50186\">\n                      因此，此类证书文件通常不在办公电脑，或者公司网盘上备份。如果你自己的电脑中有备份，应该尽快删除。通常证书直接保存到安全级别较高的服务器上，只有需要使用证书的软件才能够访问。另外，如果外部的第三方服务需要用到私钥，比如\n                      CDN，那么这里还会涉及一些特别的密钥分发技术，以及硬件加密技术，具体可以参考\n                      Keyless SSL 和 Intel 的 QAT 方案。\n                    </p>\n                    <h4 data-nodeid=\"50187\">\n                      21 | 攻防手段介绍：如何抵御 SYN 拒绝攻击？\n                    </h4>\n                    <p data-nodeid=\"50188\">\n                      【<strong data-nodeid=\"50249\">问题</strong\n                      >】哪些情况下你服务器的 /etc/passwd 文件会被黑客拿走？\n                    </p>\n                    <p data-nodeid=\"50189\">\n                      【<strong data-nodeid=\"50259\">解答</strong\n                      >】比较常见的情形就是<strong data-nodeid=\"50260\"\n                        >开发机器信息泄漏或者中毒成了肉鸡</strong\n                      >。很多同学的开发机器上都配置了到服务器跳板机的免密登录权限。如果开发机器上公钥泄漏，黑客就有可能登入跳板机。如果成了肉鸡，那么很多行为都可以远程操控，相当于黑客攻破了你公司的内网。\n                    </p>\n                    <p data-nodeid=\"50190\">\n                      还有一种常见的情形和代码注入有些相似之处，比如说有一个获取配置文件的服务，用参数表示配置文件的名称，比如\n                      /getfile/a.txt 代表取出代码路径某个相对目录的\n                      a.txt。这个时候如果网站程序实现直接将参数作为文件路径的一部分，黑客可能会尝试使用\n                      /getfile/../../../etc/passwd 去获取 /etc/passwd 文件。\n                    </p>\n                    <h3 data-nodeid=\"50191\">总结</h3>\n                    <p data-nodeid=\"50192\">\n                      网络安全类知识不仅面试中经常考察，本身也属于非常实用的知识。在实际工作中，如果触碰了高危操作，很有可能给你个人或公司带来灾难。因此在架构一个系统，或者书写架构文档的时候，建议你拿出一个小节具体讨论安全问题。\n                    </p>\n                    <p data-nodeid=\"50193\">\n                      学到这里，《计算机网络通关 29\n                      讲》专栏的全部课程就结束了，简单总结一下。\n                    </p>\n                    <ul data-nodeid=\"50194\">\n                      <li data-nodeid=\"50195\">\n                        <p data-nodeid=\"50196\">\n                          网络协议 TCP/IP/UDP\n                          的重点是了解其中的关键原理，并在遇到问题的时候，你脑海里能有大致的解决思路和应对方案，比如建立多少连接？连接和线程是什么模型？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"50197\">\n                        <p data-nodeid=\"50198\">\n                          Web\n                          技术是工作技能，需要你根据自己的工作类型详细了解完整的技术栈。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"50199\">\n                        <p data-nodeid=\"50200\">\n                          网络编程部分和语言设计、操作系统等知识结合紧密，如果你想进一步理解\n                          I/O、内存、磁盘等知识，可以学习我在拉勾教育平台推出的另一门<a\n                            href=\"https://shenceyun.lagou.com/t/Axo?fileGuid=xxQTRXtVcqtHK6j8\"\n                            data-nodeid=\"50270\"\n                            >《重学操作系统》</a\n                          >专栏。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"50201\">\n                        <p data-nodeid=\"50202\">\n                          最后，网络安全是高压线，工作中不容忽视，需要你加倍小心，谨慎处理。这里我嘱咐你两件事情：第一，技术岗位其实很容易违法，违法行为坚决不要做；第二，上线前要进行安全扫描，养成习惯。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"50203\">\n                      这一讲就到这里，发现求知的乐趣，我是林䭽。感谢你学习本次课程，下一讲是本专栏的最后一篇内容，我想和你聊聊《未来需要怎样的工程师》，再见。\n                    </p>\n            "}