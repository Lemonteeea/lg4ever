{"title":"22 | Teleport 组件：如何脱离当前组件渲染子组件？","context":"\n                    <p data-nodeid=\"81187\">\n                      我们都知道，Vue.js 的核心思想之一是组件化，组件就是 DOM\n                      的映射，我们通过嵌套的组件构成了一个组件应用程序的树。\n                    </p>\n\n                    <p data-nodeid=\"80836\">\n                      但是，有些时候组件模板的一部分在逻辑上属于该组件，而从技术角度来看，最好将模板的这一部分移动到应用程序之外的其他位置。\n                    </p>\n                    <p data-nodeid=\"80837\">\n                      一个常见的场景是创建一个包含全屏模式的对话框组件。在大多数情况下，我们希望对话框的逻辑存在于组件中，但是对话框的定位\n                      CSS 是一个很大的问题，它非常容易受到外层父组件的 CSS\n                      影响。\n                    </p>\n                    <p data-nodeid=\"80838\">\n                      假设我们有这样一个 dialog 组件，用按钮来管理一个 dialog：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-show</span>=<span class=\"hljs-string\">\"visible\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"dialog\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"dialog-body\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>I'm a dialog!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"visible=false\"</span>&gt;</span>Close<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    data() {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">visible</span>: <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">methods</span>: {\n</div></li><li><div class=\"code-word\">      show() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-built_in\">this</span>.visible = <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.dialog</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">position</span>: absolute;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">bottom</span>: <span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,.<span class=\"hljs-number\">5</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">display</span>: flex;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">flex-direction</span>: column;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">align-items</span>: center;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">justify-content</span>: center;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.dialog</span> <span class=\"hljs-selector-class\">.dialog-body</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">display</span>: flex;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">flex-direction</span>: column;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">align-items</span>: center;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">justify-content</span>: center;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">background-color</span>: white;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">300px</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">5px</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"82754\">然后我们去使用这个组件：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"showDialog\"</span>&gt;</span>Show dialog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dialog</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"dialog\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Dialog</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">import</span> Dialog <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/dialog'</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">components</span>: {\n</div></li><li><div class=\"code-word\">      Dialog\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">methods</span>: {\n</div></li><li><div class=\"code-word\">      showDialog() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-built_in\">this</span>.$refs.dialog.show()\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"83419\">\n                      因为我们的 dialog 组件使用的是 position:absolute\n                      绝对定位的方式，如果它的父级 DOM 有 position 不为 static\n                      的布局方式，那么 dialog\n                      的定位就受到了影响，不能按预期渲染了。\n                    </p>\n                    <p data-nodeid=\"83420\">\n                      所以一种好的解决方案是把 dialog 组件渲染的这部分 DOM\n                      挂载到 body 下面，这样就不会受到父级样式的影响了。\n                    </p>\n                    <p data-nodeid=\"84225\" class=\"\">\n                      在 Vue.js 2.x 中，想实现上面的需求，你可以依赖开源插件\n                      <a\n                        href=\"https://github.com/LinusBorg/portal-vue\"\n                        data-nodeid=\"84229\"\n                        >portal-vue</a\n                      >\n                      或者是\n                      <a\n                        href=\"https://github.com/cube-ui/vue-create-api\"\n                        data-nodeid=\"84233\"\n                        >vue-create-api</a\n                      >，感兴趣可以自行了解。\n                    </p>\n\n                    <p data-nodeid=\"83422\">\n                      而 Vue.js 3.0 把这一能力内置到内核中，提供了一个内置组件\n                      Teleport，它可以轻松帮助我们实现上述需求：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"showDialog\"</span>&gt;</span>Show dialog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">teleport</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"body\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Dialog</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"dialog\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Dialog</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">teleport</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">import</span> Dialog <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/dialog'</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">components</span>: {\n</div></li><li><div class=\"code-word\">      Dialog\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">methods</span>: {\n</div></li><li><div class=\"code-word\">      showDialog() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-built_in\">this</span>.$refs.dialog.show()\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"84778\">\n                      Teleport\n                      组件使用起来非常简单，套在想要在别处渲染的组件或者 DOM\n                      节点的外部，然后通过 to 这个 prop 去指定渲染到的位置，to\n                      可以是一个 DOM 选择器字符串，也可以是一个 DOM 节点。\n                    </p>\n                    <p data-nodeid=\"84779\">\n                      了解了使用方式，接下来，我们就来分析它的实现原理，看看\n                      Teleport 是如何脱离当前组件渲染子组件的。\n                    </p>\n                    <h3 data-nodeid=\"84780\">Teleport 实现原理</h3>\n                    <p data-nodeid=\"84781\">\n                      对于这类内置组件，Vue.js\n                      从编译阶段就做了特殊处理，我们先来看一下前面示例模板编译后的结果：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { createVNode <span class=\"hljs-keyword\">as</span> _createVNode, resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, Teleport <span class=\"hljs-keyword\">as</span> _Teleport, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache, $props, $setup, $data, $options</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_Dialog = _resolveComponent(<span class=\"hljs-string\">\"Dialog\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"template\"</span>, <span class=\"hljs-literal\">null</span>, [\n</div></li><li><div class=\"code-word\">    _createVNode(<span class=\"hljs-string\">\"button\"</span>, { <span class=\"hljs-attr\">onClick</span>: _ctx.showDialog }, <span class=\"hljs-string\">\"Show dialog\"</span>, <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* PROPS */</span>, [<span class=\"hljs-string\">\"onClick\"</span>]),\n</div></li><li><div class=\"code-word\">    (_openBlock(), _createBlock(_Teleport, { <span class=\"hljs-attr\">to</span>: <span class=\"hljs-string\">\"body\"</span> }, [\n</div></li><li><div class=\"code-word\">      _createVNode(_component_Dialog, { <span class=\"hljs-attr\">ref</span>: <span class=\"hljs-string\">\"dialog\"</span> }, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">512</span> <span class=\"hljs-comment\">/* NEED_PATCH */</span>)\n</div></li><li><div class=\"code-word\">    ]))\n</div></li><li><div class=\"code-word\">  ]))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"85397\">\n                      可以看到，对于 teleport 标签，它是直接创建了 Teleport\n                      内置组件，我们接下来来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> Teleport = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">__isTeleport</span>: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (n1 == <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 创建逻辑</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 更新逻辑</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  remove(vnode, { <span class=\"hljs-attr\">r</span>: remove, <span class=\"hljs-attr\">o</span>: { <span class=\"hljs-attr\">remove</span>: hostRemove } }) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 删除逻辑</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">move</span>: moveTeleport,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">hydrate</span>: hydrateTeleport\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"86004\">\n                      Teleport 组件的实现就是一个对象，对外提供了几个方法。其中\n                      process 方法负责组件的创建和更新逻辑，remove\n                      方法负责组件的删除逻辑，接下来我们就从这三个方面来分析\n                      Teleport 的实现原理。\n                    </p>\n                    <h4 data-nodeid=\"86005\">Teleport 组件创建</h4>\n                    <p data-nodeid=\"86006\">\n                      回顾组件创建的过程，会经历 patch\n                      阶段，我们来回顾它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> patch = <span class=\"hljs-function\">(<span class=\"hljs-params\">n1, n2, container, anchor = <span class=\"hljs-literal\">null</span>, parentComponent = <span class=\"hljs-literal\">null</span>, parentSuspense = <span class=\"hljs-literal\">null</span>, isSVG = <span class=\"hljs-literal\">false</span>, optimized = <span class=\"hljs-literal\">false</span></span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (n1 &amp;&amp; !isSameVNodeType(n1, n2)) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果存在新旧节点, 且新旧节点类型不同，则销毁旧节点</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { type, shapeFlag } = n2\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">switch</span> (type) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> Text:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 处理文本节点</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> Comment:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 处理注释节点</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> Static:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 处理静态节点</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> Fragment:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 处理 Fragment 元素</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">default</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 处理普通 DOM 元素</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">6</span> <span class=\"hljs-comment\">/* COMPONENT */</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 处理组件</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 处理 TELEPORT</span>\n</div></li><li><div class=\"code-word\">        type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals);\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">128</span> <span class=\"hljs-comment\">/* SUSPENSE */</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 处理 SUSPENSE</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"86601\">\n                      可以看到，在 patch 阶段，会判断如果 type 是一个 Teleport\n                      组件，则会执行它的 process 方法，接下来我们来看 process\n                      方法关于 Teleport 组件创建部分的逻辑：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">process</span>(<span class=\"hljs-params\">n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">mc</span>: mountChildren, <span class=\"hljs-attr\">pc</span>: patchChildren, <span class=\"hljs-attr\">pbc</span>: patchBlockChildren, <span class=\"hljs-attr\">o</span>: { insert, querySelector, createText, createComment } } = internals\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> disabled = isTeleportDisabled(n2.props)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { shapeFlag, children } = n2\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (n1 == <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 在主视图里插入注释节点或者空白文本节点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> placeholder = (n2.el = (process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>)\n</div></li><li><div class=\"code-word\">      ? createComment(<span class=\"hljs-string\">'teleport start'</span>)\n</div></li><li><div class=\"code-word\">      : createText(<span class=\"hljs-string\">''</span>))\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> mainAnchor = (n2.anchor = (process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>)\n</div></li><li><div class=\"code-word\">      ? createComment(<span class=\"hljs-string\">'teleport end'</span>)\n</div></li><li><div class=\"code-word\">      : createText(<span class=\"hljs-string\">''</span>))\n</div></li><li><div class=\"code-word\">    insert(placeholder, container, anchor)\n</div></li><li><div class=\"code-word\">    insert(mainAnchor, container, anchor)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 获取目标移动的 DOM 节点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> target = (n2.target = resolveTarget(n2.props, querySelector))\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> targetAnchor = (n2.targetAnchor = createText(<span class=\"hljs-string\">''</span>))\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (target) {\n</div></li><li><div class=\"code-word\">      insert(targetAnchor, target)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>)) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 查找不到 target 则报警告</span>\n</div></li><li><div class=\"code-word\">      warn(<span class=\"hljs-string\">'Invalid Teleport target on mount:'</span>, target, <span class=\"hljs-string\">\\`(<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">typeof</span> target}</span>)\\`</span>)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> mount = <span class=\"hljs-function\">(<span class=\"hljs-params\">container, anchor</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* ARRAY_CHILDREN */</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 挂载子节点</span>\n</div></li><li><div class=\"code-word\">        mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, optimized)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (disabled) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// disabled 情况就在原先的位置挂载</span>\n</div></li><li><div class=\"code-word\">      mount(container, mainAnchor)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (target) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 挂载到 target 的位置</span>\n</div></li><li><div class=\"code-word\">      mount(target, targetAnchor)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"87188\">\n                      Teleport 组件创建部分主要分为三个步骤，<strong\n                        data-nodeid=\"87225\"\n                        >第一步在主视图里插入注释节点或者空白文本节点</strong\n                      >，<strong data-nodeid=\"87226\"\n                        >第二步获取目标元素节点</strong\n                      >，<strong data-nodeid=\"87227\"\n                        >第三步往目标元素插入 Teleport 组件的子节点</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"87189\">\n                      我们先来看第一步，会在非生产环境往 Teleport\n                      组件原本的位置插入注释节点，在生产环境插入空白文本节点。在开发环境中，组件的\n                      el 对象指向 teleport start 注释节点，组件的 anchor\n                      对象指向teleport end 注释节点。\n                    </p>\n                    <p data-nodeid=\"87190\">\n                      接着看第二步，会通过 resolveTarget 方法从 props 中的 to\n                      属性以及 DOM 选择器拿到对应要移动到的目标元素 target。\n                    </p>\n                    <p data-nodeid=\"87191\">\n                      最后看第三步，会判断 disabled 变量的值，它是在 Teleport\n                      组件中通过 prop 传递的，如果 disabled 为\n                      true，那么子节点仍然挂载到 Teleport 原本视图的位置，如果为\n                      false，那么子节点则挂载到 target 目标元素位置。\n                    </p>\n                    <p data-nodeid=\"87192\">\n                      至此，我们就已经实现了需求，把 Teleport\n                      包裹的子节点脱离了当前组件，渲染到目标位置，是不是很简单呢？\n                    </p>\n                    <h4 data-nodeid=\"87193\">Teleport 组件更新</h4>\n                    <p data-nodeid=\"87194\">\n                      当然，Teleport\n                      包裹的子节点渲染后并不是一成不变的，当组件发生更新的时候，仍然会执行\n                      patch 逻辑走到 Teleport 的 process 方法，去处理 Teleport\n                      组件的更新，我们来看一下这部分的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">process</span>(<span class=\"hljs-params\">n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">mc</span>: mountChildren, <span class=\"hljs-attr\">pc</span>: patchChildren, <span class=\"hljs-attr\">pbc</span>: patchBlockChildren, <span class=\"hljs-attr\">o</span>: { insert, querySelector, createText, createComment } } = internals\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> disabled = isTeleportDisabled(n2.props)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { shapeFlag, children } = n2\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (n1 == <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 创建逻辑</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    n2.el = n1.el\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> mainAnchor = (n2.anchor = n1.anchor)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> target = (n2.target = n1.target)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> targetAnchor = (n2.targetAnchor = n1.targetAnchor)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 之前是不是 disabled 状态</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> wasDisabled = isTeleportDisabled(n1.props)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> currentContainer = wasDisabled ? container : target\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> currentAnchor = wasDisabled ? mainAnchor : targetAnchor\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 更新子节点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (n2.dynamicChildren) {\n</div></li><li><div class=\"code-word\">      patchBlockChildren(n1.dynamicChildren, n2.dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (n2.shapeFlag &amp; <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* ARRAY_CHILDREN */</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> oldChildren = n1.children\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> children = n2.children\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> (!children[i].el) {\n</div></li><li><div class=\"code-word\">            children[i].el = oldChildren[i].el\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!optimized) {\n</div></li><li><div class=\"code-word\">      patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (disabled) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!wasDisabled) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// enabled -&gt; disabled</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 把子节点移动回主容器</span>\n</div></li><li><div class=\"code-word\">        moveTeleport(n2, container, mainAnchor, internals, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TOGGLE */</span>)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> ((n2.props &amp;&amp; n2.props.to) !== (n1.props &amp;&amp; n1.props.to)) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 目标元素改变</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> nextTarget = (n2.target = resolveTarget(n2.props, querySelector))\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (nextTarget) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 移动到新的目标元素</span>\n</div></li><li><div class=\"code-word\">          moveTeleport(n2, nextTarget, <span class=\"hljs-literal\">null</span>, internals, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* TARGET_CHANGE */</span>)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>)) {\n</div></li><li><div class=\"code-word\">          warn(<span class=\"hljs-string\">'Invalid Teleport target on update:'</span>, target, <span class=\"hljs-string\">\\`(<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">typeof</span> target}</span>)\\`</span>)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (wasDisabled) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// disabled -&gt; enabled</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 移动到目标元素位置</span>\n</div></li><li><div class=\"code-word\">        moveTeleport(n2, target, targetAnchor, internals, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TOGGLE */</span>)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"87742\">\n                      Teleport 组件更新无非就是做几件事情：更新子节点，处理\n                      disabled 属性变化的情况，处理 to 属性变化的情况。\n                    </p>\n                    <p data-nodeid=\"87743\">\n                      首先，是更新 Teleport\n                      组件的子节点，这里更新分为优化更新和普通的全量比对更新两种情况，之前分析过，就不再赘述了。\n                    </p>\n                    <p data-nodeid=\"87744\">\n                      接着，是判断 Teleport 组件新节点配置 disabled\n                      属性的情况，如果满足新节点 disabled 为 true，且旧节点的\n                      disabled 为 false 的话，说明我们需要把 Teleport\n                      的子节点从目标元素内部移回到主视图内部了。\n                    </p>\n                    <p data-nodeid=\"87745\">\n                      如果新节点 disabled 为 false，那么先通过 to\n                      属性是否改变来判断目标元素 target\n                      有没有变化，如果有变化，则把 Teleport 的子节点移动到新的\n                      target 内部；如果目标元素没变化，则判断旧节点的 disabled\n                      是否为 true，如果是则把 Teleport\n                      的子节点从主视图内部移动到目标元素内部了。\n                    </p>\n                    <h4 data-nodeid=\"87746\">Teleport 组件移除</h4>\n                    <p data-nodeid=\"87747\">\n                      前面我们学过，当组件移除的时候会执行 unmount\n                      方法，它的内部会判断如果移除的组件是一个 Teleport\n                      组件，就会执行组件的 remove 方法：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span>) {\n</div></li><li><div class=\"code-word\">  vnode.type.remove(vnode, internals);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (doRemove) {\n</div></li><li><div class=\"code-word\">  remove(vnode);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"88253\">我们来看一下它的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\">vnode, { r: remove, o: { remove: hostRemove } }</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { shapeFlag, children, anchor } = vnode\n</div></li><li><div class=\"code-word\">  hostRemove(anchor)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* ARRAY_CHILDREN */</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n</div></li><li><div class=\"code-word\">      remove(children[i])\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"88748\">\n                      Teleport 的 remove 方法实现很简单，首先通过 hostRemove\n                      移除主视图渲染的锚点 teleport start 注释节点，然后再去遍历\n                      Teleport 的子节点执行 remove 移除。\n                    </p>\n                    <p data-nodeid=\"88749\">\n                      执行完 Teleport 的 remove 方法，会继续执行 remove 方法移除\n                      Teleport 主视图的元素 teleport end\n                      注释节点，至此，Teleport 组件完成了移除。\n                    </p>\n                    <h3 data-nodeid=\"88750\">总结</h3>\n                    <p data-nodeid=\"88751\">\n                      好的，到这里我们这一节的学习也要结束啦，通过这节课的学习，你应该了解了\n                      Teleport 是如何把内部的子元素渲染到目标元素上，并且对\n                      Teleport 组件是如何创建，更新和移除的有所理解。\n                    </p>\n                    <p data-nodeid=\"88752\">\n                      最后，给你留一道思考题，作为 Vue.js\n                      的内置组件，它需要像用户自定义组件那样先注册后再使用吗？如果不用又是为什么呢？欢迎你在留言区与我分享。\n                    </p>\n                    <blockquote data-nodeid=\"88753\">\n                      <p data-nodeid=\"88754\">\n                        本节课的相关代码在源代码中的位置如下：<br />\n                        packages/runtime-core/src/components/Teleport.ts<br />\n                        packages/runtime-core/src/renderer.ts\n                      </p>\n                    </blockquote>\n            "}