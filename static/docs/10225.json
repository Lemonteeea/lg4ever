{"title":"彩蛋 2 | 前端开发如何有针对性地学习算法？","context":"\n                    <p data-nodeid=\"9318\">\n                      为了应一些朋友的诉求，今天这节彩蛋我主要针对算法进行讲解，带你重新学习数据结构，以便更好地应对各种算法题目。\n                    </p>\n                    <p data-nodeid=\"9319\">\n                      你也知道算法题目是各种大厂必考的题目，但是由于工作比较忙而没有时间刷题；即便想好好复习一下算法，却又因为知识点太多而无从下手；还有一些非计算机专业出身的前端同学，对数据结构算法并没有系统学习过，面对那么多知识点也比较盲从，不知道哪些需要掌握、哪些不需要掌握。那么希望这一讲彩蛋，能帮助你形成对数据结构算法学习的思路，提升你的学习效率。\n                    </p>\n                    <p data-nodeid=\"9320\">\n                      话不多说，先来看看数据结构的存储方式。\n                    </p>\n                    <h3 data-nodeid=\"9321\">数据结构的存储方式</h3>\n                    <p data-nodeid=\"9322\">\n                      <strong data-nodeid=\"9402\"\n                        >数据结构的存储方式只有两种：数组（顺序存储）和链表（链式存储）</strong\n                      >。根据这两种分类我们来分别看看几个数据结构的 JavaScript\n                      代码描述方式。\n                    </p>\n                    <h4 data-nodeid=\"9323\">顺序存储</h4>\n                    <p data-nodeid=\"9324\">\n                      先来看看 JS 实现一个栈的代码，它是比较典型的顺序存储方式。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.items = []\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  push(element) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.items.push(element)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  pop() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.pop()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">size</span>() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.length\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">isEmpty</span>() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-keyword\">this</span>.items.length\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  clear() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.items = []\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  print() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.items.toString())\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 初始化一个栈</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Stack()\n</div></li><li><div class=\"code-word\">s.push(<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">s.push(<span class=\"hljs-number\">2</span>)\n</div></li><li><div class=\"code-word\">s.push(<span class=\"hljs-number\">3</span>)\n</div></li><li><div class=\"code-word\">s.push(<span class=\"hljs-number\">4</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(s)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(s.isEmpty)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(s.size)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"9326\">\n                      上面的代码比较简单，通过 ES6 的语法 class\n                      来描述非常简洁、容易让人理解。那么再看类似的队列，下面这个数据结构应该怎么用\n                      JavaScript 来描述呢？\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queue</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.items = []\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  enqueue(element) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.items.push(element)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  shift() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.shift()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">size</span>() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.items.length\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">isEmpty</span>() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-keyword\">this</span>.items.length\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  clear() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.items = []\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  print() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.items.toString())\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 初始化一个队列</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Queue()\n</div></li><li><div class=\"code-word\">s.enqueue(<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">s.enqueue(<span class=\"hljs-number\">2</span>)\n</div></li><li><div class=\"code-word\">s.enqueue(<span class=\"hljs-number\">3</span>)\n</div></li><li><div class=\"code-word\">s.enqueue(<span class=\"hljs-number\">4</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(s)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(s.isEmpty)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(s.size)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"9328\">\n                      从上面的两种数据结构的实现方式可以看出，队列和栈都是顺序存储结构，是用数组来模拟实现的，但是两者唯一的区别就在于一个是先进后出，另外一个是先进先出。\n                    </p>\n                    <p data-nodeid=\"9329\">\n                      这两个数据结构模拟起来都比较简单，我们再看看较为复杂的链式存储、二叉树和链表等，都是怎么用\n                      JavaScript 来描述的。\n                    </p>\n                    <h4 data-nodeid=\"9330\">链式存储</h4>\n                    <p data-nodeid=\"9331\">\n                      下面代码展示的是最基本的链表的 JS\n                      实现逻辑，也是链式存储最典型的例子。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>(element) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.element = element\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.next = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedList</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.head = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.length = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  append(element) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> Node(element)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.head == <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.head = node\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      current = <span class=\"hljs-keyword\">this</span>.head\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">while</span> (current.next) {\n</div></li><li><div class=\"code-word\">        current = current.next\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      current.next = node\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.length++\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  insert(position, element) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (position &lt; <span class=\"hljs-number\">0</span> &amp;&amp; position &gt; <span class=\"hljs-keyword\">this</span>.length) {\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span> \n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> Node(element)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-keyword\">this</span>.head\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">let</span> previous = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (position === <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.head = node\n</div></li><li><div class=\"code-word\">        node.next = current\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">while</span> (index++ &lt; position) {\n</div></li><li><div class=\"code-word\">          previous = current\n</div></li><li><div class=\"code-word\">          current = current.next\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        node.next = current\n</div></li><li><div class=\"code-word\">        previous.next = node\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.length++\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  removeAt(position) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (position &lt; <span class=\"hljs-number\">0</span> &amp;&amp; position &gt; <span class=\"hljs-keyword\">this</span>.length) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-keyword\">this</span>.head\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">let</span> previous = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (position === <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.head = current.next\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">while</span> (index++ &lt; position) {\n</div></li><li><div class=\"code-word\">          previous = current\n</div></li><li><div class=\"code-word\">          current = current.next\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        previous.next = current.next\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.length--\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  findIndex(element) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-keyword\">this</span>.head\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">-1</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (current) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (current.element === element) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> index + <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      index++\n</div></li><li><div class=\"code-word\">      current = current.next\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  remove(element) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-keyword\">this</span>.findIndex(element)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.removeAt(index)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">size</span>() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.length\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">isEmpty</span>() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-keyword\">this</span>.length\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  toString() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-keyword\">this</span>.head\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> slink = <span class=\"hljs-string\">''</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (current) {\n</div></li><li><div class=\"code-word\">      slink += <span class=\"hljs-string\">\\`<span class=\"hljs-subst\">${current.element}</span>-\\`</span>\n</div></li><li><div class=\"code-word\">      current = current.next\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> slink\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 初始化一个链表</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> LinkedList()\n</div></li><li><div class=\"code-word\">s.append(<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">s.append(<span class=\"hljs-number\">2</span>)\n</div></li><li><div class=\"code-word\">s.append(<span class=\"hljs-number\">3</span>)\n</div></li><li><div class=\"code-word\">s.append(<span class=\"hljs-number\">4</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(s)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(s.isEmpty)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(s.size)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"9333\">\n                      这段代码同样用 ES6\n                      比较简明的语法实现了链表的数据结构，只要你基本了解数据结构链表的思路，那么对上面的代码理解起来不是很难。\n                    </p>\n                    <p data-nodeid=\"9334\">\n                      下面我们再看稍微复杂一些的二叉树的 JS 代码描述。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>(element) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.element = element\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.left = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.right = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinarySearchTree</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.root = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  insert(element) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> temp = <span class=\"hljs-keyword\">new</span> Node(element)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> insertNode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root, node</span>) </span>{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (node.element &gt; root.element) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (root.right === <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">          root.right = node\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">          insertNode(root.right, node)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (root.left === <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">          root.left = node\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">          insertNode(root.left, node)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.root) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.root = temp\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      insertNode(<span class=\"hljs-keyword\">this</span>.root, temp)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 中序遍历</span>\n</div></li><li><div class=\"code-word\">  inOrderTraverse(callback) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> inOrderTraverseNode = <span class=\"hljs-function\">(<span class=\"hljs-params\">node, callback</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (node !== <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">        inOrderTraverseNode(node.left, callback)\n</div></li><li><div class=\"code-word\">        callback(node.element)\n</div></li><li><div class=\"code-word\">        inOrderTraverseNode(node.right, callback)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    inOrderTraverseNode(<span class=\"hljs-keyword\">this</span>.root, callback)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-comment\">// 前序遍历</span>\n</div></li><li><div class=\"code-word\">  preOrderTraverse(callback) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> preOrderTraverseNode = <span class=\"hljs-function\">(<span class=\"hljs-params\">node, callback</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (node !== <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">        callback(node.element)\n</div></li><li><div class=\"code-word\">        preOrderTraverseNode(node.left, callback)\n</div></li><li><div class=\"code-word\">        preOrderTraverseNode(node.right, callback)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    preOrderTraverseNode(<span class=\"hljs-keyword\">this</span>.root, callback)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-comment\">// 后序遍历</span>\n</div></li><li><div class=\"code-word\">  postOrderTraverse(callback) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> postOrderTraverseNode = <span class=\"hljs-function\">(<span class=\"hljs-params\">node, callback</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (node !== <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">        postOrderTraverseNode(node.left, callback)\n</div></li><li><div class=\"code-word\">        postOrderTraverseNode(node.right, callback)\n</div></li><li><div class=\"code-word\">        callback(node.element)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    postOrderTraverseNode(<span class=\"hljs-keyword\">this</span>.root, callback)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  min() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> minNode = <span class=\"hljs-function\"><span class=\"hljs-params\">node</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> node ? (node.left ? minNode(node.left) : node) : <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> minNode(<span class=\"hljs-keyword\">this</span>.root)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  max() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> maxNode = <span class=\"hljs-function\"><span class=\"hljs-params\">node</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> node ? (node.right ? maxNode(node.right) : node) : <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> maxNode(<span class=\"hljs-keyword\">this</span>.root)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  search(key) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> searchNode = <span class=\"hljs-function\">(<span class=\"hljs-params\">node, key</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (node === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (node.element === key) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-built_in\">console</span>.log(node)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> node\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> searchNode((key &lt; node.element) ? node.left : node.right, key)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    searchNode(<span class=\"hljs-keyword\">this</span>.root, key)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 初始化一个BST</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> tree = <span class=\"hljs-keyword\">new</span> BinarySearchTree()\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">11</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">7</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">5</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">3</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">9</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">8</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">10</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">13</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">12</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">14</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">20</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">18</span>)\n</div></li><li><div class=\"code-word\">tree.insert(<span class=\"hljs-number\">25</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(tree)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 调用二叉树对应地获取最大最小，以及搜索的方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> m = tree.min()\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(m.element)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> max = tree.max()\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(max)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> r = tree.search(<span class=\"hljs-number\">12</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(r)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"9336\">\n                      到这里是不是发现二叉树要比上面栈、队列以及链表要复杂一些了呢？仔细看二叉树的核心实现逻辑，不管是前、中、后序遍历，还是获取最值以及查找，本质上都是算法中一个比较重要的思想，那就是递归。递归调用自身的方法不断地往下遍历，这是二叉树相关题目比较重要的一个思路，你需要好好掌握，以便能轻松解决一系列二叉树的相关算法题目。\n                    </p>\n                    <p data-nodeid=\"9337\">下面再和你说说关于算法该如何刷题。</p>\n                    <h3 data-nodeid=\"9338\">算法刷题指南</h3>\n                    <p data-nodeid=\"9339\">\n                      首先要明确的是数据结构是工具，<strong data-nodeid=\"9420\"\n                        >算法是通过合适的工具解决特定问题的方法</strong\n                      >。也就是说，学习算法之前，最起码得了解那些常用的数据结构，知道它们的特性和缺陷。\n                    </p>\n                    <p data-nodeid=\"9340\">\n                      那么该如何在 LeetCode\n                      刷题呢？我的建议是你在熟悉了基本数据结构，并且能很轻松用\n                      JS 实现常见的数据结构之后，就可以去刷题了。LeetCode\n                      刷题也有套路，建议你当数据结构基本都了解并能实现的基础上，可以先直接刷二叉树相关的题目，因为这块比较容易抽象出通用的思路（本讲的最后我会带你看二叉树这部分怎么突破）。\n                    </p>\n                    <p data-nodeid=\"9341\">\n                      其实总结下来，算法刷题无非就是找到这几类题目的解题思路：\n                    </p>\n                    <ol data-nodeid=\"9342\">\n                      <li data-nodeid=\"9343\">\n                        <p data-nodeid=\"9344\">If-else, switch（branch）</p>\n                      </li>\n                      <li data-nodeid=\"9345\">\n                        <p data-nodeid=\"9346\">for，while loop（Iteration）</p>\n                      </li>\n                      <li data-nodeid=\"9347\">\n                        <p data-nodeid=\"9348\">\n                          递归 Recursion（Divide, Backtrace）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"9349\">\n                        <p data-nodeid=\"9350\">\n                          搜索 Search：深度优先搜索（Depth first\n                          search）、广度优先搜索（Breadth first search）、A* 等\n                        </p>\n                      </li>\n                      <li data-nodeid=\"9351\">\n                        <p data-nodeid=\"9352\">\n                          动态规划（Dynamic Programming）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"9353\">\n                        <p data-nodeid=\"9354\">二分查找（Binary Search）</p>\n                      </li>\n                      <li data-nodeid=\"9355\">\n                        <p data-nodeid=\"9356\">贪心算法（Greedy）</p>\n                      </li>\n                      <li data-nodeid=\"9357\">\n                        <p data-nodeid=\"9358\">数学（Math）&amp; 位运算等</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"9359\">\n                      上面提到的二叉树相关的实现思路以及相关的题目，其实就是第三类递归的思路，如果你把递归的思路掌握好，那对于二叉树相关的题目你将会得心应手。动态规划也类似，核心思路就是动态递推，从最小的开始计算，一步一步推导累加到第\n                      n 次之后的结果。\n                    </p>\n                    <p data-nodeid=\"9360\">\n                      针对算法和数据结构那么多知识点，我为你总结了一个脑图，方便你分别击破。\n                    </p>\n                    <h3 data-nodeid=\"9361\">算法数据结构脑图</h3>\n                    <p data-nodeid=\"10028\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/29/9F/CioPOWBhenGAJGelAAc3iYTqAIw539.png\"\n                        alt=\"2021329-145721.png\"\n                        data-nodeid=\"10031\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"9363\">\n                      里面的分支有很多，下面我们专门针对上面提到的二叉树来进行深入探讨，看看递归的思想是如何解决二叉树相关问题的。\n                    </p>\n                    <h3 data-nodeid=\"9364\">带你攻克一个难点</h3>\n                    <p data-nodeid=\"9365\">\n                      在看二叉树相关题目之前，你需要对上面的 JS\n                      实现二叉树的代码非常了解，尤其是前、中、后序遍历的过程，以及递归找二叉树中的最值的思路。有了这些基础之后，我们挑\n                      LeetCode\n                      的几个例子，看看怎么用递归的思路解决二叉树一系列的问题，类似的题目如下：\n                    </p>\n                    <ol data-nodeid=\"9366\">\n                      <li data-nodeid=\"9367\">\n                        <p data-nodeid=\"9368\">94 题：二叉树的中序遍历</p>\n                      </li>\n                      <li data-nodeid=\"9369\">\n                        <p data-nodeid=\"9370\">102 题：二叉树的层序遍历</p>\n                      </li>\n                      <li data-nodeid=\"9371\">\n                        <p data-nodeid=\"9372\">103 题：二叉树的锯齿形层序遍历</p>\n                      </li>\n                      <li data-nodeid=\"9373\">\n                        <p data-nodeid=\"9374\">104 题：二叉树的最大深度</p>\n                      </li>\n                      <li data-nodeid=\"9375\">\n                        <p data-nodeid=\"9376\">144 题：二叉树的前序遍历</p>\n                      </li>\n                      <li data-nodeid=\"9377\">\n                        <p data-nodeid=\"9378\">199 题：二叉树的右视图</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"9379\">\n                      还有其他类似的题目，这里就不举例了，我们先看这六道题如何击破。\n                    </p>\n                    <p data-nodeid=\"9380\">\n                      那么把这六道题目抽象起来，形成的思路以及代码模板大致如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// root为传入的二叉树</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> XXXTraversal = function(root) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 定义一个返回的遍历结果的组数</span>\n</div></li><li><div class=\"code-word\">    let res = []\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 定义一个内部需要不断递归的函数</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\">function <span class=\"hljs-title\">traverse</span><span class=\"hljs-params\">(r)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span>(!r) <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">        traverse(r.left);  <span class=\"hljs-comment\">// 递归遍历左子树</span>\n</div></li><li><div class=\"code-word\">        res.push(r.val);    <span class=\"hljs-comment\">// 将根节点push进待返回的数组</span>\n</div></li><li><div class=\"code-word\">        traverse(r.right);  <span class=\"hljs-comment\">// 递归遍历右子树</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    traverse(root);    <span class=\"hljs-comment\">// 循环遍历</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> res;      <span class=\"hljs-comment\">// 最后返回</span>\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"9382\">\n                      那么根据这个基本的模板，我们就可以衍生出上面几道题的答案了。只需要把\n                      8、9、10\n                      行代码的位置稍做调整，二叉树的前、中、后序遍历的题目就迎刃而解了。对于层序遍历，我们只需要根据上面稍加改造就能通过\n                      LeetCode 的编译，如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span>&nbsp;levelOrder&nbsp;=&nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>)&nbsp;</span>{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">let</span>&nbsp;arr&nbsp;=[];\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;<span class=\"hljs-title\">traverse</span>(<span class=\"hljs-params\">root,&nbsp;depth</span>)&nbsp;</span>{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>(root&nbsp;===&nbsp;<span class=\"hljs-literal\">null</span>)&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;[];\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>(arr[depth]&nbsp;===&nbsp;<span class=\"hljs-literal\">undefined</span>)&nbsp;{ <span class=\"hljs-comment\">// 改造外面定义的待返回的数组变成二维</span>\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[depth]&nbsp;=&nbsp;[];\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[depth].push(root.val);    <span class=\"hljs-comment\">// 把根节点在最先push进去</span>\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;traverse(root.left,&nbsp;depth&nbsp;+&nbsp;<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// 层数+1对应arr里的二维数组的序号 </span>\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;traverse(root.right,&nbsp;depth&nbsp;+&nbsp;<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 同上</span>\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;}\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;traverse(root,&nbsp;<span class=\"hljs-number\">0</span>);\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;arr;\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/*\n</span></div></li><li><div class=\"code-word\">  通过测试得到的返回结果是一个二维数组：[[3],[9,20],[15,7]] \n</div></li><li><div class=\"code-word\">*/\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"9384\">\n                      那么第 102 道题的答案已经出来了。再看下第 199\n                      题，如何在中序遍历递归的基础上实现二叉树的右视图？这道题其实就是通过递归的方式找到二叉树的右子树进行遍历输出，它的逻辑和层序遍历其实类似，只不过在递归的过程中进行拦截，确保层数和数组个数一致的时候，只存储右子树的节点就好。\n                    </p>\n                    <p data-nodeid=\"9385\">\n                      看一下基于层序遍历改造之后的实现 199 题的代码逻辑。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> rightSideView = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> arr = [];\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">traverse</span>(<span class=\"hljs-params\">root, depth</span>) </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span>(root === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span>(depth === arr.length) {  <span class=\"hljs-comment\">// 这加了逻辑拦截，只能push一个右节点</span>\n</div></li><li><div class=\"code-word\">            arr.push(root.val);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        depth++;    <span class=\"hljs-comment\">// 和层序遍历每进入一层 depth 加一逻辑基本一致</span>\n</div></li><li><div class=\"code-word\">        traverse(root.right, depth);  <span class=\"hljs-comment\">// 先进入右子树遍历，上面的if拦截</span>\n</div></li><li><div class=\"code-word\">        traverse(root.left, depth);  <span class=\"hljs-comment\">// 遍历的时候左子树已经存不进arr数组了</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    traverse(root, <span class=\"hljs-number\">0</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> arr;\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"9387\">\n                      通过上面几道二叉树的遍历的题目，就可以总结出这一系列题目的解题思路了。其核心都是用递归的思路来解决二叉树的遍历问题，只不过通过调整遍历的顺序以及存储数据的方式，把最后遍历的节点数字存储到对应的返回数组中，最后都能通过代码变化得到想要的效果。\n                    </p>\n                    <p data-nodeid=\"9388\">\n                      那么类似的题目也就能迎刃而解了，二叉树是应用递归思路最多的例子，那么除了这部分，例如动态规划如何来刷题呢？思路也类似，找到一两道动态规划比较典型的题目，总结和抽象出通用的解题思路，之后就可以更容易地去解决类似的题目了。\n                    </p>\n                    <h3 data-nodeid=\"9389\">总结</h3>\n                    <p data-nodeid=\"9390\">\n                      这一讲我们讨论了前端开发如何学习数据结构和刷题的方法，根据脑图复习了数据结构和算法。你要知道，算法可是通往大厂的必备技能，面试中一定会出现相应的题目。因此如果你不能有效地刷题、找到解决算法和数据结构的通用方法，是很难应对\n                      LeetCode\n                      中那么多算法编程题目的。因为随便出一个变形的算法题目你可能就不会了，你非常有必要从每道题目的细节中提炼出解决某一类题目的通用方法，这样你才能灵活从容地应对面试。\n                    </p>\n                    <p data-nodeid=\"9391\">\n                      希望我的分享可以为你算法的提升带来帮助，也希望你能在各种面试中脱颖而出，成为一名优秀的前端人。\n                    </p>\n            "}