{"title":"09 | 最少原则：如何实现“最少知识”代码？","context":"\n                    <p data-nodeid=\"941\" class=\"\">\n                      在实际的软件开发中，我们经常会写下面这样的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">final</span> String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"943\">\n                      代码看上去没有太大的问题，但实际上其中任意一个方法发生变化时，这段代码都需要修改。因为调用是依赖的每一个细节，不仅增加了耦合，也使代码结构僵化。\n                    </p>\n                    <p data-nodeid=\"944\">\n                      <strong data-nodeid=\"1020\"\n                        >迪米特法则正是为了避免对象间出现这样过多的细节依赖而被提出来</strong\n                      >，所以今天我们就来一起了解下迪米特法则带给我们的一些启示。\n                    </p>\n                    <h3 data-nodeid=\"945\">什么是迪米特法则</h3>\n                    <p data-nodeid=\"2359\" class=\"te-preview-highlight\">\n                      <strong data-nodeid=\"2364\"\n                        >迪米特法则（Law of Demeter，简称 LoD）</strong\n                      >\n                      是由 Ian Holland 于 1987 年提出来的，它的核心原则是：\n                    </p>\n\n                    <ul data-nodeid=\"947\">\n                      <li data-nodeid=\"948\">\n                        <p data-nodeid=\"949\">\n                          <strong data-nodeid=\"1032\"\n                            >一个类只应该与它直接相关的类通信</strong\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"950\">\n                        <p data-nodeid=\"951\">\n                          <strong data-nodeid=\"1037\"\n                            >每一个类应该知道自己需要的最少知识</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"952\">\n                      换句话说，在面向对象编程中，它要求任何一个对象（O）的方法（m），只应该调用以下对象：\n                    </p>\n                    <ul data-nodeid=\"953\">\n                      <li data-nodeid=\"954\">\n                        <p data-nodeid=\"955\">对象（O）自身；</p>\n                      </li>\n                      <li data-nodeid=\"956\">\n                        <p data-nodeid=\"957\">通过方法（m）的参数传入的对象；</p>\n                      </li>\n                      <li data-nodeid=\"958\">\n                        <p data-nodeid=\"959\">在方法（m）内创建的对象；</p>\n                      </li>\n                      <li data-nodeid=\"960\">\n                        <p data-nodeid=\"961\">组成对象（O）的对象；</p>\n                      </li>\n                      <li data-nodeid=\"962\">\n                        <p data-nodeid=\"963\">\n                          在方法（m）的范围内，可让对象（O）访问的全局变量。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"964\">\n                      前面\n                      <a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=710&amp;sid=20-h5Url-0&amp;buyFrom=2&amp;pageId=1pz4#/detail/pc?id=6864&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"1047\"\n                        >03</a\n                      >\n                      讲我们讲过的<strong data-nodeid=\"1053\"\n                        >分层架构，其实就可以被认为是迪米特法则在架构设计上的一种具体体现</strong\n                      >。在分层架构中，每一层的模块只能调用自己层中的模块，跳过某一层直接调用另一层中的模块其实就是违反了分层架构的原则。\n                    </p>\n                    <p data-nodeid=\"965\">\n                      虽然迪米特法则符合封装的原理，但是却和聚合原则相冲突，因为对象需要尽可能少地考虑其他对象，不能轻易地和其他对象自由组合。\n                    </p>\n                    <h3 data-nodeid=\"966\">如何实现满足迪米特法则的代码</h3>\n                    <p data-nodeid=\"967\">\n                      下面我们通过一个经典案例来看下如何去实现满足迪米特法则的代码。\n                    </p>\n                    <p data-nodeid=\"968\">\n                      假设一个在超市购物的场景：顾客选好商品后，到收银台找收银员结账。这里我们定义一个顾客类（Customer）、收银员类（PaperBoy\n                      ）、钱包类（Wallet ），示例代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">//顾客</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Customer</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String firstName;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String lastName;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> Wallet myWallet;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getFirstName</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> firstName;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getLastName</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> lastName;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Wallet <span class=\"hljs-title\">getWallet</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> myWallet;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//钱包类</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Wallet</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">float</span> value;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">float</span> <span class=\"hljs-title\">getTotalMoney</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> value;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setTotalMoney</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> newValue)</span> </span>{\n</div></li><li><div class=\"code-word\">        value = newValue;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addMoney</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> deposit)</span> </span>{\n</div></li><li><div class=\"code-word\">        value += deposit;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">subtractMoney</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> debit)</span> </span>{\n</div></li><li><div class=\"code-word\">        value -= debit;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//收银员</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Paperboy</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">charge</span><span class=\"hljs-params\">(Customer myCustomer, <span class=\"hljs-keyword\">float</span> payment)</span> </span>{\n</div></li><li><div class=\"code-word\">        payment = <span class=\"hljs-number\">2f</span>;\n</div></li><li><div class=\"code-word\">        Wallet theWallet = myCustomer.getWallet();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (theWallet.getTotalMoney() &gt; payment) {\n</div></li><li><div class=\"code-word\">            theWallet.subtractMoney(payment);\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">//钱不够的处理</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"970\">\n                      这里我们看一下当顾客开始进行结账操作（charge()）时，整段代码的具体实现逻辑是怎样的。\n                    </p>\n                    <ul data-nodeid=\"971\">\n                      <li data-nodeid=\"972\">\n                        <p data-nodeid=\"973\">\n                          收银员算出商品总价后说：“拿出钱包交给我！”\n                        </p>\n                      </li>\n                      <li data-nodeid=\"974\">\n                        <p data-nodeid=\"975\">\n                          顾客将钱包递给收银员，收银员开始检查钱包里的钱是否够支付。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"976\">\n                        <p data-nodeid=\"977\">\n                          如果钱够了，收银员拿出相应的钱并退还钱包给顾客；如果钱不够，收银员告诉顾客钱不够需要想办法。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"978\">\n                      虽然这个场景在现实中不会发生，但是对于这里的收银员类\n                      PaperBoy 来说，直接调用 Wallet\n                      显然是不满足迪米特法则的，因为 Wallet 是属于 Customer\n                      的内部成员——组成对象（O）的对象。\n                    </p>\n                    <p data-nodeid=\"979\">\n                      当我们理解了迪米特法则后，要考虑的就应该是<strong\n                        data-nodeid=\"1072\"\n                        >如何减少顾客和收银员之间的直接耦合</strong\n                      >。而这里，<strong data-nodeid=\"1073\"\n                        >通过钱这个要素来作为中间层进行解耦</strong\n                      >就是非常合适的选择。所以，在考虑收银员的角色时，就不应该去管钱包里的钱够不够，而应该是负责判断有没有收到足够的钱；同时，对于顾客角色，应该让他自己管好自己的钱包，只负责判断要支付多少钱。这样，顾客和收银员就不会因为钱包的职责划分不清而耦合在一起了。\n                    </p>\n                    <p data-nodeid=\"980\">接下来，我们来看看如何修改代码。</p>\n                    <p data-nodeid=\"981\">\n                      首先，我们将顾客“获取钱包”的动作修改为“支付账单”，代码修改前后对比如下图：\n                    </p>\n                    <p data-nodeid=\"982\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/10/CioPOWBut06AebM0AAFHWNOSQK0109.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1078\"\n                      />\n                    </p>\n                    <div data-nodeid=\"983\">\n                      <p style=\"text-align: center\">\n                        将 getWallet() 方法重构为 pay() 方法\n                      </p>\n                    </div>\n                    <p data-nodeid=\"984\">\n                      这里我们将顾客支付这个动作封装成方法 pay\n                      单独拆出来，并将收银员对于钱是否足够的判断动作交还给顾客，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">float</span> <span class=\"hljs-title\">pay</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">float</span> bill)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (myWallet != <span class=\"hljs-keyword\">null</span>) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (myWallet.getTotalMoney() &gt; bill) {\n</div></li><li><div class=\"code-word\">                myWallet.subtractMoney(bill);\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-keyword\">return</span> bill;\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"986\">\n                      其次，再将收银员“获取顾客钱包”的动作，修改为“收取顾客支付的钱并和账单比对”，代码对比如下图：\n                    </p>\n                    <p data-nodeid=\"987\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/33/08/Cgp9HWBut1aACv0sAAEPvcHMt_s946.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1083\"\n                      />\n                    </p>\n                    <div data-nodeid=\"988\">\n                      <p style=\"text-align: center\">\n                        charge() 方法中的关注点发生改变\n                      </p>\n                    </div>\n                    <p data-nodeid=\"989\">\n                      这里收银员的动作就从获取钱包变为根据收到的钱进行判断的动作，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PaperBoy</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">charge</span><span class=\"hljs-params\">(Customer myCustomer, <span class=\"hljs-keyword\">float</span> payment {\n</span></span></div></li><li><div class=\"code-word\">        payment = <span class=\"hljs-number\">2</span>f; // “我要收取<span class=\"hljs-number\">2</span>元!”\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">float</span> paidAmount = myCustomer.pay(payment);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (paidAmount == payment) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 说声谢谢，欢迎下次光临</span>\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 可以稍后再来</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"991\">\n                      到此，我们就利用迪米特法则顺利地实现了代码的解耦。\n                    </p>\n                    <p data-nodeid=\"992\">\n                      你发现没，使用迪米特法则后，<strong data-nodeid=\"1091\"\n                        >不仅降低了代码的耦合，还提高了代码的重用性</strong\n                      >。即使未来顾客不想用现金支付，改用微信支付、找朋友代付等，都不会影响收银员的行为。\n                    </p>\n                    <h3 data-nodeid=\"993\">应用迪米特法则时需要注意的问题</h3>\n                    <p data-nodeid=\"994\">\n                      虽然应用迪米特法则有很多好处，但是迪米特法则因为<strong\n                        data-nodeid=\"1098\"\n                        >太过于关注局部的简化</strong\n                      >，而容易导致别的问题出现。\n                    </p>\n                    <p data-nodeid=\"995\">\n                      <strong data-nodeid=\"1103\"\n                        >问题一：容易为了简化局部而忽略整体的简化。</strong\n                      >\n                      迪米特法则在优化局部时很有效，因为会做一定程度的信息隐藏，但同时这也是它最大的劣势。因为太过于关注每个类之间的直接关系，往往会让更大类之间的关系变得复杂，比如，容易造成超大类。在类对象中加入很多其他类，这样并没有违反迪米特法则（与直接相关的类耦合，没有关注职责分离），但是随着其他类与更多类发生耦合后，最开始的类的关系其实已经变得非常庞大了。\n                    </p>\n                    <p data-nodeid=\"996\">\n                      <strong data-nodeid=\"1108\"\n                        >问题二：拆分时容易引入很多过小的中间类和方法。</strong\n                      >\n                      迪米特法则本质上是在对类和方法做隔离，虽然它判断的标准是对象间的直接关系，但是对这个直接关系并没有一个非常好的衡量标准，在实际的开发中，基本上是依据程序员自己的经验来进行判断。于是，我们经常能在代码里看见一些接口的实现功能只是调用了另一个方法的情况，这其实就是因为过多的隔离带来的中间适配，适配就会产生很多中间类和方法，甚至有的方法没有任何逻辑，只是做了一次数据透传，为的就是避免直接耦合。\n                    </p>\n                    <p data-nodeid=\"997\">\n                      <strong data-nodeid=\"1113\"\n                        >问题三：不同模块之间的消息传递效率可能会降低。</strong\n                      >\n                      比如，分层架构就是典型的例子，当 Controller 层想要调用 DAO\n                      层的模块时，如果遵循迪米特法则，保持层之间密切联系，那么就意味着需要跨越很多中间层中的模块才行，这样消息传递效率自然会变低。\n                    </p>\n                    <h3 data-nodeid=\"998\">扩展：面向切面编程（AOP）</h3>\n                    <p data-nodeid=\"999\">\n                      我们都知道，面向切面编程（Aspect Oriented\n                      Programming，简称 AOP）在面试中是高频问题之一，尤其对于\n                      Java 程序员来说，AOP 不仅是 Spring\n                      框架的核心功能，还是在业务中降低耦合性的有效手段之一。\n                    </p>\n                    <p data-nodeid=\"1000\">\n                      <strong data-nodeid=\"1119\"\n                        >面向切面编程，简单来说，就是可以在不修改已有程序代码功能的前提下给程序动态添加功能的一种技术。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1001\">\n                      如果说迪米特法则是在<strong data-nodeid=\"1129\"\n                        >程序设计时（静态）</strong\n                      >\n                      降低代码耦合的方法的话，那么面向切面编程就是在<strong\n                        data-nodeid=\"1130\"\n                        >程序运行期间（动态）</strong\n                      >\n                      降低代码耦合的方法。比如，我们熟知的在 Spring\n                      框架中大量使用的 AspectJ\n                      工具就是面向切面编程的一种最佳实践。\n                    </p>\n                    <p data-nodeid=\"1002\">\n                      不过，这里尤其要注意，面向切面编程（AOP）和面向对象编程（OOP）虽然最终想要达到的目的相同，都是降低代码耦合性，但关注点却是截然不同的。这也是很多人在面试或设计时容易搞混淆的地方。\n                    </p>\n                    <p data-nodeid=\"1003\">\n                      这里我们结合具体的例子来说明一下。对“会员用户”这个业务单元进行封装时，使用\n                      OOP\n                      思想，你会自然建立一个“Member”类，并在其中封装会员用户对应的属性和行为；而如果使用\n                      AOP\n                      思想，你会发现使用“Member”无法统一属性和行为，因为不同的会员可能有不同的偏好属性和行为。同样，对于“性能统计”这个统一的动作来说，使用\n                      AOP 会很方便，而使用 OOP\n                      封装又会变成每一个类都要加一个性能统计的动作，变得过于累赘。\n                    </p>\n                    <p data-nodeid=\"1004\">\n                      从以上例子你可能已经发现，面向切面编程（AOP）和面向对象编程（OOP）这两种设计思想有着本质的差异。OOP\n                      强调对象内在的自洽性，更适合<strong data-nodeid=\"1142\"\n                        >业务功能</strong\n                      >，比如商品、订单、会员。而对于<strong data-nodeid=\"1143\"\n                        >统一的行为动作</strong\n                      >，如日志记录、性能统计、权限控制、事务处理等，使用 AOP\n                      则更合适，通过关注系统本身的行为，而不去影响功能业务逻辑的实现和演进。\n                    </p>\n                    <h3 data-nodeid=\"1005\">总结</h3>\n                    <p data-nodeid=\"1006\">\n                      <strong data-nodeid=\"1153\"\n                        >迪米特法则又叫最少知识原则</strong\n                      >，核心思想是<strong data-nodeid=\"1154\"\n                        >通过减少和不必要的类进行通信来降低代码耦合</strong\n                      >，在编程中可以用来指导对象间如何正确地协作。\n                    </p>\n                    <p data-nodeid=\"1007\">\n                      不过在我看来，在真实的软件开发中，你<strong\n                        data-nodeid=\"1160\"\n                        >应该将迪米特法则作为一个参考原则而不是绝对原则，因为有时过度低耦合反而会带来更多的问题</strong\n                      >。比如，只有一个人维护的项目，却硬要搞成几十个微服务模块的模块设计，结果不仅导致维护复杂性增高，而且系统也会变得更脆弱。降低耦合可以作为一个演进的目标，但不能每时每刻都要求做到低耦合。\n                    </p>\n                    <p data-nodeid=\"1008\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/10/CioPOWBut3WATH18AAXclhpQmms828.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"1163\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1009\">\n                      除了不过度使用迪米特法则外，你在学习它时还要抓住另一个关键词：<strong\n                        data-nodeid=\"1169\"\n                        >最少知识</strong\n                      >。最少知识，可以说是提升执行效率最好的方法之一，因为有时知道的信息越多，反而决策越困难，执行效率也越低，所以有时你得控制自己在设计对象时的知识范围，避免过多知识引起不必要的耦合发生。\n                    </p>\n                    <h3 data-nodeid=\"1010\">课后思考</h3>\n                    <p data-nodeid=\"1011\">\n                      迪米特法则虽然能够有效降低代码耦合，但是有时却会增加很多不必要的中间类，你知道有什么设计模式是它的具体实现吗？\n                    </p>\n                    <p data-nodeid=\"1012\">\n                      欢迎留言分享，我会第一时间给你回复。\n                    </p>\n                    <p data-nodeid=\"1013\" class=\"\">\n                      在下一讲，我会接着与你分享“表达原则：如何让源代码成为一种逻辑线索？”的相关内容，记得按时来听课！\n                    </p>\n            "}