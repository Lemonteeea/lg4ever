{"title":"第26讲：常用的数据结构了解多少？","context":"\n                    <p data-nodeid=\"43964\">\n                      你好，我是你的前端课老师朱德龙，欢迎你和我一起学习第 26\n                      课时的内容：“常用的数据结构了解多少”。\n                    </p>\n                    <p data-nodeid=\"43965\">\n                      数据结构是计算机中组织和存储数据的特定方式，也是对基本数据类型的一种高级抽象，它描述了数据之间的关系，以及操作数据的方法。\n                    </p>\n                    <p data-nodeid=\"43966\">\n                      数据结构不仅是编程语言和算法的基础，对于前端工程师而言，也变得越来越重要。随着\n                      Web 应用的快速发展，前端工程师面临的场景也越来越复杂，无论\n                      React、Vue 这些框架，还是大型 Web\n                      应用，都离不开数据结构的支持。而且越来越多的公司也将数据结构列为面试考察点，所以掌握数据结构，是高级前端工程师的必备技能。\n                    </p>\n                    <p data-nodeid=\"43967\">\n                      这一课时我们就来分析最常用的 5\n                      种数据结构：数组、栈、队列、链表、树。\n                    </p>\n                    <h3 data-nodeid=\"43968\">数组</h3>\n                    <p data-nodeid=\"43969\">\n                      高级语言的原生数据类型一般都提供了数组类型，所以数组结构并不需要特别的实现方式。\n                    </p>\n                    <p data-nodeid=\"43970\">\n                      数组虽然看似简单，但基于它可以生成一些更复杂的数据结构，比如多维数组、栈、队列等，本课时如无特殊说明，数组都指代一维数组。\n                    </p>\n                    <p data-nodeid=\"43971\">\n                      数组的最大优势在于可以通过索引来快速访问特定的元素，尤其是在有序数组中，比如要在一个升序数组\n                      arr 中找到第 6 小的元素，那么可以直接通过下标 5 获取。\n                    </p>\n                    <p data-nodeid=\"43972\">\n                      大家在工作中对数组应该比较熟悉了，所以这里就不再详细介绍了，只介绍一下数组的实现原理。V8\n                      引擎将 JavaScript 数组分为两类：\n                    </p>\n                    <ul data-nodeid=\"43973\">\n                      <li data-nodeid=\"43974\">\n                        <p data-nodeid=\"43975\">\n                          FixedArray，使用连续的内存进行存储，可以使用索引直接定位，新创建的空数组默认为\n                          FixedArray 类型，当数组超过最大长度会进行动态地扩容；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"43976\">\n                        <p data-nodeid=\"43977\">\n                          HashTable，以哈希表的形式存储在内存空间里，存储地址不连续，与\n                          FixedArray 类型相比，性能相对较差。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"43978\">\n                      这两者之间在实际使用时可以相互转换：\n                    </p>\n                    <ul data-nodeid=\"43979\">\n                      <li data-nodeid=\"43980\">\n                        <p data-nodeid=\"43981\">\n                          FixedArray 转\n                          HashTable，当新增元素的索引值相对于数组长度大于等于\n                          1024 或者新容量 &gt;= 3 × 扩容后的容量 × 2；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"43982\">\n                        <p data-nodeid=\"43983\">\n                          HashTable 转 FixedArray，当 HashTable\n                          数组的元素可存放在 FixedArray 数组中且长度在 smi\n                          之间且仅节省了 50% 的空间时发生转换，其中 smi\n                          值在不同操作系统下有所不同。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"43984\">\n                      小结一下，FixedArray\n                      数组通过牺牲空间来提升操作效率，HashTable\n                      数组则相反，不必申请连续的空间，节省了内存，但需要付出效率变差的代价。\n                    </p>\n                    <h3 data-nodeid=\"43985\">栈</h3>\n                    <p data-nodeid=\"43986\">\n                      栈是一种操作受限的线性结构，限定只能在尾部进行插入和删除操作，尾部被称为栈顶，而头部称为栈底。向一个栈插入新元素又称作进栈、入栈或压栈，从一个栈删除元素又称作出栈或退栈。这种受限的操作方式让栈元素的入栈出栈遵循一种特殊的原则——先进后出（First\n                      In Last Out，FILO）。\n                    </p>\n                    <p data-nodeid=\"43987\">栈的应用非常广泛，这里列举 3 种：</p>\n                    <ul data-nodeid=\"43988\">\n                      <li data-nodeid=\"43989\">\n                        <p data-nodeid=\"43990\">\n                          浏览器的历史记录，它的前进、后退功能就是一个栈操作；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"43991\">\n                        <p data-nodeid=\"43992\">\n                          V8 中的函数执行过程采用的栈结构；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"43993\">\n                        <p data-nodeid=\"43994\">\n                          JavaScript\n                          在捕获代码异常时，详细信息会以调用栈的形式打印。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"43995\">\n                      栈可以通过数组来实现，下面的代码实现了一个栈结构：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Stack</span>(<span class=\"hljs-params\"></span>)</span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">var</span> _stack = [];\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>.push = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; _stack.push(element);\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>.pop = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> _stack.pop();\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>.top = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> _stack[_stack.length<span class=\"hljs-number\">-1</span>];\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>.isEmpty = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> _stack.length === <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> _stack.length;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>.clear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; _stack = [];\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"43997\">队列</h3>\n                    <p data-nodeid=\"43998\">\n                      队列和栈一样也是操作受限的线性结构，但和栈有所区别的是，队列可以在头部和尾部进行操作，但尾部只能插入，头部只能删除。这种受限的操作方式让队列元素的插入和删除遵循一种特殊的原则——<strong\n                        data-nodeid=\"44089\"\n                        >先进先出原则</strong\n                      >（First In First Out，FIFO）。\n                    </p>\n                    <p data-nodeid=\"43999\">\n                      JavaScript\n                      在处理异步操作时经常会用到队列，比如宏任务队列、微任务队列、回调函数队列。\n                    </p>\n                    <p data-nodeid=\"44000\">\n                      队列的实现也可以通过数组来实现，下面的代码实现了一个队列结构：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Queue</span>(<span class=\"hljs-params\"></span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> _queue = [];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">this</span>.enqueue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">element</span>)</span>{\n</div></li><li><div class=\"code-word\">    _queue.push(element)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">this</span>.dequeue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> _queue.shift()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">this</span>.front = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> _queue[<span class=\"hljs-number\">0</span>]\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">this</span>.back = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> _queue[_queue.length - <span class=\"hljs-number\">1</span>]\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">this</span>.clear = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    _queue = []\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">this</span>.isEmpty = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> _queue.length === <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> _queue.length\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"44002\">链表</h3>\n                    <p data-nodeid=\"44003\">\n                      链表是在存储空间上具有一定优势的线性结构。因为它的有序性是通过指针来实现的，即每个元素都有一个指向下一个元素的指针（链表末端元素可能指向\n                      null），所以它不需要连续的内存空间，从而可以节省内存的占用。例如\n                      React.js 的 Fiber 算法就是基于链表实现的。\n                    </p>\n                    <p data-nodeid=\"44004\">\n                      下面的代码实现了一个基础的链表，包括链表的查找、新增和删除功能。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">LinkedList</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">var</span> head = {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'head'</span>,\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-attr\">next</span>: <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>.find = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> currNode = head\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">while</span> (currNode.value !== item) {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; currNode = currNode.next\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> currNode\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>.insert = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value, pre</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> newNode = {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; value,\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; <span class=\"hljs-attr\">next</span>: <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> currNode = <span class=\"hljs-built_in\">this</span>.find(pre)\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; newNode.next = currNode.next\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; currNode.next = newNode\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>.remove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> prevNode = <span class=\"hljs-built_in\">this</span>.findPrev(item)\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> currNode = <span class=\"hljs-built_in\">this</span>.find(item)\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (prevNode.next !== <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; prevNode.next = prevNode.next.next\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; currNode.next = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">this</span>.findPrev = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> currNode = head\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">while</span> (currNode.next !== <span class=\"hljs-literal\">null</span> &amp;&amp; currNode.next.value !== item) {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; currNode = currNode.next\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> currNode\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44006\">\n                      栈、队列由于操作受限，无法像数组一样通过下标来访问，查找某个元素时只能逐个进行操作，操作效率并不算高。链表由于指针的存在，使得在操作效率方面有很大的提升空间。\n                    </p>\n                    <p data-nodeid=\"44007\">\n                      从指针的方向上考虑，既可以单向也可以双向，那么就可以形成具有两个指针的双向链表，还可以让指针的头尾相连，形成双向循环链表。在一个双向循环链表中查找元素，就可以同时往两个方向查找，这使得在查找速度方面会略优于单向循环链表。libuv\n                      中就使用到了双向循环链表来管理任务。\n                    </p>\n                    <p data-nodeid=\"44008\">\n                      从指针的数量上考虑，还可以通过增加指针的方式来提升操作效率，跳跃表就是这样一种基于链表的数据结构。\n                    </p>\n                    <p data-nodeid=\"44009\">\n                      下面是一个跳跃表实现原理的例子，在一个链表中建立了 3\n                      层指针。最下一层指针，跨 1 个元素链接；中间一层指针，跨 2\n                      个元素链接；上层指针，跨 4 个元素链接。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">1----------&gt;5----------&gt;9-&gt;null\n</div></li><li><div class=\"code-word\">1----&gt;3----&gt;5----&gt;7----&gt;9-&gt;null\n</div></li><li><div class=\"code-word\">1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9-&gt;null\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44011\">\n                      假设现在要在链表中找到数字 8，对于简单链表而言，需要查找 8\n                      次。而在上述跳跃表中，只需要 5 步：\n                    </p>\n                    <ol data-nodeid=\"44012\">\n                      <li data-nodeid=\"44013\">\n                        <p data-nodeid=\"44014\">\n                          使用上层指针，找到 5，8 比 5 大，继续；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44015\">\n                        <p data-nodeid=\"44016\">\n                          继续使用上层指针，找到 9，8 比 9 小，回退到\n                          5，并且指针层数下移；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44017\">\n                        <p data-nodeid=\"44018\">\n                          使用中层指针，找到 7，8 比 7 大，继续；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44019\">\n                        <p data-nodeid=\"44020\">\n                          使用中层指针，找到 9，8 比 9 小，回退到\n                          7，并且指针层数下移；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44021\">\n                        <p data-nodeid=\"44022\">使用下层指针，找到 8。</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"44023\">\n                      总的来说，跳跃表通过增加链表元素的冗余指针，使用了空间换时间的方式来提升操作效率。在著名的缓存数据库\n                      Redis 中就使用了跳跃表这种数据结构。\n                    </p>\n                    <h3 data-nodeid=\"44024\">树</h3>\n                    <p data-nodeid=\"44025\">\n                      树型数据结构在前面的课程中已多次提到，比如（虚拟）DOM\n                      树、抽象语法分析树，大家对于它应该都不陌生。总结起来，树就是有限节点组成一个具有层次关系的集合，因为它看起来非常像一棵倒着生长的树，根朝上叶朝下，所以命名为“树”。\n                    </p>\n                    <p data-nodeid=\"44026\">\n                      树根据结构不同，可以分为很多类，比如有序树（树中任意节点，比如，点的子节点之间有顺序关系）、二叉树（每个节点最多有\n                      2\n                      个子树）、满二叉树（除最后一层所有节点都有两个子节点）等。\n                    </p>\n                    <p data-nodeid=\"44027\">\n                      其中，二叉树是最简单且最基础的树。说它简单，是因为每个节点至多包含两个子节点；说它基础，是因为二叉树可以延伸出一些子类，比如二叉搜索树（BST）、平衡二叉搜索树（AVL）、红黑树（R/B\n                      Tree）等。\n                    </p>\n                    <p data-nodeid=\"44028\">\n                      所以我们重点分析二叉树的查询操作——遍历。\n                    </p>\n                    <p data-nodeid=\"44029\">\n                      树的遍历操作分为两类：<strong data-nodeid=\"44120\"\n                        >深度遍历</strong\n                      >和<strong data-nodeid=\"44121\">广度遍历</strong\n                      >，其中深度遍历按照遍历根节点的顺序不同又可以分为 3\n                      类：先序遍历、中序遍历和后序遍历。它们的遍历顺序如下：\n                    </p>\n                    <ul data-nodeid=\"44030\">\n                      <li data-nodeid=\"44031\">\n                        <p data-nodeid=\"44032\">\n                          先序遍历，根节点→左子树→右子树\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44033\">\n                        <p data-nodeid=\"44034\">\n                          中序遍历，左子树→根节点→右子树\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44035\">\n                        <p data-nodeid=\"44036\">\n                          后序遍历，左子树→右子树→根节点\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44037\">\n                        <p data-nodeid=\"44038\">广度遍历，逐层从左至右访问</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"44039\">\n                      实现深度遍历最简单的方式就是通过递归，下面是具体代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">// 先序遍历，根-&gt;左-&gt;右\n</div></li><li><div class=\"code-word\">function preOrder(node, result=[]) {\n</div></li><li><div class=\"code-word\">  if (!node) return\n</div></li><li><div class=\"code-word\">  result.push(node.value);\n</div></li><li><div class=\"code-word\">  preOrder(node.left, result);\n</div></li><li><div class=\"code-word\">  preOrder(node.right, result);\n</div></li><li><div class=\"code-word\">  return result;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">// 中序遍历，左-&gt;根-&gt;右\n</div></li><li><div class=\"code-word\">function inOrder(node, result=[]) {\n</div></li><li><div class=\"code-word\">  if (!node) return\n</div></li><li><div class=\"code-word\">  inOrder(node.left, result);\n</div></li><li><div class=\"code-word\">  result.push(node.value);\n</div></li><li><div class=\"code-word\">  inOrder(node.right, result);\n</div></li><li><div class=\"code-word\">  return result;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">// 后序遍历，左-&gt;右-&gt;根\n</div></li><li><div class=\"code-word\">function postOrder(node, result=[]) {\n</div></li><li><div class=\"code-word\">  if (!node) return\n</div></li><li><div class=\"code-word\">  postOrder(node.left, result);\n</div></li><li><div class=\"code-word\">  postOrder(node.right, result);\n</div></li><li><div class=\"code-word\">  result.push(node.value);\n</div></li><li><div class=\"code-word\">  return result;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"44041\">\n                      广度优先遍历的实现会稍稍复杂一些，因为每次访问节点时都要回溯到上一层的父节点，通过其指针进行访问。但每一层都是从左至右的遍历顺序，这种操作方式很符合队列的先进先出原则，所以可以通过队列来缓存遍历的节点，具体代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">breadthOrder</span>(<span class=\"hljs-params\">node</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span>(!node) <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">var</span> result = []\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">var</span> queue = []\n</div></li><li><div class=\"code-word\">&nbsp; queue.push(node)\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">while</span>(queue.length !== <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; node = queue.shift()\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; result.push(node.value)\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span>(node.left) queue.push(node.left)\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (node.right) queue.push(node.right)\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> result\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"44043\">总结</h3>\n                    <p data-nodeid=\"44044\">\n                      这一课时我们介绍了和前端最为贴合的 5\n                      种数据结构，包括数组、栈、队列、链表、树。讲解数组时，JavaScript\n                      引擎通过两种数据结构实现数组，包括 FixedArray 和\n                      HashTable，FixedArray 在时间上有优势，而 HashTable\n                      在空间上更有优势。\n                    </p>\n                    <p data-nodeid=\"44045\">\n                      栈和队列都是操作受限的数据结构，底层实现都可以借助数组，分别遵循\n                      FILO 和 FIFO\n                      原则。链表由于采用指针连接元素节点，所以可以使用不连续的内存地址，在空间上更有优势。链表有一些变种，包括循环链表、双向链表、双向循环链表及跳跃表，其中跳跃表通过增加指针，达到了空间换时间的效果，能增加查找效率。\n                    </p>\n                    <p data-nodeid=\"44046\">\n                      树是应用最广泛的非线性结构，子类很多，其中二叉树最为重要，对于其遍历方式需要重点掌握。\n                    </p>\n                    <p data-nodeid=\"44047\">\n                      对于前端工程师而言，数据结构的实用性是明显高于算法的，而且也是算法的基石。所以为了帮助大家巩固和理解，对于每种数据结构都精选了一道算法题：\n                    </p>\n                    <ul data-nodeid=\"44048\">\n                      <li data-nodeid=\"44049\">\n                        <p data-nodeid=\"44050\">\n                          数组，<a\n                            href=\"https://leetcode-cn.com/problems/3sum/\"\n                            data-nodeid=\"44136\"\n                            >三数之和</a\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44051\">\n                        <p data-nodeid=\"44052\">\n                          栈，<a\n                            href=\"https://leetcode-cn.com/problems/valid-parentheses/\"\n                            data-nodeid=\"44140\"\n                            >有效的括号</a\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44053\">\n                        <p data-nodeid=\"44054\">\n                          队列，<a\n                            href=\"https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/\"\n                            data-nodeid=\"44144\"\n                            >滑动窗口最大值</a\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44055\">\n                        <p data-nodeid=\"44056\">\n                          链表，<a\n                            href=\"https://leetcode-cn.com/problems/linked-list-cycle/\"\n                            data-nodeid=\"44148\"\n                            >环形链表</a\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"44057\">\n                        <p data-nodeid=\"44058\">\n                          树，<a\n                            href=\"https://leetcode-cn.com/problems/same-tree/\"\n                            data-nodeid=\"44152\"\n                            >相同的树</a\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"44059\">\n                      <a\n                        href=\"https://github.com/yalishizhude/course/tree/master/02\"\n                        data-nodeid=\"44155\"\n                        >可点击这里查看答案</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"44742\" class=\"\">\n                      OK，这一课时就讲到这里啦，如果你觉得这个内容对你有所启发，欢迎分享给你的朋友或者同事探讨学习。下一课时我将分享算法相关的内容，记得按时来听课哈。\n                    </p>\n            "}