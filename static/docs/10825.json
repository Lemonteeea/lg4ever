{"title":"19 | 插槽：如何实现内容分发？","context":"\n                    <p data-nodeid=\"217312\">\n                      前面一节课我们学习了\n                      Props，使用它我们可以让组件支持不同的配置来实现不同的功能。\n                    </p>\n\n                    <p data-nodeid=\"216468\">\n                      不过，有些时候我们希望子组件模板中的部分内容可以定制化，这个时候使用\n                      Props 就显得不够灵活和易用了。因此，Vue.js 受到 Web\n                      Component\n                      草案的启发，通过插槽的方式实现内容分发，它允许我们在父组件中编写\n                      DOM 并在子组件渲染时把 DOM\n                      添加到子组件的插槽中，使用起来非常方便。\n                    </p>\n                    <p data-nodeid=\"216469\">\n                      在分析插槽的实现前，我们先来简单回顾一下插槽的使用方法。\n                    </p>\n                    <h3 data-nodeid=\"216470\">插槽的用法</h3>\n                    <p data-nodeid=\"216471\">\n                      举个简单的例子，假设我们有一个 TodoButton 子组件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;button <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"todo-button\"</span>&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">&lt;/button&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"219599\">\n                      然后我们在父组件中可以这么使用 TodoButton 组件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;todo-button&gt;\n</div></li><li><div class=\"code-word\">  &lt;!-- 添加一个字体图标 --&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon icon-plus\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">  Add todo\n</div></li><li><div class=\"code-word\">&lt;/todo-button&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"220087\">\n                      其实就是在 todo-button 的标签内部去编写插槽中的 DOM\n                      内容，最终 TodoButton 组件渲染的 HTML 是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;button <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"todo-button\"</span>&gt;\n</div></li><li><div class=\"code-word\">  &lt;!-- 添加一个字体图标 --&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon icon-plus\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">  Add todo\n</div></li><li><div class=\"code-word\">&lt;/button&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"221051\">\n                      这个例子就是最简单的普通插槽的用法，有时候我们希望子组件可以有多个插槽，再举个例子，假设我们有一个布局组件\n                      Layout，定义如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"layout\"</span>&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"header\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"footer\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"221524\">\n                      我们在 Layout\n                      组件中定义了多个插槽，并且其中两个插槽标签还添加了 name\n                      属性（没有设置 name 属性则默认 name 是\n                      default），然后我们在父组件中可以这么使用 Layout 组件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:header</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{ header }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:default</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ main }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">     \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:footer</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ footer }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span>  \n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    data (){\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">header</span>: <span class=\"hljs-string\">'Here might be a page title'</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">main</span>: <span class=\"hljs-string\">'A paragraph for the main content.'</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">footer</span>: <span class=\"hljs-string\">'Here\\'s some contact info'</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"221994\">\n                      这里使用 template 以及 v-slot 指令去把内部的 DOM\n                      分发到子组件对应的插槽中，最终 Layout 组件渲染的 HTML\n                      如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"layout\"</span>&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Here might be a page title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Here's some contact info<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"222461\">\n                      这个例子就是命名插槽的用法，它实现了在一个组件中定义多个插槽的需求。另外我们需要注意，父组件在插槽中引入的数据，它的作用域是父组件的。\n                    </p>\n                    <p data-nodeid=\"222462\">\n                      不过有些时候，我们希望父组件填充插槽内容的时候，使用子组件的一些数据，为了实现这个需求，Vue.js\n                      提供了作用域插槽。\n                    </p>\n                    <p data-nodeid=\"222463\">\n                      举个例子，我们有这样一个 TodoList 子组件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item, index) in items\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">:item</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    data() {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">items</span>: [<span class=\"hljs-string\">'Feed a cat'</span>, <span class=\"hljs-string\">'Buy milk'</span>]\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"222925\">\n                      注意，这里我们给 slot 标签加上了 item\n                      属性，目的就是传递子组件中的 item\n                      数据，然后我们可以在父组件中这么去使用 TodoList 组件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;todo-list&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:default</span>=<span class=\"hljs-string\">\"slotProps\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon icon-check\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"green\"</span>&gt;</span>{{ slotProps.item }}<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">todo-list</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"223382\" class=\"\">\n                      注意，这里的 v-slot 指令的值为\n                      slotProps，它是一个对象，它的值包含了子组件往 slot\n                      标签中添加的 props，在我们这个例子中，v-slot 就包含了 item\n                      属性，然后我们就可以在内部使用这个 slotProps.item 了，最终\n                      TodoList 子组件渲染的 HTML 如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;ul&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"(item, index) in items\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"icon icon-check\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"green\"</span>&gt;</span>{{ item }}<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"223836\">\n                      上述例子就是作用域插槽的用法，它实现了在父组件填写子组件插槽内容的时候，可以使用子组件传递数据的需求。\n                    </p>\n                    <p data-nodeid=\"223837\">\n                      这些就是插槽的一些常见使用方式，那么接下来，我们就来探究一下插槽背后的实现原理吧！\n                    </p>\n                    <h3 data-nodeid=\"223838\">插槽的实现</h3>\n                    <p data-nodeid=\"223839\">\n                      在分析具体的代码前，我们先来想一下插槽的特点，其实就是在父组件中去编写子组件插槽部分的模板，然后在子组件渲染的时候，把这部分模板内容填充到子组件的插槽中。\n                    </p>\n                    <p data-nodeid=\"223840\">\n                      所以在父组件渲染阶段，子组件插槽部分的 DOM\n                      是不能渲染的，需要通过某种方式保留下来，等到子组件渲染的时候再渲染。顺着这个思路，我们来分析具体实现的代码。\n                    </p>\n                    <p data-nodeid=\"223841\">\n                      我们还是通过例子的方式来分析插槽实现的整个流程，首先来看父组件模板：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;layout&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:header</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{{ header }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:default</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ main }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">v-slot:footer</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{{ footer }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/layout&gt;  \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"224287\">\n                      这里你可以借助模板编译工具看一下它编译后的 render 函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, withCtx <span class=\"hljs-keyword\">as</span> _withCtx, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache, $props, $setup, $data, $options</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_layout = _resolveComponent(<span class=\"hljs-string\">\"layout\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(_component_layout, <span class=\"hljs-literal\">null</span>, {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">header</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n</div></li><li><div class=\"code-word\">      _createVNode(<span class=\"hljs-string\">\"h1\"</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.header), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n</div></li><li><div class=\"code-word\">    ]),\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">default</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n</div></li><li><div class=\"code-word\">      _createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.main), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n</div></li><li><div class=\"code-word\">    ]),\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">footer</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n</div></li><li><div class=\"code-word\">      _createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.footer), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n</div></li><li><div class=\"code-word\">    ]),\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">_</span>: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">  }))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"224725\">\n                      前面我们学习过 createBlock，它的内部通过执行 createVNode\n                      创建了 vnode，注意 createBlock\n                      函数的第三个参数，它表示创建的 vnode\n                      子节点，在我们这个例子中，它是一个对象。\n                    </p>\n                    <p data-nodeid=\"224726\">\n                      通常，我们创建 vnode\n                      传入的子节点是一个数组，那么对于对象类型的子节点，它内部做了哪些处理呢？我们来回顾一下\n                      createVNode 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createVNode</span>(<span class=\"hljs-params\">type,props = null,children = null</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (props) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理 props 相关逻辑，标准化 class 和 style</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 对 vnode 类型信息编码</span>\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建 vnode 对象</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> vnode = {\n</div></li><li><div class=\"code-word\">    type,\n</div></li><li><div class=\"code-word\">    props\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 其他一些属性</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 标准化子节点，把不同数据类型的 children 转成数组或者文本类型</span>\n</div></li><li><div class=\"code-word\">  normalizeChildren(vnode, children)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> vnode\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"225160\">\n                      其中，normalizeChildren 就是用来处理传入的参数\n                      children，我们来看一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">normalizeChildren</span> (<span class=\"hljs-params\">vnode, children</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> type = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { shapeFlag } = vnode\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (children == <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">    children = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isArray(children)) {\n</div></li><li><div class=\"code-word\">    type = <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* ARRAY_CHILDREN */</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> children === <span class=\"hljs-string\">'object'</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 标准化 slot 子节点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> ((shapeFlag &amp; <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> || shapeFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span>) &amp;&amp; children.default) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 处理 Teleport 的情况</span>\n</div></li><li><div class=\"code-word\">      normalizeChildren(vnode, children.default())\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 确定 vnode 子节点类型为 slot 子节点</span>\n</div></li><li><div class=\"code-word\">      type = <span class=\"hljs-number\">32</span> <span class=\"hljs-comment\">/* SLOTS_CHILDREN */</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> slotFlag = children._\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!slotFlag &amp;&amp; !(InternalObjectKey <span class=\"hljs-keyword\">in</span> children)) {\n</div></li><li><div class=\"code-word\">        children._ctx = currentRenderingInstance\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (slotFlag === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* FORWARDED */</span> &amp;&amp; currentRenderingInstance) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 处理类型为 FORWARDED 的情况</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (currentRenderingInstance.vnode.patchFlag &amp; <span class=\"hljs-number\">1024</span> <span class=\"hljs-comment\">/* DYNAMIC_SLOTS */</span>) {\n</div></li><li><div class=\"code-word\">          children._ = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* DYNAMIC */</span>\n</div></li><li><div class=\"code-word\">          vnode.patchFlag |= <span class=\"hljs-number\">1024</span> <span class=\"hljs-comment\">/* DYNAMIC_SLOTS */</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">          children._ = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* STABLE */</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isFunction(children)) {\n</div></li><li><div class=\"code-word\">    children = { <span class=\"hljs-attr\">default</span>: children, <span class=\"hljs-attr\">_ctx</span>: currentRenderingInstance }\n</div></li><li><div class=\"code-word\">    type = <span class=\"hljs-number\">32</span> <span class=\"hljs-comment\">/* SLOTS_CHILDREN */</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    children = <span class=\"hljs-built_in\">String</span>(children)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span>) {\n</div></li><li><div class=\"code-word\">      type = <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* ARRAY_CHILDREN */</span>\n</div></li><li><div class=\"code-word\">      children = [createTextVNode(children)]\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      type = <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* TEXT_CHILDREN */</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  vnode.children = children\n</div></li><li><div class=\"code-word\">  vnode.shapeFlag |= type\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"225590\">\n                      normalizeChildren 函数主要的作用就是标准化 children\n                      以及获取 vnode 的节点类型 shapeFlag。\n                    </p>\n                    <p data-nodeid=\"225591\">\n                      这里，我们重点关注插槽相关的逻辑。经过处理，vnode.children\n                      仍然是传入的对象数据，而 vnode.shapeFlag 会与 slot\n                      子节点类型 SLOTS_CHILDREN 进行<strong data-nodeid=\"225648\"\n                        >或</strong\n                      >运算，由于 vnode 本身的 shapFlag 是\n                      STATEFUL_COMPONENT，所以运算后的 shapeFlag 是\n                      SLOTS_CHILDREN | STATEFUL_COMPONENT。\n                    </p>\n                    <p data-nodeid=\"225592\">\n                      确定了 shapeFlag，会影响后续的 patch 过程，我们知道在\n                      patch 中会根据 vnode 的 type 和 shapeFlag\n                      来决定后续的执行逻辑，我们来回顾一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> patch = <span class=\"hljs-function\">(<span class=\"hljs-params\">n1, n2, container, anchor = <span class=\"hljs-literal\">null</span>, parentComponent = <span class=\"hljs-literal\">null</span>, parentSuspense = <span class=\"hljs-literal\">null</span>, isSVG = <span class=\"hljs-literal\">false</span>, optimized = <span class=\"hljs-literal\">false</span></span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 如果存在新旧节点, 且新旧节点类型不同，则销毁旧节点</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (n1 &amp;&amp; !isSameVNodeType(n1, n2)) {\n</div></li><li><div class=\"code-word\">    anchor = getNextHostNode(n1)\n</div></li><li><div class=\"code-word\">    unmount(n1, parentComponent, parentSuspense, <span class=\"hljs-literal\">true</span>)\n</div></li><li><div class=\"code-word\">    n1 = <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { type, shapeFlag } = n2\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">switch</span> (type) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> Text:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 处理文本节点</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> Comment:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 处理注释节点</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> Static:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 处理静态节点</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> Fragment:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 处理 Fragment 元素</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">default</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 处理普通 DOM 元素</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">6</span> <span class=\"hljs-comment\">/* COMPONENT */</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 处理组件</span>\n</div></li><li><div class=\"code-word\">        processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 处理 TELEPORT</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">128</span> <span class=\"hljs-comment\">/* SUSPENSE */</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 处理 SUSPENSE</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"226017\">\n                      这里由于 type 是组件对象，shapeFlag 满足<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"226058\"\n                        >shapeFlag&amp;6</code\n                      >的情况，所以会走到 processComponent\n                      的逻辑，递归去渲染子组件。\n                    </p>\n                    <p data-nodeid=\"226018\">\n                      至此，带有子节点插槽的组件与普通的组件渲染并无区别，还是通过递归的方式去渲染子组件。\n                    </p>\n                    <p data-nodeid=\"226019\">\n                      渲染子组件又会执行组件的渲染逻辑了，这个流程我们在前面的章节已经分析过，其中有一个\n                      setupComponent 的流程，我们来回顾一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setupComponent</span> (<span class=\"hljs-params\">instance, isSSR = false</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { props, children, shapeFlag } = instance.vnode\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 判断是否是一个有状态的组件</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> isStateful = shapeFlag &amp; <span class=\"hljs-number\">4</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化 props</span>\n</div></li><li><div class=\"code-word\">  initProps(instance, props, isStateful, isSSR)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化插槽</span>\n</div></li><li><div class=\"code-word\">  initSlots(instance, children)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 设置有状态的组件实例</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> setupResult = isStateful\n</div></li><li><div class=\"code-word\">    ? setupStatefulComponent(instance, isSSR)\n</div></li><li><div class=\"code-word\">    : <span class=\"hljs-literal\">undefined</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> setupResult\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"226424\">\n                      注意，这里的 instance.vnode 就是组件\n                      vnode，我们可以从中拿到子组件的实例、props 和 children\n                      等数据。setupComponent 执行过程中会通过 initSlots\n                      函数去初始化插槽，并传入 instance 和\n                      children，我们来看一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> initSlots = <span class=\"hljs-function\">(<span class=\"hljs-params\">instance, children</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (instance.vnode.shapeFlag &amp; <span class=\"hljs-number\">32</span> <span class=\"hljs-comment\">/* SLOTS_CHILDREN */</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> type = children._\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (type) {\n</div></li><li><div class=\"code-word\">      instance.slots = children\n</div></li><li><div class=\"code-word\">      def(children, <span class=\"hljs-string\">'_'</span>, type)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      normalizeObjectSlots(children, (instance.slots = {}))\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    instance.slots = {}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (children) {\n</div></li><li><div class=\"code-word\">      normalizeVNodeSlots(instance, children)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  def(instance.slots, InternalObjectKey, <span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"226822\">\n                      initSlots 的实现逻辑很简单，这里的 children\n                      就是前面传入的插槽对象数据，然后我们把它保留到\n                      instance.slots 对象中，后续我们就可以从 instance.slots\n                      拿到插槽的数据了。\n                    </p>\n                    <p data-nodeid=\"226823\">\n                      到这里，我们在子组件的初始化过程中就拿到由父组件传入的插槽数据了，那么接下来，我们就来分析子组件是如何把这些插槽数据渲染到页面上的吧。\n                    </p>\n                    <p data-nodeid=\"226824\">我们先来看子组件的模板：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"layout\"</span>&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"header\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"footer\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"227217\">\n                      这里你可以借助模板编译工具看一下它编译后的 render 函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { renderSlot <span class=\"hljs-keyword\">as</span> _renderSlot, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache, $props, $setup, $data, $options</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"layout\"</span> }, [\n</div></li><li><div class=\"code-word\">    _createVNode(<span class=\"hljs-string\">\"header\"</span>, <span class=\"hljs-literal\">null</span>, [\n</div></li><li><div class=\"code-word\">      _renderSlot(_ctx.$slots, <span class=\"hljs-string\">\"header\"</span>)\n</div></li><li><div class=\"code-word\">    ]),\n</div></li><li><div class=\"code-word\">    _createVNode(<span class=\"hljs-string\">\"main\"</span>, <span class=\"hljs-literal\">null</span>, [\n</div></li><li><div class=\"code-word\">      _renderSlot(_ctx.$slots, <span class=\"hljs-string\">\"default\"</span>)\n</div></li><li><div class=\"code-word\">    ]),\n</div></li><li><div class=\"code-word\">    _createVNode(<span class=\"hljs-string\">\"footer\"</span>, <span class=\"hljs-literal\">null</span>, [\n</div></li><li><div class=\"code-word\">      _renderSlot(_ctx.$slots, <span class=\"hljs-string\">\"footer\"</span>)\n</div></li><li><div class=\"code-word\">    ])\n</div></li><li><div class=\"code-word\">  ]))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"227605\">\n                      通过编译后的代码我们可以看出，子组件的插槽部分的 DOM\n                      主要通过 renderSlot 方法渲染生成的，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">renderSlot</span>(<span class=\"hljs-params\">slots, name, props = {}, fallback</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> slot = slots[name];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (openBlock(),\n</div></li><li><div class=\"code-word\">    createBlock(Fragment, { <span class=\"hljs-attr\">key</span>: props.key }, slot ? slot(props) : fallback ? fallback() : [], slots._ === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* STABLE */</span>\n</div></li><li><div class=\"code-word\">      ? <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* STABLE_FRAGMENT */</span>\n</div></li><li><div class=\"code-word\">      : <span class=\"hljs-number\">-2</span> <span class=\"hljs-comment\">/* BAIL */</span>));\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"227990\">\n                      renderSlot 函数的第一个参数 slots 就是\n                      instance.slots，我们在子组件初始化的时候已经获得了这个\n                      slots 对象，第二个参数是 name。\n                    </p>\n                    <p data-nodeid=\"227991\">\n                      renderSlot 的实现也很简单，首先根据第二个参数 name\n                      获取对应的插槽函数 slot，接着通过 createBlock 创建了 vnode\n                      节点，注意，它的类型是一个 Fragment，children 是执行 slot\n                      插槽函数的返回值。\n                    </p>\n                    <p data-nodeid=\"227992\">\n                      下面我们来看看 slot 函数长啥样，先看一下示例中的\n                      instance.slots 的值：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">header</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n</div></li><li><div class=\"code-word\">_createVNode(<span class=\"hljs-string\">\"h1\"</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.header), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n</div></li><li><div class=\"code-word\">]),\n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">default</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n</div></li><li><div class=\"code-word\">_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.main), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n</div></li><li><div class=\"code-word\">]),\n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">footer</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n</div></li><li><div class=\"code-word\">_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.footer), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n</div></li><li><div class=\"code-word\">]),\n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">_</span>: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"229118\" class=\"\">\n                      那么对于 name 为 header，它的值就是：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">_withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n</div></li><li><div class=\"code-word\">  _createVNode(<span class=\"hljs-string\">\"h1\"</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.header), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n</div></li><li><div class=\"code-word\">])\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"228747\">\n                      它是执行 _withCtx 函数后的返回值，我们接着看 withCtx\n                      函数的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">function withCtx(fn, ctx = currentRenderingInstance) {\n</div></li><li><div class=\"code-word\">  if (!ctx)\n</div></li><li><div class=\"code-word\">    return fn\n</div></li><li><div class=\"code-word\">  return function renderFnWithContext() {\n</div></li><li><div class=\"code-word\">    const owner = currentRenderingInstance\n</div></li><li><div class=\"code-word\">    setCurrentRenderingInstance(ctx)\n</div></li><li><div class=\"code-word\">    const res = fn.apply(null, arguments)\n</div></li><li><div class=\"code-word\">    setCurrentRenderingInstance(owner)\n</div></li><li><div class=\"code-word\">    return res\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"228749\">\n                      withCtx 的实现很简单，它支持传入一个函数 fn\n                      和执行的上下文变量 ctx，它的默认值是\n                      currentRenderingInstance，也就是执行 render\n                      函数时的当前组件实例。\n                    </p>\n                    <p data-nodeid=\"228750\">\n                      withCtx\n                      会返回一个新的函数，这个函数执行的时候，会先保存当前渲染的组件实例\n                      owner，然后把 ctx 设置为当前渲染的组件实例，接着执行\n                      fn，执行完毕后，再把之前的 owner 设置为当前组件实例。\n                    </p>\n                    <p data-nodeid=\"228751\">\n                      这么做就是为了保证在子组件中渲染具体插槽内容时，它的渲染组件实例是父组件实例，这样也就保证它的数据作用域也是父组件的了。\n                    </p>\n                    <p data-nodeid=\"228752\">\n                      所以对于 header 这个 slot，它的 slot\n                      函数的返回值是一个数组，如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">[\n</div></li><li><div class=\"code-word\">  _createVNode(<span class=\"hljs-string\">\"h1\"</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.header), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)\n</div></li><li><div class=\"code-word\">]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"230521\">\n                      我们回到 renderSlot 函数，最终插槽对应的 vnode\n                      渲染就变成了如下函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">createBlock(Fragment, { <span class=\"hljs-attr\">key</span>: props.key }, [_createVNode(<span class=\"hljs-string\">\"h1\"</span>, <span class=\"hljs-literal\">null</span>, _toDisplayString(_ctx.header), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>)], <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* STABLE_FRAGMENT */</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"231234\">\n                      我们知道，createBlock 内部是会执行 createVNode 创建\n                      vnode，vnode 创建完后，仍然会通过 patch 把 vnode\n                      挂载到页面上，那么对于插槽的渲染，patch\n                      过程又有什么不同呢？\n                    </p>\n                    <p data-nodeid=\"231235\">\n                      注意这里我们的 vnode 的 type 是 Fragement，所以在执行\n                      patch 的时候，会执行 processFragment\n                      逻辑，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> processFragment = <span class=\"hljs-function\">(<span class=\"hljs-params\">n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(<span class=\"hljs-string\">''</span>))\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(<span class=\"hljs-string\">''</span>))\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> { patchFlag } = n2\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (patchFlag &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">    optimized = <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (n1 == <span class=\"hljs-literal\">null</span>) {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">//插入节点</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 先在前后插入两个空文本节点</span>\n</div></li><li><div class=\"code-word\">    hostInsert(fragmentStartAnchor, container, anchor)\n</div></li><li><div class=\"code-word\">    hostInsert(fragmentEndAnchor, container, anchor)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 再挂载子节点</span>\n</div></li><li><div class=\"code-word\">    mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized)\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 更新节点</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"231939\">\n                      我们只分析挂载子节点的过程，所以 n1 的值为 null，n2\n                      就是我们前面创建的 vnode 节点，它的 children 是一个数组。\n                    </p>\n                    <p data-nodeid=\"231940\">\n                      processFragment 函数首先通过 hostInsert\n                      在容器的前后插入两个空文本节点，然后在以尾文本节点作为参考锚点，通过\n                      mountChildren 把 children 挂载到 container 容器中。\n                    </p>\n                    <p data-nodeid=\"231941\">\n                      至此，我们就完成了子组件插槽内容的渲染。可以看到，插槽的实现实际上就是一种延时渲染，把父组件中编写的插槽内容保存到一个对象上，并且把具体渲染\n                      DOM\n                      的代码用函数的方式封装，然后在子组件渲染的时候，根据插槽名在对象中找到对应的函数，然后执行这些函数做真正的渲染。\n                    </p>\n                    <h3 data-nodeid=\"231942\">总结</h3>\n                    <p data-nodeid=\"231943\">\n                      好的，到这里我们这一节课的学习就结束啦。希望你能了解插槽的实现原理，知道父组件和子组件在实现插槽\n                      feature 的时候各自做了哪些事情。\n                    </p>\n                    <p data-nodeid=\"231944\">\n                      最后，给你留一道思考题目，作用域插槽是如何实现子组件数据传递的？欢迎你在留言区与我分享。\n                    </p>\n                    <blockquote data-nodeid=\"231945\">\n                      <p data-nodeid=\"231946\">\n                        本节课的相关代码在源代码中的位置如下：<br />\n                        packages/runtime-core/src/componentSlots.ts<br />\n                        packages/runtime-core/src/vnode.ts<br />\n                        packages/runtime-core/src/renderer.ts<br />\n                        packages/runtime-core/src/helpers/withRenderContext.ts\n                      </p>\n                    </blockquote>\n            "}