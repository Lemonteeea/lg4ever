{"title":"13 | 案例：如何基于 Consul 给微服务添加服务注册与发现？","context":"\n                    <p data-nodeid=\"556\" class=\"\">\n                      今天我和你分享的是如何基于 Consul\n                      给微服务添加服务注册与发现的案例。\n                    </p>\n\n                    <p data-nodeid=\"3\">\n                      微服务架构按业务划分微服务的特点，使得原本聚合了大量业务模块的单体应用被划分为众多的微服务。而大量微服务的出现，势必会带来运维管理上的巨大挑战，于是<strong\n                        data-nodeid=\"67\"\n                        >服务注册与发现这类自动化策略应运而生</strong\n                      >。但是引入服务注册与发现就可能引入额外技术栈，增加系统总体的复杂性，比如会引入中心化的服务注册与发现中心这类基础组件。\n                    </p>\n                    <p data-nodeid=\"4\">\n                      在本课时，我们将基于 Consul 给微服务添加<strong\n                        data-nodeid=\"73\"\n                        >服务注册与发现</strong\n                      >的能力。首先，我们会基于 Kubernetes\n                      搭建一个接近生产环境的 Consul 集群；接着再基于搭建好的\n                      Consul 集群，为我们的微服务添加服务注册与发现的基本能力。\n                    </p>\n                    <h3 data-nodeid=\"924\" class=\"\">Consul 集群</h3>\n\n                    <p data-nodeid=\"6\">\n                      在上一课时，我们分别介绍了 Consul、ZooKeeper 和 Etcd 这 3\n                      种服务注册与发现组件，考虑到\n                      <strong data-nodeid=\"80\"\n                        >Consul 开箱即用、专注于服务注册与发现</strong\n                      >的特点，我们就选取 Consul\n                      作为后续实践使用的服务注册与发现中心组件。\n                    </p>\n                    <p data-nodeid=\"7\">\n                      Consul 集群中存在\n                      <strong data-nodeid=\"90\">Server</strong> 和\n                      <strong data-nodeid=\"91\">Client</strong>\n                      两种角色节点，Server 中保存了整个集群的数据，而 Client\n                      负责对本地的服务进行健康检查和转发请求到 Server\n                      中，并且也保存有注册到本节点的服务实例数据。\n                    </p>\n                    <p data-nodeid=\"1652\">\n                      关于 Server 节点，一般建议你部署 3 个或者 5\n                      个节点，但并不是越多越好，因为这会增加数据同步的成本。Server\n                      节点之间存在<strong data-nodeid=\"1659\"\n                        >一个 Leader 和多个 Follower</strong\n                      >，通过 Raft 协议维护 Server\n                      之间数据的强一致性。一个典型的 Consul\n                      集群和微服务的部署方式如下：\n                    </p>\n                    <p data-nodeid=\"2031\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/40/CB/Ciqc1F8zngqAbS-SAAF6iFt7jEw242.png\"\n                        alt=\"1.png\"\n                        data-nodeid=\"2035\"\n                      />\n                    </p>\n                    <div data-nodeid=\"2400\" class=\"\">\n                      <p style=\"text-align: center\">\n                        Consul 集群和微服务部署图\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"11\">\n                      在上述图片的 Consul 集群中，存在 3 个 Server\n                      节点，它们分别部署在不同的服务节点上。我们假设 Node2\n                      节点中的 Server\n                      <strong data-nodeid=\"107\"\n                        >被选举为 Leader，那么其他节点上的 Server\n                        则需要与其同步数据</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"12\">\n                      在Node4、Node5 和 Node6 节点中分别部署了 Consul\n                      Client，各节点中的各个微服务通过它进行服务注册。Consul\n                      Client 会将注册信息通过 RPC 调用转发给 Consul\n                      Server，这些服务实例元数据会保存到 Server\n                      中的各个节点，并通过 Raft 协议保证数据的强一致性；同时\n                      Consul Client\n                      会对注册到自身的微服务进行健康检查，并将检查到的服务状态同步到\n                      Server 中。\n                    </p>\n                    <p data-nodeid=\"13\">\n                      其实服务实例也可以直接注册到 Consul\n                      Server，但是每个节点的注册服务实例数量存在上限，因为节点还负责定时对服务实例进行健康检查，因此在服务实例数量较多的时候，建议使用\n                      Consul Client 分担 Consul Server 的处理工作。\n                    </p>\n                    <p data-nodeid=\"14\">\n                      当微服务间要发起远程调用时，比如位于 Node5 节点的 Service\n                      C 想要调用 Service B 服务，它将首先向节点上的 Consul\n                      Client 根据服务名请求 Service B 的服务实例信息列表，Consul\n                      Client 会把请求转发到 Consul Server 中，查询 Service B\n                      的服务实例信息列表返回。接着 Service C\n                      根据一定的负载均衡策略，从中选择合适的 Service B 的实例 IP\n                      和端口发起远程调用。\n                    </p>\n                    <p data-nodeid=\"15\">\n                      接下来我们就<strong data-nodeid=\"116\"\n                        >基于 Kubernetes 搭建一个接近生产环境的 Consul\n                        集群，包含 3 个 Server 节点和 1 个 Client 节点</strong\n                      >。考虑到 Pod 的意外重启会导致 Consul Server IP\n                      的变化，我们首先为 Consul Server 声明一个\n                      Service，consul-server-service.yaml 定义如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-server</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-server</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">selector:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-server</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">ports:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8500</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">8500</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">https</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8443</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">8443</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">rpc</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8400</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">8400</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">....</span> <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">其他暴露的端口</span> \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17\">\n                      Consul Server 对外暴露了诸多接口，包括响应 HTTP 和 HTTPS\n                      请求的 8500 和 8433 端口等，Service\n                      方式使得这些端口在集群内可通过 ClusterIP:Port 的方式访问。\n                    </p>\n                    <p data-nodeid=\"18\">\n                      当 Consul Server 所在的 Pod 重启后，新启动的 Consul Server\n                      需要重新加入集群中，这就需要知道 Leader 节点\n                      IP。对此，我们可以使用 Kubernetes 提供的 DNS 功能访问不同\n                      Pod 的 Consul Server，并通过 StatefulSets Controller 管理\n                      Consul Server，使得每个 Consul Server Pod 有固定的标识用于\n                      DNS 解析。通过这样的方式能够使得 Consul Server\n                      集群可以自动处理 Leader 选举和新节点加入的问题，充分利用\n                      Kubernetes 的自动伸缩和调度能力。consul-server.yaml\n                      配置如下:\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">StatefulSet</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-server</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-server</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">serviceName:</span> <span class=\"hljs-string\">consul-server</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">selector:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">matchLabels:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-server</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">3</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">template:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-server</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">terminationGracePeriodSeconds:</span> <span class=\"hljs-number\">10</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">containers:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">consul:latest</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">imagePullPolicy:</span> <span class=\"hljs-string\">IfNotPresent</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">args:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"agent\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-server\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-bootstrap-expect=3\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-ui\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-data-dir=/consul/data\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-bind=0.0.0.0\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-client=0.0.0.0\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-advertise=$(POD_IP)\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-retry-join=consul-server-0.consul-server.$(NAMESPACE).svc.cluster.local\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-retry-join=consul-server-1.consul-server.$(NAMESPACE).svc.cluster.local\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-retry-join=consul-server-2.consul-server.$(NAMESPACE).svc.cluster.local\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-domain=cluster.local\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-disable-host-node-id\"</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">env:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_IP</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">valueFrom:</span> \n</div></li><li><div class=\"code-word\">                <span class=\"hljs-attr\">fieldRef:</span> \n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">status.podIP</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">NAMESPACE</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">valueFrom:</span> \n</div></li><li><div class=\"code-word\">                <span class=\"hljs-attr\">fieldRef:</span> \n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">ports:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">8500</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">8400</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">rpc</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">8443</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">https-port</span> \n</div></li><li><div class=\"code-word\">           <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">...其他端口</span> \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"20\">\n                      上述配置中指定了 Controller 为 StatefulSet，这使得被管理的\n                      Pod 具备固定的命名规则，可用于 DNS 解析，它们的 Pod\n                      名称分别为 consul-server-0、consul-server-1 和\n                      consul-server-2。配置还通过 -retry-join\n                      选项让新加入的节点逐一尝试加入每一个 Consul\n                      Server，直到发现真正的 Leader 节点并加入 Consul Server\n                      集群中。\n                    </p>\n                    <p data-nodeid=\"21\">\n                      为了方便在 Kubernetes 集群外访问 Consul UI，可以通过\n                      NodePort 暴露 Consul Server 的 8500 端口，如下\n                      consul-server-http.yaml 配置所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Service</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-server-http</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">selector:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-server</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">NodePort</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">ports:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">protocol:</span> <span class=\"hljs-string\">TCP</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">8500</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">targetPort:</span> <span class=\"hljs-number\">8500</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">nodePort:</span> <span class=\"hljs-number\">30098</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-server-tcp</span> \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3123\">\n                      依次通过 kubectl apply -f {yaml} 启动上述 3 个 yaml\n                      配置后，即可在集群外通过 30098 端口访问 Consul\n                      UI，结果图如下：\n                    </p>\n                    <p data-nodeid=\"3495\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/40/CB/Ciqc1F8znluACJ3GAAEJfZ-XRZ8007.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"3499\"\n                      />\n                    </p>\n                    <div data-nodeid=\"9409\" class=\"\">\n                      <p style=\"text-align: center\">Consul Server 部署效果图</p>\n                    </div>\n                    <p></p>\n\n                    <p data-nodeid=\"26\">\n                      从上图可以看到目前 Consul 集群中有 3 个 Consul\n                      Server，带小星星的 consul-server-0 为 Leader\n                      节点。在前面介绍 Consul 集群的部署图时，为方便 Consul\n                      Client\n                      对服务节点上的微服务进行管理，建议在每一个服务节点上部署\n                      Consul Client，对此我们可以通过 DaemonSet Controller\n                      的方式部署 Consul Client。\n                    </p>\n                    <p data-nodeid=\"27\">\n                      DaemonSet Controller 能够确保在集群所有的 Node\n                      中或者指定的 Node 中都运行一个副本 Pod。consul-client.yaml\n                      的配置如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">DaemonSet</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\"> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-client</span> \n</div></li><li><div class=\"code-word\"> <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-client</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">selector:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">matchLabels:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-client</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">template:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-client</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">volumes:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-data-dir</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">hostPath:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/data/consul/data</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">DirectoryOrCreate</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">containers:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">consul:latest</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">imagePullPolicy:</span> <span class=\"hljs-string\">IfNotPresent</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">args:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"agent\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-data-dir=/consul/data\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-bind=0.0.0.0\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-client=0.0.0.0\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-advertise=$(POD_IP)\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-retry-join=consul-server-0.consul-server.$(NAMESPACE).svc.cluster.local\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-retry-join=consul-server-1.consul-server.$(NAMESPACE).svc.cluster.local\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-retry-join=consul-server-2.consul-server.$(NAMESPACE).svc.cluster.local\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-domain=cluster.local\"</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">\"-disable-host-node-id\"</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">env:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">POD_IP</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">valueFrom:</span> \n</div></li><li><div class=\"code-word\">                <span class=\"hljs-attr\">fieldRef:</span> \n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">status.podIP</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">NAMESPACE</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">valueFrom:</span> \n</div></li><li><div class=\"code-word\">                <span class=\"hljs-attr\">fieldRef:</span> \n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">metadata.namespace</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">lifecycle:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">postStart:</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">exec:</span> \n</div></li><li><div class=\"code-word\">                <span class=\"hljs-attr\">command:</span> \n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/bin/sh</span> \n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-c</span> \n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">consul</span> <span class=\"hljs-string\">reload</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">preStop:</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">exec:</span> \n</div></li><li><div class=\"code-word\">                <span class=\"hljs-attr\">command:</span> \n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/bin/sh</span> \n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">-c</span> \n</div></li><li><div class=\"code-word\">                  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">consul</span> <span class=\"hljs-string\">leave</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">volumeMounts:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consul-data-dir</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/consul/data</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">ports:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">8500</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">hostPort:</span> <span class=\"hljs-number\">8500</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">http</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">8400</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">rpc</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">8443</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">https</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">...</span> <span class=\"hljs-string\">其他端口</span>   \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"29\">\n                      在上述配置中，我们指定 Controller 为 DaemonSet，并修改\n                      Consul 的启动命令，去除 -server 等选项，使得 Consul 以\n                      Client 的角色启动并加入集群中。除此之外，还通过 volumes\n                      配置将 Consul Client 的数据目录 /consul/data 挂载到 Node\n                      节点上，使得意外宕机的 Consul Client 重启时能够复用相同的\n                      node-id 等元数据，避免导致 Consul 中出现同一个 IP\n                      对应不同主机名的服务注册错误的情况。\n                    </p>\n                    <p data-nodeid=\"5331\">\n                      运行上述的 yaml 配置文件后，就能在 Consul UI 中发现 Consul\n                      集群中出现了 Consul Client。（由于这里我们搭建的\n                      Kubernetes 集群只有一个 Node 节点，因此 Consul\n                      集群中仅有一个 Consul Client。）\n                    </p>\n                    <p data-nodeid=\"9042\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/40/D7/CgqCHl8znnKARYXJAAEo3aSRZ1o062.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"9046\"\n                      />\n                    </p>\n                    <div data-nodeid=\"9043\" class=\"\">\n                      <p style=\"text-align: center\">Consul Client 出现在集群</p>\n                    </div>\n                    <p></p>\n\n                    <p></p>\n\n                    <p></p>\n\n                    <h2 data-nodeid=\"33\">注册服务到 Consul</h2>\n                    <p data-nodeid=\"34\">\n                      Consul 提供 <strong data-nodeid=\"144\">HTTP</strong> 和\n                      <strong data-nodeid=\"145\">DNS</strong>\n                      两种方式访问服务注册与发现接口，我们接下来的实践主要是基于\n                      HTTP API 进行的。\n                    </p>\n                    <p data-nodeid=\"35\">\n                      由于我们是通过 Consul Client\n                      进行服务注册与发现，所以接下来我们会首先介绍 Consul Client\n                      中提供的用于服务注册、服务注销和服务发现的 HTTP\n                      API，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">/v1/agent/service/register <span class=\"hljs-comment\">// 服务注册接口 </span>\n</div></li><li><div class=\"code-word\">/v1/agent/service/deregister/${instanceId} <span class=\"hljs-comment\">// 服务注销接口 </span>\n</div></li><li><div class=\"code-word\">/v1/health/service/${serviceName} <span class=\"hljs-comment\">// 服务发现接口 </span>\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"37\">\n                      <strong data-nodeid=\"159\">服务注册接口</strong\n                      >用于服务启动成功后，服务实例将自身所属的服务名和服务元数据，包括服务实例\n                      ID、服务 IP、服务端口等提交到 Consul Client\n                      中完成服务注册。当服务关闭时，为了避免无效的请求，服务实例会调用<strong\n                        data-nodeid=\"160\"\n                        >服务注销接口</strong\n                      >主动将自身服务实例数据从 Consul 中移除。<strong\n                        data-nodeid=\"161\"\n                        >服务发现接口</strong\n                      >用于在发起远程调用时根据服务名获取该服务可用的服务实例信息列表，然后调用方就可以使用一定的负载均衡策略选择某个服务实例发起远程调用，该接口会把查询请求转发到\n                      Consul Server 处理。另外，还存在 /v1/agent/health/service/\n                      接口用于获取注册到本地 Consul Client\n                      的可用服务实例信息列表。\n                    </p>\n                    <p data-nodeid=\"38\">\n                      需要提交到 Consul 的服务实例信息主要有以下这些：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 服务实例信息结构体 </span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> InstanceInfo <span class=\"hljs-keyword\">struct</span> { \n</div></li><li><div class=\"code-word\">\tID         <span class=\"hljs-keyword\">string</span>                     <span class=\"hljs-string\">\\`json:\"ID\"\\`</span>                <span class=\"hljs-comment\">// 服务实例ID </span>\n</div></li><li><div class=\"code-word\">\tService           <span class=\"hljs-keyword\">string</span>                     <span class=\"hljs-string\">\\`json:\"Service,omitempty\"\\`</span> <span class=\"hljs-comment\">// 服务发现时返回的服务名 </span>\n</div></li><li><div class=\"code-word\">\tName              <span class=\"hljs-keyword\">string</span>                     <span class=\"hljs-string\">\\`json:\"Name\"\\`</span>              <span class=\"hljs-comment\">// 服务名 </span>\n</div></li><li><div class=\"code-word\">\tTags              []<span class=\"hljs-keyword\">string</span>                   <span class=\"hljs-string\">\\`json:\"Tags,omitempty\"\\`</span>    <span class=\"hljs-comment\">// 标签，可用于进行服务过滤 </span>\n</div></li><li><div class=\"code-word\">\tAddress           <span class=\"hljs-keyword\">string</span>                     <span class=\"hljs-string\">\\`json:\"Address\"\\`</span>           <span class=\"hljs-comment\">// 服务实例HOST </span>\n</div></li><li><div class=\"code-word\">\tPort              <span class=\"hljs-keyword\">int</span>                        <span class=\"hljs-string\">\\`json:\"Port\"\\`</span>              <span class=\"hljs-comment\">// 服务实例端口 </span>\n</div></li><li><div class=\"code-word\">\tMeta              <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">string</span>          <span class=\"hljs-string\">\\`json:\"Meta,omitempty\"\\`</span>    <span class=\"hljs-comment\">// 元数据 </span>\n</div></li><li><div class=\"code-word\">\tEnableTagOverride <span class=\"hljs-keyword\">bool</span>                       <span class=\"hljs-string\">\\`json:\"EnableTagOverride\"\\`</span> <span class=\"hljs-comment\">// 是否允许标签覆盖 </span>\n</div></li><li><div class=\"code-word\">\tCheck             <span class=\"hljs-string\">\\`json:\"Check,omitempty\"\\`</span>   <span class=\"hljs-comment\">// 健康检查相关配置 </span>\n</div></li><li><div class=\"code-word\">\tWeights           <span class=\"hljs-string\">\\`json:\"Weights,omitempty\"\\`</span> <span class=\"hljs-comment\">// 权重 </span>\n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> Check <span class=\"hljs-keyword\">struct</span> { \n</div></li><li><div class=\"code-word\">\tDeregisterCriticalServiceAfter <span class=\"hljs-keyword\">string</span>   <span class=\"hljs-string\">\\`json:\"DeregisterCriticalServiceAfter\"\\`</span> <span class=\"hljs-comment\">// 多久之后注销服务 </span>\n</div></li><li><div class=\"code-word\">\tArgs                           []<span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">\\`json:\"Args,omitempty\"\\`</span>                 <span class=\"hljs-comment\">// 请求参数 </span>\n</div></li><li><div class=\"code-word\">\tHTTP                           <span class=\"hljs-keyword\">string</span>   <span class=\"hljs-string\">\\`json:\"HTTP\"\\`</span>                           <span class=\"hljs-comment\">// 健康检查地址 </span>\n</div></li><li><div class=\"code-word\">\tInterval                       <span class=\"hljs-keyword\">string</span>   <span class=\"hljs-string\">\\`json:\"Interval,omitempty\"\\`</span>             <span class=\"hljs-comment\">// Consul 被动回调检查间隔 </span>\n</div></li><li><div class=\"code-word\">\tTTL                            <span class=\"hljs-keyword\">string</span>   <span class=\"hljs-string\">\\`json:\"TTL,omitempty\"\\`</span>                  <span class=\"hljs-comment\">// 服务实例主动维持心跳间隔，与Interval只存其一 </span>\n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"40\">\n                      这其中，ID 用来唯一标识服务实例，Name\n                      代表服务实例归属的服务集群，Address、Port 表示服务的 IP\n                      地址和监听端口，Check 用于指定健康检查的配置，Consul\n                      中提供主动上报和被动回调两种方式维持心跳。\n                    </p>\n                    <p data-nodeid=\"41\">\n                      接下来我们以服务注册为例，演示服务实例如何注册自身数据到\n                      Consul，discovery_client.go 中服务注册的代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(consulClient *DiscoveryClient)</span> <span class=\"hljs-title\">Register</span><span class=\"hljs-params\">(ctx context.Context, serviceName, instanceId, healthCheckUrl <span class=\"hljs-keyword\">string</span>, instanceHost <span class=\"hljs-keyword\">string</span>, instancePort <span class=\"hljs-keyword\">int</span>, meta <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">string</span>, weights *Weights)</span> <span class=\"hljs-title\">error</span></span> { \n</div></li><li><div class=\"code-word\">\tinstanceInfo := &amp;InstanceInfo{ \n</div></li><li><div class=\"code-word\">\t\tID:                instanceId, \n</div></li><li><div class=\"code-word\">\t\tName:              serviceName, \n</div></li><li><div class=\"code-word\">\t\tAddress:           instanceHost, \n</div></li><li><div class=\"code-word\">\t\tPort:              instancePort, \n</div></li><li><div class=\"code-word\">\t\tMeta:              meta, \n</div></li><li><div class=\"code-word\">\t\tEnableTagOverride: <span class=\"hljs-literal\">false</span>, \n</div></li><li><div class=\"code-word\">\t\tCheck: Check{ \n</div></li><li><div class=\"code-word\">\t\t\tDeregisterCriticalServiceAfter: <span class=\"hljs-string\">\"30s\"</span>, \n</div></li><li><div class=\"code-word\">\t\t\tHTTP:                           <span class=\"hljs-string\">\"http://\"</span> + instanceHost + <span class=\"hljs-string\">\":\"</span> + strconv.Itoa(instancePort) + healthCheckUrl, \n</div></li><li><div class=\"code-word\">\t\t\tInterval:                       <span class=\"hljs-string\">\"15s\"</span>, \n</div></li><li><div class=\"code-word\">\t\t}, \n</div></li><li><div class=\"code-word\">\t} \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> weights != <span class=\"hljs-literal\">nil</span>{ \n</div></li><li><div class=\"code-word\">\t\tinstanceInfo.Weights = *weights \n</div></li><li><div class=\"code-word\">\t}<span class=\"hljs-keyword\">else</span> { \n</div></li><li><div class=\"code-word\">\t\tinstanceInfo.Weights = Weights{ \n</div></li><li><div class=\"code-word\">\t\t\tPassing: <span class=\"hljs-number\">10</span>, \n</div></li><li><div class=\"code-word\">\t\t\tWarning: <span class=\"hljs-number\">1</span>, \n</div></li><li><div class=\"code-word\">\t\t} \n</div></li><li><div class=\"code-word\">\t} \n</div></li><li><div class=\"code-word\">\tbyteData, err := json.Marshal(instanceInfo) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{ \n</div></li><li><div class=\"code-word\">\t\tlog.Printf(<span class=\"hljs-string\">\"json format err: %s\"</span>, err) \n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> err \n</div></li><li><div class=\"code-word\">\t} \n</div></li><li><div class=\"code-word\">\treq, err := http.NewRequest(<span class=\"hljs-string\">\"PUT\"</span>, \n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-string\">\"http://\"</span>+consulClient.host+<span class=\"hljs-string\">\":\"</span>+strconv.Itoa(consulClient.port)+<span class=\"hljs-string\">\"/v1/agent/service/register\"</span>, \n</div></li><li><div class=\"code-word\">\t\tbytes.NewReader(byteData)) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{ \n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> err \n</div></li><li><div class=\"code-word\">\t} \n</div></li><li><div class=\"code-word\">\treq.Header.Set(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-string\">\"application/json;charset=UTF-8\"</span>) \n</div></li><li><div class=\"code-word\">\tclient := http.Client{} \n</div></li><li><div class=\"code-word\">\tclient.Timeout = time.Second * <span class=\"hljs-number\">2</span> \n</div></li><li><div class=\"code-word\">\tresp, err := client.Do(req) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 检查 HTTP 请求是否发送成功，判断是否注册成功 </span>\n</div></li><li><div class=\"code-word\">\t.... \n</div></li><li><div class=\"code-word\">} \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"43\">\n                      上述代码的关键在于将服务实例信息封装为\n                      InstanceInfo，并通过 HTTP 请求访问 Consul Client 的\n                      /v1/agent/service/register 接口，将服务实例信息提交 Consul\n                      中。我们在 InstanceInfo 中设定了服务实例\n                      ID、服务名、服务地址、服务端口等关键数据，并指定了健康检查的地址用于与\n                      Consul\n                      维持心跳。类似的，服务发现和服务注销的实现也是通过调用上面介绍的\n                      HTTP API 完成，在此就不演示代码了。\n                    </p>\n                    <p data-nodeid=\"44\">\n                      微服务需要在准备就绪后，向服务注册与发现中心发起服务注册，并在服务关闭前及时从服务注册与发现中心注销自身服务实例信息，这些我们都可以在\n                      main 函数中添加对应的行为，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// ... 通过命令行参数或者环境变量获取服务配置信息 </span>\n</div></li><li><div class=\"code-word\">\tflag.Parse() \n</div></li><li><div class=\"code-word\">\tclient := discovery.NewDiscoveryClient(*consulAddr, *consulPort) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">//... 省略 注册 endpoint，构建 transport </span>\n</div></li><li><div class=\"code-word\">\t \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> { \n</div></li><li><div class=\"code-word\">\t\terrChan &lt;- http.ListenAndServe(<span class=\"hljs-string\">\":\"</span> + strconv.Itoa(*servicePort), handler) \n</div></li><li><div class=\"code-word\">\t}() \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> { \n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">// 监控系统信号，等待 ctrl + c 系统信号通知服务关闭 </span>\n</div></li><li><div class=\"code-word\">\t\tc := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> os.Signal, <span class=\"hljs-number\">1</span>) \n</div></li><li><div class=\"code-word\">\t\tsignal.Notify(c, syscall.SIGINT, syscall.SIGTERM) \n</div></li><li><div class=\"code-word\">\t\terrChan &lt;- fmt.Errorf(<span class=\"hljs-string\">\"%s\"</span>, &lt;-c) \n</div></li><li><div class=\"code-word\">\t}() \n</div></li><li><div class=\"code-word\">\tinstanceId := *serviceName + <span class=\"hljs-string\">\"-\"</span> + uuid.New().String() \n</div></li><li><div class=\"code-word\">\terr := client.Register(context.Background(), *serviceName, instanceId, <span class=\"hljs-string\">\"/health\"</span>, *serviceAddr, *servicePort, <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">nil</span>) \n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{ \n</div></li><li><div class=\"code-word\">\t\tlog.Printf(<span class=\"hljs-string\">\"register service err : %s\"</span>, err) \n</div></li><li><div class=\"code-word\">\t\tos.Exit(<span class=\"hljs-number\">-1</span>) \n</div></li><li><div class=\"code-word\">\t} \n</div></li><li><div class=\"code-word\">\terr = &lt;-errChan \n</div></li><li><div class=\"code-word\">\tlog.Printf(<span class=\"hljs-string\">\"listen err : %s\"</span>, err) \n</div></li><li><div class=\"code-word\">\tclient.Deregister(context.Background(), instanceId) \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"46\">\n                      在 main 函数中启动 http.ListenAndServe\n                      监听对应的服务端口时，我们同时调用了\n                      DiscoveryClient.Register 方法向 Consul\n                      发起服务注册，并采用监控系统信号的方式，在服务关闭时调用\n                      DiscoveryClient.Deregister\n                      进行服务注销，以避免无效的请求发送到已关闭的服务实例。\n                    </p>\n                    <p data-nodeid=\"47\">\n                      为了保证 Consul Client 主动进行健康检查成功，我们还需要在\n                      transport 层中定义 /health 接口用于响应 Consul Client\n                      的调用，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">\tr.Methods(<span class=\"hljs-string\">\"GET\"</span>).Path(<span class=\"hljs-string\">\"/health\"</span>).Handler(kithttp.NewServer( \n</div></li><li><div class=\"code-word\">\t\tendpoints.HealthCheckEndpoint, \n</div></li><li><div class=\"code-word\">\t\tdecodeHealthCheckRequest, \n</div></li><li><div class=\"code-word\">\t\tencodeJSONResponse, \n</div></li><li><div class=\"code-word\">\t\toptions..., \n</div></li><li><div class=\"code-word\">\t)) \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"49\">\n                      在 Kubernetes 部署微服务实例时，可以通过获取服务实例所在的\n                      Pod IP 作为服务实例 IP 提交到 Consul，使用 Kubernetes 的\n                      valueFrom 即可获取服务实例所在 Pod 的相关信息。部署\n                      register 微服务的 Kubernetes 简单配置如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">v1</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Pod</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">metadata:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">labels:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-attr\">spec:</span> \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">containers:</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">register</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">ports:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">containerPort:</span> <span class=\"hljs-number\">12312</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">imagePullPolicy:</span> <span class=\"hljs-string\">IfNotPresent</span> \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">env:</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">consulAddr</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">valueFrom:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">fieldRef:</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">spec.nodeName</span> \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">serviceAddr</span> \n</div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">valueFrom:</span> \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">fieldRef:</span> \n</div></li><li><div class=\"code-word\">              <span class=\"hljs-attr\">fieldPath:</span> <span class=\"hljs-string\">status.podIP</span> \n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7546\">\n                      由于 Consul Client 部署在每一个 Node\n                      节点中，我们可以直接获取 spec.nodeName（即 Pod 所在 Node\n                      节点的主机名）作为 Consul Client 的地址传递给 Go\n                      微服务，而 Go 微服务的 IP 地址即其所在 Pod 的 IP。在\n                      Kubernetes 中启动该配置后即可在 Consul UI\n                      中查看到该服务实例注册到 Consul 中，如图所示：\n                    </p>\n                    <p data-nodeid=\"8671\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/40/D7/CgqCHl8znpOAUpWzAAHjz85ST4g127.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"8675\"\n                      />\n                    </p>\n                    <div data-nodeid=\"8672\" class=\"\">\n                      <p style=\"text-align: center\">\n                        register 服务注册到 Consul\n                      </p>\n                    </div>\n                    <p></p>\n\n                    <p data-nodeid=\"54\">\n                      进入到 register 服务所在的 Pod，通过 curl 访问\n                      /discovery/name?serviceName={serviceName}\n                      即可根据服务名获取注册到 Consul 中的服务实例信息列表。\n                    </p>\n                    <h3 data-nodeid=\"8299\" class=\"\">小结</h3>\n\n                    <p data-nodeid=\"56\">\n                      <strong data-nodeid=\"182\"\n                        >在微服务架构中，服务注册与发现能够管理集群中大量动态变化的服务实例，有效提高服务治理的效率。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"57\">\n                      本课时我们主要介绍了如何结合 Consul 给 Go\n                      微服务整合服务注册与发现能力。首先。我们借助 Kubernetes\n                      搭建了具备 3 个 Consul Server 的 Consul\n                      集群；接着，我们又基于 Consul Client 提供的 HTTP API\n                      完成了 Go 微服务与 Consul 的服务注册与发现。\n                    </p>\n                    <p data-nodeid=\"58\">\n                      希望通过本课时能够加深你对 Consul 的理解，并掌握如何为 Go\n                      微服务添加服务注册与发现能力，在下一课时我们将介绍更多关于\n                      Go 微服务服务注册与发现的实践，比如基于 Service Mesh\n                      进行服务注册与发现等。\n                    </p>\n                    <p data-nodeid=\"59\">\n                      最后，关于 Consul 和 Go\n                      微服务的服务注册与发现，你有什么其他的见解？欢迎在评论区与我分享。\n                    </p>\n            "}