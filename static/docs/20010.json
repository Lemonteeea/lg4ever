{"title":"09 | 数组原理（下）：实现数组扁平化的 6 种方式","context":"\n                    <p data-nodeid=\"1912\" class=\"\">\n                      我在前两讲给你介绍了类数组的相关知识，那么这一讲会结合之前的内容，来聊聊数组相关的应用——如何实现数组扁平化。数组扁平化在一些多维数组的应用场景中会出现，我将围绕\n                      6 种方式来带你实现它。\n                    </p>\n                    <p data-nodeid=\"1913\">\n                      此外，关于数组除了扁平化也有其他问题，比如数组去重等，也是面试中经常会问到的。本讲的目的是将扁平化作为一个切入点，这种思路对于你解决其他类似的问题也是一个很好的启发。\n                    </p>\n                    <p data-nodeid=\"1914\">\n                      按照惯例，在课程开始前请你先思考几个问题：\n                    </p>\n                    <ol data-nodeid=\"1915\">\n                      <li data-nodeid=\"1916\">\n                        <p data-nodeid=\"1917\">\n                          怎样用最普通的方法解决数组扁平化问题？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1918\">\n                        <p data-nodeid=\"1919\">\n                          ES6 里面是否有一些高级的方法能够直接实现？\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1920\">\n                      下面开始说说什么是数组扁平化，如何实现它呢？\n                    </p>\n                    <h3 data-nodeid=\"1921\">扁平化的实现</h3>\n                    <p data-nodeid=\"1922\">\n                      数组的扁平化其实就是将一个嵌套多层的数组\n                      array（嵌套可以是任何层数）转换为只有一层的数组。举个简单的例子，假设有个名为\n                      flatten 的函数可以做到数组扁平化，效果如下面这段代码所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>，<span class=\"hljs-number\">5</span>]]];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(flatten(arr)); <span class=\"hljs-comment\">// [1, 2, 3, 4，5]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1924\">\n                      其实就是把多维的数组“拍平”，输出最后的一维数组。那么你知道了效果是什么样的了，下面就尝试着写一个\n                      flatten 函数吧。实现方式有下述几种。\n                    </p>\n                    <h4 data-nodeid=\"1925\">方法一：普通的递归实</h4>\n                    <p data-nodeid=\"1926\">\n                      普通的递归思路很容易理解，就是通过循环递归的方式，一项一项地去遍历，如果每一项还是一个数组，那么就继续往下遍历，利用递归程序的方法，来实现数组的每一项的连接。我们来看下这个方法是如何实现的，如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 方法1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]]];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flatten</span>(<span class=\"hljs-params\">arr</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> result = [];\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">Array</span>.isArray(arr[i])) {\n</div></li><li><div class=\"code-word\">      result = result.concat(flatten(arr[i]));\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      result.push(arr[i]);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> result;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">flatten(a);  <span class=\"hljs-comment\">// &nbsp;[1, 2, 3, 4，5]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1928\">\n                      从上面这段代码可以看出，最后返回的结果是扁平化的结果，这段代码核心就是循环遍历过程中的递归操作，就是在遍历过程中发现数组元素还是数组的时候进行递归操作，把数组的结果通过数组的\n                      concat 方法拼接到最后要返回的 result\n                      数组上，那么最后输出的结果就是扁平化后的数组。\n                    </p>\n                    <p data-nodeid=\"1929\">下面我们来看看另一种实现方式。</p>\n                    <h4 data-nodeid=\"1930\">方法二：利用 reduce 函数迭代</h4>\n                    <p data-nodeid=\"1931\">\n                      从上面普通的递归函数中可以看出，其实就是对数组的每一项进行处理，那么我们其实也可以用第\n                      7 讲中说的 reduce\n                      来实现数组的拼接，从而简化第一种方法的代码，改造后的代码如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 方法2</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]]];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flatten</span>(<span class=\"hljs-params\">arr</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> arr.reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">prev, next</span>)</span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> prev.concat(<span class=\"hljs-built_in\">Array</span>.isArray(next) ? flatten(next) : next)\n</div></li><li><div class=\"code-word\">    }, [])\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(flatten(arr));<span class=\"hljs-comment\">// &nbsp;[1, 2, 3, 4，5]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1933\">\n                      这段代码在控制台执行之后，也可以得到想要的结果。这里你可以回忆一下之前说的\n                      reduce 的参数问题，我们可以看到 reduce\n                      的第一个参数用来返回最后累加的结果，思路和第一种递归方法是一样的，但是通过使用\n                      reduce 之后代码变得更简洁了，也同样解决了扁平化的问题。\n                    </p>\n                    <p data-nodeid=\"1934\">下面我们来看看下一种实现方式。</p>\n                    <h4 data-nodeid=\"1935\">方法三：扩展运算符实现</h4>\n                    <p data-nodeid=\"1936\">\n                      这个方法的实现，采用了扩展运算符和 some\n                      的方法，两者共同使用，达到数组扁平化的目的，还是来看一下代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 方法3</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]]];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flatten</span>(<span class=\"hljs-params\">arr</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (arr.some(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> <span class=\"hljs-built_in\">Array</span>.isArray(item))) {\n</div></li><li><div class=\"code-word\">        arr = [].concat(...arr);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> arr;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(flatten(arr)); <span class=\"hljs-comment\">// &nbsp;[1, 2, 3, 4，5]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1938\">\n                      从执行的结果中可以发现，我们先用数组的 some\n                      方法把数组中仍然是组数的项过滤出来，然后执行 concat\n                      操作，利用 ES6\n                      的展开运算符，将其拼接到原数组中，最后返回原数组，达到了预期的效果。\n                    </p>\n                    <p data-nodeid=\"1939\">\n                      前三种实现数组扁平化的方式其实是最基本的思路，都是通过最普通递归思路衍生的方法，尤其是前两种实现方法比较类似。值得注意的是\n                      reduce 方法，它可以在很多应用场景中实现，由于 reduce\n                      这个方法提供的几个参数比较灵活，能解决很多问题，所以是值得熟练使用并且精通的。\n                    </p>\n                    <p data-nodeid=\"1940\">\n                      那么除此之外，是否还有其他实现方式呢？请你接着往下看。\n                    </p>\n                    <h4 data-nodeid=\"1941\">\n                      方法四：split 和 toString 共同处理\n                    </h4>\n                    <p data-nodeid=\"1942\">\n                      我们也可以通过 split 和 toString\n                      两个方法，来共同实现数组扁平化，由于数组会默认带一个\n                      toString\n                      的方法，所以可以把数组直接转换成逗号分隔的字符串，然后再用\n                      split 方法把字符串重新转换为数组，如下面的代码所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 方法4</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]]];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flatten</span>(<span class=\"hljs-params\">arr</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> arr.toString().split(<span class=\"hljs-string\">','</span>);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(flatten(arr)); <span class=\"hljs-comment\">// &nbsp;[1, 2, 3, 4]</span>\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"1944\">\n                      通过这两个方法可以将多维数组直接转换成逗号连接的字符串，然后再重新分隔成数组，你可以在控制台执行一下查看结果。\n                    </p>\n                    <p data-nodeid=\"1945\">\n                      下面我们看看 ES6 有什么方式可以直接实现数组的扁平化。\n                    </p>\n                    <h4 data-nodeid=\"1946\">方法五：调用 ES6 中的 flat</h4>\n                    <p data-nodeid=\"1947\">\n                      我们还可以直接调用 ES6 中的 flat\n                      方法，可以直接实现数组扁平化。先来看下 flat 方法的语法：\n                    </p>\n                    <blockquote data-nodeid=\"1948\">\n                      <p data-nodeid=\"1949\">arr.flat([depth])</p>\n                    </blockquote>\n                    <p data-nodeid=\"1950\">\n                      其中 depth 是 flat 的参数，depth\n                      是可以传递数组的展开深度（默认不填、数值是\n                      1），即展开一层数组。那么如果多层的该怎么处理呢？参数也可以传进\n                      Infinity，代表不论多少层都要展开。那么我们来看下，用 flat\n                      方法怎么实现，请看下面的代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 方法5</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]]];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flatten</span>(<span class=\"hljs-params\">arr</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> arr.flat(<span class=\"hljs-literal\">Infinity</span>);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(flatten(arr)); <span class=\"hljs-comment\">// &nbsp;[1, 2, 3, 4，5]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1952\">\n                      可以看出，一个嵌套了两层的数组，通过将 flat\n                      方法的参数设置为\n                      Infinity，达到了我们预期的效果。其实同样也可以设置成\n                      2，也能实现这样的效果。\n                    </p>\n                    <p data-nodeid=\"1953\">\n                      因此，你在编程过程中，发现对数组的嵌套层数不确定的时候，最好直接使用\n                      Infinity，可以达到扁平化。下面我们再来看最后一种场景。\n                    </p>\n                    <h4 data-nodeid=\"1954\">方法六：正则和 JSON 方法共同处理</h4>\n                    <p data-nodeid=\"1955\">\n                      我们在第四种方法中已经尝试了用 toString\n                      方法，其中仍然采用了将 JSON.stringify\n                      的方法先转换为字符串，然后通过正则表达式过滤掉字符串中的数组的方括号，最后再利用\n                      JSON.parse 把它转换成数组。请看下面的代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 方法 6</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]]], <span class=\"hljs-number\">6</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flatten</span>(<span class=\"hljs-params\">arr</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-built_in\">JSON</span>.stringify(arr);\n</div></li><li><div class=\"code-word\">  str = str.replace(<span class=\"hljs-regexp\">/(\\[|\\])/g</span>, <span class=\"hljs-string\">''</span>);\n</div></li><li><div class=\"code-word\">  str = <span class=\"hljs-string\">'['</span> + str + <span class=\"hljs-string\">']'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">JSON</span>.parse(str); \n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(flatten(arr)); <span class=\"hljs-comment\">// &nbsp;[1, 2, 3, 4，5]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1957\">\n                      可以看到，其中先把传入的数组转换成字符串，然后通过正则表达式的方式把括号过滤掉，这部分正则的表达式你不太理解的话，可以看看下面的图片。<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/94/9B/Ciqc1GAY_EWAE3pDAAERgfI0plY241.png\"\n                        alt=\"Lark20210202-151541.png\"\n                        data-nodeid=\"2010\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1958\">\n                      通过这个在线网站\n                      <a href=\"https://regexper.com/\" data-nodeid=\"2014\"\n                        >https://regexper.com/</a\n                      >\n                      可以把正则分析成容易理解的可视化的逻辑脑图。其中我们可以看到，匹配规则是：全局匹配（g）左括号或者右括号，将它们替换成空格，最后返回处理后的结果。之后拿着正则处理好的结果重新在外层包裹括号，最后通过\n                      JSON.parse 转换成数组返回。\n                    </p>\n                    <p data-nodeid=\"1959\">\n                      以上就是这六种实现数组扁平化的方式，你可以再思考下看看是否还有更多的实现方式，我们可以交流一下。\n                    </p>\n                    <h3 data-nodeid=\"1960\">总结</h3>\n                    <p data-nodeid=\"1961\">\n                      本讲的内容就介绍这么多了。我将日常开发中有可能遇到数组扁平化的几种方法分别讲了一遍，又在最后一个方法中给你推荐了一个比较容易理解的正则表达式的分析工具。希望这几种方法能为你提升\n                      JS 编码能力带来帮助和启发。\n                    </p>\n                    <p data-nodeid=\"1962\">\n                      综上我们可以看到，数组扁平化这节课的知识点结合了数组\n                      API、ES6，以及 JSON\n                      方法的相关知识。你可以通过下面的表格再来看一下这六种方式的代码思路。\n                    </p>\n                    <p data-nodeid=\"1963\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/0C/93/CgpVE2AY_DiAQNC5AAFrgibLZp4762.png\"\n                        alt=\"Lark20210202-151546.png\"\n                        data-nodeid=\"2022\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1964\">\n                      表格列举了这几种方法实现的难易程度，以及编码思路的描述。希望你能对这几种方法融会贯通，如果在未来的面试中遇到这样的题目，愿你能够轻松应对，给面试官一个满意的答复。\n                    </p>\n                    <p data-nodeid=\"1965\">\n                      在日常的前端开发工作中，你往往会在业务开发的时候遇到各种数组问题，所以你要思考最合适的解决方式。其实扁平化只是其中的一个引子，其他涉及数组的相关知识点还有很多。\n                    </p>\n                    <p data-nodeid=\"1966\">\n                      我最后给你留一个和数组相关的作业：试着写出实现数组去重的方式，看看你能够写出几种呢？\n                    </p>\n                    <p data-nodeid=\"1967\" class=\"\">\n                      下一讲，我们来说说数组排序，这也是数据结构中必不可少的知识，我们到时见。\n                    </p>\n            "}