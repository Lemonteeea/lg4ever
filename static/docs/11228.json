{"title":"26 | 如何设计一个“万能”项目脚手架？","context":"\n                    <p data-nodeid=\"1605\" class=\"\">\n                      脚手架是工程化中不可缺少的一环。究竟什么是脚手架呢？广义上来说，脚手架就是为了保证各施工过程顺利进行而搭设的工作平台。\n                    </p>\n                    <p data-nodeid=\"1606\">\n                      编程领域的脚手架主要为了完成新项目的启动和搭建，能够帮助开发者提升效率和开发体验。对于前端来说，从零开始建立一个项目是复杂的，因此也就存在了较多类型的脚手架：\n                    </p>\n                    <ul data-nodeid=\"1607\">\n                      <li data-nodeid=\"1608\">\n                        <p data-nodeid=\"1609\">Vue/React 框架类脚手架</p>\n                      </li>\n                      <li data-nodeid=\"1610\">\n                        <p data-nodeid=\"1611\">Webpack 等构建配置类脚手架</p>\n                      </li>\n                      <li data-nodeid=\"1612\">\n                        <p data-nodeid=\"1613\">\n                          混合脚手架，比如大家熟悉的 Vue-cli 或者\n                          create-react-app\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1614\">\n                      这一讲我们就深入这些脚手架的原理进行讲解。\n                    </p>\n                    <h3 data-nodeid=\"1615\">命令行工具原理和实现</h3>\n                    <p data-nodeid=\"6062\" class=\"te-preview-highlight\">\n                      现代脚手架离不开命令行工具，命令行工具即 Command-line\n                      interfaces（CLIs）\n                      ，是编程领域的重要概念，也是我们开发中经常接触到的工具之一。\n                    </p>\n\n                    <p data-nodeid=\"1617\">\n                      比如 Webpack、Babel、npm、Yarn\n                      等都是典型的命令行。此外，流畅的命令行能够迅速启动一个脚手架，实现<strong\n                        data-nodeid=\"1743\"\n                        >自动化和智能化</strong\n                      >流程。这一部分，我们就使用 Node.js 来开发一个命令行。\n                    </p>\n                    <p data-nodeid=\"1618\">\n                      我们先来看几个开发命令行工具的关键依赖。\n                    </p>\n                    <ul data-nodeid=\"1619\">\n                      <li data-nodeid=\"1620\">\n                        <p data-nodeid=\"1621\">\n                          <a href=\"http://npm.im/inquirer\" data-nodeid=\"1747\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1746\"\n                              >inquirer</code\n                            ></a\n                          >、<a href=\"http://npm.im/enquirer\" data-nodeid=\"1751\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1750\"\n                              >enquirer</code\n                            ></a\n                          >、<a href=\"https://npm.im/prompts\" data-nodeid=\"1755\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1754\"\n                              >prompts</code\n                            ></a\n                          >：可以处理复杂的用户输入，完成命令行输入交互。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1622\">\n                        <p data-nodeid=\"1623\">\n                          <a href=\"http://npm.im/chalk\" data-nodeid=\"1759\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1758\"\n                              >chalk</code\n                            ></a\n                          >、<a href=\"https://npm.im/kleur\" data-nodeid=\"1763\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1762\"\n                              >kleur</code\n                            ></a\n                          >：使终端可以输出彩色信息文案。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1624\">\n                        <p data-nodeid=\"1625\">\n                          <a href=\"http://npm.im/ora\" data-nodeid=\"1767\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1766\"\n                              >ora</code\n                            ></a\n                          >：可以让命令行出现好看的 Spinners。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1626\">\n                        <p data-nodeid=\"1627\">\n                          <a href=\"http://npm.im/boxen\" data-nodeid=\"1771\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1770\"\n                              >boxen</code\n                            ></a\n                          >：可以在命令行中画出 Boxes 区块。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1628\">\n                        <p data-nodeid=\"1629\">\n                          <a href=\"http://npm.im/listr\" data-nodeid=\"1775\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1774\"\n                              >listr</code\n                            ></a\n                          >：可以在命令行中画出进度列表。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1630\">\n                        <p data-nodeid=\"1631\">\n                          <a href=\"http://npm.im/meow\" data-nodeid=\"1779\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1778\"\n                              >meow</code\n                            ></a\n                          >、<a href=\"http://npm.im/arg\" data-nodeid=\"1783\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1782\"\n                              >arg</code\n                            ></a\n                          >：可以进行基础的命令行参数解析。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1632\">\n                        <p data-nodeid=\"1633\">\n                          <a href=\"http://npm.im/commander\" data-nodeid=\"1787\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1786\"\n                              >commander</code\n                            ></a\n                          >、<a\n                            href=\"https://www.npmjs.com/package/yargs\"\n                            data-nodeid=\"1791\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1790\"\n                              >yargs</code\n                            ></a\n                          >：可以进行更加复杂的命令行参数解析。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1634\">\n                      我们的目标是支持以下面这种启动方式，建立我们的项目，如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm init <span class=\"hljs-meta\">@lucas</span>/project\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1636\">\n                      npm 6.1 及以上版本，我们都可以使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1795\"\n                        >npm init</code\n                      >或<code data-backticks=\"1\" data-nodeid=\"1797\"\n                        >yarn create</code\n                      >来启动我们的项目，比如下面两个命令就是等价的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"># 使用 Node.js\n</div></li><li><div class=\"code-word\">npm init @lucas/project\n</div></li><li><div class=\"code-word\"># 使用 Yarn\n</div></li><li><div class=\"code-word\">yarn create @lucas/project\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"1638\">启动命令行项目</h4>\n                    <p data-nodeid=\"1639\">\n                      下面开始进入开发，首先我们创建项目：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">mkdir create-project &amp;&amp; cd create-project\n</div></li><li><div class=\"code-word\">npm init --yes\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1641\">\n                      接着进入<code data-backticks=\"1\" data-nodeid=\"1802\"\n                        >create-project</code\n                      >文件中，创建<code data-backticks=\"1\" data-nodeid=\"1804\"\n                        >src</code\n                      >目录及<code data-backticks=\"1\" data-nodeid=\"1806\"\n                        >src/cli.js</code\n                      >文件，<code data-backticks=\"1\" data-nodeid=\"1808\"\n                        >cli.js</code\n                      >文件内容如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">export function <span class=\"hljs-title\">cli</span><span class=\"hljs-params\">(args)</span> </span>{\n</div></li><li><div class=\"code-word\"> console.log(args);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1643\">\n                      接下来，为了使我们的命令行可以在终端执行，我们新建<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1811\"\n                        >bin/</code\n                      >目录，并在其下创建一个<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1813\"\n                        >create-project</code\n                      >文件，代码为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">#!/usr/bin/env node\n</div></li><li><div class=\"code-word\">require = require('esm')(module /*, options*/);\n</div></li><li><div class=\"code-word\">require('../src/cli').cli(process.argv);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1645\">\n                      上述代码中，我们使用了<a\n                        href=\"https://www.npmjs.com/package/esm\"\n                        data-nodeid=\"1819\"\n                        ><code data-backticks=\"1\" data-nodeid=\"1817\">esm</code>\n                      </a>\n                      模块，这样就可以在其他文件中使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1821\"\n                        >import</code\n                      >关键字，即 ESM 模块规范了。我们在该入口文件中，引入<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1823\"\n                        >cli.js</code\n                      >并将命令行参数<a\n                        href=\"https://nodejs.org/api/process.html#process_process_argv\"\n                        data-nodeid=\"1827\"\n                        ><code data-backticks=\"1\" data-nodeid=\"1826\"\n                          >process.argv</code\n                        ></a\n                      >传给<code data-backticks=\"1\" data-nodeid=\"1829\">cli</code\n                      >函数执行。\n                    </p>\n                    <p data-nodeid=\"1646\">\n                      当然，为了能够正常使用<a\n                        href=\"https://www.npmjs.com/package/esm\"\n                        data-nodeid=\"1835\"\n                        ><code data-backticks=\"1\" data-nodeid=\"1833\">esm</code>\n                      </a>\n                      模块，我们需要先安装，执行<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1837\"\n                        >npm install esm</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"1647\">此时 package.json 内容如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"@lucas/create-project\"</span>,\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"A CLI to bootstrap my new projects\"</span>,\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"src/index.js\"</span>,\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"bin\"</span>: {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"@lucas/create-project\"</span>: <span class=\"hljs-string\">\"bin/create-project\"</span>,\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"create-project\"</span>: <span class=\"hljs-string\">\"bin/create-project\"</span>\n</div></li><li><div class=\"code-word\"> },\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"publishConfig\"</span>: {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"access\"</span>: <span class=\"hljs-string\">\"public\"</span>\n</div></li><li><div class=\"code-word\"> },\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"scripts\"</span>: {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n</div></li><li><div class=\"code-word\"> },\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"keywords\"</span>: [\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"cli\"</span>,\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"create-project\"</span>\n</div></li><li><div class=\"code-word\"> ],\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"author\"</span>: <span class=\"hljs-string\">\"YOUR_AUTHOR\"</span>,\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"dependencies\"</span>: {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"esm\"</span>: <span class=\"hljs-string\">\"^3.2.18\"</span>\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1649\">\n                      这里需要注意的是\n                      <code data-backticks=\"1\" data-nodeid=\"1841\">bin</code\n                      >字段，我们注册了两个可用命令：一个是带有 npm 命名 scope\n                      的，一个是常规的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1843\"\n                        >create-project</code\n                      >命令。\n                    </p>\n                    <p data-nodeid=\"1650\">\n                      为了调试方便，我们使用<a\n                        href=\"https://docs.npmjs.com/cli/link.html\"\n                        data-nodeid=\"1848\"\n                        ><code data-backticks=\"1\" data-nodeid=\"1847\"\n                          >npm link</code\n                        ></a\n                      >命令进行调试，在终端中项目目录下执行：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm link\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1652\">\n                      上述命令可以在全局范围内添加一个软链到当前项目中。我们执行：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">create-project --yes\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1654\">就会得到下面这样的输出：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[ <span class=\"hljs-string\">'/usr/local/Cellar/node/11.6.0/bin/node'</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">'/Users/dkundel/dev/create-project/bin/create-project'</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">'--yes'</span> ]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1656\">\n                      该输出，就对应了代码中的<a\n                        href=\"https://nodejs.org/api/process.html#process_process_argv\"\n                        data-nodeid=\"1855\"\n                        ><code data-backticks=\"1\" data-nodeid=\"1854\"\n                          >process.argv</code\n                        ></a\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"1657\">解析处理命令行输入</h4>\n                    <p data-nodeid=\"1658\">\n                      在解析处理命令行输入之前，我们需要设计命令行支持的几个选项，如下。\n                    </p>\n                    <ul data-nodeid=\"1659\">\n                      <li data-nodeid=\"1660\">\n                        <p data-nodeid=\"1661\">\n                          <code data-backticks=\"1\" data-nodeid=\"1859\"\n                            >[template]</code\n                          >：支持默认的几种模板类型，用户可以通过 select\n                          进行选择。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1662\">\n                        <p data-nodeid=\"1663\">\n                          <code data-backticks=\"1\" data-nodeid=\"1861\"\n                            >--git</code\n                          >：等同于<code data-backticks=\"1\" data-nodeid=\"1863\"\n                            >git init</code\n                          >去创建一个新的 Git 项目。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1664\">\n                        <p data-nodeid=\"1665\">\n                          <code data-backticks=\"1\" data-nodeid=\"1865\"\n                            >--install</code\n                          >：支持自动下载项目依赖。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1666\">\n                        <p data-nodeid=\"1667\">\n                          <code data-backticks=\"1\" data-nodeid=\"1867\"\n                            >--yes</code\n                          >：跳过命令行交互，直接使用默认配置。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1668\">\n                      我们利用<code data-backticks=\"1\" data-nodeid=\"1870\"\n                        >inquirer</code\n                      >使得命令行支持用户交互，同时使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1872\"\n                        >arg</code\n                      >来解析命令行参数，安装相关依赖命令：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm install inquirer arg\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1670\">\n                      接下来编写命令行参数解析逻辑，在<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1875\"\n                        >cli.js</code\n                      >中添加：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> arg from <span class=\"hljs-string\">'arg'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 解析命令行参数为 options</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">parseArgumentsIntoOptions</span><span class=\"hljs-params\">(rawArgs)</span> </span>{\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 使用 arg 进行解析</span>\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">const</span> args = arg(\n</div></li><li><div class=\"code-word\">   {\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-string\">'--git'</span>: Boolean,\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-string\">'--yes'</span>: Boolean,\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-string\">'--install'</span>: Boolean,\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-string\">'-g'</span>: <span class=\"hljs-string\">'--git'</span>,\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-string\">'-y'</span>: <span class=\"hljs-string\">'--yes'</span>,\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-string\">'-i'</span>: <span class=\"hljs-string\">'--install'</span>,\n</div></li><li><div class=\"code-word\">   },\n</div></li><li><div class=\"code-word\">   {\n</div></li><li><div class=\"code-word\">     argv: rawArgs.slice(<span class=\"hljs-number\">2</span>),\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\"> );\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">   skipPrompts: args[<span class=\"hljs-string\">'--yes'</span>] || <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">   git: args[<span class=\"hljs-string\">'--git'</span>] || <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">   template: args._[<span class=\"hljs-number\">0</span>],\n</div></li><li><div class=\"code-word\">   runInstall: args[<span class=\"hljs-string\">'--install'</span>] || <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export function <span class=\"hljs-title\">cli</span><span class=\"hljs-params\">(args)</span> </span>{\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 获取命令行配置</span>\n</div></li><li><div class=\"code-word\"> let options = parseArgumentsIntoOptions(args);\n</div></li><li><div class=\"code-word\"> console.log(options);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1672\">\n                      上述代码很好理解，我已经加入了相关注释。接下来，我们实现使用默认配置和交互式配置选择逻辑，如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> arg from <span class=\"hljs-string\">'arg'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> inquirer from <span class=\"hljs-string\">'inquirer'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">parseArgumentsIntoOptions</span><span class=\"hljs-params\">(rawArgs)</span> </span>{\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">async function <span class=\"hljs-title\">promptForMissingOptions</span><span class=\"hljs-params\">(options)</span> </span>{\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 默认使用名为 JavaScript 的模板</span>\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">const</span> defaultTemplate = <span class=\"hljs-string\">'JavaScript'</span>;\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 使用默认模板则直接返回</span>\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">if</span> (options.skipPrompts) {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">     ...options,\n</div></li><li><div class=\"code-word\">     template: options.template || defaultTemplate,\n</div></li><li><div class=\"code-word\">   };\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 准备交互式问题 </span>\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">const</span> questions = [];\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">if</span> (!options.template) {\n</div></li><li><div class=\"code-word\">   questions.push({\n</div></li><li><div class=\"code-word\">     type: <span class=\"hljs-string\">'list'</span>,\n</div></li><li><div class=\"code-word\">     name: <span class=\"hljs-string\">'template'</span>,\n</div></li><li><div class=\"code-word\">     message: <span class=\"hljs-string\">'Please choose which project template to use'</span>,\n</div></li><li><div class=\"code-word\">     choices: [<span class=\"hljs-string\">'JavaScript'</span>, <span class=\"hljs-string\">'TypeScript'</span>],\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-keyword\">default</span>: defaultTemplate,\n</div></li><li><div class=\"code-word\">   });\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">if</span> (!options.git) {\n</div></li><li><div class=\"code-word\">   questions.push({\n</div></li><li><div class=\"code-word\">     type: <span class=\"hljs-string\">'confirm'</span>,\n</div></li><li><div class=\"code-word\">     name: <span class=\"hljs-string\">'git'</span>,\n</div></li><li><div class=\"code-word\">     message: <span class=\"hljs-string\">'Initialize a git repository?'</span>,\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">   });\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 使用 inquirer 进行交互式查询，并获取用户答案选项</span>\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">const</span> answers = await inquirer.prompt(questions);\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">   ...options,\n</div></li><li><div class=\"code-word\">   template: options.template || answers.template,\n</div></li><li><div class=\"code-word\">   git: options.git || answers.git,\n</div></li><li><div class=\"code-word\"> };\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export async function <span class=\"hljs-title\">cli</span><span class=\"hljs-params\">(args)</span> </span>{\n</div></li><li><div class=\"code-word\"> let options = parseArgumentsIntoOptions(args);\n</div></li><li><div class=\"code-word\"> options = <span class=\"hljs-function\">await <span class=\"hljs-title\">promptForMissingOptions</span><span class=\"hljs-params\">(options)</span></span>;\n</div></li><li><div class=\"code-word\"> console.log(options);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1674\">这样一来，我们就可以获取到类似：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{ \n</div></li><li><div class=\"code-word\">\tskipPrompts: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">    git: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">    template: <span class=\"hljs-string\">'JavaScript'</span>,\n</div></li><li><div class=\"code-word\">    runInstall: <span class=\"hljs-keyword\">false</span> \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1676\">相关的配置了。</p>\n                    <p data-nodeid=\"1677\">\n                      下面我们需要完成下载模板到本地的逻辑，我们事先准备好两种名为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1881\"\n                        >typescript</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"1883\"\n                        >javascript</code\n                      >的模板，并将相关的模板存储在项目的根目录中。当然你在实际开发应用中，可以内置更多的模板。\n                    </p>\n                    <p data-nodeid=\"1678\">\n                      我们使用<code data-backticks=\"1\" data-nodeid=\"1886\"\n                        >ncp</code\n                      >包实现跨平台递归拷贝文件，使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1888\"\n                        >chalk</code\n                      >做个性化输出。安装相关依赖如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm install ncp chalk\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1680\">\n                      在<code data-backticks=\"1\" data-nodeid=\"1891\">src/</code\n                      >目录下，创建新的文件<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1893\"\n                        >main.js</code\n                      >，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> chalk from <span class=\"hljs-string\">'chalk'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> fs from <span class=\"hljs-string\">'fs'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> ncp from <span class=\"hljs-string\">'ncp'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> path from <span class=\"hljs-string\">'path'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { promisify } from <span class=\"hljs-string\">'util'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> access = promisify(fs.access);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> copy = promisify(ncp);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 递归拷贝文件</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">async function <span class=\"hljs-title\">copyTemplateFiles</span><span class=\"hljs-params\">(options)</span> </span>{\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">return</span> copy(options.templateDirectory, options.targetDirectory, {\n</div></li><li><div class=\"code-word\">   clobber: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\"> });\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 创建项目</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export async function <span class=\"hljs-title\">createProject</span><span class=\"hljs-params\">(options)</span> </span>{\n</div></li><li><div class=\"code-word\"> options = {\n</div></li><li><div class=\"code-word\">   ...options,\n</div></li><li><div class=\"code-word\">   targetDirectory: options.targetDirectory || process.cwd(),\n</div></li><li><div class=\"code-word\"> };\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">const</span> currentFileUrl = <span class=\"hljs-keyword\">import</span>.meta.url;\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">const</span> templateDir = path.resolve(\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">new</span> URL(currentFileUrl).pathname,\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">'../../templates'</span>,\n</div></li><li><div class=\"code-word\">   options.template.toLowerCase()\n</div></li><li><div class=\"code-word\"> );\n</div></li><li><div class=\"code-word\"> options.templateDirectory = templateDir;\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\"> \t <span class=\"hljs-comment\">// 判断模板是否存在</span>\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-function\">await <span class=\"hljs-title\">access</span><span class=\"hljs-params\">(templateDir, fs.constants.R_OK)</span></span>;\n</div></li><li><div class=\"code-word\"> } <span class=\"hljs-keyword\">catch</span> (err) {\n</div></li><li><div class=\"code-word\"> \t <span class=\"hljs-comment\">// 模板不存在 </span>\n</div></li><li><div class=\"code-word\">   console.error(<span class=\"hljs-string\">'%s Invalid template name'</span>, chalk.red.bold(<span class=\"hljs-string\">'ERROR'</span>));\n</div></li><li><div class=\"code-word\">   process.exit(<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 拷贝模板</span>\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-function\">await <span class=\"hljs-title\">copyTemplateFiles</span><span class=\"hljs-params\">(options)</span></span>;\n</div></li><li><div class=\"code-word\"> console.log(<span class=\"hljs-string\">'%s Project ready'</span>, chalk.green.bold(<span class=\"hljs-string\">'DONE'</span>));\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"4446\" class=\"\">\n                      上述代码我们通过<a\n                        href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import.meta\"\n                        data-nodeid=\"4450\"\n                        ><code data-backticks=\"1\" data-nodeid=\"4449\"\n                          >import.meta.url</code\n                        ></a\n                      >来获取当前模块的 URL 路径，并通过<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"4452\"\n                        >fs.constants.R_OK</code\n                      >判断对应模板是否存在。此时<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"4454\"\n                        >cli.js</code\n                      >关键内容为：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> arg from <span class=\"hljs-string\">'arg'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> inquirer from <span class=\"hljs-string\">'inquirer'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { createProject } from <span class=\"hljs-string\">'./main'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">parseArgumentsIntoOptions</span><span class=\"hljs-params\">(rawArgs)</span> </span>{\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">async function <span class=\"hljs-title\">promptForMissingOptions</span><span class=\"hljs-params\">(options)</span> </span>{\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export async function <span class=\"hljs-title\">cli</span><span class=\"hljs-params\">(args)</span> </span>{\n</div></li><li><div class=\"code-word\"> let options = parseArgumentsIntoOptions(args);\n</div></li><li><div class=\"code-word\"> options = <span class=\"hljs-function\">await <span class=\"hljs-title\">promptForMissingOptions</span><span class=\"hljs-params\">(options)</span></span>;\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-function\">await <span class=\"hljs-title\">createProject</span><span class=\"hljs-params\">(options)</span></span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1684\">\n                      接下来，我们需要完成<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1905\"\n                        >git</code\n                      >的初始化以及依赖安装工作，这时候需要用到以下内容。\n                    </p>\n                    <ul data-nodeid=\"1685\">\n                      <li data-nodeid=\"1686\">\n                        <p data-nodeid=\"1687\">\n                          <a href=\"http://npm.im/execa\" data-nodeid=\"1909\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1908\"\n                              >execa</code\n                            ></a\n                          >：允许开发中使用类似<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"1911\"\n                            >git</code\n                          >的外部命令。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1688\">\n                        <p data-nodeid=\"1689\">\n                          <a href=\"http://npm.im/pkg-install\" data-nodeid=\"1915\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1914\"\n                              >pkg-install</code\n                            ></a\n                          >：使用<code data-backticks=\"1\" data-nodeid=\"1917\"\n                            >yarn install</code\n                          >或<code data-backticks=\"1\" data-nodeid=\"1919\"\n                            >npm install</code\n                          >安装依赖。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1690\">\n                        <p data-nodeid=\"1691\">\n                          <a href=\"http://npm.im/listr\" data-nodeid=\"1923\"\n                            ><code data-backticks=\"1\" data-nodeid=\"1922\"\n                              >listr</code\n                            ></a\n                          >：给出当前进度 progress。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1692\">执行安装依赖：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm install execa pkg-install listr\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1694\">\n                      更新<code data-backticks=\"1\" data-nodeid=\"1927\"\n                        >main.js</code\n                      >为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> chalk from <span class=\"hljs-string\">'chalk'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> fs from <span class=\"hljs-string\">'fs'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> ncp from <span class=\"hljs-string\">'ncp'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> path from <span class=\"hljs-string\">'path'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { promisify } from <span class=\"hljs-string\">'util'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> execa from <span class=\"hljs-string\">'execa'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> Listr from <span class=\"hljs-string\">'listr'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { projectInstall } from <span class=\"hljs-string\">'pkg-install'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> access = promisify(fs.access);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> copy = promisify(ncp);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 拷贝模板</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">async function <span class=\"hljs-title\">copyTemplateFiles</span><span class=\"hljs-params\">(options)</span> </span>{\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">return</span> copy(options.templateDirectory, options.targetDirectory, {\n</div></li><li><div class=\"code-word\">   clobber: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\"> });\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 初始化 git</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">async function <span class=\"hljs-title\">initGit</span><span class=\"hljs-params\">(options)</span> </span>{\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 执行 git init</span>\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-function\">await <span class=\"hljs-title\">execa</span><span class=\"hljs-params\">(<span class=\"hljs-string\">'git'</span>, [<span class=\"hljs-string\">'init'</span>], {\n</span></span></div></li><li><div class=\"code-word\">   cwd: options.targetDirectory,\n</div></li><li><div class=\"code-word\"> });\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">if</span> (result.failed) {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">return</span> Promise.reject(<span class=\"hljs-keyword\">new</span> Error(<span class=\"hljs-string\">'Failed to initialize git'</span>));\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 创建项目</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export async function <span class=\"hljs-title\">createProject</span><span class=\"hljs-params\">(options)</span> </span>{\n</div></li><li><div class=\"code-word\"> options = {\n</div></li><li><div class=\"code-word\">   ...options,\n</div></li><li><div class=\"code-word\">   targetDirectory: options.targetDirectory || process.cwd()\n</div></li><li><div class=\"code-word\"> };\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">const</span> templateDir = path.resolve(\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-keyword\">import</span>.meta.url).pathname,\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">'../../templates'</span>,\n</div></li><li><div class=\"code-word\">   options.template\n</div></li><li><div class=\"code-word\"> );\n</div></li><li><div class=\"code-word\"> options.templateDirectory = templateDir;\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\"> \t <span class=\"hljs-comment\">// 判断模板是否存在</span>\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-function\">await <span class=\"hljs-title\">access</span><span class=\"hljs-params\">(templateDir, fs.constants.R_OK)</span></span>;\n</div></li><li><div class=\"code-word\"> } <span class=\"hljs-keyword\">catch</span> (err) {\n</div></li><li><div class=\"code-word\">   console.error(<span class=\"hljs-string\">'%s Invalid template name'</span>, chalk.red.bold(<span class=\"hljs-string\">'ERROR'</span>));\n</div></li><li><div class=\"code-word\">   process.exit(<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 声明 tasks</span>\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">const</span> tasks = <span class=\"hljs-keyword\">new</span> Listr([\n</div></li><li><div class=\"code-word\">   {\n</div></li><li><div class=\"code-word\">     title: <span class=\"hljs-string\">'Copy project files'</span>,\n</div></li><li><div class=\"code-word\">     task: () =&gt; copyTemplateFiles(options),\n</div></li><li><div class=\"code-word\">   },\n</div></li><li><div class=\"code-word\">   {\n</div></li><li><div class=\"code-word\">     title: <span class=\"hljs-string\">'Initialize git'</span>,\n</div></li><li><div class=\"code-word\">     task: () =&gt; initGit(options),\n</div></li><li><div class=\"code-word\">     enabled: () =&gt; options.git,\n</div></li><li><div class=\"code-word\">   },\n</div></li><li><div class=\"code-word\">   {\n</div></li><li><div class=\"code-word\">     title: <span class=\"hljs-string\">'Install dependencies'</span>,\n</div></li><li><div class=\"code-word\">     task: () =&gt;\n</div></li><li><div class=\"code-word\">       projectInstall({\n</div></li><li><div class=\"code-word\">         cwd: options.targetDirectory,\n</div></li><li><div class=\"code-word\">       }),\n</div></li><li><div class=\"code-word\">     skip: () =&gt;\n</div></li><li><div class=\"code-word\">       !options.runInstall\n</div></li><li><div class=\"code-word\">         ? <span class=\"hljs-string\">'Pass --install to automatically install dependencies'</span>\n</div></li><li><div class=\"code-word\">         : undefined,\n</div></li><li><div class=\"code-word\">   },\n</div></li><li><div class=\"code-word\"> ]);\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 并行执行 tasks</span>\n</div></li><li><div class=\"code-word\"> await tasks.run();\n</div></li><li><div class=\"code-word\"> console.log(<span class=\"hljs-string\">'%s Project ready'</span>, chalk.green.bold(<span class=\"hljs-string\">'DONE'</span>));\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1696\">\n                      这样一来，我们的命令行就大功告成了。\n                    </p>\n                    <p data-nodeid=\"1697\">\n                      接下来我们主要谈谈模板维护问题，上述实现中，模板维护在了本地。为了更大范围的合作，模板可以共享到\n                      GitHub 中。我们可以在 package.json 文件中声明 files\n                      字段，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">},\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-string\">\"files\"</span>: [\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"bin/\"</span>,\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"src/\"</span>,\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-string\">\"templates/\"</span>\n</div></li><li><div class=\"code-word\"> ]\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1699\">\n                      以此来声明哪些文件可以被<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1932\"\n                        >npm publish</code\n                      >出去。\n                    </p>\n                    <p data-nodeid=\"1700\">\n                      另外一种做法是将模板单独维护到一个 GitHub\n                      仓库当中。在创建一个项目时，我们使用\n                      <a\n                        href=\"https://www.npmjs.com/package/download-git-repo\"\n                        data-nodeid=\"1937\"\n                        >download-git-repo</a\n                      >来下载模板。\n                    </p>\n                    <h3 data-nodeid=\"1701\">从命令行到万能脚手架</h3>\n                    <p data-nodeid=\"1702\">\n                      前面我们分析了一个命令行的实现和开发原理，这些内容并不复杂。但如何从一个命令行升级到一个万能脚手架呢？我们继续探讨。\n                    </p>\n                    <p data-nodeid=\"1703\">\n                      使用命令行启动并创建一个基于模板的项目只能说是一个脚手架的雏形。对比大家熟悉的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1942\"\n                        >vue-cli</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1944\"\n                        >create-react-app</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1946\"\n                        >@tarojs/cli</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"1948\">umi</code\n                      >等，我们还需要从可伸缩性、用户友好性方面考虑：\n                    </p>\n                    <ul data-nodeid=\"1704\">\n                      <li data-nodeid=\"1705\">\n                        <p data-nodeid=\"1706\">如何使模板支持版本管理</p>\n                      </li>\n                      <li data-nodeid=\"1707\">\n                        <p data-nodeid=\"1708\">模板如何进行扩展</p>\n                      </li>\n                      <li data-nodeid=\"1709\">\n                        <p data-nodeid=\"1710\">如何进行版本检查和更新</p>\n                      </li>\n                      <li data-nodeid=\"1711\">\n                        <p data-nodeid=\"1712\">如何自定义构建</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1713\">下面我们分别来讨论。</p>\n                    <p data-nodeid=\"1714\">\n                      模板支持版本管理可以使用 npm 维护模板，这样借助 npm\n                      的版本管理，我们可以天然地支持不同版本的模板。当然在脚手架的设计中，要加入<strong\n                        data-nodeid=\"1960\"\n                        >对版本的选择和处理</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1715\">\n                      如前文所说，模板扩展可以借助中心化手段，集成开发者力量，提供模板市场。这里需要注意的是，针对不同模板或功能区块的<strong\n                        data-nodeid=\"1966\"\n                        >可插拔性</strong\n                      >是非常重要的。下面我们会具体展开。\n                    </p>\n                    <p data-nodeid=\"3640\" class=\"\">\n                      版本检查可以使用 npm view @lucas/create-project version\\\n                      来进行版本检查，并根据环境版本，提示用户更新。\n                    </p>\n\n                    <p data-nodeid=\"2823\" class=\"\">\n                      构建是一个老大难问题，不同项目的构建需求是不同的。参照<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=584#/detail/pc?id=5952\"\n                        data-nodeid=\"2827\"\n                        >第 23 讲“npm scripts：打造一体化的构建和部署流程”</a\n                      >所讲，不同构建脚本可以考虑<strong data-nodeid=\"2837\"\n                        >单独抽象，提供可插拔式封装</strong\n                      >。比如<a\n                        href=\"https://github.com/yanhaijing/jslib-base/tree/master/packages\"\n                        data-nodeid=\"2835\"\n                        >jslib-base</a\n                      >这个库的设计，这也是一个“万能脚手架”。\n                    </p>\n\n                    <p data-nodeid=\"1718\">\n                      我们具体来看，使用脚手架初始化一个项目的过程，本质是根据输入信息进行模板填充。比如，如果开发者选择使用\n                      TypeScript 以及英语环境构建项目，并使用 rollup\n                      进行构建。那么核心流程中在初始化 rollup.config.js\n                      文件时，我们读取 rollup.js.tmpl，并将相关信息（比如对\n                      TypeScript 的编译）填写到模板中。\n                    </p>\n                    <p data-nodeid=\"1719\">\n                      类似的情况还有初始化\n                      .eslintrc.ts.json、package.json、CHANGELOG.en.md、README.en.md，以及\n                      doc.en.md 等。\n                    </p>\n                    <p data-nodeid=\"1720\">\n                      所有这些文件的生成过程都需要<strong data-nodeid=\"1991\"\n                        >可插拔，更理想的是，这些插件是一个独立的运行时</strong\n                      >。因此我们可以将每一个脚手架文件（即模板文件）的初始化视作一个独立的应用，由命令行统一指挥调度。\n                    </p>\n                    <p data-nodeid=\"1721\">\n                      比如\n                      <a\n                        href=\"https://github.com/yanhaijing/jslib-base/tree/master/packages\"\n                        data-nodeid=\"1995\"\n                        >jslib-base</a\n                      >\n                      这个库对于 rollup 构建的处理，支持开发者传入\n                      option，由命令行处理函数，结合不同的配置版本进行自定义分配。具体代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> path = require(<span class=\"hljs-string\">'path'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> util = require(<span class=\"hljs-string\">'@js-lib/util'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(cmdPath, name, option)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// type 为 js 和 ts 两种</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> type = option.type;\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">// module 分为：umd/esm/commonjs</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">module</span> = option.<span class=\"hljs-keyword\">module</span> = option.<span class=\"hljs-keyword\">module</span>.reduce((prev, name) =&gt; (prev[name] = name, prev), ({}));\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">// rollup 基本配置</span>\n</div></li><li><div class=\"code-word\">    util.copyTmpl(\n</div></li><li><div class=\"code-word\">        path.resolve(__dirname, \\`./template/${type}/rollup.js.tmpl\\`),\n</div></li><li><div class=\"code-word\">        path.resolve(cmdPath, name, <span class=\"hljs-string\">'config/rollup.js'</span>),\n</div></li><li><div class=\"code-word\">        option,\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">// umd 模式</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">module</span>.umd) {\n</div></li><li><div class=\"code-word\">        util.copyFile(\n</div></li><li><div class=\"code-word\">            path.resolve(__dirname, \\`./template/${type}/rollup.config.aio.js\\`),\n</div></li><li><div class=\"code-word\">            path.resolve(cmdPath, name, <span class=\"hljs-string\">'config/rollup.config.aio.js'</span>)\n</div></li><li><div class=\"code-word\">        );\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// esm 模式</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">module</span>.esm) {\n</div></li><li><div class=\"code-word\">        util.copyFile(\n</div></li><li><div class=\"code-word\">            path.resolve(__dirname, \\`./template/${type}/rollup.config.esm.js\\`),\n</div></li><li><div class=\"code-word\">            path.resolve(cmdPath, name, <span class=\"hljs-string\">'config/rollup.config.esm.js'</span>)\n</div></li><li><div class=\"code-word\">        );\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// commonjs 模式</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">module</span>.commonjs) {\n</div></li><li><div class=\"code-word\">        util.copyFile(\n</div></li><li><div class=\"code-word\">            path.resolve(__dirname, \\`./template/${type}/rollup.config.js\\`),\n</div></li><li><div class=\"code-word\">            path.resolve(cmdPath, name, <span class=\"hljs-string\">'config/rollup.config.js'</span>)\n</div></li><li><div class=\"code-word\">        );\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    util.mergeTmpl2JSON(\n</div></li><li><div class=\"code-word\">        path.resolve(__dirname, \\`./template/${type}/<span class=\"hljs-keyword\">package</span>.json.tmpl\\`),\n</div></li><li><div class=\"code-word\">        path.resolve(cmdPath, name, <span class=\"hljs-string\">'package.json'</span>),\n</div></li><li><div class=\"code-word\">        option,\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">'js'</span>) {\n</div></li><li><div class=\"code-word\">        util.copyFile(\n</div></li><li><div class=\"code-word\">            path.resolve(__dirname, \\`./template/js/.babelrc\\`),\n</div></li><li><div class=\"code-word\">            path.resolve(cmdPath, name, <span class=\"hljs-string\">'.babelrc'</span>)\n</div></li><li><div class=\"code-word\">        );\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">'ts'</span>) {\n</div></li><li><div class=\"code-word\">        util.copyFile(\n</div></li><li><div class=\"code-word\">            path.resolve(__dirname, \\`./template/ts/tsconfig.json\\`),\n</div></li><li><div class=\"code-word\">            path.resolve(cmdPath, name, <span class=\"hljs-string\">'tsconfig.json'</span>)\n</div></li><li><div class=\"code-word\">        );\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">    init: init,\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1723\">\n                      如上代码，根据用户输入，使用了不同版本的 rollup 构建内容。\n                    </p>\n                    <p data-nodeid=\"1724\">\n                      相信你了解了这些内容，对于实现一个自己的\n                      create-react-app、vue-cli 会更有心得和启发。\n                    </p>\n                    <h3 data-nodeid=\"1725\">总结</h3>\n                    <p data-nodeid=\"1726\">\n                      这一讲我们从开发一个命令行入手，分析了实现一个脚手架的方方面面。实现一个企业级脚手架需要不断打磨和优化，不断增强用户体验和可操作性，比如处理边界情况、终端提示等。更重要的是，对构建逻辑的抽象和封装，根据业务需求，不断扩展命令和模板。\n                    </p>\n                    <p data-nodeid=\"1727\">本讲内容总结如下：</p>\n                    <p data-nodeid=\"1728\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/17/03/Cgp9HWBHK1WAeFWWAAdEzv-BDFI037.png\"\n                        alt=\"前端基建 金句.png\"\n                        data-nodeid=\"2004\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1729\" class=\"\">\n                      从 0 到 1 简单，但是从 1\n                      开始出发，就需要开发者不断思考和总结。下一讲我们将开启\n                      Node.js 的学习，来实现一个 SSR\n                      应用。我们会直入正题，不再过多学习 Node.js\n                      的基础内容，也请你提前做好准备。\n                    </p>\n            "}