{"title":"18 | 建造者模式：如何创建不同形式的复杂对象？","context":"\n                    <p data-nodeid=\"19486\">\n                      在上一讲中，我们讲解了单例模式以及它的应用场景，并且还实现了一个基于\n                      ThreadLocal\n                      线程级别的全局上下文的完整单例的例子。今天，我们继续往下学习另外一个高频使用的<strong\n                        data-nodeid=\"19601\"\n                        >创建型设计模式——Builder 模式</strong\n                      >，中文一般叫<strong data-nodeid=\"19602\"\n                        >建造者模式</strong\n                      >或<strong data-nodeid=\"19603\">生成器模式</strong>。\n                    </p>\n                    <p data-nodeid=\"19487\">\n                      事实上，建造者模式的代码实现非常简单，原理掌握起来也不难，而难点就在于什么时候采用它。比如，经常会遇到的以下两个问题：\n                    </p>\n                    <ul data-nodeid=\"19488\">\n                      <li data-nodeid=\"19489\">\n                        <p data-nodeid=\"19490\">\n                          为什么直接使用构造函数或者使用 set\n                          方法来创建对象不方便？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19491\">\n                        <p data-nodeid=\"19492\">\n                          为什么一定需要建造者模式来创建？\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"19493\">\n                      好了，带着上面两个问题，让我们开始今天的学习吧！\n                    </p>\n                    <h3 data-nodeid=\"19494\">建造者模式分析</h3>\n                    <p data-nodeid=\"19495\">\n                      在 GoF 的书中，建造者模式的定义是这样的：\n                    </p>\n                    <blockquote data-nodeid=\"19496\">\n                      <p data-nodeid=\"19497\">\n                        将复杂对象的构造与其表示分离，以便同一构造过程可以创建不同的表示。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"19498\">\n                      接下来我们再来看建造者模式的通用 UML 图：\n                    </p>\n                    <p data-nodeid=\"21428\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3E/A6/Cgp9HWCaW2OAYlzHAADXaDdFHb8485.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"21431\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"19502\">\n                      从图中我们可以看到，建造者模式主要包含四个角色。\n                    </p>\n                    <ul data-nodeid=\"19503\">\n                      <li data-nodeid=\"19504\">\n                        <p data-nodeid=\"19505\">\n                          <strong data-nodeid=\"19624\">Product</strong\n                          >：代表最终构建的对象，比如，汽车类。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19506\">\n                        <p data-nodeid=\"19507\">\n                          <strong data-nodeid=\"19629\">Builder</strong\n                          >：代表建造者的抽象基类（可以使用接口来代替）。它定义了构建\n                          Product\n                          的步骤，它的子类（或接口实现类）需要实现这些步骤。同时，它还需要包含一个用来返回最终对象的方法\n                          getProduct()。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19508\">\n                        <p data-nodeid=\"19509\">\n                          <strong data-nodeid=\"19634\">ConcreteBuilder</strong\n                          >：代表 Builder 类的具体实现类。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19510\">\n                        <p data-nodeid=\"19511\">\n                          <strong data-nodeid=\"19639\">Director</strong\n                          >：代表需要建造最终对象的某种算法。这里通过使用构造函数\n                          Construct(Builder builder) 来调用 Builder\n                          的创建方法创建对象，等创建完成后，再通过 getProduct()\n                          方法来获取最终的完整对象。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"19512\">\n                      为了帮助你更好地理解建造者模式，我画了一张<strong\n                        data-nodeid=\"19645\"\n                        >创建一个 Product 所需要的时序图</strong\n                      >，如下图所示：\n                    </p>\n                    <p data-nodeid=\"21976\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3E/A6/Cgp9HWCaW3CAdvInAADIWAQSIV8394.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"21979\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"19516\">\n                      可以看到，这个创建原理还是很简单的。总结来说，就是先创建一个建造者，然后给建造者指定一个构建算法，建造者按照算法中的步骤分步完成对象的构建，最后获取最终对象。\n                    </p>\n                    <p data-nodeid=\"19517\">\n                      下面我们再来看看 UML 图对应的实现代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Product</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> partA;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String partB;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> partC;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Product</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> partA, String partB, <span class=\"hljs-keyword\">int</span> partC)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.partA = partA;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.partB = partB;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.partC = partC;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Product{\"</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"partA=\"</span> + partA +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", partB='\"</span> + partB + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", partC=\"</span> + partC +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'}'</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Builder</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">buildPartA</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> partA)</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">buildPartB</span><span class=\"hljs-params\">(String partB)</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">buildPartC</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> partC)</span></span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\">Product <span class=\"hljs-title\">getResult</span><span class=\"hljs-params\">()</span></span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConcreteBuilder</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Builder</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> partA;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String partB;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> partC;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">buildPartA</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> partA)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.partA = partA;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">buildPartB</span><span class=\"hljs-params\">(String partB)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.partB = partB;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">buildPartC</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> partC)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.partC = partC;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Product <span class=\"hljs-title\">getResult</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Product(partA,partB,partC);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Director</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">construct</span><span class=\"hljs-params\">(Builder builder)</span> </span>{\n</div></li><li><div class=\"code-word\">        builder.buildPartA(<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">        builder.buildPartB(<span class=\"hljs-string\">\"test-test\"</span>);\n</div></li><li><div class=\"code-word\">        builder.buildPartC(<span class=\"hljs-number\">2</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19519\">运行一下单元测试：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">        Director director = <span class=\"hljs-keyword\">new</span> Director();\n</div></li><li><div class=\"code-word\">        Builder builder = <span class=\"hljs-keyword\">new</span> ConcreteBuilder();\n</div></li><li><div class=\"code-word\">        director.construct(builder);\n</div></li><li><div class=\"code-word\">        System.out.println(builder.getResult());\n</div></li><li><div class=\"code-word\">    }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19521\">输出结果如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">Product{partA=<span class=\"hljs-number\">1</span>, partB=<span class=\"hljs-string\">'test-test'</span>, partC=<span class=\"hljs-number\">2</span>}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19523\">\n                      从代码实现中，我们可以分析出建造者模式封装（信息隐藏）了如下变化：\n                    </p>\n                    <ul data-nodeid=\"19524\">\n                      <li data-nodeid=\"19525\">\n                        <p data-nodeid=\"19526\">每个具体建造器的构建步骤；</p>\n                      </li>\n                      <li data-nodeid=\"19527\">\n                        <p data-nodeid=\"19528\">当前正在使用哪一个建造器；</p>\n                      </li>\n                      <li data-nodeid=\"19529\">\n                        <p data-nodeid=\"19530\">现有建造器的数量；</p>\n                      </li>\n                      <li data-nodeid=\"19531\">\n                        <p data-nodeid=\"19532\">\n                          一个建造器里可以创建多个属性的特性。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"19533\">\n                      你会发现，使用建造者模式后对象的职责是保证按照正确的步骤进行自由的组合。\n                    </p>\n                    <h3 data-nodeid=\"19534\">常用场景分析</h3>\n                    <p data-nodeid=\"19535\">\n                      建造者模式有哪些比较常用的场景呢？这里我简单总结了下，在以下四种情况下可以使用建造者模式。\n                    </p>\n                    <ul data-nodeid=\"19536\">\n                      <li data-nodeid=\"19537\">\n                        <p data-nodeid=\"19538\">\n                          <strong data-nodeid=\"19668\"\n                            >需要生成的对象包含多个成员属性。</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19539\">\n                        <p data-nodeid=\"19540\">\n                          <strong data-nodeid=\"19672\"\n                            >需要生成的对象的属性相互依赖，需要指定其生成顺序。</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19541\">\n                        <p data-nodeid=\"19542\">\n                          <strong data-nodeid=\"19676\"\n                            >对象的创建过程独立于创建该对象的类。</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19543\">\n                        <p data-nodeid=\"19544\">\n                          <strong data-nodeid=\"19680\"\n                            >需要隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"19545\">\n                      接下来我们依然通过“没有使用建造者模式”和“使用了建造者模式”这两个对比的例子来帮助你理解建造者模式的常用场景，如下代码所示，我们创建一个打工人的类，每个打工人都需要包含姓名、年龄、电话和性别。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MigrantWorkerOld</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String name;    <span class=\"hljs-comment\">//姓名</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age;        <span class=\"hljs-comment\">//年龄</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String phone;   <span class=\"hljs-comment\">//电话</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String gender;  <span class=\"hljs-comment\">//性别</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MigrantWorkerOld</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age, String phone, String gender)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.name = name;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.age = age;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.phone = phone;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.gender = gender;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MigrantWorkerOld</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age, String phone)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.name = name;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.age = age;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.phone = phone;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MigrantWorkerOld</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.name = name;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.age = age;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"22512\">\n                      上面这段代码没有使用建造者模式，所以我们需要使用传统的\n                      getter、setter 方法，并指定不同的入参来构造对象。\n                    </p>\n                    <p data-nodeid=\"22513\">\n                      而使用建造者模式后的类，功能却发生了完全不一样的变化，如下所示：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MigrantWorker</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//所有属性</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String name;   \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age;       \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String phone;  \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String gender; \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MigrantWorker</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> MigrantWorker <span class=\"hljs-title\">builder</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> MigrantWorker();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//将属性作为步骤</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> MigrantWorker <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(String name)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.name = name;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//将属性作为步骤</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> MigrantWorker <span class=\"hljs-title\">age</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> age)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.age = age;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//将属性作为步骤</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> MigrantWorker <span class=\"hljs-title\">phone</span><span class=\"hljs-params\">(String phone)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.phone = phone;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//将属性作为步骤</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> MigrantWorker <span class=\"hljs-title\">gender</span><span class=\"hljs-params\">(String gender)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.gender = gender;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//执行创建操作</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> MigrantWorker <span class=\"hljs-title\">build</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        validateObject(<span class=\"hljs-keyword\">this</span>);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">validateObject</span><span class=\"hljs-params\">(MigrantWorker migrantWorker)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//可以做基础预校验，或自定义校验</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"MigrantWorker{\"</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"name='\"</span> + name + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", age=\"</span> + age +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", phone='\"</span> + phone + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", gender='\"</span> + gender + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'}'</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19549\">这里我们再写一个简单的单元测试：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">    MigrantWorker migrantWorker1 = MigrantWorker.builder()\n</div></li><li><div class=\"code-word\">            .name(<span class=\"hljs-string\">\"Spike\"</span>)\n</div></li><li><div class=\"code-word\">            .age(<span class=\"hljs-number\">27</span>)\n</div></li><li><div class=\"code-word\">            .phone(<span class=\"hljs-string\">\"1810000111\"</span>)\n</div></li><li><div class=\"code-word\">            .gender(<span class=\"hljs-string\">\"男\"</span>)\n</div></li><li><div class=\"code-word\">            .build();\n</div></li><li><div class=\"code-word\">    System.out.println(migrantWorker1);\n</div></li><li><div class=\"code-word\">    MigrantWorker migrantWorker2 = MigrantWorker.builder()\n</div></li><li><div class=\"code-word\">            .name(<span class=\"hljs-string\">\"Max\"</span>)\n</div></li><li><div class=\"code-word\">            .age(<span class=\"hljs-number\">7</span>)\n</div></li><li><div class=\"code-word\">            .phone(<span class=\"hljs-string\">\"1810000222\"</span>)\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">//没有性别</span>\n</div></li><li><div class=\"code-word\">            .build();\n</div></li><li><div class=\"code-word\">    System.out.println(migrantWorker2);\n</div></li><li><div class=\"code-word\">    MigrantWorker migrantWorker3 = MigrantWorker.builder()\n</div></li><li><div class=\"code-word\">            .name(<span class=\"hljs-string\">\"Mia\"</span>)\n</div></li><li><div class=\"code-word\">            .age(<span class=\"hljs-number\">17</span>)\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">//没有 电话</span>\n</div></li><li><div class=\"code-word\">            .gender(<span class=\"hljs-string\">\"女\"</span>)\n</div></li><li><div class=\"code-word\">            .build();\n</div></li><li><div class=\"code-word\">    System.out.println(migrantWorker3);\n</div></li><li><div class=\"code-word\">    MigrantWorker migrantWorker4 = MigrantWorker.builder()\n</div></li><li><div class=\"code-word\">            .name(<span class=\"hljs-string\">\"Mick\"</span>)\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">//没有 年龄</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">//没有 电话</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">//没有 性别</span>\n</div></li><li><div class=\"code-word\">            .build();\n</div></li><li><div class=\"code-word\">    System.out.println(migrantWorker4);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19551\">得到的输出结果如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">MigrantWorker{name=<span class=\"hljs-string\">'Spike'</span>, age=<span class=\"hljs-number\">27</span>, phone=<span class=\"hljs-string\">'1810000111'</span>, gender=<span class=\"hljs-string\">'男'</span>}\n</div></li><li><div class=\"code-word\">MigrantWorker{name=<span class=\"hljs-string\">'Max'</span>, age=<span class=\"hljs-number\">7</span>, phone=<span class=\"hljs-string\">'1810000222'</span>, gender=<span class=\"hljs-string\">'null'</span>}\n</div></li><li><div class=\"code-word\">MigrantWorker{name=<span class=\"hljs-string\">'Mia'</span>, age=<span class=\"hljs-number\">17</span>, phone=<span class=\"hljs-string\">'null'</span>, gender=<span class=\"hljs-string\">'女'</span>}\n</div></li><li><div class=\"code-word\">MigrantWorker{name=<span class=\"hljs-string\">'Mick'</span>, age=<span class=\"hljs-number\">0</span>, phone=<span class=\"hljs-string\">'null'</span>, gender=<span class=\"hljs-string\">'null'</span>}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19553\">\n                      从输出结果中，你会发现，虽然在创建 MigrantWorker\n                      对象实例时只是指定了不同的属性构建步骤，但却构建出了完全不同的对象实例，而使用传统的\n                      getter、setter\n                      方法，则需要写很多不同的构造函数来应对变化。\n                    </p>\n                    <p data-nodeid=\"19554\">\n                      所以说，使用建造者模式能更方便地帮助我们按需进行对象的实例化，避免写很多不同参数的构造函数，同时还能解决同一类型参数只能写一个构造函数的弊端。\n                    </p>\n                    <h3 data-nodeid=\"19555\">为什么使用建造者模式？</h3>\n                    <p data-nodeid=\"19556\">\n                      虽然上面案例的实现比较简单，但是也充分演示了如何使用建造者模式。在实际的使用中，通常可以<strong\n                        data-nodeid=\"19699\"\n                        >直接使用 lombok 的 @Builder\n                        注解实现类自身的建造者模式</strong\n                      >，或者<strong data-nodeid=\"19700\"\n                        >使用案例中的将自身类作为建造者的方法</strong\n                      >来实现。\n                    </p>\n                    <p data-nodeid=\"23855\">\n                      实际上，<strong data-nodeid=\"23862\"\n                        >所有 JDK 类库中的 Appendable\n                        接口都是实现了建造者模式的优秀范例</strong\n                      >，你若感兴趣的话可自行去研究。\n                    </p>\n                    <p data-nodeid=\"24402\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3E/A6/Cgp9HWCaW4SATCCeAAEZWCOedLE293.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"24406\"\n                      />\n                    </p>\n                    <div data-nodeid=\"24403\" class=\"\">\n                      <p style=\"text-align: center\">\n                        JDK 包中 Appendable 接口的实现类\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"19559\">\n                      那么问题来了，为什么要使用建造者模式来创建类？在我看来，有以下两点原因。\n                    </p>\n                    <p data-nodeid=\"19560\">\n                      <strong data-nodeid=\"19716\"\n                        >第一，分阶段、分步骤的方法更适合多次运算结果类创建场景</strong\n                      >。在面向对象软件开发中，很多时候创建类所需要的参数并不是一次都能准备好的，比如，计算订单优惠价格、查询库存状态等，有的参数可能需要通过调用多个服务运算后才能得出，这时我们可以根据已知参数预先对类进行创建，等有合适的参数时再设置类的属性，而不是等到所有结果都齐备后才去创建类。\n                    </p>\n                    <p data-nodeid=\"24939\" class=\"\">\n                      <strong data-nodeid=\"24944\"\n                        >第二，不需要关心特定类型的建造者的具体算法实现。</strong\n                      >\n                      比如，我们在使用 StringBuilder\n                      时，并不太关心它的具体代码实现，而是关心它提供给我们的使用功能。这在某些需要快速复用的场景中，能起到提升编码效率的作用。而换个角度来看，当你需要给别人提供一个建造者来创建类时，你就需要严格地设计你的建造者，并保证你的建造者类能够创建符合预期的类。\n                    </p>\n\n                    <h3 data-nodeid=\"19562\">收获什么？损失什么？</h3>\n                    <p data-nodeid=\"19563\">\n                      那使用建造者模式我们能收获什么呢？也就是建造者模式的优点有哪些呢？我总结出以下三点。\n                    </p>\n                    <ul data-nodeid=\"26036\">\n                      <li data-nodeid=\"26037\">\n                        <p data-nodeid=\"26038\">\n                          <strong data-nodeid=\"26047\">分离创建与使用。</strong>\n                          在建造者模式中，\n                          使用方不必知道你的内部实现算法（步骤）的细节，通过统一方法接口的调用，可以自由组合出不同的对象实例。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"26039\">\n                        <p data-nodeid=\"26040\" class=\"\">\n                          <strong data-nodeid=\"26052\">满足开闭原则。</strong>\n                          每一个建造者都相对独立，因此能方便地进行替换或新增，这就大大提升了代码的可扩展性。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"26041\">\n                        <p data-nodeid=\"26042\">\n                          <strong data-nodeid=\"26057\"\n                            >自由地组合对象的创建过程</strong\n                          >。由于建造者模式将复杂的创建步骤拆分为单个独立的创建步骤，这不仅使得代码的可读性更高，也使得在创建过程中，使用者可以根据自己的需要灵活创建。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"19571\">\n                      当然，除了以上优点外，建造者模式也有一些缺点。\n                    </p>\n                    <ul data-nodeid=\"27157\">\n                      <li data-nodeid=\"27158\">\n                        <p data-nodeid=\"27159\">\n                          <strong data-nodeid=\"27169\">使用范围有限。</strong>\n                          建造者模式所创建的对象一般都需要有很多的共同点，如果对象实例之间的差异性很大，则不适合使用建造者模式。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27160\">\n                        <p data-nodeid=\"27161\">\n                          <strong data-nodeid=\"27174\">容易引起超大的类</strong\n                          >。我们都知道一辆汽车内部构造其实很复杂，作为开发者的你其实更关心的是像发动机、轮胎这样具备重用性的组件。一旦过度定制化对象创建的过程步骤，那么随着创建对象新需求的出现或变化，新的创建步骤就会被加进来，这会造成代码量的急剧膨胀，最终形成一个庞大的超大类。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27162\">\n                        <p data-nodeid=\"27163\" class=\"te-preview-highlight\">\n                          <strong data-nodeid=\"27179\">增加代码行数。</strong>\n                          虽然建造者模式能够提高代码的可阅读性，但也会以增加代码行数来作为代价。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"27164\">总结</h3>\n\n                    <p data-nodeid=\"19580\">\n                      你会发现，在现实中，我们经常会遇见很多使用建造者模式的软件，比如，Maven、Ant\n                      之类的自动化构建系统，再比如，Jenkins\n                      等持续集成系统，它们实际上都是使用了建造者模式的具体例子。\n                    </p>\n                    <p data-nodeid=\"19581\">\n                      建造者模式的主要优点在于客户端不必知道对象内部组成的细节，将创建与使用进行了很好的解耦，使得我们可以使用相同的创建过程创建不同的对象，因此符合“开闭原则”，能够极大地提升代码的复用性。同时，因为每一个对象属性的创建步骤都被独立出来，所以还可以更加精细地控制对象的创建过程。\n                    </p>\n                    <p data-nodeid=\"19582\">\n                      不过，缺点也同样突出。当我们使用建造者模式创建对象时，需要对象具备更多的共同点才能抽象出更适合的步骤，因此使用范围会受到很大的限制，一旦产品内部开始变得复杂，可能就会导致需要定义很多定制化的建造者类来适应这种变化，从而导致代码变得非常庞大。\n                    </p>\n                    <p data-nodeid=\"19583\">\n                      应用建造者模式的关键就在于<strong data-nodeid=\"19759\"\n                        >抓住拆分步骤</strong\n                      >，这是与工厂模式最大的区别所在。如果把建造者模式比作汽车整体组装工厂，那么工厂模式就是汽车配件组装工厂，前者侧重于把对象按照特定步骤组装完整，后者侧重于把组成对象的每一个属性或方法做得更通用后再组装。一定不要以为只要叫“工厂”就是指我们通常认为的统一组装模式。\n                    </p>\n                    <h3 data-nodeid=\"19584\">课后思考</h3>\n                    <p data-nodeid=\"19585\">\n                      如果使用建造者模式时，发现某一个步骤缺失，这时有什么办法可以不改动代码就能完成对象的构建呢？\n                    </p>\n                    <p data-nodeid=\"19586\">\n                      欢迎你留言分享，我会第一时间给你回复。\n                    </p>\n                    <p data-nodeid=\"19587\">\n                      在下一讲，我会接着与你分享“抽象工厂模式：如何统一不同代码风格下的代码级别？”这个话题，记得按时来听课！\n                    </p>\n            "}