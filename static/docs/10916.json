{"title":"15 | 高级进阶：WebView 层及代码架构层面优化","context":"\n                    <p data-nodeid=\"19246\">\n                      上一讲我介绍了图片骨架屏和 SSR\n                      这两种优化方案，它主要聚焦于白屏优化，接下来这一讲我将介绍\n                      WebView 层面的优化和前端架构性能方面的调优。\n                    </p>\n                    <p data-nodeid=\"19247\">\n                      为什么是这两个方面呢？首先 WebView\n                      是我们经常使用到的工具，在我们开发 App\n                      过程中起到非常重要的载体作用，甚至我还曾见过专门招聘\n                      WebView\n                      开发工程师的信息。而前端架构的某些因素也会严重影响我们的前端性能体验，所以，这一讲我就重点来介绍下它们。\n                    </p>\n                    <h3 data-nodeid=\"19248\">WebView 性能优化</h3>\n                    <p data-nodeid=\"19249\">\n                      WebView 是一个基于 WebKit 引擎、展现 Web 页面的控件， App\n                      打开 WebView\n                      的第一步不是请求连接，而是启动浏览器内核。这意味着，在浏览器端，我们输入地址就开始请求加载页面，但在\n                      App 内，我们还需要先初始化 WebView 然后才能请求和加载。\n                    </p>\n                    <p data-nodeid=\"19250\">\n                      这会造成什么结果呢？同一个页面，在 App\n                      端外反而比端内打开速度更快。因为在 App 内，WebView\n                      还需要先进行初始化，这需要时间，且这个初始化时间还和\n                      WebView 类型有关。其中 Android 下只有一个 WebView，而iOS\n                      下却分 UIWebView 和 WKWebView。以我们 iOS 端使用的\n                      UIWebView 为例，需要 400ms 左右，如果是\n                      WKWebView，时间会更短，但基本也会占首屏时间的 30%左右。\n                    </p>\n                    <p data-nodeid=\"19251\">\n                      怎么解决这个问题呢？这就需要进行 WebView 优化了，\n                      一般它的优化包括资源缓存、并行初始化、资源预加载和数据接口请求优化，以及更换\n                      WebView 内核等。\n                    </p>\n                    <p data-nodeid=\"19252\">\n                      其中缓存选用方面比较简单，直接选用的浏览器默认缓存。而更换\n                      WebView\n                      内核，往往会因为需要进行灰度处理，必须一段时间内（通常几个月）并行两套\n                      WebView 方案，很容易出现系统性风险，比如修改一个严重 Bug\n                      后，前端工程师不知道用户端什么时候生效。所以，在这里，我着重介绍下\n                      WebView 优化里面的<strong data-nodeid=\"19314\"\n                        >并行初始化、资源预加载、数据接口请求优化</strong\n                      >三个方案。\n                    </p>\n                    <h4 data-nodeid=\"19253\">并行初始化</h4>\n                    <p data-nodeid=\"19254\">\n                      所谓并行初始化，是指用户在进入 App 时，系统就创建 WebView\n                      和加载模板，这样 WebView 初始化和 App\n                      启动就可以并行进行了，这大大减少了用户等待时间。\n                    </p>\n                    <p data-nodeid=\"19255\">\n                      如果是使用 native\n                      开发的应用，根据用户在首页的访问路径，选择初始化策略，操作体验会更好。以携程\n                      App\n                      为例，假设用户进入首页后，停留在西双版纳自由行区域，直接加载\n                      WebView\n                      和模板，两者同时运行，此时首屏主要工作就变成加载接口请求数据和渲染模板部分的工作了。\n                    </p>\n                    <p data-nodeid=\"19256\">\n                      为了减少 WebView\n                      再次初始化的时间，我们可以在使用完成后不进行注销，将里面数据清空，放进\n                      WebView\n                      池子里面，下次使用时，直接拿过来注入数据使用即可。注意，使用时，要对\n                      WebView 池子进行容量限制，避免出现内存问题。\n                    </p>\n                    <p data-nodeid=\"19257\">\n                      另外还需注意一点，由于初始化过程本身就需要时间，我们如果直接把它放到\n                      UI 线程，会导致打开页面卡死甚至 ANR（Application Not\n                      Responding，应用无响应），所以，我建议将初始化过程放到子线程中，初始化结束后才添加到\n                      View 树中。\n                    </p>\n                    <h4 data-nodeid=\"19258\">资源预加载</h4>\n                    <p data-nodeid=\"19259\">\n                      资源预加载，是指提前在初始化的 WebView\n                      里面放置一个静态资源列表，后续加载东西时，由于这部分资源已经被强缓存了，页面显示速度会更快。那么，要预加载的静态资源一般可以放哪些呢？\n                    </p>\n                    <ul data-nodeid=\"19260\">\n                      <li data-nodeid=\"19261\">\n                        <p data-nodeid=\"19262\">\n                          一定时间内（如 1 周）不变的外链；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19263\">\n                        <p data-nodeid=\"19264\">\n                          一些基础框架，多端适配的 JS（如\n                          adapter.js），性能统计的 JS（如\n                          perf.js）或者第三方库（如 vue.js）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"19265\">\n                        <p data-nodeid=\"19266\">基础布局的 CSS 如 base.css。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"19267\">\n                      一般在 App 启动时，系统就加载一个带有通用资源模版的 HTML\n                      页面，虽然这些静态资源不经常变化，但如果变化呢？怎么避免因变化导致\n                      App 频繁发布版本的麻烦呢？\n                    </p>\n                    <p data-nodeid=\"19268\">\n                      一个办法是通过静态资源预加载后台进行管理。具体的话，我们不需要从\n                      0 到 1 搭建，只需要在离线包后台添加一个栏目即可。\n                    </p>\n                    <p data-nodeid=\"19269\">\n                      在业务接入预加载功能时，前端工程师通过静态资源预加载后台发布出一个静态资源列表页，然后把它的\n                      URL 提供给 App，App 启动时会对这个 URL\n                      下页面中的静态资源进行预加载。之后，前端工程师就可以查看静态资源的编号\n                      ID、URL 和类型，进行删除、添加等管理操作。\n                    </p>\n                    <p data-nodeid=\"19270\">\n                      不要小看这一点，通过这种做法，我们手机列表页 13\n                      个文件缓存后，首屏时间从 1050ms 降低到了 900ms。\n                    </p>\n                    <h4 data-nodeid=\"19271\">数据接口请求优化</h4>\n                    <p data-nodeid=\"19272\">\n                      数据接口请求优化，主要是通过同域名策略和客户端代理数据请求来实现。\n                    </p>\n                    <p data-nodeid=\"19273\">\n                      其中，同域名策略是指前端页面和资源加载，尽量和 App\n                      使用的数据接口在同一个域名下，这样域名对应的 DNS\n                      解析出来的\n                      IP，由于已经在系统级别上被缓存过了，大大降低了加载时间。\n                    </p>\n                    <p data-nodeid=\"19274\">\n                      比如，58 App 客户端请求域名主要集中在\n                      api.58.com，请求完这个地址后，DNS\n                      将会被系统缓存，而前端资源的请求地址在 i.58.com，打开\n                      WebView 后，由于请求了不同的地址，还需要重新去 DNS\n                      服务器去查询 i.58.com 对应的 IP，而如果前端也改到\n                      api.58.com后，DNS 查询的时间可以从原来的将近 80ms 降低到几\n                      ms。\n                    </p>\n                    <p data-nodeid=\"19275\">\n                      客户端代理数据请求，则是指把前端的数据请求拦截起来，通过客户端去发送数据请求。因为正常的页面加载顺序是，前端在\n                      HTML，CSS，JS 拉取下来之后才开始由 JS 发起前端的 ajax\n                      请求，获取到数据后程序才开始进行填充。而我们通过客户端代理数据请求，可以把前端的\n                      ajax 请求提前到与页面加载同时进行，由客户端请求数据，等 H5\n                      加载完毕，直接向客户端索要即可。如此一来，便缩短了总体的页面加载时间。\n                    </p>\n                    <p data-nodeid=\"19276\">\n                      注意，这里的数据拦截环节，<strong data-nodeid=\"19339\"\n                        >Android 端可以重写WebViewClient的shouldInterceptRequest\n                        方法，iOS 端没有类似的方法，只能通过私有 API\n                        方案、自定义协议方案和 LocalWebServer 来实现</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"19277\">前端架构性能调优</h3>\n                    <p data-nodeid=\"19278\">\n                      前端架构性能优化，是指通过在前端开发、编译、打包发布环节所作的优化，以此来提升前端性能的方案。因为我们比较关注首屏时间，对这方面贡献比较大的是开发和打包发布这两个环节，所以接下来我着重介绍下\n                      Vue 开发过程中的长列表性能优化和 webpack\n                      打包分析层面的优化。\n                    </p>\n                    <h4 data-nodeid=\"19279\">长列表性能优化</h4>\n                    <p data-nodeid=\"19280\">\n                      一般，Vue 会借助 Object.defineProperty 这个 ES5\n                      规范的方法，对数据进行劫持，即通过在某个对象上定义一个新属性或者修改一个属性，实现视图响应数据的变化。\n                    </p>\n                    <p data-nodeid=\"19281\">这会造成什么影响呢？</p>\n                    <p data-nodeid=\"19282\">\n                      在一些纯展示的场景里面，比如电商列表页面，如果还允许 Vue\n                      劫持我们的数据，会花费很多的组件初始化时间。这种情况下，怎么做呢？可以使用\n                      Object.freeze 冻结这个对象从而避免修改。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">export <span class=\"hljs-keyword\">default</span> { \n</div></li><li><div class=\"code-word\">  data: () =&gt; ({ goodsList: [] }), \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\">async <span class=\"hljs-title\">created</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> goodsList = await <span class=\"hljs-keyword\">this</span>.$service.get(<span class=\"hljs-string\">\"/getGoodsList\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.goodsList = Object.freeze(goodsList); \n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19284\">\n                      以前面提到的列表页面优化为例。我先定义一个 goodsList\n                      的空对象，通过 async 将 created\n                      钩子函数的返回值（也就是一个商品列表）封装成一个异步\n                      Promise 对象，然后在 created 钩子函数中向 getGoodsList\n                      接口获取数据。\n                    </p>\n                    <p data-nodeid=\"19285\">\n                      其中，Vue 的生命周期里对外暴露的 created 钩子，表示 Vue\n                      实例被创建但还没有渲染到浏览器的阶段；await\n                      表示当拿到返回的数据结果后，Vue 实例才会通过 Object.freeze\n                      把 goodsList 结果冻结，即 goodsList\n                      对象展示过程中，数据变化时，视图将不再更新。\n                    </p>\n                    <p data-nodeid=\"19286\">\n                      通过以上步骤，最终提升商品列表页的性能。\n                    </p>\n                    <h4 data-nodeid=\"19287\">打包优化</h4>\n                    <p data-nodeid=\"19288\">\n                      打包优化方面，我们可以通过 webpack 插件来完成。 wepack\n                      输出的代码可读性较差，而且文件比较大，我们很难了解打包后的情况，更别说如何优化了。为了直观分析打包结果，我们可以使用一个\n                      webpack\n                      插件——webpack-bundle-analyzer，通过它可以对打包结果进行可视化分析。\n                    </p>\n                    <p data-nodeid=\"19289\">具体怎么实现呢？</p>\n                    <p data-nodeid=\"19290\">\n                      我们在 wepack 中加入以下代码来实现打包分析。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// vue-cli3 提供的一种高级技巧，链式操作</span>\n</div></li><li><div class=\"code-word\">  chainWebpack (config) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 意思只在打包时起作用</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (process.env.NODE_ENV === <span class=\"hljs-string\">'production'</span>) {\n</div></li><li><div class=\"code-word\">      config.plugin(<span class=\"hljs-string\">'webpack-bundle-analyzer'</span>)\n</div></li><li><div class=\"code-word\">        .use(require(<span class=\"hljs-string\">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin)\n</div></li><li><div class=\"code-word\">        .end()\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }  \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"19292\">\n                      这里面 chainWebpack 是 vue3\n                      提供的一种高级操作——链式操作，通过它可以快捷完成一些方法的调用。代码中添加\n                      process.env.NODE_ENV ===\n                      'production'是为了让代码只在打包时起作用。<br />\n                      做完以上操作后，运行 npm run build\n                      --report，即可后生成一个分析报告。\n                    </p>\n                    <p data-nodeid=\"19886\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/31/1F/Cgp9HWBsJq2AXSKWAAfeHG3LQqY567.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"19889\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"19294\">\n                      当我们拿着鼠标在上面滑动时，就可以看到整个包的组成部分，以及每部分的信息。一般我们可以找内容比较大的方面，然后分析原因进行优化。\n                    </p>\n                    <p data-nodeid=\"19295\">\n                      比如，有次游戏业务发现打包目录超过了10MB，仔细定位发现是有些\n                      game.map 的文件打包上来了。虽然 game.map\n                      文件便于我们开发时调解\n                      bug，准确定位错误的位置，但在这里却影响了我们的性能体验。找到原因后，解决它也很简单了，直接在打包时，关闭\n                      sourcemap，即在配置文件中增加productionSourceMap:false\n                      就可以了。\n                    </p>\n                    <h3 data-nodeid=\"19296\">小结</h3>\n                    <p data-nodeid=\"19297\">\n                      好了，以上就是 WebView\n                      性能优化和代码架构层的优化，这里面有一些注意事项。WebView\n                      会占用一定的内存，如果使用 WebView\n                      缓存池进行优化，会出现内存占用多的问题，我们可以将 WebView\n                      放到独立进程中，避免内存泄漏。当然，WebView\n                      独立进程的话，就需要解决进程间调用问题，一般可以直接使用\n                      Aidl 来解决。\n                    </p>\n                    <p data-nodeid=\"19298\">下面给你留一个问题：</p>\n                    <blockquote data-nodeid=\"19299\">\n                      <p data-nodeid=\"19300\">\n                        目前你一般对 WebView 进行哪些方面的优化？\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"19301\">\n                      欢迎在评论区和我沟通，下一讲我将介绍预请求、预加载及预渲染机制方面的内容。\n                    </p>\n            "}