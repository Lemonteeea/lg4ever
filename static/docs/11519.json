{"title":"17 | 系统的实践设计（上）：完成一个通用抢票系统","context":"\n                    <p data-nodeid=\"113072\" class=\"\">\n                      互联网公司经常举办福利活动，比如“ 9.9\n                      元电影票活动”，并以回帖的方式进行（前 500\n                      名回复者获得奖励）。为了参加活动，你需要报名然后快速回帖，如果几万个人同时回帖，并发肯定极大，很可能导致回帖直接卡住，这时候先报名的同学根本无法回帖，只能不断进行重试，那有没有更公平有效的方式保证先来先得呢？\n                    </p>\n                    <p data-nodeid=\"113073\">\n                      Node.js\n                      适合做这种通用的高并发服务，正好可以解决这类并发抢票的问题，所以接下来我就用两讲的时间和你一起实现一个通用的抢票系统，这样一来，你可以自己配置票种，然后导入系统中，在自己公司内部和同事一起来玩这个抢票游戏了。\n                    </p>\n                    <p data-nodeid=\"113074\">\n                      一般来讲，一个后台系统的设计首先需要了解产品的需求（核心就是该服务应该解决什么问题），从问题出发，分析系统的一些核心特点，在此基础上去设计系统架构、数据库、接口、开发代码以及联调，提测上线。今天这一讲，我们也按照这个流程来学习。\n                    </p>\n                    <h3 data-nodeid=\"113075\">系统的核心特点</h3>\n                    <p data-nodeid=\"113076\">\n                      根据抢票的例子，我们可以提炼出这个系统的核心特点：\n                    </p>\n                    <ol data-nodeid=\"113077\">\n                      <li data-nodeid=\"113078\">\n                        <p data-nodeid=\"113079\">抢票活动可配制化；</p>\n                      </li>\n                      <li data-nodeid=\"113080\">\n                        <p data-nodeid=\"113081\">抢票并发较大；</p>\n                      </li>\n                      <li data-nodeid=\"113082\">\n                        <p data-nodeid=\"113083\">物品有限，一定不能超出；</p>\n                      </li>\n                      <li data-nodeid=\"113084\">\n                        <p data-nodeid=\"113085\">\n                          安全性重要，避免一些非法获利；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113086\">\n                        <p data-nodeid=\"113087\">抢票结果可导出分析。</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"113088\">\n                      分析这 5\n                      个特点，我们先设计出整体的架构，看一下需要哪些技术来支撑这个系统。\n                    </p>\n                    <h3 data-nodeid=\"113089\">架构说明</h3>\n                    <p data-nodeid=\"113090\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3B/EF/Cgp9HWCHs9uASQd_AAEmJyLM3ZA530.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"113368\"\n                      />\n                    </p>\n                    <div data-nodeid=\"113091\">\n                      <p style=\"text-align: center\">通用抢票系统架构</p>\n                    </div>\n                    <p data-nodeid=\"113092\">\n                      从图中我们可以看到，需要以下 5 点技术来支撑上述系统：\n                    </p>\n                    <ol data-nodeid=\"113093\">\n                      <li data-nodeid=\"113094\">\n                        <p data-nodeid=\"113095\">\n                          Nginx 作为负载均衡，其次作为域名的一个接入点；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113096\">\n                        <p data-nodeid=\"113097\">\n                          Node.js\n                          核心服务，这里我会把课程中涉及的各种功能应用上，比如\n                          PM2、压测、监控、日志、安全以及过载保护机制；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113098\">\n                        <p data-nodeid=\"113099\">\n                          考虑到高性能，在 Node.js\n                          核心服务中，部分信息还会直接缓存在本地，减少与 Redis\n                          交互次数；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113100\">\n                        <p data-nodeid=\"113101\">\n                          Node.js 核心服务交互都只会和 Redis\n                          进行，包括获取活动、票信息以及抢票等，Redis\n                          的数据来源主要是配置文件、异步更新等，由于涉及抢票，所以要用到\n                          Redis\n                          一些原子操作来进行处理（下一讲代码实现中会详细说明）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113102\">\n                        <p data-nodeid=\"113103\">\n                          MongoDB\n                          会作为部分数据的落地处理，只是简单的异步方式，不影响核心主线程，比如存储某个人的抢票结果；\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"113104\">\n                      考虑到高性能，我们不会在任何一个接口中，去等待 MongoDB\n                      操作结束后再响应用户请求（08 讲中我提到要用高性能的网络\n                      I/O 替换低性能网络 I/O），在本系统的接口实现中都是与高性能\n                      I/O Redis 缓存服务来交互。\n                    </p>\n                    <p data-nodeid=\"113105\">\n                      当整体架构设计完成后，因为后台服务的核心是数据交互，所以你要继续要思考数据库结构的设计方案，接下来我们就来看一下\n                      MongoDB 需要存储哪些信息、Redis 需要存储哪些信息。\n                    </p>\n                    <h3 data-nodeid=\"113106\">数据库设计</h3>\n                    <p data-nodeid=\"113107\">\n                      根据抢票系统的架构设计图，我们需要用到3\n                      种数据存储的服务：本地服务器缓存；Redis 缓存；MongoDB\n                      存储。咱们先分析一下底层的 MongoDB。\n                    </p>\n                    <h4 data-nodeid=\"113108\">MongoDB 存储</h4>\n                    <p data-nodeid=\"115498\">\n                      上述场景需求中，涉及了用户、活动、票以及抢票结果，与这些场景属性对应的是：用户表、活动表、票表、票的券码表和用户票列表（也就是抢票结果）\n                      5 个表，我们先来看下用户表。\n                    </p>\n                    <p data-nodeid=\"115499\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3B/F6/Cgp9HWCHxM2AVJF9AAEESFYZzXQ742.png\"\n                        alt=\"2021427-16051.png\"\n                        data-nodeid=\"115504\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"113267\" class=\"\">\n                      以上就是 MongoDB\n                      中要保存的原始数据（无论是接口响应数据还是各种缓存存储数据，都是来自原始数据表）。接下来你需要将一部分原始数据落入本地缓存和\n                      Redis 缓存中，特别是一些高频访问的数据，使用高性能的网络\n                      I/O 替换低性能的网络 I/O 。\n                    </p>\n                    <p data-nodeid=\"113268\">\n                      那什么数据需要缓存到 Redis\n                      中，什么数据需要本地服务器缓存呢？我们一个一个分析。\n                    </p>\n                    <h4 data-nodeid=\"113269\">Redis 存储</h4>\n                    <p data-nodeid=\"113270\">\n                      因为要拉取进行中的<strong data-nodeid=\"113552\"\n                        >活动列表</strong\n                      >，所以你要把活动列表缓存到 Redis\n                      中，防止数据量过多。比如只缓存前 100 个进行中的活动（100\n                      是个例子，你需要了解自己系统中用户的习惯，一般情况下前 100\n                      个就可以囊括了 99%\n                      的用户了）在这里你可以按照分页来缓存，比如 20\n                      个一页，那么可以用 activity_list_page_1\n                      、activity_list_page_2 ... activity_list_page_5\n                      这种键名来保存。对于我们这个系统的场景超出 5\n                      页的数据，由于访问极少，我们可以直接读取数据库。\n                    </p>\n                    <p data-nodeid=\"113271\">\n                      <strong data-nodeid=\"113569\"\n                        >而活动详情是访问最大量的请求，</strong\n                      >\n                      所以你要把在线的活动列表的详情缓存在 Redis 中（可以使用\n                      activity_info_id_001 、 activity_info_id_002\n                      这样的键名）。\n                    </p>\n                    <p data-nodeid=\"113272\">\n                      <strong data-nodeid=\"113578\"\n                        >票详情基本都是一致的，</strong\n                      >\n                      但是它的访问频次也较高，所以可以把票详情存储在 Redis\n                      中，以 ticket_id_001 的方式保存。\n                    </p>\n                    <p data-nodeid=\"113273\">\n                      <strong data-nodeid=\"113589\">针对券码列表，</strong>\n                      因为票券码需要存储在一个 Redis 队列中，所以你要设计一个\n                      activity_ticket_codes_001 以活动 id 为标识。\n                    </p>\n                    <p data-nodeid=\"113274\">\n                      <strong data-nodeid=\"113594\">针对获取票结果，</strong>\n                      因为用户参与活动后会获得券码，或者没有获得券码，但是要标记用户是否参与了本次活动的结果，由于这种访问频次非常高，因此需要将该数据保存在缓存中。\n                    </p>\n                    <p data-nodeid=\"113275\">\n                      最后，<strong data-nodeid=\"113600\">个人的票列表</strong\n                      >一般访问并发较少，其次缓存意义也不大，因为每个人的票列表不一样。\n                    </p>\n                    <h4 data-nodeid=\"113276\">本地服务器缓存</h4>\n                    <p data-nodeid=\"113277\">\n                      根据 09\n                      讲涉及的知识，我们只能缓存基本不变化以及数据量较少的数据。而\n                      Redis 中的数据，<strong data-nodeid=\"113607\"\n                        >活动详情、票详情基本不变，</strong\n                      >\n                      可以缓存在本地服务器上；但是活动列表因为有时间概念，最好不要直接缓存在本地服务，避免更新不及时，多个服务器返回的列表不一致的情况。\n                    </p>\n                    <p data-nodeid=\"113278\">\n                      明确数据库以及缓存数据的设计后，接下来就要了解数据的流转以及变化，而数据的流转变化都在接口中进行处理，所以要继续分析\n                      Node.js 核心服务中包含的接口，以及每个接口的时序图。\n                    </p>\n                    <h3 data-nodeid=\"113279\">接口设计</h3>\n                    <p data-nodeid=\"113280\">\n                      我们先来看一下抢票活动的应用场景：用户先进入活动列表页面，选择相应的活动，进入活动详情，然后点击抢票，最终在抢票列表结果页面查看票证的详情。\n                    </p>\n                    <p data-nodeid=\"113281\">\n                      根据该抢票场景，涉及的接口有 5 个。\n                    </p>\n                    <ol data-nodeid=\"113282\">\n                      <li data-nodeid=\"113283\">\n                        <p data-nodeid=\"113284\">\n                          活动列表：显示当前可以参与的抢票活动列表；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113285\">\n                        <p data-nodeid=\"113286\">\n                          活动详情：获取抢票活动信息，根据用户是否登录，获取用户是否已经参与过活动；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113287\">\n                        <p data-nodeid=\"113288\">\n                          抢票接口：携带活动 ID\n                          ，需要判断用户是否有登录权限，活动是否已经结束，用户是否已经参与过；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113289\">\n                        <p data-nodeid=\"113290\">\n                          票列表：需要显示用户抢到的票列表；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113291\">\n                        <p data-nodeid=\"113292\">\n                          票详情：显示具体的票证详情，为后续提供一些认证信息。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"113293\">\n                      根据以上接口，我们来分析其所对应的时序图。\n                    </p>\n                    <h4 data-nodeid=\"113294\">活动列表</h4>\n                    <p data-nodeid=\"113295\">\n                      我们先来设计一下活动列表的接口参数以及返回结构：由于是活动列表，所以需要携带翻页数据（这里我们简单用\n                      pageSize 来翻页，默认每页 20 条数据）。\n                    </p>\n                    <div data-nodeid=\"113296\">\n                      <p style=\"text-align: center\">表格 6 活动列表接口参数</p>\n                    </div>\n                    <p data-nodeid=\"113297\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3B/F7/CioPOWCHtCOAQdDiAABbA8HTaXk689.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"113622\"\n                      />\n                    </p>\n                    <p data-nodeid=\"113298\">接下来，我们看下返回的数据：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"ret\"</span>:<span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"message\"</span>:<span class=\"hljs-string\">\"success\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"data\"</span>:{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"pageNum\"</span> : <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"hasMore\"</span>: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"pageSize\"</span>: <span class=\"hljs-number\">20</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"lastId\"</span>: <span class=\"hljs-string\">\"0022\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"list\"</span>: [\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"id\"</span>:<span class=\"hljs-string\">\"111\"</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"抢洗头券\"</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"desc\"</span>:<span class=\"hljs-string\">\"周六日前往，可免费体验\"</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"image\"</span>:<span class=\"hljs-string\">\"xxxx\"</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"start_time\"</span>:<span class=\"hljs-number\">1422222333</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"end_time\"</span>:<span class=\"hljs-number\">1444444444</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    ]\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"113300\">\n                      在上面数据结构中，最外层是我们框架的基本结构，而在 data\n                      中第一层是翻页配置，list\n                      中则是具体的活动数据结构。而整个接口的时序图就如图 2\n                      所示：\n                    </p>\n                    <p data-nodeid=\"113301\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3B/EF/Cgp9HWCHtDmADmj3AAB9ykWJBzM920.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"113627\"\n                      />\n                    </p>\n                    <div data-nodeid=\"113302\">\n                      <p style=\"text-align: center\">图 2 活动列表时序图</p>\n                    </div>\n                    <p data-nodeid=\"113303\">\n                      图 2 中的 Activity-C 是活动 Controller 类，S 则为\n                      Service，M 则是 Model ，Redis 是我们的 Cache 类。\n                    </p>\n                    <p data-nodeid=\"113304\">\n                      首先，接口请求到 Controller 中，然后去 Service\n                      中拉取在线的活动列表，这时候需要通过 Redis\n                      数据层来获取缓存数据，如果成功获取直接返回，如果获取失败则需要从\n                      Model\n                      层去重新获取，获取成功则再次缓存到数据层中，最后再返回到接口调用方。\n                    </p>\n                    <p data-nodeid=\"113305\">\n                      在图 2 中，我们发现活动列表的大部分逻辑都经过 Service\n                      层来处理，这其中的主要原因在于：我们希望将业务逻辑处理部分都转移到\n                      Service 来处理，而在 Model\n                      层保存比较单一的数据获取的逻辑。\n                    </p>\n                    <p data-nodeid=\"113306\">\n                      其他的票列表、票详情和活动详情比较相似，我们看一下这三者的接口参数设置和返回接口就可以了，没必要每个都进行时序图设计。\n                    </p>\n                    <h4 data-nodeid=\"113307\">活动详情</h4>\n                    <p data-nodeid=\"113308\">\n                      首先还是来设计接口参数和返回结构，如表格 7。\n                    </p>\n                    <div data-nodeid=\"113309\">\n                      <p style=\"text-align: center\">表格 7 活动详情接口参数</p>\n                    </div>\n                    <p data-nodeid=\"113310\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3B/F7/CioPOWCHtFCAUZ2yAAA5HVIwidg206.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"113636\"\n                      />\n                    </p>\n                    <p data-nodeid=\"113311\">\n                      返回的数据结构也比较简单，只需要返回一条活动详情数据即可：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"ret\"</span>:<span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"message\"</span>:<span class=\"hljs-string\">\"success\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"data\"</span>:{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"id\"</span>:<span class=\"hljs-string\">\"111\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"抢洗头券\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"desc\"</span>:<span class=\"hljs-string\">\"周六日前往，可免费体验\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"image\"</span>:<span class=\"hljs-string\">\"xxxx\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"start_time\"</span>:<span class=\"hljs-number\">1422222333</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"end_time\"</span>:<span class=\"hljs-number\">1444444444</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"113313\">票列表</h4>\n                    <p data-nodeid=\"113314\">接口参数和返回结构，如表格 8。</p>\n                    <div data-nodeid=\"113315\">\n                      <p style=\"text-align: center\">表格 8 票列表接口参数</p>\n                    </div>\n                    <p data-nodeid=\"113316\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3B/F7/CioPOWCHtGCAUraVAABWk6QkP0g384.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"113642\"\n                      />\n                    </p>\n                    <p data-nodeid=\"113317\">\n                      返回的数据结构是一个列表的通用结构，包括 pageNum\n                      是当前页数，hasMore 代表的是是否存在下一页，pageSize\n                      代表的是一页所包含的票数量，lastId 是本页的最后一条数据的\n                      ID ，主要用于辅助翻页，list 则是当前的票列表数据。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  \"ret\":0,\n</div></li><li><div class=\"code-word\">  \"message\":\"success\",\n</div></li><li><div class=\"code-word\">  \"data\":{\n</div></li><li><div class=\"code-word\">    \"pageNum\" : 1,\n</div></li><li><div class=\"code-word\">    \"hasMore\": true,\n</div></li><li><div class=\"code-word\">    \"pageSize\": 20,\n</div></li><li><div class=\"code-word\">    \"lastId\": \"0022\",\n</div></li><li><div class=\"code-word\">    \"list\": [\n</div></li><li><div class=\"code-word\">        \"id\":\"111\",\n</div></li><li><div class=\"code-word\">        \"name\":\"洗头券\",\n</div></li><li><div class=\"code-word\">        \"desc\":\"周六日前往，可免费体验\",\n</div></li><li><div class=\"code-word\">        \"code\":\"xxxx11\",\n</div></li><li><div class=\"code-word\">        \"act_id\":\"1110\",\n</div></li><li><div class=\"code-word\">        \"is_effective\": true,\n</div></li><li><div class=\"code-word\">        \"start_time\":1422222333,\n</div></li><li><div class=\"code-word\">        \"end_time\":1444444444\n</div></li><li><div class=\"code-word\">    ]\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"113319\">票详情</h4>\n                    <p data-nodeid=\"113320\">接口参数和返回结构，如表格 9。</p>\n                    <div data-nodeid=\"113321\">\n                      <p style=\"text-align: center\">表格 9 活动详情接口参数</p>\n                    </div>\n                    <p data-nodeid=\"113322\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3B/F7/CioPOWCHtGyAJsHYAAA01aveJSg751.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"113648\"\n                      />\n                    </p>\n                    <p data-nodeid=\"113323\">\n                      返回的数据结构也比较简单，只需要返回一条活动详情数据即可。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"ret\"</span>:<span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"message\"</span>:<span class=\"hljs-string\">\"success\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"data\"</span>:{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"id\"</span>:<span class=\"hljs-string\">\"111\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"洗头券\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"code\"</span>:<span class=\"hljs-string\">\"xxxx11\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"desc\"</span>:<span class=\"hljs-string\">\"周六日前往，可免费体验\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"act_id\"</span>:<span class=\"hljs-string\">\"1110\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"is_effective\"</span>: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"image\"</span>:<span class=\"hljs-string\">\"xxxx\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"start_time\"</span>:<span class=\"hljs-number\">1422222333</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"end_time\"</span>:<span class=\"hljs-number\">1444444444</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"113325\">抢票接口</h4>\n                    <p data-nodeid=\"113326\">\n                      最后我们再来看下抢票的接口，这个稍微复杂并且核心，因此这部分会设计时序图，我们首先还是来看下参数设计，如表格\n                      10 所示。\n                    </p>\n                    <div data-nodeid=\"113327\">\n                      <p style=\"text-align: center\">表格 10 抢票接口参数</p>\n                    </div>\n                    <p data-nodeid=\"113328\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3B/F8/CioPOWCHtHiAETgTAAA1-H9aNLI698.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"113654\"\n                      />\n                    </p>\n                    <p data-nodeid=\"113329\">返回结构如下所示：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"ret\"</span>:<span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"message\"</span>:<span class=\"hljs-string\">\"success\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"data\"</span>:{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"id\"</span>:<span class=\"hljs-string\">\"111\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"name\"</span>:<span class=\"hljs-string\">\"洗头券\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"desc\"</span>:<span class=\"hljs-string\">\"周六日前往，可免费体验\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"code\"</span>:<span class=\"hljs-string\">\"xxx1222\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"actId\"</span>:<span class=\"hljs-string\">\"1110\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"isEffective\"</span>: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"image\"</span>:<span class=\"hljs-string\">\"xxxx\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"start_time\"</span>:<span class=\"hljs-number\">1422222333</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"end_time\"</span>:<span class=\"hljs-number\">1444444444</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"113331\">\n                      这里抢票会可能失败，比如 -1 活动结束了，-2\n                      票不足，未抢到，-3 则是系统错误。如果抢到票则在 data\n                      中返回具体的票信息，用于前端展示。<br />\n                      时序图如图 3 所示。\n                    </p>\n                    <p data-nodeid=\"113332\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3B/EF/Cgp9HWCHtIOAPyT9AADhIF3eWWE014.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"113661\"\n                      />\n                    </p>\n                    <div data-nodeid=\"113333\">\n                      <p style=\"text-align: center\">图 3 抢票接口时序图</p>\n                    </div>\n                    <p data-nodeid=\"113334\">\n                      我来详细带你了解各模块间的函数交互的 6 过程：\n                    </p>\n                    <ol data-nodeid=\"113335\">\n                      <li data-nodeid=\"113336\">\n                        <p data-nodeid=\"113337\">\n                          用户调用 ticket/get 前往抢票；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113338\">\n                        <p data-nodeid=\"113339\">\n                          进行活动校验，主要是检查活动时间是否生效过程中，如果已经失效或者未开始，则直接返回相应的错误码；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113340\">\n                        <p data-nodeid=\"113341\">\n                          检查用户是否有权限参加活动，判断用户是否已经参加过，或者该活动是否仅针对某些用户，如果参加过返回相应的状态，如果不能参加则返回其他信息；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113342\">\n                        <p data-nodeid=\"113343\">\n                          校验都通过后，调用 Model 层的 getOneTicket\n                          方法获取一张票，这时候需要利用 Redis\n                          的队列，原子操作获取一张票，拿到票以后返回相应的 code\n                          信息；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113344\">\n                        <p data-nodeid=\"113345\">\n                          拿到 code 以后需要将 code\n                          换成票详情信息，因此又需要反查 Service 层获取票详情；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"113346\">\n                        <p data-nodeid=\"113347\">\n                          最终再将票详情返回给到接口调用方。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"113348\">\n                      完成接口设计以后，我们就可以做一定的 Mock\n                      数据返回了，你可以打开<a\n                        href=\"https://github.com/love-flutter/nodejs-column?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"113672\"\n                        >17 讲的 GitHub</a\n                      >的源代码，然后运行服务，访问以下 5\n                      个接口，你将可以得到一组测试的假数据，这样和你合作的前端同学也可以进行一些界面的开发了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/act/list</span>\n</div></li><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/act/detail?actId=111</span>\n</div></li><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/ticket/get</span>\n</div></li><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/ticket/detail?ticketId=111</span>\n</div></li><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/ticket/list</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"113350\">\n                      以上就是抢票逻辑的几个过程，这一讲我只带你做完了前期的准备工作，主要是让你了解后台服务的开发流程，而\n                      18\n                      讲则侧重在代码实现细节，核心是介绍系统的开发实践以及核心抢票逻辑的原理。\n                    </p>\n                    <h3 data-nodeid=\"113351\">总结</h3>\n                    <p data-nodeid=\"113352\">\n                      总的来说，前后端开发在思路上是完全不同的，前端注重交互，后端则要考虑架构的设计以及数据结构的设计。学完这一讲之后，我希望你能更了解后台服务的开发思维，从需求拆解分析到架构设计、数据结构的设计，最终到接口的协议的设计。在整个流程中，你要非常注意核心接口的设计以及技术细节的实现，在前期考虑好所有的设计后，再进行下一讲的代码实现。\n                    </p>\n                    <p data-nodeid=\"113353\" class=\"\">\n                      今天我给你留的作业是：在本讲中只是绘制了活动列表和抢票的时序图，你可以尝试去绘制活动详情、票列表和票详情的时序图，感谢你的阅读，我们下一讲见。\n                    </p>\n            "}