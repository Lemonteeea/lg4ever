{"title":"06 | 团队工具：如何利用云开发提升团队开发效率？","context":"\n                    <p data-nodeid=\"47946\">\n                      上一讲我们讨论了在开发时提升编码效率的相关工具。在项目开发过程中，我们可以编写自定义的代码片段缩写规则来提升个人的编码效率。那么，如果想要把这些规则分享给团队内的其他成员或自己的其他电脑设备时又该怎么做呢？带着这个问题，我们就进入到今天要聊的主题：<strong\n                        data-nodeid=\"48134\"\n                        >云开发</strong\n                      >（Cloud Development）。\n                    </p>\n                    <p data-nodeid=\"47947\">\n                      和之前介绍的适用于个人的开发提效工具不同，云开发的优势主要是在团队效率的提升方面。在这一讲里，我会介绍云开发和普通开发模式的区别，目前典型的云开发产品，以及云开发模式的应用场景。下面我就进入到第一个问题：什么是云开发。\n                    </p>\n                    <h3 data-nodeid=\"47948\">软件开发环境的对比</h3>\n                    <p data-nodeid=\"47949\">\n                      在具体介绍什么是云开发之前，让我们先来看下普通的日常开发流程是什么样的。\n                    </p>\n                    <h4 data-nodeid=\"47950\">个人电脑开发环境</h4>\n                    <p data-nodeid=\"47951\">\n                      通常我们都使用个人电脑作为日常的开发环境，对应的开发流程通常是：\n                    </p>\n                    <ol data-nodeid=\"47952\">\n                      <li data-nodeid=\"47953\">\n                        <p data-nodeid=\"47954\">\n                          <strong data-nodeid=\"48160\">基础环境准备</strong\n                          >：在个人电脑中准备开发环境所需设施，下载安装开发所需各种<strong\n                            data-nodeid=\"48161\"\n                            >应用程序</strong\n                          >（以前端为例：IDE、Node、Git、Yarn......），调试各种<strong\n                            data-nodeid=\"48162\"\n                            >配置文件</strong\n                          >（.bashrc、npmrc......），安装必要<strong\n                            data-nodeid=\"48163\"\n                            >IDE 插件</strong\n                          >并调试<strong data-nodeid=\"48164\">IDE 配置项</strong\n                          >（UI、编码格式、Snippets......）等。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47955\">\n                        <p data-nodeid=\"47956\">\n                          下载代码：将项目源代码从代码仓库（例如 Git\n                          Repo）中下载到个人电脑的开发目录下。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47957\">\n                        <p data-nodeid=\"47958\">安装项目依赖。</p>\n                      </li>\n                      <li data-nodeid=\"47959\">\n                        <p data-nodeid=\"47960\">运行开发服务。</p>\n                      </li>\n                      <li data-nodeid=\"47961\">\n                        <p data-nodeid=\"47962\">编码调试。</p>\n                      </li>\n                      <li data-nodeid=\"47963\">\n                        <p data-nodeid=\"47964\">\n                          执行任务（Lint 检查、格式化检查、单元测试等）。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"47965\">\n                      上述开发流程的流畅度一定程度上依赖于所使用电脑的硬件配置，因此程序员往往需要高性能配置的个人电脑。\n                    </p>\n                    <h4 data-nodeid=\"47966\">远程开发</h4>\n                    <p data-nodeid=\"47967\">\n                      远程开发是将开发环境部署到远程服务器，然后通过个人电脑的\n                      IDE（Integrated Development\n                      Environment&nbsp;，集成开发环境）\n                      进行远程连接来进行开发的方式（例如通过 VS Code 中的\n                      <a\n                        href=\"https://code.visualstudio.com/docs/remote/remote-overview\"\n                        data-nodeid=\"48175\"\n                        >Remote SSH 插件</a\n                      >）。和传统的个人电脑开发环境相比，远程开发模式的优点主要在于：\n                    </p>\n                    <ol data-nodeid=\"47968\">\n                      <li data-nodeid=\"47969\">\n                        <p data-nodeid=\"47970\">\n                          由远程的开发服务器来承载项目数据存储和运行计算的需求，从而解放了对个人电脑资源的占用和对性能的要求。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47971\">\n                        <p data-nodeid=\"47972\">\n                          由于个人电脑只提供了用户操作界面和远程连接的能力，因此大大减少了访问设备变更对于项目开发的影响，例如在更换新电脑或在家使用不同电脑设备的情况下，只需要安装\n                          IDE\n                          和少量配置，就能快速获得一致的开发体验，而无须再重复进行基础环境的准备。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"47973\">远程开发的主要问题在于：</p>\n                    <ol data-nodeid=\"47974\">\n                      <li data-nodeid=\"47975\">\n                        <p data-nodeid=\"47976\">需要申请单独的开发机资源。</p>\n                      </li>\n                      <li data-nodeid=\"47977\">\n                        <p data-nodeid=\"47978\">\n                          新申请的开发机也需要和个人电脑环境一样，人工进行基础环境的准备工作。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47979\">\n                        <p data-nodeid=\"47980\">\n                          将开发机单独用于远程开发，在资源分配上可能存在资源利用不充分的问题。\n                        </p>\n                      </li>\n                    </ol>\n                    <h4 data-nodeid=\"47981\">云开发</h4>\n                    <p data-nodeid=\"47982\">\n                      云开发模式是在上述远程开发模式的基础之上发展而来的，将开发环境托管，由远程开发服务器变更为云服务。个人电脑通过\n                      IDE\n                      或云服务提供的浏览器界面访问云端工作区进行开发。云开发模式在继承远程开发模式优点的基础上，更能提升效率的原因在于：\n                    </p>\n                    <ol data-nodeid=\"47983\">\n                      <li data-nodeid=\"47984\">\n                        <p data-nodeid=\"47985\">\n                          通过容器化技术，将开发环境所需基础设施（应用程序、配置文件、IDE\n                          插件、IDE 设定项等）集成到基础镜像中，大大<strong\n                            data-nodeid=\"48190\"\n                            >提升开发环境准备的效率</strong\n                          >。同时，同样的基础环境也避免了相同项目不同开发集成环境导致的环境差异类问题。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47986\">\n                        <p data-nodeid=\"47987\">\n                          通过服务化的云开发平台，<strong data-nodeid=\"48196\"\n                            >简化使用流程</strong\n                          >，解决个人使用远程开发时可能遇到的技术困难，使得刚入职的新人也能够快速上手。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47988\">\n                        <p data-nodeid=\"47989\">\n                          对于团队而言，能够<strong data-nodeid=\"48202\"\n                            >提升团队协作效率</strong\n                          >。云开发模式有利于流程规范的统一，有利于团队成员共享开发工具，同时支持多人访问相同开发环境，有助于结对编程等协作流程。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47990\">\n                        <p data-nodeid=\"47991\">\n                          对于公司而言，使用弹性化的云端容器环境有利于资源利用率的提升和硬件资产成本的降低。\n                        </p>\n                      </li>\n                    </ol>\n                    <h3 data-nodeid=\"47992\">典型云开发产品介绍</h3>\n                    <p data-nodeid=\"47993\">\n                      以下表格是一些已经推出的云开发产品，感兴趣的话，你可以根据自己所接触过的云厂商来进一步了解。\n                    </p>\n                    <table data-nodeid=\"47995\">\n                      <thead data-nodeid=\"47996\">\n                        <tr data-nodeid=\"47997\">\n                          <th data-nodeid=\"47999\" data-org-content=\"产品\">\n                            产品\n                          </th>\n                          <th data-nodeid=\"48000\" data-org-content=\"厂商\">\n                            厂商\n                          </th>\n                          <th data-nodeid=\"48001\" data-org-content=\"基础 IDE\">\n                            基础 IDE\n                          </th>\n                          <th data-nodeid=\"48002\" data-org-content=\"IDE 类型\">\n                            IDE 类型\n                          </th>\n                          <th\n                            data-nodeid=\"48003\"\n                            data-org-content=\"代码托管方式\"\n                          >\n                            代码托管方式\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody data-nodeid=\"48009\">\n                        <tr data-nodeid=\"48010\">\n                          <td\n                            data-nodeid=\"48011\"\n                            data-org-content=\"VS Codespace\"\n                          >\n                            VS Codespace\n                          </td>\n                          <td data-nodeid=\"48012\" data-org-content=\"微软\">\n                            微软\n                          </td>\n                          <td data-nodeid=\"48013\" data-org-content=\"VS Code\">\n                            VS Code\n                          </td>\n                          <td data-nodeid=\"48014\" data-org-content=\"Web/VS/VSC\">\n                            Web/VS/VSC\n                          </td>\n                          <td\n                            data-nodeid=\"48015\"\n                            data-org-content=\"云端（Asure）/自维护\"\n                          >\n                            云端（Asure）/自维护\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"48016\">\n                          <td data-nodeid=\"48017\" data-org-content=\"Gitpod\">\n                            Gitpod\n                          </td>\n                          <td data-nodeid=\"48018\" data-org-content=\"Eclipse\">\n                            Eclipse\n                          </td>\n                          <td data-nodeid=\"48019\" data-org-content=\"Theia\">\n                            Theia\n                          </td>\n                          <td\n                            data-nodeid=\"48020\"\n                            data-org-content=\"Web/Desktop\"\n                          >\n                            Web/Desktop\n                          </td>\n                          <td\n                            data-nodeid=\"48021\"\n                            data-org-content=\"云端/自维护（限制用户数量）\"\n                          >\n                            云端/自维护（限制用户数量）\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"48022\">\n                          <td data-nodeid=\"48023\" data-org-content=\"CloudIDE\">\n                            CloudIDE\n                          </td>\n                          <td data-nodeid=\"48024\" data-org-content=\"阿里云\">\n                            阿里云\n                          </td>\n                          <td\n                            data-nodeid=\"48025\"\n                            data-org-content=\"KAITIAN IDE\"\n                          >\n                            KAITIAN IDE\n                          </td>\n                          <td data-nodeid=\"48026\" data-org-content=\"Web\">\n                            Web\n                          </td>\n                          <td data-nodeid=\"48027\" data-org-content=\"云端\">\n                            云端\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"48028\">\n                          <td\n                            data-nodeid=\"48029\"\n                            data-org-content=\"Cloud Studio\"\n                          >\n                            Cloud Studio\n                          </td>\n                          <td\n                            data-nodeid=\"48030\"\n                            data-org-content=\"Coding.net<br>（腾讯云）\"\n                          >\n                            Coding.net<br />（腾讯云）\n                          </td>\n                          <td data-nodeid=\"48031\" data-org-content=\"VS Code\">\n                            VS Code\n                          </td>\n                          <td data-nodeid=\"48032\" data-org-content=\"Web\">\n                            Web\n                          </td>\n                          <td\n                            data-nodeid=\"48033\"\n                            data-org-content=\"云端（5 个工作空间）\"\n                          >\n                            云端（5 个工作空间）\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"48034\">\n                          <td data-nodeid=\"48035\" data-org-content=\"Cloud9\">\n                            Cloud9\n                          </td>\n                          <td data-nodeid=\"48036\" data-org-content=\"AWS\">\n                            AWS\n                          </td>\n                          <td data-nodeid=\"48037\" data-org-content=\"Cloud9\">\n                            Cloud9\n                          </td>\n                          <td data-nodeid=\"48038\" data-org-content=\"Web\">\n                            Web\n                          </td>\n                          <td\n                            data-nodeid=\"48039\"\n                            data-org-content=\"云端（AWS）\"\n                          >\n                            云端（AWS）\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                    <p data-nodeid=\"48427\">\n                      本课时重点介绍的是以 VS Codespace\n                      为代表的云开发产品，以及以 Theia 为代表的 WebIDE 框架。\n                    </p>\n\n                    <h4 data-nodeid=\"48041\">微软：Visual Studio Codespace</h4>\n                    <p data-nodeid=\"48042\">\n                      <a\n                        href=\"https://visualstudio.microsoft.com/zh-hans/services/visual-studio-codespaces/\"\n                        data-nodeid=\"48242\"\n                        >Visual Studio Codespace</a\n                      >（以下简称<strong data-nodeid=\"48248\">Codespace</strong\n                      >），是微软 VS Code 团队 2019\n                      年推出的云开发环境产品，该产品的特点是：\n                    </p>\n                    <ul data-nodeid=\"48043\">\n                      <li data-nodeid=\"48044\">\n                        <p data-nodeid=\"48045\">\n                          支持三种访问客户端：VS Code，Visual Studio IDE，以及\n                          Web。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48046\">\n                        <p data-nodeid=\"48047\">\n                          提供收费的云托管（Azure）环境与免费的自维护环境两种服务方式（仍需要注册\n                          Azure 账号来访问）。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48048\">\n                        <p data-nodeid=\"48049\">\n                          内置多人协作工具 Live Share 和 AI 智能代码提示功能\n                          InteliCode。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48050\">\n                        <p data-nodeid=\"48051\">\n                          自定义环境基础配置，可<a\n                            href=\"https://docs.microsoft.com/zh-cn/visualstudio/codespaces/reference/configuring\"\n                            data-nodeid=\"48255\"\n                            >定制化</a\n                          >开发环境基础设施，例如 Linux 版本、工具、端口、变量、\n                          IDE 插件等。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48052\">\n                        <p data-nodeid=\"48053\">\n                          自定义<a\n                            href=\"https://docs.microsoft.com/zh-cn/visualstudio/codespaces/reference/personalizing\"\n                            data-nodeid=\"48260\"\n                            >个性化配置</a\n                          >，定制环境中各类配置文件，例如 .bashrc，.editorconfig\n                          等。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"48054\">Eclipse: Theia</h4>\n                    <p data-nodeid=\"48055\">\n                      <a href=\"https://theia-ide.org/\" data-nodeid=\"48265\"\n                        >Eclipse Theia</a\n                      ><strong data-nodeid=\"48274\">（以下简称 Theia）</strong\n                      >，是 Eclipse 基金会推出的 VS Code\n                      的替代产品，它的定位是以 NodeJS 和 TS\n                      为技术栈开发的云端和桌面端的 IDE 基础框架，于 2017\n                      年启动， 2018 年发布了对应的 Web 端 IDE 产品\n                      <a\n                        href=\"https://github.com/gitpod-io/gitpod\"\n                        data-nodeid=\"48272\"\n                        >Gitpod</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"48056\">Theia 和 VS Code 的技术相同点有：</p>\n                    <ul data-nodeid=\"48057\">\n                      <li data-nodeid=\"48058\">\n                        <p data-nodeid=\"48059\">\n                          编辑器核心都基于\n                          <a\n                            href=\"https://microsoft.github.io/monaco-editor/\"\n                            data-nodeid=\"48279\"\n                            >Monaco Editor</a\n                          >。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48060\">\n                        <p data-nodeid=\"48061\">\n                          都支持 Language Server Protocol（LSP）。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48062\">\n                        <p data-nodeid=\"48063\">\n                          都支持 Debug Adepter Protocol（DAP）。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48064\">\n                        <p data-nodeid=\"48065\">都支持 VS Code 的插件体系。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"48066\">\n                      官方总结，与 VS Code 相比，Theia 的不同之处在于：\n                    </p>\n                    <ul data-nodeid=\"49391\">\n                      <li data-nodeid=\"49392\">\n                        <p data-nodeid=\"49393\">\n                          架构上更模块化，更易于自定义。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"49394\">\n                        <p data-nodeid=\"49395\">\n                          从一开始就被设计成同时运行于桌面和云端。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"49396\">\n                        <p data-nodeid=\"49397\">\n                          由厂商中立的开源基金会开发维护。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"49398\">\n                        <p data-nodeid=\"49399\">\n                          开发独立的 WebIDE 是云开发产品的<strong\n                            data-nodeid=\"49408\"\n                            >首选</strong\n                          >，目前 VS Code 并未开源功能完整的 Web\n                          版本（目前开源的 Web 版本仅可用于预览功能），但 Thiea\n                          有开源可定制化的版本。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <h3 data-nodeid=\"48076\">云开发模式的技术要素</h3>\n                    <p data-nodeid=\"50371\">\n                      一般来说，云开发模式依赖的技术要素主要有三个方面：<strong\n                        data-nodeid=\"50385\"\n                        >WebIDE</strong\n                      >，<strong data-nodeid=\"50386\">容器化</strong\n                      >，以及能够<strong data-nodeid=\"50387\"\n                        >对接其他云服务</strong\n                      >。\n                    </p>\n\n                    <h4 data-nodeid=\"51350\">WebIDE</h4>\n\n                    <p data-nodeid=\"53278\">\n                      继 VS Code 2019 年发布 Codespace 后， Eclipse 基金会于\n                      2020 年初也发布了 Theia 1.0 版本。 WebIDE\n                      在功能体验上已达到和桌面 IDE\n                      相同的水平（尽管在初始化阶段会有不同程度的额外耗时）。同时，\n                      WebIDE 还具有以下优点：\n                    </p>\n\n                    <ul data-nodeid=\"54242\">\n                      <li data-nodeid=\"54243\">\n                        <p data-nodeid=\"54244\">\n                          便于<strong data-nodeid=\"54256\">平台化定制</strong\n                          >：在团队使用时可通过定制 WebIDE 来实现<strong\n                            data-nodeid=\"54257\"\n                            >通用的功能扩展和升级</strong\n                          >，而无须变更团队成员的桌面\n                          IDE（例如，使用微信开发者工具软件的同学，在工具发布新版本时需要各自处理升级，而\n                          Web 版则无须如此）。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"54245\">\n                        <p data-nodeid=\"54246\">\n                          <strong data-nodeid=\"54262\">流程体验上更平滑</strong\n                          >：虽然基本使用仍然是打开一个包含源代码的工作空间容器进行开发，但是通过和代码仓库以及\n                          CI/CD\n                          工具的对接，可以在很多流程节点上做到平滑的体验（例如，测试环境下修复\n                          Bug，可以通过工具，在查找到对应的提交版本后点击进入到\n                          IDE\n                          界面进行修复、测试和提交，相比于原先需要线下操作的流程而言，效率会上升一个台阶）。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <h4 data-nodeid=\"48085\">容器化</h4>\n                    <p data-nodeid=\"48086\">\n                      容器化以往在服务部署中应用较多。在云开发中的用途主要有：\n                    </p>\n                    <ul data-nodeid=\"48087\">\n                      <li data-nodeid=\"48088\">\n                        <p data-nodeid=\"48089\">\n                          为每个用户的每个项目创建<strong data-nodeid=\"48335\"\n                            >独立的工作空间。</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48090\">\n                        <p data-nodeid=\"48091\">\n                          基于容器化的分层结构，可以方便地在基础环境、项目、用户等维度做镜像继承，便于团队成员维护相同项目时<strong\n                            data-nodeid=\"48340\"\n                            >提升环境创建效率。</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48092\">\n                        <p data-nodeid=\"48093\">\n                          相比个人虚拟机，有利于<strong data-nodeid=\"48346\"\n                            >提升资源利用率</strong\n                          >，同时环境搭建更便捷。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"48094\">云服务对接</h4>\n                    <p data-nodeid=\"55225\">\n                      在一些云厂商的云开发产品中，除了容器化工作空间和 WebIDE\n                      之外，也包含了与其他上下游服务的对接。例如在阿里云的\n                      CloudIDE\n                      产品中，就包含了一键部署等功能。而在自研的体系内，也可通过类似的方式将各个环节的工作流程进行串联，从而形成整体工作流程的效率提升。\n                    </p>\n\n                    <h3 data-nodeid=\"48096\">云开发的效率提升应用场景</h3>\n                    <p data-nodeid=\"48097\">\n                      当我们以团队的方式来实践云开发时，能够找到一些效率优化的切入点，下面仅列举一些代表性的应用场景。\n                    </p>\n                    <h4 data-nodeid=\"48098\">项目篇</h4>\n                    <ol data-nodeid=\"48099\">\n                      <li data-nodeid=\"48100\">\n                        <p data-nodeid=\"48101\">\n                          <strong data-nodeid=\"48356\">加速创建新项目</strong\n                          >：在云开发模式下，可以将包含依赖安装的项目模板存储为镜像，开发者选择镜像并创建容器后即可直接预览效果或进入开发，免去下载模板与安装依赖的时间。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48102\">\n                        <p data-nodeid=\"48103\">\n                          <strong data-nodeid=\"48363\">项目依赖版本统一</strong\n                          >：npm\n                          依赖包在不同环境下安装时，版本自动升级的问题常常对开发测试造成影响（尽管可以通过\n                          “npm ci”\n                          等命令锁定版本，但在实际业务中普及率并不高，这个问题在部署效率篇中会再次谈到）。而在云开发模式下，可以将\n                          node_modules 依赖目录（或 Yarn 的 .pnp\n                          目录）与依赖版本做关联，存储为独立镜像，供开发、测试、部署使用。在相应的流程中就可以免去安装依赖，以达到各环境下依赖版本的统一管理，同时也提升了各环境的处理效率。\n                        </p>\n                      </li>\n                    </ol>\n                    <h4 data-nodeid=\"48104\">工具篇</h4>\n                    <ol data-nodeid=\"48105\">\n                      <li data-nodeid=\"48106\">\n                        <p data-nodeid=\"48107\">\n                          <strong data-nodeid=\"48369\">开箱即用的开发环境</strong\n                          >：在开发环境维度上，通过云开发模式，可以将开发所需的不同基础环境以及各种应用程序制作成开发环境镜像，供开发者自由选择。刚入职的新人无须花费大量时间去学习和安装调试项目的开发环境，真正达到开箱即用的效果。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48108\">\n                        <p data-nodeid=\"48109\">\n                          <strong data-nodeid=\"48374\"\n                            >自定义辅助工具的快速共享和共建</strong\n                          >：前端工具的共享不再局限于各自安装 npm\n                          包的方式，通用的配置、公共的依赖、针对特定项目类型的代码片段、emmet\n                          缩写等，一切能想到的辅助工具，都可以在云平台的模式下快速落地，集成到各开发者的工作空间中。同时，对于工具的作者来说，在云平台的方式下也更容易获取到安装使用量等数据反馈，让优秀的工具得以呈现和传播。\n                        </p>\n                      </li>\n                    </ol>\n                    <h4 data-nodeid=\"48110\">流程篇</h4>\n                    <ol data-nodeid=\"48111\">\n                      <li data-nodeid=\"48112\">\n                        <p data-nodeid=\"48113\">\n                          <strong data-nodeid=\"48380\"\n                            >连接代码仓库与开发环境</strong\n                          >：云开发的模式可以缩短代码仓库与开发环境的距离，通过项目与开发环境的配置关联，可以从代码仓库的任意\n                          commit 直连创建云端工作空间或进入已有工作空间。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48114\">\n                        <p data-nodeid=\"48115\">\n                          <strong data-nodeid=\"48385\"\n                            >连接 Pipeline 与开发环境</strong\n                          >：在构建部署的过程中，遇到构建问题或其他测试流程问题的情况时，可以通过对应的提交信息，直连创建临时修复用途的项目工作空间，以便快速调试和修复部署。\n                        </p>\n                      </li>\n                    </ol>\n                    <h3 data-nodeid=\"48116\">使用云开发的注意点</h3>\n                    <p data-nodeid=\"56189\">\n                      尽管随着 WebIDE\n                      的兴起，越来越多的云开发产品开始呈现，但是作为一种新兴的工作模式，在尝试规模化使用前还是需要考虑到可能出现的一些问题：\n                    </p>\n\n                    <ol data-nodeid=\"48118\">\n                      <li data-nodeid=\"48119\">\n                        <p data-nodeid=\"48120\">\n                          <strong data-nodeid=\"48404\">代码安全问题</strong\n                          >：代码安全是首先需要考虑的问题。通常在代码仓库中我们会设置具体项目的<strong\n                            data-nodeid=\"48405\"\n                            >访问权限</strong\n                          >，云开发模式下的镜像与空间访问设计上也应当注意对这部分权限的验证。此外，对于公司内部的项目，在使用云开发模式时应当首选<strong\n                            data-nodeid=\"48406\"\n                            >支持内部部署</strong\n                          >的云服务或<strong data-nodeid=\"48407\"\n                            >搭建自维护</strong\n                          >的云服务，而非将代码上传到外部云空间中。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48121\">\n                        <p data-nodeid=\"48122\">\n                          <strong data-nodeid=\"48412\">服务搭建与维护</strong\n                          >：要在团队内使用云开发的功能，需要考虑服务搭建的方式和成本。对于大厂而言，云服务资源和技术建设比较丰富，搭建自维护的云开发服务可以提供更多灵活的功能；而对于中小规模的技术团队而言，购买使用一些支持内部部署的现有云开发服务是更好的选择。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"48123\">\n                        <p data-nodeid=\"48124\">\n                          <strong data-nodeid=\"48417\">服务降级与备份</strong\n                          >：由于云开发模式下将开发环境与工作代码都存储于云端，需要考虑当云端服务异常时的降级策略。例如是否有独立的环境镜像可供下载后离线使用，以及工作空间内的暂存代码是否有备份，可供独立下载使用。\n                        </p>\n                      </li>\n                    </ol>\n                    <h3 data-nodeid=\"48125\">总结</h3>\n                    <p data-nodeid=\"57153\">\n                      这一课时我们先介绍了云开发的概念，以及相比于现在的开发方式，它能解决哪些方面的问题。然后一起了解了几款有代表性的云产品，其中需要重点关注的是\n                      VS Code 系的 Codespace 产品。此外，如果你对定制 WebIDE\n                      感兴趣，从 Theia 入手会是比较好的选择。\n                    </p>\n\n                    <p data-nodeid=\"48127\">\n                      在介绍完产品后，我们又讨论了云开发这种模式的一般技术要素，以及使用它所能带来的几个比较明确的效率提升场景。最后还有几个新技术对应的风险点，在真正尝试选择云开发方案前需要被考虑到。\n                    </p>\n                    <p data-nodeid=\"48128\">\n                      今天的<strong data-nodeid=\"48426\">课后思考题</strong\n                      >是：希望你能实际体验课中讲到的一些产品，可以在课后讨论中分享你使用后的感受。\n                    </p>\n            "}