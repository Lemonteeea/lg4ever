{"title":"16 | 生成代码：AST 如何生成可运行的代码？（上）","context":"\n                    <p data-nodeid=\"3\">\n                      上一节课我们分析了 AST 节点转换的过程，也知道了 AST\n                      节点转换的作用是通过语法分析，创建了语义和信息更加丰富的代码生成节点\n                      codegenNode，便于后续生成代码。\n                    </p>\n                    <p data-nodeid=\"4\">\n                      那么这一节课，我们就来分析整个编译的过程的最后一步——代码生成的实现原理。\n                    </p>\n                    <p data-nodeid=\"5\">\n                      同样的，代码生成阶段由于要处理的场景很多，所以代码也非常多而复杂。为了方便你理解它的核心流程，我们还是通过这个示例来演示整个代码生成的过程：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"app\"</span>&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"flag\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>hello {{ msg + test }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"7\">\n                      代码生成的结果是和编译配置相关的，你可以打开官方提供的<a\n                        href=\"https://vue-next-template-explorer.netlify.app/\"\n                        data-nodeid=\"89\"\n                        >模板导出工具平台</a\n                      >，点击右上角的 Options\n                      修改编译配置。为了让你理解核心的流程，这里我只分析一种配置方案，当然当你理解整个编译核心流程后，也可以修改这些配置分析其他的分支逻辑。\n                    </p>\n                    <p data-nodeid=\"8\">\n                      我们分析的编译配置是：mode 为 module，prefixIdentifiers\n                      开启，hoistStatic 开启，其他配置均不开启。\n                    </p>\n                    <p data-nodeid=\"9\">\n                      为了让你有个大致印象，我们先来看一下上述例子生成代码的结果：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_1, [\n</div></li><li><div class=\"code-word\">    (_ctx.flag)\n</div></li><li><div class=\"code-word\">      ? _createVNode(_component_hello, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> })\n</div></li><li><div class=\"code-word\">      : (_openBlock(), _createBlock(<span class=\"hljs-string\">\"div\"</span>, _hoisted_2, [\n</div></li><li><div class=\"code-word\">          _createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"hello \"</span> + _toDisplayString(_ctx.msg + _ctx.test), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n</div></li><li><div class=\"code-word\">          _hoisted_3,\n</div></li><li><div class=\"code-word\">          _hoisted_4\n</div></li><li><div class=\"code-word\">        ]))\n</div></li><li><div class=\"code-word\">  ]))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"11\">\n                      示例的模板是如何转换生成这样的代码的？在 AST\n                      转换后，会执行 generate 函数生成代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">return</span> generate(ast, extend({}, options, {\n</div></li><li><div class=\"code-word\">  prefixIdentifiers\n</div></li><li><div class=\"code-word\">}))\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"13\">\n                      generate 函数的输入就是转换后的 AST\n                      根节点，我们看一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">generate</span><span class=\"hljs-params\">(ast, options = {})</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建代码生成上下文</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> context = createCodegenContext(ast, options);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { mode, push, prefixIdentifiers, indent, deindent, newline, scopeId, ssr } = context;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> hasHelpers = ast.helpers.length &gt; <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> useWithBlock = !prefixIdentifiers &amp;&amp; mode !== <span class=\"hljs-string\">'module'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> genScopeId = scopeId != <span class=\"hljs-keyword\">null</span> &amp;&amp; mode === <span class=\"hljs-string\">'module'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 生成预设代码</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> ( mode === <span class=\"hljs-string\">'module'</span>) {\n</div></li><li><div class=\"code-word\">    genModulePreamble(ast, context, genScopeId);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    genFunctionPreamble(ast, context);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!ssr) {\n</div></li><li><div class=\"code-word\">    push(\\`<span class=\"hljs-function\">function <span class=\"hljs-title\">render</span><span class=\"hljs-params\">(_ctx, _cache)</span> </span>{\\`);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    push(\\`<span class=\"hljs-function\">function <span class=\"hljs-title\">ssrRender</span><span class=\"hljs-params\">(_ctx, _push, _parent, _attrs)</span> </span>{\\`);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  indent();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (useWithBlock) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理带 with 的情况，Web 端运行时编译</span>\n</div></li><li><div class=\"code-word\">    push(\\`with (_ctx) {\\`);\n</div></li><li><div class=\"code-word\">    indent();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (hasHelpers) {\n</div></li><li><div class=\"code-word\">      push(\\`<span class=\"hljs-keyword\">const</span> { ${ast.helpers\n</div></li><li><div class=\"code-word\">        .map(s =&gt; \\`${helperNameMap[s]}: _${helperNameMap[s]}\\`)\n</div></li><li><div class=\"code-word\">        .join(<span class=\"hljs-string\">', '</span>)} } = _Vue\\`);\n</div></li><li><div class=\"code-word\">      push(\\`\\n\\`);\n</div></li><li><div class=\"code-word\">      newline();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 生成自定义组件声明代码</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (ast.components.length) {\n</div></li><li><div class=\"code-word\">    genAssets(ast.components, <span class=\"hljs-string\">'component'</span>, context);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (ast.directives.length || ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      newline();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 生成自定义指令声明代码</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (ast.directives.length) {\n</div></li><li><div class=\"code-word\">    genAssets(ast.directives, <span class=\"hljs-string\">'directive'</span>, context);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      newline();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 生成临时变量代码</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">    push(\\`let \\`);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; ast.temps; i++) {\n</div></li><li><div class=\"code-word\">      push(\\`${i &gt; <span class=\"hljs-number\">0</span> ? \\`, \\` : \\`\\`}_temp${i}\\`);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (ast.components.length || ast.directives.length || ast.temps) {\n</div></li><li><div class=\"code-word\">    push(\\`\\n\\`);\n</div></li><li><div class=\"code-word\">    newline();\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!ssr) {\n</div></li><li><div class=\"code-word\">    push(\\`<span class=\"hljs-keyword\">return</span> \\`);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 生成创建 VNode 树的表达式</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (ast.codegenNode) {\n</div></li><li><div class=\"code-word\">    genNode(ast.codegenNode, context);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    push(\\`<span class=\"hljs-keyword\">null</span>\\`);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (useWithBlock) {\n</div></li><li><div class=\"code-word\">    deindent();\n</div></li><li><div class=\"code-word\">    push(\\`}\\`);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  deindent();\n</div></li><li><div class=\"code-word\">  push(\\`}\\`);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    ast,\n</div></li><li><div class=\"code-word\">    code: context.code,\n</div></li><li><div class=\"code-word\">    map: context.map ? context.map.toJSON() : undefined\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"15\">\n                      generate\n                      主要做五件事情：创建代码生成上下文，生成预设代码，生成渲染函数，生成资源声明代码，以及生成创建\n                      VNode 树的表达式。接下来，我们就依次详细分析这几个流程。\n                    </p>\n                    <h3 data-nodeid=\"16\">创建代码生成上下文</h3>\n                    <p data-nodeid=\"17\">\n                      首先，是通过执行 createCodegenContext\n                      创建代码生成上下文，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createCodegenContext</span><span class=\"hljs-params\">(ast, { mode = <span class=\"hljs-string\">'function'</span>, prefixIdentifiers = mode === <span class=\"hljs-string\">'module'</span>, sourceMap = <span class=\"hljs-keyword\">false</span>, filename = \\`template.vue.html\\`, scopeId = <span class=\"hljs-keyword\">null</span>, optimizeBindings = <span class=\"hljs-keyword\">false</span>, runtimeGlobalName = \\`Vue\\`, runtimeModuleName = \\`vue\\`, ssr = <span class=\"hljs-keyword\">false</span> })</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> context = {\n</div></li><li><div class=\"code-word\">    mode,\n</div></li><li><div class=\"code-word\">    prefixIdentifiers,\n</div></li><li><div class=\"code-word\">    sourceMap,\n</div></li><li><div class=\"code-word\">    filename,\n</div></li><li><div class=\"code-word\">    scopeId,\n</div></li><li><div class=\"code-word\">    optimizeBindings,\n</div></li><li><div class=\"code-word\">    runtimeGlobalName,\n</div></li><li><div class=\"code-word\">    runtimeModuleName,\n</div></li><li><div class=\"code-word\">    ssr,\n</div></li><li><div class=\"code-word\">    source: ast.loc.source,\n</div></li><li><div class=\"code-word\">    code: \\`\\`,\n</div></li><li><div class=\"code-word\">    column: <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">    line: <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">    offset: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">    indentLevel: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">    pure: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">    map: undefined,\n</div></li><li><div class=\"code-word\">    helper(key) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> \\`_${helperNameMap[key]}\\`\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    push(code) {\n</div></li><li><div class=\"code-word\">      context.code += code\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    indent() {\n</div></li><li><div class=\"code-word\">      newline(++context.indentLevel)\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    deindent(withoutNewLine = <span class=\"hljs-keyword\">false</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (withoutNewLine) {\n</div></li><li><div class=\"code-word\">        --context.indentLevel\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        newline(--context.indentLevel)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    newline() {\n</div></li><li><div class=\"code-word\">      newline(context.indentLevel)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\">function <span class=\"hljs-title\">newline</span><span class=\"hljs-params\">(n)</span> </span>{\n</div></li><li><div class=\"code-word\">    context.push(<span class=\"hljs-string\">'\\n'</span> + \\`  \\`.repeat(n))\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> context\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"19\">\n                      这个上下文对象 context 维护了 generate\n                      过程的一些配置，比如 mode、prefixIdentifiers；也维护了\n                      generate 过程的一些状态数据，比如当前生成的代码\n                      code，当前生成代码的缩进 indentLevel 等。\n                    </p>\n                    <p data-nodeid=\"20\">\n                      此外，context 还包含了在 generate\n                      过程中可能会调用的一些辅助函数，接下来我会介绍几个常用的方法，它们会在整个代码生成节点过程中经常被用到。\n                    </p>\n                    <ul data-nodeid=\"21\">\n                      <li data-nodeid=\"22\">\n                        <p data-nodeid=\"23\">\n                          <code data-backticks=\"1\" data-nodeid=\"100\"\n                            >push(code)</code\n                          >，就是在当前的代码 context.code 后追加 code\n                          来更新它的值。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"24\">\n                        <p data-nodeid=\"25\">\n                          <code data-backticks=\"1\" data-nodeid=\"102\"\n                            >indent()</code\n                          >，它的作用就是增加代码的缩进，它会让上下文维护的代码缩进\n                          context.indentLevel 加 1，内部会执行 newline\n                          方法，添加一个换行符，以及两倍indentLevel\n                          对应的空格来表示缩进的长度。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"26\">\n                        <p data-nodeid=\"27\">\n                          <code data-backticks=\"1\" data-nodeid=\"104\"\n                            >deindent()</code\n                          >，和 indent\n                          相反，它会减少代码的缩进，让上下文维护的代码缩进\n                          context.indentLevel 减 1，在内部会执行 newline\n                          方法去添加一个换行符，并减少两倍indentLevel\n                          对应的空格的缩进长度。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"28\">\n                      上下文创建完毕后，接下来就到了真正的代码生成阶段，在分析的过程中我会结合示例讲解，让你更直观地理解整个代码的生成过程，我们先来看生成预设代码。\n                    </p>\n                    <h3 data-nodeid=\"29\">生成预设代码</h3>\n                    <p data-nodeid=\"30\">\n                      因为 mode 是 module，所以会执行 genModulePreamble\n                      生成预设代码，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">genModulePreamble</span><span class=\"hljs-params\">(ast, context, genScopeId)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { push, newline, optimizeBindings, runtimeModuleName } = context\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 处理 scopeId</span>\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (ast.helpers.length) {\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-comment\">// 生成 import 声明代码</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (optimizeBindings) {\n</div></li><li><div class=\"code-word\">      push(\\`<span class=\"hljs-keyword\">import</span> { ${ast.helpers\n</div></li><li><div class=\"code-word\">        .map(s =&gt; helperNameMap[s])\n</div></li><li><div class=\"code-word\">        .join(<span class=\"hljs-string\">', '</span>)} } from ${JSON.stringify(runtimeModuleName)}\\n\\`)\n</div></li><li><div class=\"code-word\">      push(\\`\\n<span class=\"hljs-comment\">// Binding optimization for webpack code-split\\nconst ${ast.helpers</span>\n</div></li><li><div class=\"code-word\">        .map(s =&gt; \\`_${helperNameMap[s]} = ${helperNameMap[s]}\\`)\n</div></li><li><div class=\"code-word\">        .join(<span class=\"hljs-string\">', '</span>)}\\n\\`)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      push(\\`<span class=\"hljs-keyword\">import</span> { ${ast.helpers\n</div></li><li><div class=\"code-word\">        .map(s =&gt; \\`${helperNameMap[s]} as _${helperNameMap[s]}\\`)\n</div></li><li><div class=\"code-word\">        .join(<span class=\"hljs-string\">', '</span>)} } from ${JSON.stringify(runtimeModuleName)}\\n\\`)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 处理 ssrHelpers</span>\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 处理 imports</span>\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 处理 scopeId</span>\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  genHoists(ast.hoists, context)\n</div></li><li><div class=\"code-word\">  newline()\n</div></li><li><div class=\"code-word\">  push(\\`export \\`)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"32\">\n                      下面我们结合前面的示例来分析这个过程，此时 genScopeId 为\n                      false，所以相关逻辑我们可以不看。ast.helpers 是在\n                      transform 阶段通过 context.helper 方法添加的，它的值如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">[\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">Symbol</span>(resolveComponent),\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">Symbol</span>(createVNode),\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">Symbol</span>(createCommentVNode),\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">Symbol</span>(toDisplayString),\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">Symbol</span>(openBlock),\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">Symbol</span>(createBlock)\n</div></li><li><div class=\"code-word\">]\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"34\">\n                      ast.helpers 存储了 Symbol 对象的数组，我们可以从\n                      helperNameMap 中找到每个 Symbol\n                      对象对应的字符串，helperNameMap 的定义如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> helperNameMap = {\n</div></li><li><div class=\"code-word\">  [FRAGMENT]: <span class=\"hljs-string\">\\`Fragment\\`</span>,\n</div></li><li><div class=\"code-word\">  [TELEPORT]: <span class=\"hljs-string\">\\`Teleport\\`</span>,\n</div></li><li><div class=\"code-word\">  [SUSPENSE]: <span class=\"hljs-string\">\\`Suspense\\`</span>,\n</div></li><li><div class=\"code-word\">  [KEEP_ALIVE]: <span class=\"hljs-string\">\\`KeepAlive\\`</span>,\n</div></li><li><div class=\"code-word\">  [BASE_TRANSITION]: <span class=\"hljs-string\">\\`BaseTransition\\`</span>,\n</div></li><li><div class=\"code-word\">  [OPEN_BLOCK]: <span class=\"hljs-string\">\\`openBlock\\`</span>,\n</div></li><li><div class=\"code-word\">  [CREATE_BLOCK]: <span class=\"hljs-string\">\\`createBlock\\`</span>,\n</div></li><li><div class=\"code-word\">  [CREATE_VNODE]: <span class=\"hljs-string\">\\`createVNode\\`</span>,\n</div></li><li><div class=\"code-word\">  [CREATE_COMMENT]: <span class=\"hljs-string\">\\`createCommentVNode\\`</span>,\n</div></li><li><div class=\"code-word\">  [CREATE_TEXT]: <span class=\"hljs-string\">\\`createTextVNode\\`</span>,\n</div></li><li><div class=\"code-word\">  [CREATE_STATIC]: <span class=\"hljs-string\">\\`createStaticVNode\\`</span>,\n</div></li><li><div class=\"code-word\">  [RESOLVE_COMPONENT]: <span class=\"hljs-string\">\\`resolveComponent\\`</span>,\n</div></li><li><div class=\"code-word\">  [RESOLVE_DYNAMIC_COMPONENT]: <span class=\"hljs-string\">\\`resolveDynamicComponent\\`</span>,\n</div></li><li><div class=\"code-word\">  [RESOLVE_DIRECTIVE]: <span class=\"hljs-string\">\\`resolveDirective\\`</span>,\n</div></li><li><div class=\"code-word\">  [WITH_DIRECTIVES]: <span class=\"hljs-string\">\\`withDirectives\\`</span>,\n</div></li><li><div class=\"code-word\">  [RENDER_LIST]: <span class=\"hljs-string\">\\`renderList\\`</span>,\n</div></li><li><div class=\"code-word\">  [RENDER_SLOT]: <span class=\"hljs-string\">\\`renderSlot\\`</span>,\n</div></li><li><div class=\"code-word\">  [CREATE_SLOTS]: <span class=\"hljs-string\">\\`createSlots\\`</span>,\n</div></li><li><div class=\"code-word\">  [TO_DISPLAY_STRING]: <span class=\"hljs-string\">\\`toDisplayString\\`</span>,\n</div></li><li><div class=\"code-word\">  [MERGE_PROPS]: <span class=\"hljs-string\">\\`mergeProps\\`</span>,\n</div></li><li><div class=\"code-word\">  [TO_HANDLERS]: <span class=\"hljs-string\">\\`toHandlers\\`</span>,\n</div></li><li><div class=\"code-word\">  [CAMELIZE]: <span class=\"hljs-string\">\\`camelize\\`</span>,\n</div></li><li><div class=\"code-word\">  [SET_BLOCK_TRACKING]: <span class=\"hljs-string\">\\`setBlockTracking\\`</span>,\n</div></li><li><div class=\"code-word\">  [PUSH_SCOPE_ID]: <span class=\"hljs-string\">\\`pushScopeId\\`</span>,\n</div></li><li><div class=\"code-word\">  [POP_SCOPE_ID]: <span class=\"hljs-string\">\\`popScopeId\\`</span>,\n</div></li><li><div class=\"code-word\">  [WITH_SCOPE_ID]: <span class=\"hljs-string\">\\`withScopeId\\`</span>,\n</div></li><li><div class=\"code-word\">  [WITH_CTX]: <span class=\"hljs-string\">\\`withCtx\\`</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"36\">\n                      由于 optimizeBindings 是 false，所以会执行如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">push(\\`<span class=\"hljs-keyword\">import</span> { ${ast.helpers\n</div></li><li><div class=\"code-word\">  .map(s =&gt; \\`${helperNameMap[s]} as _${helperNameMap[s]}\\`)\n</div></li><li><div class=\"code-word\">  .join(<span class=\"hljs-string\">', '</span>)} } from ${JSON.stringify(runtimeModuleName)}\\n\\`)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"38\">\n                      最终会生成这些代码，并更新到 context.code 中：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from <span class=\"hljs-string\">\"vue\"</span>\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"40\">\n                      通过生成的代码，我们可以直观地感受到，这里就是从 Vue\n                      中引入了一些辅助方法，那么为什么需要引入这些辅助方法呢，这就和\n                      Vue.js 3.0 的设计有关了。\n                    </p>\n                    <p data-nodeid=\"41\">\n                      在 Vue.js 2.x 中，创建 VNode 的方法比如 $createElement、_c\n                      这些都是挂载在组件的实例上，在生成渲染函数的时候，直接从组件实例\n                      vm 中访问这些方法即可。\n                    </p>\n                    <p data-nodeid=\"42\">\n                      而到了 Vue.js 3.0，创建 VNode 的方法 createVNode\n                      是直接通过模块的方式导出，其它方法比如\n                      resolveComponent、openBlock\n                      ，都是类似的，所以我们首先需要生成这些 import\n                      声明的预设代码。\n                    </p>\n                    <p data-nodeid=\"43\">\n                      我们接着往下看，ssrHelpers 是 undefined，imports\n                      的数组长度为空，genScopeId 为\n                      false，所以这些内部逻辑都不会执行，接着执行 genHoists\n                      生成静态提升的相关代码，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">genHoists</span><span class=\"hljs-params\">(hoists, context)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!hoists.length) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  context.pure = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { push, newline } = <span class=\"hljs-function\">context\n</span></div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">newline</span><span class=\"hljs-params\">()</span>\n</div></li><li><div class=\"code-word\">  hoists.<span class=\"hljs-title\">forEach</span><span class=\"hljs-params\">((exp, i)</span> =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (exp) {\n</div></li><li><div class=\"code-word\">      push(\\`<span class=\"hljs-keyword\">const</span> _hoisted_${i + <span class=\"hljs-number\">1</span>} = \\`)\n</div></li><li><div class=\"code-word\">      genNode(exp, context)\n</div></li><li><div class=\"code-word\">      newline()\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  context.pure = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"45\">\n                      首先通过执行 newline 生成一个空行，然后遍历 hoists\n                      数组，生成静态提升变量定义的方法。此时 hoists\n                      的值是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">15</span>, <span class=\"hljs-comment\">/* JS_OBJECT_EXPRESSION */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"properties\"</span>: [\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">16</span>, <span class=\"hljs-comment\">/* JS_PROPERTY */</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"key\"</span>: {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isConstant\"</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"class\"</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isStatic\"</span>: <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">        },\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"value\"</span>: {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isConstant\"</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"app\"</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isStatic\"</span>: <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    ]\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">15</span>, <span class=\"hljs-comment\">/* JS_OBJECT_EXPRESSION */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"properties\"</span>: [\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">16</span>, <span class=\"hljs-comment\">/* JS_PROPERTY */</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"key\"</span>: {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isConstant\"</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"key\"</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isStatic\"</span>: <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">        },\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"value\"</span>: {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isConstant\"</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"1\"</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isStatic\"</span>: <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    ]\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">13</span>, <span class=\"hljs-comment\">/* VNODE_CALL */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"tag\"</span>: <span class=\"hljs-string\">\"\\\"p\\\"\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"children\"</span>: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">/* ELEMENT */</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"static\"</span>\n</div></li><li><div class=\"code-word\">    },                                                  \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"patchFlag\"</span>: <span class=\"hljs-string\">\"-1 /* HOISTED */\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"isBlock\"</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"disableTracking\"</span>: <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">13</span>, <span class=\"hljs-comment\">/* VNODE_CALL */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"tag\"</span>: <span class=\"hljs-string\">\"\\\"p\\\"\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"children\"</span>: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-comment\">/* ELEMENT */</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"static\"</span>,\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"patchFlag\"</span>: <span class=\"hljs-string\">\"-1 /* HOISTED */\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"isBlock\"</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"disableTracking\"</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">]\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"47\">\n                      这里，hoists 数组的长度为 4，前两个都是 JavaScript\n                      对象表达式节点，后两个是 VNodeCall 节点，通过 genNode\n                      我们可以把这些节点生成对应的代码，这个方法我们后续会详细说明，这里先略过。\n                    </p>\n                    <p data-nodeid=\"48\">\n                      然后通过遍历 hoists 我们生成如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"50\">\n                      可以看到，除了从 Vue\n                      中导入辅助方法，我们还创建了静态提升的变量。\n                    </p>\n                    <p data-nodeid=\"51\">\n                      我们回到 genModulePreamble，接着会执行<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"124\"\n                        >newline()</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"126\"\n                        >push(export )</code\n                      >，非常好理解，也就是添加了一个空行和 export 字符串。\n                    </p>\n                    <p data-nodeid=\"52\">\n                      至此，预设代码生成完毕，我们就得到了这些代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> \n</div></li></ol></code></pre>\n                    </div>\n\n                    <h3 data-nodeid=\"54\">生成渲染函数</h3>\n                    <p data-nodeid=\"55\">\n                      接下来，就是生成渲染函数了，我们回到 generate 函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (!ssr) {\n</div></li><li><div class=\"code-word\">push(\\`<span class=\"hljs-function\">function <span class=\"hljs-title\">render</span><span class=\"hljs-params\">(_ctx, _cache)</span> </span>{\\`);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">push(\\`<span class=\"hljs-function\">function <span class=\"hljs-title\">ssrRender</span><span class=\"hljs-params\">(_ctx, _push, _parent, _attrs)</span> </span>{\\`);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">indent();\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"57\">\n                      由于 ssr 为 false, 所以生成如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"59\">\n                      注意，<strong data-nodeid=\"137\"\n                        >这里代码的最后一行有 2 个空格的缩进</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"60\">\n                      另外，由于 useWithBlock 为 false，所以我们也不需生成 with\n                      相关的代码。而且，这里我们创建了 render\n                      的函数声明，接下来的代码都是在生成 render 的函数体。\n                    </p>\n                    <h3 data-nodeid=\"61\">生成资源声明代码</h3>\n                    <p data-nodeid=\"62\">\n                      在 render 函数体的内部，我们首先要生成资源声明代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 生成自定义组件声明代码</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (ast.components.length) {\n</div></li><li><div class=\"code-word\">  genAssets(ast.components, <span class=\"hljs-string\">'component'</span>, context);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (ast.directives.length || ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">    newline();\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 生成自定义指令声明代码</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (ast.directives.length) {\n</div></li><li><div class=\"code-word\">  genAssets(ast.directives, <span class=\"hljs-string\">'directive'</span>, context);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">    newline();\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 生成临时变量代码</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (ast.temps &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">  push(\\`let \\`);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; ast.temps; i++) {\n</div></li><li><div class=\"code-word\">    push(\\`${i &gt; <span class=\"hljs-number\">0</span> ? \\`, \\` : \\`\\`}_temp${i}\\`);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"64\">\n                      在我们的示例中，directives 数组长度为 0，temps 的值是\n                      0，所以自定义指令和临时变量代码生成的相关逻辑跳过，而这里\n                      components的值是<code data-backticks=\"1\" data-nodeid=\"142\"\n                        >[\"hello\"]</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"65\">\n                      接着就通过 genAssets\n                      去生成自定义组件声明代码，我们来看一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">genAssets</span><span class=\"hljs-params\">(assets, type, { helper, push, newline })</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> resolver = helper(type === <span class=\"hljs-string\">'component'</span> ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; assets.length; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> id = assets[i]\n</div></li><li><div class=\"code-word\">    push(\\`<span class=\"hljs-keyword\">const</span> ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)})\\`)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (i &lt; assets.length - <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">      newline()\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"67\">\n                      这里的 helper 函数就是从前面提到的 helperNameMap\n                      中查找对应的字符串，对于 component，返回的就是\n                      resolveComponent。\n                    </p>\n                    <p data-nodeid=\"68\">\n                      接着会遍历 assets\n                      数组，生成自定义组件声明代码，在这个过程中，它们会把变量通过\n                      toValidAssetId 进行一层包装：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">toValidAssetId</span><span class=\"hljs-params\">(name, type)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> \\`_${type}_${name.replace(/[^\\w]/g, <span class=\"hljs-string\">'_'</span>)}\\`;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"70\">\n                      比如 hello 组件，执行 toValidAssetId 就变成了\n                      _component_hello。\n                    </p>\n                    <p data-nodeid=\"71\">\n                      因此对于我们的示例而言，genAssets 后生成的代码是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"73\">\n                      这很好理解，通过\n                      resolveComponent，我们就可以解析到注册的自定义组件对象，然后在后面创建组件\n                      vnode 的时候当做参数传入。\n                    </p>\n                    <p data-nodeid=\"74\">\n                      回到 generate 函数，接下来会执行如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (ast.components.length || ast.directives.length || ast.temps) {\n</div></li><li><div class=\"code-word\">  push(\\`\\n\\`);\n</div></li><li><div class=\"code-word\">  newline();\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (!ssr) {\n</div></li><li><div class=\"code-word\">  push(\\`<span class=\"hljs-keyword\">return</span> \\`);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"76\">\n                      这里是指，如果生成了资源声明代码，则在尾部添加一个换行符，然后再生成一个空行，并且如果不是\n                      ssr，则再添加一个 return 字符串，此时得到的代码结果如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveComponent <span class=\"hljs-keyword\">as</span> _resolveComponent, createVNode <span class=\"hljs-keyword\">as</span> _createVNode, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, toDisplayString <span class=\"hljs-keyword\">as</span> _toDisplayString, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">1</span> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_3 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_4 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">\"static\"</span>, <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _component_hello = _resolveComponent(<span class=\"hljs-string\">\"hello\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> \n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"78\">\n                      好的，我们就先分析到这里，下节课继续来看生成创建 VNode\n                      树的表达式的过程。\n                    </p>\n                    <blockquote data-nodeid=\"79\">\n                      <p data-nodeid=\"80\">\n                        本节课的相关代码在源代码中的位置如下：<br />\n                        packages/compiler-core/src/codegen.ts\n                      </p>\n                    </blockquote>\n            "}