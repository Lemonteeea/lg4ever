{"title":"第12讲：浏览器如何执行 JavaScript 代码？","context":"\n                    <p data-nodeid=\"909\" class=\"\">\n                      这一课时从编译过程和内存管理两个方面带你来探索 JavaScript\n                      引擎的工作机制。\n                    </p>\n                    <h3 data-nodeid=\"910\">编译过程</h3>\n                    <p data-nodeid=\"911\">\n                      在“加餐1：手写 CSS\n                      预处理器”中提过编译器的基本工作流程，大体上包括 3\n                      个步骤：解析（Parsing）、转换（Transformation）及代码生成（Code\n                      Generation），JavaScript\n                      引擎与之相比大体上也遵循这个过程，可分为解析、解释和优化 3\n                      个步骤。下面我们就以 V8 引擎为例进行讲解。\n                    </p>\n                    <h4 data-nodeid=\"912\">解析</h4>\n                    <p data-nodeid=\"913\">解析步骤又可以拆分成 2 个小步骤：</p>\n                    <ul data-nodeid=\"914\">\n                      <li data-nodeid=\"915\">\n                        <p data-nodeid=\"916\">\n                          <strong data-nodeid=\"996\">词法分析</strong>，将\n                          JavaScript 代码解析成一个个的令牌（Token）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"917\">\n                        <p data-nodeid=\"918\">\n                          <strong data-nodeid=\"1001\">语法分析</strong\n                          >，将令牌组装成一棵抽象的语法树（AST）。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"919\">\n                      下面是一段简单的代码，声明了一个字符串变量并调用函数\n                      console.log 进行打印。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">'web'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(name)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"921\">\n                      通过<strong data-nodeid=\"1008\">词法分析</strong\n                      >会对这段代码逐个字符进行解析，生成类似下面结构的令牌（Token），这些令牌类型各不相同，有关键字、标识符、符号、字符串。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">Keyword(<span class=\"hljs-keyword\">var</span>)\n</div></li><li><div class=\"code-word\">Identifier(name)\n</div></li><li><div class=\"code-word\">Punctuator(=)\n</div></li><li><div class=\"code-word\">String(<span class=\"hljs-string\">'web'</span>)\n</div></li><li><div class=\"code-word\">Identifier(console)\n</div></li><li><div class=\"code-word\">Punctuator(.)\n</div></li><li><div class=\"code-word\">Identifier(log)\n</div></li><li><div class=\"code-word\">Punctuator(()\n</div></li><li><div class=\"code-word\">Identifier(name)\n</div></li><li><div class=\"code-word\">Punctuator())\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"923\">\n                      语法分析阶段会用令牌生成类似下面结构的抽象语法树，生成树的过程并不是简单地把所有令牌都添加到树上，而是去除了不必要的符号令牌之后，按照语法规则来生成。\n                    </p>\n                    <p data-nodeid=\"924\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/27/1E/Ciqc1F70ZQSAGf1cAAEehLtbbTk491.png\"\n                        alt=\"1.png\"\n                        data-nodeid=\"1012\"\n                      /><br />\n                      抽象语法树\n                    </p>\n                    <h4 data-nodeid=\"925\">解释</h4>\n                    <p data-nodeid=\"926\">\n                      在加餐 1 中，我们将 AST 转换成新的 AST，而 JavaScript\n                      引擎是通过解释器 Ignition 将 AST\n                      转换成字节码。字节码是对机器码的一个抽象描述，相对于机器码而言，它的代码量更小，从而可以减少内存消耗。\n                    </p>\n                    <p data-nodeid=\"927\">\n                      下面代码是从示例代码生成的字节码中截取的一段。它的语法已经非常接近汇编语言了，有很多操作符，比如\n                      StackCheck、Star、Return。考虑这些操作符过于底层，涉及处理器的累加器及寄存器操作，已经超出前端范围，这里就不详细介绍了。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[generated bytecode <span class=\"hljs-keyword\">for</span> function: log (<span class=\"hljs-number\">0x1e680d83fc59</span> &lt;SharedFunctionInfo log&gt;)]\n</div></li><li><div class=\"code-word\">Parameter count <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">Register count <span class=\"hljs-number\">6</span>\n</div></li><li><div class=\"code-word\">Frame size <span class=\"hljs-number\">48</span>\n</div></li><li><div class=\"code-word\">&nbsp;<span class=\"hljs-number\">9646</span> E&gt; <span class=\"hljs-number\">0x376a94a60ea6</span> @&nbsp; &nbsp; <span class=\"hljs-number\">0</span> : a7&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; StackCheck&nbsp;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;......\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-number\">0x376a94a60ec9</span> @&nbsp; &nbsp;<span class=\"hljs-number\">35</span> : <span class=\"hljs-number\">26</span> f6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Star r5\n</div></li><li><div class=\"code-word\">&nbsp;<span class=\"hljs-number\">9683</span> E&gt; <span class=\"hljs-number\">0x376a94a60ecb</span> @&nbsp; &nbsp;<span class=\"hljs-number\">37</span> : <span class=\"hljs-number\">5</span>a f9 <span class=\"hljs-number\">02</span> f7 f6 <span class=\"hljs-number\">06</span> CallProperty2 r2, &lt;<span class=\"hljs-keyword\">this</span>&gt;, r4, r5, [<span class=\"hljs-number\">6</span>]\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-number\">0x376a94a60ed1</span> @&nbsp; &nbsp;<span class=\"hljs-number\">43</span> : <span class=\"hljs-number\">0</span>d&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LdaUndefined&nbsp;\n</div></li><li><div class=\"code-word\">&nbsp;<span class=\"hljs-number\">9729</span> S&gt; <span class=\"hljs-number\">0x376a94a60ed2</span> @&nbsp; &nbsp;<span class=\"hljs-number\">44</span> : <span class=\"hljs-function\">ab&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Return&nbsp;\n</span></div></li><li><div class=\"code-word\">Constant <span class=\"hljs-title\">pool</span> <span class=\"hljs-params\">(size = <span class=\"hljs-number\">3</span>)</span>\n</div></li><li><div class=\"code-word\">Handler <span class=\"hljs-title\">Table</span> <span class=\"hljs-params\">(size = <span class=\"hljs-number\">0</span>)</span>\n</div></li><li><div class=\"code-word\">Source Position <span class=\"hljs-title\">Table</span> <span class=\"hljs-params\">(size = <span class=\"hljs-number\">24</span>)</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"929\">优化</h4>\n                    <p data-nodeid=\"930\">\n                      解释器在得到 AST\n                      之后，会按需进行解释和执行，也就是说如果某个函数没有被调用，则不会去解释执行它。\n                    </p>\n                    <p data-nodeid=\"931\">\n                      在这个过程中解释器会将一些重复可优化的操作（比如类型判断）收集起来生成分析数据，然后将生成的字节码和分析数据传给编译器\n                      TurboFan，编译器会依据分析数据来生成高度优化的机器码。\n                    </p>\n                    <p data-nodeid=\"932\">\n                      优化后的机器码的作用和缓存很类似，当解释器再次遇到相同的内容时，就可以直接执行优化后的机器码。当然优化后的代码有时可能会无法运行（比如函数参数类型改变），那么会再次反优化为字节码交给解释器。\n                    </p>\n                    <p data-nodeid=\"933\">整个过程如下面流程图所示：</p>\n                    <p data-nodeid=\"934\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/27/29/CgqCHl70ZTqAR9m6AAEz8M57qjs116.png\"\n                        alt=\"3.png\"\n                        data-nodeid=\"1025\"\n                      /><br />\n                      JavaScript 编译过程\n                    </p>\n                    <h3 data-nodeid=\"935\">内存管理</h3>\n                    <p data-nodeid=\"936\">\n                      JavaScript 引擎的内存空间分为<strong data-nodeid=\"1034\"\n                        >堆（Heap）和栈（Stack）</strong\n                      >。堆和栈是两种不同的数据结构，堆是具有树结构的数组，栈也是数组，但是遵循“先进后出”规则。\n                    </p>\n                    <h4 data-nodeid=\"937\">栈</h4>\n                    <p data-nodeid=\"938\">\n                      栈是一个临时存储空间，主要存储局部变量和函数调用（对于全局表达式会创建匿名函数并调用）。\n                    </p>\n                    <p data-nodeid=\"939\">\n                      对于基本数据类型（String、Undefined、Null、Boolean、Number、BigInt、Symbol）的局部变量，会直接在栈中创建，而对象数据类型局部变量会存储在堆中，栈中只存储它的引用地址，也就是我们常说的浅拷贝。全局变量以及闭包变量也是只存储引用地址。总而言之栈中存储的数据都是轻量的。\n                    </p>\n                    <p data-nodeid=\"940\">\n                      对于函数，解释器创建了“调用栈”（Call\n                      Stack）来记录函数的调用流程。每调用一个函数，解释器就会把该函数添加进调用栈，解释器会为被添加进的函数创建一个栈帧\n                      （Stack\n                      Frame，这个栈帧用来保存函数的局部变量以及执行语句）并立即执行。如果正在执行的函数还调用了其它函数，那么新函数也将会被添加进调用栈并执行。一旦这个函数执行结束，对应的栈帧也会被立即销毁。\n                    </p>\n                    <p data-nodeid=\"941\">查看调用栈的方式有 2 种：</p>\n                    <ul data-nodeid=\"942\">\n                      <li data-nodeid=\"943\">\n                        <p data-nodeid=\"944\">\n                          调用函数 console.trace() 打印到控制台；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"945\">\n                        <p data-nodeid=\"946\">\n                          利用浏览器开发者工具进行断点调试。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"947\">示例</h4>\n                    <p data-nodeid=\"948\">\n                      下面的代码是一个计算斐波那契数列的函数，分别通过调用\n                      console.trace() 函数以及断点的方式得到了它的调用栈信息。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">n</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-built_in\">console</span>.trace();\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> fib(n<span class=\"hljs-number\">-1</span>) + fib(n<span class=\"hljs-number\">-2</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">fib(<span class=\"hljs-number\">4</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"950\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/27/16/Ciqc1F70SjGAI_8JAAANLDVx3V0087.png\"\n                        alt=\"image (31).png\"\n                        data-nodeid=\"1046\"\n                      /><br />\n                      示例效果图\n                    </p>\n                    <p data-nodeid=\"951\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/27/16/Ciqc1F70SjmAfUtiAAAkCGWd2MI629.png\"\n                        alt=\"image (32).png\"\n                        data-nodeid=\"1051\"\n                      /><br />\n                      示例效果图\n                    </p>\n                    <p data-nodeid=\"952\">\n                      虽然栈很轻量，只会在使用时创建，使用结束时销毁，但它并不是可以无限增长的。当分配的调用栈空间被占满时，就会引发“栈溢出”错误。\n                    </p>\n                    <p data-nodeid=\"953\">\n                      下面是一个递归函数导致的栈溢出报错代码片段：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">recursive</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; recursive()\n</div></li><li><div class=\"code-word\">})()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"955\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/27/16/Ciqc1F70Sk6ANM__AAAQ-wQno2Q416.png\"\n                        alt=\"image (33).png\"\n                        data-nodeid=\"1058\"\n                      /><br />\n                      栈溢出错误\n                    </p>\n                    <p data-nodeid=\"956\">\n                      所以我们在编写递归函数的时候一定要注意函数执行边界，也就是退出递归的条件。\n                    </p>\n                    <h3 data-nodeid=\"957\">延申：尾调用</h3>\n                    <p data-nodeid=\"958\">\n                      递归调用由于调用次数较多，同时每层函数调用都需要保存栈帧，所以通常是比较消耗内存的操作。对递归的优化一般有两个思路，<strong\n                        data-nodeid=\"1068\"\n                        >减少递归次数和使用尾调用</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"959\">\n                      尾调用（Tail Call）是指<strong data-nodeid=\"1074\"\n                        >函数的最后一步返回另一个函数的调用</strong\n                      >。例如下面的代码中，函数 a() 返回了函数 b() 的调用。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\">x</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> b(x);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"961\">\n                      像下面的示例中，返回缓存的函数调用结果，或者返回多个函数调用都不属于“尾调用”。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\">x</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> c = b(x);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> c;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\">x</span>)</span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> b(x) + c(x);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  b(x)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"963\">\n                      尾调用由于是在 return\n                      语句中，并且是函数的最后一步操作，所以局部变量等信息不需要再用到，从而可以立即释放节省内存空间。\n                    </p>\n                    <p data-nodeid=\"964\">\n                      下面的示例代码通过递归实现了求斐波那契额数列第 n\n                      个数的功能。函数 fibTail() 相对于函数 fib()\n                      就同时使用了尾调用以及减少调用次数两种优化方式。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">n</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> fib(n<span class=\"hljs-number\">-1</span>) + fib(n<span class=\"hljs-number\">-2</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibTail</span>(<span class=\"hljs-params\">n, a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">1</span></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (n === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> a\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> fibTail(n - <span class=\"hljs-number\">1</span>, b, a + b)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"966\">\n                      但是由于尾调用也存在一些隐患，比如错误信息丢失、不方便调试，所以浏览器以及\n                      Node.js 环境默认并没有支持这种优化方式。\n                    </p>\n                    <h4 data-nodeid=\"967\">堆</h4>\n                    <p data-nodeid=\"968\">\n                      堆空间存储的数据比较复杂，大致可以划分为下面 5\n                      个区域：代码区（Code Space）、Map 区(Map\n                      Space)、大对象区（Large Object Space）、新生代（New\n                      Space）、老生代（Old\n                      Space）。这一课时重点讨论新生代和老生代的内存回收算法。\n                    </p>\n                    <h4 data-nodeid=\"969\">新生代</h4>\n                    <p data-nodeid=\"970\">\n                      大多数的对象最开始都会被分配在新生代，该存储空间相对较小，只有几十\n                      MB，分为两个空间：from 空间和 to 空间。\n                    </p>\n                    <p data-nodeid=\"971\">\n                      程序中声明的对象首先会被分配到 from\n                      空间，当进行垃圾回收时，会先将 from\n                      空间中存活的的对象（存活对象可以理解为被引用的对象）复制到\n                      to\n                      空间进行保存，对未存活的对象空间进行回收。当复制完成后，from\n                      空间和 to 空间进行调换，to 空间会变为新的 from\n                      空间，原来的 from 空间则变为 to 空间，这种算法称之为\n                      “Scavenge”。\n                    </p>\n                    <p data-nodeid=\"1371\">\n                      新生代的内存回收频率很高、速度也很快，但空间利用率较低，因为让一半的内存空间处于“闲置”状态。\n                    </p>\n                    <p data-nodeid=\"2305\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/25/15/Cgp9HWBZVYuADfmqAACqB-v2Dq0515.png\"\n                        alt=\"1.png\"\n                        data-nodeid=\"2308\"\n                      /><br />\n                      Scanvage 回收过程\n                    </p>\n\n                    <h4 data-nodeid=\"974\">老生代</h4>\n                    <p data-nodeid=\"975\">\n                      新生代中多次回收仍然存活的对象会被转移到空间较大的老生代。因为老生代空间较大，如果回收方式仍然采用\n                      Scanvage 算法来频繁复制对象，那性能开销就太大了。\n                    </p>\n                    <p data-nodeid=\"976\">\n                      所以老生代采用的是另一种“<strong data-nodeid=\"1101\"\n                        >标记清除</strong\n                      >”（<strong data-nodeid=\"1102\">Mark-Sweep</strong\n                      >）的方式来回收未存活的对象空间。\n                    </p>\n                    <p data-nodeid=\"977\">\n                      这种方式主要分为<strong data-nodeid=\"1112\">标记</strong\n                      >和<strong data-nodeid=\"1113\">清除</strong\n                      >两个阶段。标记阶段会遍历堆中所有对象，并对存活的对象进行标记；清除阶段则是对未标记对象的空间进行回收。\n                    </p>\n                    <p data-nodeid=\"978\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/27/1E/Ciqc1F70ZZWAeo71AABOQKZ828k489.png\"\n                        alt=\"5.png\"\n                        data-nodeid=\"1116\"\n                      /><br />\n                      标记清除回收过程\n                    </p>\n                    <p data-nodeid=\"979\">\n                      由于标记清除不会对内存一分为二，所以不会浪费空间。但是进行过标记清除之后的内存空间会产生很多不连续的碎片空间，这种不连续的碎片空间中，在遇到较大对象时可能会由于空间不足而导致无法存储的情况。\n                    </p>\n                    <p data-nodeid=\"980\">\n                      为了解决内存碎片的问题，提高对内存的利用，还需要使用到<strong\n                        data-nodeid=\"1125\"\n                        >标记整理（Mark-Compact）</strong\n                      >\n                      算法。标记整理算法相对于标记清除算法在回收阶段进行了改进，标记整理对待未标记的对象并不是立即进行回收，而是将存活的对象移动到一边，然后再清理。当然这种移动对象的操作相对而言是比较耗时的，所以执行速度上，比标记清除要慢。\n                    </p>\n                    <p data-nodeid=\"981\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/27/21/Ciqc1F70cS2AU5w_AABOiU6R39g235.png\"\n                        alt=\"6.png\"\n                        data-nodeid=\"1128\"\n                      /><br />\n                      标记整理回收过程\n                    </p>\n                    <h3 data-nodeid=\"982\">总结</h3>\n                    <p data-nodeid=\"983\">\n                      本课时的内容偏于底层和抽象，重点在于理解和记忆。\n                    </p>\n                    <p data-nodeid=\"984\">\n                      首先讲解了 JavaScript\n                      引擎的执行过程，包括解析、解释和优化，这一部分可以结合加餐\n                      1 中提到的编译器知识进行理解。\n                    </p>\n                    <p data-nodeid=\"985\">\n                      然后讲到了 JavaScript\n                      引擎的内存分为栈和堆两个部分，栈可以保存函数调用信息以及局部变量，特点是“先进后出”以及“用完立即销毁”。堆区存储的数据对象通常比较大，需要采用一定的回收算法来处理，包括用于新生代的\n                      Scanvage 算法，以及用于老生代的标记清除和标记整理算法。\n                    </p>\n                    <p data-nodeid=\"986\" class=\"\">\n                      最后布置一道思考题：你还了解过哪些内存回收算法，它们有什么优缺点？\n                    </p>\n            "}