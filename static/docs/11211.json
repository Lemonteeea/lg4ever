{"title":"09 | 从实战出发，从 0 到 1 构建一个符合标准的公共库","context":"\n                    <p data-nodeid=\"1489\" class=\"\">\n                      上一讲我们从 Babel\n                      编译预设的角度理清了前端生态中的公共库和应用的丝缕关联，这一讲我们就从实战出发，动手剖析一个公共库从设计到完成的过程。\n                    </p>\n                    <p data-nodeid=\"1490\">\n                      （源码出处：<a\n                        href=\"https://github.com/intricatecloud/reusable-js-demo\"\n                        data-nodeid=\"1608\"\n                        >Creating a simple npm library to use in and out of the\n                        browser）</a\n                      >\n                    </p>\n                    <h3 data-nodeid=\"1491\">实战打造一个公共库</h3>\n                    <p data-nodeid=\"1492\">\n                      下面我们从实战出发，从 0 到 1\n                      构建一个符合标准的公共库。我们的目标是，借助\n                      <a\n                        href=\"https://github.com/public-apis/public-apis\"\n                        data-nodeid=\"1613\"\n                        >Public APIs</a\n                      >，通过网络请求获取 dogs/cats/goats\n                      三种动物的随机图像，并进行展示。更重要的是，将整个逻辑过程抽象成可以在浏览器端和\n                      Node.js 端复用的 npm 包，编译构建使用 Webpack 和 Babel。\n                    </p>\n                    <p data-nodeid=\"1493\">首先创建文件：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">$ mkdir animal-api\n</div></li><li><div class=\"code-word\">$ cd animal-api\n</div></li><li><div class=\"code-word\">$ npm init\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1495\">\n                      并通过 npm init 初始化一个 package.json 文件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"animal-api\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"scripts\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"author\"</span>: <span class=\"hljs-string\">\"\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"license\"</span>: <span class=\"hljs-string\">\"ISC\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1497\">\n                      编写<code data-backticks=\"1\" data-nodeid=\"1618\"\n                        >index.js</code\n                      >代码逻辑非常简单，如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> axios from <span class=\"hljs-string\">'axios'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> getCat = () =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 发送请求</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">'https://aws.random.cat/meow'</span>).then((response) =&gt; {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> imageSrc = response.data.file\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">'CAT'</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> {imageSrc, text}\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> getDog = () =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> axios.get(<span class=\"hljs-string\">'https://random.dog/woof.json'</span>).then((response) =&gt; {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> imageSrc = response.data.url\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">'DOG'</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> {imageSrc, text}\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> getGoat = () =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> imageSrc = <span class=\"hljs-string\">'http://placegoat.com/200'</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">'GOAT'</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> Promise.resolve({imageSrc, text})\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">export <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    getDog,\n</div></li><li><div class=\"code-word\">    getCat,\n</div></li><li><div class=\"code-word\">    getGoat\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1499\">我们通过三个接口：</p>\n                    <ul data-nodeid=\"1500\">\n                      <li data-nodeid=\"1501\">\n                        <p data-nodeid=\"1502\">https://aws.random.cat/meow</p>\n                      </li>\n                      <li data-nodeid=\"1503\">\n                        <p data-nodeid=\"1504\">https://random.dog/woof.json</p>\n                      </li>\n                      <li data-nodeid=\"1505\">\n                        <p data-nodeid=\"1506\">http://placegoat.com/200</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1507\">封装了三个获取图片地址的函数：</p>\n                    <ul data-nodeid=\"1508\">\n                      <li data-nodeid=\"1509\">\n                        <p data-nodeid=\"1510\">getDog()</p>\n                      </li>\n                      <li data-nodeid=\"1511\">\n                        <p data-nodeid=\"1512\">getCat()</p>\n                      </li>\n                      <li data-nodeid=\"1513\">\n                        <p data-nodeid=\"1514\">getGoat()</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1515\">\n                      <a\n                        href=\"https://github.com/intricatecloud/reusable-js-demo\"\n                        data-nodeid=\"1630\"\n                        >源码</a\n                      >通过 ESM\n                      的方式提供对外接口，请你注意这里的模块化方式，这是一个公共库设计的关键点之一，后文会更详细解析。\n                    </p>\n                    <p data-nodeid=\"1516\">\n                      对公共库来说，质量保证至关重要。我们使用 Jest 来进行\n                      animal-api 这个公共库的单元测试。Jest 作为 devDependecies\n                      被安装，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm install --save-dev jest\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1518\">\n                      编写测试脚本<code data-backticks=\"1\" data-nodeid=\"1634\"\n                        >animal-api/spec/index.spec.js</code\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> AnimalApi from <span class=\"hljs-string\">'../index'</span>\n</div></li><li><div class=\"code-word\">describe(<span class=\"hljs-string\">'animal-api'</span>, () =&gt; {\n</div></li><li><div class=\"code-word\">    it(<span class=\"hljs-string\">'gets dogs'</span>, () =&gt; {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> AnimalApi.getDog()\n</div></li><li><div class=\"code-word\">            .then((animal) =&gt; {\n</div></li><li><div class=\"code-word\">                expect(animal.imageSrc).not.toBeUndefined()\n</div></li><li><div class=\"code-word\">                expect(animal.text).toEqual(<span class=\"hljs-string\">'DOG'</span>)\n</div></li><li><div class=\"code-word\">            })\n</div></li><li><div class=\"code-word\">   })\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1520\">\n                      改写 package.json 中 test script 为 \"test\":\n                      \"jest\"，我们通过运行<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1645\"\n                        >npm run test</code\n                      >来测试。\n                    </p>\n                    <p data-nodeid=\"1521\">\n                      这时候会得到报错：SyntaxError: Unexpected\n                      identifier，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1522\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/0B/Ciqc1F_4C52AbkzPAAJt3nzLhAo939.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"1650\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1523\">\n                      不要慌，这是因为 Jest 并不“认识”import 这样的关键字。Jest\n                      运行在 Node.js 环境中，大部分 Node.js 版本（v10\n                      以下）运行时并不支持 ESM，为了可以使用 ESM\n                      方式编写测试脚本，我们需要<strong data-nodeid=\"1656\"\n                        >安装 babel-jest 和 Babel 相关依赖到开发环境中</strong\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm install --save-dev babel-jest <span class=\"hljs-meta\">@babel</span>/core <span class=\"hljs-meta\">@babel</span>/preset-env\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1525\">\n                      同时创建<code data-backticks=\"1\" data-nodeid=\"1658\"\n                        >babel.config.js</code\n                      >，内容如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  presets: [\n</div></li><li><div class=\"code-word\">    [\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'@babel/preset-env'</span>,\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        targets: {\n</div></li><li><div class=\"code-word\">          node: <span class=\"hljs-string\">'current'</span>,\n</div></li><li><div class=\"code-word\">        },\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">    ],\n</div></li><li><div class=\"code-word\">  ],\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1527\">\n                      注意上述代码，我们将 @babel/preset-env 的 targets.node\n                      属性设置为当前环境 current。再次执行<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1661\"\n                        >npm run test</code\n                      >，得到报错如下：Cannot find module 'axios' from\n                      'index.js'。\n                    </p>\n                    <p data-nodeid=\"1528\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/0B/Ciqc1F_4C6iABmVIAAGxme4pZVw996.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1673\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1529\">\n                      原因看报错信息即可得到，我们需要安装 axios。注意：axios\n                      应该作为生产依赖被安装：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm install --save axios\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1531\">\n                      现在，我们的测试脚本就可以正常运行了。如下图：\n                    </p>\n                    <p data-nodeid=\"1532\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/16/CgqCHl_4C7CAd4ITAAJD5qJ-Ziw380.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"1678\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1533\">\n                      当然，这只是给公共库接入测试，“万里长征”才开始第一步。接下来我们按照各种场景进行更多探索。\n                    </p>\n                    <h3 data-nodeid=\"1534\">打造公共库，支持 script 标签引入</h3>\n                    <p data-nodeid=\"1535\">\n                      在大部分不支持 import\n                      语法特性的浏览器中，为了让我们的脚本直接在浏览器中使用\n                      script 标签引入代码，首先我们<strong data-nodeid=\"1686\"\n                        >需要将已有公共库脚本编译为 UMD 方式</strong\n                      >。类似上面使用 babel-jest 将测试脚本编译降级为当前\n                      Node.js 版本支持的代码，我们还是需要 Babel 进行降级。\n                    </p>\n                    <p data-nodeid=\"1536\">\n                      注意这次不同之处在于：<strong data-nodeid=\"1694\"\n                        >这里的降级需要输出代码内容到一个 output\n                        目录中，浏览器即可直接引入该 output\n                        目录中的编译后资源</strong\n                      >。我们使用<code data-backticks=\"1\" data-nodeid=\"1692\"\n                        >@babel/plugin-transform-modules-umd</code\n                      >来完成对代码的降级编译：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">$ npm install --save-dev <span class=\"hljs-meta\">@babel</span>/plugin-transform-modules-umd <span class=\"hljs-meta\">@babel</span>/core <span class=\"hljs-meta\">@babel</span>/cli\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1538\">\n                      同时在 package.json 中加入相关 script 内容：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1696\"\n                        >\"build\": \"babel index.js -d lib\"</code\n                      >，执行<code data-backticks=\"1\" data-nodeid=\"1698\"\n                        >npm run build</code\n                      >，得到产出（如下图）：\n                    </p>\n                    <p data-nodeid=\"1539\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/0B/Ciqc1F_4C7iARwtEAAEQS1jliOM385.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"1702\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1540\">我们在浏览器中验证产出：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&lt;script src=\"./lib/index.js\"&gt;&lt;/script&gt;\n</div></li><li><div class=\"code-word\">&lt;script&gt;\n</div></li><li><div class=\"code-word\">    AnimalApi.getDog().then(function(animal) {\n</div></li><li><div class=\"code-word\">        document.querySelector('#imageSrc').textContent = animal.imageSrc\n</div></li><li><div class=\"code-word\">        document.querySelector('#text').textContent = animal.text\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">&lt;/script&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1542\">结果出现了报错：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">index.html:<span class=\"hljs-number\">11</span> Uncaught ReferenceError: AnimalApi is not defined\n</div></li><li><div class=\"code-word\">    at index.html:<span class=\"hljs-number\">11</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1544\">\n                      并没有找到 AnimalApi 这个对象，重新翻看编译产出源码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">\"use strict\"</span>;\n</div></li><li><div class=\"code-word\">Object.defineProperty(<span class=\"hljs-keyword\">exports</span>, <span class=\"hljs-string\">\"__esModule\"</span>, {\n</div></li><li><div class=\"code-word\">  value: <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">});\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">exports</span>.<span class=\"hljs-keyword\">default</span> = <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 引入 axios</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> _axios = _interopRequireDefault(require(<span class=\"hljs-string\">\"axios\"</span>));\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//  兼容 default 导出</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">_interopRequireDefault</span><span class=\"hljs-params\">(obj)</span> </span>{ <span class=\"hljs-keyword\">return</span> obj &amp;&amp; obj.__esModule ? obj : { <span class=\"hljs-keyword\">default</span>: obj }; }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 原 getCat 方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> getCat = () =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> _axios.<span class=\"hljs-keyword\">default</span>.get(<span class=\"hljs-string\">'https://aws.random.cat/meow'</span>).then(response =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> imageSrc = response.data.file;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">'CAT'</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">      imageSrc,\n</div></li><li><div class=\"code-word\">      text\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 原 getDog 方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> getDog = () =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> _axios.<span class=\"hljs-keyword\">default</span>.get(<span class=\"hljs-string\">'https://random.dog/woof.json'</span>).then(response =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> imageSrc = response.data.url;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">'DOG'</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">      imageSrc,\n</div></li><li><div class=\"code-word\">      text\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 原 getGoat 方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> getGoat = () =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> imageSrc = <span class=\"hljs-string\">'http://placegoat.com/200'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">'GOAT'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> Promise.resolve({\n</div></li><li><div class=\"code-word\">    imageSrc,\n</div></li><li><div class=\"code-word\">    text\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 默认导出对象</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> _default = {\n</div></li><li><div class=\"code-word\">  getDog,\n</div></li><li><div class=\"code-word\">  getCat,\n</div></li><li><div class=\"code-word\">  getGoat\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">exports</span>.<span class=\"hljs-keyword\">default</span> = _default;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1546\">\n                      发现出现报错是因为 Babel\n                      的编译产出如果要支持全局命名（AnimalApi）空间，需要添加以下配置：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">  plugins: [\n</div></li><li><div class=\"code-word\">      [<span class=\"hljs-string\">\"@babel/plugin-transform-modules-umd\"</span>, {\n</div></li><li><div class=\"code-word\">      exactGlobals: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">      globals: {\n</div></li><li><div class=\"code-word\">        index: <span class=\"hljs-string\">'AnimalApi'</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }]\n</div></li><li><div class=\"code-word\">  ],\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1548\">调整后再运行编译，得到源码：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// umd 导出格式</span>\n</div></li><li><div class=\"code-word\">(function (global, factory) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 兼容 amd 方式</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (typeof define === <span class=\"hljs-string\">\"function\"</span> &amp;&amp; define.amd) {\n</div></li><li><div class=\"code-word\">    define([<span class=\"hljs-string\">\"exports\"</span>, <span class=\"hljs-string\">\"axios\"</span>], factory);\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (typeof <span class=\"hljs-keyword\">exports</span> !== <span class=\"hljs-string\">\"undefined\"</span>) {\n</div></li><li><div class=\"code-word\">    factory(<span class=\"hljs-keyword\">exports</span>, require(<span class=\"hljs-string\">\"axios\"</span>));\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> mod = {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">exports</span>: {}\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">    factory(mod.<span class=\"hljs-keyword\">exports</span>, global.axios);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 挂载 AnimalApi 对象</span>\n</div></li><li><div class=\"code-word\">    global.AnimalApi = mod.<span class=\"hljs-keyword\">exports</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">})(typeof globalThis !== <span class=\"hljs-string\">\"undefined\"</span> ? globalThis : typeof self !== <span class=\"hljs-string\">\"undefined\"</span> ? self : <span class=\"hljs-keyword\">this</span>, function (_exports, _axios) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"use strict\"</span>;\n</div></li><li><div class=\"code-word\">  Object.defineProperty(_exports, <span class=\"hljs-string\">\"__esModule\"</span>, {\n</div></li><li><div class=\"code-word\">    value: <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">  _exports.<span class=\"hljs-keyword\">default</span> = <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  _axios = _interopRequireDefault(_axios);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 兼容 default 导出</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\">function <span class=\"hljs-title\">_interopRequireDefault</span><span class=\"hljs-params\">(obj)</span> </span>{ <span class=\"hljs-keyword\">return</span> obj &amp;&amp; obj.__esModule ? obj : { <span class=\"hljs-keyword\">default</span>: obj }; }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> getCat = () =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> _axios.<span class=\"hljs-keyword\">default</span>.get(<span class=\"hljs-string\">'https://aws.random.cat/meow'</span>).then(response =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> imageSrc = response.data.file;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> text = <span class=\"hljs-string\">'CAT'</span>;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        imageSrc,\n</div></li><li><div class=\"code-word\">        text\n</div></li><li><div class=\"code-word\">      };\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> getDog = () =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ... 省略</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> getGoat = () =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ... 省略</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> _default = {\n</div></li><li><div class=\"code-word\">    getDog,\n</div></li><li><div class=\"code-word\">    getCat,\n</div></li><li><div class=\"code-word\">    getGoat\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  _exports.<span class=\"hljs-keyword\">default</span> = _default;\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1550\">\n                      这时，<strong data-nodeid=\"1713\"\n                        >编译源码产出内容改为了由一个 IIFE\n                        形式实现的命名空间</strong\n                      >。同时观察源码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">global.AnimalApi = mod.<span class=\"hljs-keyword\">exports</span>;\n</div></li><li><div class=\"code-word\">...\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> _default = {\n</div></li><li><div class=\"code-word\">    getDog,\n</div></li><li><div class=\"code-word\">    getCat,\n</div></li><li><div class=\"code-word\">    getGoat\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  _exports.<span class=\"hljs-keyword\">default</span> = _default;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1552\">\n                      为了兼容 ESM 特性，导出内容全部挂在了 default\n                      属性中（可以通过 libraryExport\n                      属性来切换），我们的引用方式需要改为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">AnimalApi.<span class=\"hljs-keyword\">default</span>.getDog().then(function(animal) {\n</div></li><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1554\">\n                      解决了以上所有问题，看似大功告成了，但是工程的设计没有这么简单。事实上，<strong\n                        data-nodeid=\"1724\"\n                        >在源码中，我们没有使用引入并编译 index.js\n                        所需要的依赖</strong\n                      >，比如 axios 并没有被引入处理。正确的方式应该是<strong\n                        data-nodeid=\"1725\"\n                        >把公共库需要的依赖，一并按照依赖关系进行打包和引入</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1555\">\n                      为了解决上面这个问题，此时需要引入 Webpack：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm install --save-dev webpack webpack-cli\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1557\">\n                      同时添加<code data-backticks=\"1\" data-nodeid=\"1728\"\n                        >webpack.config.js</code\n                      >，内容为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> path = require(<span class=\"hljs-string\">'path'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = {\n</div></li><li><div class=\"code-word\">  entry: <span class=\"hljs-string\">'./index.js'</span>,\n</div></li><li><div class=\"code-word\">  output: {\n</div></li><li><div class=\"code-word\">    path: path.resolve(__dirname, <span class=\"hljs-string\">'lib'</span>),\n</div></li><li><div class=\"code-word\">    filename: <span class=\"hljs-string\">'animal-api.js'</span>,\n</div></li><li><div class=\"code-word\">    library: <span class=\"hljs-string\">'AnimalApi'</span>,\n</div></li><li><div class=\"code-word\">    libraryTarget: <span class=\"hljs-string\">'var'</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1559\">\n                      我们设置入口为<code data-backticks=\"1\" data-nodeid=\"1731\"\n                        >./index.js</code\n                      >，构建产出为<code data-backticks=\"1\" data-nodeid=\"1733\"\n                        >./lib/animal-api.js</code\n                      >，同时通过设置 library 和 libraryTarget 将 AnimalApi\n                      作为公共库对外暴露的命名空间。修改<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1735\"\n                        >package.json</code\n                      >中的 build script 为<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1737\"\n                        >\"build\": \"webpack\"</code\n                      >，执行<code data-backticks=\"1\" data-nodeid=\"1739\"\n                        >npm run build</code\n                      >，得到产出，如下图：\n                    </p>\n                    <p data-nodeid=\"1560\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/EE/Cip5yF_4C9GAfFJAAAYFu4ci4cM274.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"1743\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1561\">\n                      至此，我们终于构造出了能够在浏览器中通过 script\n                      标签引入的公共库。当然，一个现代化的公共库还需要支持更多场景，请继续阅读。\n                    </p>\n                    <h3 data-nodeid=\"1562\">打造公共库，支持 Node.js 环境</h3>\n                    <p data-nodeid=\"1563\">\n                      现在已经完成了公共库的浏览器端支持，下面我们要集中精力适配一下\n                      Node.js 环境了。\n                    </p>\n                    <p data-nodeid=\"1564\">\n                      首先编写一个<code data-backticks=\"1\" data-nodeid=\"1748\"\n                        >node.test.js</code\n                      >文件，进行 Node.js 环境的验证：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> AnimalApi = require(<span class=\"hljs-string\">'./index.js'</span>)\n</div></li><li><div class=\"code-word\">AnimalApi.getCat().then(animal =&gt; {\n</div></li><li><div class=\"code-word\">    console.log(animal)\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1566\">\n                      这个文件的意义在于<strong data-nodeid=\"1757\"\n                        >测试公共库是否能在 Node.js 环境下使用</strong\n                      >。执行<code data-backticks=\"1\" data-nodeid=\"1755\"\n                        >node node-test.js</code\n                      >，不出意料得到报错，如下图：\n                    </p>\n                    <p data-nodeid=\"1567\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/EE/Cip5yF_4C9iAVDQkAANk3PGzLdI933.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"1760\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1568\">\n                      这个错误我们并不陌生，在 Node.js 环境中，我们不能通过\n                      require 来引入一个通过 ESM\n                      编写的模块化文件。上面的操作中，我们通过 Webpack\n                      编译出来了符合 UMD 规范的代码，尝试修改<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1762\"\n                        >node.test.js</code\n                      >文件为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> AnimalApi = require(<span class=\"hljs-string\">'./lib/index'</span>).<span class=\"hljs-keyword\">default</span>\n</div></li><li><div class=\"code-word\">AnimalApi.getCat().then((animal) =&gt; {\n</div></li><li><div class=\"code-word\">    console.log(animal)\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1570\">\n                      如上代码，我们按照<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"1765\"\n                        >require('./lib/index').default</code\n                      >的方式引用，就可以愉快地在 Node.js 环境中运行了。\n                    </p>\n                    <p data-nodeid=\"1571\">\n                      事实上，依赖上一步的构建产出，我们只需要按照正确的引用路径，就可以轻松地支持\n                      Node.js\n                      环境了。是不是有些恍恍惚惚：“基本什么都没做，这就搞定了”，下面，我们从代码原理上阐述说明。\n                    </p>\n                    <p data-nodeid=\"1572\">符合 UMD 规范的代码，形如：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">(function (root, factory) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (typeof define === <span class=\"hljs-string\">'function'</span> &amp;&amp; define.amd) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// AMD. Register as an anonymous module.</span>\n</div></li><li><div class=\"code-word\">        define([<span class=\"hljs-string\">'b'</span>], factory);\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (typeof <span class=\"hljs-keyword\">module</span> === <span class=\"hljs-string\">'object'</span> &amp;&amp; <span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// Node.</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">module</span>.<span class=\"hljs-keyword\">exports</span> = factory(require(<span class=\"hljs-string\">'b'</span>));\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// Browser globals (root is window)</span>\n</div></li><li><div class=\"code-word\">        root.returnExports = factory(root.b);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}(typeof self !== <span class=\"hljs-string\">'undefined'</span> ? self : <span class=\"hljs-keyword\">this</span>, function (b) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// Use b in some fashion.</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// Just return a value to define the module export.</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// This example returns an object, but the module</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// can return a function as the exported value.</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> {};\n</div></li><li><div class=\"code-word\">}));\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1574\">\n                      如上结构，通过 if...else\n                      判断是否根据环境加载代码。我们的编译产出类似上面 UMD\n                      格式，因此是天然支持浏览器和 Node.js 环境的。\n                    </p>\n                    <p data-nodeid=\"1575\">\n                      但是这样的设计将 Node.js 和浏览器环境融合在了一个 bundle\n                      当中，并不优雅，也不利于使用方优化。另外一个常见的做法是<strong\n                        data-nodeid=\"1775\"\n                        >将公共库按环境区分，分别产出两个 bundle，分别支持\n                        Node.js 和浏览器环境</strong\n                      >。如下图架构：\n                    </p>\n                    <p data-nodeid=\"1576\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/F0/CgpVE1_4C-KADRY4AAFZJiKE29s142.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"1778\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1577\">\n                      <p style=\"text-align: center\">\n                        公共库支持浏览器/Node.js 环境方式示意图\n                      </p>\n                    </div>\n                    <p data-nodeid=\"7198\" class=\"te-preview-highlight\">\n                      当然，如果编译和产出为两种不同环境的资源，还得需要设置\n                      package.json 中的相关字段。事实上，<strong\n                        data-nodeid=\"7217\"\n                        >如果一个 npm 需要在不同环境下加载 npm\n                        包不同的入口文件，就会牵扯到</strong\n                      ><code data-backticks=\"1\" data-nodeid=\"7203\">main</code\n                      ><strong data-nodeid=\"7218\">字段</strong>、<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"7208\"\n                        >module</code\n                      ><strong data-nodeid=\"7219\">以及</strong\n                      ><code data-backticks=\"1\" data-nodeid=\"7212\">browser</code\n                      ><strong data-nodeid=\"7220\">字段</strong>。简单来说：\n                    </p>\n\n                    <ul data-nodeid=\"1579\">\n                      <li data-nodeid=\"1580\">\n                        <p data-nodeid=\"1581\">\n                          <code data-backticks=\"1\" data-nodeid=\"1798\">main</code\n                          >定义了<code data-backticks=\"1\" data-nodeid=\"1800\"\n                            >npm</code\n                          >包的入口文件，Browser 环境和 Node 环境均可使用；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1582\">\n                        <p data-nodeid=\"1583\">\n                          <code data-backticks=\"1\" data-nodeid=\"1802\"\n                            >module</code\n                          >定义<code data-backticks=\"1\" data-nodeid=\"1804\"\n                            >npm</code\n                          >包的 ESM 规范的入口文件，Browser 环境和 Node\n                          环境均可使用；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1584\">\n                        <p data-nodeid=\"1585\">\n                          <code data-backticks=\"1\" data-nodeid=\"1806\"\n                            >browser</code\n                          >定义<code data-backticks=\"1\" data-nodeid=\"1808\"\n                            >npm</code\n                          >包在 Browser 环境下的入口文件。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1586\">\n                      而这三个字段也需要区分优先级，打包工具对于不同环境适配不同入口的字段在选择上还是要以实际情况为准。经我测试后，在目前状态，<strong\n                        data-nodeid=\"1815\"\n                        >Webpack 在 Web 浏览器环境配置下，优先选择：browser &gt;\n                        module &gt; main，在 Node.js 环境下 module &gt;\n                        main</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1587\">从开源库总结生态设计</h3>\n                    <p data-nodeid=\"1588\">\n                      最后一部分，我们针对一个真正的公共库，来总结一下编译适配不同环境的“公共库最佳实践”。<a\n                        href=\"https://www.npmjs.com/package/@riversun/simple-date-format\"\n                        data-nodeid=\"1820\"\n                        >simple-date-format</a\n                      >\n                      可以将 Date\n                      类型转换为标准定义格式的字符串类型，它支持了多种环境：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">import SimpleDateFormat from \"@riversun/simple-date-format\";\n</div></li><li><div class=\"code-word\">const SimpleDateFormat = require('@riversun/simple-date-format');\n</div></li><li><div class=\"code-word\">&lt;script src=\"https://cdn.jsdelivr.net/npm/@riversun/simple-date-format@1.1.2/lib/simple-date-format.js\"&gt;&lt;/script&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1590\">使用方式也很简单：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> date = <span class=\"hljs-keyword\">new</span> Date(<span class=\"hljs-string\">'2018/07/17 12:08:56'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> sdf = <span class=\"hljs-keyword\">new</span> SimpleDateFormat();\n</div></li><li><div class=\"code-word\">console.log(sdf.formatWith(<span class=\"hljs-string\">\"yyyy-MM-dd'T'HH:mm:ssXXX\"</span>, date));<span class=\"hljs-comment\">//to be \"2018-07-17T12:08:56+09:00\"</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1592\">\n                      我们看这个公共库的相关设计，<a\n                        href=\"https://github.com/riversun/simple-date-format/blob/master/webpack.config.js#L24\"\n                        data-nodeid=\"1826\"\n                        >源码</a\n                      >如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 入口配置</span>\n</div></li><li><div class=\"code-word\">entry: {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">'simple-date-format'</span>: [<span class=\"hljs-string\">'./src/simple-date-format.js'</span>],\n</div></li><li><div class=\"code-word\">},\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 产出配置</span>\n</div></li><li><div class=\"code-word\">output: {\n</div></li><li><div class=\"code-word\">  path: path.join(__dirname, <span class=\"hljs-string\">'lib'</span>),\n</div></li><li><div class=\"code-word\">  publicPath: <span class=\"hljs-string\">'/'</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 根据环境产出不同的文件名</span>\n</div></li><li><div class=\"code-word\">  filename: argv.mode === <span class=\"hljs-string\">'production'</span> ? \\`[name].js\\` : \\`[name].js\\`,  <span class=\"hljs-comment\">//\\`[name].min.js\\`</span>\n</div></li><li><div class=\"code-word\">  library: <span class=\"hljs-string\">'SimpleDateFormat'</span>,\n</div></li><li><div class=\"code-word\">  libraryExport: <span class=\"hljs-string\">'default'</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// umd 模块化方式</span>\n</div></li><li><div class=\"code-word\">  libraryTarget: <span class=\"hljs-string\">'umd'</span>,\n</div></li><li><div class=\"code-word\">  globalObject: <span class=\"hljs-string\">'this'</span>,<span class=\"hljs-comment\">//for both browser and node.js</span>\n</div></li><li><div class=\"code-word\">  umdNamedDefine: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 在和 output.library 和 output.libraryTarget 一起使用时，auxiliaryComment 选项允许用户向导出文件中插入注释</span>\n</div></li><li><div class=\"code-word\">  auxiliaryComment: {\n</div></li><li><div class=\"code-word\">    root: <span class=\"hljs-string\">'for Root'</span>,\n</div></li><li><div class=\"code-word\">    commonjs: <span class=\"hljs-string\">'for CommonJS environment'</span>,\n</div></li><li><div class=\"code-word\">    commonjs2: <span class=\"hljs-string\">'for CommonJS2 environment'</span>,\n</div></li><li><div class=\"code-word\">    amd: <span class=\"hljs-string\">'for AMD environment'</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">},\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1594\">\n                      设计方式与前文类似，因为这个库的目标就是：<strong\n                        data-nodeid=\"1833\"\n                        >作为一个函数 helper 库，同时支持浏览器和 Node.js\n                        环境</strong\n                      >。它采取了比较“偷懒”的方式，使用了 UMD 规范来输出代码。\n                    </p>\n                    <p data-nodeid=\"1595\">\n                      我们再看另一个例子，在\n                      <a\n                        href=\"https://github.com/lodash/lodash/blob/master/package.json#L12\"\n                        data-nodeid=\"1837\"\n                        >Lodash</a\n                      >\n                      的构建脚本中，分为了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"npm run build:main &amp;&amp; npm run build:fp\"</span>,\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">\"build:fp\"</span>: <span class=\"hljs-string\">\"node lib/fp/build-dist.js\"</span>,\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">\"build:fp-modules\"</span>: <span class=\"hljs-string\">\"node lib/fp/build-modules.js\"</span>,\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">\"build:main\"</span>: <span class=\"hljs-string\">\"node lib/main/build-dist.js\"</span>,\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">\"build:main-modules\"</span>: <span class=\"hljs-string\">\"node lib/main/build-modules.js\"</span>,\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1597\">\n                      其中主命令为 build，同时按照编译所需，提供：ES 版本、FP\n                      版本等（build:fp/build:fp-modules/build:main/build:main-modules）。官方甚至提供了\n                      <a\n                        href=\"https://www.npmjs.com/package/lodash-cli\"\n                        data-nodeid=\"1842\"\n                        >lodash-cli</a\n                      >\n                      支持开发者自定义构建，更多相关内容可以参考\n                      <a\n                        href=\"https://lodash.com/custom-builds\"\n                        data-nodeid=\"1846\"\n                        >Custom Builds</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"1598\">\n                      我们在构建环节“颇费笔墨”，目的是让你理解前端生态天生“混乱”，不统一的运行环境使得公共库的架构，尤其是相关的构建设计更加复杂。更多构建相关内容，我们会在后续章节继续讨论，这里先到此为止。\n                    </p>\n                    <h3 data-nodeid=\"1599\">总结</h3>\n                    <p data-nodeid=\"1600\">\n                      这两节课我们从公共库的设计和使用方接入两个方面进行了梳理。当前前端生态多种规范并行、多类环境共存，因此使得“启用或设计一个公共库”并不简单，单纯的\n                      'npm install' 后，才是一系列工程化问题的开始。\n                    </p>\n                    <p data-nodeid=\"1601\">\n                      与此同时，开发者经常疲于业务开发，对于编译和构建，以及公共库设计和前端生态的理解往往得过且过，但这些内容正是前端基础设施道路上的重要一环，也是开发者通往前端架构师的必经之路。建议你将本节知识融入自己手上的真实项目中，刨根问底，相信你一定会有更多收获！\n                    </p>\n                    <p data-nodeid=\"1602\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/16/CgqCHl_4Ch-AQCAEAAVodGYCdmY431.png\"\n                        alt=\"Lark20210108-153014.png\"\n                        data-nodeid=\"1858\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1603\" class=\"\">\n                      最后，如果本节内容你难以一步到位地理解消化，请不要灰心，我们会在后续章节中不断巩固梳理。我们下一讲再见！\n                    </p>\n            "}