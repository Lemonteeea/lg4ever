{"title":"加餐 | 模块三思考题解答","context":"\n                    <p data-nodeid=\"2\">\n                      今天我会带你把《<strong data-nodeid=\"58\"\n                        >模块三：网络编程</strong\n                      >》中涉及的课后练习题，逐一讲解，并给出每个课时练习题的解题思路和答案。\n                    </p>\n                    <h3 data-nodeid=\"3\">练习题详解</h3>\n                    <h4 data-nodeid=\"4\">\n                      10 | Socket 编程：epoll 为什么用红黑树？\n                    </h4>\n                    <p data-nodeid=\"5\">\n                      【<strong data-nodeid=\"70\">问题</strong>】<strong\n                        data-nodeid=\"71\"\n                        >请你找一个 epoll 的 hello world\n                        例子，并尝试理解它</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"6\">\n                      【<strong data-nodeid=\"77\">解析</strong>】epoll 是一个 C\n                      语言的 API，因此使用的时候需要一点 C\n                      的基础。不过，即便没有，其实也不影响你读懂下面的程序。\n                    </p>\n                    <p data-nodeid=\"7\">\n                      下面是是一段摘自“<a\n                        href=\"https://github.com/millken/c-example/blob/master/epoll-example.c?fileGuid=uCG9Y5F8xVkBmki5\"\n                        data-nodeid=\"81\"\n                        >https://github.com/millken/c-example/blob/master/epoll-example.c</a\n                      >”的示例程序，该程序用 epoll\n                      模式实现了一个服务，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdlib.h&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string.h&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/types.h&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/socket.h&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;netdb.h&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;unistd.h&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;fcntl.h&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;sys/epoll.h&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;errno.h&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAXEVENTS 64</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span>\n</span></div></li><li><div class=\"code-word\"><span class=\"hljs-title\">make_socket_non_blocking</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> sfd)</span>\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> flags, s;\n</div></li><li><div class=\"code-word\">flags = fcntl (sfd, F_GETFL, <span class=\"hljs-number\">0</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (flags == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\"> {\n</div></li><li><div class=\"code-word\">   perror (<span class=\"hljs-string\">\"fcntl\"</span>);\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\">flags |= O_NONBLOCK;\n</div></li><li><div class=\"code-word\">s = fcntl (sfd, F_SETFL, flags);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\"> {\n</div></li><li><div class=\"code-word\">   perror (<span class=\"hljs-string\">\"fcntl\"</span>);\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span>\n</span></div></li><li><div class=\"code-word\"><span class=\"hljs-title\">create_and_bind</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> *port)</span>\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">addrinfo</span> <span class=\"hljs-title\">hints</span>;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">addrinfo</span> *<span class=\"hljs-title\">result</span>, *<span class=\"hljs-title\">rp</span>;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> s, sfd;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">memset</span> (&amp;hints, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span> (struct addrinfo));\n</div></li><li><div class=\"code-word\">hints.ai_family = AF_UNSPEC;     <span class=\"hljs-comment\">/* Return IPv4 and IPv6 choices */</span>\n</div></li><li><div class=\"code-word\">hints.ai_socktype = SOCK_STREAM; <span class=\"hljs-comment\">/* We want a TCP socket */</span>\n</div></li><li><div class=\"code-word\">hints.ai_flags = AI_PASSIVE;     <span class=\"hljs-comment\">/* All interfaces */</span>\n</div></li><li><div class=\"code-word\">s = getaddrinfo (<span class=\"hljs-literal\">NULL</span>, port, &amp;hints, &amp;result);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (s != <span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\"> {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-built_in\">fprintf</span> (<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">\"getaddrinfo: %s\\n\"</span>, gai_strerror (s));\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (rp = result; rp != <span class=\"hljs-literal\">NULL</span>; rp = rp-&gt;ai_next)\n</div></li><li><div class=\"code-word\"> {\n</div></li><li><div class=\"code-word\">   sfd = socket (rp-&gt;ai_family, rp-&gt;ai_socktype, rp-&gt;ai_protocol);\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">if</span> (sfd == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">   s = bind (sfd, rp-&gt;ai_addr, rp-&gt;ai_addrlen);\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\">     {\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-comment\">/* We managed to bind successfully! */</span>\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">     }\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-built_in\">close</span> (sfd);\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (rp == <span class=\"hljs-literal\">NULL</span>)\n</div></li><li><div class=\"code-word\"> {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-built_in\">fprintf</span> (<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">\"Could not bind\\n\"</span>);\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\">freeaddrinfo (result);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">return</span> sfd;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span>\n</span></div></li><li><div class=\"code-word\"><span class=\"hljs-title\">main</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> *argv[])</span>\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> sfd, s;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> efd;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">epoll_event</span> <span class=\"hljs-title\">event</span>;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">epoll_event</span> *<span class=\"hljs-title\">events</span>;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (argc != <span class=\"hljs-number\">2</span>)\n</div></li><li><div class=\"code-word\"> {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-built_in\">fprintf</span> (<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">\"Usage: %s [port]\\n\"</span>, argv[<span class=\"hljs-number\">0</span>]);\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-built_in\">exit</span> (EXIT_FAILURE);\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\">sfd = create_and_bind (argv[<span class=\"hljs-number\">1</span>]);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (sfd == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-built_in\">abort</span> ();\n</div></li><li><div class=\"code-word\">s = make_socket_non_blocking (sfd);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-built_in\">abort</span> ();\n</div></li><li><div class=\"code-word\">s = <span class=\"hljs-built_in\">listen</span> (sfd, SOMAXCONN);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\"> {\n</div></li><li><div class=\"code-word\">   perror (<span class=\"hljs-string\">\"listen\"</span>);\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-built_in\">abort</span> ();\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\">efd = epoll_create1 (<span class=\"hljs-number\">0</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (efd == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\"> {\n</div></li><li><div class=\"code-word\">   perror (<span class=\"hljs-string\">\"epoll_create\"</span>);\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-built_in\">abort</span> ();\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\">event.data.fd = sfd;\n</div></li><li><div class=\"code-word\">event.events = EPOLLIN | EPOLLET;\n</div></li><li><div class=\"code-word\">s = epoll_ctl (efd, EPOLL_CTL_ADD, sfd, &amp;event);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\"> {\n</div></li><li><div class=\"code-word\">   perror (<span class=\"hljs-string\">\"epoll_ctl\"</span>);\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-built_in\">abort</span> ();\n</div></li><li><div class=\"code-word\"> }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/* Buffer where events are returned */</span>\n</div></li><li><div class=\"code-word\">events = <span class=\"hljs-built_in\">calloc</span> (MAXEVENTS, <span class=\"hljs-keyword\">sizeof</span> event);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/* The event loop */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\"> {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">int</span> n, i;\n</div></li><li><div class=\"code-word\">   n = epoll_wait (efd, events, MAXEVENTS, <span class=\"hljs-number\">-1</span>);\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> ((events[i].events &amp; EPOLLERR) ||\n</div></li><li><div class=\"code-word\">           (events[i].events &amp; EPOLLHUP) ||\n</div></li><li><div class=\"code-word\">           (!(events[i].events &amp; EPOLLIN)))\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">           <span class=\"hljs-comment\">/* An error has occured on this fd, or the socket is not\n</span></div></li><li><div class=\"code-word\">              ready for reading (why were we notified then?) */\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">fprintf</span> (<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">\"epoll error\\n\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">close</span> (events[i].data.fd);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (sfd == events[i].data.fd)\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">           <span class=\"hljs-comment\">/* We have a notification on the listening socket, which\n</span></div></li><li><div class=\"code-word\">              means one or more incoming connections. */\n</div></li><li><div class=\"code-word\">           <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">             {\n</div></li><li><div class=\"code-word\">               struct sockaddr in_addr;\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">socklen_t</span> in_len;\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">int</span> infd;\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">char</span> hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];\n</div></li><li><div class=\"code-word\">               in_len = <span class=\"hljs-keyword\">sizeof</span> in_addr;\n</div></li><li><div class=\"code-word\">               infd = accept (sfd, &amp;in_addr, &amp;in_len);\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">if</span> (infd == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\">                 {\n</div></li><li><div class=\"code-word\">                   <span class=\"hljs-keyword\">if</span> ((errno == EAGAIN) ||\n</div></li><li><div class=\"code-word\">                       (errno == EWOULDBLOCK))\n</div></li><li><div class=\"code-word\">                     {\n</div></li><li><div class=\"code-word\">                       <span class=\"hljs-comment\">/* We have processed all incoming\n</span></div></li><li><div class=\"code-word\">                          connections. */\n</div></li><li><div class=\"code-word\">                       <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">                     }\n</div></li><li><div class=\"code-word\">                   <span class=\"hljs-keyword\">else</span>\n</div></li><li><div class=\"code-word\">                     {\n</div></li><li><div class=\"code-word\">                       perror (<span class=\"hljs-string\">\"accept\"</span>);\n</div></li><li><div class=\"code-word\">                       <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">                     }\n</div></li><li><div class=\"code-word\">                 }\n</div></li><li><div class=\"code-word\">               s = getnameinfo (&amp;in_addr, in_len,\n</div></li><li><div class=\"code-word\">                                hbuf, <span class=\"hljs-keyword\">sizeof</span> hbuf,\n</div></li><li><div class=\"code-word\">                                sbuf, <span class=\"hljs-keyword\">sizeof</span> sbuf,\n</div></li><li><div class=\"code-word\">                                NI_NUMERICHOST | NI_NUMERICSERV);\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\">                 {\n</div></li><li><div class=\"code-word\">                   <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Accepted connection on descriptor %d \"</span>\n</div></li><li><div class=\"code-word\">                          <span class=\"hljs-string\">\"(host=%s, port=%s)\\n\"</span>, infd, hbuf, sbuf);\n</div></li><li><div class=\"code-word\">                 }\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-comment\">/* Make the incoming socket non-blocking and add it to the\n</span></div></li><li><div class=\"code-word\">                  list of fds to monitor. */\n</div></li><li><div class=\"code-word\">               s = make_socket_non_blocking (infd);\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\">                 <span class=\"hljs-built_in\">abort</span> ();\n</div></li><li><div class=\"code-word\">               event.data.fd = infd;\n</div></li><li><div class=\"code-word\">               event.events = EPOLLIN | EPOLLET;\n</div></li><li><div class=\"code-word\">               s = epoll_ctl (efd, EPOLL_CTL_ADD, infd, &amp;event);\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\">                 {\n</div></li><li><div class=\"code-word\">                   perror (<span class=\"hljs-string\">\"epoll_ctl\"</span>);\n</div></li><li><div class=\"code-word\">                   <span class=\"hljs-built_in\">abort</span> ();\n</div></li><li><div class=\"code-word\">                 }\n</div></li><li><div class=\"code-word\">             }\n</div></li><li><div class=\"code-word\">           <span class=\"hljs-keyword\">continue</span>;\n</div></li><li><div class=\"code-word\">         }\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-keyword\">else</span>\n</div></li><li><div class=\"code-word\">         {\n</div></li><li><div class=\"code-word\">           <span class=\"hljs-comment\">/* We have data on the fd waiting to be read. Read and\n</span></div></li><li><div class=\"code-word\">              display it. We must read whatever data is available\n</div></li><li><div class=\"code-word\">              completely, as we are running in edge-triggered mode\n</div></li><li><div class=\"code-word\">              and won't get a notification again for the same\n</div></li><li><div class=\"code-word\">              data. */\n</div></li><li><div class=\"code-word\">           <span class=\"hljs-keyword\">int</span> done = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">           <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">             {\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">ssize_t</span> count;\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">char</span> buf[<span class=\"hljs-number\">512</span>];\n</div></li><li><div class=\"code-word\">               count = <span class=\"hljs-built_in\">read</span> (events[i].data.fd, buf, <span class=\"hljs-keyword\">sizeof</span> buf);\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\">                 {\n</div></li><li><div class=\"code-word\">                   <span class=\"hljs-comment\">/* If errno == EAGAIN, that means we have read all\n</span></div></li><li><div class=\"code-word\">                      data. So go back to the main loop. */\n</div></li><li><div class=\"code-word\">                   <span class=\"hljs-keyword\">if</span> (errno != EAGAIN)\n</div></li><li><div class=\"code-word\">                     {\n</div></li><li><div class=\"code-word\">                       perror (<span class=\"hljs-string\">\"read\"</span>);\n</div></li><li><div class=\"code-word\">                       done = <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">                     }\n</div></li><li><div class=\"code-word\">                   <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">                 }\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (count == <span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\">                 {\n</div></li><li><div class=\"code-word\">                   <span class=\"hljs-comment\">/* End of file. The remote has closed the\n</span></div></li><li><div class=\"code-word\">                      connection. */\n</div></li><li><div class=\"code-word\">                   done = <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">                   <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">                 }\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-comment\">/* Write the buffer to standard output */</span>\n</div></li><li><div class=\"code-word\">               s = <span class=\"hljs-built_in\">write</span> (<span class=\"hljs-number\">1</span>, buf, count);\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\">                 {\n</div></li><li><div class=\"code-word\">                   perror (<span class=\"hljs-string\">\"write\"</span>);\n</div></li><li><div class=\"code-word\">                   <span class=\"hljs-built_in\">abort</span> ();\n</div></li><li><div class=\"code-word\">                 }\n</div></li><li><div class=\"code-word\">             }\n</div></li><li><div class=\"code-word\">           <span class=\"hljs-keyword\">if</span> (done)\n</div></li><li><div class=\"code-word\">             {\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-built_in\">printf</span> (<span class=\"hljs-string\">\"Closed connection on descriptor %d\\n\"</span>,\n</div></li><li><div class=\"code-word\">                       events[i].data.fd);\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-comment\">/* Closing the descriptor will make epoll remove it\n</span></div></li><li><div class=\"code-word\">                  from the set of descriptors which are monitored. */\n</div></li><li><div class=\"code-word\">               <span class=\"hljs-built_in\">close</span> (events[i].data.fd);\n</div></li><li><div class=\"code-word\">             }\n</div></li><li><div class=\"code-word\">           }\n</div></li><li><div class=\"code-word\">       }\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-built_in\">free</span> (events);\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-built_in\">close</span> (sfd);\n</div></li><li><div class=\"code-word\"> <span class=\"hljs-keyword\">return</span> EXIT_SUCCESS;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"9\">\n                      接下来我给你分析下这段程序。下面这句在创建一个 epoll\n                      实例，这个实例本质上也是一个文件，文件中是对<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"84\"\n                        >epoll</code\n                      >对象的调用序列。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\">efd = epoll_create1 (<span class=\"hljs-number\">0</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11\">下面这段程序在注册线程关心的事件：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">epoll_event</span> <span class=\"hljs-title\">event</span>;</span>\n</div></li><li><div class=\"code-word\">event.data.fd = sfd;\n</div></li><li><div class=\"code-word\">event.events = EPOLLIN | EPOLLET;\n</div></li><li><div class=\"code-word\">s = epoll_ctl (efd, EPOLL_CTL_ADD, sfd, &amp;event);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13\">上面程序注册了两类关系的事件：</p>\n                    <ul data-nodeid=\"14\">\n                      <li data-nodeid=\"15\">\n                        <p data-nodeid=\"16\">EPOLLIN ，关联的文件发生的读取；</p>\n                      </li>\n                      <li data-nodeid=\"17\">\n                        <p data-nodeid=\"18\">EPOLLET， 关联的文件发生的写入。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"19\">\n                      接下来我们调用<code data-backticks=\"1\" data-nodeid=\"91\"\n                        >epoll_wait</code\n                      >来获取发生的事件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">n = epoll_wait (efd, events, MAXEVENTS, -<span class=\"hljs-number\">1</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21\">\n                      <code data-backticks=\"1\" data-nodeid=\"93\">n</code\n                      >是需要响应的事件数量。 因为在这之前用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"95\"\n                        >make_socket_non_blocking</code\n                      >配置了非阻塞 IO，因此<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"97\"\n                        >epoll_wait</code\n                      >有可能返回 0，也就是没有消息。 对于<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"99\"\n                        >n&gt;0</code\n                      >的情况，上面的示例程序中使用了 for\n                      循环针对不同的消息类型进行处理。\n                    </p>\n                    <p data-nodeid=\"22\">\n                      下面这句<code data-backticks=\"1\" data-nodeid=\"102\"\n                        >if</code\n                      >判断是在看如果 sfd（服务端 Socket\n                      文件描述符）和发生事件的文件描述符一致，代表这是一次客户端的连接操作。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (sfd == events[i].data.fd)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"24\">\n                      于是再次调用<code data-backticks=\"1\" data-nodeid=\"105\"\n                        >epoll_ctl</code\n                      >将这个客户端的读写事件注册到关注列表。\n                    </p>\n                    <p data-nodeid=\"25\">\n                      如果上面的<code data-backticks=\"1\" data-nodeid=\"108\"\n                        >if</code\n                      >判断没有生效，说明这是一次客户端的读或写，这个时候使用<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"110\"\n                        >read</code\n                      >或<code data-backticks=\"1\" data-nodeid=\"112\">write</code\n                      >方法向客户端 Socket 文件中读取/写入数据。\n                    </p>\n                    <h4 data-nodeid=\"26\">\n                      11 | 流和缓冲区：缓冲区的 flip 是怎么回事？\n                    </h4>\n                    <p data-nodeid=\"27\">\n                      【<strong data-nodeid=\"120\">问题</strong\n                      >】在缓冲区的设计当中，还通常有一个 rewind\n                      操作，这个操作是用来做什么的呢？\n                    </p>\n                    <p data-nodeid=\"28\">\n                      【<strong data-nodeid=\"126\">解析</strong\n                      >】之前我们讨论了如果一个缓冲区是用来写入的，接下来要切换到读取状态可以使用\n                      flip\n                      操作。如果一个缓冲区进行了一次写和读，接下来要用它来处理另一批数据，可以使用\n                      clear\n                      操作来清空缓冲区。在实战当中，有时候一个缓冲区读取过了，需要再读取一次，此时就可以用\n                      rewind 操作来重置缓冲区的 position 指针。\n                    </p>\n                    <p data-nodeid=\"29\">\n                      上面过程中 flip 和 rewind 都重置了 position\n                      指针，那么它们的区别是什么呢？首先，你可以先从词义上理解下，flip\n                      意味翻转（隐含读写状态切换），rewind\n                      意味倒带（隐含重头读、重头写）。所以在实战中，首先我们应该从语义上区分它们的使用。\n                    </p>\n                    <p data-nodeid=\"30\">\n                      在实战的过程中，某些场景下 rewind 和 flip 结果相同。\n                    </p>\n                    <p data-nodeid=\"31\">\n                      比如现在缓冲区是 ABCDEFG，position=7,\n                      limit=7。这个时候代表我们已经完成了写入。如果需要切换到读取状态，用\n                      flip 和 rewind 操作的结果相同，都会将 position 置零。\n                    </p>\n                    <p data-nodeid=\"32\">\n                      那么我提一个问题，这种情况下，应该用哪个呢？\n                    </p>\n                    <p data-nodeid=\"33\">\n                      写程序不只是为了正确，我们还为了可读。这种情况下，因为是读写状态的切换，因此当然用\n                      flip。\n                    </p>\n                    <p data-nodeid=\"34\">\n                      再举个例子，比如现在缓冲区是\n                      ABCDEFG，position=3，limit=7，缓冲区处于读取状态。如果我们想要重读，应该用什么呢？当然是\n                      rewind，rewind 有倒带的语义。你可以思考，这个时候如果调\n                      flip 结果对吗？\n                    </p>\n                    <p data-nodeid=\"35\">\n                      这个时候调 flip 处理会把 position 置为 0 外，limit\n                      也会设置为 3（position\n                      的旧值）。因为只有这样，才是读写状态的翻转。也就是说，如果写入了\n                      3 个字符，不管 limit 现在是多少，flip\n                      切换到读取状态也只能读 3 个字符。\n                    </p>\n                    <p data-nodeid=\"36\">\n                      所以，flip 和 rewind\n                      实现不同是其次，最重要的是语义不同。建议你以后看到 API\n                      的时候，先搞明白单词是什么意思，而不是急于分析具体实现。从这个话题引申出一个小的提示，就是不要盲目读源代码，在阅读一个项目的源代码前，思考下自己对要解决的问题、如何解决这些问题，带着这种根深的理解再去读源码。\n                    </p>\n                    <h4 data-nodeid=\"37\">\n                      12 | 网络 I/O 模型：BIO、NIO 和 AIO 有什么区别？\n                    </h4>\n                    <p data-nodeid=\"38\">\n                      【<strong data-nodeid=\"141\">问题</strong>】I/O\n                      多路复用用协程和用线程的区别？\n                    </p>\n                    <p data-nodeid=\"39\">\n                      【<strong data-nodeid=\"147\">解析</strong\n                      >】线程是执行程序的最小单位。I/O\n                      多路复用时，会用单个线程处理大量的\n                      I/O。还有一种执行程序的模型，叫协作程，协程是轻量级的线程。操作系统将执行资源分配给了线程，然后再调度线程运行。如果要实现协程，就要利用分配给线程的执行资源，在这之上再创建更小的执行单位。协程不归操作系统调度，协程共享线程的执行资源。\n                    </p>\n                    <p data-nodeid=\"40\">\n                      而 I/O\n                      多路复用的意义，是减少线程间的切换成本。因此从设计上，只要是用单个线程处理大量\n                      I/O\n                      工作，线程和协程是一样的，并无区别。如果是单线程处理大量\n                      I/O，使用协程也是依托协程对应线程执行能力。\n                    </p>\n                    <h4 data-nodeid=\"41\">\n                      13 | 面试中如何回答“怎样实现 RPC 框架”的问题？\n                    </h4>\n                    <p data-nodeid=\"42\">\n                      【<strong data-nodeid=\"155\">问题</strong>】如何理解 Dubbo\n                      的几个组成部分 Consumer、Provider、Monitor 和 Registry？\n                    </p>\n                    <p data-nodeid=\"1766\">\n                      【<strong data-nodeid=\"1773\">解析</strong>】Dubbo\n                      是一个开源、轻量级的 Java 服务框架。下图是它的架构：\n                    </p>\n                    <p data-nodeid=\"1767\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/40/B5/Cgp9HWCmZiyAUZIuAAEchcUDiyE739.png\"\n                        alt=\"image (2).png\"\n                        data-nodeid=\"1780\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"1360\">\n                      Dubbo 的架构是容器化的，上 图中的\n                      Container（容器）中是服务，服务的提供方被称作\n                      Provider。比如要提供一个订单服务，那么服务会在容器中部署启动，启动后的实例就是\n                      Provider。\n                    </p>\n\n                    <p data-nodeid=\"45\">\n                      Provider 在启动过程中，会在 Dubbo\n                      中注册自己。负责注册和发现的模块，称为注册处（Registry）。注册处和学员报道时学校的注册处很像，每个新加入的服务都需要主动注册。这里需要注意，<strong\n                        data-nodeid=\"170\"\n                        >注册处对网络中的信息是信任的，如果 Provider\n                        被攻击欺骗注册处会产生安全问题。Registry\n                        需要实现分布式共识，具体可以使用 ZooKeeper实现（参考\n                        Paxos 和 Raft 算法）</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"46\">\n                      服务的使用方被称为 Consumer，Consumer\n                      会订阅注册表的变化（也就是 Provider 的变化）。相当于\n                      Consumer 本地维护了一份和注册处一致的 Provider\n                      清单。当调用服务的时候，Consumer 会使用本地清单去查询\n                      Provider 信息，进行远程调用。\n                    </p>\n                    <p data-nodeid=\"47\">\n                      除了 Registry、Consumer、Provider 之外，Dubbo 还有一个\n                      Monitor 模块。这个模块负责统计服务器的调用情况。\n                    </p>\n                    <h3 data-nodeid=\"48\">总结</h3>\n                    <p data-nodeid=\"49\">\n                      《网络编程》模块我们围绕着<strong data-nodeid=\"187\"\n                        >Socket</strong\n                      >展开，Socket\n                      是程序也是文件。文件本质是数据，为了抽象数据，我们学习了<strong\n                        data-nodeid=\"188\"\n                        >流</strong\n                      >。这里再复习下，流是随着时间产生的数据。文件传输、视频播放、在线游戏……这些都是随着时间产生的数据。为了提升处理数据的效率，节省内存资源，我们还学习了<strong\n                        data-nodeid=\"189\"\n                        >缓冲区</strong\n                      >。关于缓冲区，目前向你介绍了 3 种操作：flip\n                      用于读写切换、clear 用于重置缓冲区、rewind 用于重读数据。\n                    </p>\n                    <p data-nodeid=\"50\">\n                      为了减少线程的切换成本，我们会使用 I/O\n                      的多路复用。为了让程序更可读，我们会选择适合的编程模型。这个模块介绍了\n                      3 种编程模型，分别是 BIO/NIO/AIO。选择编程模型处理 I/O\n                      还要思考数据拷贝的效率、事件通知的方式。思考事件通知的方式，又需要思考核心部分数据结构的设计。所以，如果你想在工作当中应对不同场景处理好\n                      I/O\n                      问题，不能死记硬背，而是要理解每个细微选择背后的逻辑，并在完成工作后认真对程序进行性能测试。这样才能做到万无一失。\n                    </p>\n                    <p data-nodeid=\"51\">\n                      发现求知的乐趣，我是林䭽，感谢你学习本次课程。\n                      接下来我们将进入《模块四：Web 技术》的学习，下一讲介绍《14\n                      | DNS 域名解析系统：CNAME 记录的作用是？》，再见！\n                    </p>\n            "}