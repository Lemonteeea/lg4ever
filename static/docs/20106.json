{"title":"05 | 函数和方法：Go 语言中的函数和方法到底有什么不同？","context":"\n                    <p data-nodeid=\"23672\">\n                      上一讲的思考题是创建一个二维数组并使用。上节课，我主要介绍了一维数组，其实二维数组也很简单，仿照一维数组即可，如下面的代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">aa:=[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">3</span>]<span class=\"hljs-keyword\">int</span>{}\n</div></li><li><div class=\"code-word\">aa[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] =<span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">aa[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] =<span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\">aa[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>] =<span class=\"hljs-number\">3</span>\n</div></li><li><div class=\"code-word\">aa[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] =<span class=\"hljs-number\">4</span>\n</div></li><li><div class=\"code-word\">aa[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] =<span class=\"hljs-number\">5</span>\n</div></li><li><div class=\"code-word\">aa[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] =<span class=\"hljs-number\">6</span>\n</div></li><li><div class=\"code-word\">aa[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">0</span>] =<span class=\"hljs-number\">7</span>\n</div></li><li><div class=\"code-word\">aa[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">1</span>] =<span class=\"hljs-number\">8</span>\n</div></li><li><div class=\"code-word\">aa[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">2</span>] =<span class=\"hljs-number\">9</span>\n</div></li><li><div class=\"code-word\">fmt.Println(aa)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23674\">\n                      相信你也完成了，现在学习我们本节课要讲的函数和方法。\n                    </p>\n                    <p data-nodeid=\"23675\">\n                      函数和方法是我们迈向代码复用、多人协作开发的第一步。通过函数，可以把开发任务分解成一个个小的单元，这些小单元可以被其他单元复用，进而提高开发效率、降低代码重合度。再加上现成的函数已经被充分测试和使用过，所以其他函数在使用这个函数时也更安全，比你自己重新写一个相似功能的函数\n                      Bug 率更低。\n                    </p>\n                    <p data-nodeid=\"23676\">\n                      这节课，我会详细讲解 Go\n                      语言的函数和方法，了解它们的声明、使用和不同。虽然在 Go\n                      语言中有函数和方法两种概念，但它们的相似度非常高，只是所属的对象不同。我们先从函数开始了解。\n                    </p>\n                    <h3 data-nodeid=\"23677\">函数</h3>\n                    <h4 data-nodeid=\"23678\">函数初探</h4>\n                    <p data-nodeid=\"23679\">\n                      在前面的四节课中，你已经见到了 Go\n                      语言中一个非常重要的函数：main 函数，它是一个 Go\n                      语言程序的入口函数，我在演示代码示例的时候，会一遍遍地使用它。\n                    </p>\n                    <p data-nodeid=\"23680\">下面的示例就是一个 main 函数：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23682\">它由以下几部分构成：</p>\n                    <ol data-nodeid=\"28944\">\n                      <li data-nodeid=\"28945\">\n                        <p data-nodeid=\"28946\">\n                          任何一个函数的定义，都有一个 func\n                          关键字，用于声明一个函数，就像使用 var\n                          关键字声明一个变量一样；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"28947\">\n                        <p data-nodeid=\"28948\">\n                          然后紧跟的 main 是函数的名字，命名符合 Go\n                          语言的规范即可，比如不能以数字开头；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"28949\">\n                        <p data-nodeid=\"28950\">\n                          main 函数名字后面的一对括号 ()\n                          是不能省略的，括号里可以定义函数使用的参数，这里的\n                          main 函数没有参数，所以是空括号 () ；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"28951\">\n                        <p data-nodeid=\"28952\">\n                          括号 () 后还可以有函数的返回值，因为 main\n                          函数没有返回值，所以这里没有定义；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"28953\">\n                        <p data-nodeid=\"28954\">\n                          最后就是大括号 {}\n                          函数体了，你可以在函数体里书写代码，写该函数自己的业务逻辑。\n                        </p>\n                      </li>\n                    </ol>\n\n                    <h4 data-nodeid=\"23694\">函数声明</h4>\n                    <p data-nodeid=\"23695\">\n                      经过上一小节的介绍，相信你已经对 Go\n                      语言函数的构成有一个比较清晰的了解了，现在让我们一起总结出函数的声明格式，如下面的代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">funcName</span><span class=\"hljs-params\">(params)</span> <span class=\"hljs-title\">result</span></span> {\n</div></li><li><div class=\"code-word\">    body\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23697\">\n                      这就是一个函数的签名定义，它包含以下几个部分：\n                    </p>\n                    <ol data-nodeid=\"34576\">\n                      <li data-nodeid=\"34577\">\n                        <p data-nodeid=\"34578\">关键字 func；</p>\n                      </li>\n                      <li data-nodeid=\"34579\">\n                        <p data-nodeid=\"34580\">函数名字 funcName；</p>\n                      </li>\n                      <li data-nodeid=\"34581\">\n                        <p data-nodeid=\"34582\">\n                          函数的参数\n                          params，用来定义形参的变量名和类型，可以有一个参数，也可以有多个，也可以没有；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"34583\">\n                        <p data-nodeid=\"34584\">\n                          result\n                          是返回的函数值，用于定义返回值的类型，如果没有返回值，省略即可，也可以有多个返回值；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"34585\">\n                        <p data-nodeid=\"34586\">\n                          body 就是函数体，可以在这里写函数的代码逻辑。\n                        </p>\n                      </li>\n                    </ol>\n\n                    <p data-nodeid=\"23709\">\n                      现在，我们一起根据上面的函数声明格式，自定义一个函数，如下所示：\n                    </p>\n                    <p data-nodeid=\"23710\">\n                      <em data-nodeid=\"23865\"\n                        ><strong data-nodeid=\"23864\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">func <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(a <span class=\"hljs-keyword\">int</span>,b <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-keyword\">int</span></span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> a+b\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23712\">\n                      这是一个计算两数之和的函数，函数的名字是 sum，它有两个参数\n                      a、b，参数的类型都是 int。sum 函数的返回值也是 int\n                      类型，函数体部分就是把 a 和 b 相加，然后通过 return\n                      关键字返回，如果函数没有返回值，可以不用使用 return\n                      关键字。\n                    </p>\n                    <p data-nodeid=\"23713\">\n                      终于可以声明自己的函数了，恭喜你迈出了一大步！\n                    </p>\n                    <p data-nodeid=\"23714\">\n                      函数中形参的定义和我们定义变量是一样的，都是变量名称在前，变量类型在后，只不过在函数里，变量名称叫作参数名称，也就是函数的形参，形参只能在该函数体内使用。函数形参的值由调用者提供，这个值也称为函数的实参，现在我们传递实参给\n                      sum 函数，演示函数的调用，如下面的代码所示：\n                    </p>\n                    <p data-nodeid=\"23715\">\n                      <em data-nodeid=\"23873\"\n                        ><strong data-nodeid=\"23872\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">    result:=sum(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>)\n</div></li><li><div class=\"code-word\">    fmt.Println(result)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23717\">\n                      我们自定义的 sum 函数，在 main\n                      函数中直接调用，调用的时候需要提供真实的参数，也就是实参 1\n                      和 2。\n                    </p>\n                    <p data-nodeid=\"23718\">\n                      函数的返回值被赋值给变量\n                      result，然后把这个结果打印出来。你可以自己运行一下，能看到结果是\n                      3，这样我们就通过函数 sum\n                      达到了两数相加的目的，如果其他业务逻辑也需要两数相加，那么就可以直接使用这个\n                      sum 函数，不用再定义了。\n                    </p>\n                    <p data-nodeid=\"23719\">\n                      在以上函数定义中，a 和 b\n                      形参的类型是一样的，这个时候我们可以省略其中一个类型的声明，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> a + b\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23721\">\n                      像这样使用逗号分隔变量，后面统一使用 int\n                      类型，这和变量的声明是一样的，多个相同类型的变量都可以这么声明。\n                    </p>\n                    <h4 data-nodeid=\"23722\">多值返回</h4>\n                    <p data-nodeid=\"23723\">\n                      同有的编程语言不一样，Go\n                      语言的函数可以返回多个值，也就是多值返回。在 Go\n                      语言的标准库中，你可以看到很多这样的函数：第一个值返回函数的结果，第二个值返回函数出错的信息，这种就是多值返回的经典应用。\n                    </p>\n                    <p data-nodeid=\"23724\">\n                      对于 sum\n                      函数，假设我们不允许提供的实参是负数，可以这样改造：在实参是负数的时候，通过多值返回，返回函数的错误信息，如下面的代码所示：\n                    </p>\n                    <p data-nodeid=\"23725\">\n                      <em data-nodeid=\"23885\"\n                        ><strong data-nodeid=\"23884\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>,error)</span></span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> a&lt;<span class=\"hljs-number\">0</span> || b&lt;<span class=\"hljs-number\">0</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>,errors.New(<span class=\"hljs-string\">\"a或者b不能是负数\"</span>)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> a + b,<span class=\"hljs-literal\">nil</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23727\">\n                      这里需要注意的是，如果函数有多个返回值，返回值部分的类型定义需要使用小括号括起来，也就是\n                      (int,error)。这代表函数 sum 有两个返回值，第一个是 int\n                      类型，第二个是 error 类型，我们在函数体中使用 return\n                      返回结果的时候，也要符合这个类型顺序。\n                    </p>\n                    <p data-nodeid=\"23728\">\n                      在函数体中，可以使用 return\n                      返回多个值，返回的多个值通过逗号分隔即可，返回多个值的类型顺序要和函数声明的返回类型顺序一致，比如下面的例子：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>,errors.New(<span class=\"hljs-string\">\"a或者b不能是负数\"</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23730\">\n                      返回的第一个值 0 是 int 类型，第二个值是 error\n                      类型，和函数定义的返回类型完全一致。\n                    </p>\n                    <p data-nodeid=\"23731\">\n                      定义好了多值返回的函数，现在我们用如下代码尝试调用：\n                    </p>\n                    <p data-nodeid=\"23732\">\n                      <em data-nodeid=\"23894\"\n                        ><strong data-nodeid=\"23893\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">    result,err := sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> err!=<span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">        fmt.Println(err)\n</div></li><li><div class=\"code-word\">    }<span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        fmt.Println(result)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23734\">\n                      函数有多值返回的时候，需要有多个变量接收它的值，示例中使用\n                      result 和 err 变量，使用逗号分开。\n                    </p>\n                    <p data-nodeid=\"23735\">\n                      如果有的函数的返回值不需要，可以使用下划线 _\n                      丢弃它，这种方式我在 for range\n                      循环那节课里也使用过，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">result,_ := sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23737\">\n                      这样即可忽略函数 sum 返回的错误信息，也不用再做判断。\n                    </p>\n                    <blockquote data-nodeid=\"23738\">\n                      <p data-nodeid=\"23739\">\n                        提示：这里使用的 error 是 Go\n                        语言内置的一个接口，用于表示程序的错误信息，后续课程我会详细介绍。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"23740\">命名返回参数</h4>\n                    <p data-nodeid=\"23741\">\n                      不止函数的参数可以有变量名称，函数的返回值也可以，也就是说你可以为每个返回值都起一个名字，这个名字可以像参数一样在函数体内使用。\n                    </p>\n                    <p data-nodeid=\"23742\">\n                      现在我们继续对 sum\n                      函数的例子进行改造，为其返回值命名，如下面的代码所示：\n                    </p>\n                    <p data-nodeid=\"23743\">\n                      <em data-nodeid=\"23908\"\n                        ><strong data-nodeid=\"23907\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(sum <span class=\"hljs-keyword\">int</span>,err error)</span></span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> a&lt;<span class=\"hljs-number\">0</span> || b&lt;<span class=\"hljs-number\">0</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>,errors.New(<span class=\"hljs-string\">\"a或者b不能是负数\"</span>)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    sum=a+b\n</div></li><li><div class=\"code-word\">    err=<span class=\"hljs-literal\">nil</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> \n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23745\">\n                      返回值的命名和参数、变量都是一样的，名称在前，类型在后。以上示例中，命名的两个返回值名称，一个是\n                      sum，一个是 err，这样就可以在函数体中使用它们了。\n                    </p>\n                    <p data-nodeid=\"23746\">\n                      通过下面示例中的这种方式直接为命名返回参数赋值，也就等于函数有了返回值，所以就可以忽略\n                      return 的返回值了，也就是说，示例中只有一个 return，return\n                      后没有要返回的值。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">sum=a+b\n</div></li><li><div class=\"code-word\">err=<span class=\"hljs-literal\">nil</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23748\">\n                      通过命名返回参数的赋值方式，和直接使用 return\n                      返回值的方式结果是一样的，所以调用以上 sum\n                      函数，返回的结果也一样。\n                    </p>\n                    <p data-nodeid=\"23749\">\n                      虽然 Go\n                      语言支持函数返回值命名，但是并不是太常用，根据自己的需求情况，酌情选择是否对函数返回值命名。\n                    </p>\n                    <h4 data-nodeid=\"23750\">可变参数</h4>\n                    <p data-nodeid=\"23751\">\n                      可变参数，就是函数的参数数量是可变的，比如最常见的\n                      fmt.Println 函数。\n                    </p>\n                    <p data-nodeid=\"23752\">\n                      同样一个函数，可以不传参数，也可以传递一个参数，也可以两个参数，也可以是多个等等，这种函数就是具有可变参数的函数，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">fmt.Println()\n</div></li><li><div class=\"code-word\">fmt.Println(<span class=\"hljs-string\">\"飞雪\"</span>)\n</div></li><li><div class=\"code-word\">fmt.Println(<span class=\"hljs-string\">\"飞雪\"</span>,<span class=\"hljs-string\">\"无情\"</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23754\">\n                      下面所演示的是 Println\n                      函数的声明，从中可以看到，定义可变参数，只要在参数类型前加三个点\n                      … 即可：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Println</span><span class=\"hljs-params\">(a ...<span class=\"hljs-keyword\">interface</span>{})</span> <span class=\"hljs-params\">(n <span class=\"hljs-keyword\">int</span>, err error)</span></span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23756\">\n                      现在我们也可以定义自己的可变参数的函数了。还是以 sum\n                      函数为例，在下面的代码中，我通过可变参数的方式，计算调用者传递的所有实参的和：\n                    </p>\n                    <p data-nodeid=\"23757\">\n                      <em data-nodeid=\"23922\"\n                        ><strong data-nodeid=\"23921\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">func <span class=\"hljs-title\">sum1</span><span class=\"hljs-params\">(params ...<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-keyword\">int</span> </span>{\n</div></li><li><div class=\"code-word\">    sum := <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> _, i := range params {\n</div></li><li><div class=\"code-word\">        sum += i\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> sum\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23759\">\n                      为了便于和 sum 函数区分，我定义了函数\n                      sum1，该函数的参数是一个可变参数，然后通过 for range\n                      循环来计算这些参数之和。\n                    </p>\n                    <p data-nodeid=\"23760\">\n                      讲到这里，相信你也看明白了，可变参数的类型其实就是切片，比如示例中\n                      params 参数的类型是 []int，所以可以使用 for range\n                      进行循环。\n                    </p>\n                    <p data-nodeid=\"23761\">\n                      函数有了可变参数，就可以灵活地进行使用了。\n                    </p>\n                    <p data-nodeid=\"23762\">\n                      如下面的调用者示例，传递几个参数都可以，非常方便，也更灵活：\n                    </p>\n                    <p data-nodeid=\"23763\">\n                      <em data-nodeid=\"23934\"\n                        ><strong data-nodeid=\"23933\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">fmt.Println(sum1(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>))\n</div></li><li><div class=\"code-word\">fmt.Println(sum1(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>))\n</div></li><li><div class=\"code-word\">fmt.Println(sum1(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>))\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"23765\">\n                      <p data-nodeid=\"23766\">\n                        这里需要注意，如果你定义的函数中既有普通参数，又有可变参数，那么可变参数一定要放在参数列表的最后一个，比如\n                        sum1(tip string,params …int) ，params\n                        可变参数一定要放在最末尾。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"23767\">包级函数</h4>\n                    <p data-nodeid=\"23768\">\n                      不管是自定义的函数 sum、sum1，还是我们使用到的函数\n                      Println，都会从属于一个包，也就是 package。sum 函数属于\n                      main 包，Println 函数属于 fmt 包。\n                    </p>\n                    <p data-nodeid=\"23769\">\n                      同一个包中的函数哪怕是私有的（函数名称首字母小写）也可以被调用。如果不同包的函数要被调用，那么函数的作用域必须是公有的，也就是<strong\n                        data-nodeid=\"23943\"\n                        >函数名称的首字母要大写</strong\n                      >，比如 Println。\n                    </p>\n                    <p data-nodeid=\"23770\">\n                      在后面的包、作用域和模块化的课程中我会详细讲解，这里可以先记住：\n                    </p>\n                    <ol data-nodeid=\"37374\">\n                      <li data-nodeid=\"37375\">\n                        <p data-nodeid=\"37376\">\n                          函数名称首字母小写代表私有函数，只有在同一个包中才可以被调用；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"37377\">\n                        <p class=\"te-preview-highlight\" data-nodeid=\"37378\">\n                          函数名称首字母大写代表公有函数，不同的包也可以调用；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"37379\">\n                        <p data-nodeid=\"37380\">\n                          任何一个函数都会从属于一个包。\n                        </p>\n                      </li>\n                    </ol>\n\n                    <blockquote data-nodeid=\"23778\">\n                      <p data-nodeid=\"23779\">\n                        小提示：Go 语言没有用 public、private\n                        这样的修饰符来修饰函数是公有还是私有，而是通过函数名称的大小写来代表，这样省略了烦琐的修饰符，更简洁。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"23780\">匿名函数和闭包</h4>\n                    <p data-nodeid=\"23781\">\n                      顾名思义，匿名函数就是没有名字的函数，这是它和正常函数的主要区别。\n                    </p>\n                    <p data-nodeid=\"23782\">\n                      在下面的示例中，变量 sum2\n                      所对应的值就是一个匿名函数。需要注意的是，这里的 sum2\n                      只是一个函数类型的变量，并不是函数的名字。\n                    </p>\n                    <p data-nodeid=\"23783\">\n                      <em data-nodeid=\"23956\"\n                        ><strong data-nodeid=\"23955\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">    sum2 := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> a + b\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    fmt.Println(sum2(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23785\">\n                      通过\n                      sum2，我们可以对匿名函数进行调用，以上示例算出的结果是\n                      3，和使用正常的函数一样。\n                    </p>\n                    <p data-nodeid=\"23786\">\n                      有了匿名函数，就可以在函数中再定义函数（函数嵌套），定义的这个匿名函数，也可以称为内部函数。更重要的是，在函数内定义的内部函数，可以使用外部函数的变量等，这种方式也称为闭包。\n                    </p>\n                    <p data-nodeid=\"23787\">我们用下面的代码进行演示：</p>\n                    <p data-nodeid=\"23788\">\n                      <em data-nodeid=\"23964\"\n                        ><strong data-nodeid=\"23963\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">    cl:=colsure()\n</div></li><li><div class=\"code-word\">    fmt.Println(cl())\n</div></li><li><div class=\"code-word\">    fmt.Println(cl())\n</div></li><li><div class=\"code-word\">    fmt.Println(cl())\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">colsure</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">int</span></span> {\n</div></li><li><div class=\"code-word\">    i:=<span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">int</span></span> {\n</div></li><li><div class=\"code-word\">        i++\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> i\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23790\">\n                      运行这个代码，你会看到输出打印的结果是：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">1\n</div></li><li><div class=\"code-word\">2\n</div></li><li><div class=\"code-word\">3\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23792\">\n                      这都得益于匿名函数闭包的能力，让我们自定义的 colsure\n                      函数，可以返回一个匿名函数，并且持有外部函数 colsure\n                      的变量 i。因而在 main 函数中，每调用一次 cl()，i\n                      的值就会加 1。\n                    </p>\n                    <blockquote data-nodeid=\"23793\">\n                      <p data-nodeid=\"23794\">\n                        小提示：在 Go\n                        语言中，函数也是一种类型，它也可以被用来声明函数类型的变量、参数或者作为另一个函数的返回值类型。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"23795\">方法</h3>\n                    <h4 data-nodeid=\"23796\">不同于函数的方法</h4>\n                    <p data-nodeid=\"23797\">\n                      在 Go\n                      语言中，方法和函数是两个概念，但又非常相似，不同点在于方法必须要有一个接收者，这个接收者是一个类型，这样方法就和这个类型绑定在一起，称为这个类型的方法。\n                    </p>\n                    <p data-nodeid=\"23798\">\n                      在下面的示例中，type Age uint 表示定义一个新类型\n                      Age，该类型等价于 uint，可以理解为类型 uint 的重命名。其中\n                      type 是 Go\n                      语言关键字，表示定义一个类型，在结构体和接口的课程中我会详细介绍。\n                    </p>\n                    <p data-nodeid=\"23799\">\n                      <em data-nodeid=\"23976\"\n                        ><strong data-nodeid=\"23975\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> Age <span class=\"hljs-keyword\">uint</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(age Age)</span> <span class=\"hljs-title\">String</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">    fmt.Println(<span class=\"hljs-string\">\"the age is\"</span>,age)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23801\">\n                      示例中方法 String() 就是类型 Age 的方法，类型 Age 是方法\n                      String() 的接收者。\n                    </p>\n                    <p data-nodeid=\"23802\">\n                      和函数不同，定义方法时会在关键字 func 和方法名 String\n                      之间加一个接收者 (age Age) ，接收者使用小括号包围。\n                    </p>\n                    <p data-nodeid=\"23803\">\n                      接收者的定义和普通变量、函数参数等一样，前面是变量名，后面是接收者类型。\n                    </p>\n                    <p data-nodeid=\"23804\">\n                      现在方法 String() 就和类型 Age 绑定在一起了，String()\n                      是类型 Age 的方法。\n                    </p>\n                    <p data-nodeid=\"23805\">\n                      定义了接收者的方法后，就可以通过点操作符调用方法，如下面的代码所示：\n                    </p>\n                    <p data-nodeid=\"23806\">\n                      <em data-nodeid=\"23986\"\n                        ><strong data-nodeid=\"23985\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">    age:=Age(<span class=\"hljs-number\">25</span>)\n</div></li><li><div class=\"code-word\">    age.String()\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23808\">运行这段代码，可以看到如下输出：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">the age is <span class=\"hljs-number\">25</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23810\">\n                      接收者就是函数和方法的最大不同，此外，上面所讲到的函数具备的能力，方法也都具备。\n                    </p>\n                    <blockquote data-nodeid=\"23811\">\n                      <p data-nodeid=\"23812\">\n                        提示：因为 25 也是 unit 类型，unit 类型等价于我定义的\n                        Age 类型，所以 25 可以强制转换为 Age 类型。\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"23813\">值类型接收者和指针类型接收者</h4>\n                    <p data-nodeid=\"23814\">\n                      方法的接收者除了可以是值类型（比如上一小节的示例），也可以是指针类型。\n                    </p>\n                    <p data-nodeid=\"23815\">\n                      定义的方法的接收者类型是指针，所以我们对指针的修改是有效的，如果不是指针，修改就没有效果，如下所示：\n                    </p>\n                    <p data-nodeid=\"23816\">\n                      <em data-nodeid=\"23997\"\n                        ><strong data-nodeid=\"23996\">ch05/main.go</strong></em\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(age *Age)</span> <span class=\"hljs-title\">Modify</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">    *age = Age(<span class=\"hljs-number\">30</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23818\">\n                      调用一次 Modify 方法后，再调用 String\n                      方法查看结果，会发现已经变成了\n                      30，说明基于指针的修改有效，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">age:=Age(<span class=\"hljs-number\">25</span>)\n</div></li><li><div class=\"code-word\">age.String()\n</div></li><li><div class=\"code-word\">age.Modify()\n</div></li><li><div class=\"code-word\">age.String()\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"23820\">\n                      <p data-nodeid=\"23821\">\n                        提示：在调用方法的时候，传递的接收者本质上都是副本，只不过一个是这个值副本，一是指向这个值指针的副本。指针具有指向原有值的特性，所以修改了指针指向的值，也就修改了原有的值。我们可以简单地理解为值接收者使用的是值的副本来调用方法，而指针接收者使用实际的值来调用方法。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"23822\">\n                      示例中调用指针接收者方法的时候，使用的是一个值类型的变量，并不是一个指针类型，其实这里使用指针变量调用也是可以的，如下面的代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">(&amp;age).Modify()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23824\">\n                      这就是 Go 语言编译器帮我们自动做的事情：\n                    </p>\n                    <ul data-nodeid=\"23825\">\n                      <li data-nodeid=\"23826\">\n                        <p data-nodeid=\"23827\">\n                          如果使用一个值类型变量调用指针类型接收者的方法，Go\n                          语言编译器会自动帮我们取指针调用，以满足指针接收者的要求。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"23828\">\n                        <p data-nodeid=\"23829\">\n                          同样的原理，如果使用一个指针类型变量调用值类型接收者的方法，Go\n                          语言编译器会自动帮我们解引用调用，以满足值类型接收者的要求。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"23830\">\n                      总之，方法的调用者，既可以是值也可以是指针，不用太关注这些，Go\n                      语言会帮我们自动转义，大大提高开发效率，同时避免因不小心造成的\n                      Bug。\n                    </p>\n                    <blockquote data-nodeid=\"23831\">\n                      <p data-nodeid=\"23832\">\n                        不管是使用值类型接收者，还是指针类型接收者，要先确定你的需求：在对类型进行操作的时候是要改变当前接收者的值，还是要创建一个新值进行返回？这些就可以决定使用哪种接收者。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"23833\">总结</h3>\n                    <p data-nodeid=\"23834\">\n                      在 Go\n                      语言中，虽然存在函数和方法两个概念，但是它们基本相同，不同的是所属的对象。函数属于一个包，方法属于一个类型，所以方法也可以简单地理解为和一个类型关联的函数。\n                    </p>\n                    <p data-nodeid=\"23835\">\n                      不管是函数还是方法，它们都是代码复用的第一步，也是代码职责分离的基础。掌握好函数和方法，可以让你写出职责清晰、任务明确、可复用的代码，提高开发效率、降低\n                      Bug 率。\n                    </p>\n                    <p data-nodeid=\"23836\">\n                      本节课给你<strong data-nodeid=\"24014\">留的思考题是</strong\n                      >：方法是否可以作为表达式赋值给一个变量？如果可以的话，如何通过这个变量调用方法？\n                    </p>\n                    <p data-nodeid=\"23837\">\n                      下一节课，我将会为你讲解 Go\n                      语言的结构体类型和接口，通过它们就可以对现实事物进行描述定义，比如如何使用\n                      Go 语言的结构体来描述一个人。\n                    </p>\n            "}