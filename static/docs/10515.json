{"title":"14 | 动态规划：如何通过最优子结构，完成复杂问题求解？","context":"\n                    <p data-nodeid=\"30990\" class=\"\">\n                      在前面课时中，我们学习了分治法的思想，并以二分查找为例介绍了分治的实现逻辑。\n                    </p>\n                    <p data-nodeid=\"30991\">\n                      我们提到过，<strong data-nodeid=\"31123\"\n                        >分治法的使用必须满足 4 个条件：</strong\n                      >\n                    </p>\n                    <ol data-nodeid=\"30992\">\n                      <li data-nodeid=\"30993\">\n                        <p data-nodeid=\"30994\">\n                          问题的解决难度与数据规模有关；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"30995\">\n                        <p data-nodeid=\"30996\">原问题可被分解；</p>\n                      </li>\n                      <li data-nodeid=\"30997\">\n                        <p data-nodeid=\"30998\">\n                          子问题的解可以合并为原问题的解；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"30999\">\n                        <p data-nodeid=\"31000\">所有的子问题相互独立。</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"31001\">\n                      然而在实际工作中还存在这样一类问题，它们满足前 3\n                      个条件，唯独不满足第 4\n                      个条件。那么这类问题我们该怎么解决呢？本课时，我们就来学习求解这类问题的动态规划算法，它是最常用的算法之一。\n                    </p>\n                    <h3 data-nodeid=\"31002\">什么是动态规划</h3>\n                    <p data-nodeid=\"31003\">\n                      <strong data-nodeid=\"31134\"\n                        >从数学的视角来看，动态规划是一种运筹学方法，是在多轮决策过程中的最优方法</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"31004\">\n                      那么，什么是多轮决策呢？其实多轮决策的每一轮都可以看作是一个子问题。<strong\n                        data-nodeid=\"31140\"\n                        >从分治法的视角来看，每个子问题必须相互独立。但在多轮决策中，这个假设显然不成立。这也是动态规划方法产生的原因之一</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"31005\">\n                      动态规划是候选人参加面试的噩梦，也是面试过程中的难点。虽然动态规划很难，但在实际的工作中，使用频率并不高，不是所有的岗位都会用到动态规划。\n                    </p>\n                    <h4 data-nodeid=\"31006\">最短路径问题</h4>\n                    <p data-nodeid=\"31007\">\n                      接下来。<strong data-nodeid=\"31148\"\n                        >我们来看一个非常典型的例子，最短路径问题</strong\n                      >。如下图所示：\n                    </p>\n                    <p data-nodeid=\"31008\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/2A/79/Ciqc1F78bdmAGdktAADnlpYQrHk607.png\"\n                        alt=\"image (4).png\"\n                        data-nodeid=\"31151\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31009\">\n                      每个结点是一个位置，每条边是两个位置之间的距离。现在需要求解出一条由\n                      A 到 G 的最短距离是多少。\n                    </p>\n                    <p data-nodeid=\"31010\">\n                      不难发现，我们需要求解的路线是由 A 到 G，这就意味着 A\n                      要先到 B，再到 C，再到 D，再到 E，再到\n                      F。每一轮都需要做不同的决策，而每次的决策又依赖上一轮决策的结果。\n                    </p>\n                    <p data-nodeid=\"31011\">\n                      例如，做 D<sub>2</sub> -&gt; E 的决策时，D<sub>2</sub>\n                      -&gt; E<sub>2</sub> 的距离为\n                      1，最短。但这轮的决策，基于的假设是从 D<sub>2</sub>\n                      出发，这就意味着前面一轮的决策结果是\n                      D<sub>2</sub>。由此可见，相邻两轮的决策结果并不是独立的。\n                    </p>\n                    <p data-nodeid=\"31012\">\n                      <strong data-nodeid=\"31195\"\n                        >动态规划还有一个重要概念叫作状态</strong\n                      >。在这个例子中，状态是个变量，而且受决策动作的影响。例如，第一轮决策的状态是\n                      S<sub>1</sub>，可选的值是 A，第二轮决策的状态是\n                      S<sub>2</sub>，可选的值就是 B<sub>1</sub> 和\n                      B<sub>2</sub>。以此类推。\n                    </p>\n                    <h3 data-nodeid=\"31013\">动态规划的基本方法</h3>\n                    <p data-nodeid=\"31014\">\n                      动态规划问题之所以难，是因为动态规划的解题方法并没有那么标准化，它需要你因题而异，仔细分析问题并寻找解决方案。<strong\n                        data-nodeid=\"31202\"\n                        >虽然动态规划问题没有标准化的解题方法，但它有一些宏观层面通用的方法论</strong\n                      >：\n                    </p>\n                    <blockquote data-nodeid=\"31015\">\n                      <p data-nodeid=\"31016\">下面的 k 表示多轮决策的第 k 轮</p>\n                    </blockquote>\n                    <ol data-nodeid=\"31017\">\n                      <li data-nodeid=\"31018\">\n                        <p data-nodeid=\"31019\">\n                          <strong data-nodeid=\"31208\">分阶段</strong\n                          >，将原问题划分成几个子问题。一个子问题就是多轮决策的一个阶段，它们可以是不满足独立性的。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31020\">\n                        <p data-nodeid=\"31021\">\n                          <strong data-nodeid=\"31217\">找状态</strong\n                          >，选择合适的状态变量\n                          S<sub>k</sub>。它需要具备描述多轮决策过程的演变，更像是决策可能的结果。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31022\">\n                        <p data-nodeid=\"31023\">\n                          <strong data-nodeid=\"31246\">做决</strong\n                          >策，确定决策变量\n                          u<sub>k</sub>。每一轮的决策就是每一轮可能的决策动作，例如\n                          D<sub>2</sub> 的可能的决策动作是 D<sub>2</sub> -&gt;\n                          E<sub>2</sub> 和 D<sub>2</sub> -&gt; E<sub>3</sub>。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31024\">\n                        <p data-nodeid=\"31025\">\n                          <strong data-nodeid=\"31266\">状态转移方程</strong\n                          >。这个步骤是动态规划最重要的核心，<strong\n                            data-nodeid=\"31267\"\n                            >即 s<sub>k+1</sub>=\n                            u<sub>k</sub>(s<sub>k</sub>)&nbsp;。</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31026\">\n                        <p data-nodeid=\"31027\">\n                          <strong data-nodeid=\"31280\">定目标</strong\n                          >。写出代表多轮决策目标的指标函数\n                          V<sub>k</sub>,<sub>n</sub>。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31028\">\n                        <p data-nodeid=\"31029\">\n                          <strong data-nodeid=\"31285\">寻找终止条件</strong>。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"31030\">\n                      了解了方法论、状态、多轮决策之后，我们再补充一些动态规划的基本概念。\n                    </p>\n                    <ul data-nodeid=\"31031\">\n                      <li data-nodeid=\"31032\">\n                        <p data-nodeid=\"31033\">\n                          <strong data-nodeid=\"31291\">策略</strong\n                          >，每轮的动作是决策，多轮决策合在一起常常被称为策略。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31034\">\n                        <p data-nodeid=\"31035\">\n                          <strong data-nodeid=\"31296\">策略集合</strong\n                          >，由于每轮的决策动作都是一个变量，这就导致合在一起的策略也是一个变量。我们通常会称所有可能的策略为策略集合。因此，动态规划的目标，也可以说是从策略集合中，找到最优的那个策略。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"31036\">\n                      <strong data-nodeid=\"31301\"\n                        >一般而言，具有如下几个特征的问题，可以采用动态规划求解</strong\n                      >：\n                    </p>\n                    <ol data-nodeid=\"31037\">\n                      <li data-nodeid=\"31038\">\n                        <p data-nodeid=\"31039\">\n                          <strong data-nodeid=\"31314\">最优子结构</strong\n                          >。它的含义是，原问题的最优解所包括的子问题的解也是最优的。例如，某个策略使得\n                          A 到 G 是最优的。假设它途径了 F<sub>i</sub>，那么它从\n                          A 到 F<sub>i</sub> 也一定是最优的。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31040\">\n                        <p data-nodeid=\"31041\">\n                          <strong data-nodeid=\"31319\">无后效性</strong\n                          >。某阶段的决策，无法影响先前的状态。可以理解为今天的动作改变不了历史。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31042\">\n                        <p data-nodeid=\"31043\">\n                          <strong data-nodeid=\"31328\">有重叠子问题</strong\n                          >。也就是，子问题之间不独立。<strong\n                            data-nodeid=\"31329\"\n                            >这个性质是动态规划区别于分治法的条件</strong\n                          >。如果原问题不满足这个特征，也是可以用动态规划求解的，无非就是杀鸡用了宰牛刀。\n                        </p>\n                      </li>\n                    </ol>\n                    <h3 data-nodeid=\"31044\">动态规划的案例</h3>\n                    <p data-nodeid=\"31045\">\n                      到这里，动态规划的概念和方法就讲完了。接下来，我们以最短路径问题再来看看动态规划的求解方法。在这个问题中，你可以采用最暴力的方法，那就是把所有的可能路径都遍历一遍，去看哪个结果的路径最短的。如果采用动态规划方法，那么我们按照方法论来执行。\n                    </p>\n                    <h4 data-nodeid=\"31046\">动态规划的求解方法</h4>\n                    <p data-nodeid=\"31047\">\n                      <strong data-nodeid=\"31337\">具体的解题步骤如下</strong>：\n                    </p>\n                    <h5 data-nodeid=\"31048\">\n                      1. <strong data-nodeid=\"31342\">分阶段</strong>\n                    </h5>\n                    <p data-nodeid=\"31049\">\n                      很显然，从 A 到 G，可以拆分为 A -&gt; B、B -&gt; C、C\n                      -&gt; D、D -&gt; E、E -&gt; F、F -&gt; G，6 个阶段。\n                    </p>\n                    <h5 data-nodeid=\"31050\">\n                      2. <strong data-nodeid=\"31348\">找状态</strong>\n                    </h5>\n                    <p data-nodeid=\"31051\">\n                      第一轮的状态 S<sub>1</sub> = A，第二轮 S<sub>2</sub> =\n                      {B<sub>1</sub>,B<sub>2</sub>}，第三轮 S<sub>3</sub> =\n                      {C<sub>1</sub>,C<sub>2</sub>,C<sub>3</sub>,C<sub>4</sub>}，第四轮\n                      S<sub>4</sub> =\n                      {D<sub>1</sub>,D<sub>2</sub>,D<sub>3</sub>}，第五轮 S<sub\n                        >5</sub\n                      >\n                      = {E<sub>1</sub>,E<sub>2</sub>,E<sub>3</sub>}，第六轮\n                      S<sub>6</sub> = {F<sub>1</sub>,F<sub>2</sub>}，第七轮\n                      S<sub>7</sub> = {G}。\n                    </p>\n                    <h5 data-nodeid=\"31052\">\n                      3. <strong data-nodeid=\"31438\">做决策</strong>\n                    </h5>\n                    <p data-nodeid=\"31053\">\n                      决策变量就是上面图中的每条边。我们以第四轮决策 D -&gt; E\n                      为例来看，可以得到\n                      u<sub>4</sub>(D<sub>1</sub>)，u<sub>4</sub>(D<sub>2</sub>)，u<sub>4</sub>(D<sub>3</sub>)。其中\n                      u<sub>4</sub>(D<sub>1</sub>) 的可能结果是 E<sub>1</sub> 和\n                      E<sub>2</sub>。\n                    </p>\n                    <h5 data-nodeid=\"31054\">\n                      4. <strong data-nodeid=\"31484\">写出状态转移方程</strong>\n                    </h5>\n                    <p data-nodeid=\"31055\">\n                      在这里，就是 <em data-nodeid=\"31514\">s</em\n                      ><sub><em data-nodeid=\"31515\">k</em>+1</sub> =\n                      <em data-nodeid=\"31516\">u</em\n                      ><sub><em data-nodeid=\"31517\">k</em></sub\n                      >(<em data-nodeid=\"31518\">s</em\n                      ><sub><em data-nodeid=\"31519\">k</em></sub\n                      >)。\n                    </p>\n                    <h5 data-nodeid=\"31056\">\n                      5. <strong data-nodeid=\"31524\">定目标</strong>\n                    </h5>\n                    <p data-nodeid=\"31057\">\n                      别忘了，我们的目标是总距离最短。我们定义\n                      <em data-nodeid=\"31582\">d</em\n                      ><sub><em data-nodeid=\"31583\">k</em></sub\n                      >(<em data-nodeid=\"31584\">s</em\n                      ><sub><em data-nodeid=\"31585\">k</em></sub\n                      >,<em data-nodeid=\"31586\">u</em\n                      ><sub><em data-nodeid=\"31587\">k</em></sub\n                      >) 是在 s<sub>k</sub> 时，选择 u<sub>k</sub>\n                      动作的距离。例如，<em data-nodeid=\"31588\">d</em\n                      ><sub>5</sub>(<em data-nodeid=\"31589\">E</em\n                      ><sub>1</sub>,<em data-nodeid=\"31590\">F</em><sub>1</sub>)\n                      = 3。那么此时 n = 7，则有，\n                    </p>\n                    <p data-nodeid=\"31058\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/2A/85/CgqCHl78bqSAQBWuAAAmIGYXrUs078.png\"\n                        alt=\"image (12).png\"\n                        data-nodeid=\"31593\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31059\">就是最终要优化的目标。</p>\n                    <h5 data-nodeid=\"31060\">\n                      6. <strong data-nodeid=\"31599\">寻找终止条件</strong>\n                    </h5>\n                    <ul data-nodeid=\"31061\">\n                      <li data-nodeid=\"31062\">\n                        <p data-nodeid=\"31063\">\n                          很显然，这里的起止条件分别是，s<sub>1</sub> = A 和\n                          s<sub>7</sub> = G。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31064\">\n                        <p data-nodeid=\"31065\">\n                          接下来，我们把所有的已知条件，凝练为上面的符号之后，只需要借助最优子结构，就可以把问题解决了。最优子结构的含义是，原问题的最优解所包括的子问题的解也是最优的。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31066\">\n                        <p data-nodeid=\"31067\">\n                          套用在这个例子的含义就是，如果 A -&gt; ... -&gt; F<sub\n                            >1</sub\n                          >\n                          -&gt; G 是全局 A 到 G 最优的路径，那么此处 A -&gt; ...\n                          -&gt; F<sub>1</sub> 也是 A 到 F<sub>1</sub>\n                          的最优路径。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31068\">\n                        <p data-nodeid=\"31069\">\n                          因此，此时的优化目标 min\n                          V<sub>k,7</sub>(s<sub>1</sub>=A,\n                          s<sub>7</sub>=G)，等价于 min {\n                          V<sub>k,6</sub>(s<sub>1</sub>=A,\n                          s<sub>6</sub>=F<sub>1</sub>)+4，\n                          V<sub>k,6</sub>(s<sub>1</sub>=A,\n                          s<sub>6</sub>=F<sub>2</sub>)+3 }。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31070\">\n                        <p data-nodeid=\"31071\">\n                          此时，优化目标的含义为，从 A 到 G 的最短路径，是 A 到\n                          F<sub>1</sub> 到 G 的路径和 A 到 F<sub>2</sub> 到 G\n                          的路径中更短的那个。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31072\">\n                        <p data-nodeid=\"31073\">\n                          同样的，对于上面式子中，V<sub>k,6</sub>(s<sub>1</sub>=A,s<sub>6</sub>=F<sub>1</sub>)\n                          和\n                          V<sub>k,6</sub>(s<sub>1</sub>=A,s<sub>6</sub>=F<sub>2</sub>)，仍然可以递归地使用上面的分析方法。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"31074\">计算过程详解</h4>\n                    <p data-nodeid=\"31075\">\n                      好了，为了让大家清晰地看到结果，我们给出详细的计算过程。为了书写简单，<strong\n                        data-nodeid=\"31732\"\n                        >我们把函数 V<sub>k,7</sub>(s<sub>1</sub>=A,\n                        s<sub>7</sub>=G) 精简为 V<sub>7</sub>(G)，含义为经过了 6\n                        轮决策后，状态到达 G 后所使用的距离</strong\n                      >。我们把图片复制到这里一份，方便大家不用上下切换。\n                    </p>\n                    <p data-nodeid=\"31076\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/2A/85/CgqCHl78bpKAF2FWAADnlpYQrHk836.png\"\n                        alt=\"image (6).png\"\n                        data-nodeid=\"31735\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31077\">\n                      <strong data-nodeid=\"31756\"\n                        >我们的优化目标为 min V<sub>k,7</sub>(s<sub>1</sub>=A,\n                        s<sub>7</sub>=G)，因此精简后原问题为，min\n                        V<sub>7</sub>(G)</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"31078\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/2A/7A/Ciqc1F78bvCAD2QkAABAo0Sezlc723.png\"\n                        alt=\"image (13).png\"\n                        data-nodeid=\"31759\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31079\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/2A/C5/Ciqc1F79TfyAEbKKAAB2PY0Lb5U909.png\"\n                        alt=\"5.png\"\n                        data-nodeid=\"31762\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31080\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/2A/7A/Ciqc1F78bx2AO3WTAACB1LuxHEo059.png\"\n                        alt=\"image (15).png\"\n                        data-nodeid=\"31765\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31081\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/2A/7A/Ciqc1F78bySAdLa-AACOk2cGokg643.png\"\n                        alt=\"image (7).png\"\n                        data-nodeid=\"31768\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31082\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/2A/D0/CgqCHl79TgmAfHtMAACROQbL6JE078.png\"\n                        alt=\"2.png\"\n                        data-nodeid=\"31771\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31083\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/2A/85/CgqCHl78bzKAQTrCAABoEJ4y5UM123.png\"\n                        alt=\"image (9).png\"\n                        data-nodeid=\"31774\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31084\">\n                      因此，<strong data-nodeid=\"31800\"\n                        >最终输出路径为 A -&gt; B<sub>1</sub> -&gt; C<sub\n                          >2</sub\n                        >\n                        -&gt; D<sub>1</sub> -&gt; E<sub>2</sub> -&gt; F<sub\n                          >2</sub\n                        >\n                        -&gt; G，最短距离为 18</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"31085\">代码实现过程</h4>\n                    <p data-nodeid=\"31086\">\n                      接下来，我们尝试用代码来实现上面的计算过程。对于输入的图，可以采用一个\n                      m x m 的二维数组来保存。在这个二维数组里，m\n                      等于全部的结点数，也就是结点与结点的关系图。而数组每个元素的数值，定义为结点到结点需要的距离。\n                    </p>\n                    <p data-nodeid=\"31087\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/2A/7A/Ciqc1F78bz2ATtl4AADnlpYQrHk384.png\"\n                        alt=\"image (10).png\"\n                        data-nodeid=\"31805\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31088\">\n                      在本例中，可以定义输入矩阵 m（空白处为0），如下图所示：\n                    </p>\n                    <p data-nodeid=\"31089\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/2A/85/CgqCHl78b0mALhRHAABQnqgjMYc406.png\"\n                        alt=\"image (11).png\"\n                        data-nodeid=\"31809\"\n                      />\n                    </p>\n                    <p data-nodeid=\"31090\">代码如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">testpath</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">minPath1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[][] matrix)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> process1(matrix, matrix[<span class=\"hljs-number\">0</span>].length-<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 递归</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">process1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[][] matrix, <span class=\"hljs-keyword\">int</span> i)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 到达A退出递归</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 状态转移</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span>{\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">int</span> distance = <span class=\"hljs-number\">999</span>;\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;i; j++){\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-keyword\">if</span>(matrix[j][i]!=<span class=\"hljs-number\">0</span>){\n</div></li><li><div class=\"code-word\">                    <span class=\"hljs-keyword\">int</span> d_tmp = matrix[j][i] + process1(matrix, j);\n</div></li><li><div class=\"code-word\">                    <span class=\"hljs-keyword\">if</span> (d_tmp &lt; distance){\n</div></li><li><div class=\"code-word\">                        distance = d_tmp;\n</div></li><li><div class=\"code-word\">                    }\n</div></li><li><div class=\"code-word\">                }\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> distance;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">int</span>[][] m = {{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">0</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>},{<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>}};\n</div></li><li><div class=\"code-word\">        System.out.println(minPath1(m));\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"31092\">代码解读</h4>\n                    <p data-nodeid=\"31093\">\n                      <strong data-nodeid=\"31816\"\n                        >下面我们对这段代码进行解读</strong\n                      >：\n                    </p>\n                    <p data-nodeid=\"31094\">\n                      <strong data-nodeid=\"31821\">代码的 27 行是主函数</strong\n                      >，在代码中定义了二维数组 m，对应于输入的距离图。m 是 15 x\n                      16 维的，我们忽略了最后一行的全\n                      0（即使输入也不会影响结果）。\n                    </p>\n                    <p data-nodeid=\"31095\">\n                      <strong data-nodeid=\"31838\">然后调用函数 minPath1</strong\n                      >。<strong data-nodeid=\"31839\">在第 2 到第 4 行</strong\n                      >，它的内部又调用了 process1(matrix,\n                      matrix[0].length-1)。在这里，matrix[0].length-1 的值是\n                      15，表示的含义是 matrix 数组的第 16 列（G）是目的地。\n                    </p>\n                    <p data-nodeid=\"31096\">\n                      <strong data-nodeid=\"31847\"\n                        >接着进入 process1 函数中</strong\n                      >。我们知道在动态规划的过程中，是从后往前不断地推进结果，这就是状态转移的过程。<strong\n                        data-nodeid=\"31848\"\n                        >对应代码中的 13-24 行：</strong\n                      >\n                    </p>\n                    <ul data-nodeid=\"31097\">\n                      <li data-nodeid=\"31098\">\n                        <p data-nodeid=\"31099\">\n                          第 15 行开始循环，j 变量是纵向的循环变量。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31100\">\n                        <p data-nodeid=\"31101\">\n                          第 16 行判断 matrix[j][i] 与 0\n                          的关系，含义为，只有值不为 0\n                          才说明两个结点之间存在通路。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31102\">\n                        <p data-nodeid=\"31103\">\n                          一旦发现某个通路，就需要计算其距离。计算的方式是 17\n                          行的，d_tmp = matrix[j][i] + process1(matrix, j)。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31104\">\n                        <p data-nodeid=\"31105\">\n                          当得到了距离之后，还需要找到最短的那个距离，也就是 18\n                          到 20 行的含义。这就是动态规划最优子结构的体现。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31106\">\n                        <p data-nodeid=\"31107\">\n                          一旦 i 减小到了 0，就说明已经到了起点 A。那么 A 到 A\n                          的距离就是 0，直接第 10 行的 return 0 就可以了。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"31108\">\n                        <p data-nodeid=\"31109\">\n                          经过运行，这段代码的输出结果是\n                          18，这与我们手动的推导结果一致。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"31110\">练习题</h3>\n                    <p data-nodeid=\"31111\">\n                      在 08\n                      课时中，我们讲述“字符串匹配算法的案例”时提到过，最大公共子串也可以使用动态规划的方法来做。\n                    </p>\n                    <p data-nodeid=\"31112\">案例题目如下：</p>\n                    <p data-nodeid=\"31113\">\n                      假设有且仅有 1 个最大公共子串。比如，输入 a\n                      =&nbsp;\"13452439\"， b\n                      =&nbsp;\"123456\"。由于字符串&nbsp;\"345\"&nbsp;同时在 a 和 b\n                      中出现，且是同时出现在 a 和 b\n                      中的最长子串。因此输出&nbsp;\"345\"。\n                    </p>\n                    <p data-nodeid=\"31903\" class=\"\">\n                      我们就把这个问题当作本课时的练习题。详细分析和答案，请翻阅\n                      16 课时例题 3。\n                    </p>\n\n                    <h3 data-nodeid=\"31115\">总结</h3>\n                    <p data-nodeid=\"31116\">\n                      动态规划领域有很多经典问题，本课时，我们讲述了最短路径的问题。需要明确的是，动态规划并不简单，动态规划的适用范围也没有那么广。如果你不是专门从事运筹优化领域的工作，对它不了解也很正常。如果在求职过程中，你求职的岗位与运筹优化关系不大，一般而言被考察到动态规划的可能性也是极低的。\n                    </p>\n                    <p data-nodeid=\"31117\" class=\"\">\n                      最后，如果你在工作中，遇到了与动态规划相关的困难或经验，欢迎你在留言区和我分享。\n                    </p>\n            "}