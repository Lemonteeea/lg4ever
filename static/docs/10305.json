{"title":"04 | 数据是如何在 React 组件之间流动的？（上）","context":"\n                    <p data-nodeid=\"12983\" class=\"\">\n                      通过前面 3 个课时的学习，相信你已经对 React\n                      生命周期相关的“Why”“What”和“How”有了系统的理解和掌握。当我们谈论生命周期时，其实谈论的是组件的“内心世界”。但组件和人是一样的，它不仅需要拥有丰富的内心世界，还应该建立健全的“人际关系”，要学会<strong\n                        data-nodeid=\"13143\"\n                        >沟通和表达</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"12984\">\n                      从本课时开始，我们将一起探索蕴含在 React\n                      组件中的“沟通与表达”的艺术。我们知道，React\n                      的核心特征是“<strong data-nodeid=\"13149\"\n                        >数据驱动视图</strong\n                      >”，这个特征在业内有一个非常有名的函数式来表达：\n                    </p>\n                    <p data-nodeid=\"12985\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-OmrSAZkEwAAA2ThydXNs410.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"13152\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12986\">\n                      这个表达式有很多的版本，一些版本会把入参里的 data 替换成\n                      state，但它们本质上都指向同一个含义，那就是<strong\n                        data-nodeid=\"13158\"\n                        >React 的视图会随着数据的变化而变化</strong\n                      >。数据这个角色在 React 中的地位可见一斑。\n                    </p>\n                    <p data-nodeid=\"12987\">\n                      在 React 中，如果说两个组件之间希望能够产生“耦合”（即 A\n                      组件希望能够通过某种方式影响到 B\n                      组件），那么毫无疑问，这两个组件必须先建立数据上的连接，以实现所谓的“组件间通信”。\n                    </p>\n                    <p data-nodeid=\"12988\">\n                      “组件间通信”的背后是一套环环相扣的 React\n                      数据流解决方案。虽然这套解决方案在业内已经有了比较成熟和稳定的结论，但<strong\n                        data-nodeid=\"13165\"\n                        >许多人仍然会因为知识的系统性和整体性不强而吃亏</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"12989\">\n                      <strong data-nodeid=\"13170\"\n                        >在前面三个课时中，我们的学习思路是往纵深处去寻觅：铺陈大量的前置知识，然后一步一步地去询问生命周期背后的“Why”，最终揪出\n                        Fiber 架构这个大 boss</strong\n                      >（不过学到这里，这个“纵深”我们才只挖到一半，专栏第二模块还有一大波\n                      Fiber 原理等待我们继续寻觅）。\n                    </p>\n                    <p data-nodeid=\"12990\">\n                      在接下来的第 04 和 05\n                      课时中，我们要做的事情则更倾向于横向的“聚合”：我将用简单易懂的语言，帮你理解当下实践中\n                      React\n                      数据通信的四个大方向，并针对每个方向给出具体的场景和用例。<strong\n                        data-nodeid=\"13176\"\n                        >这些知识本身并不难，但摊子却可以铺得非常大，相关的问题在面试中也始终具备较高的区分度</strong\n                      >。要想扎扎实实掌握，必须耐下心、沉住气，在学习过程中主动地去串联自己的知识链路。\n                    </p>\n                    <h3 data-nodeid=\"12991\">基于 props 的单向数据流</h3>\n                    <p data-nodeid=\"12992\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/61/02/CgqCHl-OmsuAF_FSAAB4ormSPI8355.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"13180\"\n                      />\n                    </p>\n                    <p data-nodeid=\"12993\">\n                      既然 props\n                      是组件的入参，那么组件之间通过修改对方的入参来完成数据通信就是天经地义的事情了。不过，这个“修改”也是有原则的——你必须确保所有操作都在“<strong\n                        data-nodeid=\"13186\"\n                        >单向数据流</strong\n                      >”这个前提下。\n                    </p>\n                    <p data-nodeid=\"12994\">\n                      所谓单向数据流，指的就是当前组件的 state 以 props\n                      的形式流动时，<strong data-nodeid=\"13192\"\n                        >只能流向组件树中比自己层级更低的组件。</strong\n                      >\n                      比如在父-子组件这种嵌套关系中，只能由父组件传 props\n                      给子组件，而不能反过来。\n                    </p>\n                    <p data-nodeid=\"12995\">\n                      听上去虽然限制重重，但用起来却是相当的灵活。基于 props\n                      传参这种形式，我们可以轻松实现父-子通信、子-父通信和兄弟组件通信。\n                    </p>\n                    <h4 data-nodeid=\"12996\">父-子组件通信</h4>\n                    <p data-nodeid=\"12997\">\n                      <strong data-nodeid=\"13198\">原理讲解</strong>\n                    </p>\n                    <p data-nodeid=\"12998\">\n                      这是最常见、也是最好解决的一个通信场景。React\n                      的数据流是单向的，父组件可以直接将 this.props\n                      传入子组件，实现父-子间的通信。这里我给出一个示例。\n                    </p>\n                    <p data-nodeid=\"12999\">\n                      <strong data-nodeid=\"13203\">编码实现</strong>\n                    </p>\n                    <ul data-nodeid=\"13000\">\n                      <li data-nodeid=\"13001\">\n                        <p data-nodeid=\"13002\">子组件编码内容：</p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">props</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"child\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{\\`子组件所接收到的来自父组件的文本内容是：[${props.fatherText}]\\`}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"13004\">\n                      <li data-nodeid=\"13005\">\n                        <p data-nodeid=\"13006\">父组件编码内容：</p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化父组件的 state</span>\n</div></li><li><div class=\"code-word\">  state = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"初始化的父组件的文本\"</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 按钮的监听函数，用于更新 text 值</span>\n</div></li><li><div class=\"code-word\">  changeText = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState({\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"改变后的父组件文本\"</span>\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 渲染父组件</span>\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"father\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.changeText}</span>&gt;</span>\n</div></li><li><div class=\"code-word\">          点击修改父组件传入子组件的文本\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        {/* 引入子组件，并通过 props 下发具体的状态值实现父-子通信 */}\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> <span class=\"hljs-attr\">fatherText</span>=<span class=\"hljs-string\">{this.state.text}</span> /&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13008\">\n                      <strong data-nodeid=\"13209\">视图层验证</strong>\n                    </p>\n                    <p data-nodeid=\"13009\">\n                      我们直接对父组件进行渲染，可以看到大致如下图所示的界面：\n                    </p>\n                    <p data-nodeid=\"13010\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/61/02/CgqCHl-OmuWAaqeoAABhmFu-VMo782.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"13213\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13011\">\n                      通过子组件顺利读取到父组件的\n                      this.props.text，从这一点可以看出，父-子之间的通信是没有问题的。此时假如我们点击父组件中的按钮，父组件的\n                      this.state.text 会发生变化，同时子组件读取到的 props.text\n                      也会跟着发生变化（如下图所示），也就是说，父子组件的数据始终保持一致。\n                    </p>\n                    <p data-nodeid=\"13012\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-Omu-AcVKJAABe2pgKMlQ354.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"13217\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13013\">\n                      由此我们便充分验证了父-子组件基于 props 实现通信的可行性。\n                    </p>\n                    <h4 data-nodeid=\"13014\">子-父组件通信</h4>\n                    <p data-nodeid=\"13015\">\n                      <strong data-nodeid=\"13223\">原理讲解</strong>\n                    </p>\n                    <p data-nodeid=\"13016\">\n                      考虑到 props\n                      是单向的，子组件并不能直接将自己的数据塞给父组件，但 props\n                      的形式也可以是多样的。假如父组件传递给子组件的是一个<strong\n                        data-nodeid=\"13233\"\n                        >绑定了自身上下文的函数</strong\n                      >，那么子组件在调用该函数时，就可以<strong\n                        data-nodeid=\"13234\"\n                        >将想要交给父组件的数据以函数入参的形式给出去</strong\n                      >，以此来间接地实现数据从子组件到父组件的流动。\n                    </p>\n                    <p data-nodeid=\"13017\">\n                      <strong data-nodeid=\"13238\">编码实现</strong>\n                    </p>\n                    <p data-nodeid=\"13018\">\n                      这里我们只需对父-子通信中的示例稍做修改，就可以完成子-父组件通信的可行性验证。\n                    </p>\n                    <p data-nodeid=\"13019\">\n                      首先是对子组件的修改。在 Child\n                      中，我们需要增加对状态的维护，以及对 Father\n                      组件传入的函数形式入参的调用。子组件编码内容如下，修改点我已在代码中以注释的形式标出：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化子组件的 state</span>\n</div></li><li><div class=\"code-word\">  state = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">'子组件的文本'</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 子组件的按钮监听函数</span>\n</div></li><li><div class=\"code-word\">  changeText = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// changeText 中，调用了父组件传入的 changeFatherText 方法</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.props.changeFatherText(<span class=\"hljs-keyword\">this</span>.state.text)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"child\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        {/* 注意这里把修改父组件文本的动作放在了 Child 里 */}\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.changeText}</span>&gt;</span>\n</div></li><li><div class=\"code-word\">          点击更新父组件的文本\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13021\">\n                      在父组件中，我们只需要在 changeText\n                      函数上开一个传参的口子，作为数据通信的入口，然后把\n                      changeText 放在 props\n                      里交给子组件即可。父组件的编码内容如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化父组件的 state</span>\n</div></li><li><div class=\"code-word\">  state = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"初始化的父组件的文本\"</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这个方法会作为 props 传给子组件，用于更新父组件 text 值。newText 正是开放给子组件的数据通信入口</span>\n</div></li><li><div class=\"code-word\">  changeText = <span class=\"hljs-function\">(<span class=\"hljs-params\">newText</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState({\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">text</span>: newText\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 渲染父组件</span>\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"father\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{\\`父组件的文本内容是：[${this.state.text}]\\`}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        {/* 引入子组件，并通过 props 中下发可传参的函数 实现子-父通信 */}\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span>\n</span></div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">changeFatherText</span>=<span class=\"hljs-string\">{this.changeText}</span>\n</div></li><li><div class=\"code-word\">        /&gt;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13023\">\n                      <strong data-nodeid=\"13245\">视图层验证</strong>\n                    </p>\n                    <p data-nodeid=\"13024\">\n                      新的示例渲染后的界面大致如下图所示：\n                    </p>\n                    <p data-nodeid=\"13025\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/61/03/CgqCHl-Om1qAWYoYAABEbXaJOH4748.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"13249\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13026\">\n                      注意，在这个 case\n                      中，我们将具有更新数据能力的按钮转移到了子组件中。\n                    </p>\n                    <p data-nodeid=\"13027\">\n                      当点击子组件中的按钮时，会调用已经绑定了父组件上下文的\n                      this.props.changeFatherText 方法，同时将子组件的\n                      this.state.text\n                      以函数入参的形式传入，由此便能够间接地用子组件的 state\n                      去更新父组件的 state。\n                    </p>\n                    <p data-nodeid=\"13028\">\n                      点击按钮后，父组件的文本会按照我们的预期被子组件更新掉，如下图所示：\n                    </p>\n                    <p data-nodeid=\"13029\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/61/03/CgqCHl-Om1KAR7b2AABAwOe1KdQ729.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"13255\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"13030\">兄弟组件通信</h4>\n                    <p data-nodeid=\"13031\">\n                      <strong data-nodeid=\"13260\">原理讲解</strong>\n                    </p>\n                    <p data-nodeid=\"13032\">\n                      兄弟组件之间共享了同一个父组件，如下图所示，这是一个非常重要的先决条件。\n                    </p>\n                    <p data-nodeid=\"13033\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-Om2qAJmdoAADBknkoDh4735.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"13264\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13034\">\n                      这个先决条件使得我们可以继续利用父子组件这一层关系，将“兄弟\n                      1 → 兄弟 2”之间的通信，转化为“兄弟 1 →\n                      父组件”（子-父通信）、“父组件 → 兄弟\n                      2”（父-子）通信两个步骤，如下图所示，这样一来就能够巧妙地把“兄弟”之间的新问题化解为“父子”之间的旧问题。\n                    </p>\n                    <p data-nodeid=\"13035\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/61/03/CgqCHl-Om3KAMCvhAADUh2BcieU209.png\"\n                        alt=\"Drawing 10.png\"\n                        data-nodeid=\"13268\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13036\">\n                      <strong data-nodeid=\"13272\">编码实现</strong>\n                    </p>\n                    <p data-nodeid=\"13037\">\n                      接下来我们仍然从编码的角度进行验证。首先新增一个 NewChild\n                      组件作为与 Child 组件同层级的兄弟组件。NewChild\n                      将作为数据的发送方，将数据发送给 Child。在 NewChild\n                      中，我们需要处理 NewChild 和 Father 之间的关系。NewChild\n                      组件编码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NewChild</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  state = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"来自 newChild 的文本\"</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// NewChild 组件的按钮监听函数</span>\n</div></li><li><div class=\"code-word\">  changeText = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// changeText 中，调用了父组件传入的 changeFatherText 方法</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.props.changeFatherText(<span class=\"hljs-keyword\">this</span>.state.text);\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"child\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        {/* 注意这里把修改父组件文本（同时也是 Child 组件的文本）的动作放在了 NewChild 里 */}\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.changeText}</span>&gt;</span>点击更新 Child 组件的文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13039\">\n                      接下来看看 Father 组件。在 Father 组件中，我们通过 text\n                      属性连接 Father 和 Child，通过 changeText 函数来连接\n                      Father 和 NewChild。由此便把 text 属性的渲染工作交给了\n                      Child，把 text 属性的更新工作交给\n                      NewÇhild，以此来实现数据从 NewChild 到 Child\n                      的流动。Father 组件编码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化父组件的 state</span>\n</div></li><li><div class=\"code-word\">  state = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"初始化的父组件的文本\"</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 传给 NewChild 组件按钮的监听函数，用于更新父组件 text 值（这个 text 值同时也是 Child 的 props）</span>\n</div></li><li><div class=\"code-word\">  changeText = <span class=\"hljs-function\">(<span class=\"hljs-params\">newText</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState({\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">text</span>: newText\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 渲染父组件</span>\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"father\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        {/* 引入 Child 组件，并通过 props 中下发具体的状态值 实现父-子通信 */}\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Child</span> <span class=\"hljs-attr\">fatherText</span>=<span class=\"hljs-string\">{this.state.text}</span> /&gt;</span>\n</div></li><li><div class=\"code-word\">        {/* 引入 NewChild 组件，并通过 props 中下发可传参的函数 实现子-父通信 */}\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NewChild</span> <span class=\"hljs-attr\">changeFatherText</span>=<span class=\"hljs-string\">{this.changeText}</span> /&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13041\">\n                      <strong data-nodeid=\"13278\">视图层验证</strong>\n                    </p>\n                    <p data-nodeid=\"13042\">\n                      编码完成之后，界面大致的结构如下图所示：\n                    </p>\n                    <p data-nodeid=\"13043\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-Om4CAaYYmAABgp6tGilY796.png\"\n                        alt=\"Drawing 11.png\"\n                        data-nodeid=\"13282\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13044\">\n                      由于整体结构稍微复杂了一些，这里我把 Father、Child 和\n                      NewChild 在图中的大致范围标一下：\n                    </p>\n                    <p data-nodeid=\"13045\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-Om4eAFvb7AACD10q8ddE601.png\"\n                        alt=\"Drawing 12.png\"\n                        data-nodeid=\"13286\"\n                      />\n                    </p>\n                    <ul data-nodeid=\"13046\">\n                      <li data-nodeid=\"13047\">\n                        <p data-nodeid=\"13048\">\n                          红色所圈范围为 Father 组件，它包括了 Child 和\n                          NewChild；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13049\">\n                        <p data-nodeid=\"13050\">\n                          灰色圈住的按钮是 NewChild\n                          组件的渲染结果，它可以触发数据的改变；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13051\">\n                        <p data-nodeid=\"13052\">\n                          蓝色圈住的文本是 Child\n                          组件的渲染结果，它负责感知和渲染数据。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13053\">\n                      现在我点击位于 NewChild 组件中的“点击更新 Child\n                      组件的文本”按钮，就可以看到 Child\n                      会跟着发生变化，如下图所示，进而验证方案的可行性。\n                    </p>\n                    <p data-nodeid=\"13054\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/60/F7/Ciqc1F-Om5GAagXzAAIiBlsRdIM293.png\"\n                        alt=\"Drawing 14.png\"\n                        data-nodeid=\"13293\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"13055\">\n                      为什么不推荐用 props 解决其他场景的需求\n                    </h4>\n                    <p data-nodeid=\"13056\">\n                      至此，我们给出了 props\n                      传参这种形式比较适合处理的三种场景。尽管这并不意味着其他场景不能用\n                      props 处理，但如果你试图用简单的 props\n                      传递完成更加复杂的通信需求，往往会得不偿失。这里我给你举一个比较极端的例子：\n                    </p>\n                    <p data-nodeid=\"13057\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/60/F8/Ciqc1F-Om5iAAUUhAABLimeJTao712.png\"\n                        alt=\"Drawing 16.png\"\n                        data-nodeid=\"13298\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13058\">\n                      如上图所示，可以看到这是一个典型的多层嵌套组件结构。A\n                      组件倘若想要和层层相隔的 E 组件实现通信，就必须把 props\n                      经过 B、C、D 一层一层地传递下去。在这个过程中，反反复复的\n                      props\n                      传递不仅会带来庞大的工作量和代码量，还会污染中间无辜的\n                      B、C、D 组件的属性结构。\n                    </p>\n                    <p data-nodeid=\"13059\">\n                      层层传递的优点是非常简单，用已有知识就能解决，但问题是会浪费很多代码，非常烦琐，中间作为桥梁的组件会引入很多不属于自己的属性。短期来看，写代码的人会很痛苦；长期来看，整个项目的维护成本都会变得非常高昂。因此，<strong\n                        data-nodeid=\"13305\"\n                        >层层传递 props 要不得</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"13060\">\n                      那有没有更加灵活的解决方案，能够帮我们处理“任意组件”之间的通信需求呢？答案是不仅有，而且姿势还很多。我先从最朴素的“发布-订阅”模式讲起。\n                    </p>\n                    <h3 data-nodeid=\"13061\">利用“发布-订阅”模式驱动数据流</h3>\n                    <p data-nodeid=\"13062\">\n                      “发布-订阅”模式可谓是解决通信类问题的“万金油”，在前端世界的应用非常广泛，比如：\n                    </p>\n                    <ul data-nodeid=\"13063\">\n                      <li data-nodeid=\"13064\">\n                        <p data-nodeid=\"13065\">\n                          前两年爆火的 socket.io\n                          模块，它就是一个典型的跨端发布-订阅模式的实现；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13066\">\n                        <p data-nodeid=\"13067\">\n                          在 Node.js 中，许多原生模块也是以 EventEmitter\n                          为基类实现的；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13068\">\n                        <p data-nodeid=\"13069\">\n                          不过大家最为熟知的，应该还是 Vue.js\n                          中作为常规操作被推而广之的“全局事件总线” EventBus。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13070\">\n                      这些应用之间虽然名字各不相同，但内核是一致的，也就是我们下面要讲到的“发布-订阅”模型。\n                    </p>\n                    <h4 data-nodeid=\"13071\">理解事件的发布-订阅机制</h4>\n                    <p data-nodeid=\"13072\">\n                      发布-订阅机制早期最广泛的应用，应该是在浏览器的 DOM\n                      事件中。 &nbsp;相信有过原生 JavaScript\n                      开发经验的同学，对下面这样的用法都不会陌生：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">target.addEventListener(type, listener, useCapture);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13074\">\n                      通过调用 addEventListener\n                      方法，我们可以创建一个事件监听器，这个动作就是“订阅”。比如我可以监听\n                      click（点击）事件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">el.addEventListener(<span class=\"hljs-string\">\"click\"</span>, func, <span class=\"hljs-keyword\">false</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13076\">\n                      这样一来，当 click\n                      事件被触发时，事件会被“发布”出去，进而触发监听这个事件的\n                      func 函数。这就是一个最简单的发布-订阅案例。\n                    </p>\n                    <p data-nodeid=\"13077\">\n                      使用发布-订阅模式的优点在于，<strong data-nodeid=\"13322\"\n                        >监听事件的位置和触发事件的位置是不受限的</strong\n                      >，就算相隔十万八千里，只要它们在同一个上下文里，就能够彼此感知。这个特性，太适合用来应对“任意组件通信”这种场景了。\n                    </p>\n                    <h4 data-nodeid=\"13078\">发布-订阅模型 API 设计思路</h4>\n                    <p data-nodeid=\"13079\">\n                      通过前面的讲解，不难看出发布-订阅模式中有两个关键的动作：<strong\n                        data-nodeid=\"13329\"\n                        >事件的监听（订阅）和事件的触发（发布）</strong\n                      >，这两个动作自然而然地对应着两个基本的 API 方法。\n                    </p>\n                    <ul data-nodeid=\"13080\">\n                      <li data-nodeid=\"13081\">\n                        <p data-nodeid=\"13082\">\n                          on()：负责注册事件的监听器，指定事件触发时的回调函数。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13083\">\n                        <p data-nodeid=\"13084\">\n                          emit()：负责触发事件，可以通过传参使其在触发的时候携带数据\n                          。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13085\">\n                      最后，只进不出总是不太合理的，我们还要考虑一个 off()\n                      方法，必要的时候用它来删除用不到的监听器：\n                    </p>\n                    <ul data-nodeid=\"13086\">\n                      <li data-nodeid=\"13087\">\n                        <p data-nodeid=\"13088\">off()：负责监听器的删除。</p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"13089\">发布-订阅模型编码实现</h4>\n                    <p data-nodeid=\"13090\">\n                      “发布-订阅”模式不仅在应用层面十分受欢迎，它更是面试官的心头好。在涉及设计模式的面试中，如果只允许出一道题，那么我相信大多数的面试官都会和我一样，会毫不犹豫地选择考察“发布-订阅模式的实现”。\n                      接下来我就手把手带你来做这道题，写出一个同时拥有 on、emit\n                      和 off 的 EventEmitter。\n                    </p>\n                    <p data-nodeid=\"13091\">\n                      在写代码之前，先要捋清楚思路。这里我把“实现\n                      EventEmitter”这个大问题，拆解为 3\n                      个具体的小问题，下面我们逐个来解决。\n                    </p>\n                    <ul data-nodeid=\"13092\">\n                      <li data-nodeid=\"13093\">\n                        <p data-nodeid=\"13094\">\n                          <strong data-nodeid=\"13340\"\n                            >问题一：事件和监听函数的对应关系如何处理？</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13095\">\n                      提到“对应关系”，应该联想到的是“映射”。在 JavaScript\n                      中，处理“映射”我们大部分情况下都是用对象来做的。所以说在全局我们需要设置一个对象，来存储事件和监听函数之间的关系：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">constructor() {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// eventMap 用来存储事件和监听函数之间的关系</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">this</span>.eventMap= {}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"13097\">\n                      <li data-nodeid=\"13098\">\n                        <p data-nodeid=\"13099\">\n                          <strong data-nodeid=\"13345\"\n                            >问题二：如何实现订阅？</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"16627\" class=\"\">\n                      所谓“订阅”，也就是注册事件监听函数的过程。这是一个“写”操作，具体来说就是把事件和对应的监听函数写入到\n                      eventMap 里面去：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// type 这里就代表事件的名称</span>\n</div></li><li><div class=\"code-word\">on(type, handler) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// hanlder 必须是一个函数，如果不是直接报错</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span>(!(handler <span class=\"hljs-keyword\">instanceof</span> Function)) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Error(<span class=\"hljs-string\">\"哥 你错了 请传一个函数\"</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 判断 type 事件对应的队列是否存在</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">this</span>.eventMap[type]) {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">// 若不存在，新建该队列</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.eventMap[type] = []\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 若存在，直接往队列里推入 handler</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">this</span>.eventMap[type].push(handler)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <ul data-nodeid=\"13102\">\n                      <li data-nodeid=\"13103\">\n                        <p data-nodeid=\"13104\">\n                          <strong data-nodeid=\"13350\"\n                            >问题三：如何实现发布？</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13105\">\n                      订阅操作是一个“写”操作，相应的，发布操作就是一个“读”操作。发布的本质是触发安装在某个事件上的监听函数，我们需要做的就是找到这个事件对应的监听函数队列，将队列中的\n                      handler 依次执行出队：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 别忘了我们前面说过触发时是可以携带数据的，params 就是数据的载体</span>\n</div></li><li><div class=\"code-word\">emit(type, params) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 假设该事件是有订阅的（对应的事件队列存在）</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.eventMap[type]) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 将事件队列里的 handler 依次执行出队</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.eventMap[type].forEach((handler, index)=&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 注意别忘了读取 params</span>\n</div></li><li><div class=\"code-word\">      handler(params)\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13107\">\n                      到这里，最最关键的 on 方法和 emit\n                      方法就实现完毕了。最后我们补充一个 off 方法：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">off(type, handler) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.eventMap[type]) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.eventMap[type].splice(<span class=\"hljs-keyword\">this</span>.eventMap[type].indexOf(handler)&gt;&gt;&gt;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13109\">\n                      接着把这些代码片段拼接进一个 class\n                      里面，一个核心功能完备的 EventEmitter 就完成啦：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">myEventEmitter</span> </span>{\n</div></li><li><div class=\"code-word\">  constructor() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// eventMap 用来存储事件和监听函数之间的关系</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.eventMap = {};\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// type 这里就代表事件的名称</span>\n</div></li><li><div class=\"code-word\">  on(type, handler) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// hanlder 必须是一个函数，如果不是直接报错</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!(handler <span class=\"hljs-keyword\">instanceof</span> Function)) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Error(<span class=\"hljs-string\">\"哥 你错了 请传一个函数\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 判断 type 事件对应的队列是否存在</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.eventMap[type]) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 若不存在，新建该队列</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.eventMap[type] = [];\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 若存在，直接往队列里推入 handler</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.eventMap[type].push(handler);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 别忘了我们前面说过触发时是可以携带数据的，params 就是数据的载体</span>\n</div></li><li><div class=\"code-word\">  emit(type, params) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 假设该事件是有订阅的（对应的事件队列存在）</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.eventMap[type]) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 将事件队列里的 handler 依次执行出队</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.eventMap[type].forEach((handler, index) =&gt; {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 注意别忘了读取 params</span>\n</div></li><li><div class=\"code-word\">        handler(params);\n</div></li><li><div class=\"code-word\">      });\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  off(type, handler) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.eventMap[type]) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.eventMap[type].splice(<span class=\"hljs-keyword\">this</span>.eventMap[type].indexOf(handler) &gt;&gt;&gt; <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13111\">\n                      下面我们对 myEventEmitter 进行一个简单的测试，创建一个\n                      myEvent 对象作为 myEventEmitter 的实例，然后针对名为\n                      “test” 的事件进行监听和触发：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 实例化 myEventEmitter</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> myEvent = <span class=\"hljs-keyword\">new</span> myEventEmitter();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 编写一个简单的 handler</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> testHandler = function (params) {\n</div></li><li><div class=\"code-word\">  console.log(\\`test事件被触发了，testHandler 接收到的入参是${params}\\`);\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 监听 test 事件</span>\n</div></li><li><div class=\"code-word\">myEvent.on(<span class=\"hljs-string\">\"test\"</span>, testHandler);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 在触发 test 事件的同时，传入希望 testHandler 感知的参数</span>\n</div></li><li><div class=\"code-word\">myEvent.emit(<span class=\"hljs-string\">\"test\"</span>, <span class=\"hljs-string\">\"newState\"</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13113\">\n                      以上代码会输出下面红色矩形框住的部分作为运行结果：\n                    </p>\n                    <p data-nodeid=\"13114\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/60/F8/Ciqc1F-Om7eAC75dAAMfTZMkn3A636.png\"\n                        alt=\"Drawing 17.png\"\n                        data-nodeid=\"13358\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13115\">\n                      由此可以看出，EventEmitter\n                      的实例已经具备发布-订阅的能力，执行结果符合预期。\n                    </p>\n                    <p data-nodeid=\"13116\">\n                      现在你可以试想一下，对于任意的两个组件 A 和\n                      B，假如我希望实现双方之间的通信，借助 EventEmitter\n                      来做就很简单了，以数据从 A 流向 B 为例。\n                    </p>\n                    <p data-nodeid=\"13117\">\n                      我们可以在 B 中编写一个handler（记得将这个 handler 的 this\n                      绑到 B 身上），在这个 handler 中进行以 B 为上下文的\n                      this.setState 操作，然后将这个 handler\n                      作为监听器与某个事件关联起来。比如这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 注意这个 myEvent 是提前实例化并挂载到全局的，此处不再重复示范实例化过程</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> globalEvent = <span class=\"hljs-built_in\">window</span>.myEvent\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里省略掉其他业务逻辑</span>\n</div></li><li><div class=\"code-word\">  state = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">newParams</span>: <span class=\"hljs-string\">\"\"</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  handler = <span class=\"hljs-function\">(<span class=\"hljs-params\">params</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState({\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">newParams</span>: params\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  bindHandler = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    globalEvent.on(<span class=\"hljs-string\">\"someEvent\"</span>, <span class=\"hljs-keyword\">this</span>.handler);\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.bindHandler}</span>&gt;</span>点我监听A的动作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>A传入的内容是[{this.state.newParams}]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13119\">\n                      接下来在 A\n                      组件中，只需要直接触发对应的事件，然后将希望携带给 B\n                      的数据作为入参传递给 emit 方法即可。代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里省略掉其他业务逻辑</span>\n</div></li><li><div class=\"code-word\">  state = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">infoToB</span>: <span class=\"hljs-string\">\"哈哈哈哈我来自A\"</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  reportToB = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 这里的 infoToB 表示 A 自身状态中需要让 B 感知的那部分数据</span>\n</div></li><li><div class=\"code-word\">    globalEvent.emit(<span class=\"hljs-string\">\"someEvent\"</span>, <span class=\"hljs-keyword\">this</span>.state.infoToB);\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.reportToB}</span>&gt;</span>点我把state传递给B<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13121\">\n                      如此一来，便能够实现 A 到 B 的通信了。这里我将 A 与 B\n                      编排为兄弟组件，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"App\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">B</span> /&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">A</span> /&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13123\">\n                      你也可以在自己的 Demo 里将 A 和 B\n                      定义为更加复杂的嵌套关系，这里我给出的这个 Demo\n                      运行起来会渲染出这样的界面，如下图所示：\n                    </p>\n                    <p data-nodeid=\"13124\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/61/03/CgqCHl-Om8uAMxXIAAA9zJmLTSg441.png\"\n                        alt=\"Drawing 18.png\"\n                        data-nodeid=\"13367\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13125\" class=\"\">\n                      依次点击顶部和底部的按钮，就可以实现对 someEvent\n                      这个事件的监听和触发，进而观察到中间这行文本的改变，如下图所示：\n                    </p>\n                    <p data-nodeid=\"13126\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/60/F8/Ciqc1F-Om9CAUv1uAABH1-iBy-U054.png\"\n                        alt=\"Drawing 19.png\"\n                        data-nodeid=\"13371\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13127\">\n                      由此我们便可以验证到发布-订阅模式驱动 React\n                      数据流的可行性。为了强化你对过程的理解，我将 A 与 B\n                      的通信过程梳理进了一张图里，供你参考：\n                    </p>\n                    <p data-nodeid=\"13128\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/6E/B0/Ciqc1F-zbFSAa6tMAAC2rDdKPpI299.png\"\n                        alt=\"Lark20201117-141619.png\"\n                        data-nodeid=\"13375\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"13129\">总结</h3>\n                    <p data-nodeid=\"13130\">\n                      本课时，我们对 React\n                      数据流管理方案中的前两个大方向进行了学习：\n                    </p>\n                    <ul data-nodeid=\"13131\">\n                      <li data-nodeid=\"13132\">\n                        <p data-nodeid=\"13133\">\n                          使用基于 Props 的单向数据流串联父子、兄弟组件；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"13134\">\n                        <p data-nodeid=\"13135\">\n                          利用“发布-订阅”模式驱动 React 数据在任意组件间流动。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"13136\">\n                      这两个方向下的解决方案，单纯从理解上来看，难度都不高。<strong\n                        data-nodeid=\"13385\"\n                        >你需要把重点放在对编码的实现和理解上，尤其是基于“发布-订阅”模式实现的\n                        EventEmitter，多年来一直是面试的大热点，务必要好好把握</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"13137\" class=\"\">\n                      这一课时就讲到这里了，下个课时，我们将继续站在“数据在\n                      React 组件中的流动”这个视角，对 React 中的 Context\n                      API，以及第三方数据流管理框架中的“佼佼者” Redux\n                      进行分析，相信一定能够为你带来不一样的理解和收获。\n                    </p>\n            "}