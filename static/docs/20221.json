{"title":"20 | 如何进行网关选型？","context":"\n                    <p data-nodeid=\"38522\">\n                      在上一课时我们介绍了网关的基本原理，并动手实现了一个 Go\n                      简易网关。那本课时我们就接着来探讨微服务网关的选型。\n                    </p>\n\n                    <p data-nodeid=\"37371\">\n                      业界有很多流行的 API 网关，比如开源的就有 Nginx、Netflix\n                      Zuul、Kong 等。Kong 有商业版，与此类似的商业版网关还有\n                      GoKu API Gateway 和 Tyk 等。\n                    </p>\n                    <ul data-nodeid=\"37372\">\n                      <li data-nodeid=\"37373\">\n                        <p data-nodeid=\"37374\">\n                          GoKu API Gateway 是由国内公司Eolinker 使用 Go\n                          语言研发的，拥有社区版和商业版，包含 API Gateway 和\n                          Dashboard\n                          两部分。其中，社区版本包含大量基础功能，可以满足中型企业和产品的使用；商业版本则包含更多扩展，比较适合大型软件和大型组织使用。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"37375\">\n                        <p data-nodeid=\"37376\">\n                          Tyk 由国外的 TykTechnologies 公司研发，也是基于 Go\n                          语言的。但Tyk\n                          一切均导向收费版本，免费版本第一次申请仅有一年的使用授权。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"37377\">\n                      看到这里，估计你，包括很多开发人员，肯定是希望基于开源组件来构建自己的网关，而不是去使用付费的网关服务。所以，下面我们就来介绍Nginx、Zuul\n                      和 Kong 这几种常用的开源API 网关组件的相关特性。\n                    </p>\n                    <h3 data-nodeid=\"37378\">Nginx</h3>\n                    <p data-nodeid=\"37379\">\n                      Nginx 是于 2000 年初开发的，初衷是为解决服务端经典的C10K\n                      问题，即在给定的内存大小内处理 10000\n                      个以上的同时连接，在这个过程中，其他 Web\n                      服务器的每个连接都需要占用内存，因此它们会耗尽物理内存，并在成千上万的用户同时访问一个站点时响应慢或者崩溃。Nginx\n                      采用的是多进程事件模型、异步非阻塞的方式处理请求，因此可以同时处理成千上万个请求，并优雅地扩展到更多用户。\n                    </p>\n                    <p data-nodeid=\"39986\">\n                      在工作方式上，Nginx 有<strong data-nodeid=\"39997\"\n                        >单工作进程</strong\n                      >和<strong data-nodeid=\"39998\">多工作进程</strong\n                      >两种模式。默认情况下，Nginx\n                      启动后，在后台以多工作进程模式运行，Nginx 的后台进程由一个\n                      Master 进程和多个 Worker 进程组成。当然，我们也可以通过对\n                      Nginx 进行配置，取消 Master 进程的运行，使得 Nginx\n                      以单进程方式运行。\n                    </p>\n                    <p data-nodeid=\"63050\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/4A/81/Ciqc1F9R392AYh8gAAC7fTtAhD4549.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"63054\"\n                      />\n                    </p>\n                    <div data-nodeid=\"67167\" class=\"\">\n                      <p style=\"text-align: center\">Nginx 工作模型图</p>\n                    </div>\n\n                    <p data-nodeid=\"37384\">\n                      Nginx 工作模型图如上图所示，Master 进程协调 Worker\n                      进程，是通过进程间通信实现交互。下面我们具体介绍 Nginx\n                      中的Master 进程和 Worker 进程：\n                    </p>\n                    <ul data-nodeid=\"43302\">\n                      <li data-nodeid=\"43303\">\n                        <p data-nodeid=\"43304\">\n                          <strong data-nodeid=\"43311\">Master进程，</strong>\n                          管理进程，用来协调 Worker 进程。Master 接收到信号，向\n                          Worker 进程发送对应的信号。除此之外，Master\n                          进程还会监控 Worker 进程的运行状态，当 Worker\n                          进程发生异常退出时，就会重启新的 Worker 进程。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"43305\">\n                        <p data-nodeid=\"43306\" class=\"\">\n                          <strong data-nodeid=\"43316\">Worker 进程，</strong>\n                          从字面就可以知道，这是实际工作的进程。Worker\n                          进程主要处理基本的网络事件，多个 Worker\n                          进程之间相互独立对等，客户端请求到来时，这些进程同等竞争来自客户端的请求，最终由其中一个\n                          Worker 进程来处理这个请求。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"37390\">\n                      当&nbsp;Nginx&nbsp;标准模块和配置不能灵活地适应系统要求时，就可以考虑使用&nbsp;Lua&nbsp;扩展和定制&nbsp;Nginx&nbsp;服务。Nginx\n                      中可以嵌入 Lua 脚本，通过将定制的 Lua 脚本部署到\n                      Nginx，使得 Nginx 类似于一个 Web\n                      容器。我们在开发的时候一般使用 OpenResty\n                      来搭建开发环境，因为\n                      OpenResty&nbsp;集成了优秀的&nbsp;Lua&nbsp;库、第三方模块，可以方便地搭建能够处理超高并发、扩展性极高的\n                      Web 服务。这样开发者就只需要安装 OpenResty，不需要了解\n                      Nginx 核心和写复杂的 C/C++ 模块就可以使用 Lua 语言进行 Web\n                      应用开发。\n                    </p>\n                    <p data-nodeid=\"37391\">\n                      Nginx 中有多个模块，这些模块根据其功能可以分为如下几种：\n                    </p>\n                    <ul data-nodeid=\"37392\">\n                      <li data-nodeid=\"37393\">\n                        <p data-nodeid=\"37394\">\n                          <strong data-nodeid=\"37585\">事件模块</strong>。有\n                          Ngx_Events_Module、Ngx_Event_Core_Module 和\n                          Ngx_Epoll_Module\n                          等模块。事件模块提供单独的事件处理机制的框架，并提供了对各个具体事件的处理。至于使用何种\n                          Nginx 事件处理模块，则由具体的 OS 和编译选项决定。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"37395\">\n                        <p data-nodeid=\"37396\">\n                          <strong data-nodeid=\"37596\">解析模块</strong\n                          >。接收客户端请求，并响应内容，比如返回静态页面的模块\n                          Ngx_Http_Static_Module，将对应的静态文件作为响应返回给客户端。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"37397\">\n                        <p data-nodeid=\"37398\">\n                          <strong data-nodeid=\"37601\">输出过滤模块</strong\n                          >。对输出的内容进行处理，Nginx\n                          中可以对响应进行修改。例如，常见的有增加 Header\n                          或者移除\n                          Header，这些头部可能是服务端内部的标识，因此需要我们使用输出过滤模块对响应头进行处理。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"37399\">\n                        <p data-nodeid=\"37400\">\n                          <strong data-nodeid=\"37606\">Upstream 模块</strong\n                          >。一种特殊的解析模块，反向代理在此模块实现，Nginx\n                          收到请求后根据配置文件，将请求转发到对应的实际后端服务器上，并返回响应给客户端。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"37401\">\n                      Upstream 模块提供的反向代理功能，使得 Nginx\n                      具备了数据转发功能，为 Nginx\n                      增强横向处理能力，摆脱了服务端单机处理的限制，从而使 Nginx\n                      具备了软件级别的整合、拆分功能。使用 Nginx\n                      的反向代理和均衡可实现负载均衡及高可用，除此之外还需要我们解决自注册和网关本身的扩展性问题。\n                    </p>\n                    <h3 data-nodeid=\"37402\">Netflix Zuul</h3>\n                    <p data-nodeid=\"49183\" class=\"\">\n                      Zuul 是一款由 Netflix 开源的、流行的微服务网关组件。Java\n                      中的 Spring Cloud 框架整合了 Zuul ，因此 Zuul 与\n                      Consul、Ribbon、Hystrix 和 Eureka\n                      等组件可以无缝集成，非常方便。<strong data-nodeid=\"49189\"\n                        >对于使用 Spring Cloud\n                        生态构建微服务体系的公司来说，选择 Zuul\n                        作为微服务网关是个不错的选择</strong\n                      >。\n                    </p>\n\n                    <p data-nodeid=\"50616\">\n                      Zuul 的核心是一系列的过滤器，这些过滤器可以完成以下功能：\n                    </p>\n                    <p data-nodeid=\"63515\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/4A/81/Ciqc1F9R4AyAXT7kAABzyXDCdrw467.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"63519\"\n                      />\n                    </p>\n                    <div data-nodeid=\"66714\" class=\"\">\n                      <p style=\"text-align: center\">Zuul 的功能特性图</p>\n                    </div>\n\n                    <p data-nodeid=\"37408\">\n                      上图中的大部分功能，你应该已经都很熟悉了，这里我们就着重讲解下静态响应处理和多区域弹性这两个功能。\n                    </p>\n                    <ul data-nodeid=\"37409\">\n                      <li data-nodeid=\"37410\">\n                        <p data-nodeid=\"37411\">\n                          <strong data-nodeid=\"37632\">静态响应处理</strong\n                          >：对于高并发场景下的流量压力，会存在拒绝策略，因此可以直接在服务端返回部分响应，避免转发，减少内部集群的压力。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"37412\">\n                        <p data-nodeid=\"37413\">\n                          <strong data-nodeid=\"37637\">多区域弹性</strong\n                          >：这个是对 AWS 的支持，服务可能部署在多个 AWS\n                          Region，多区域弹性使得转发的实际服务能够靠近用户所在的地区。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"37414\">\n                      上面描述的一些特性是 Nginx\n                      不具备的，这是因为Zuul设计之初的目标就不仅仅是作为类似于\n                      Nginx 的反向代理，而是意在解决云环境下的种种问题。Zuul\n                      目前有两个大的版本：Zuul1 和 Zuul2。\n                    </p>\n                    <ul data-nodeid=\"53470\">\n                      <li data-nodeid=\"53471\">\n                        <p data-nodeid=\"53472\">\n                          Zuul1 的设计比较简单，本质上就是一个同步\n                          Servlet，如图所示。Spring Cloud 中集成的 Zuul 版本，\n                          采用的是 Tomcat 容器，使用的是传统的 Servlet IO\n                          处理模型。Zuul\n                          的多线程阻塞模型，即一个线程处理一次连接请求，这种方式在内部延迟严重、设备故障较多情况下会引起存活的连接增多和线程增加的情况发生。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"63978\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/4A/81/Ciqc1F9R4COANCgcAACDJ9W7E_8013.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"63982\"\n                      />\n                    </p>\n                    <div data-nodeid=\"66261\" class=\"\">\n                      <p style=\"text-align: center\">Zuul1 的工作原理图</p>\n                    </div>\n\n                    <ul data-nodeid=\"57006\">\n                      <li data-nodeid=\"57007\">\n                        <p data-nodeid=\"57008\">\n                          Netflix 发布的 Zuul2\n                          有重大的更新，采用异步非阻塞的方式处理请求，每个 CPU\n                          核对应一个线程，用来处理所有的请求和响应。请求和响应的生命周期是通过事件和回调来处理的，这种方式减少了线程数量，因此开销较小。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"64439\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/4A/82/Ciqc1F9R4DuAZIntAAB3AwAig7w452.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"64443\"\n                      />\n                    </p>\n                    <div data-nodeid=\"65808\" class=\"\">\n                      <p style=\"text-align: center\">Zuul2 的工作原理图</p>\n                    </div>\n\n                    <p data-nodeid=\"37426\">\n                      非阻塞模式可以接受的连接数大大增加，这种模式下，请求到达则进入处理队列，这个队列的容量可以设得很大。在请求超时之前，队列中的请求都会被依次处理。又由于数据被存储在同一个\n                      CPU 里，Zuul2可以复用 CPU\n                      级别的缓存，这种方式较Zuul1线程切换来说轻量级很多，消耗会较小。\n                    </p>\n                    <h3 data-nodeid=\"37427\">Kong</h3>\n                    <p data-nodeid=\"58410\">\n                      Kong 由 Mashape\n                      公司开源，是一款高性能高可用的微服务网关，是基于\n                      OpenResty（Nginx + Lua模块）编写的高可用服务网关，由于\n                      Kong 是基于 Nginx 的，因此可以很轻松地水平扩展 Kong\n                      服务器。通过负载均衡把请求转发给各个服务端实例，来应对大批量的网络请求。\n                    </p>\n                    <p data-nodeid=\"64898\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/4A/8D/CgqCHl9R4EOAWxLXAAC95rLtc-U861.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"64902\"\n                      />\n                    </p>\n                    <div data-nodeid=\"65355\" class=\"\">\n                      <p style=\"text-align: center\">Kong 的基本运行图</p>\n                    </div>\n\n                    <p data-nodeid=\"37431\">\n                      Kong 的基本运行情况如上图所示，客户端请求到达 Kong\n                      网关之后，经过一系列插件的处理之后，才会将请求转发给指定的后端服务。Kong\n                      主要包括 Kong Server、Apache Cassandra/PostgreSQL 和 Kong\n                      Dashboard三个组件。\n                    </p>\n                    <ul data-nodeid=\"37432\">\n                      <li data-nodeid=\"37433\">\n                        <p data-nodeid=\"37434\">\n                          Kong Server：基于Nginx的服务器，用来接收 API 请求。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"37435\">\n                        <p data-nodeid=\"37436\">\n                          Apache Cassandra/PostgreSQL：用来存储操作数据。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"37437\">\n                        <p data-nodeid=\"37438\">\n                          KongDashboard：官方提供的 Kong\n                          图形化管理工具，如果不使用图形化界面的话，也可以直接使用\n                          Restful 方式管理 Admin API。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"37439\">\n                      这三部分组成了完整的 Kong 网关。Kong 本身也是基于 Nginx\n                      的，所以在性能和稳定性上都没有问题。Kong\n                      网关具有以下的特性：\n                    </p>\n                    <ul data-nodeid=\"59118\">\n                      <li data-nodeid=\"59119\">\n                        <p data-nodeid=\"59120\">\n                          <strong data-nodeid=\"59129\">可扩展性</strong\n                          >。通过简单添加更多的服务器，可以轻松进行横向扩展，这意味着平台可以在一个较低负载的情况下处理任何请求。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"59121\">\n                        <p data-nodeid=\"59122\">\n                          <strong data-nodeid=\"59134\">模块化</strong>。这是 Kong\n                          的一大特性，可以通过添加新的插件进行扩展，且插件可定制开发，可以通过\n                          Kong Dashboard 或者 RESTful Admin API 进行配置。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"59123\">\n                        <p data-nodeid=\"59124\" class=\"\">\n                          <strong data-nodeid=\"59139\"\n                            >可在任何基础架构上运行</strong\n                          >。可以在云环境或内部网络环境中部署\n                          Kong，对云原生环境有着天然地支持。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"37447\">\n                      基于 Kong 插件机制，使用 Lua\n                      脚本开发，可以便捷地进行功能定制，这些插件（可能是 0\n                      个或者 N 个）在 API 请求响应循环的生命周期中被执行。Kong\n                      中提供的基础插件包括：HTTP 基本认证、Key\n                      Authentication、CORS（Cross-Origin Resource\n                      Sharing，跨域资源共享）、OAuth2.0\n                      认证、文件日志、网关限流、请求的路由转发和服务监控等。我们会在下面的课时重点介绍这其中的几款插件。\n                    </p>\n                    <h3 data-nodeid=\"37448\">网关对比</h3>\n                    <p data-nodeid=\"62817\" class=\"\">\n                      在前面我们已经简要介绍了 Nginx、Zuul 和 Kong 这三种 API\n                      网关组件的功能和特性，为便于你更好地理解，在这里我专门梳理出了这三种\n                      API 网关的对比表格，如下所示：\n                    </p>\n\n                    <p data-nodeid=\"61376\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/4A/82/Ciqc1F9R4GCAPyX4AAFMzQx0Fy8655.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"61433\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"37514\" class=\"\">\n                      总体来说，Zuul\n                      复杂度较低，上手简单，可以自定义开发，但是高并发场景下的性能相对较差；Nginx\n                      性能经受得住考验，配合 Lua\n                      可以引入各种插件，但是功能性相对较弱，需要开发者自身去完善很多功能；Kong\n                      基于 Nginx、OpenResty 和\n                      Lua，如果对性能要求高，需要对外开放的场景，建议考虑使用\n                      Kong。\n                    </p>\n                    <h3 data-nodeid=\"37515\">小结</h3>\n                    <p data-nodeid=\"37516\">\n                      微服务网关的选型，是这两年来很多转型微服务开发的工程师和中间件工程师关心的一个问题，因此本课时我们就专门介绍了几种业界流行的微服务网关，并做了简要对比。\n                    </p>\n                    <p data-nodeid=\"37517\">\n                      其实当考虑要选用哪一款微服务网关组件时，我们首先需要清晰网关的引入能够给目前的业务现状带来什么，以及\n                      API\n                      网关的定位，考虑的技术和非技术关注点是什么；随后才是，基于场景和目标，对比选择更加适合当前业务的微服务网关。\n                    </p>\n                    <p data-nodeid=\"37518\">\n                      最后，你觉得微服务网关的选型需要考虑哪些因素，你使用的是哪一款微服务网关？欢迎你在留言区和我分享。\n                    </p>\n            "}