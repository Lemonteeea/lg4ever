{"title":"01 | 从计数开始，程序员必知必会的数制转换法","context":"\n                    <p data-nodeid=\"20778\" class=\"\">\n                      以前看过一个幽默段子，老师说：“世界上有 10\n                      种人，一种懂二进制，另一种不懂二进制。”小琳问：“那另外 8\n                      种人呢？” 显然小琳同学是不懂二进制的那类人。二进制的\n                      10，代表的是十进制的\n                      2。替换到老师的话中就是，世界上有两种人，一种懂二进制，另一种不懂二进制。\n                    </p>\n\n                    <p data-nodeid=\"20279\">\n                      当我们还是个孩童时，幼儿园的阿姨便用火柴棍教我们如何数数。这是最早期的数学教育，这也是在某个数制下的计数问题。\n                    </p>\n                    <p data-nodeid=\"20280\">\n                      作为第一节课，我还是想和你回归最基本的“数制转换”主题。我将以图文结合的方式，与你一起回顾温习数制，详解不同数制之间的巧妙联系，并重新思考数制与编程、计算机的关联。例如，如何利用二进制的位运算，对一个查找问题的代码进行优化等内容。\n                    </p>\n                    <h3 data-nodeid=\"20281\">数制</h3>\n                    <p data-nodeid=\"20282\">\n                      <strong data-nodeid=\"20425\"\n                        >数制是一种计算数量大小的制度</strong\n                      >，也是计数法。用大白话来说，<strong data-nodeid=\"20426\"\n                        >就是数数的方法</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"20283\">\n                      数制中，最重要的因素是<strong data-nodeid=\"20432\"\n                        >基数</strong\n                      >。假设我们设置基数为 10\n                      来数数，那就是在用十进制计数法；如果设置基数为\n                      2，就是在用二进制计数法。\n                    </p>\n                    <p data-nodeid=\"20284\">\n                      不同的数制中，使用最广泛的就是十进制，这与人类有 10\n                      个手指头是密不可分的。人类在学习计数和四则运算时，会通过手指头辅助计算。\n                    </p>\n                    <ul data-nodeid=\"20285\">\n                      <li data-nodeid=\"20286\">\n                        <p data-nodeid=\"20287\">\n                          在我国的古代，也曾经使用过十六进制。例如，成语半斤八两的含义是彼此不相上下，实力相当。即半斤就是\n                          8 两，1 斤就是 16 两。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"20288\">\n                        <p data-nodeid=\"20289\">\n                          在时间的计数场景时，我们也用过二十四进制和六十进制。例如，1\n                          天等于 24 小时，1 小时等于 60 分钟，1 分钟等于 60 秒。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"20290\">不同数制的表达</h3>\n                    <p data-nodeid=\"20291\">\n                      有了不同的数制，就需要对数制下的数字进行区分，否则就会造成混淆。例如，象征考试得了满分的\n                      100，在十进制下依旧是 100；而在二进制下，它就是十进制下的\n                      4；在八进制，则表示十进制下的\n                      64；在十六进制，则表示十进制下的 256。\n                    </p>\n                    <blockquote data-nodeid=\"20292\">\n                      <p data-nodeid=\"20293\">\n                        至于为什么如此计算转换，下文的数制转换方法会详细讲解。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"20294\">\n                      所以如果对数字不加以说明，你会发现很难判断这到底是哪个数制下的数字，毕竟同一数字在不同数制下其意义是完全不同的。为了避免混淆，我们对不同数制下的数字做了区分。\n                    </p>\n                    <p data-nodeid=\"20295\">\n                      十进制使用的数字符号是\n                      [0,1,2,3,4,5,6,7,8,9]；对于二进制和八进制，它们仍然沿用十进制的数字符号。在十六进制中，由于数字符号不够用，这就需要额外补充。一般用\n                      [A,B,C,D,E,F]（一般不会特别区分字母的大小写），分别代表十进制下的\n                      [10,11,12,13,14,15]。\n                    </p>\n                    <ul data-nodeid=\"20296\">\n                      <li data-nodeid=\"20297\">\n                        <p data-nodeid=\"20298\">\n                          一般而言，没有额外说明的数字都是十进制下的数字；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"20299\">\n                        <p data-nodeid=\"20300\">\n                          表示二进制时，会用 0b 作为数字的前缀；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"20301\">\n                        <p data-nodeid=\"20302\">\n                          表示八进制时，会用 0o 或者 0 作为数字的前缀；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"20303\">\n                        <p data-nodeid=\"20304\">\n                          表示十六进制时，会用 0x 作为数字的前缀。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"20305\">\n                      这里 b、o、x 三个英文字母的选择均来自数制的英文单词。\n                    </p>\n                    <p data-nodeid=\"20306\">\n                      综上，我们对这几个数制的信息整理如下表：\n                    </p>\n                    <p data-nodeid=\"20307\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/74/CgqCHl-WYACATr-VAAC40XoQFZU944.png\"\n                        alt=\"1.png\"\n                        data-nodeid=\"20461\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"20308\">数制转换的方法</h3>\n                    <p data-nodeid=\"20309\">\n                      人们在使用数制进行计算时，都习惯性地把原问题映射到十进制中；计算完成后，再映射回去。这里就牵涉数制的转换啦。\n                    </p>\n                    <p data-nodeid=\"20310\">\n                      我举一个生活中最常见的数制转换的例子。\n                    </p>\n                    <blockquote data-nodeid=\"20311\">\n                      <p data-nodeid=\"20312\">\n                        例如，上午 8:40 开始考试，考试时长是 40\n                        分钟，问考试结束的时间是多少？\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"20313\">\n                      计算过程是：考试时长的<strong data-nodeid=\"20475\"\n                        >40 分钟</strong\n                      >加上 8 点过 40 分的<strong data-nodeid=\"20476\"\n                        >40 分钟</strong\n                      >就是 80 分钟，也即是 1 小时 20 分钟，再加上 8\n                      点本身，结束时间就是上午 9:20。\n                    </p>\n                    <p data-nodeid=\"20314\">\n                      “40分钟+40分钟=80分钟”就是十进制的算术过程，可见为了完成其他数制的运算，我们依旧更喜欢用十进制做桥梁，毕竟我们对十进制的运算是最熟悉的。\n                    </p>\n                    <h4 data-nodeid=\"20315\">1. 换基法（换向十进制）</h4>\n                    <p data-nodeid=\"20316\">\n                      我们给出数制转换的定量方法，也就是对于任意一个基数 N\n                      进制下的数字\n                      X，它转换为十进制的方法。如下图的公式所示：原进制若是 N\n                      进制，转换时的基数便取 N。例如，将二进制的 X\n                      转化为十进制时，运算时的转换基数便取为 2。\n                    </p>\n                    <p data-nodeid=\"20317\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/69/Ciqc1F-WYCCAOCMMAACEX2a1vNU222.png\"\n                        alt=\"2.png\"\n                        data-nodeid=\"20484\"\n                      />\n                    </p>\n                    <ul data-nodeid=\"20318\">\n                      <li data-nodeid=\"20319\">\n                        <p data-nodeid=\"20320\">\n                          我们举个例子，十进制下的 2020。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"20321\">\n                      它是十进制，所以我们基数便取 10；2020有 4\n                      位数，根据上图公式，我们分别取(4-1)次方、(4-2)次方、(4-3)次方、(4-4)次方，再分别与每位数相乘，再相加取和。\n                    </p>\n                    <p data-nodeid=\"20322\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/69/Ciqc1F-WYCiAGzKgAABcMIWYJfA894.png\"\n                        alt=\"3.png\"\n                        data-nodeid=\"20489\"\n                      />\n                    </p>\n                    <ul data-nodeid=\"20323\">\n                      <li data-nodeid=\"20324\">\n                        <p data-nodeid=\"20325\">\n                          再举个例子，二进制下的 10110，利用换基法转换为十进制。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"20326\">\n                      它原是二进制，所以我们基数便取 2；10110 有 5\n                      位数，根据上图公式，我们分别取(5-1)次方、(5-2)次方、(5-3)次方、(5-4)次方、(5-5)次方，再分别与每位数相乘，再相加取和。\n                    </p>\n                    <p data-nodeid=\"20327\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/74/CgqCHl-WYDWAFnchAABhzdyMebE350.png\"\n                        alt=\"4.png\"\n                        data-nodeid=\"20494\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"20328\">\n                      2. 除余法（十进制向其他进制转换）\n                    </h4>\n                    <p data-nodeid=\"20329\">\n                      转向的目标进制为 N 进制，则以 N\n                      为除数不断地做除法，将最后的商和之前的余数<strong\n                        data-nodeid=\"20503\"\n                        >逆序</strong\n                      >串联在一起，就是最终的结果。\n                    </p>\n                    <p data-nodeid=\"20330\">\n                      例如，十进制的 19 转换为二进制的过程如下图所示：\n                    </p>\n                    <p data-nodeid=\"20331\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/74/CgqCHl-WYEKAWp8MAABzhu_bTgE812.png\"\n                        alt=\"5.png\"\n                        data-nodeid=\"20507\"\n                      />\n                    </p>\n                    <p data-nodeid=\"20332\">\n                      用 19 对 2 做除法得到余数 1，再用商对 2 做除法得到余数\n                      1，再用商对 2 做除法得到余数 0...直到商为 1\n                      结束。最终，用最后的商（也就是1），和过程中所有的余数<strong\n                        data-nodeid=\"20513\"\n                        >逆序</strong\n                      >串联在一起，就是最终的结果 10011。\n                    </p>\n                    <p data-nodeid=\"20333\">\n                      值得一提的是，除余法除了适用于十进制向二进制的转换，也<strong\n                        data-nodeid=\"20519\"\n                        >适用于十进制向任何数制的转换</strong\n                      >。例如，用除余法将十进制的\n                      100，转换为八进制和十六进制的计算过程如下，得到结果分别是\n                      0144 和 0x64。\n                    </p>\n                    <p data-nodeid=\"20334\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/69/Ciqc1F-WYEqAI9leAABAGGC65Co725.png\"\n                        alt=\"6.png\"\n                        data-nodeid=\"20522\"\n                      />\n                    </p>\n                    <p data-nodeid=\"20335\">\n                      我们可以给出个简单的证明，根据换基法我们知道某个数制 N\n                      下的数字的十进制表示为：\n                    </p>\n                    <p data-nodeid=\"20336\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/69/Ciqc1F-WYFOAS0s2AABTeUEt0AY493.png\"\n                        alt=\"7.png\"\n                        data-nodeid=\"20526\"\n                      />\n                    </p>\n                    <p data-nodeid=\"20337\">\n                      其中，Xm、Xm-1、...、X1 分别为数字 X 在 N\n                      进制下的每一位数字，也是我们要求解的目标。接着，我们可以计算\n                      X 除以 N。\n                    </p>\n                    <p data-nodeid=\"20338\">\n                      这样可以得到，当我们第一次对 N 做除法时，就可以得到商为 N\n                      进制下的\n                      X<sub>m</sub>X<sub>m-1</sub>X<sub>m-2</sub>...X<sub>2</sub>，余数就是\n                      X<sub>1</sub>，即：<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/64/CF/CgqCHl-ZLnKAYGn9AACGBxBvaeQ751.png\"\n                        alt=\"WechatIMG237.png\"\n                        data-nodeid=\"20552\"\n                      /><br />\n                      那么第一次除以 N，是如何得到商为 N 进制下的\n                      X<sub>m</sub>X<sub>m-1</sub>X<sub>m-2</sub>...X<sub>2</sub>，余数就是\n                      X<sub>1</sub> 的呢？你可以通过下图这个 16 进制下的 5321\n                      这个例子理解。<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/65/11/Ciqc1F-aLESAM0L2AAITpDWjzuk862.png\"\n                        alt=\"WechatIMG259.png\"\n                        data-nodeid=\"20578\"\n                      /><br />\n                      这里以 16 进制下的 5321\n                      为例，可以更好地理解这一过程。如果不带入具体数制下的数字，你也可以通过公式推导出来，只是不那么容易理解，不过你自己也可以尝试。\n                    </p>\n                    <p data-nodeid=\"20339\">\n                      接着同理，我们再用上一步的商\n                      X<sub>m</sub>X<sub>m-1</sub>X<sub>m-2</sub>...X<sub\n                        >2</sub\n                      >\n                      重复对 N 做除法的过程，就会得到新的商为 N 进制下的\n                      X<sub>m</sub>X<sub>m-1</sub>X<sub>m-2</sub>...X<sub\n                        >3</sub\n                      >\n                      ，余数为 X<sub>2</sub>\n                      。再同理，重复上面的过程，你会发现得到的余数分别是\n                      X<sub>1</sub>X<sub>2</sub>X<sub>3</sub>...X<sub>m</sub>。\n                    </p>\n                    <p data-nodeid=\"20340\">\n                      最后，我们把所有的余数做个逆序，就得到了 N 进制下的 X\n                      的每一位，最终就能得到\n                      X<sub>m</sub>X<sub>m-1</sub>X<sub>m-2</sub>...X<sub\n                        >1</sub\n                      >\n                      了。\n                    </p>\n                    <h4 data-nodeid=\"20341\">3. 按位拆分法和按位合并法</h4>\n                    <p data-nodeid=\"20342\">\n                      对于八进制和二进制之间的转换，你可以利用十进制做个跳板。\n                    </p>\n                    <p data-nodeid=\"20343\">\n                      <strong data-nodeid=\"20658\"\n                        >除此之外，还有一个简单的按位拆分法，可以将八进制转为二进制。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"21778\" class=\"\">\n                      你只需要把原来八进制中的每个数字符号，直接拆分为\n                      <strong data-nodeid=\"21788\">3 位的二进制</strong\n                      >数字符号（必须保证是 3 位），再按<strong\n                        data-nodeid=\"21789\"\n                        >顺序</strong\n                      >串联起来，就是最终结果。\n                    </p>\n\n                    <p data-nodeid=\"20345\">\n                      我们以八进制下的 023 为例进行讲解：\n                    </p>\n                    <ul data-nodeid=\"20346\">\n                      <li data-nodeid=\"20347\">\n                        <p data-nodeid=\"20348\">\n                          由于十进制的 2 的二进制表示是 010；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"20349\">\n                        <p data-nodeid=\"20350\">\n                          十进制的 3 的二进制表示是 011；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"20351\">\n                        <p data-nodeid=\"20352\">\n                          最后，别忘加上二进制的符号 0b，并去掉首位 0。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"20353\">\n                      则八进制的 023 的二进制表示就是 0b10011，如下图：\n                    </p>\n                    <p data-nodeid=\"20354\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/75/CgqCHl-WYbSARzuZAABfRNDl43E120.png\"\n                        alt=\"9.png\"\n                        data-nodeid=\"20677\"\n                      />\n                    </p>\n                    <p data-nodeid=\"20355\">\n                      <strong data-nodeid=\"20681\"\n                        >同理，二进制转换为八进制，可以采用每 3\n                        位合并的按位合并法。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"20356\">\n                      如下图，二进制的 0b10011 转换为八进制，则<strong\n                        data-nodeid=\"20687\"\n                        >从后往前</strong\n                      >每 3 位合并：\n                    </p>\n                    <ul data-nodeid=\"66132\">\n                      <li data-nodeid=\"66133\">\n                        <p data-nodeid=\"66134\">\n                          最后 3 位是 011，它是十进制的 3，在八进制也用 3 表示；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"66135\">\n                        <p data-nodeid=\"66136\" class=\"te-preview-highlight\">\n                          从后往前的两位是 10（不够三位时补“0”则为\n                          10），它是十进制的 2，在八进制也用 2 来表示；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"66137\">\n                        <p data-nodeid=\"66138\">别忘加上八进制的符号 0o。</p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"20364\">\n                      则最终八进制的结果就是 0o23 或 023。\n                    </p>\n                    <p data-nodeid=\"20365\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/75/CgqCHl-WYb2AWnlDAABXQI-u4nk588.png\"\n                        alt=\"10.png\"\n                        data-nodeid=\"20694\"\n                      />\n                    </p>\n                    <p data-nodeid=\"20366\">\n                      对于<strong data-nodeid=\"20704\"\n                        >十六进制和二进制之间的转换</strong\n                      >，也可以采用按位合并和按位拆分的方法，区别只是在于需要按<strong\n                        data-nodeid=\"20705\"\n                        >4 位</strong\n                      >进行合并或拆分。\n                    </p>\n                    <p data-nodeid=\"20367\">\n                      例如下图，十六进制的 0x1a 转换为二进制，由于 1 为 0001，a\n                      为 1010，串联在一起之后，二进制的结果就是 0b11010。\n                    </p>\n                    <p data-nodeid=\"20368\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/6A/Ciqc1F-WYcSAbeioAABXFe3nLms882.png\"\n                        alt=\"11.png\"\n                        data-nodeid=\"20709\"\n                      />\n                    </p>\n                    <p data-nodeid=\"20369\">\n                      同样地，二进制的 0b1011101 转换为十六进制，从后往前每 4\n                      位合并：\n                    </p>\n                    <ul data-nodeid=\"20370\">\n                      <li data-nodeid=\"20371\">\n                        <p data-nodeid=\"20372\">\n                          最后 4 位是 1101，它是十进制的 13，在十六进制表示为\n                          d；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"20373\">\n                        <p data-nodeid=\"20374\">\n                          往前的几位是 101，十进制和十六进制都用 5 来表示；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"20375\">\n                        <p data-nodeid=\"20376\">别忘加上十六进制的符号 0x。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"20377\">\n                      则最终十六进制的结果就是 0x5d。<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/ED/CgqCHl-XgvyAPLFvAABXUh2bCnY315.png\"\n                        alt=\"WechatIMG133.png\"\n                        data-nodeid=\"20718\"\n                      />\n                    </p>\n                    <p data-nodeid=\"20378\">\n                      为何八进制与二进制的转换是按照 3\n                      位数合并、拆分，而十六进制与二进制之间则是 4\n                      位数呢？本质原因是在于 2³=8 和\n                      2⁴=16。根据这表达式可以看出，二进制中的 3 个\n                      bit（位），恰好可以表示 0～7 这 8 个数字。因此，按照 3\n                      位合并，就可以从二进制转化到八进制了。同理，按照 4\n                      位合并，就可以从二进制转化到十六进制了。\n                    </p>\n                    <p data-nodeid=\"20379\">\n                      而八进制与十六进制之间的转换，就不适用按位合并和按位拆分的方法了，你可以以二进制或十进制为跳板，进行两者之间的转换。\n                    </p>\n                    <h4 data-nodeid=\"20380\">4. 数制转换图</h4>\n                    <p data-nodeid=\"20381\">\n                      我们总结一下，对于一般的数制之间转换，我们喜欢以十进制来作为跳板。\n                    </p>\n                    <p data-nodeid=\"20382\">\n                      其他数制向十进制的转换方法是<strong data-nodeid=\"20734\"\n                        >换基法</strong\n                      >，而十进制向其他数制转换的方法是<strong\n                        data-nodeid=\"20735\"\n                        >除余法</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"20383\">\n                      特别地，对于程序员经常关注的二进制、八进制和十六进制之间，它们又有一些特殊的转换方法。二进制向八进制或十六进制的转换，可以采用<strong\n                        data-nodeid=\"20745\"\n                        >按位合并法</strong\n                      >；八进制或十六进制向二进制的转换，可以采用<strong\n                        data-nodeid=\"20746\"\n                        >按位拆分法</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"20384\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/6B/Ciqc1F-WYpOAE9r4AAHd7gv5pPI247.png\"\n                        alt=\"13.png\"\n                        data-nodeid=\"20749\"\n                      />\n                    </p>\n                    <div data-nodeid=\"20385\">\n                      <p style=\"text-align: center\">数制转换方法图</p>\n                    </div>\n                    <h3 data-nodeid=\"20386\">数制转换与编程</h3>\n                    <p data-nodeid=\"20387\">\n                      在编程的时候，利用对不同数制及其转换的性质，往往能让很多复杂问题迎刃而解。最常见的就是二进制下的运算，看下下面的例题。\n                    </p>\n                    <h4 data-nodeid=\"20388\">\n                      【例题】判断一个整数 a，是否是 2 的整数次幂。\n                    </h4>\n                    <p data-nodeid=\"20389\">\n                      解析：如果是十进制，判断一个数是否是 10\n                      的整数次幂，只需要看这个数字的形式是否为一个“1”和若干个“0”构成。例如，一个“1”和两个“0”构成“100”，它是\n                      10 的 2 次幂；一个“1”和 4 个“0”构成“10000”，它是 10 的 4\n                      次幂。\n                    </p>\n                    <p data-nodeid=\"20390\">\n                      因此这个题目的解法就是，把 a 转换为二进制，看看 bin(a)\n                      的形式是否为一个“1”和若干个“0”构成，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\">a = <span class=\"hljs-number\">8</span>\n</div></li><li><div class=\"code-word\">b = str(bin(a))\n</div></li><li><div class=\"code-word\">total = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">2</span>,len(b)):\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; total += int(b[i])\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> total == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> b[<span class=\"hljs-number\">2</span>] == <span class=\"hljs-string\">'1'</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'yes'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">else</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'no'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"20392\">我们对代码进行解读。</p>\n                    <ul data-nodeid=\"20393\">\n                      <li data-nodeid=\"20394\">\n                        <p data-nodeid=\"20395\">\n                          第 1～2 行，变量 a 为待判断的整数；变量 b 是 a\n                          的二进制形式，并且被我们强制转化为 string 类型，这样 b\n                          的值就是 0b1000。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"20396\">\n                        <p data-nodeid=\"20397\">\n                          如果形式为一个“1”和若干个“0”，则需要满足以下两个性质：第一，首位为“1”；第二，所有位加和为“1”。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"20398\">\n                        <p data-nodeid=\"20399\">\n                          在代码中，第 4～6\n                          行，我们计算了所有位数的加和，并保存在 total 变量中。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"20400\">\n                        <p data-nodeid=\"20401\">\n                          在第 8～11\n                          行，我们根据两个性质，对结果进行判断，并打印 yes 或者\n                          no。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"20402\">\n                      我们还可以利用<strong data-nodeid=\"20767\"\n                        >位运算的“与”</strong\n                      >，来判断二进制数字 x\n                      的形式是否为一个“1”和若干个“0”。判断的方法是，计算 x &amp;\n                      (x-1)，如果结果为 0 则是，如果结果非 0\n                      则不是。这样我们可以得到更简单的实现代码，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\">a = <span class=\"hljs-number\">80</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> a &amp; (a<span class=\"hljs-number\">-1</span>) == <span class=\"hljs-number\">0</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'yes'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">else</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'no'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"20404\">\n                      其中涉及关于位运算的知识，我会在下一个课时进行详细剖析。\n                    </p>\n                    <h3 data-nodeid=\"20405\">小结</h3>\n                    <p data-nodeid=\"20406\">\n                      数制是数字的基础，也是计算机的基础。信息时代的到来，让二进制被广泛应用，这主要是因为电路中的开关只有接通和切断两种状态，二进制的运算也称为位运算。\n                    </p>\n                    <p data-nodeid=\"20407\">\n                      计算机的数据存储单位便体现了数制的应用，计算机中的数据存储单位常常用\n                      Byte（字节）或 bit（位）。\n                    </p>\n                    <p data-nodeid=\"20408\">\n                      bit 是表示信息的最小单位，叫作二进制位，一个 bit\n                      等于一个二进制数。一个十进制的数的比特要换成二进制看，比如十进制\n                      31 换二进制是 11111 是 5 个 bit，32 换二进制是 100000 是 6\n                      个 bit。而 Byte\n                      叫作字节，用于表示计算机中的一个字符，是计算机文件大小的基本计算单位，1\n                      Byte = 8 bit（也写作 1B = 8b），它采用了 8 个 2 进制位。\n                    </p>\n                    <p data-nodeid=\"20409\">\n                      在本课时中，我们学习不同数制之间的转换方法，包括换基法、除余法、按位拆分法和按位合并法。其中的换基法和除余法，是关于十进制的转换；而按位拆分法和按位合并法，则是关于二进制的转换。\n                    </p>\n                    <p data-nodeid=\"20410\">\n                      在学习过程中，你会发现八进制和十六进制采用的按位合并法，更像是对二进制的压缩表示。八进制或十六进制的一个位，可以表示出\n                      3 或 4\n                      位的二进制数字。因此，用八进制或十六进制来表示二进制会更为方便。\n                    </p>\n                    <p data-nodeid=\"20411\" class=\"\">\n                      下一课时，我将向你讲解“02 |\n                      与或非：逻辑推理的运用”，来学习数学中的逻辑关系。\n                    </p>\n            "}