{"title":"06 | 响应式：响应式内部的实现原理是怎样的？（下）","context":"\n                    <p data-nodeid=\"11519\" class=\"\">\n                      上节课，我们讲到了在 Vue.js 3.0 中引入 reactive\n                      API，它可以把对象数据变成响应式，所以我们着重分析 reactive\n                      API 的实现原理，并学习了收集依赖的 get 函数，\n                      这节课我们继续来分析 reactive API\n                      中需要关注的另一个内容——派发通知的过程。\n                    </p>\n                    <h3 data-nodeid=\"11520\">reactive API</h3>\n                    <h4 data-nodeid=\"11521\">派发通知：set 函数</h4>\n                    <p data-nodeid=\"11522\">\n                      <strong data-nodeid=\"11614\"\n                        >派发通知发生在数据更新的阶段</strong\n                      >\n                      ，由于我们用 Proxy API\n                      劫持了数据对象，所以当这个响应式对象属性更新的时候就会执行\n                      set 函数。我们来看一下 set 函数的实现，它是执行\n                      createSetter 函数的返回值：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createSetter</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">function <span class=\"hljs-title\">set</span><span class=\"hljs-params\">(target, key, value, receiver)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> oldValue = target[key]\n</div></li><li><div class=\"code-word\">    value = toRaw(value)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> hadKey = hasOwn(target, key)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> result = Reflect.set(target, key, value, receiver)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果目标的原型链也是一个 proxy，通过 Reflect.set 修改原型链上的属性会再次触发 setter，这种情况下就没必要触发两次 trigger 了</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (target === toRaw(receiver)) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!hadKey) {\n</div></li><li><div class=\"code-word\">        trigger(target, <span class=\"hljs-string\">\"add\"</span> <span class=\"hljs-comment\">/* ADD */</span>, key, value)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hasChanged(value, oldValue)) {\n</div></li><li><div class=\"code-word\">        trigger(target, <span class=\"hljs-string\">\"set\"</span> <span class=\"hljs-comment\">/* SET */</span>, key, value, oldValue)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> result\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11524\">\n                      结合上述代码来看，set\n                      函数的实现逻辑很简单，主要就做两件事情，\n                      <strong data-nodeid=\"11624\"\n                        >首先通过 Reflect.set 求值</strong\n                      >\n                      ，\n                      <strong data-nodeid=\"11625\"\n                        >然后通过 trigger 函数派发通知</strong\n                      >\n                      ，并依据 key 是否存在于 target\n                      上来确定通知类型，即新增还是修改。\n                    </p>\n                    <p data-nodeid=\"11525\">\n                      整个 set 函数最核心的部分就是\n                      <strong data-nodeid=\"11631\"\n                        >执行 trigger 函数派发通知</strong\n                      >\n                      ，下面我们将重点分析这个过程。\n                    </p>\n                    <p data-nodeid=\"11526\">\n                      我们先来看一下 trigger\n                      函数的实现，为了分析主要流程，这里省略了 trigger\n                      函数中的一些分支逻辑：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 原始数据对象 map</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> targetMap = <span class=\"hljs-keyword\">new</span> WeakMap()\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">trigger</span><span class=\"hljs-params\">(target, type, key, newValue)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 通过 targetMap 拿到 target 对应的依赖集合</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> depsMap = targetMap.get(target)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!depsMap) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 没有依赖，直接返回</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建运行的 effects 集合</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> effects = <span class=\"hljs-keyword\">new</span> Set()\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 添加 effects 的函数</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> add = (effectsToAdd) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (effectsToAdd) {\n</div></li><li><div class=\"code-word\">      effectsToAdd.forEach(effect =&gt; {\n</div></li><li><div class=\"code-word\">        effects.add(effect)\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// SET | ADD | DELETE 操作之一，添加对应的 effects</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (key !== <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">    add(depsMap.get(key))\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> run = (effect) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 调度执行</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (effect.options.scheduler) {\n</div></li><li><div class=\"code-word\">      effect.options.scheduler(effect)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 直接运行</span>\n</div></li><li><div class=\"code-word\">      effect()\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 遍历执行 effects</span>\n</div></li><li><div class=\"code-word\">  effects.forEach(run)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11528\">\n                      trigger 函数的实现也很简单，主要做了四件事情：\n                    </p>\n                    <ol data-nodeid=\"11529\">\n                      <li data-nodeid=\"11530\">\n                        <p data-nodeid=\"11531\">\n                          通过 targetMap 拿到 target 对应的依赖集合 depsMap；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11532\">\n                        <p data-nodeid=\"11533\">创建运行的 effects 集合；</p>\n                      </li>\n                      <li data-nodeid=\"11534\">\n                        <p data-nodeid=\"11535\">\n                          根据 key 从 depsMap 中找到对应的 effects 添加到\n                          effects 集合；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11536\">\n                        <p data-nodeid=\"11537\">\n                          遍历 effects 执行相关的副作用函数。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"11538\">\n                      所以每次 trigger 函数就是根据 target 和 key ，从 targetMap\n                      中找到相关的所有副作用函数遍历执行一遍。\n                    </p>\n                    <p data-nodeid=\"11539\">\n                      在描述依赖收集和派发通知的过程中，我们都提到了一个词：副作用函数，依赖收集过程中我们把\n                      activeEffect（当前激活副作用函数）作为依赖收集，它又是什么？接下来我们来看一下副作用函数的庐山真面目。\n                    </p>\n                    <h4 data-nodeid=\"11540\">副作用函数</h4>\n                    <p data-nodeid=\"11541\">\n                      介绍副作用函数前，我们先回顾一下响应式的原始需求，即我们修改了数据就能自动执行某个函数，举个简单的例子：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { reactive } from <span class=\"hljs-string\">'vue'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> counter = reactive({\n</div></li><li><div class=\"code-word\">  num: <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">logCount</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  console.log(counter.num)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">count</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  counter.num++\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">logCount()\n</div></li><li><div class=\"code-word\">count()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11543\">\n                      可以看到，这里我们定义了响应式对象 counter，然后我们在\n                      logCount 中访问了 counter.num，我们希望通过执行 count\n                      函数修改 counter.num 值的时候，能自动执行 logCount 函数。\n                    </p>\n                    <p data-nodeid=\"11544\">\n                      按我们之前对依赖收集过程的分析，如果这个 logCount 就是\n                      activeEffect\n                      的话，那么就可以实现需求，但显然是做不到的，因为代码在执行到\n                      <code data-backticks=\"1\" data-nodeid=\"11644\"\n                        >console.log(counter.num)</code\n                      >这一行 的时候，它对自己在 logCount\n                      函数中的运行是一无所知的。\n                    </p>\n                    <p data-nodeid=\"11545\">\n                      那么该怎么办呢？其实只要我们运行 logCount 函数前，把\n                      logCount 赋值给 activeEffect 就好了，如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">activeEffect = <span class=\"hljs-function\">logCount \n</span></div></li><li><div class=\"code-word\"><span class=\"hljs-title\">logCount</span><span class=\"hljs-params\">()</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11547\">\n                      顺着这个思路，我们可以利用高阶函数的思想，对 logCount\n                      做一层封装，如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">wrapper</span><span class=\"hljs-params\">(fn)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> wrapped = function(...args) {\n</div></li><li><div class=\"code-word\">    activeEffect = <span class=\"hljs-function\">fn\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">(...args)</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  return wrapped\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> wrappedLog = wrapper(logCount)\n</div></li><li><div class=\"code-word\">wrappedLog()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11549\">\n                      这里，wrapper 本身也是一个函数，它接受 fn\n                      作为参数，返回一个新的函数 wrapped，然后维护一个全局的\n                      activeEffect，当 wrapped 执行的时候，把 activeEffect\n                      设置为 fn，然后执行 fn 即可。\n                    </p>\n                    <p data-nodeid=\"11550\">\n                      这样当我们执行 wrappedLog 后，再去修改\n                      counter.num，就会自动执行 logCount 函数了。\n                    </p>\n                    <p data-nodeid=\"11551\">\n                      实际上 Vue.js 3.0 就是采用类似的做法，在它内部就有一个\n                      effect 副作用函数，我们来看一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 全局 effect 栈</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> effectStack = []\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 当前激活的 effect</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">let activeEffect\n</span></div></li><li><div class=\"code-word\">function <span class=\"hljs-title\">effect</span><span class=\"hljs-params\">(fn, options = EMPTY_OBJ)</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (isEffect(fn)) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果 fn 已经是一个 effect 函数了，则指向原始函数</span>\n</div></li><li><div class=\"code-word\">    fn = fn.raw\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建一个 wrapper，它是一个响应式的副作用的函数</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> effect = createReactiveEffect(fn, options)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!options.lazy) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// lazy 配置，计算属性会用到，非 lazy 则直接执行一次</span>\n</div></li><li><div class=\"code-word\">    effect()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> effect\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createReactiveEffect</span><span class=\"hljs-params\">(fn, options)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> effect = <span class=\"hljs-function\">function <span class=\"hljs-title\">reactiveEffect</span><span class=\"hljs-params\">(...args)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!effect.active) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 非激活状态，则判断如果非调度执行，则直接执行原始函数。</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> options.scheduler ? undefined : fn(...args)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!effectStack.includes(effect)) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 清空 effect 引用的依赖</span>\n</div></li><li><div class=\"code-word\">      cleanup(effect)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 开启全局 shouldTrack，允许依赖收集</span>\n</div></li><li><div class=\"code-word\">        enableTracking()\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 压栈</span>\n</div></li><li><div class=\"code-word\">        effectStack.push(effect)\n</div></li><li><div class=\"code-word\">        activeEffect = effect\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 执行原始函数</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> fn(...args)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">finally</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 出栈</span>\n</div></li><li><div class=\"code-word\">        effectStack.pop()\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 恢复 shouldTrack 开启之前的状态</span>\n</div></li><li><div class=\"code-word\">        resetTracking()\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 指向栈最后一个 effect</span>\n</div></li><li><div class=\"code-word\">        activeEffect = effectStack[effectStack.length - <span class=\"hljs-number\">1</span>]\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  effect.id = uid++\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 标识是一个 effect 函数</span>\n</div></li><li><div class=\"code-word\">  effect._isEffect = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// effect 自身的状态</span>\n</div></li><li><div class=\"code-word\">  effect.active = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 包装的原始函数</span>\n</div></li><li><div class=\"code-word\">  effect.raw = fn\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// effect 对应的依赖，双向指针，依赖包含对 effect 的引用，effect 也包含对依赖的引用</span>\n</div></li><li><div class=\"code-word\">  effect.deps = []\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// effect 的相关配置</span>\n</div></li><li><div class=\"code-word\">  effect.options = options\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> effect\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11553\">\n                      结合上述代码来看，effect 内部通过执行 createReactiveEffect\n                      函数去创建一个新的 effect 函数，为了和外部的 effect\n                      函数区分，我们把它称作 reactiveEffect\n                      函数，并且还给它添加了一些额外属性（我在注释中都有标明）。另外，effect\n                      函数还支持传入一个配置参数以支持更多的\n                      feature，我们这里就不展开了，在后续的章节会详细分析。\n                    </p>\n                    <p data-nodeid=\"11554\">\n                      接着说，这个 reactiveEffect\n                      函数就是响应式的副作用函数，当执行 trigger\n                      过程派发通知的时候，执行的 effect 就是它。\n                    </p>\n                    <p data-nodeid=\"11555\">\n                      按我们之前的分析，这个 reactiveEffect\n                      函数只需要做两件事情：\n                      <strong data-nodeid=\"11662\"\n                        >把全局的 activeEffect 指向它</strong\n                      >\n                      ，\n                      <strong data-nodeid=\"11663\"\n                        >然后执行被包装的原始函数 fn 即可</strong\n                      >\n                      。\n                    </p>\n                    <p data-nodeid=\"11556\">\n                      但实际上它的实现要更复杂一些，首先它会判断 effect\n                      的状态是否是 active，这其实是一种控制手段，允许在非 active\n                      状态且非调度执行情况，则直接执行原始函数 fn\n                      并返回，在后续学习完侦听器后你会对它的理解更加深刻。\n                    </p>\n                    <p data-nodeid=\"11557\">\n                      接着判断 effectStack 中是否包含 effect，如果没有就把\n                      effect 压入栈内。之前我们提到，只要设置 activeEffect =\n                      effect 即可，那么这里为什么要设计一个栈的结构呢？\n                    </p>\n                    <p data-nodeid=\"11558\">\n                      其实是考虑到以下这样一个嵌套 effect 的场景：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { reactive} from <span class=\"hljs-string\">'vue'</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { effect } from <span class=\"hljs-string\">'@vue/reactivity'</span> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> counter = reactive({ \n</div></li><li><div class=\"code-word\">num: <span class=\"hljs-number\">0</span>, \n</div></li><li><div class=\"code-word\">num2: <span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">}) \n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">logCount</span><span class=\"hljs-params\">()</span> </span>{ \n</div></li><li><div class=\"code-word\">effect(logCount2) \n</div></li><li><div class=\"code-word\">console.log(<span class=\"hljs-string\">'num:'</span>, counter.num) \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">count</span><span class=\"hljs-params\">()</span> </span>{ \n</div></li><li><div class=\"code-word\">counter.num++ \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">logCount2</span><span class=\"hljs-params\">()</span> </span>{ \n</div></li><li><div class=\"code-word\">console.log(<span class=\"hljs-string\">'num2:'</span>, counter.num2) \n</div></li><li><div class=\"code-word\">} \n</div></li><li><div class=\"code-word\">effect(logCount) \n</div></li><li><div class=\"code-word\">count()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11560\">\n                      我们每次执行 effect 函数时，如果仅仅把 reactiveEffect\n                      函数赋值给 activeEffect，那么针对这种嵌套场景，执行完\n                      effect(logCount2) 后，activeEffect 还是 effect(logCount2)\n                      返回的 reactiveEffect 函数，这样后续访问 counter.num\n                      的时候，依赖收集对应的 activeEffect\n                      就不对了，此时我们外部执行 count 函数修改 counter.num\n                      后执行的便不是 logCount 函数，而是 logCount2\n                      函数，最终输出的结果如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">num2: <span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">num: <span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">num2: <span class=\"hljs-number\">0</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11562\">而我们期望的结果应该如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">num2: <span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">num: <span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">num2: <span class=\"hljs-number\">0</span> \n</div></li><li><div class=\"code-word\">num: <span class=\"hljs-number\">1</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11564\">\n                      因此针对嵌套 effect 的场景，我们不能简单地赋值\n                      activeEffect，应该考虑到函数的执行本身就是一种入栈出栈操作，因此我们也可以设计一个\n                      effectStack，这样每次进入 reactiveEffect\n                      函数就先把它入栈，然后 activeEffect 指向这个\n                      reactiveEffect 函数，接着在 fn 执行完毕后出栈，再把\n                      activeEffect 指向 effectStack 最后一个元素，也就是外层\n                      effect 函数对应的 reactiveEffect。\n                    </p>\n                    <p data-nodeid=\"11565\">\n                      这里我们还注意到一个细节，<strong data-nodeid=\"11675\"\n                        >在入栈前会执行 cleanup 函数清空 reactiveEffect\n                        函数对应的依赖</strong\n                      >\n                      。在执行 track 函数的时候，除了收集当前激活的 effect\n                      作为依赖，还通过 activeEffect.deps.push(dep) 把 dep 作为\n                      activeEffect 的依赖，这样在 cleanup 的时候我们就可以找到\n                      effect 对应的 dep 了，然后把 effect 从这些 dep\n                      中删除。cleanup 函数的代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">cleanup</span><span class=\"hljs-params\">(effect)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { deps } = <span class=\"hljs-function\">effect\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(deps.length)</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; deps.length; i++) {\n</div></li><li><div class=\"code-word\">      deps[i].delete(effect)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    deps.length = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11567\">\n                      为什么需要 cleanup 呢？如果遇到这种场景：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"state.showMsg\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    {{ state.msg }}\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    {{ Math.random()}}\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"toggle\"</span>&gt;</span>Toggle Msg<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"switchView\"</span>&gt;</span>Switch View<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">import</span> { reactive } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vue'</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    setup() {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> state = reactive({\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">'Hello World'</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">showMsg</span>: <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toggle</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">        state.msg = state.msg === <span class=\"hljs-string\">'Hello World'</span> ? <span class=\"hljs-string\">'Hello Vue'</span> : <span class=\"hljs-string\">'Hello World'</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">switchView</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">        state.showMsg = !state.showMsg\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        toggle,\n</div></li><li><div class=\"code-word\">        switchView,\n</div></li><li><div class=\"code-word\">        state\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11569\">\n                      结合代码可以知道，这个组件的视图会根据 showMsg\n                      变量的控制显示 msg 或者一个随机数，当我们点击 Switch View\n                      的按钮时，就会修改这个变量值。\n                    </p>\n                    <p data-nodeid=\"11570\">\n                      假设没有 cleanup，在第一次渲染模板的时候，activeEffect\n                      是组件的副作用渲染函数，因为模板 render 的时候访问了\n                      state.msg，所以会执行依赖收集，把副作用渲染函数作为\n                      state.msg 的依赖，我们把它称作 render effect。然后我们点击\n                      Switch View 按钮，视图切换为显示随机数，此时我们再点击\n                      Toggle Msg 按钮，由于修改了 state.msg 就会派发通知，找到了\n                      render effect 并执行，就又触发了组件的重新渲染。\n                    </p>\n                    <p data-nodeid=\"11571\">\n                      但这个行为实际上并不符合预期，因为当我们点击 Switch View\n                      按钮，视图切换为显示随机数的时候，也会触发组件的重新渲染，但这个时候视图并没有渲染\n                      state.msg，所以对它的改动并不应该影响组件的重新渲染。\n                    </p>\n                    <p data-nodeid=\"11572\">\n                      因此在组件的 render effect 执行之前，如果通过 cleanup\n                      清理依赖，我们就可以删除之前 state.msg 收集的 render\n                      effect 依赖。这样当我们修改 state.msg\n                      时，由于已经没有依赖了就不会触发组件的重新渲染，符合预期。\n                    </p>\n                    <p data-nodeid=\"11573\">\n                      至此，我们从 reactive API\n                      入手了解了整个响应式对象的实现原理。除了 reactive\n                      API，Vue.js 3.0 还提供了其他好用的响应式\n                      API，接下来我们一起分析一些常用的。\n                    </p>\n                    <h3 data-nodeid=\"11574\">readonly API</h3>\n                    <p data-nodeid=\"11575\">\n                      如果用 const\n                      声明一个对象变量，虽然不能直接对这个变量赋值，但我们可以修改它的属。如果我们希望创建只读对象，不能修改它的属性，也不能给这个对象添加和删除属性，让它变成一个真正意义上的只读对象。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> original = {\n</div></li><li><div class=\"code-word\">  foo: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> wrapped = readonly(original)\n</div></li><li><div class=\"code-word\">wrapped.foo = <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// warn: Set operation on key \"foo\" failed: target is readonly.</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11577\">\n                      显然，想实现上述需求就需要劫持对象，于是 Vue.js 3.0 在\n                      reactive API 的基础上，设计并实现了 readonly API。\n                    </p>\n                    <p data-nodeid=\"11578\">我们先来看一下 readonly 的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">readonly</span><span class=\"hljs-params\">(target)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> createReactiveObject(target, <span class=\"hljs-keyword\">true</span>, readonlyHandlers, readonlyCollectionHandlers)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createReactiveObject</span><span class=\"hljs-params\">(target, isReadonly, baseHandlers, collectionHandlers)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!isObject(target)) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 目标必须是对象或数组类型</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>)) {\n</div></li><li><div class=\"code-word\">      console.warn(\\`value cannot be made reactive: ${String(target)}\\`)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> target\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (target.__v_raw &amp;&amp; !(isReadonly &amp;&amp; target.__v_isReactive)) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// target 已经是 Proxy 对象，直接返回</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 有个例外，如果是 readonly 作用于一个响应式对象，则继续</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> target\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (hasOwn(target, isReadonly ? <span class=\"hljs-string\">\"__v_readonly\"</span> <span class=\"hljs-comment\">/* readonly */</span> : <span class=\"hljs-string\">\"__v_reactive\"</span> <span class=\"hljs-comment\">/* reactive */</span>)) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// target 已经有对应的 Proxy 了</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> isReadonly ? target.__v_readonly : target.__v_reactive\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 只有在白名单里的数据类型才能变成响应式</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!canObserve(target)) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> target\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 利用 Proxy 创建响应式</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> observed = <span class=\"hljs-keyword\">new</span> Proxy(target, collectionTypes.has(target.constructor) ? collectionHandlers : baseHandlers)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 给原始数据打个标识，说明它已经变成响应式，并且有对应的 Proxy 了</span>\n</div></li><li><div class=\"code-word\">  def(target, isReadonly ? <span class=\"hljs-string\">\"__v_readonly\"</span> <span class=\"hljs-comment\">/* readonly */</span> : <span class=\"hljs-string\">\"__v_reactive\"</span> <span class=\"hljs-comment\">/* reactive */</span>, observed)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> observed\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11580\">\n                      其实 readonly 和 reactive 函数的主要区别，就是执行\n                      createReactiveObject 函数时的参数 isReadonly 不同。\n                    </p>\n                    <p data-nodeid=\"11581\">\n                      我们来看这里的代码，首先 isReadonly 变量为\n                      true，所以在创建过程中会给原始对象 target 打上一个\n                      __v_readonly 的标识。另外还有一个特殊情况，如果 target\n                      已经是一个 reactive 对象，就会把它继续变成一个 readonly\n                      响应式对象。\n                    </p>\n                    <p data-nodeid=\"11582\">\n                      其次就是 baseHandlers 的 collectionHandlers\n                      的区别，我们这里仍然只关心基本数据类型的 Proxy\n                      处理器对象，readonly 函数传入的 baseHandlers 值是\n                      readonlyHandlers。\n                    </p>\n                    <p data-nodeid=\"11583\">\n                      接下来，我们来看一下其中 readonlyHandlers 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> readonlyHandlers = {\n</div></li><li><div class=\"code-word\">  get: readonlyGet,\n</div></li><li><div class=\"code-word\">  has,\n</div></li><li><div class=\"code-word\">  ownKeys,\n</div></li><li><div class=\"code-word\">  set(target, key) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>)) {\n</div></li><li><div class=\"code-word\">      console.warn(\\`Set operation on key <span class=\"hljs-string\">\"${String(key)}\"</span> failed: target is readonly.\\`, target)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  deleteProperty(target, key) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>)) {\n</div></li><li><div class=\"code-word\">      console.warn(\\`Delete operation on key <span class=\"hljs-string\">\"${String(key)}\"</span> failed: target is readonly.\\`, target)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11585\">\n                      readonlyHandlers 和 mutableHandlers 的区别主要在 get、set\n                      和 deleteProperty\n                      三个函数上。很显然，作为一个只读的响应式对象，是不允许修改属性以及删除属性的，所以在非生产环境下\n                      set 和 deleteProperty 函数的实现都会报警告，提示用户\n                      target 是 readonly 的。\n                    </p>\n                    <p data-nodeid=\"11586\">\n                      接下来我们来看一下其中 readonlyGet 的实现，它其实就是\n                      createGetter(true) 的返回值：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createGetter</span><span class=\"hljs-params\">(isReadonly = <span class=\"hljs-keyword\">false</span>)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">function <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(target, key, receiver)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// isReadonly 为 true 则不需要依赖收集</span>\n</div></li><li><div class=\"code-word\">    !isReadonly &amp;&amp; track(target, <span class=\"hljs-string\">\"get\"</span> <span class=\"hljs-comment\">/* GET */</span>, key)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> isObject(res)\n</div></li><li><div class=\"code-word\">      ? isReadonly\n</div></li><li><div class=\"code-word\">        ?\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 如果 res 是个对象或者数组类型，则递归执行 readonly 函数把 res readonly</span>\n</div></li><li><div class=\"code-word\">        readonly(res)\n</div></li><li><div class=\"code-word\">        : reactive(res)\n</div></li><li><div class=\"code-word\">      : res\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11588\">\n                      可以看到，它和 reactive API\n                      最大的区别就是不做依赖收集了，这一点也非常好理解，因为它的属性不会被修改，所以就不用跟踪它的变化了。\n                    </p>\n                    <p data-nodeid=\"11589\">\n                      到这里，readonly API\n                      就介绍完了，接下来我们分析一下另一个常用的响应式\n                      API：ref。\n                    </p>\n                    <h3 data-nodeid=\"11590\">ref API</h3>\n                    <p data-nodeid=\"11591\">\n                      通过前面的分析，我们知道 reactive API 对传入的 target\n                      类型有限制，必须是对象或者数组类型，而对于一些基础类型（比如\n                      String、Number、Boolean）是不支持的。\n                    </p>\n                    <p data-nodeid=\"11592\">\n                      但是有时候从需求上来说，可能我只希望把一个字符串变成响应式，却不得不封装成一个对象，这样使用上多少有一些不方便，于是\n                      Vue.js 3.0 设计并实现了 ref API。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> msg = ref(<span class=\"hljs-string\">'Hello World'</span>) \n</div></li><li><div class=\"code-word\">msg.value = <span class=\"hljs-string\">'Hello Vue'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11594\">我们先来看一下 ref 的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">ref</span><span class=\"hljs-params\">(value)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> createRef(value)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> convert = (val) =&gt; isObject(val) ? reactive(val) : <span class=\"hljs-function\">val\n</span></div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">function <span class=\"hljs-title\">createRef</span><span class=\"hljs-params\">(rawValue)</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (isRef(rawValue)) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果传入的就是一个 ref，那么返回自身即可，处理嵌套 ref 的情况。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> rawValue\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 如果是对象或者数组类型，则转换一个 reactive 对象。</span>\n</div></li><li><div class=\"code-word\">  let value = convert(rawValue)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> r = {\n</div></li><li><div class=\"code-word\">    __v_isRef: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\">get <span class=\"hljs-title\">value</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// getter</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 依赖收集，key 为固定的 value</span>\n</div></li><li><div class=\"code-word\">      track(r, <span class=\"hljs-string\">\"get\"</span> <span class=\"hljs-comment\">/* GET */</span>, <span class=\"hljs-string\">'value'</span>)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> value\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\">set <span class=\"hljs-title\">value</span><span class=\"hljs-params\">(newVal)</span> </span>{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// setter，只处理 value 属性的修改</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (hasChanged(toRaw(newVal), rawValue)) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 判断有变化后更新值</span>\n</div></li><li><div class=\"code-word\">        rawValue = newVal\n</div></li><li><div class=\"code-word\">        value = convert(newVal)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 派发通知</span>\n</div></li><li><div class=\"code-word\">        trigger(r, <span class=\"hljs-string\">\"set\"</span> <span class=\"hljs-comment\">/* SET */</span>, <span class=\"hljs-string\">'value'</span>, <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> r\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"11596\">\n                      可以看到，函数首先处理了嵌套 ref 的情况，如果传入的\n                      rawValue 也是 ref，那么直接返回。\n                    </p>\n                    <p data-nodeid=\"11597\">\n                      接着对 rawValue 做了一层转换，如果 rawValue\n                      是对象或者数组类型，那么把它转换成一个 reactive 对象。\n                    </p>\n                    <p data-nodeid=\"11598\">\n                      最后定义一个对 value 属性做 getter 和 setter\n                      劫持的对象并返回，get 部分就是执行 track\n                      函数做依赖收集然后返回它的值；set 部分就是设置新值并且执行\n                      trigger 函数派发通知。\n                    </p>\n                    <h3 data-nodeid=\"11599\">总结</h3>\n                    <p data-nodeid=\"11600\">\n                      好的，到这里我们这一节的学习也要结束啦，我希望通过这节课的学习，你能搞明白响应式\n                      API\n                      的实现原理，知道什么时候收集依赖，什么时候派发更新，以及副作用函数的作用和设计原理。我还希望你能知道\n                      reactive、readonly、ref 三种 API\n                      的区别和各自的使用场景，这样你就可以在今后的开发中对它们应用自如啦。\n                    </p>\n                    <p data-nodeid=\"12382\">\n                      最后我们通过一张图来看一下整个响应式 API\n                      实现和组件更新的关系：\n                    </p>\n                    <p data-nodeid=\"12383\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/3A/99/CgqCHl8iOeqAJJlaAAHAhGDRoDQ714.png\"\n                        alt=\"1.png\"\n                        data-nodeid=\"12387\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"11603\">\n                      这幅图是不是很眼熟？没错，它和前面 Vue.js 2.x\n                      的响应式原理图很接近，其实 Vue.js 3.0 在响应式的实现思路和\n                      Vue.js 2.x 差别并不大，主要就是\n                      <strong data-nodeid=\"11724\"\n                        >劫持数据的方式改成用 Proxy 实现</strong\n                      >\n                      ，\n                      <strong data-nodeid=\"11725\"\n                        >以及收集的依赖由 watcher\n                        实例变成了组件副作用渲染函数</strong\n                      >\n                      。\n                    </p>\n                    <p data-nodeid=\"11604\">\n                      最后，给你留一道思考题目，为什么说 Vue.js 3 的响应式 API\n                      实现和 Vue.js 2.x\n                      相比性能要好，具体好在哪里呢？它又有哪些不足呢？欢迎你在留言区与我分享。\n                    </p>\n                    <blockquote data-nodeid=\"11605\">\n                      <p data-nodeid=\"11606\" class=\"\">\n                        <strong data-nodeid=\"11738\"\n                          >本节课的相关代码在源代码中的位置如下：</strong\n                        ><br />\n                        packages/reactivity/src/baseHandlers.ts<br />\n                        packages/reactivity/src/effect.ts<br />\n                        packages/reactivity/src/reactive.ts<br />\n                        packages/reactivity/src/ref.ts\n                      </p>\n                    </blockquote>\n            "}