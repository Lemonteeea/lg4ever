{"title":"10 | 数组排序（上）：如何用 JS 实现各种数组排序？","context":"\n                    <p data-nodeid=\"561\" class=\"\">\n                      我们上一讲学习了数组扁平化的相关知识，那么这一讲的内容和之前相比，较为独立，要说的是数组排序那些事儿。数组排序是你在\n                      JavaScript\n                      的编程过程中经常会遇到的，也是大厂面试中会考察的，尤其是调用\n                      sort 方法，不过今天我们主要围绕数据结构排队进行讲解，关于\n                      sort 方法的详细剖析我会在下一讲和你探讨。\n                    </p>\n                    <p data-nodeid=\"562\">\n                      那么，为了方便你更好地理解本讲的内容，在课程开始前请你先思考几个问题。\n                    </p>\n                    <ol data-nodeid=\"563\">\n                      <li data-nodeid=\"564\">\n                        <p data-nodeid=\"565\">\n                          数据结构中稳定的排序算法有哪些？不稳定的排序算法有哪些？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"566\">\n                        <p data-nodeid=\"567\">\n                          时间复杂度和空间复杂度分别代表了什么？\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"568\">\n                      带着这样的思考，我们开始今天的学习。\n                    </p>\n                    <h3 data-nodeid=\"569\">时间复杂度&amp;空间复杂度</h3>\n                    <p data-nodeid=\"570\">\n                      在说排序算法之前，你需要重新了解一下时间复杂度和空间复杂度。\n                    </p>\n                    <p data-nodeid=\"571\">\n                      关于时间复杂度，我们说的更多的是通过 O(nlogn) 以及 O(n)\n                      等来衡量。其实大多数时候我们对此并未建立形象的认知，到底哪一种算法更快、更好呢？下面是一张时间复杂度的曲线图（来源于\n                      <a\n                        href=\"https://gitee.com/webfrontup/javascript-algorithms\"\n                        data-nodeid=\"639\"\n                        >https://gitee.com/webfrontup/javascript-algorithms</a\n                      >），方便你来理解。\n                    </p>\n                    <p data-nodeid=\"572\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/94/9D/Ciqc1GAZALGARectAANRfAJPMN8925.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"643\"\n                      />\n                    </p>\n                    <p data-nodeid=\"573\">\n                      图中用颜色区分了最优的、一般的以及比较差的时间复杂度，可以看到有这几种分类：Excellent、Good、Fair、Bad、Horrible，通过这张图可以一目了然。因此你在面试或者日常工作中编写代码的时候，要努力将代码的时间复杂度维持在\n                      O(nlogn) 以下，要知道凡是超过 n\n                      平方的时间复杂度都是难以接受的。\n                    </p>\n                    <p data-nodeid=\"574\">\n                      此外，关于哪些循环嵌套是 n 平方，哪些是\n                      nlogn，我想你已经有一定的基础认知了，这里我就不过多讲解了。\n                    </p>\n                    <p data-nodeid=\"575\">\n                      空间复杂度比较容易理解，就是对一个算法在运行过程中临时占用存储空间大小的度量。有的算法需要占用的临时工作单元数与解决问题的规模有关，如果规模越大，则占的存储单元越多。比如，归并排序和快速排序的空间复杂度就是不太一样的。\n                    </p>\n                    <p data-nodeid=\"576\">\n                      有了这样的前提，我们就来研究各种排序的实现方法吧。\n                    </p>\n                    <h3 data-nodeid=\"577\">各种排序的 JS 实现</h3>\n                    <p data-nodeid=\"578\">\n                      数据结构算法中排序有很多种，常见的、不常见的，至少包含十种以上。根据它们的特性，可以大致分为两种类型：比较类排序和非比较类排序。\n                    </p>\n                    <ul data-nodeid=\"579\">\n                      <li data-nodeid=\"580\">\n                        <p data-nodeid=\"581\">\n                          <strong data-nodeid=\"654\">比较类排序</strong\n                          >：通过比较来决定元素间的相对次序，其时间复杂度不能突破\n                          O(nlogn)，因此也称为非线性时间比较类排序。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"582\">\n                        <p data-nodeid=\"583\">\n                          <strong data-nodeid=\"659\">非比较类排序</strong\n                          >：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"584\">\n                      我们通过一张图片来看看这两种分类方式分别包括哪些排序方法。\n                    </p>\n                    <p data-nodeid=\"585\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/94/A8/CgqCHmAZALyAd98RAAE5AoAl_us191.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"663\"\n                      />\n                    </p>\n                    <p data-nodeid=\"586\">\n                      非比较类的排序在实际情况中用的比较少，故本讲主要围绕比较类排序展开讲解。其实根据排序的稳定性，也可以分为稳定排序和不稳定排序，例如快速排序就是不稳定的排序、冒泡排序就是稳定的排序。我在最后总结的部分会帮助你再次区分。\n                    </p>\n                    <p data-nodeid=\"587\">\n                      那么我们先从最简单的排序开始学习吧，先看下冒泡排序。\n                    </p>\n                    <h4 data-nodeid=\"588\">冒泡排序</h4>\n                    <p data-nodeid=\"589\">\n                      冒泡排序是最基础的排序，一般在最开始学习数据结构的时候就会接触它。冒泡排序是一次比较两个元素，如果顺序是错误的就把它们交换过来。走访数列的工作会重复地进行，直到不需要再交换，也就是说该数列已经排序完成。请看下面的代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">222</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">456</span>, <span class=\"hljs-number\">221</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bubbleSort</span>(<span class=\"hljs-params\">array</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> len = array.length\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (len &lt; <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> array\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (array[j] &gt; array[i]) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> temp = array[j]\n</div></li><li><div class=\"code-word\">        array[j] = array[i]\n</div></li><li><div class=\"code-word\">        array[i] = temp\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> array\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">bubbleSort(a);  <span class=\"hljs-comment\">// [1, 1, 3, 3, 6, 6, 23, 34, 76, 221, 222, 456]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"591\">\n                      从上面这段代码可以看出，最后返回的是排好序的结果。因为冒泡排序实在太基础和简单，这里就不过多赘述了。下面我们来看看快速排序法。\n                    </p>\n                    <h4 data-nodeid=\"592\">快速排序</h4>\n                    <p data-nodeid=\"593\">\n                      快速排序的基本思想是通过一趟排序，将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可以分别对这两部分记录继续进行排序，以达到整个序列有序。\n                    </p>\n                    <p data-nodeid=\"594\">请看下面的代码。</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">222</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">456</span>, <span class=\"hljs-number\">221</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">quickSort</span>(<span class=\"hljs-params\">array</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> quick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">arr</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (arr.length &lt;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> arr\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-built_in\">Math</span>.floor(len &gt;&gt; <span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> pivot = arr.splice(index, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> left = []\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> right = []\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (arr[i] &gt; pivot) {\n</div></li><li><div class=\"code-word\">        right.push(arr[i])\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[i] &lt;= pivot) {\n</div></li><li><div class=\"code-word\">        left.push(arr[i])\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> quick(left).concat([pivot], quick(right))\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> result = quick(array)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> result\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">quickSort(a);<span class=\"hljs-comment\">// &nbsp;[1, 1, 3, 3, 6, 6, 23, 34, 76, 221, 222, 456]</span>\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"596\">\n                      上面的代码在控制台执行之后，也可以得到预期的结果。最主要的思路是从数列中挑出一个元素，称为\n                      “基准”（pivot）；然后重新排序数列，所有元素比基准值小的摆放在基准前面、比基准值大的摆在基准的后面；在这个区分搞定之后，该基准就处于数列的中间位置；然后把小于基准值元素的子数列（left）和大于基准值元素的子数列（right）递归地调用\n                      quick 方法排序完成，这就是快排的思路。\n                    </p>\n                    <p data-nodeid=\"597\">下面我们来看看插入排序的实现方式。</p>\n                    <h4 data-nodeid=\"598\">插入排序</h4>\n                    <p data-nodeid=\"599\">\n                      插入排序算法描述的是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入，从而达到排序的效果。来看一下代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">222</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">456</span>, <span class=\"hljs-number\">221</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insertSort</span>(<span class=\"hljs-params\">array</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> len = array.length\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> current\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> prev\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; len; i++) {\n</div></li><li><div class=\"code-word\">    current = array[i]\n</div></li><li><div class=\"code-word\">    prev = i - <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (prev &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; array[prev] &gt; current) {\n</div></li><li><div class=\"code-word\">      array[prev + <span class=\"hljs-number\">1</span>] = array[prev]\n</div></li><li><div class=\"code-word\">      prev--\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    array[prev + <span class=\"hljs-number\">1</span>] = current\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> array\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">insertSort(a); <span class=\"hljs-comment\">// [1, 1, 3, 3, 6, 6, 23, 34, 76, 221, 222, 456]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"601\">\n                      从执行的结果中可以发现，通过插入排序这种方式实现了排序效果。插入排序的思路是基于数组本身进行调整的，首先循环遍历从\n                      i 等于 1 开始，拿到当前的 current\n                      的值，去和前面的值比较，如果前面的大于当前的值，就把前面的值和当前的那个值进行交换，通过这样不断循环达到了排序的目的。\n                    </p>\n                    <p data-nodeid=\"602\">下面说说选择排序的实现方式。</p>\n                    <h4 data-nodeid=\"603\">选择排序</h4>\n                    <p data-nodeid=\"604\">\n                      选择排序是一种简单直观的排序算法。它的工作原理是，首先将最小的元素存放在序列的起始位置，再从剩余未排序元素中继续寻找最小元素，然后放到已排序的序列后面……以此类推，直到所有元素均排序完毕。请看下面的代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">222</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">456</span>, <span class=\"hljs-number\">221</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">selectSort</span>(<span class=\"hljs-params\">array</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> len = array.length\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> temp\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> minIndex\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; len - <span class=\"hljs-number\">1</span>; i++) {\n</div></li><li><div class=\"code-word\">    minIndex = i\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; len; j++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (array[j] &lt;= array[minIndex]) {\n</div></li><li><div class=\"code-word\">        minIndex = j\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    temp = array[i]\n</div></li><li><div class=\"code-word\">    array[i] = array[minIndex]\n</div></li><li><div class=\"code-word\">    array[minIndex] = temp\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> array\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">selectSort(a); <span class=\"hljs-comment\">// [1, 1, 3, 3, 6, 6, 23, 34, 76, 221, 222, 456]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"606\">\n                      这样，通过选择排序的方法同样也可以实现数组的排序，从上面的代码中可以看出该排序是表现最稳定的排序算法之一，因为无论什么数据进去都是\n                      O(n 平方)\n                      的时间复杂度，所以用到它的时候，数据规模越小越好。\n                    </p>\n                    <p data-nodeid=\"607\">下面我们看看堆排序是怎样实现的。</p>\n                    <h4 data-nodeid=\"608\">堆排序</h4>\n                    <p data-nodeid=\"609\">\n                      堆排序是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质，即子结点的键值或索引总是小于（或者大于）它的父节点。堆的底层实际上就是一棵完全二叉树，可以用数组实现。\n                    </p>\n                    <p data-nodeid=\"610\">\n                      根节点最大的堆叫作大根堆，根节点最小的堆叫作小根堆，你可以根据从大到小排序或者从小到大来排序，分别建立对应的堆就可以。请看下面的代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">222</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">456</span>, <span class=\"hljs-number\">221</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heap_sort</span>(<span class=\"hljs-params\">arr</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> len = arr.length\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> k = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">i, j</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> temp = arr[i]\n</div></li><li><div class=\"code-word\">    arr[i] = arr[j]\n</div></li><li><div class=\"code-word\">    arr[j] = temp\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">max_heapify</span>(<span class=\"hljs-params\">start, end</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> dad = start\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">var</span> son = dad * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (son &gt;= end) <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (son + <span class=\"hljs-number\">1</span> &lt; end &amp;&amp; arr[son] &lt; arr[son + <span class=\"hljs-number\">1</span>]) {\n</div></li><li><div class=\"code-word\">      son++\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (arr[dad] &lt;= arr[son]) {\n</div></li><li><div class=\"code-word\">      swap(dad, son)\n</div></li><li><div class=\"code-word\">      max_heapify(son, end)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-built_in\">Math</span>.floor(len / <span class=\"hljs-number\">2</span>) - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n</div></li><li><div class=\"code-word\">    max_heapify(i, len)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = len - <span class=\"hljs-number\">1</span>; j &gt; k; j--) {\n</div></li><li><div class=\"code-word\">    swap(<span class=\"hljs-number\">0</span>, j)\n</div></li><li><div class=\"code-word\">    max_heapify(<span class=\"hljs-number\">0</span>, j)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> arr\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">heap_sort(a); <span class=\"hljs-comment\">// [1, 1, 3, 3, 6, 6, 23, 34, 76, 221, 222, 456]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"612\">\n                      从代码来看，堆排序相比上面几种排序整体上会复杂一些，不太容易理解。不过你应该知道两点：一是堆排序最核心的点就在于排序前先建堆；二是由于堆其实就是完全二叉树，如果父节点的序号为\n                      n，那么叶子节点的序号就分别是 2n 和 2n+1。\n                    </p>\n                    <p data-nodeid=\"613\">\n                      你理解了这两点，再看代码就比较好理解了。堆排序最后有两个循环：第一个是处理父节点的顺序；第二个循环则是根据父节点和叶子节点的大小对比，进行堆的调整。通过这两轮循环的调整，最后堆排序完成。\n                    </p>\n                    <p data-nodeid=\"614\">下面我们再来看最后一种归并排序。</p>\n                    <h4 data-nodeid=\"615\">归并排序</h4>\n                    <p data-nodeid=\"616\">\n                      归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。我们先看一下代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">222</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">456</span>, <span class=\"hljs-number\">221</span>];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mergeSort</span>(<span class=\"hljs-params\">array</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-function\">(<span class=\"hljs-params\">right, left</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> result = []\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> il = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> ir = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (il &lt; left.length &amp;&amp; ir &lt; right.length) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (left[il] &lt; right[ir]) {\n</div></li><li><div class=\"code-word\">        result.push(left[il++])\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        result.push(right[ir++])\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (il &lt; left.length) {\n</div></li><li><div class=\"code-word\">      result.push(left[il++])\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (ir &lt; right.length) {\n</div></li><li><div class=\"code-word\">      result.push(right[ir++])\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> result\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> mergeSort = <span class=\"hljs-function\"><span class=\"hljs-params\">array</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (array.length === <span class=\"hljs-number\">1</span>) { <span class=\"hljs-keyword\">return</span> array }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> mid = <span class=\"hljs-built_in\">Math</span>.floor(array.length / <span class=\"hljs-number\">2</span>)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> left = array.slice(<span class=\"hljs-number\">0</span>, mid)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> right = array.slice(mid, array.length)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> merge(mergeSort(left), mergeSort(right))\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> mergeSort(array)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">mergeSort(a); <span class=\"hljs-comment\">// [1, 1, 3, 3, 6, 6, 23, 34, 76, 221, 222, 456]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"618\">\n                      从上面这段代码中可以看到，通过归并排序可以得到想要的结果。上面提到了分治的思路，你可以从\n                      mergeSort 方法中看到，通过 mid\n                      可以把该数组分成左右两个数组，分别对这两个进行递归调用排序方法，最后将两个数组按照顺序归并起来。\n                    </p>\n                    <p data-nodeid=\"619\">\n                      归并排序是一种稳定的排序方法，和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好得多，因为始终都是\n                      O(nlogn) 的时间复杂度。而代价是需要额外的内存空间。\n                    </p>\n                    <p data-nodeid=\"620\">\n                      以上就是今天要介绍的六种实现数组排序的算法，你有兴趣的话可以自己再学习下非比较类排序的那三种方法。\n                    </p>\n                    <h3 data-nodeid=\"621\">总结</h3>\n                    <p data-nodeid=\"622\">\n                      这一讲，我们把平常开发中常见的几种排序方法分别介绍了一遍。我整理了一个表格，汇总了它们各自的时间复杂度和空间复杂度，你可以对比着来回顾一下本讲的内容。\n                    </p>\n                    <p data-nodeid=\"623\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/0C/93/Cip5yGAZAM-AD3aBAAE-rytK4O4585.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"697\"\n                      />\n                    </p>\n                    <p data-nodeid=\"624\">\n                      其中你可以看到排序相关的时间复杂度和空间复杂度以及稳定性的情况，如果遇到需要自己实现排序的时候，可以根据它们的空间和时间复杂度综合考量，选择最适合的排序方法。\n                    </p>\n                    <p data-nodeid=\"625\">\n                      接下来的一讲我们将要分析 JS 的 sort\n                      方法的实现，这一讲作为下节课的基础，我还是希望你能彻底理解上面的代码，从而提升\n                      JavaScript 的编程能力和理解能力。本讲所说的各种排序算法的\n                      JS\n                      实现只是其中的引子，下节课的内容会相对难一些。如果你还是对个别排序算法不理解，可以试着自己多实现几遍，就会发现其中很多细节和你只是看一遍是不一样的。\n                    </p>\n                    <p data-nodeid=\"626\" class=\"\">感谢学习，我们下一讲再见。</p>\n            "}