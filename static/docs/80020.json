{"title":"15 | AST 转换：AST 节点内部做了哪些转换？（下）","context":"\n                    <p data-nodeid=\"24415\">\n                      上一节课，我们已经知道了 transform\n                      的核心流程主要有四步：创建 transform 上下文、遍历 AST\n                      节点、静态提升以及创建根代码生成节点。这节课我们接着分析遍历\n                      AST 节点中的 Text 节点的转换函数。\n                    </p>\n\n                    <h3 data-nodeid=\"23713\">遍历 AST 节点</h3>\n                    <h4 data-nodeid=\"23714\">Text 节点转换函数</h4>\n                    <p data-nodeid=\"23715\">\n                      接下来，我们来看一下 Text 节点转换函数的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> transformText = (node, context) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (node.type === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ROOT */</span> ||\n</div></li><li><div class=\"code-word\">    node.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> ||\n</div></li><li><div class=\"code-word\">    node.type === <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* FOR */</span> ||\n</div></li><li><div class=\"code-word\">    node.type === <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">/* IF_BRANCH */</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 在节点退出时执行转换，保证所有表达式都已经被处理</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> () =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> children = node.children\n</div></li><li><div class=\"code-word\">      let currentContainer = undefined\n</div></li><li><div class=\"code-word\">      let hasText = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 将相邻文本节点合并</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> child = children[i]\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (isText(child)) {\n</div></li><li><div class=\"code-word\">          hasText = <span class=\"hljs-function\"><span class=\"hljs-keyword\">true</span>\n</span></div></li><li><div class=\"code-word\">          <span class=\"hljs-title\">for</span> <span class=\"hljs-params\">(let j = i + <span class=\"hljs-number\">1</span>; j &lt; children.length; j++)</span> {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">const</span> next = children[j]\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (isText(next)) {\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-keyword\">if</span> (!currentContainer) {\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-comment\">// 创建复合表达式节点</span>\n</div></li><li><div class=\"code-word\">                currentContainer = children[i] = {\n</div></li><li><div class=\"code-word\">                  type: <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* COMPOUND_EXPRESSION */</span>,\n</div></li><li><div class=\"code-word\">                  loc: child.loc,\n</div></li><li><div class=\"code-word\">                  children: [child]\n</div></li><li><div class=\"code-word\">                }\n</div></li><li><div class=\"code-word\">              }\n</div></li><li><div class=\"code-word\">              currentContainer.children.push(\\` + \\`, next)\n</div></li><li><div class=\"code-word\">              children.splice(j, <span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">              j--\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">              currentContainer = undefined\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!hasText ||\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 如果是一个带有单个文本子元素的纯元素节点，什么都不需要转换，因为这种情况在运行时可以直接设置元素的 textContent 来更新文本。</span>\n</div></li><li><div class=\"code-word\">        (children.length === <span class=\"hljs-number\">1</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">          (node.type === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ROOT */</span> ||\n</div></li><li><div class=\"code-word\">            (node.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">              node.tagType === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ELEMENT */</span>)))) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 为子文本节点创建一个调用函数表达式的代码生成节点</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> child = children[i]\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (isText(child) || child.type === <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* COMPOUND_EXPRESSION */</span>) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">const</span> callArgs = []\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 为 createTextVNode 添加执行参数</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> (child.type !== <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span> || child.content !== <span class=\"hljs-string\">' '</span>) {\n</div></li><li><div class=\"code-word\">            callArgs.push(child)\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 标记动态文本</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> (!context.ssr &amp;&amp; child.type !== <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span>) {\n</div></li><li><div class=\"code-word\">            callArgs.push(\\`${<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>} <span class=\"hljs-comment\">/* ${PatchFlagNames[1 /* TEXT */</span>]} */\\`)\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">          children[i] = {\n</div></li><li><div class=\"code-word\">            type: <span class=\"hljs-number\">12</span> <span class=\"hljs-comment\">/* TEXT_CALL */</span>,\n</div></li><li><div class=\"code-word\">            content: child,\n</div></li><li><div class=\"code-word\">            loc: child.loc,\n</div></li><li><div class=\"code-word\">            codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23717\">\n                      transformText 函数只处理根节点、元素节点、 v-for 以及 v-if\n                      分支相关的节点，它也会返回一个退出函数，因为 transformText\n                      要保证所有表达式节点都已经被处理才执行转换逻辑。\n                    </p>\n                    <p data-nodeid=\"23718\">\n                      transformText\n                      主要的目的就是合并一些相邻的文本节点，然后为内部每一个文本节点创建一个代码生成节点。\n                    </p>\n                    <p data-nodeid=\"23719\">\n                      在内部，静态文本节点和动态插值节点都被看作是一个文本节点，所以函数首先遍历节点的子节点，然后把子节点中的相邻文本节点合并成一个。\n                    </p>\n                    <p data-nodeid=\"23720\">\n                      比如示例中的文本节点：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"23820\"\n                        >&lt;p&gt;hello {{ msg + test }}&lt;/p&gt;</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"23721\">\n                      在转换之前，p 节点对应的 children\n                      数组有两个元素，第一个是纯文本节点，第二个是一个插值节点，这个数组也是前面提到的表达式节点转换后的结果：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">2</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"hello \"</span>,\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">5</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"content\"</span>: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">8</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"children\"</span>: [\n</div></li><li><div class=\"code-word\">        {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">4</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isConstant\"</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"_ctx.msg\"</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isStatic\"</span>: <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">        },\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\" + \"</span>,\n</div></li><li><div class=\"code-word\">        {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">4</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isConstant\"</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"_ctx.test\"</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"isStatic\"</span>: <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      ],\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"identifiers\"</span>: []\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">]\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23723\">\n                      转换后，这两个文本节点被合并成一个复合表达式节点，结果如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">8</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"children\"</span>: [\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">2</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"hello \"</span>,\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\" + \"</span>,\n</div></li><li><div class=\"code-word\">      {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">5</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"content\"</span>: {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">8</span>,\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"children\"</span>: [\n</div></li><li><div class=\"code-word\">            {\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">4</span>,\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-string\">\"isConstant\"</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"_ctx.msg\"</span>,\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-string\">\"isStatic\"</span>: <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">            },\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-string\">\" + \"</span>,\n</div></li><li><div class=\"code-word\">            {\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">4</span>,\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-string\">\"isConstant\"</span>: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"_ctx.test\"</span>,\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-string\">\"isStatic\"</span>: <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">          ],\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">\"identifiers\"</span>: []\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    ]\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">]\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23725\">\n                      合并完子文本节点后，接着判断如果是一个只带有单个文本子元素的纯元素节点，则什么都不需要转换，因为这种情况在运行时可以直接设置元素的\n                      textContent 来更新文本。\n                    </p>\n                    <p data-nodeid=\"23726\">\n                      最后就是去处理节点包含文本子节点且多个子节点的情况，举个例子：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;p&gt;\n</div></li><li><div class=\"code-word\">  hello {{ msg + test }}\n</div></li><li><div class=\"code-word\">  &lt;a href=<span class=\"hljs-string\">\"foo\"</span>/&gt;\n</div></li><li><div class=\"code-word\">  hi\n</div></li><li><div class=\"code-word\">&lt;/p&gt;\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23728\">\n                      上述 p 标签的子节点经过前面的文本合并流程后，还有 3\n                      个子节点。针对这种情况，我们可以遍历子节点，找到所有的文本节点或者是复合表达式节点，然后为这些子节点通过\n                      createCallExpression\n                      创建一个调用函数表达式的代码生成节点。\n                    </p>\n                    <p data-nodeid=\"23729\">\n                      我们来看 createCallExpression 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createCallExpression</span><span class=\"hljs-params\">(callee, args = [], loc = locStub)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-number\">14</span> <span class=\"hljs-comment\">/* JS_CALL_EXPRESSION */</span>,\n</div></li><li><div class=\"code-word\">    loc,\n</div></li><li><div class=\"code-word\">    callee,\n</div></li><li><div class=\"code-word\">    arguments: args\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23731\">\n                      createCallExpression 的实现很简单，就是返回一个类型为\n                      JS_CALL_EXPRESSION 的对象，它包含了执行的函数名和参数。\n                    </p>\n                    <p data-nodeid=\"23732\">\n                      这里，针对我们创建的函数表达式所生成的节点，它对应的函数名是\n                      createTextVNode，参数 callArgs 是子节点本身\n                      child，如果是动态插值节点，那么参数还会多一个 TEXT 的\n                      patchFlag。\n                    </p>\n                    <h4 data-nodeid=\"23733\">v-if 节点转换函数</h4>\n                    <p data-nodeid=\"23734\">\n                      接下来，我们来看一下 v-if 节点转换函数的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> transformIf = createStructuralDirectiveTransform(/^(<span class=\"hljs-keyword\">if</span>|<span class=\"hljs-keyword\">else</span>|<span class=\"hljs-keyword\">else</span>-<span class=\"hljs-keyword\">if</span>)$/, (node, dir, context) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> processIf(node, dir, context, (ifNode, branch, isRoot) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> () =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 退出回调函数，当所有子节点转换完成执行</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23736\">\n                      在分析函数的实现前，我们先来看一下 v-if\n                      节点转换的目的，为了方便你的理解，我还是通过示例来说明：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;hello v-<span class=\"hljs-keyword\">if</span>=<span class=\"hljs-string\">\"flag\"</span>&gt;&lt;/hello&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>hello {{ msg + test }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23738\">\n                      在 parse 阶段，这个模板解析生成的 AST 节点如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">[\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"children\"</span>: [],\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"codegenNode\"</span>: <span class=\"hljs-literal\">undefined</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"isSelfClosing\"</span>: <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"ns\"</span>: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"props\"</span>: [{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">7</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"if\"</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"exp\"</span>: {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">4</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"content\"</span>: <span class=\"hljs-string\">\"flag\"</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"isConstant\"</span>: <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">\"isStatic\"</span>: <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"arg\"</span>: <span class=\"hljs-literal\">undefined</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"modifiers\"</span>: []\n</div></li><li><div class=\"code-word\">    }],\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"tag\"</span>: <span class=\"hljs-string\">\"hello\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"tagType\"</span>: <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"children\"</span>: [\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 子节点</span>\n</div></li><li><div class=\"code-word\">    ],\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"codegenNode\"</span>: <span class=\"hljs-literal\">undefined</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"isSelfClosing\"</span>: <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"ns\"</span>: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"props\"</span>: [{ \n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">7</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"else\"</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"exp\"</span>: <span class=\"hljs-literal\">undefined</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"arg\"</span>: <span class=\"hljs-literal\">undefined</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"modifiers\"</span>: []\n</div></li><li><div class=\"code-word\">    }],\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"tag\"</span>: <span class=\"hljs-string\">\"div\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"tagType\"</span>: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">]\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23740\">\n                      v-if 指令用于条件性地渲染一块内容，显然上述 AST\n                      节点对于最终去生成条件的代码而言，是不够语义化的，于是我们需要对它们做一层转换，使其成为语义化强的代码生成节点。\n                    </p>\n                    <p data-nodeid=\"23741\">\n                      现在我们回过头看 transformIf 的实现，它是通过\n                      createStructuralDirectiveTransform\n                      函数创建的一个结构化指令的转换函数，在 Vue.js\n                      中，v-if、v-else-if、v-else 和 v-for\n                      这些都属于结构化指令，因为它们能影响代码的组织结构。\n                    </p>\n                    <p data-nodeid=\"23742\">\n                      我们来看一下 createStructuralDirectiveTransform 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createStructuralDirectiveTransform</span><span class=\"hljs-params\">(name, fn)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> matches = isString(name)\n</div></li><li><div class=\"code-word\">    ? (n) =&gt; n === name\n</div></li><li><div class=\"code-word\">    : (n) =&gt; name.test(n)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (node, context) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 只处理元素节点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (node.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> { props } = node\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 结构化指令的转换与插槽无关，插槽相关处理逻辑在 vSlot.ts 中</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (node.tagType === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* TEMPLATE */</span> &amp;&amp; props.some(isVSlot)) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> exitFns = []\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; props.length; i++) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> prop = props[i]\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (prop.type === <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* DIRECTIVE */</span> &amp;&amp; matches(prop.name)) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 删除结构指令以避免无限递归</span>\n</div></li><li><div class=\"code-word\">          props.splice(i, <span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">          i--\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">const</span> onExit = fn(node, prop, context)\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> (onExit)\n</div></li><li><div class=\"code-word\">            exitFns.push(onExit)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> exitFns\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23744\">\n                      可以看到，createStructuralDirectiveTransform 接受 2\n                      个参数，第一个 name 是指令的名称，第二个 fn\n                      是构造转换退出函数的方法。\n                    </p>\n                    <p data-nodeid=\"23745\">\n                      createStructuralDirectiveTransform\n                      最后会返回一个函数，在我们的场景下，这个函数就是\n                      transformIf 转换函数。\n                    </p>\n                    <p data-nodeid=\"23746\">\n                      我们进一步看这个函数的实现，它只处理元素节点，这个很好理解，因为只有元素节点才会有\n                      v-if 指令，接着会解析这个节点的 props 属性，如果发现 props\n                      包含 if 属性，也就是节点拥有 v-if 指令，那么先从 props\n                      删除这个结构化指令防止无限递归，然后执行 fn\n                      获取对应的退出函数，最后将这个退出函数返回。\n                    </p>\n                    <p data-nodeid=\"23747\">\n                      接着我们来看 fn 的实现，在我们这个场景下 fn\n                      对应的是前面传入的匿名函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">(node, dir, context) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> processIf(node, dir, context, (ifNode, branch, isRoot) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> () =&gt; {\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-comment\">// 退出回调函数，当所有子节点转换完成执行</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23749\">\n                      可以看出，这个匿名函数内部执行了 processIf 函数，它会先对\n                      v-if\n                      和它的相邻节点做转换，然后返回一个退出函数，在它们的子节点都转换完毕后执行。\n                    </p>\n                    <p data-nodeid=\"23750\">我们来看 processIf 函数的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">processIf</span><span class=\"hljs-params\">(node, dir, context, processCodegen)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (dir.name === <span class=\"hljs-string\">'if'</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 创建分支节点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> branch = createIfBranch(node, dir)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 创建 IF 节点，替换当前节点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> ifNode = {\n</div></li><li><div class=\"code-word\">      type: <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>,\n</div></li><li><div class=\"code-word\">      loc: node.loc,\n</div></li><li><div class=\"code-word\">      branches: [branch]\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    context.replaceNode(ifNode)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (processCodegen) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> processCodegen(ifNode, branch, <span class=\"hljs-keyword\">true</span>)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理 v-if 相邻节点，比如 v-else-if 和 v-else</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23752\">\n                      processIf 主要就是用来处理 v-if 节点以及 v-if\n                      的相邻节点，比如 v-else-if 和\n                      v-else，并且它们会走不同的处理逻辑。\n                    </p>\n                    <p data-nodeid=\"23753\">\n                      我们先来看 v-if 的处理逻辑。首先，它会执行 createIfBranch\n                      去创建一个分支节点：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createIfBranch</span><span class=\"hljs-params\">(node, dir)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">/* IF_BRANCH */</span>,\n</div></li><li><div class=\"code-word\">    loc: node.loc,\n</div></li><li><div class=\"code-word\">    condition: dir.name === <span class=\"hljs-string\">'else'</span> ? undefined : dir.exp,\n</div></li><li><div class=\"code-word\">    children: node.tagType === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* TEMPLATE */</span> ? node.children : [node]\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23755\">\n                      这个分支节点很好理解，因为 v-if\n                      节点内部的子节点可以属于一个分支，v-else-if 和 v-else\n                      节点内部的子节点也都可以属于一个分支，而最终页面渲染执行哪个分支，这取决于哪个分支节点的\n                      condition 为 true。\n                    </p>\n                    <p data-nodeid=\"23756\">\n                      所以分支节点返回的对象，就包含了 condition\n                      条件，以及它的子节点 children。注意，<strong\n                        data-nodeid=\"23859\"\n                        >如果节点 node 不是 template</strong\n                      >，<strong data-nodeid=\"23860\"\n                        >那么 children 指向的就是这个单个 node\n                        构造的数组</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"23757\">\n                      接下来它会创建 IF 节点替换当前节点，IF 节点拥有 branches\n                      属性，包含我们前面创建的分支节点，显然，相对于原节点，IF\n                      节点的语义化更强，更利于后续生成条件表达式代码。\n                    </p>\n                    <p data-nodeid=\"23758\">\n                      最后它会执行 processCodegen\n                      创建退出函数。我们先不着急去分析退出函数的创建过程，先把\n                      v-if 相邻节点的处理逻辑分析完：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">processIf</span><span class=\"hljs-params\">(node, dir, context, processCodegen)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (dir.name === <span class=\"hljs-string\">'if'</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理 v-if 节点</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理 v-if 相邻节点，比如 v-else-if 和 v-else</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> siblings = context.parent.children\n</div></li><li><div class=\"code-word\">    let i = siblings.indexOf(node)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">while</span> (i-- &gt;= -<span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> sibling = siblings[i]\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (sibling &amp;&amp; sibling.type === <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 把节点移动到 IF 节点的 branches 中</span>\n</div></li><li><div class=\"code-word\">        context.removeNode()\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> branch = createIfBranch(node, dir)\n</div></li><li><div class=\"code-word\">        sibling.branches.push(branch)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> onExit = processCodegen &amp;&amp; processCodegen(sibling, branch, <span class=\"hljs-keyword\">false</span>)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 因为分支已被删除，所以它的子节点需要在这里遍历</span>\n</div></li><li><div class=\"code-word\">        traverseNode(branch, context)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 执行退出函数</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (onExit)\n</div></li><li><div class=\"code-word\">          onExit()\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 恢复 currentNode 为 null，因为它已经被移除</span>\n</div></li><li><div class=\"code-word\">        context.currentNode = <span class=\"hljs-keyword\">null</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        context.onError(createCompilerError(<span class=\"hljs-number\">28</span> <span class=\"hljs-comment\">/* X_V_ELSE_NO_ADJACENT_IF */</span>, node.loc))\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23760\">\n                      这段处理逻辑就是从当前节点往前面的兄弟节点遍历，找到 v-if\n                      节点后，把当前节点删除，然后根据当前节点创建一个分支节点，把这个分支节点添加到前面创建的\n                      IF 节点的 branches\n                      中。此外，由于这个节点已经删除，那么需要在这里把这个节点的子节点通过\n                      traverseNode 遍历一遍。\n                    </p>\n                    <p data-nodeid=\"23761\">\n                      这么处理下来，就相当于完善了 IF 节点的信息了，IF 节点的\n                      branches 就包含了所有分支节点了。\n                    </p>\n                    <p data-nodeid=\"23762\">\n                      那么至此，进入 v-if、v-else-if、v-else\n                      这些节点的转换逻辑我们就分析完毕了，即最终创建了一个 IF\n                      节点，它包含了所有的分支节点。\n                    </p>\n                    <p data-nodeid=\"23763\">\n                      接下来，我们再来分析这个退出函数的逻辑：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">(node, dir, context) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> processIf(node, dir, context, (ifNode, branch, isRoot) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 退出回调函数，当所有子节点转换完成执行</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> () =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (isRoot) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// v-if 节点的退出函数</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 创建 IF 节点的 codegenNode</span>\n</div></li><li><div class=\"code-word\">        ifNode.codegenNode = createCodegenNodeForBranch(branch, <span class=\"hljs-number\">0</span>, context)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// v-else-if、v-else 节点的退出函数</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 将此分支的 codegenNode 附加到 上一个条件节点的 codegenNode 的 alternate 中</span>\n</div></li><li><div class=\"code-word\">        let parentCondition = ifNode.<span class=\"hljs-function\">codegenNode\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-title\">while</span> <span class=\"hljs-params\">(parentCondition.alternate.type ===\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-number\">19</span> <span class=\"hljs-comment\">/* JS_CONDITIONAL_EXPRESSION */</span>) {\n</div></li><li><div class=\"code-word\">          parentCondition = parentCondition.alternate\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 更新候选节点</span>\n</div></li><li><div class=\"code-word\">        parentCondition.alternate = createCodegenNodeForBranch(branch, ifNode.branches.length - <span class=\"hljs-number\">1</span>, context)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23765\">\n                      可以看到，当 v-if 节点执行退出函数时，会通过\n                      createCodegenNodeForBranch 创建 IF 分支节点的\n                      codegenNode，我们来看一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createCodegenNodeForBranch</span><span class=\"hljs-params\">(branch, index, context)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (branch.condition) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> createConditionalExpression(branch.condition, createChildrenCodegenNode(branch, index, context),\n</div></li><li><div class=\"code-word\">      createCallExpression(context.helper(CREATE_COMMENT), [\n</div></li><li><div class=\"code-word\">        (process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) ? <span class=\"hljs-string\">'\"v-if\"'</span> : <span class=\"hljs-string\">'\"\"'</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">'true'</span>\n</div></li><li><div class=\"code-word\">      ]))\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> createChildrenCodegenNode(branch, index, context)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23767\">\n                      当分支节点存在 condition 的时候，比如 v-if、和\n                      v-else-if，它通过 createConditionalExpression\n                      返回一个条件表达式节点：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createConditionalExpression</span><span class=\"hljs-params\">(test, consequent, alternate, newline = <span class=\"hljs-keyword\">true</span>)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-number\">19</span> <span class=\"hljs-comment\">/* JS_CONDITIONAL_EXPRESSION */</span>,\n</div></li><li><div class=\"code-word\">    test,\n</div></li><li><div class=\"code-word\">    consequent,\n</div></li><li><div class=\"code-word\">    alternate,\n</div></li><li><div class=\"code-word\">    newline,\n</div></li><li><div class=\"code-word\">    loc: locStub\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23769\">\n                      其中 consequent 在这里是 IF 主 branch\n                      的子节点对应的代码生成节点，alternate 是后补 branch\n                      子节点对应的代码生成节点。\n                    </p>\n                    <p data-nodeid=\"23770\">\n                      接着，我们来看一下 createChildrenCodegenNode 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createChildrenCodegenNode</span><span class=\"hljs-params\">(branch, index, context)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { helper } = context\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 根据 index 创建 key 属性</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> keyProperty = createObjectProperty(\\`key\\`, createSimpleExpression(index + <span class=\"hljs-string\">''</span>, <span class=\"hljs-keyword\">false</span>))\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { children } = branch\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> firstChild = children[<span class=\"hljs-number\">0</span>]\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> needFragmentWrapper = children.length !== <span class=\"hljs-number\">1</span> || firstChild.type !== <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (needFragmentWrapper) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (children.length === <span class=\"hljs-number\">1</span> &amp;&amp; firstChild.type === <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* FOR */</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> vnodeCall = firstChild.<span class=\"hljs-function\">codegenNode\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-title\">injectProp</span><span class=\"hljs-params\">(vnodeCall, keyProperty, context)</span>\n</div></li><li><div class=\"code-word\">      return vnodeCall\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> createVNodeCall(context, helper(FRAGMENT), createObjectExpression([keyProperty]), children, \\`${<span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* STABLE_FRAGMENT */</span>} <span class=\"hljs-comment\">/* ${PatchFlagNames[64 /* STABLE_FRAGMENT */</span>]} */\\`, undefined, undefined, <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-keyword\">false</span>, branch.loc)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  } \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> vnodeCall = firstChild\n</div></li><li><div class=\"code-word\">      .codegenNode;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 把 createVNode 改变为 createBlock</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (vnodeCall.type === <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 组件节点的 children 会被视为插槽，不需要添加 block</span>\n</div></li><li><div class=\"code-word\">      (firstChild.tagType !== <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* COMPONENT */</span> ||\n</div></li><li><div class=\"code-word\">        vnodeCall.tag === TELEPORT)) {\n</div></li><li><div class=\"code-word\">      vnodeCall.isBlock = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 创建 block 的辅助代码</span>\n</div></li><li><div class=\"code-word\">      helper(OPEN_BLOCK)\n</div></li><li><div class=\"code-word\">      helper(CREATE_BLOCK)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 给 branch 注入 key 属性</span>\n</div></li><li><div class=\"code-word\">    injectProp(vnodeCall, keyProperty, context)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> vnodeCall\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23772\">\n                      createChildrenCodegenNode\n                      主要就是判断每个分支子节点是不是一个\n                      vnodeCall，如果这个子节点不是组件节点的话，则把它转变成一个\n                      BlockCall，也就是让 v-if 的每一个分支都可以创建一个\n                      Block。\n                    </p>\n                    <p data-nodeid=\"23773\">\n                      这个行为是很好理解的，因为 v-if\n                      是条件渲染的，我们知道在某些条件下某些分支是不会渲染的，那么它内部的动态节点就不能添加到外部的\n                      Block 中的，所以它就需要单独创建一个 Block\n                      来维护分支内部的动态节点，这样也就构成了 Block tree。\n                    </p>\n                    <p data-nodeid=\"23774\">\n                      为了直观让你感受 v-if\n                      节点最终转换的结果，我们来看前面示例转换后的结果，最终转换生成的\n                      IF 节点对象大致如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">9</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"branches\"</span>: [{\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">10</span>,\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-attr\">\"children\"</span>: [{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"tagType\"</span>: <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"tag\"</span>: <span class=\"hljs-string\">\"hello\"</span>\n</div></li><li><div class=\"code-word\">     }],\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-attr\">\"condition\"</span>: {\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">4</span>,\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"_ctx.flag\"</span>\n</div></li><li><div class=\"code-word\">     }\n</div></li><li><div class=\"code-word\">  },{\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">10</span>,\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-attr\">\"children\"</span>: [{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"tagType\"</span>: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"tag\"</span>: <span class=\"hljs-string\">\"hello\"</span>\n</div></li><li><div class=\"code-word\">     }],\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-attr\">\"condition\"</span>: {\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">4</span>,\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"_ctx.flag\"</span>\n</div></li><li><div class=\"code-word\">     }\n</div></li><li><div class=\"code-word\">  }],\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"codegenNode\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">19</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"consequent\"</span>: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">13</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"tag\"</span>: <span class=\"hljs-string\">\"_component_hello\"</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"children\"</span>: undefined,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"directives\"</span>: undefined,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"dynamicProps\"</span>: undefined,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"isBlock\"</span>: <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"patchFlag\"</span>: undefined\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"alternate\"</span>: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">13</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"tag\"</span>: <span class=\"hljs-string\">\"_component_hello\"</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"children\"</span>: [\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 子节点</span>\n</div></li><li><div class=\"code-word\">      ],\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"directives\"</span>: undefined,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"dynamicProps\"</span>: undefined,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"isBlock\"</span>: <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"patchFlag\"</span>: undefined\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"23776\">\n                      可以看到，相比原节点，转换后的 IF\n                      节点无论是在语义化还是在信息上，都更加丰富，我们可以依据它在代码生成阶段生成所需的代码。\n                    </p>\n                    <h3 data-nodeid=\"23777\">静态提升</h3>\n                    <p data-nodeid=\"23778\">\n                      节点转换完毕后，接下来会判断编译配置中是否配置了\n                      hoistStatic，如果是就会执行 hoistStatic 做静态提升：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (options.hoistStatic) {\n</div></li><li><div class=\"code-word\">  hoistStatic(root, context)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23780\">\n                      静态提升也是 Vue.js 3.0\n                      在编译阶段设计了一个优化策略，为了便于你理解，我先举个简单的例子：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;p&gt;&gt;hello {{ msg + test }}&lt;/p&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23782\">\n                      我们为它配置了\n                      hoistStatic，经过编译后，它的代码就变成了这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { toDisplayString as _toDisplayString, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createBlock as _createBlock } from <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_1 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-string\">\"static\"</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> _hoisted_2 = <span class=\"hljs-comment\">/*#__PURE__*/</span>_createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-string\">\"static\"</span>, -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export function <span class=\"hljs-title\">render</span><span class=\"hljs-params\">(_ctx, _cache)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(_Fragment, <span class=\"hljs-keyword\">null</span>, [\n</div></li><li><div class=\"code-word\">    _createVNode(<span class=\"hljs-string\">\"p\"</span>, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-string\">\"hello \"</span> + _toDisplayString(_ctx.msg + _ctx.test), <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>),\n</div></li><li><div class=\"code-word\">    _hoisted_1,\n</div></li><li><div class=\"code-word\">    _hoisted_2\n</div></li><li><div class=\"code-word\">  ], <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* STABLE_FRAGMENT */</span>))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23784\">\n                      这里，我们先忽略 openBlock、Fragment\n                      ，我会在代码生成章节详细说明，重点看一下 _hoisted_1 和\n                      _hoisted_2 这两个变量，它们分别对应模板中两个静态 p\n                      标签生成的 vnode，可以发现它的创建是在 render\n                      函数外部执行的。<br />\n                      这样做的好处是，不用每次在 render 阶段都执行一次\n                      createVNode 创建 vnode 对象，直接用之前在内存中创建好的\n                      vnode 即可。\n                    </p>\n                    <p data-nodeid=\"23785\">那么为什么叫静态提升呢？</p>\n                    <p data-nodeid=\"23786\">\n                      因为这些静态节点不依赖动态数据，一旦创建了就不会改变，所以只有静态节点才能被提升到外部创建。\n                    </p>\n                    <p data-nodeid=\"23787\">\n                      了解以上背景知识后，我们接下来看一下静态提升的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">hoistStatic</span><span class=\"hljs-params\">(root, context)</span> </span>{\n</div></li><li><div class=\"code-word\">  walk(root, context, <span class=\"hljs-keyword\">new</span> Map(),\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// Root node is unfortunately non-hoistable due to potential parent fallthrough attributes.</span>\n</div></li><li><div class=\"code-word\">    isSingleElementRoot(root, root.children[<span class=\"hljs-number\">0</span>]));\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">walk</span><span class=\"hljs-params\">(node, context, resultCache, doNotHoistNode = <span class=\"hljs-keyword\">false</span>)</span> </span>{\n</div></li><li><div class=\"code-word\">  let hasHoistedNode = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 是否包含运行时常量</span>\n</div></li><li><div class=\"code-word\">  let hasRuntimeConstant = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { children } = <span class=\"hljs-function\">node\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">for</span> <span class=\"hljs-params\">(let i = <span class=\"hljs-number\">0</span>; i &lt; children.length; i++)</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> child = children[i]\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 只有普通元素和文本节点才能被静态提升</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (child.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">      child.tagType === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-function\">let staticType\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(!doNotHoistNode &amp;&amp;\n</span></div></li><li><div class=\"code-word\">        // 获取静态节点的类型，如果是元素，则递归检查它的子节点\n</div></li><li><div class=\"code-word\">        (staticType = getStaticType(child, resultCache)) &gt; 0) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (staticType === <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* HAS_RUNTIME_CONSTANT */</span>) {\n</div></li><li><div class=\"code-word\">          hasRuntimeConstant = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 更新 patchFlag</span>\n</div></li><li><div class=\"code-word\">        child.codegenNode.patchFlag =\n</div></li><li><div class=\"code-word\">          -<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* HOISTED */</span> + ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) ? \\` <span class=\"hljs-comment\">/* HOISTED */</span>\\` : \\`\\`)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 更新节点的 codegenNode</span>\n</div></li><li><div class=\"code-word\">        child.codegenNode = context.hoist(child.codegenNode)\n</div></li><li><div class=\"code-word\">        hasHoistedNode = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">continue</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 节点可能会包含一些动态子节点，但它的静态属性还是可以被静态提升</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> codegenNode = child.<span class=\"hljs-function\">codegenNode\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(codegenNode.type === <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span>)</span> {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">const</span> flag = getPatchFlag(codegenNode)\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> ((!flag ||\n</div></li><li><div class=\"code-word\">            flag === <span class=\"hljs-number\">512</span> <span class=\"hljs-comment\">/* NEED_PATCH */</span> ||\n</div></li><li><div class=\"code-word\">            flag === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>) &amp;&amp;\n</div></li><li><div class=\"code-word\">            !hasDynamicKeyOrRef(child) &amp;&amp;\n</div></li><li><div class=\"code-word\">            !hasCachedProps()) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">const</span> props = getNodeProps(child)\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (props) {\n</div></li><li><div class=\"code-word\">              codegenNode.props = context.hoist(props)\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (child.type === <span class=\"hljs-number\">12</span> <span class=\"hljs-comment\">/* TEXT_CALL */</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 文本节点也可以静态提升</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> staticType = getStaticType(child.content, resultCache)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (staticType &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (staticType === <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* HAS_RUNTIME_CONSTANT */</span>) {\n</div></li><li><div class=\"code-word\">          hasRuntimeConstant = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        child.codegenNode = context.hoist(child.codegenNode)\n</div></li><li><div class=\"code-word\">        hasHoistedNode = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (child.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 递归遍历子节点</span>\n</div></li><li><div class=\"code-word\">      walk(child, context, resultCache)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (child.type === <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* FOR */</span>) {\n</div></li><li><div class=\"code-word\">      walk(child, context, resultCache, child.children.length === <span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (child.type === <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; child.branches.length; i++) {\n</div></li><li><div class=\"code-word\">        walk(child.branches[i], context, resultCache, child.branches[i].children.length === <span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!hasRuntimeConstant &amp;&amp; hasHoistedNode &amp;&amp; context.transformHoist) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果编译配置了 transformHoist，则执行</span>\n</div></li><li><div class=\"code-word\">    context.transformHoist(children, context, node)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23789\">\n                      可以看到，hoistStatic\n                      主要就是从根节点开始，通过递归的方式去遍历节点，只有普通元素和文本节点才能被静态提升，所以针对这些节点，这里通过\n                      getStaticType\n                      去获取静态类型，如果节点是一个元素类型，getStaticType\n                      内部还会递归判断它的子节点的静态类型。\n                    </p>\n                    <p data-nodeid=\"23790\">\n                      虽然有的节点包含一些动态子节点，但它本身的静态属性还是可以被静态提升的。\n                    </p>\n                    <p data-nodeid=\"23791\">\n                      注意，<strong data-nodeid=\"23912\"\n                        >如果 getStaticType 返回的 staticType 的值是 2</strong\n                      >，<strong data-nodeid=\"23913\"\n                        >则表明它是一个运行时常量</strong\n                      >，<strong data-nodeid=\"23914\"\n                        >由于它的值在运行时才能被确定</strong\n                      >，<strong data-nodeid=\"23915\"\n                        >所以是不能静态提升的</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"23792\">\n                      如果节点满足可以被静态提升的条件，节点对应的 codegenNode\n                      会通过执行 context.hoist 修改为一个简单表达式节点：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">hoist</span><span class=\"hljs-params\">(exp)</span> </span>{\n</div></li><li><div class=\"code-word\">  context.hoists.push(exp);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> identifier = createSimpleExpression(\\`_hoisted_${context.hoists.length}\\`, <span class=\"hljs-keyword\">false</span>, exp.loc, <span class=\"hljs-keyword\">true</span>)\n</div></li><li><div class=\"code-word\">  identifier.hoisted = exp\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> identifier\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">child.codegenNode = context.hoist(child.codegenNode)\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23794\">\n                      改动后的 codegenNode\n                      会在生成代码阶段帮助我们生成静态提升的相关代码。\n                    </p>\n                    <h3 data-nodeid=\"23795\">createRootCodegen</h3>\n                    <p data-nodeid=\"23796\">\n                      完成静态提升后，我们来到了 AST 转换的最后一步，即<strong\n                        data-nodeid=\"23924\"\n                        >创建根节点的代码生成节点</strong\n                      >。我们先来看一下 createRootCodegen 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createRootCodegen</span><span class=\"hljs-params\">(root, context)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { helper } = context;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { children } = root;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> child = children[<span class=\"hljs-number\">0</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (children.length === <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果子节点是单个元素节点，则将其转换成一个 block</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (isSingleElementRoot(root, child) &amp;&amp; child.codegenNode) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> codegenNode = child.codegenNode;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (codegenNode.type === <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span>) {\n</div></li><li><div class=\"code-word\">        codegenNode.isBlock = <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">        helper(OPEN_BLOCK);\n</div></li><li><div class=\"code-word\">        helper(CREATE_BLOCK);\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      root.codegenNode = codegenNode;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      root.codegenNode = child;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (children.length &gt; <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果子节点是多个节点，则返回一个 fragement 的代码生成节点</span>\n</div></li><li><div class=\"code-word\">    root.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, root.children, \\`${<span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* STABLE_FRAGMENT */</span>} <span class=\"hljs-comment\">/* ${PatchFlagNames[64 /* STABLE_FRAGMENT */</span>]} */\\`, undefined, undefined, <span class=\"hljs-keyword\">true</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23798\">\n                      createRootCodegen 做的事情很简单，就是为 root 这个虚拟的\n                      AST 根节点创建一个代码生成节点，如果 root 的子节点\n                      children 是单个元素节点，则将其转换成一个 Block，把这个\n                      child 的 codegenNode 赋值给 root 的 codegenNode。\n                    </p>\n                    <p data-nodeid=\"39721\" class=\"\">\n                      如果 root 的子节点 children 是多个节点，则返回一个\n                      fragement 的代码生成节点，并赋值给 root 的 codegenNode。\n                    </p>\n                    <p data-nodeid=\"39722\">\n                      这里，创建 codegenNode 就是为了后续生成代码时使用。\n                    </p>\n                    <p data-nodeid=\"39723\">\n                      createRootCodegen 完成之后，接着把 transform 上下文在转换\n                      AST 节点过程中创建的一些变量赋值给 root\n                      节点对应的属性，在这里可以看一下这些属性：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">root.helpers</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-string\">...context.helpers</span>]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">root.components</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-string\">...context.components</span>]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">root.directives</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-string\">...context.directives</span>]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">root.imports</span> <span class=\"hljs-string\">=</span> [<span class=\"hljs-string\">...context.imports</span>]\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">root.hoists</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">context.hoists</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">root.temps</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">context.temps</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">root.cached</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">context.cached</span>\n</div></li></ol></code></pre>\n                    </div>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"23803\">\n                      这样后续在代码生成节点时，就可以通过 root\n                      这个根节点访问到这些变量了。\n                    </p>\n                    <h3 data-nodeid=\"23804\">总结</h3>\n                    <p data-nodeid=\"23805\">\n                      好的，到这里我们这一节的学习就结束啦，通过这节课的学习，你应该对\n                      AST 节点内部做了哪些转换有所了解。\n                    </p>\n                    <p data-nodeid=\"23806\">\n                      如果说 parse 阶段是一个词法分析过程，构造基础的 AST\n                      节点对象，那么 transform 节点就是语法分析阶段，把 AST\n                      节点做一层转换，构造出语义化更强，信息更加丰富的\n                      codegenCode，它在后续的代码生成阶段起着非常重要的作用。\n                    </p>\n                    <p data-nodeid=\"23807\">\n                      最后，给你留一道思考题目，我们已经知道静态提升的好处是，针对静态节点不用每次在\n                      render 阶段都执行一次 createVNode 创建 vnode\n                      对象，但它有没有成本呢？为什么？欢迎你在留言区与我分享。\n                    </p>\n                    <blockquote data-nodeid=\"23808\">\n                      <p data-nodeid=\"23809\">\n                        本节课的相关代码在源代码中的位置如下：<br />\n                        packages/compiler-core/src/ast.ts<br />\n                        packages/compiler-core/src/transform.ts<br />\n                        packages/compiler-core/src/transforms/transformText.ts<br />\n                        packages/compiler-core/src/transforms/vIf.ts<br />\n                        packages/compiler-core/src/transforms/hoistStatic.ts\n                      </p>\n                    </blockquote>\n            "}