{"title":"导读 1 | 前端基础知识体系之专业知识篇","context":"\n                    <p data-nodeid=\"3895\" class=\"\">\n                      在正式进入课程之前，我先结合前端面试考察，以关键知识点和问题的方式帮你厘清前端需要掌握的知识体系，这样你在学习的过程中就可以有个完整的知识框架。\n                    </p>\n                    <p data-nodeid=\"3896\">\n                      这篇课前导读的主要目的在于给你梳理知识体系，所以不会提供面试问题的具体答案和详细内容描述。你可以通过学习后续课时来找出答案，也可以针对提到的知识点和问题去进行深入学习和发散，或者是在留言区进行提问和交流，从而补齐自己缺失的知识和技能。\n                    </p>\n                    <p data-nodeid=\"3897\">\n                      首先，我们来看前端面试过程中核心基础的知识领域，包括三大块内容：\n                    </p>\n                    <ul data-nodeid=\"3898\">\n                      <li data-nodeid=\"3899\">\n                        <p data-nodeid=\"3900\">\n                          前端三件套 HTML/CSS/JavaScript；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3901\">\n                        <p data-nodeid=\"3902\">\n                          与 JavaScript 运行环境相关的浏览器和 Node.js；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3903\">\n                        <p data-nodeid=\"3904\">\n                          前端开发通用领域、网络、安全、算法和计算机通用知识。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3905\">\n                      下面，我们就开始逐一梳理核心知识点吧！\n                    </p>\n                    <h3 data-nodeid=\"3906\"></h3>\n                    <h3 data-nodeid=\"3907\">HTML 与 CSS</h3>\n                    <p data-nodeid=\"3908\">\n                      对于 HTML，面试官很多时候会考察 DOM 元素相关的问题，包括\n                      DOM 操作、事件冒泡/委托、虚拟 DOM 设计等内容。\n                    </p>\n                    <p data-nodeid=\"3909\">\n                      因此，关于 HTML 的内容更多是结合浏览器机制一起考察。\n                    </p>\n                    <p data-nodeid=\"3910\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/CC/CioPOWBvzl2AHqsCAACewh4zyOA873.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"3995\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8795\" class=\"\">\n                      其中，DOM 操作与性能问题、事件委托以及浏览器中对<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"8797\"\n                        >&lt;script&gt;</code\n                      >和<code data-backticks=\"1\" data-nodeid=\"8799\"\n                        >&lt;style&gt;</code\n                      >标签的处理过程，我将在01讲中进行讲解，其中也会稍微提到虚拟\n                      DOM 的内容。但对于虚拟 DOM\n                      设计存在的问题和各个框架是怎样进行优化的，我将在“17 |\n                      Angular/React/Vue 三大前端框架的设计特色”中介绍。\n                    </p>\n\n                    <p data-nodeid=\"3912\">\n                      接下来是 CSS，对于 CSS 的熟练程度会因人而异，面试官在面试\n                      1~3\n                      年经验的前端岗位候选人时会更多倾向于考察对页面布局原理的掌握，包括盒子模型、文档流、浮动布局等，以及常见页面布局的技巧，包括传统布局、Flex\n                      布局和 Grid 布局。\n                    </p>\n                    <p data-nodeid=\"3913\">\n                      同时，页面布局涉及浏览器的渲染过程，因此同样需要注意一些性能问题。\n                    </p>\n                    <p data-nodeid=\"3914\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/CC/CioPOWBvzmSAS5bvAACJzOs2jdU476.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"4011\"\n                      />\n                    </p>\n                    <p data-nodeid=\"13355\" class=\"\">\n                      有些时候，面试官也会通过让候选人编码实现某些样式/元素的方式，来考察对\n                      CSS\n                      的掌握程度，其中页面布局（居中、对齐等）便是比较常见的考察点。\n                    </p>\n\n                    <p data-nodeid=\"23897\" class=\"\">\n                      对于页面布局原理和常见页面布局的技巧，我将在 02\n                      课时中介绍，而关于浏览器的布局过程则会在 08\n                      课时中结合浏览器结构和运行机制一起介绍。\n                    </p>\n\n                    <p data-nodeid=\"3917\">\n                      从上述的面试点可以看出，<strong data-nodeid=\"4029\"\n                        >HTML 与 CSS\n                        的知识基本上围绕着设计原理和运行机制来考察</strong\n                      >，而对于具体的使用方式都很少会问到。所以 HTML/CSS\n                      的核心知识点不算多，我们课程中前面两讲基本上都有大致概括。\n                    </p>\n                    <h3 data-nodeid=\"3918\">JavaScript</h3>\n                    <p data-nodeid=\"3919\">\n                      关于 HTML 和 CSS\n                      的知识，并不是所有团队都会使用到。比如有些公司区分了重构岗位和前端岗位，其中重构岗位则专门负责页面样式的开发和调整，而前端岗位则主要负责逻辑实现。但前端开发不管去到哪，JavaScript\n                      永远都是开发工作中的核心。\n                    </p>\n                    <p data-nodeid=\"3920\">\n                      对于 JavaScript，面试官常常会考察 JavaScript\n                      语言的设计（如原型继承、单线程），以及 JavaScript\n                      的运行过程（比如作用域和闭包、执行上下文与<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"4033\"\n                        >this</code\n                      >、Event Loop 等）。这些内容主要是为了考察候选人对<strong\n                        data-nodeid=\"4039\"\n                        >JavaScript 语言本身特点的理解</strong\n                      >，通常来说可能会包括这些内容。\n                    </p>\n                    <p data-nodeid=\"3921\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/CC/CioPOWBvzmyAKrVwAAF5woU2E9Y296.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"4042\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3922\">\n                      关于 JavaScript 语言的设计及其运行过程，我将在课程的第 3 ~\n                      5 讲中分别进行介绍，你也可以从中思考出这些题目的答案。\n                    </p>\n                    <p data-nodeid=\"3923\">\n                      除此之外，很多时候面试官会以写代码的形式来对 JavaScript\n                      中一些知识点进行考察，例如：\n                    </p>\n                    <ul data-nodeid=\"3924\">\n                      <li data-nodeid=\"3925\">\n                        <p data-nodeid=\"3926\">\n                          手写代码实现<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"4048\"\n                            >call</code\n                          >/<code data-backticks=\"1\" data-nodeid=\"4050\"\n                            >apply</code\n                          >/<code data-backticks=\"1\" data-nodeid=\"4052\"\n                            >bind</code\n                          >。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3927\">\n                        <p data-nodeid=\"3928\">\n                          JavaScript 中<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"4055\"\n                            >0.1+0.2</code\n                          >为什么等于<code data-backticks=\"1\" data-nodeid=\"4057\"\n                            >0.30000000000000004</code\n                          >，如何通过代码解决这个问题？\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3929\">\n                      除此之外，现在越来越多的团队也会使用 ES6/ES7\n                      相关的语法，常见的包括箭头函数、<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"4060\"\n                        >Promise</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"4062\">async</code\n                      >/<code data-backticks=\"1\" data-nodeid=\"4064\">await</code\n                      >、<code data-backticks=\"1\" data-nodeid=\"4066\">class</code\n                      >等。ES6/ES7\n                      基本上都是语法糖，最终在浏览器中运行的很多时候都是最终编译为\n                      ES5\n                      的代码，因此面试官也常常会考察这些语法糖设计的原因，以及具体的实现，包括：\n                    </p>\n                    <ul data-nodeid=\"3930\">\n                      <li data-nodeid=\"3931\">\n                        <p data-nodeid=\"3932\">\n                          手写代码实现<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"4069\"\n                            >Promise</code\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3933\">\n                        <p data-nodeid=\"3934\">\n                          为什么要使用<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"4072\"\n                            >async</code\n                          >、<code data-backticks=\"1\" data-nodeid=\"4074\"\n                            >await</code\n                          >；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3935\">\n                        <p data-nodeid=\"3936\">\n                          怎样让 ES6/ES7 代码可以跑在各个浏览器中（考察 Babel 与\n                          polyfill）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3937\">\n                        <p data-nodeid=\"3938\">\n                          介绍下<code data-backticks=\"1\" data-nodeid=\"4078\"\n                            >Set</code\n                          >和<code data-backticks=\"1\" data-nodeid=\"4080\"\n                            >Map</code\n                          >数据结构；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3939\">\n                        <p data-nodeid=\"3940\">\n                          Javascript 是怎么实现<code\n                            data-backticks=\"1\"\n                            data-nodeid=\"4083\"\n                            >let</code\n                          >和<code data-backticks=\"1\" data-nodeid=\"4085\"\n                            >const</code\n                          >作用域的。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3941\">\n                      编码过程的思考很重要，这也是为什么大多团队都会设置笔试题环节的原因。再者，对于开发来说，最终工作内容大部分依赖代码实现，因此编码风格、编码思路都会被列为考察点之一。\n                    </p>\n                    <p data-nodeid=\"3942\">\n                      我们知道，现在的 JavaScript 基本都会运行在 JavaScript\n                      引擎中，大多数时候都在两个环境下运行：浏览器和\n                      Node.js。因此，对于这两个前端开发常常接触到的领域，同样也是面试官比较倾向的考察点。\n                    </p>\n                    <h3 data-nodeid=\"3943\">浏览器相关</h3>\n                    <p data-nodeid=\"3944\">\n                      浏览器作为直接与用户交互的媒介，也作为前端开发必不可少的开发工具，其中的运行原理基本上都需要掌握。通常来说，面试官会从一个叫“在浏览器地址栏里输入\n                      URL，按下回车键，会发生什么？”中进行考察，首先会经过下面“网络相关”部分提到的\n                      HTTP 请求过程，可能还会涉及以下内容。\n                    </p>\n                    <p data-nodeid=\"3945\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/CC/CioPOWBvznWAfmHLAAFj-29C_Iw491.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"4093\"\n                      />\n                    </p>\n                    <p data-nodeid=\"27747\" class=\"\">\n                      关于浏览器的结构和运行机制，我将在 08\n                      课时进行讲解。其中涉及网络请求和 HTTP\n                      相关的部分内容，则会在第 7 ~ 8\n                      讲中介绍，同时我会带你了解浏览器的架构、线程和进程间的协作。在学习完这几讲的内容之后，你也可以整合其中的各个流程，梳理出根据自身理解而调整的最终流程和步骤。\n                    </p>\n\n                    <h3 data-nodeid=\"3947\">Node.js 相关</h3>\n                    <p data-nodeid=\"3948\">\n                      Node.js 和浏览器除了全局对象不一致以外，它们的 Event Loop\n                      机制也有所区别。\n                    </p>\n                    <p data-nodeid=\"3949\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/C4/Cgp9HWBvznuAPTG_AACeynoph4s355.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"4103\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3950\">\n                      很多时候，我们会使用 Node.js\n                      去做一些脚本工程或是服务端接入层等工作。由于大部分前端的工作主要围绕网页、小程序、客户端这些内容，需要深度使用\n                      Node.js\n                      的场景较少，因此我们不会这个课程中过多地介绍它，你也可以通过<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=694&amp;sid=20-h5Url-0#/sale&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"4107\"\n                        >《Node.js 应用开发实战》</a\n                      >专栏来进行深入地学习。\n                    </p>\n                    <h3 data-nodeid=\"3951\">网络相关</h3>\n                    <p data-nodeid=\"3952\">\n                      不管是网页、小程序，还是依赖 JavaScript\n                      移植到客户端进行的原生应用开发（比如 React\n                      Native、Weex、Electron\n                      等），我们基本上都离不开与服务端的通信。因此，我们还需要掌握网络相关的专业知识。\n                    </p>\n                    <p data-nodeid=\"3953\">\n                      很多面试官都喜欢问“一个完整的 HTTP\n                      请求过程”这个问题。通过这样一个问题，面试官可以了解到候选人对网络请求过程到浏览器渲染过程的掌握情况，其中网络相关的知识点会涉及以下知识点。\n                    </p>\n                    <p data-nodeid=\"3954\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/CC/CioPOWBvzoSAKSjTAABzfdV6svQ146.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"4114\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3955\">\n                      这些内容我会在“ 06 |\n                      一个网络请求是怎么进行的”中围绕核心内容进行介绍。\n                    </p>\n                    <p data-nodeid=\"3956\">\n                      其次，网络请求存在各式各样的情况，比如使用缓存、建立\n                      Websocket、短轮询与长轮询、获取用户登录状态等，这些内容都会直接与\n                      HTTP 协议相关。因此，HTTP\n                      协议相关的知识点也经常会被考察到，包括以下知识点。\n                    </p>\n                    <p data-nodeid=\"3957\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/CC/CioPOWBvzouAH5ZDAACvg3Io-sY893.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"4121\"\n                      />\n                    </p>\n                    <p data-nodeid=\"34281\" class=\"te-preview-highlight\">\n                      其中，HTTP\n                      消息体结构属于很基础的内容，我们的课程中并不会大范围介绍，在\n                      07 课时中，主要围绕场景的 HTTP\n                      协议应用场景来让你更好地理解 HTTP 协议相关内容。\n                    </p>\n\n                    <p data-nodeid=\"3959\">\n                      除此之外，关于网络请求的性能优化也常常会被关注到。一般来说，网络请求的优化方案可能涉及缓存的使用、减少资源大小（分片、压缩、懒加载、预加载）、减少每个环节的耗时（DNS\n                      查询、使用 CDN）、使用 HTTP/2\n                      等各种应用场景，这些内容我将在第 21 ~ 22 讲中进行介绍。\n                    </p>\n                    <h3 data-nodeid=\"3960\">安全相关</h3>\n                    <p data-nodeid=\"3961\">\n                      Web\n                      安全是所有系统设计中都会关注的问题，对于前端开发来说，我们也需要时刻考虑是否存在安全风险。一般来说，常见的安全问题包括前端安全和其他\n                      Web 安全。\n                    </p>\n                    <p data-nodeid=\"3962\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/C4/Cgp9HWBvzpOAQsqoAADw4wMLzAA014.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"4132\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3963\">\n                      其中，XSS 和 CSRF\n                      是前端最容易遇到的问题，也是我们在开发过程中都要考虑的风险。我们不仅需要了解它们的攻击手段，更要掌握对其防范方案，这些分别在“\n                      07 | HTTP 协议和前端开发有什么关系”和“ 10 |\n                      掌握前端框架模板引擎的实现原理”中进行介绍。学习了这些内容以后，或许你也会知道如何使用前端框架可以避免\n                      XSS 漏洞。而当你在学习“ 11 |\n                      为什么说小程序比较特殊”之后，也能明白为什么在小程序中不存在\n                      XSS 和 CSRF 安全风险。\n                    </p>\n                    <p data-nodeid=\"3964\">\n                      除了与前端密切相关的 XSS 和 CSRF 以外，如果你对其他 Web\n                      安全相关的知识也感兴趣，可以继续学习<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=585#/sale&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"4143\"\n                        >《Web 安全攻防之道》专栏</a\n                      >，或者推荐阅读《白帽子讲 Web 安全》一书。\n                    </p>\n                    <h3 data-nodeid=\"3965\">算法与数据结构</h3>\n                    <p data-nodeid=\"3966\">\n                      大公司会考察算法基础，很多同学在准备找工作的时候也经常会去\n                      Leetcode\n                      上刷题。对于前端来说，大多数工作中都不会涉及算法相关，但在一些场景下我们可以使用它们设计出更好的数据结构和计算方式。\n                    </p>\n                    <p data-nodeid=\"3967\">\n                      在面试过程中，容易被面试官考察到的内容包括这些内容。\n                    </p>\n                    <p data-nodeid=\"3968\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/C4/Cgp9HWBvzpyAcL5HAADoKl-aSNM121.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"4150\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3969\">\n                      很多人会觉得，对前端开发来说，算法好像并不那么重要，实际上大多数的日常开发中也用不到。但如果你关注较大型的前端应用领域，你就会发现它们的确会用到一些算法和数据结构。比如\n                      VSCode\n                      中对于文本缓冲区的性能优化过程中，重构了数据结构，其中就有用到红黑树。\n                    </p>\n                    <p data-nodeid=\"3970\">\n                      合适的数据结构能从根本上大规模提升应用的性能，不管是前端开发也好，还是后台开发、大数据开发等，软件设计很多都是相通的。这部分的内容我们课程中也基本上不会涉及，因此建议你购买<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=185&amp;sid=20-h5Url-0#/content&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"4155\"\n                        >《重学数据结构与算法》</a\n                      >专栏继续学习，或是去<a\n                        href=\"https://leetcode-cn.com/problemset/all/?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"4159\"\n                        >Leetcode</a\n                      >平台学习和研究。\n                    </p>\n                    <h3 data-nodeid=\"3971\">计算机通用知识</h3>\n                    <p data-nodeid=\"3972\">\n                      除了算法和数据结构以外，计算机通用知识同样在前端开发的日常工作中接触不多。这些内容其实是开发必备的基础，不管是打算发展成为大前端也好、全栈开发也好，还是只希望涉及纯前端的开发内容，我们都需要理解和掌握。比如计算机资源和编程与设计模式。\n                    </p>\n                    <p data-nodeid=\"3973\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/C4/Cgp9HWBvzqWAWfgjAAE7PYMKF9o243.png\"\n                        alt=\"Drawing 9.png\"\n                        data-nodeid=\"4165\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3974\">\n                      这些内容你可以作为自身前端知识体系的补充进行学习。提醒一下，我们在日常工作中，可以更多地关注其他配合方（客户端、后台等）的实现和能力，除了可以更好地配合和理解他们的工作外，还可以提升自己对编程和语言设计、通用技术方案的理解。\n                    </p>\n                    <p data-nodeid=\"3975\">\n                      很多时候，前端由于门槛较低，很多的前端开发都不是计算机专业出身。我们对于计算机基础、网络基础、算法和数据结构等内容掌握很少，更多时候是这些知识的缺乏阻碍了我们在程序员这一职业的发展，这也是为什么很多前端开发苦恼自己到达天花板，想着转型全栈或者后台就能走得更远。\n                    </p>\n                    <h3 data-nodeid=\"3976\">总结</h3>\n                    <p data-nodeid=\"3977\">\n                      今天，我主要结合面试角度，梳理了前端专业领域相关知识，这些知识常见于应届生或者工作年限较短（1\n                      ~ 3 年）的前端开发在面试过程中会被考察到。\n                    </p>\n                    <p data-nodeid=\"3978\">\n                      其中计算机基础、网络基础、算法和数据结构等内容与前端岗位的关联性并不大，属于通用的开发工程师素养，这些内容在我们课程中会较少体现。除此之外的其他内容，我们会在“专业知识篇：核心基础”中，围绕核心知识点进行详细介绍。\n                    </p>\n                    <p data-nodeid=\"3979\">\n                      对于已有较多工作经历（3 ~ 5\n                      年）的前端来说，更多时候会被考察到项目经验和解决方案的设计，我会在下一篇文章中进行介绍。\n                    </p>\n                    <p data-nodeid=\"3980\">\n                      最后，我也帮你整理了本讲内容的知识体系，便于你复习保存。\n                    </p>\n                    <p data-nodeid=\"3981\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/33/CC/CioPOWBvzrmADsYtABXPdM5MJOs342.png\"\n                        alt=\"Drawing 11.png\"\n                        data-nodeid=\"4179\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3982\" class=\"\">\n                      除了上面提到的这些内容，你觉得前端专业的知识体系还包括哪些？可以在留言区说说你的想法。\n                    </p>\n            "}