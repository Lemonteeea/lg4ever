{"title":"17 | 单例模式：如何有效进行程序初始化？","context":"\n                    <p data-nodeid=\"1101\" class=\"\">\n                      从这一讲开始，我们就正式进入模块三“编程模式”的学习了。\n                    </p>\n                    <h3 data-nodeid=\"1102\">设计模式导学</h3>\n                    <p data-nodeid=\"1103\">\n                      不过，在这之前，我想简单和你聊聊设计模式的学习路径这个话题。这也是很多同学都很关心的话题。\n                    </p>\n                    <h4 data-nodeid=\"1104\">设计模式的底层逻辑</h4>\n                    <p data-nodeid=\"1105\">\n                      关于设计模式，现在有很多同学反馈说：\n                    </p>\n                    <ul data-nodeid=\"1106\">\n                      <li data-nodeid=\"1107\">\n                        <p data-nodeid=\"1108\">\n                          学习了很多设计模式的课程和文章，依然不会用设计模式；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1109\">\n                        <p data-nodeid=\"1110\">\n                          设计模式适用场景没有设计原则多；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1111\">\n                        <p data-nodeid=\"1112\">设计模式入门简单，精通很难；</p>\n                      </li>\n                      <li data-nodeid=\"1113\">\n                        <p data-nodeid=\"1114\">设计模式太复杂看不懂；</p>\n                      </li>\n                      <li data-nodeid=\"1115\">\n                        <p data-nodeid=\"1116\">面试前才会看设计模式；</p>\n                      </li>\n                      <li data-nodeid=\"1117\">\n                        <p data-nodeid=\"1118\">设计模式不如面向搜索编程有用；</p>\n                      </li>\n                      <li data-nodeid=\"1119\">\n                        <p data-nodeid=\"1120\">……</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1121\">\n                      不可否认，一方面大家都很重视设计模式的学习，另一方面却又总是被设计模式搞晕，原因就在于没有真正明白设计模式最核心的到底是什么，也就是它的底层逻辑是什么。\n                    </p>\n                    <p data-nodeid=\"1122\">\n                      其实，关于这个问题，《设计模式：可复用面向对象的基础》这本书中早已回答过：\n                    </p>\n                    <blockquote data-nodeid=\"1123\">\n                      <p data-nodeid=\"1124\">\n                        在设计中思考什么应该变化，并封装会发生变化的概念。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1125\">\n                      说实话，最初我读到这句话时是很懵的，我知道如何封装数据、封装方法、封装操作，但“封装”概念似乎和代码实现没什么关系吧。直到工作了很多年后，再来看这句话时，我才突然明白，原来这句话才是理解设计模式的真正关键所在。\n                    </p>\n                    <p data-nodeid=\"1126\">\n                      简单来说，就是八个字：<strong data-nodeid=\"1255\"\n                        >找到变化，封装变化。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1127\">\n                      实际上设计模式提出的初衷并不是为了解决类似用什么算法实现“1+1=2”的问题，而是告诉你应该如何用计算机的思维来思考该怎么让“1+1=2”正确运行起来。\n                    </p>\n                    <p data-nodeid=\"1128\">\n                      现在网上有很多讲解设计模式的资料和文章，但大部分都侧重于讲：设计模式的定义是什么，如何实现一个模式，以及设计模式有哪些好处等。这并不是我们这门课程学习的重点，我还是希望带你搞清楚下面这样几个问题：\n                    </p>\n                    <ul data-nodeid=\"1129\">\n                      <li data-nodeid=\"1130\">\n                        <p data-nodeid=\"1131\">为什么要使用设计模式？</p>\n                      </li>\n                      <li data-nodeid=\"1132\">\n                        <p data-nodeid=\"1133\">\n                          设计模式都找到了哪些变化？又是如何封装这些变化？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1134\">\n                        <p data-nodeid=\"1135\">\n                          如何通过使用场景来选择合适的设计模式？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1136\">\n                        <p data-nodeid=\"1137\">\n                          使用设计模式后能收获什么？又会损失什么？\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1934\" class=\"te-preview-highlight\">\n                      在我看来，学习设计模式真正的好处并不在于学会“如何使用”它们，而是在于通过分析学到“如何找到变化，如何封装变化”的思想精髓，并最终通过实践融合到实际编程中，对实际编码设计有帮助。\n                    </p>\n                    <p data-nodeid=\"1935\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3D/AE/Cgp9HWCWApGAe1AGAAYeDpnmv5Q465.png\"\n                        alt=\"设计模式17--金句.png\"\n                        data-nodeid=\"1939\"\n                      />\n                    </p>\n\n                    <h4 data-nodeid=\"1656\">一个简单的学习框架</h4>\n\n                    <p data-nodeid=\"1140\">\n                      如果我们学习设计模式的目标，只是为了搞清楚设计模式是什么以及怎么画好它的\n                      UML 图，然后再设计一个类似 Car 汽车类、Man\n                      人类，那么到最后的结果大概率是：看了都懂，但到实际使用时依然不会用。\n                    </p>\n                    <p data-nodeid=\"1141\">\n                      我曾经遇见一个同学，问他为什么一定要学习使用设计模式，他说他不想在管理超大代码集合时变得无所适从。写一个上传文件的代码，根本用不上什么设计模式，但是当你想要阅读优秀的开源框架，或者即将管理一个大型电商网站的订单系统、会员系统、评论系统时，我想你一定能用上设计模式。\n                    </p>\n                    <p data-nodeid=\"1142\">\n                      所以，我希望这门课程不只是告诉你关于设计模式的知识，还要告诉你，通过设计模式你能获得哪些有价值的启发，并最终能灵活应用去解决真实的业务问题。\n                    </p>\n                    <p data-nodeid=\"1143\">\n                      但是，传统学习设计模式的方法实现效果并不好，<strong\n                        data-nodeid=\"1272\"\n                        >为此我就结合我多年学习设计模式的经验，总结出了一个简单的学习框架，它可以帮助你更高效地学习设计模式</strong\n                      >。\n                    </p>\n                    <ul data-nodeid=\"1144\">\n                      <li data-nodeid=\"1145\">\n                        <p data-nodeid=\"1146\">\n                          这个模式中隐藏（封装）了什么实现（变化）？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1147\">\n                        <p data-nodeid=\"1148\">\n                          这个模式中有什么共性规律（哪类变化）？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1149\">\n                        <p data-nodeid=\"1150\">这个模式中的对象职责是什么？</p>\n                      </li>\n                      <li data-nodeid=\"1151\">\n                        <p data-nodeid=\"1152\">\n                          这个模式中对象之间的关系是什么？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1153\">\n                        <p data-nodeid=\"1154\">这个模式常用在哪些场景中？</p>\n                      </li>\n                      <li data-nodeid=\"1155\">\n                        <p data-nodeid=\"1156\">\n                          这个模式基于常用场景的通用代码实现是什么？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1157\">\n                        <p data-nodeid=\"1158\">\n                          这个模式如何基于上下文环境来进行设计和使用？\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1159\">\n                      希望结合这个框架，能让你更快地区分设计模式的表象和本质。接下来，我们就正式开始设计模式的学习。\n                    </p>\n                    <h3 data-nodeid=\"1160\">单例模式分析</h3>\n                    <p data-nodeid=\"1161\">\n                      在 GoF 的书中，单例模式最早的定义如下：\n                    </p>\n                    <blockquote data-nodeid=\"1162\">\n                      <p data-nodeid=\"1163\">\n                        单例模式（Singleton）允许存在一个和仅存在一个给定类的实例。它提供一种机制让任何实体都可以访问该实例。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1164\">我将其转换为 UML 图：</p>\n                    <p data-nodeid=\"1165\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3D/AC/Cgp9HWCV_oGAC49iAAEKvMFGEzQ091.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"1287\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1166\">\n                      图中，单例模式（Singleton）类声明了一个名为 _instance\n                      的静态对象和名为 get­Instance()\n                      的静态方法，静态对象用来存储对象自身的属性和方法，静态方法用来返回其所属类的一个相同实例。这里我们以单例模式经典的懒汉式初始化方式为例，其代码实现如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singleton</span> </span>{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">//用于存储单一实例的静态对象</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Singleton _instance; \n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">//私有的空构造函数</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">Singleton</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">//通过判断静态对象是否被初始化来选择是否创建对象</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Singleton <span class=\"hljs-title\">getInstance</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> == _instance){\n</div></li><li><div class=\"code-word\">            _instance = <span class=\"hljs-keyword\">new</span> Singleton();\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> _instance;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1168\">\n                      通过分析上面的定义和代码，我们可以得出单例模式包含三个要点：\n                    </p>\n                    <ul data-nodeid=\"1169\">\n                      <li data-nodeid=\"1170\">\n                        <p data-nodeid=\"1171\">一个单例类只能有一个实例；</p>\n                      </li>\n                      <li data-nodeid=\"1172\">\n                        <p data-nodeid=\"1173\">单例类必须自行创建这个实例；</p>\n                      </li>\n                      <li data-nodeid=\"1174\">\n                        <p data-nodeid=\"1175\">\n                          单例类必须保证全局其他对象都能唯一访问到它。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1176\">\n                      其实，<strong data-nodeid=\"1300\"\n                        >这三个要点就是单例模式所要应对的变化</strong\n                      >，也就是：\n                    </p>\n                    <ul data-nodeid=\"1177\">\n                      <li data-nodeid=\"1178\">\n                        <p data-nodeid=\"1179\">对象实例数量受到限制的事实；</p>\n                      </li>\n                      <li data-nodeid=\"1180\">\n                        <p data-nodeid=\"1181\">对象实例的构造与销毁；</p>\n                      </li>\n                      <li data-nodeid=\"1182\">\n                        <p data-nodeid=\"1183\">\n                          需要保证对象实例成为“线程安全”的某种机制。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1184\">\n                      从上面那段示例代码我们还可以看出，<strong\n                        data-nodeid=\"1309\"\n                        >单例模式的对象职责有两个</strong\n                      >：\n                    </p>\n                    <ul data-nodeid=\"1185\">\n                      <li data-nodeid=\"1186\">\n                        <p data-nodeid=\"1187\">保证一个类只有一个实例；</p>\n                      </li>\n                      <li data-nodeid=\"1188\">\n                        <p data-nodeid=\"1189\">为该实例提供一个全局访问节点。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1190\">\n                      你会发现，单例类的默认构造函数和静态对象都是内部调用，之所以将默认构造函数设为私有，是为了防止其他对象使用单例类的\n                      new\n                      运算符。然后，提供一个对外的公共方法来获取唯一的对象实例。在我看来，<strong\n                        data-nodeid=\"1317\"\n                        >单例模式就类似于全局变量或全局函数的角色，可以使用它来代替全局变量</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1191\">常见场景和解决方案</h3>\n                    <p data-nodeid=\"1192\">\n                      <strong data-nodeid=\"1323\"\n                        >单例模式更多是在程序一开始进行初始化时使用的</strong\n                      >，接下来，我们就来看看有哪些比较常用的场景和解决方案。\n                    </p>\n                    <p data-nodeid=\"1193\">\n                      常见的单例模式应用和使用的解决方案有：饿汉式初始化、懒汉式初始化、同步信号、双重锁定和使用\n                      ThreadLocal。其中，懒汉式初始化的代码实现在前面我们已经介绍过了，饿汉式、同步信号、双重锁定网上资料有很多，并且也不难理解，就不再赘述。\n                    </p>\n                    <p data-nodeid=\"1194\">\n                      这里我们重点介绍一下使用 ThreadLocal\n                      的方式，比如，下面这个 AppContext 代码示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> java.util.HashMap;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> java.util.Map;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AppContext</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ThreadLocal&lt;AppContext&gt; local = <span class=\"hljs-keyword\">new</span> ThreadLocal&lt;&gt;();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> Map&lt;String,Object&gt; data = <span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Map&lt;String, Object&gt; <span class=\"hljs-title\">getData</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> getAppContext().data;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//批量存数据</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setData</span><span class=\"hljs-params\">(Map&lt;String, Object&gt; data)</span> </span>{\n</div></li><li><div class=\"code-word\">        getAppContext().data.putAll(data);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//存数据</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">set</span><span class=\"hljs-params\">(String key, String value)</span> </span>{\n</div></li><li><div class=\"code-word\">        getAppContext().data.put(key,value);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//取数据</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(String key)</span> </span>{\n</div></li><li><div class=\"code-word\">        getAppContext().data.get(key);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//初始化的实现方法</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> AppContext <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        AppContext context = <span class=\"hljs-keyword\">new</span> AppContext();\n</div></li><li><div class=\"code-word\">        local.set(context);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> context;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//做延迟初始化</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AppContext <span class=\"hljs-title\">getAppContext</span><span class=\"hljs-params\">()</span></span>{\n</div></li><li><div class=\"code-word\">        AppContext context = local.get();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> == context) {\n</div></li><li><div class=\"code-word\">            context = init();\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> context;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//删除实例</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        local.remove();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1196\">\n                      上面的代码实现实际上就是懒汉式初始化的扩展，只不过用\n                      ThreadLocal 替换静态对象来存储唯一对象实例。之所会选择\n                      ThreadLocal，就是因为 ThreadLocal\n                      相比传统的线程同步机制更有优势。\n                    </p>\n                    <p data-nodeid=\"1197\">\n                      在传统的同步机制中，我们通常会通过对象的锁机制来保证同一时间只有一个线程访问单例类。这时该类是多个线程共享的，我们都知道使用同步机制时，什么时候对类进行读写、什么时候锁定和释放对象是有很烦琐要求的，这对于一般的程序员来说，设计和编写难度相对较大。\n                    </p>\n                    <p data-nodeid=\"1198\">\n                      <strong data-nodeid=\"1332\"\n                        >而 ThreadLocal\n                        则会为每一个线程提供一个独立的对象副本</strong\n                      >，从而解决了多个线程对数据的访问冲突的问题。正因为每一个线程都拥有自己的对象副本，也就省去了线程之间的同步操作。\n                    </p>\n                    <p data-nodeid=\"1199\">\n                      所以说，<strong data-nodeid=\"1338\"\n                        >现在绝大多数单例模式的实现基本上都是采用的 ThreadLocal\n                        这一种实现方式</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1200\">为什么使用单例模式？</h3>\n                    <p data-nodeid=\"1201\">\n                      通过上面的分析，现在我们就可以来回答这个问题了：为什么要使用单例模式？\n                    </p>\n                    <p data-nodeid=\"1202\">\n                      <strong data-nodeid=\"1345\">第一，系统某些资源有限</strong\n                      >。比如，控制某些共享资源（例如，数据库或文件）的访问权限。资源有限就会带来访问冲突的问题，如果不限制实例的数量，那么很快有限的资源就会耗尽，同时造成大量的对象处于等待资源中。再比如，同时读写同一个超大的\n                      AI\n                      模型文件，或使用外部进程式服务，如果不使用单例模式，随着用户进程数开启越多，系统原有的进程处理资源就会变得越少，这不仅会导致操作系统处理速度变慢，同时也会影响用户进程自身的处理速度。\n                    </p>\n                    <p data-nodeid=\"1203\">\n                      <strong data-nodeid=\"1350\"\n                        >第二，需要表示为全局唯一的对象。</strong\n                      >\n                      比如，系统要求提供一个唯一的序列号生成器。客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。在一个系统中要求一个类只有一个实例时才应当使用单例模式。反过来，如果一个类可以有几个实例共存，就需要对单例模式进行改进，使之成为多例模式。\n                    </p>\n                    <h3 data-nodeid=\"1204\">收获什么？损失什么？</h3>\n                    <p data-nodeid=\"1205\">\n                      了解了使用单例模式的原因之后，你可能还会好奇使用单例模式的优势和劣势。这里我们简单介绍下。\n                    </p>\n                    <p data-nodeid=\"1206\">\n                      我们先来看使用单例模式的优势，也就是通过它我们能收获什么呢。\n                    </p>\n                    <ul data-nodeid=\"1207\">\n                      <li data-nodeid=\"1208\">\n                        <p data-nodeid=\"1209\">\n                          对有限资源的合理利用，保护有限的资源，防止资源重复竞抢。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1210\">\n                        <p data-nodeid=\"1211\">\n                          更高内聚的代码组件，能提升代码复用性。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1212\">\n                        <p data-nodeid=\"1213\">\n                          具备全局唯一访问点的权限控制，方便按照统一规则管控权限。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1214\">\n                        <p data-nodeid=\"1215\">\n                          从负载均衡角度考虑，我们可以轻松地将 Singleton\n                          扩展成两个、三个或更多个实例。由于封装了基数问题，所以在适当的时候可以自由更改实例的数量。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1216\">\n                      除了优势，使用单例模式当然也会带来一些劣势，也就是我们会损失一些东西或特点。\n                    </p>\n                    <ul data-nodeid=\"1217\">\n                      <li data-nodeid=\"1218\">\n                        <p data-nodeid=\"1219\">\n                          作为全局变量使用时，引用的对象越多，代码修改影响的范围也越大。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1220\">\n                        <p data-nodeid=\"1221\">\n                          作为全局变量时，在全局变量中使用状态变量时，会造成加/解锁的性能损耗。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1222\">\n                        <p data-nodeid=\"1223\">\n                          即便能扩展多实例，但耦合性依然很高，因为隐蔽了不同对象之间的调用关系。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1224\">\n                        <p data-nodeid=\"1225\">不支持有参数的构造函数。</p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"1226\">总结</h3>\n                    <p data-nodeid=\"1227\">\n                      在我看来，学习设计模式时，除了要理解设计模式的原理之外，更重要的是要能获得启发——如何才能为真实的开发过程带来最大的实际价值（解决多少实际问题）。\n                    </p>\n                    <p data-nodeid=\"1228\">\n                      <strong data-nodeid=\"1369\"\n                        >设计模式的底层逻辑就是：找到变化，封装变化</strong\n                      >。学习任何设计模式时，你都应该牢牢抓住这个本质核心，同时也要不断复习简单的学习框架，因为这在后面更多的模式学习中会起到关键的作用。\n                    </p>\n                    <p data-nodeid=\"1229\">\n                      除此之外，今天我们还主要介绍了单例模式，从定义到具体案例代码的分析，讲解了单例模式的适用场景以及使用后的收获和损失。\n                    </p>\n                    <p data-nodeid=\"1230\">\n                      你会发现，单独讲一个模式时，其实原理看上去都很容易，如果遇到了这个特定的场景，使用模式也能很容易解决问题。而随着学习的模式越多，反而越不知道该怎么决策，这时就要时刻提醒自己：使用模式后会带来什么收益？又会损失什么？为什么要使用这个模式？然后再去思考如何实现。这个过程和我们课程讲解的顺序恰好是反过来的，这也是大家很容易忽略的地方，所以一定要注意。\n                    </p>\n                    <h3 data-nodeid=\"1231\">课后思考</h3>\n                    <p data-nodeid=\"1232\">\n                      在你所熟悉的 Spring 框架中，你知道 Spring 单例 Bean\n                      与单例模式的区别是什么吗？\n                    </p>\n                    <p data-nodeid=\"1233\">\n                      欢迎你留言分享，我会第一时间给你回复。\n                    </p>\n                    <p data-nodeid=\"1234\" class=\"\">\n                      在下一讲，我会接着与你分享“建造者模式：如何创建不同形式的复杂对象？”这个话题，记得按时来听课！\n                    </p>\n            "}