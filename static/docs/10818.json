{"title":"13 | 模板解析：构造 AST 的完整流程是怎样的？（下）","context":"\n                    <p data-nodeid=\"328\">\n                      这一节课我们依然要<strong data-nodeid=\"346\"\n                        >解析 template 生成 AST 背后的实现原理</strong\n                      >，上节课，我们知道了baseParse 主要就做三件事情：<strong\n                        data-nodeid=\"347\"\n                        >创建解析上下文</strong\n                      >，<strong data-nodeid=\"348\">解析子节点</strong>，<strong\n                        data-nodeid=\"349\"\n                        >创建 AST 根节点</strong\n                      >。\n                    </p>\n\n                    <p data-nodeid=\"4\">\n                      我们讲到了解析子节点，主要有四种情况，分别是注释节点的解析、插值的解析、普通文本的解析，以及元素节点的解析，这节课我们就到了最后的元素节点。\n                    </p>\n                    <h3 data-nodeid=\"5\">解析子节点</h3>\n                    <ul data-nodeid=\"6\">\n                      <li data-nodeid=\"7\">\n                        <p data-nodeid=\"8\">元素节点的解析</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"9\">\n                      最后，我们来看元素节点的解析过程，它会解析模板中的标签节点，举个例子：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"app\"</span>&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">\"msg\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"11\">\n                      相对于前面三种类型的解析过程，元素节点的解析过程应该是最复杂的了，即当前代码\n                      s 是以 &lt;\n                      开头，并且后面跟着字母，说明它是一个标签的开头，则走到元素节点的解析处理逻辑，我们来看\n                      parseElement 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">parseElement</span><span class=\"hljs-params\">(context, ancestors)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 是否在 pre 标签内</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> wasInPre = context.inPre\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 是否在 v-pre 指令内</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> wasInVPre = context.inVPre\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 获取当前元素的父标签节点</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> parent = last(ancestors)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 解析开始标签，生成一个标签节点，并前进代码到开始标签后</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> element = parseTag(context, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* Start */</span>, parent)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 是否在 pre 标签的边界</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> isPreBoundary = context.inPre &amp;&amp; !wasInPre\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 是否在 v-pre 指令的边界</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> isVPreBoundary = context.inVPre &amp;&amp; !<span class=\"hljs-function\">wasInVPre\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(element.isSelfClosing || context.options.isVoidTag(element.tag)</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 如果是自闭和标签，直接返回标签节点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> element\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 下面是处理子节点的逻辑</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 先把标签节点添加到 ancestors，入栈</span>\n</div></li><li><div class=\"code-word\">  ancestors.push(element)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> mode = context.options.getTextMode(element, parent)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 递归解析子节点，传入 ancestors</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> children = parseChildren(context, mode, ancestors)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// ancestors 出栈</span>\n</div></li><li><div class=\"code-word\">  ancestors.pop()\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 添加到 children 属性中</span>\n</div></li><li><div class=\"code-word\">  element.children = children\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 结束标签</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (startsWithEndTagOpen(context.source, element.tag)) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 解析结束标签，并前进代码到结束标签后</span>\n</div></li><li><div class=\"code-word\">    parseTag(context, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* End */</span>, parent)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    emitError(context, <span class=\"hljs-number\">24</span> <span class=\"hljs-comment\">/* X_MISSING_END_TAG */</span>, <span class=\"hljs-number\">0</span>, element.loc.start);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (context.source.length === <span class=\"hljs-number\">0</span> &amp;&amp; element.tag.toLowerCase() === <span class=\"hljs-string\">'script'</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> first = children[<span class=\"hljs-number\">0</span>];\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (first &amp;&amp; startsWith(first.loc.source, <span class=\"hljs-string\">'&lt;!--'</span>)) {\n</div></li><li><div class=\"code-word\">        emitError(context, <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */</span>)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 更新标签节点的代码位置，结束位置到结束标签后</span>\n</div></li><li><div class=\"code-word\">  element.loc = getSelection(context, element.loc.start)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (isPreBoundary) {\n</div></li><li><div class=\"code-word\">    context.inPre = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (isVPreBoundary) {\n</div></li><li><div class=\"code-word\">    context.inVPre = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> element\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"2037\">\n                      可以看到，这个过程中 parseElement\n                      主要做了三件事情：解析开始标签，解析子节点，解析闭合标签。\n                    </p>\n                    <p data-nodeid=\"2038\">\n                      首先，我们来看解析开始标签的过程。主要通过 parseTag\n                      方法来解析并创建一个标签节点，来看它的实现原理：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">parseTag</span><span class=\"hljs-params\">(context, type, parent)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 标签打开</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> start = getCursor(context)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 匹配标签文本结束的位置</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> match = /^&lt;\\/?([a-z][^\\t\\r\\n\\f /&gt;]*)/i.exec(context.source);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> tag = match[<span class=\"hljs-number\">1</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> ns = context.options.getNamespace(tag, parent);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 前进代码到标签文本结束位置</span>\n</div></li><li><div class=\"code-word\">  advanceBy(context, match[<span class=\"hljs-number\">0</span>].length);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 前进代码到标签文本后面的空白字符后</span>\n</div></li><li><div class=\"code-word\">  advanceSpaces(context);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 保存当前状态以防我们需要用 v-pre 重新解析属性</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> cursor = getCursor(context);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> currentSource = context.source;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 解析标签中的属性，并前进代码到属性后</span>\n</div></li><li><div class=\"code-word\">  let props = parseAttributes(context, type);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 检查是不是一个 pre 标签</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (context.options.isPreTag(tag)) {\n</div></li><li><div class=\"code-word\">    context.inPre = <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 检查属性中有没有 v-pre 指令</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!context.inVPre &amp;&amp;\n</div></li><li><div class=\"code-word\">    props.some(p =&gt; p.type === <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* DIRECTIVE */</span> &amp;&amp; p.name === <span class=\"hljs-string\">'pre'</span>)) {\n</div></li><li><div class=\"code-word\">    context.inVPre = <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 重置 context</span>\n</div></li><li><div class=\"code-word\">    extend(context, cursor);\n</div></li><li><div class=\"code-word\">    context.source = currentSource;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 重新解析属性，并把 v-pre 过滤了</span>\n</div></li><li><div class=\"code-word\">    props = parseAttributes(context, type).filter(p =&gt; p.name !== <span class=\"hljs-string\">'v-pre'</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 标签闭合</span>\n</div></li><li><div class=\"code-word\">  let isSelfClosing = <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (context.source.length === <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">    emitError(context, <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* EOF_IN_TAG */</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 判断是否自闭合标签</span>\n</div></li><li><div class=\"code-word\">    isSelfClosing = startsWith(context.source, <span class=\"hljs-string\">'/&gt;'</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* End */</span> &amp;&amp; isSelfClosing) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 结束标签不应该是自闭和标签</span>\n</div></li><li><div class=\"code-word\">      emitError(context, <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* END_TAG_WITH_TRAILING_SOLIDUS */</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 前进代码到闭合标签后</span>\n</div></li><li><div class=\"code-word\">    advanceBy(context, isSelfClosing ? <span class=\"hljs-number\">2</span> : <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  let tagType = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ELEMENT */</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> options = context.options;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 接下来判断标签类型，是组件、插槽还是模板</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!context.inVPre &amp;&amp; !options.isCustomElement(tag)) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 判断是否有 is 属性</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> hasVIs = props.some(p =&gt; p.type === <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* DIRECTIVE */</span> &amp;&amp; p.name === <span class=\"hljs-string\">'is'</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (options.isNativeTag &amp;&amp; !hasVIs) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!options.isNativeTag(tag))\n</div></li><li><div class=\"code-word\">        tagType = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* COMPONENT */</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hasVIs ||\n</div></li><li><div class=\"code-word\">      isCoreComponent(tag) ||\n</div></li><li><div class=\"code-word\">      (options.isBuiltInComponent &amp;&amp; options.isBuiltInComponent(tag)) ||\n</div></li><li><div class=\"code-word\">      /^[A-Z]/.test(tag) ||\n</div></li><li><div class=\"code-word\">      tag === <span class=\"hljs-string\">'component'</span>) {\n</div></li><li><div class=\"code-word\">      tagType = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* COMPONENT */</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (tag === <span class=\"hljs-string\">'slot'</span>) {\n</div></li><li><div class=\"code-word\">      tagType = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* SLOT */</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (tag === <span class=\"hljs-string\">'template'</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">      props.some(p =&gt; {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> (p.type === <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* DIRECTIVE */</span> &amp;&amp; isSpecialTemplateDirective(p.name));\n</div></li><li><div class=\"code-word\">      })) {\n</div></li><li><div class=\"code-word\">      tagType = <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* TEMPLATE */</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>,\n</div></li><li><div class=\"code-word\">    ns,\n</div></li><li><div class=\"code-word\">    tag,\n</div></li><li><div class=\"code-word\">    tagType,\n</div></li><li><div class=\"code-word\">    props,\n</div></li><li><div class=\"code-word\">    isSelfClosing,\n</div></li><li><div class=\"code-word\">    children: [],\n</div></li><li><div class=\"code-word\">    loc: getSelection(context, start),\n</div></li><li><div class=\"code-word\">    codegenNode: undefined\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"2251\">\n                      parseTag\n                      首先匹配标签文本结束的位置，并前进代码到标签文本后面的空白字符后，然后解析标签中的属性，比如\n                      class、style 和指令等，parseAttributes\n                      函数的实现我就不多说了，感兴趣的同学可以自己去看，它最终会解析生成一个\n                      props 的数组，并前进代码到属性后。\n                    </p>\n                    <p data-nodeid=\"2252\">\n                      接着去检查是不是一个 pre 标签，如果是则设置 context.inPre\n                      为 true；再去检查属性中有没有 v-pre 指令，如果有则设置\n                      context.inVPre 为 true，并重置上下文 context\n                      和重新解析属性；接下来再去判断是不是一个自闭和标签，并前进代码到闭合标签后；最后判断标签类型，是组件、插槽还是模板。\n                    </p>\n\n                    <p data-nodeid=\"16\">\n                      parseTag 最终返回的值就是一个描述标签节点的对象，其中 type\n                      表示它是一个标签节点，tag 表示标签名，tagType\n                      表示标签的类型，content 表示文本的内容，isSelfClosing\n                      表示是否是一个闭合标签，loc\n                      表示文本的代码开头和结束的位置信息，children\n                      是标签的子节点数组，会先初始化为空。\n                    </p>\n                    <p data-nodeid=\"17\">\n                      解析完开始标签后，再回到\n                      parseElement，接下来第二步就是解析子节点，它把解析好的\n                      element 节点添加到 ancestors 数组中，然后执行\n                      parseChildren 去解析子节点，并传入 ancestors。\n                    </p>\n                    <p data-nodeid=\"18\">\n                      如果有嵌套的标签，那么就会递归执行\n                      parseElement，可以看到，在 parseElement\n                      的一开始，我们能获取 ancestors\n                      数组的最后一个值拿到父元素的标签节点，这个就是我们在执行\n                      parseChildren 前添加到数组尾部的。\n                    </p>\n                    <p data-nodeid=\"19\">\n                      解析完子节点后，我们再把 element 从 ancestors\n                      中弹出，然后把 children 数组添加到 element.children\n                      中，同时也把代码前进到子节点的末尾。\n                    </p>\n                    <p data-nodeid=\"20\">\n                      最后，就是解析结束标签，并前进代码到结束标签后，然后更新标签节点的代码位置。parseElement\n                      最终返回的值就是这样一个标签节点 element。\n                    </p>\n                    <p data-nodeid=\"21\">\n                      其实 HTML\n                      的嵌套结构的解析过程，就是一个递归解析元素节点的过程，为了维护父子关系，当需要解析子节点时，我们就把当前节点入栈，子节点解析完毕后，我们就把当前节点出栈，因此\n                      ancestors\n                      的设计就是一个栈的数据结构，整个过程是一个不断入栈和出栈的过程。\n                    </p>\n                    <p data-nodeid=\"22\">\n                      通过不断地递归解析，我们就可以完整地解析整个模板，并且标签类型的\n                      AST\n                      节点会保持对子节点数组的引用，这样就构成了一个树形的数据结构，所以整个解析过程构造出的\n                      AST 节点数组就能很好地映射整个模板的 DOM 结构。\n                    </p>\n                    <h3 data-nodeid=\"23\">空白字符管理</h3>\n                    <p data-nodeid=\"24\">\n                      在前面的解析过程中，有些时候我们会遇到空白字符的情况，比如前面的例子：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"app\"</span>&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span> <span class=\"hljs-attr\">:msg</span>=<span class=\"hljs-string\">\"msg\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"26\">\n                      div 标签到下一行会有一个换行符，hello\n                      标签前面也有空白字符，这些空白字符在解析的过程中会被当作文本节点解析处理。但这些空白节点显然是没有什么意义的，所以我们需要移除这些节点，减少后续对这些没用意义的节点的处理，以提高编译效率。\n                    </p>\n                    <p data-nodeid=\"27\">\n                      我们先来看一下空白字符管理相关逻辑代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">parseChildren</span><span class=\"hljs-params\">(context, mode, ancestors)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> parent = last(ancestors)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> ns = parent ? parent.ns : <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* HTML */</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> nodes = []\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 自顶向下分析代码，生成 nodes</span>\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  let removedWhitespace = <span class=\"hljs-function\"><span class=\"hljs-keyword\">false</span>\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(mode !== <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* RAWTEXT */</span>)</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!context.inPre) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; nodes.length; i++) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> node = nodes[i]\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (node.type === <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span>) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> (!/[^\\t\\r\\n\\f ]/.test(node.content)) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 匹配空白字符</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">const</span> prev = nodes[i - <span class=\"hljs-number\">1</span>]\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">const</span> next = nodes[i + <span class=\"hljs-number\">1</span>] \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 如果空白字符是开头或者结尾节点</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 或者空白字符与注释节点相连</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 或者空白字符在两个元素之间并包含换行符</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 那么这些空白字符节点都应该被移除</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (!prev ||\n</div></li><li><div class=\"code-word\">              !next ||\n</div></li><li><div class=\"code-word\">              prev.type === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* COMMENT */</span> ||\n</div></li><li><div class=\"code-word\">              next.type === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* COMMENT */</span> ||\n</div></li><li><div class=\"code-word\">              (prev.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">                next.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">                /[\\r\\n]/.test(node.content))) {\n</div></li><li><div class=\"code-word\">              removedWhitespace = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">              nodes[i] = <span class=\"hljs-keyword\">null</span>\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">              <span class=\"hljs-comment\">// 否则压缩这些空白字符到一个空格</span>\n</div></li><li><div class=\"code-word\">              node.content = <span class=\"hljs-string\">' '</span>\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 替换内容中的空白空间到一个空格</span>\n</div></li><li><div class=\"code-word\">            node.content = node.content.replace(/[\\t\\r\\n\\f ]+/g, <span class=\"hljs-string\">' '</span>)\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!(process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) &amp;&amp; node.type === <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* COMMENT */</span>) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 生产环境移除注释节点</span>\n</div></li><li><div class=\"code-word\">          removedWhitespace = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">          nodes[i] = <span class=\"hljs-keyword\">null</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (parent &amp;&amp; context.options.isPreTag(parent.tag)) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 根据 HTML 规范删除前导换行符</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> first = nodes[<span class=\"hljs-number\">0</span>]\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (first &amp;&amp; first.type === <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span>) {\n</div></li><li><div class=\"code-word\">        first.content = first.content.replace(/^\\r?\\n/, <span class=\"hljs-string\">''</span>)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 过滤空白字符节点</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> removedWhitespace ? nodes.filter(Boolean) : nodes\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"29\">\n                      这段代码逻辑很简单，主要就是遍历 nodes，拿到每一个 AST\n                      节点，判断是否为一个文本节点，如果是则判断它是不是空白字符；如果是则进一步判断空白字符是开头或还是结尾节点，或者空白字符与注释节点相连，或者空白字符在两个元素之间并包含换行符，如果满足上述这些情况，这些空白字符节点都应该被移除。\n                    </p>\n                    <p data-nodeid=\"30\">\n                      此外，不满足这三种情况的空白字符都会被压缩成一个空格，非空文本中间的空白字符也会被压缩成一个空格，在生产环境下注释节点也会被移除。\n                    </p>\n                    <p data-nodeid=\"31\">\n                      在 parseChildren\n                      函数的最后，会过滤掉这些被标记清除的节点并返回过滤后的 AST\n                      节点数组。\n                    </p>\n                    <h3 data-nodeid=\"32\">创建 AST 根节点</h3>\n                    <p data-nodeid=\"33\">\n                      子节点解析完毕，baseParse 过程就剩最后一步创建 AST\n                      根节点了，我们来看一下 createRoot 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createRoot</span><span class=\"hljs-params\">(children, loc = locStub)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ROOT */</span>,\n</div></li><li><div class=\"code-word\">    children,\n</div></li><li><div class=\"code-word\">    helpers: [],\n</div></li><li><div class=\"code-word\">    components: [],\n</div></li><li><div class=\"code-word\">    directives: [],\n</div></li><li><div class=\"code-word\">    hoists: [],\n</div></li><li><div class=\"code-word\">    imports: [],\n</div></li><li><div class=\"code-word\">    cached: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">    temps: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">    codegenNode: undefined,\n</div></li><li><div class=\"code-word\">    loc\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"35\">\n                      createRoot 的实现非常简单，它就是返回一个 JavaScript\n                      对象，作为 AST 根节点。其中 type\n                      表示它是一个根节点类型，children\n                      是我们前面解析的子节点数组。除此之外，这个根节点还添加了其它的属性，当前我们并不需要搞清楚每一个属性代表的含义，这些属性我们在分析后续的处理流程中会介绍。\n                    </p>\n                    <h3 data-nodeid=\"36\">总结</h3>\n                    <p data-nodeid=\"37\">\n                      好的，到这里我们这一节的学习也要结束啦，通过这节课的学习，你应该掌握\n                      Vue.js 编译过程的第一步，即<strong data-nodeid=\"100\"\n                        >把 template 解析生成 AST 对象</strong\n                      >，整个解析过程是一个自顶向下的分析过程，也就是从代码开始，通过语法分析，找到对应的解析处理逻辑，创建\n                      AST\n                      节点，处理的过程中也在不断前进代码，更新解析上下文，最终根据生成的\n                      AST 节点数组创建 AST 根节点。\n                    </p>\n                    <p data-nodeid=\"38\">\n                      最后，给你留一道思考题目，在 parseTag\n                      的过程中，如果解析的属性有 v-pre 标签，为什么要回到之前的\n                      context，重新解析一次？欢迎你在留言区与我分享。\n                    </p>\n                    <blockquote data-nodeid=\"39\">\n                      <p data-nodeid=\"40\">\n                        <strong data-nodeid=\"109\"\n                          >本节课的相关代码在源代码中的位置如下：</strong\n                        ><br />\n                        packages/compiler-core/src/parse.ts<br />\n                        packages/compiler-core/src/ast.ts\n                      </p>\n                    </blockquote>\n            "}