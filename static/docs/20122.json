{"title":"21 | 网络编程：Go 语言如何玩转 RESTful API 服务？","context":"\n                    <p data-nodeid=\"1265\" class=\"\">\n                      从这一讲开始，我将带你学习本专栏的第五模块，在这个模块中，你将学到我们项目中最常用的编码操作，也就是编写\n                      RESTful API 和 RPC\n                      服务。在实际开发项目中，你编写的这些服务可以被其他服务使用，这样就组成了微服务的架构；也可以被前端调用，这样就可以前后端分离。\n                    </p>\n                    <p data-nodeid=\"1266\">\n                      今天我就先来为你介绍什么是 RESTful API，以及 Go\n                      语言是如何玩转 RESTful API 的。\n                    </p>\n                    <h3 data-nodeid=\"1267\">什么是 RESTful API</h3>\n                    <p data-nodeid=\"1268\">\n                      RESTful API\n                      是一套规范，它可以规范我们如何对服务器上的资源进行操作。在了解\n                      RESTful API 之前，我先为你介绍下 HTTP Method，因为 RESTful\n                      API 和它是密不可分的。\n                    </p>\n                    <p data-nodeid=\"1269\">\n                      说起 HTTP Method，最常见的就是<strong data-nodeid=\"1438\"\n                        >POST</strong\n                      >和<strong data-nodeid=\"1439\">GET</strong>，其实最早在\n                      HTTP 0.9 版本中，只有一个<strong data-nodeid=\"1440\"\n                        >GET</strong\n                      >方法，该方法是一个<strong data-nodeid=\"1441\"\n                        >幂等方法</strong\n                      >，用于获取服务器上的资源，也就是我们在浏览器中直接输入网址回车请求的方法。\n                    </p>\n                    <p data-nodeid=\"1270\">\n                      在 HTTP 1.0 版本中又增加了<strong data-nodeid=\"1451\"\n                        >HEAD</strong\n                      >和<strong data-nodeid=\"1452\">POST</strong\n                      >方法，其中常用的是 POST\n                      方法，一般用于给服务端提交一个资源，导致服务器的资源发生变化。\n                    </p>\n                    <p data-nodeid=\"1271\">\n                      随着网络越来越复杂，发现这两个方法是不够用的，就继续新增了方法。所以在\n                      HTTP1.1 版本的时候，一口气增加到了 9 个，新增的方法有\n                      HEAD、OPTIONS、PUT、DELETE、TRACE、PATCH 和\n                      CONNECT。下面我为你一一介绍它们的作用。\n                    </p>\n                    <ol data-nodeid=\"1272\">\n                      <li data-nodeid=\"1273\">\n                        <p data-nodeid=\"1274\">\n                          GET 方法可请求一个指定资源的表示形式，使用 GET\n                          的请求应该只被用于获取数据。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1275\">\n                        <p data-nodeid=\"1276\">\n                          HEAD 方法用于请求一个与 GET\n                          请求的响应相同的响应，但没有响应体。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1277\">\n                        <p data-nodeid=\"1278\">\n                          POST\n                          方法用于将实体提交到指定的资源，通常导致服务器上的状态变化或副作用。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1279\">\n                        <p data-nodeid=\"1280\">\n                          PUT 方法用于请求有效载荷替换目标资源的所有当前表示。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1281\">\n                        <p data-nodeid=\"1282\">\n                          DELETE 方法用于删除指定的资源。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1283\">\n                        <p data-nodeid=\"1284\">\n                          CONNECT\n                          方法用于建立一个到由目标资源标识的服务器的隧道。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1285\">\n                        <p data-nodeid=\"1286\">\n                          OPTIONS 方法用于描述目标资源的通信选项。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1287\">\n                        <p data-nodeid=\"1288\">\n                          TRACE\n                          方法用于沿着到目标资源的路径执行一个消息环回测试。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1289\">\n                        <p data-nodeid=\"1290\">\n                          PATCH 方法用于对资源应用部分修改。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1291\">\n                      从以上每个方法的介绍可以看到，HTTP\n                      规范针对每个方法都给出了明确的定义，所以我们使用的时候也要尽可能地<strong\n                        data-nodeid=\"1468\"\n                        >遵循这些定义</strong\n                      >，这样我们在开发中才可以更好地协作。\n                    </p>\n                    <p data-nodeid=\"1292\">\n                      理解了这些 HTTP 方法，就可以更好地理解 RESTful API\n                      规范了，因为 RESTful API 规范就是基于这些 HTTP\n                      方法规范我们对服务器资源的操作，同时规范了 URL 的样式和\n                      HTTP Status Code。\n                    </p>\n                    <p data-nodeid=\"1293\">\n                      在 RESTful API 中，使用的主要是以下五种 HTTP 方法：\n                    </p>\n                    <ol data-nodeid=\"1294\">\n                      <li data-nodeid=\"1295\">\n                        <p data-nodeid=\"1296\">GET，表示读取服务器上的资源；</p>\n                      </li>\n                      <li data-nodeid=\"1297\">\n                        <p data-nodeid=\"1298\">POST，表示在服务器上创建资源；</p>\n                      </li>\n                      <li data-nodeid=\"1299\">\n                        <p data-nodeid=\"1300\">\n                          PUT，表示更新或者替换服务器上的资源；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1301\">\n                        <p data-nodeid=\"1302\">\n                          DELETE，表示删除服务器上的资源；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1303\">\n                        <p data-nodeid=\"1304\">\n                          PATCH，表示更新 / 修改资源的一部分。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1305\">\n                      以上 HTTP 方法在 RESTful API\n                      规范中是一个操作，操作的就是服务器的资源，服务器的资源通过特定的\n                      URL 表示。\n                    </p>\n                    <p data-nodeid=\"1306\">\n                      现在我们通过一些示例让你更好地理解 RESTful API，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">HTTP GET https:<span class=\"hljs-comment\">//www.flysnow.org/users</span>\n</div></li><li><div class=\"code-word\">HTTP GET https:<span class=\"hljs-comment\">//www.flysnow.org/users/123</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1308\">以上是两个 GET 方法的示例：</p>\n                    <ul data-nodeid=\"1309\">\n                      <li data-nodeid=\"1310\">\n                        <p data-nodeid=\"1311\">第一个表示获取所有用户的信息；</p>\n                      </li>\n                      <li data-nodeid=\"1312\">\n                        <p data-nodeid=\"1313\">\n                          第二个表示获取 ID 为 123 用户的信息。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1314\">\n                      下面再看一个 POST 方法的示例，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">HTTP POST https:<span class=\"hljs-comment\">//www.flysnow.org/users</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1316\">\n                      这个示例表示创建一个用户，通过 POST\n                      方法给服务器提供创建这个用户所需的全部信息。\n                    </p>\n                    <blockquote data-nodeid=\"1317\">\n                      <p data-nodeid=\"1318\">注意：这里 users 是个复数。</p>\n                    </blockquote>\n                    <p data-nodeid=\"1319\">\n                      现在你已经知道了如何创建一个用户，那么如果要更新某个特定的用户怎么做呢？其实也非常简单，示例代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">HTTP PUT https:<span class=\"hljs-comment\">//www.flysnow.org/users/123</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1321\">\n                      这表示要更新 / 替换 ID 为 123\n                      的这个用户，在更新的时候，会通过 PUT\n                      方法提供更新这个用户需要的全部用户信息。这里 PUT 方法和\n                      POST 方法不太一样的是，从 URL 上看，PUT\n                      方法操作的是单个资源，比如这里 ID 为 123 的用户。\n                    </p>\n                    <blockquote data-nodeid=\"1322\">\n                      <p data-nodeid=\"1323\">\n                        小提示：如果要更新一个用户的部分信息，使用 PATCH\n                        方法更恰当。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1324\">\n                      看到这里，相信你已经知道了如何删除一个用户，示例代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">HTTP DELETE https:<span class=\"hljs-comment\">//www.flysnow.org/users/123</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1326\">\n                      DELETE 方法的使用和 PUT\n                      方法一样，也是操作单个资源，这里是删除 ID 为 123\n                      的这个用户。\n                    </p>\n                    <h3 data-nodeid=\"1327\">一个简单的 RESTful API</h3>\n                    <p data-nodeid=\"1328\">\n                      相信你已经非常了解什么是 RESTful API\n                      了，现在开始，我会带你通过一个使用 Golang 实现 RESTful API\n                      风格的示例，加深 RESTful API 的理解。\n                    </p>\n                    <p data-nodeid=\"1329\">\n                      Go\n                      语言的一个很大的优势，就是可以很容易地开发出网络后台服务，而且性能快、效率高。在开发后端\n                      HTTP 网络应用服务的时候，我们需要处理很多 HTTP\n                      的请求访问，比如常见的RESTful API 服务，就要处理很多 HTTP\n                      请求，然后把处理的信息返回给使用者。对于这类需求，Golang\n                      提供了内置的 net/http 包帮我们处理这些 HTTP\n                      请求，让我们可以比较方便地开发一个 HTTP 服务。\n                    </p>\n                    <p data-nodeid=\"1330\">\n                      下面我们来看一个简单的 HTTP 服务的 Go\n                      语言实现，代码如下所示：\n                    </p>\n                    <p data-nodeid=\"1331\">\n                      <em data-nodeid=\"1496\">ch21/main.go</em>\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   http.HandleFunc(<span class=\"hljs-string\">\"/users\"</span>,handleUsers)\n</div></li><li><div class=\"code-word\">   http.ListenAndServe(<span class=\"hljs-string\">\":8080\"</span>, <span class=\"hljs-literal\">nil</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">handleUsers</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span>{\n</div></li><li><div class=\"code-word\">   fmt.Fprintln(w,<span class=\"hljs-string\">\"ID:1,Name:张三\"</span>)\n</div></li><li><div class=\"code-word\">   fmt.Fprintln(w,<span class=\"hljs-string\">\"ID:2,Name:李四\"</span>)\n</div></li><li><div class=\"code-word\">   fmt.Fprintln(w,<span class=\"hljs-string\">\"ID:3,Name:王五\"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1333\">\n                      这个示例运行后，你在浏览器中输入\n                      http://localhost:8080/users, 就可以看到如下内容信息：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">ID:<span class=\"hljs-number\">1</span>,Name:张三\n</div></li><li><div class=\"code-word\">ID:<span class=\"hljs-number\">2</span>,Name:李四\n</div></li><li><div class=\"code-word\">ID:<span class=\"hljs-number\">3</span>,Name:王五\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1335\">\n                      也就是获取所有的用户信息，但是这并不是一个 RESTful\n                      API，因为使用者不仅可以通过 HTTP GET\n                      方法获得所有的用户信息，还可以通过 POST、DELETE、PUT 等\n                      HTTP 方法获得所有的用户信息，这显然不符合 RESTful API\n                      的规范。\n                    </p>\n                    <p data-nodeid=\"1336\">\n                      现在我对以上示例进行修改，使它符合 RESTful API\n                      的规范，修改后的示例代码如下所示：\n                    </p>\n                    <p data-nodeid=\"1337\">\n                      <em data-nodeid=\"1503\">ch20/main.go</em>\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">handleUsers</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span>{\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">switch</span> r.Method {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"GET\"</span>:\n</div></li><li><div class=\"code-word\">      w.WriteHeader(http.StatusOK)\n</div></li><li><div class=\"code-word\">      fmt.Fprintln(w,<span class=\"hljs-string\">\"ID:1,Name:张三\"</span>)\n</div></li><li><div class=\"code-word\">      fmt.Fprintln(w,<span class=\"hljs-string\">\"ID:2,Name:李四\"</span>)\n</div></li><li><div class=\"code-word\">      fmt.Fprintln(w,<span class=\"hljs-string\">\"ID:3,Name:王五\"</span>)\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">default</span>:\n</div></li><li><div class=\"code-word\">      w.WriteHeader(http.StatusNotFound)\n</div></li><li><div class=\"code-word\">      fmt.Fprintln(w,<span class=\"hljs-string\">\"not found\"</span>)\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1339\">\n                      这里我只修改了 handleUsers 函数，在该函数中增加了只在使用\n                      GET 方法时，才获得所有用户的信息，其他情况返回 not found。\n                    </p>\n                    <p data-nodeid=\"1340\">\n                      现在再运行这个示例，会发现只能通过 HTTP GET\n                      方法进行访问了，使用其他方法会提示 not found。\n                    </p>\n                    <h3 data-nodeid=\"1341\">RESTful JSON API</h3>\n                    <p data-nodeid=\"1342\">\n                      在项目中最常见的是使用 JSON 格式传输信息，也就是我们提供的\n                      RESTful API 要返回 JSON 内容给使用者。\n                    </p>\n                    <p data-nodeid=\"1343\">\n                      同样用上面的示例，我把它改造成可以返回 JSON\n                      内容的方式，示例代码如下所示：\n                    </p>\n                    <p data-nodeid=\"1344\">\n                      <em data-nodeid=\"1512\">ch20/main.go</em>\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">//数据源，类似MySQL中的数据</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> users = []User{\n</div></li><li><div class=\"code-word\">   {ID: <span class=\"hljs-number\">1</span>,Name: <span class=\"hljs-string\">\"张三\"</span>},\n</div></li><li><div class=\"code-word\">   {ID: <span class=\"hljs-number\">2</span>,Name: <span class=\"hljs-string\">\"李四\"</span>},\n</div></li><li><div class=\"code-word\">   {ID: <span class=\"hljs-number\">3</span>,Name: <span class=\"hljs-string\">\"王五\"</span>},\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">handleUsers</span><span class=\"hljs-params\">(w http.ResponseWriter, r *http.Request)</span></span>{\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">switch</span> r.Method {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"GET\"</span>:\n</div></li><li><div class=\"code-word\">      users,err:=json.Marshal(users)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> err!=<span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">         w.WriteHeader(http.StatusInternalServerError)\n</div></li><li><div class=\"code-word\">         fmt.Fprint(w,<span class=\"hljs-string\">\"{\\\"message\\\": \\\"\"</span>+err.Error()+<span class=\"hljs-string\">\"\\\"}\"</span>)\n</div></li><li><div class=\"code-word\">      }<span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">         w.WriteHeader(http.StatusOK)\n</div></li><li><div class=\"code-word\">         w.Write(users)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">default</span>:\n</div></li><li><div class=\"code-word\">      w.WriteHeader(http.StatusNotFound)\n</div></li><li><div class=\"code-word\">      fmt.Fprint(w,<span class=\"hljs-string\">\"{\\\"message\\\": \\\"not found\\\"}\"</span>)\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//用户</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> {\n</div></li><li><div class=\"code-word\">   ID <span class=\"hljs-keyword\">int</span>\n</div></li><li><div class=\"code-word\">   Name <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1346\">\n                      从以上代码可以看到，这次的改造主要是新建了一个 User\n                      结构体，并且使用 users 这个切片存储所有的用户，然后在\n                      handleUsers 函数中把它转化为一个 JSON\n                      数组返回。这样，就实现了基于 JSON 数据格式的 RESTful API。\n                    </p>\n                    <p data-nodeid=\"1347\">\n                      运行这个示例，在浏览器中输入\n                      http://localhost:8080/users，可以看到如下信息：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[{<span class=\"hljs-string\">\"ID\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"张三\"</span>},{<span class=\"hljs-string\">\"ID\"</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"李四\"</span>},{<span class=\"hljs-string\">\"ID\"</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"王五\"</span>}]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1349\">\n                      这已经是 JSON 格式的用户信息，包含了所有用户。\n                    </p>\n                    <h3 data-nodeid=\"1350\">Gin 框架</h3>\n                    <p data-nodeid=\"1351\">\n                      虽然 Go 语言自带的 net/http 包，可以比较容易地创建 HTTP\n                      服务，但是它也有很多不足：\n                    </p>\n                    <ul data-nodeid=\"1352\">\n                      <li data-nodeid=\"1353\">\n                        <p data-nodeid=\"1354\">\n                          不能单独地对请求方法（POST、GET\n                          等）注册特定的处理函数；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1355\">\n                        <p data-nodeid=\"1356\">不支持 Path 变量参数；</p>\n                      </li>\n                      <li data-nodeid=\"1357\">\n                        <p data-nodeid=\"1358\">不能自动对 Path 进行校准；</p>\n                      </li>\n                      <li data-nodeid=\"1359\">\n                        <p data-nodeid=\"1360\">性能一般；</p>\n                      </li>\n                      <li data-nodeid=\"1361\">\n                        <p data-nodeid=\"1362\">扩展性不足；</p>\n                      </li>\n                      <li data-nodeid=\"1363\">\n                        <p data-nodeid=\"1364\">……</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1365\">\n                      基于以上这些不足，出现了很多 Golang Web 框架，如\n                      Mux，Gin、Fiber 等，今天我要为你介绍的就是这款使用最多的\n                      Gin 框架。\n                    </p>\n                    <h4 data-nodeid=\"1366\">引入 Gin 框架</h4>\n                    <p data-nodeid=\"1367\">\n                      Gin 框架是一个在 Github 上开源的 Web 框架，封装了很多 Web\n                      开发需要的通用功能，并且性能也非常高，可以让我们很容易地写出\n                      RESTful API。\n                    </p>\n                    <p data-nodeid=\"1368\">\n                      Gin 框架其实是一个模块，也就是 Go Mod，所以采用 Go Mod\n                      的方法引入即可。我在第\n                      18讲的时候详细介绍过如何引入第三方的模块，这里再复习一下。\n                    </p>\n                    <p data-nodeid=\"1369\">\n                      首先需要下载安装 Gin 框架，安装代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> go get -u github.com/gin-gonic/gin</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1371\">\n                      然后就可以在 Go 语言代码中导入使用了，导入代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"github.com/gin-gonic/gin\"</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1373\">\n                      通过以上安装和导入这两个步骤，就可以在你的 Go\n                      语言项目中使用 Gin 框架了。\n                    </p>\n                    <h4 data-nodeid=\"1374\">使用 Gin 框架</h4>\n                    <p data-nodeid=\"1375\">\n                      现在，已经引入了 Gin 框架，下面我就是用 Gin\n                      框架重写上面的示例，修改的代码如下所示：\n                    </p>\n                    <p data-nodeid=\"1376\">\n                      <em data-nodeid=\"1536\">ch21/main.go</em>\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   r:=gin.Default()\n</div></li><li><div class=\"code-word\">   r.GET(<span class=\"hljs-string\">\"/users\"</span>, listUser)\n</div></li><li><div class=\"code-word\">   r.Run(<span class=\"hljs-string\">\":8080\"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">listUser</span><span class=\"hljs-params\">(c *gin.Context)</span></span>  {\n</div></li><li><div class=\"code-word\">   c.JSON(<span class=\"hljs-number\">200</span>,users)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1378\">\n                      相比 net/http 包，Gin 框架的代码非常简单，通过它的 GET\n                      方法就可以创建一个只处理 HTTP GET 方法的服务，而且输出\n                      JSON 格式的数据也非常简单，使用 c.JSON 方法即可。\n                    </p>\n                    <p data-nodeid=\"1379\">\n                      最后通过 Run 方法启动 HTTP 服务，监听在 8080\n                      端口。现在运行这个 Gin 示例，在浏览器中输入\n                      http://localhost:8080/users，看到的信息和通过 net/http\n                      包实现的效果是一样的。\n                    </p>\n                    <h4 data-nodeid=\"1380\">获取特定的用户</h4>\n                    <p data-nodeid=\"1381\">\n                      现在你已经掌握了如何使用 Gin 框架创建一个简单的 RESTful\n                      API，并且可以返回所有的用户信息，那么如何获取特定用户的信息呢？\n                    </p>\n                    <p data-nodeid=\"1382\">\n                      我们知道，如果要获得特定用户的信息，需要使用的是 GET\n                      方法，并且 URL 格式如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//localhost:8080/users/2</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1384\">\n                      以上示例中的 2 是用户的 ID，也就是通过 ID\n                      来获取特定的用户。\n                    </p>\n                    <p data-nodeid=\"1385\">\n                      下面我通过 Gin 框架 Path\n                      路径参数来实现这个功能，示例代码如下：\n                    </p>\n                    <p data-nodeid=\"1386\">\n                      <em data-nodeid=\"1547\">ch21/main.go</em>\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">//省略没有改动的代码</span>\n</div></li><li><div class=\"code-word\">   r.GET(<span class=\"hljs-string\">\"/users/:id\"</span>, getUser)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getUser</span><span class=\"hljs-params\">(c *gin.Context)</span></span> {\n</div></li><li><div class=\"code-word\">   id := c.Param(<span class=\"hljs-string\">\"id\"</span>)\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">var</span> user User\n</div></li><li><div class=\"code-word\">   found := <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">//类似于数据库的SQL查询</span>\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">for</span> _, u := <span class=\"hljs-keyword\">range</span> users {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> strings.EqualFold(id, strconv.Itoa(u.ID)) {\n</div></li><li><div class=\"code-word\">         user = u\n</div></li><li><div class=\"code-word\">         found = <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">         <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">if</span> found {\n</div></li><li><div class=\"code-word\">      c.JSON(<span class=\"hljs-number\">200</span>, user)\n</div></li><li><div class=\"code-word\">   } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      c.JSON(<span class=\"hljs-number\">404</span>, gin.H{\n</div></li><li><div class=\"code-word\">         <span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"用户不存在\"</span>,\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1388\">\n                      在 Gin 框架中，路径中使用冒号表示 Path\n                      路径参数，比如示例中的 :id，然后在 getUser 函数中可以通过\n                      c.Param(\"id\") 获取需要查询用户的 ID 值。\n                    </p>\n                    <blockquote data-nodeid=\"1389\">\n                      <p data-nodeid=\"1390\">\n                        小提示：Param 方法的参数要和 Path\n                        路径参数中的一致，比如示例中都是 ID。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1391\">\n                      现在运行这个示例，通过浏览器访问\n                      <a href=\"http://localhost:8080/users/2\" data-nodeid=\"1557\"\n                        >http://localhost:8080/users/2</a\n                      >，就可以获得 ID 为 2 的用户，输出信息如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{<span class=\"hljs-string\">\"ID\"</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"李四\"</span>}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1393\">\n                      可以看到，已经正确的获取到了 ID 为 2\n                      的用户，他的名字叫李四。\n                    </p>\n                    <p data-nodeid=\"1394\">\n                      假如我们访问一个不存在的 ID，会得到什么结果呢？比如\n                      99，示例如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">➜ curl http:<span class=\"hljs-comment\">//localhost:8080/users/99</span>\n</div></li><li><div class=\"code-word\">{<span class=\"hljs-string\">\"message\"</span>:<span class=\"hljs-string\">\"用户不存在\"</span>}%\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1396\">\n                      从以上示例输出可以看到，返回了『用户不存在』的信息，和我们代码中处理的逻辑一样。\n                    </p>\n                    <h4 data-nodeid=\"1397\">新增一个用户</h4>\n                    <p data-nodeid=\"1398\">\n                      现在你已经可以使用 Gin\n                      获取所有用户，还可以获取特定的用户，那么你也应该知道如何新增一个用户了，现在我通过\n                      Gin 实现如何新增一个用户，看和你想的方案是否相似。\n                    </p>\n                    <p data-nodeid=\"1399\">\n                      根据 RESTful API 规范，实现新增使用的是 POST 方法，并且\n                      URL 的格式为 http://localhost:8080/users ，向这个 URL\n                      发送数据，就可以新增一个用户，然后返回创建的用户信息。\n                    </p>\n                    <p data-nodeid=\"1400\">\n                      现在我使用 Gin 框架实现新增一个用户，示例代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">//省略没有改动的代码</span>\n</div></li><li><div class=\"code-word\">   r.POST(<span class=\"hljs-string\">\"/users\"</span>, createUser)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">createUser</span><span class=\"hljs-params\">(c *gin.Context)</span></span> {\n</div></li><li><div class=\"code-word\">   name := c.DefaultPostForm(<span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"\"</span>)\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">if</span> name != <span class=\"hljs-string\">\"\"</span> {\n</div></li><li><div class=\"code-word\">      u := User{ID: <span class=\"hljs-built_in\">len</span>(users) + <span class=\"hljs-number\">1</span>, Name: name}\n</div></li><li><div class=\"code-word\">      users = <span class=\"hljs-built_in\">append</span>(users, u)\n</div></li><li><div class=\"code-word\">      c.JSON(http.StatusCreated,u)\n</div></li><li><div class=\"code-word\">   } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      c.JSON(http.StatusOK, gin.H{\n</div></li><li><div class=\"code-word\">         <span class=\"hljs-string\">\"message\"</span>: <span class=\"hljs-string\">\"请输入用户名称\"</span>,\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1402\">\n                      以上新增用户的主要逻辑是获取客户端上传的 name\n                      值，然后生成一个 User 用户，最后把它存储到 users\n                      集合中，达到新增用户的目的。\n                    </p>\n                    <p data-nodeid=\"1403\">\n                      在这个示例中，使用 POST 方法来新增用户，所以只能通过 POST\n                      方法才能新增用户成功。\n                    </p>\n                    <p data-nodeid=\"1404\">\n                      现在运行这个示例，然后通过如下命令发送一个新增用户的请求，查看结果：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">➜ curl -X POST -d <span class=\"hljs-string\">'name=飞雪'</span> http:<span class=\"hljs-comment\">//localhost:8080/users</span>\n</div></li><li><div class=\"code-word\">{<span class=\"hljs-string\">\"ID\"</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"飞雪\"</span>}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1406\">\n                      可以看到新增用户成功，并且返回了新增的用户，还有分配的\n                      ID。\n                    </p>\n                    <h3 data-nodeid=\"1407\">总结</h3>\n                    <p data-nodeid=\"1408\">\n                      Go 语言已经给我们提供了比较强大的\n                      SDK，让我们可以很容易地开发网络服务的应用，而借助第三方的\n                      Web 框架，可以让这件事情更容易、更高效。比如这篇文章介绍的\n                      Gin 框架，就可以很容易让我们开发出 RESTful API，更多关于\n                      Gin 框架的使用可以参考\n                      <a\n                        href=\"https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&amp;album_id=1362784031968149504&amp;__biz=MzI3MjU4Njk3Ng==#wechat_redirect\"\n                        data-nodeid=\"1574\"\n                        >Golang Gin 实战</a\n                      >系列文章。\n                    </p>\n                    <p data-nodeid=\"1581\" class=\"te-preview-highlight\">\n                      在我们做项目开发的时候，要善于借助已经有的轮子，让自己的开发更有效率，也更容易实现。<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/DA/Ciqc1F_1dACARBqrAAVSvK3wokw352.png\"\n                        alt=\"go语言金句.png\"\n                        data-nodeid=\"1586\"\n                      /><br />\n                      在我们做项目开发的时候，会有增、删、改和查，现在增和查你已经学会了，那么就给你留\n                      2 个作业，任选其中 1 个即可，它们是：\n                    </p>\n\n                    <ol data-nodeid=\"1411\">\n                      <li data-nodeid=\"1412\">\n                        <p data-nodeid=\"1413\">修改一个用户的名字；</p>\n                      </li>\n                      <li data-nodeid=\"1414\">\n                        <p data-nodeid=\"1415\">删除一个用户。</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1416\" class=\"\">\n                      下一讲，也就是本专栏的最后一讲，我将为你介绍如何使用 Go\n                      语言实现 RPC 服务，记得来听课哦。\n                    </p>\n            "}