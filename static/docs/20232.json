{"title":"31 | 案例：如何自定义授权服务器？","context":"\n                    <p data-nodeid=\"1017\" class=\"\">\n                      今天我和你分享的是如何自定义授权服务器的案例。\n                    </p>\n                    <p data-nodeid=\"1018\">\n                      在上一课时中，我们基于 OAuth2 和 JWT\n                      设计了认证与授权服务体系，在本课时，我们将通过 Go\n                      来搭建一个授权服务器。\n                    </p>\n                    <p data-nodeid=\"1019\">\n                      授权服务器的主要交互对象为客户端和资源服务器，它们之间的交互流程如下图所示：\n                    </p>\n                    <p data-nodeid=\"1020\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5E/72/Ciqc1F-GurGAAcYMAADV-kU9nYM616.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"1118\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1021\">\n                      <p style=\"text-align: center\">交互流程示意图</p>\n                    </div>\n                    <p data-nodeid=\"1022\">\n                      客户端在访问资源服务器中用户存储的数据之前，需要携带用户凭证向授权服务器请求访问令牌。授权服务器会验证客户端以及其携带的用户凭证，验证通过的话将会生成并返回访问令牌。\n                    </p>\n                    <p data-nodeid=\"1023\">\n                      最后，客户端携带访问令牌请求资源服务器中存储的用户数据，资源服务器会请求授权服务器验证访问令牌，如果访问令牌有效将会返回对应的用户数据。\n                    </p>\n                    <p data-nodeid=\"1024\">\n                      从这个交互流程我们可以发现，<strong data-nodeid=\"1126\"\n                        >授权服务器的主要职责是颁发令牌和验证访问令牌</strong\n                      >。对此，授权服务器需要对外提供两个相应的接口：\n                    </p>\n                    <ul data-nodeid=\"1025\">\n                      <li data-nodeid=\"1026\">\n                        <p data-nodeid=\"1027\">\n                          /oauth/token 用于客户端携带用户凭证请求访问令牌；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1028\">\n                        <p data-nodeid=\"1029\">\n                          /oauth/check_token\n                          用于验证访问令牌的有效性，返回访问令牌绑定的客户端和用户信息。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1030\">\n                      除此之外，我们还可以让授权服务器承担客户端信息管理和权限管理等额外功能，也可以由其他的服务提供该部分能力。每个客户端都可以为用户申请访问令牌，访问令牌是与申请的客户端、授权的用户绑定的，表示某一用户授予某一个客户端有限的访问资源权限。\n                    </p>\n                    <p data-nodeid=\"1031\">\n                      一个基本的授权服务器应该由以下五个模块组成，如图所示：\n                    </p>\n                    <p data-nodeid=\"1032\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5E/72/Ciqc1F-GuwaAGy2gAABuKAtfMbk448.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"1135\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1033\">\n                      <p style=\"text-align: center\">授权服务器主要模块组成图</p>\n                    </div>\n                    <ul data-nodeid=\"1034\">\n                      <li data-nodeid=\"1035\">\n                        <p data-nodeid=\"1036\">\n                          <strong data-nodeid=\"1140\"\n                            >TokenGranter（令牌生成器）</strong\n                          >，根据客户端请求的授权类型，使用不同的方式验证客户端和用户信息，并使用\n                          TokenService 生成访问令牌；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1037\">\n                        <p data-nodeid=\"1038\">\n                          <strong data-nodeid=\"1145\"\n                            >TokenService（令牌服务）</strong\n                          >，生成并管理令牌，它使用 TokenStore 存储令牌；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1039\">\n                        <p data-nodeid=\"1040\">\n                          <strong data-nodeid=\"1150\"\n                            >TokenStore（令牌存储器）</strong\n                          >，负责令牌的存取工作；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1041\">\n                        <p data-nodeid=\"1042\">\n                          <strong data-nodeid=\"1155\"\n                            >ClientDetailsService（客户端详情服务）</strong\n                          >，根据 ClientId 查询系统中注册的客户端信息；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1043\">\n                        <p data-nodeid=\"1044\">\n                          <strong data-nodeid=\"1160\"\n                            >UserDetailsService（用户详情服务）</strong\n                          >，用于获取用户信息。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3794\" class=\"\">\n                      接下来，我们就来讲解如何在授权服务器中实现密码类型来获取访问令牌。\n                    </p>\n\n                    <h3 data-nodeid=\"1046\">客户端详情服务和用户详情服务</h3>\n                    <p data-nodeid=\"1047\">\n                      ClientDetailsService（客户端详情服务） 和\n                      UserDetailsService（用户详情服务）\n                      主要用于根据唯一标识查找客户端或者用户信息，用于验证客户端或者用户信息，或者根据对应的信息生成令牌。客户端和用户的主要信息描述如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> ClientDetails <span class=\"hljs-keyword\">struct</span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// client 的标识</span>\n</div></li><li><div class=\"code-word\">\tClientId <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// client 的密钥</span>\n</div></li><li><div class=\"code-word\">\tClientSecret <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 访问令牌有效时间，秒</span>\n</div></li><li><div class=\"code-word\">\tAccessTokenValiditySeconds <span class=\"hljs-keyword\">int</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 刷新令牌有效时间，秒</span>\n</div></li><li><div class=\"code-word\">\tRefreshTokenValiditySeconds <span class=\"hljs-keyword\">int</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 重定向地址，授权码类型中使用</span>\n</div></li><li><div class=\"code-word\">\tRegisteredRedirectUri <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 可以使用的授权类型</span>\n</div></li><li><div class=\"code-word\">\tAuthorizedGrantTypes []<span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> UserDetails <span class=\"hljs-keyword\">struct</span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 用户标识</span>\n</div></li><li><div class=\"code-word\">\tUserId <span class=\"hljs-keyword\">int64</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 用户名 唯一</span>\n</div></li><li><div class=\"code-word\">\tUsername <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 用户密码</span>\n</div></li><li><div class=\"code-word\">\tPassword <span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 用户具有的权限</span>\n</div></li><li><div class=\"code-word\">\tAuthorities []<span class=\"hljs-keyword\">string</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1049\">\n                      客户端信息主要包括客户端标识、客户端密钥、令牌有效时间、重定向地址和可使用的授权类型等，而用户的主要信息包括用户\n                      ID、用户名和用户权限列表等。\n                    </p>\n                    <p data-nodeid=\"1050\">\n                      在不同的系统中，客户端和用户信息的管理可能有专门的微服务提供实现，并对内提供相应的\n                      HTTP 或者 RPC\n                      访问接口，也可能是由授权服务器直接管理。为了统一获取客户端和用户信息的方式，我们定义了以下的\n                      UserDetailsService 和 ClientDetailsService\n                      接口，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> UserDetailsService <span class=\"hljs-keyword\">interface</span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 根据用户名加载用户信息</span>\n</div></li><li><div class=\"code-word\">\tGetUserDetailsByUsername(ctx context.Context, username, password <span class=\"hljs-keyword\">string</span>) (model.UserDetails, error)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> ClientDetailsService <span class=\"hljs-keyword\">interface</span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 根据 clientId 加载客户端信息</span>\n</div></li><li><div class=\"code-word\">\tGetClientDetailsByClientId(ctx context.Context, clientId <span class=\"hljs-keyword\">string</span>, clientSecret <span class=\"hljs-keyword\">string</span>)( model.ClientDetails, error)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1052\">\n                      无论系统中是通过何种方式管理客户端和用户信息，我们仅需使用相应的方式实现上述接口，即可<strong\n                        data-nodeid=\"1171\"\n                        >为授权服务器提供一致的方式获取客户端或者用户信息</strong\n                      >。假如我们将客户端信息维护在内存中，可以实现如下的内存客户端详情服务，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> InMemoryClientDetailsService <span class=\"hljs-keyword\">struct</span> {\n</div></li><li><div class=\"code-word\">\tclientDetailsDict <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]*model.ClientDetails\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewInMemoryClientDetailsService</span><span class=\"hljs-params\">(clientDetailsList []*model.ClientDetails )</span> *<span class=\"hljs-title\">InMemoryClientDetailsService</span></span>{\n</div></li><li><div class=\"code-word\">\tclientDetailsDict := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]*model.ClientDetails)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(clientDetailsList) &gt; <span class=\"hljs-number\">0</span>  {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">for</span> _, value := <span class=\"hljs-keyword\">range</span> clientDetailsList {\n</div></li><li><div class=\"code-word\">\t\t\tclientDetailsDict[value.ClientId] = value\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> &amp;InMemoryClientDetailsService{\n</div></li><li><div class=\"code-word\">\t\tclientDetailsDict:clientDetailsDict,\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(service *InMemoryClientDetailsService)</span><span class=\"hljs-title\">GetClientDetailsByClientId</span><span class=\"hljs-params\">(ctx context.Context, clientId <span class=\"hljs-keyword\">string</span>, clientSecret <span class=\"hljs-keyword\">string</span>)</span><span class=\"hljs-params\">(model.ClientDetails, error)</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 根据 clientId 获取 clientDetails</span>\n</div></li><li><div class=\"code-word\">\tclientDetails, ok := service.clientDetailsDict[clientId]; <span class=\"hljs-keyword\">if</span> ok{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">// 比较 clientSecret 是否正确</span>\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> clientDetails.ClientSecret == clientSecret{\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">return</span> *clientDetails, <span class=\"hljs-literal\">nil</span>\n</div></li><li><div class=\"code-word\">\t\t}<span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">return</span> model.ClientDetails{}, ErrClientSecret\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}<span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> model.ClientDetails{}, ErrClientNotExist\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1054\">\n                      在上述代码中，我们将客户端信息通过 map\n                      维护在内存中，根据客户端的标识从 map\n                      加载客户端信息。在实际生产开发中，可以根据系统中维护客户端信息的方式，选择从数据库、缓存或者通过\n                      RPC 的方式从其他微服务中加载客户端信息。\n                    </p>\n                    <h3 data-nodeid=\"1055\">令牌生成器</h3>\n                    <p data-nodeid=\"1056\">\n                      <strong data-nodeid=\"1178\"\n                        >TokenGranter（令牌生成器）是授权服务器的核心所在</strong\n                      >，它会根据客户端请求的授权类型进行不同的用户和客户端信息认证流程，并使用\n                      TokenService\n                      生成相应的访问令牌返回给客户端，它将提供以下的接口用于生成访问令牌：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> TokenGranter <span class=\"hljs-keyword\">interface</span> {\n</div></li><li><div class=\"code-word\">\tgrant(grantType <span class=\"hljs-keyword\">string</span>, client ClientDetails, reader *http.Request) (*OAuth2Token, error)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1058\">\n                      授权服务器主要对外提供 HTTP 接口用于请求访问令牌，因此\n                      TokenGranter.grant\n                      方法接受授权类型、请求的客户端和请求体作为参数。为了支持多种授权类型的实现，我们采用组合设计模式来实现\n                      TokenGranter，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1059\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5E/7D/CgqCHl-GuzKAcO8xAAAn-W9KECE504.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"1182\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1060\">\n                      <p style=\"text-align: center\">\n                        TokenGranter 组合设计模式类图\n                      </p>\n                    </div>\n                    <p data-nodeid=\"1061\">\n                      通过该模式图，我们可以看到 TokenGranter\n                      主要有以下两种实现类型：\n                    </p>\n                    <ul data-nodeid=\"1062\">\n                      <li data-nodeid=\"1063\">\n                        <p data-nodeid=\"1064\">\n                          ComposeTokenGranter 组合节点，管理了多种\n                          LeafTokenGranter 授权类型的具体叶节点实现；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1065\">\n                        <p data-nodeid=\"1066\">\n                          LeafTokenGranter\n                          叶节点，它是授权类型的具体实现，包括密码类型、授权码类型等多种授权类型实现类。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1067\">\n                      ComposeTokenGranter 的功能是根据 grantType 获取具体的\n                      TokenGranter\n                      实现，并委托其验证客户端和用户凭证，从而生成访问令牌，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(tokenGranter *ComposeTokenGranter)</span> <span class=\"hljs-title\">Grant</span><span class=\"hljs-params\">(ctx context.Context, grantType <span class=\"hljs-keyword\">string</span>, client ClientDetails, reader *http.Request)</span> <span class=\"hljs-params\">(*OAuth2Token, error)</span></span> {\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">// 检查客户端是否允许该种授权类型</span>\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">var</span> isSupport <span class=\"hljs-keyword\">bool</span>\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(client.AuthorizedGrantTypes) &gt; <span class=\"hljs-number\">0</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> client.AuthorizedGrantTypes {\n</div></li><li><div class=\"code-word\">         <span class=\"hljs-keyword\">if</span> v == grantType {\n</div></li><li><div class=\"code-word\">            isSupport = <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">         }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">if</span> !isSupport{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, ErrNotSupportOperation\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">// 查找具体的授权类型实现节点</span>\n</div></li><li><div class=\"code-word\">   dispatchGranter,ok := tokenGranter.TokenGrantDict[grantType]; <span class=\"hljs-keyword\">if</span> ok{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> dispatchGranter.Grant(ctx, grantType, client, reader)\n</div></li><li><div class=\"code-word\">   } <span class=\"hljs-keyword\">else</span>{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, ErrNotSupportGrantType\n</div></li><li><div class=\"code-word\">   }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1069\">\n                      我们以密码类型 UsernamePasswordTokenGranter\n                      的具体实现为例：UsernamePasswordTokenGranter\n                      会验证客户端提交的用户名和密码是否正确，如果用户名和密码有效，将会调用\n                      TokenService 为该客户端生成访问令牌。代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(tokenGranter *UsernamePasswordTokenGranter)</span> <span class=\"hljs-title\">Grant</span><span class=\"hljs-params\">(ctx context.Context,\n</span></span></div></li><li><div class=\"code-word\">\tgrantType <span class=\"hljs-keyword\">string</span>, client ClientDetails, reader *http.Request) <span class=\"hljs-params\">(*OAuth2Token, error)</span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> grantType != tokenGranter.supportGrantType{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, ErrNotSupportGrantType\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 从请求体中获取用户名密码</span>\n</div></li><li><div class=\"code-word\">\tusername := reader.FormValue(<span class=\"hljs-string\">\"username\"</span>)\n</div></li><li><div class=\"code-word\">\tpassword := reader.FormValue(<span class=\"hljs-string\">\"password\"</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> username == <span class=\"hljs-string\">\"\"</span> || password == <span class=\"hljs-string\">\"\"</span>{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, ErrInvalidUsernameAndPasswordRequest\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 验证用户名密码是否正确</span>\n</div></li><li><div class=\"code-word\">\tuserDetails, err := tokenGranter.userDetailsService.GetUserDetailsByUsername(ctx, username, password)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, ErrInvalidUsernameAndPasswordRequest\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 根据用户信息和客户端信息生成访问令牌</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> tokenGranter.tokenService.CreateAccessToken(&amp;OAuth2Details{\n</div></li><li><div class=\"code-word\">\t\tClient:client,\n</div></li><li><div class=\"code-word\">\t\tUser:userDetails,\n</div></li><li><div class=\"code-word\">\t})\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1071\">\n                      在上述代码中，UsernamePasswordTokenGranter\n                      首先从请求体中获取到客户端提交的用户名和密码，然后调用\n                      UserDetailsService\n                      根据用户名获取用户信息用于验证用户信息，如果用户信息有效，将会委托\n                      TokenService 根据用户信息和客户端信息生成访问令牌。\n                    </p>\n                    <h3 data-nodeid=\"1072\">令牌服务</h3>\n                    <p data-nodeid=\"1073\">\n                      TokenGranter（令牌生成器）最后将会使用\n                      TokenService（令牌服务）生成访问令牌。前面在讲解授权服务器的主要模块时，我们介绍了<strong\n                        data-nodeid=\"1195\"\n                        >TokenService 的主要功能为生成和管理令牌，并借助\n                        TokenStore 存取令牌</strong\n                      >。它提供了以下的主要接口：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> TokenService <span class=\"hljs-keyword\">interface</span> {\n</div></li><li><div class=\"code-word\">\t....\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 根据用户信息和客户端信息生成访问令牌</span>\n</div></li><li><div class=\"code-word\">\tCreateAccessToken(oauth2Details *OAuth2Details) (*OAuth2Token, error)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 根据访问令牌获取对应的用户信息和客户端信息</span>\n</div></li><li><div class=\"code-word\">\tGetOAuth2DetailsByAccessToken(tokenValue <span class=\"hljs-keyword\">string</span>) (*OAuth2Details, error)\n</div></li><li><div class=\"code-word\">\t....\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1075\">\n                      TokenGranter 在验证完有效的客户端和用户信息后，将会<strong\n                        data-nodeid=\"1201\"\n                        >调用 CreateAccessToken 方法生成访问令牌</strong\n                      >。CreateAccessToken 会首先根据用户信息和客户端信息从\n                      TokenStore\n                      中获取已保存的访问令牌，如果访问令牌存在且未失效，将会直接返回该访问令牌；如果访问令牌已经失效，那么将尝试根据用户信息和客户端信息生成一个新的访问令牌并返回。代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(tokenService *DefaultTokenService)</span> <span class=\"hljs-title\">CreateAccessToken</span><span class=\"hljs-params\">(oauth2Details *OAuth2Details)</span> <span class=\"hljs-params\">(*OAuth2Token, error)</span></span> {\n</div></li><li><div class=\"code-word\">\texistToken, err := tokenService.tokenStore.GetAccessToken(oauth2Details)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">var</span> refreshToken *OAuth2Token\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 存在未失效访问令牌，直接返回</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> existToken != <span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> !existToken.IsExpired() {\n</div></li><li><div class=\"code-word\">\t\t\terr = tokenService.tokenStore.StoreAccessToken(existToken, oauth2Details)\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">return</span> existToken, err\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">// 访问令牌已失效，移除</span>\n</div></li><li><div class=\"code-word\">\t\terr = tokenService.tokenStore.RemoveAccessToken(existToken.TokenValue)\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> existToken.RefreshToken != <span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">\t\t\trefreshToken = existToken.RefreshToken\n</div></li><li><div class=\"code-word\">\t\t\terr = tokenService.tokenStore.RemoveRefreshToken(refreshToken.TokenType)\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t\t\t}\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> refreshToken == <span class=\"hljs-literal\">nil</span> || refreshToken.IsExpired() {\n</div></li><li><div class=\"code-word\">\t\trefreshToken, err = tokenService.createRefreshToken(oauth2Details)\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 生成新的访问令牌</span>\n</div></li><li><div class=\"code-word\">\taccessToken, err := tokenService.createAccessToken(refreshToken, oauth2Details)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 保存新生成令牌</span>\n</div></li><li><div class=\"code-word\">\terr = tokenService.tokenStore.StoreAccessToken(accessToken, oauth2Details)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\terr = tokenService.tokenStore.StoreRefreshToken(refreshToken, oauth2Details)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> accessToken, err\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1077\">\n                      在上述代码中，除了生成访问令牌，还会生成对应的刷新令牌。在令牌生成成功之后，CreateAccessToken\n                      方法会通过 TokenStore 将它们保存到系统中。\n                    </p>\n                    <p data-nodeid=\"1078\">\n                      另一个<strong data-nodeid=\"1208\"\n                        >GetOAuth2DetailsByAccessToken\n                        方法主要用于验证访问令牌的有效性，并根据访问令牌获取其绑定的客户端和用户信息，</strong\n                      >\n                      代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(tokenService *DefaultTokenService)</span> <span class=\"hljs-title\">GetOAuth2DetailsByAccessToken</span><span class=\"hljs-params\">(tokenValue <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(*OAuth2Details, error)</span></span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 从 TokenStore 中获取令牌数据</span>\n</div></li><li><div class=\"code-word\">\taccessToken, err := tokenService.tokenStore.ReadAccessToken(tokenValue)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> accessToken.IsExpired() {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, ErrExpiredToken\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 获取令牌对应的客户端和用户信息</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> tokenService.tokenStore.ReadOAuth2Details(tokenValue)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1080\">\n                      在上述代码中，GetOAuth2DetailsByAccessToken\n                      方法首先根据访问令牌的值从 TokenStore\n                      中获取到对应的访问令牌结构体，如果访问令牌没有失效，再通过\n                      TokenStore 获取生成访问令牌时绑定的用户信息和客户端信息。\n                    </p>\n                    <h3 data-nodeid=\"1081\">令牌存储器</h3>\n                    <p data-nodeid=\"1082\">\n                      TokenStore（令牌存储器） 为\n                      TokenService（令牌服务）<strong data-nodeid=\"1216\"\n                        >提供了令牌的存储和查找能力</strong\n                      >，维护了令牌和用户、客户端之间的绑定关系，主要提供了以下的接口：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> TokenStore <span class=\"hljs-keyword\">interface</span> {\n</div></li><li><div class=\"code-word\">\t....\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 存储访问令牌</span>\n</div></li><li><div class=\"code-word\">\tStoreAccessToken(oauth2Token *OAuth2Token, oauth2Details *OAuth2Details) error\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 根据令牌值获取访问令牌结构体</span>\n</div></li><li><div class=\"code-word\">\tReadAccessToken(tokenValue <span class=\"hljs-keyword\">string</span>) (*OAuth2Token, error)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 根据令牌值获取令牌对应的客户端和用户信息</span>\n</div></li><li><div class=\"code-word\">\tReadOAuth2Details(tokenValue <span class=\"hljs-keyword\">string</span>)(*OAuth2Details, error)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 根据令牌值获取刷新令牌</span>\n</div></li><li><div class=\"code-word\">\tReadRefreshToken(tokenValue <span class=\"hljs-keyword\">string</span>)(*OAuth2Token, error)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 根据令牌值获取刷新令牌对应的客户端和用户信息</span>\n</div></li><li><div class=\"code-word\">\tReadOAuth2DetailsForRefreshToken(tokenValue <span class=\"hljs-keyword\">string</span>)(*OAuth2Details, error)\n</div></li><li><div class=\"code-word\">\t....\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1084\">\n                      考虑到 JWT 自包含的特性，我们<strong data-nodeid=\"1222\"\n                        >使用 JWT 作为访问令牌的载体</strong\n                      >，将令牌和用户、客户端之间的绑定关系维护在 JWT\n                      样式的令牌中，避免将这些关联关系存储在系统，这就减少了对存储系统的访问次数，有利于提高系统的吞吐量。TokenStore\n                      主要借助TokenEnhancer\n                      组装和解析令牌中的信息，TokenEnhancer提供以下接口：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> TokenEnhancer <span class=\"hljs-keyword\">interface</span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 组装 Token 信息</span>\n</div></li><li><div class=\"code-word\">\tEnhance(oauth2Token *OAuth2Token, oauth2Details *OAuth2Details) (*OAuth2Token, error)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 从 Token 中还原信息</span>\n</div></li><li><div class=\"code-word\">\tExtract(tokenValue <span class=\"hljs-keyword\">string</span>) (*OAuth2Token, *OAuth2Details, error)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1086\">\n                      JwtTokenEnhancer 会把令牌对应的用户信息和客户端信息写入\n                      JWT\n                      样式的令牌声明中，也就是说通过令牌值即可知道令牌绑定的用户信息和客户端信息，它的\n                      Enhance 方法实现如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(enhancer *JwtTokenEnhancer)</span> <span class=\"hljs-title\">Enhance</span><span class=\"hljs-params\">(oauth2Token *OAuth2Token, oauth2Details *OAuth2Details)</span> <span class=\"hljs-params\">(*OAuth2Token, error)</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> enhancer.sign(oauth2Token, oauth2Details)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(enhancer *JwtTokenEnhancer)</span> <span class=\"hljs-title\">sign</span><span class=\"hljs-params\">(oauth2Token *OAuth2Token, oauth2Details *OAuth2Details)</span>  <span class=\"hljs-params\">(*OAuth2Token, error)</span></span> {\n</div></li><li><div class=\"code-word\">\texpireTime := oauth2Token.ExpiresTime\n</div></li><li><div class=\"code-word\">\tclientDetails := oauth2Details.Client\n</div></li><li><div class=\"code-word\">\tuserDetails := oauth2Details.User\n</div></li><li><div class=\"code-word\">\tclientDetails.ClientSecret = <span class=\"hljs-string\">\"\"</span>\n</div></li><li><div class=\"code-word\">\tuserDetails.Password = <span class=\"hljs-string\">\"\"</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 添加 JWT 声明</span>\n</div></li><li><div class=\"code-word\">\tclaims := OAuth2TokenCustomClaims{\n</div></li><li><div class=\"code-word\">\t\tUserDetails:userDetails,\n</div></li><li><div class=\"code-word\">\t\tClientDetails:clientDetails,\n</div></li><li><div class=\"code-word\">\t\tStandardClaims:jwt.StandardClaims{\n</div></li><li><div class=\"code-word\">\t\t\tExpiresAt:expireTime.Unix(),\n</div></li><li><div class=\"code-word\">\t\t\tIssuer:<span class=\"hljs-string\">\"System\"</span>,\n</div></li><li><div class=\"code-word\">\t\t},\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> oauth2Token.RefreshToken != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\tclaims.RefreshToken = *oauth2Token.RefreshToken\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// JWT 签名，生成令牌</span>\n</div></li><li><div class=\"code-word\">\ttokenValue, err := token.SignedString(enhancer.secretKey)\n</div></li><li><div class=\"code-word\">\t\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\toauth2Token.TokenValue = tokenValue\n</div></li><li><div class=\"code-word\">\toauth2Token.TokenType = <span class=\"hljs-string\">\"jwt\"</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> oauth2Token, <span class=\"hljs-literal\">nil</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1088\">\n                      在上述代码中，Enhance\n                      方法将令牌对应的用户信息和客户端信息写入 JWT\n                      的声明中，这样授权服务器在下次拿到令牌时，就可以根据令牌值获取到令牌绑定的用户信息和客户端信息。令牌解析的代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(enhancer *JwtTokenEnhancer)</span> <span class=\"hljs-title\">Extract</span><span class=\"hljs-params\">(tokenValue <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(*OAuth2Token, *OAuth2Details, error)</span></span>  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 使用签名解析 JWT 值</span>\n</div></li><li><div class=\"code-word\">\ttoken, err := jwt.ParseWithClaims(tokenValue, &amp;OAuth2TokenCustomClaims{}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(token *jwt.Token)</span> <span class=\"hljs-params\">(i <span class=\"hljs-keyword\">interface</span>{}, e error)</span></span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> enhancer.secretKey, <span class=\"hljs-literal\">nil</span>\n</div></li><li><div class=\"code-word\">\t})\n</div></li><li><div class=\"code-word\">\t\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\tclaims := token.Claims.(*OAuth2TokenCustomClaims)\n</div></li><li><div class=\"code-word\">\texpiresTime := time.Unix(claims.ExpiresAt, <span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 返回从 JWT 中解析出来的客户端和用户信息</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> &amp;OAuth2Token{\n</div></li><li><div class=\"code-word\">\t\t\tRefreshToken:&amp;claims.RefreshToken,\n</div></li><li><div class=\"code-word\">\t\t\tTokenValue:tokenValue,\n</div></li><li><div class=\"code-word\">\t\t\tExpiresTime: &amp;expiresTime,\n</div></li><li><div class=\"code-word\">\t\t}, &amp;OAuth2Details{\n</div></li><li><div class=\"code-word\">\t\t\tUser:claims.UserDetails,\n</div></li><li><div class=\"code-word\">\t\t\tClient:claims.ClientDetails,\n</div></li><li><div class=\"code-word\">\t\t}, <span class=\"hljs-literal\">nil</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1090\">\n                      以 JWT\n                      作为令牌的载体，每个令牌都是自包含的，它携带了请求它的用户信息和客户端信息，在资源服务器解析\n                      JWT 成功后，即可定位当前请求的来源方。\n                    </p>\n                    <p data-nodeid=\"1091\">\n                      JwtTokenStore 存取令牌的能力主要借助 JwtTokenEnhancer 编码\n                      JWT 和解码 JWT 实现。<strong data-nodeid=\"1231\"\n                        >借助 JwtTokenEnhancer，我们可以很方便地管理\n                        JwtTokenStore\n                        中的令牌和用户、客户端之间的绑定关系</strong\n                      >。由于 JWT\n                      签发之后不可更改，所以令牌只有在有效时长过后才会过期失效；如果存在立即失效访问令牌的需求，我还是建议你将令牌和用户、客户端的存储关系维护在外部存储中，这样就能提供令牌主动失效的能力。\n                    </p>\n                    <h3 data-nodeid=\"1092\">令牌端点</h3>\n                    <p data-nodeid=\"1093\">\n                      前面我们说明过授权服务器中提供了 /oauth/token 端点和\n                      /oauth/check_token\n                      端点分别用于请求访问令牌和验证令牌的有效性。\n                    </p>\n                    <p data-nodeid=\"1094\">\n                      /oauth/token 端点通过请求参数中的 grant_type\n                      来识别请求访问令牌的授权类型，并验证请求中携带的客户端凭证和用户凭证是否有效，只有通过验证的客户端请求才能获取访问令牌。它通过\n                      TokenGranter.Grant 方法为客户端生成访问令牌。\n                    </p>\n                    <p data-nodeid=\"1095\">\n                      客户端和资源服务器使用/oauth/check_token\n                      端点验证访问令牌的有效性。如果访问令牌有效，该端点将会返回与访问令牌绑定的用户信息和客户端信息，它使用TokenService.GetOAuth2DetailsByAccessToken\n                      方法验证访问令牌的有效性。\n                    </p>\n                    <p data-nodeid=\"1096\">\n                      在请求访问令牌之前，授权服务器会首先验证 Authorization\n                      请求头中携带的客户端信息，对此需要添加\n                      makeClientAuthorizationContext\n                      请求处理器来获取请求中的客户端信息，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">makeClientAuthorizationContext</span><span class=\"hljs-params\">(clientDetailsService service.ClientDetailsService, logger log.Logger)</span> <span class=\"hljs-title\">kithttp</span>.<span class=\"hljs-title\">RequestFunc</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, r *http.Request)</span> <span class=\"hljs-title\">context</span>.<span class=\"hljs-title\">Context</span></span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 解析 Authorization，获取 clientId 和 clientSecret</span>\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> clientId, clientSecret, ok := r.BasicAuth(); ok {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// 验证客户端信息</span>\n</div></li><li><div class=\"code-word\">\t\t\tclientDetails, err := clientDetailsService.GetClientDetailsByClientId(ctx, clientId, clientSecret)\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\t\t\t<span class=\"hljs-keyword\">return</span> context.WithValue(ctx, endpoint.OAuth2ErrorKey, ErrInvalidClientRequest)\n</div></li><li><div class=\"code-word\">\t\t\t}\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">return</span> context.WithValue(ctx, endpoint.OAuth2ClientDetailsKey, clientDetails)\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> context.WithValue(ctx, endpoint.OAuth2ErrorKey, ErrInvalidClientRequest)\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1098\">\n                      一般来讲，客户端信息会通过 base64 的方式加密后放入\n                      Authorization 请求头中，加密前的信息按照\n                      clientId:clientSecret 的规则组装。在上述代码中，通过\n                      makeClientAuthorizationContext 方法从 Authorization\n                      请求头获取到请求的客户端信息后，使用 ClientDetailsService\n                      加载客户端信息并校验，验证成功后，将客户端信息放入 context\n                      中传递到下游。\n                    </p>\n                    <p data-nodeid=\"1099\">\n                      在请求正式进入 Endpoint 之前，授权服务器还要验证 context\n                      的客户端信息是否存在，这就需要添加客户端验证中间件\n                      MakeClientAuthorizationMiddleware，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MakeClientAuthorizationMiddleware</span><span class=\"hljs-params\">(logger log.Logger)</span> <span class=\"hljs-title\">endpoint</span>.<span class=\"hljs-title\">Middleware</span></span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(next endpoint.Endpoint)</span> <span class=\"hljs-title\">endpoint</span>.<span class=\"hljs-title\">Endpoint</span></span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, request <span class=\"hljs-keyword\">interface</span>{})</span> <span class=\"hljs-params\">(response <span class=\"hljs-keyword\">interface</span>{}, err error)</span></span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 请求上下文是否存在错误</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> err, ok := ctx.Value(OAuth2ErrorKey).(error); ok{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 验证客户端信息是否存在，不存在返回异常</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> _, ok := ctx.Value(OAuth2ClientDetailsKey).(*model.ClientDetails); !ok{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>  <span class=\"hljs-literal\">nil</span>, ErrInvalidClientRequest\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> next(ctx, request)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1101\">\n                      在 MakeClientAuthorizationMiddleware\n                      中间件中会验证请求上下文是否携带了客户端信息，如果请求中没有携带验证过的客户端信息，将直接返回错误给请求方。\n                    </p>\n                    <p data-nodeid=\"1102\">\n                      接下来我们就来演示如何通过 /oauth/token\n                      端点获取访问令牌和通过 /oauth/check_token\n                      端点验证访问令牌。我们在授权服务器内内置用户名为\n                      aoho、密码为 123456 的用户信息和客户端标识为\n                      clientId、密钥为 clientSecret\n                      的客户端信息，使用密码类型为该客户端请求用户 aoho\n                      的访问令牌，curl 命令如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">curl</span> <span class=\"hljs-literal\">-X</span> POST \\\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">'http://localhost:10098/oauth/token?grant_type=password'</span> \\\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-literal\">-H</span> <span class=\"hljs-string\">'Authorization: Basic Y2xpZW50SWQ6Y2xpZW50U2VjcmV0'</span> \\\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-literal\">-H</span> <span class=\"hljs-string\">'Content-Type: multipart/form-data'</span> \\\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-literal\">-H</span> <span class=\"hljs-string\">'Host: localhost:10098'</span> \\\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-operator\">-F</span> username=aoho \\\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-operator\">-F</span> password=<span class=\"hljs-number\">123456</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1104\">\n                      将访问令牌的 TokenValue 提交到 /oauth/check_token\n                      端点中，即可验证访问令牌的有效性，获取令牌绑定的客户端和用户信息，curl\n                      命令如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">curl</span> <span class=\"hljs-literal\">-X</span> POST \\\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">'http://localhost:10098/oauth/check_token?token=...'</span> \\\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-literal\">-H</span> <span class=\"hljs-string\">'Authorization: Basic Y2xpZW50SWQ6Y2xpZW50U2VjcmV0'</span> \\\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-literal\">-H</span> <span class=\"hljs-string\">'Host: localhost:10098'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1106\">\n                      由于 TokenValue\n                      过长，参数中使用省略号表示，有效的访问令牌能够获取令牌绑定的客户端信息和用户信息，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"o_auth_details\"</span>:{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"Client\"</span>:{\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">\"ClientId\"</span>:<span class=\"hljs-string\">\"clientId\"</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">\"ClientSecret\"</span>:<span class=\"hljs-string\">\"\"</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">\"AccessTokenValiditySeconds\"</span>:<span class=\"hljs-number\">1800</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">\"RefreshTokenValiditySeconds\"</span>:<span class=\"hljs-number\">18000</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">\"RegisteredRedirectUri\"</span>:<span class=\"hljs-string\">\"http://127.0.0.1\"</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">\"AuthorizedGrantTypes\"</span>:[\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"password\"</span>,\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"refresh_token\"</span>\n</div></li><li><div class=\"code-word\">            ]\n</div></li><li><div class=\"code-word\">        },\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">\"User\"</span>:{\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">\"UserId\"</span>:<span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">\"Username\"</span>:<span class=\"hljs-string\">\"aoho\"</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">\"Password\"</span>:<span class=\"hljs-string\">\"\"</span>,\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-attr\">\"Authorities\"</span>:[\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"Simple\"</span>\n</div></li><li><div class=\"code-word\">            ]\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"error\"</span>:<span class=\"hljs-string\">\"\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1108\">\n                      到这里，我们就实现了授权服务器颁发访问令牌和验证访问令牌有效性的主要能力。\n                    </p>\n                    <h3 data-nodeid=\"1109\">小结</h3>\n                    <p data-nodeid=\"1110\">\n                      在统一认证与授权服务体系中，授权服务器的主要职责为<strong\n                        data-nodeid=\"1264\"\n                        >颁发令牌</strong\n                      >和<strong data-nodeid=\"1265\">验证令牌的有效性</strong>。\n                    </p>\n                    <p data-nodeid=\"1111\">\n                      在本课时，我们使用 Go 搭建了一个提供 HTTP\n                      接口的授权服务器。客户端能够使用密码类型，通过携带用户的用户名密码向授权服务器请求访问令牌。访问令牌是一段自包含的\n                      JWT\n                      对象，其内包含了令牌绑定的用户和客户端信息。另外，授权服务器还提供相应的接口给客户端和资源服务器验证访问令牌的有效性，以及获取令牌绑定的用户和客户端信息。\n                    </p>\n                    <p data-nodeid=\"1112\" class=\"\">\n                      希望通过本课时的学习能够帮助你了解如何实现一个基本的授权服务器，加深你对统一认证与授权服务体系的认知。在下一课时，我们将介绍如何实现资源服务器，并尝试使用授权服务器颁发的访问令牌访问资源服务器中的受保护用户资源。\n                    </p>\n            "}