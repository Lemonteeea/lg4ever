{"title":"10 | 表达原则：如何让源代码成为一种逻辑线索？","context":"\n                    <p data-nodeid=\"185398\">\n                      维护代码是程序员非常重要的日常工作之一，那么你是否曾遇见过以下问题？\n                    </p>\n                    <ul data-nodeid=\"185399\">\n                      <li data-nodeid=\"185400\">\n                        <p data-nodeid=\"185401\">\n                          接手维护项目，却发现文档缺失、代码无注释，加上维护人离职，基本只能靠猜来梳理代码逻辑。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"185402\">\n                        <p data-nodeid=\"185403\">\n                          代码风格过于抽象（命名过短、魔鬼数字、重名方法等），看不懂，也不敢轻易修改。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"185404\">\n                        <p data-nodeid=\"185405\">\n                          运行代码出现故障时，不打日志，不抛异常，导致定位问题需要耗费很长时间。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"185406\">\n                        <p data-nodeid=\"185407\">\n                          大段的if-else代码嵌套组合，调用逻辑复杂冗长，扩展性差，重构优化费时、费力。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"185408\">\n                      你发现没，造成这些问题的原因其实都是<strong\n                        data-nodeid=\"185488\"\n                        >代码的可读性差，没能很好地串联起代码内在的逻辑</strong\n                      >。可读性差的代码难以理解，这不仅会造成诸多误解和麻烦，还会导致项目交付效率变低。虽然代码可读性是一种主观的定义，但是它确实能保证研发人员快速准确地理解代码的真实含义。\n                    </p>\n                    <p data-nodeid=\"185409\">\n                      那么，为了提高代码的可读性，我们该如何做呢？今天这一讲我们就一起来学习一个能帮助你<strong\n                        data-nodeid=\"185494\"\n                        >快速提升代码可读性的原则：表达原则</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"185410\">为什么要提升源代码的可读性</h3>\n                    <p data-nodeid=\"185411\">\n                      提升源代码的可读性主要有以下四大好处。\n                    </p>\n                    <p data-nodeid=\"185412\">\n                      <strong data-nodeid=\"185501\">第一，更易于维护</strong\n                      >。代码写好后，需要调试、运行与修复\n                      Bug，设计文档、需求文档和口头交流只能表达部分业务逻辑的意图，而代码则能反映出编程实现业务逻辑时的全部真实意图。可读性高的代码，能让阅读者在阅读时快速理解编写者的意图，即便逻辑复杂，也能在修改时准确地分析和理解，大大节省维护和修改代码的时间。\n                    </p>\n                    <p data-nodeid=\"185413\">\n                      <strong data-nodeid=\"185506\">第二，更易于重构</strong\n                      >。现在很多项目之所以难以重构，就是因为代码的可读性太差。当你无法理解一段代码时，你会跳过它，而整个系统都难以理解的话，你可能就会选择重写而不是重构，因为重构必然会修改原有代码，这会引入一定的风险，一旦因为重构而导致故障，那么维护的人就要担责。所以说，可读性的高低在某种程度上决定了你重构意愿的大小。\n                    </p>\n                    <p data-nodeid=\"185414\">\n                      <strong data-nodeid=\"185511\">第三，更易于测试</strong\n                      >。代码在修改时需要反复调试，如果代码的可读性很差，那么很多时候都需要写一些额外的\n                      Mock\n                      或测试接口来对原有的代码进行测试，不仅浪费时间，还容易造成误读。可读性高的代码，参数与输出都更清晰，在测试时能更精准地找到对应逻辑和问题点。\n                    </p>\n                    <p data-nodeid=\"185415\">\n                      <strong data-nodeid=\"185516\"\n                        >第四，更易于应用设计模式</strong\n                      >。设计模式除了在设计之初被使用外，其实更多时候都是在代码重构过程中被使用。在工作中，你会发现有的代码虽然写了很多嵌套的if-else，但命名和注释都写得很好，逻辑也很易读，在重构时就能通过设计模式很好地去优化。而有的代码虽然看上去很简洁，但使用了很多高级技巧或缩写命名，理解起来非常费时、费力，对于维护人员来说，自然不愿意考虑使用设计模式。\n                    </p>\n                    <p data-nodeid=\"185416\">\n                      总体来说，提升代码的可读性能够帮助我们更好地理解代码，只有理解了代码才能更好地维护代码，而本质上代码就是用来维护的——不断修改与发布；另外，还有一个重要的用处是，能帮助阅读代码的人快速找到代码的实现逻辑。\n                    </p>\n                    <h3 data-nodeid=\"185417\">表达原则：凸显代码的内在逻辑</h3>\n                    <p data-nodeid=\"185418\">\n                      虽说编写文档能够表达软件开发意图，但事实上，你可能很讨厌写文档，这是因为大部分文档都与代码没有直接关系，并且随着代码的不断调试与修改，文档会变得越来越难以与最新的真实情况同步。\n                    </p>\n                    <p data-nodeid=\"185419\">\n                      另外，你可能也没有太多时间阅读文档，需求上线、Bug\n                      修复、多项目并发是现在程序员的日常现状。因为时间紧、任务重，你可能只能边改代码边学习，这时一份逻辑清晰的代码才是你真正需要的。\n                    </p>\n                    <p data-nodeid=\"185420\">\n                      不过，很多时候你可能并不知道该怎么在代码中表达自己的意图，其实，有一个原则可以帮到你，那就是表达原则。\n                    </p>\n                    <p data-nodeid=\"185421\">\n                      表达原则（Program Intently and Expressively，简称\n                      PIE），起源于敏捷编程，是<strong data-nodeid=\"185527\"\n                        >指编程时应该有清晰的编程意图，并通过代码明确地表达出来</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"185422\">\n                      简单来说，表达原则的核心思想就是：代码即文档。也就是说，写代码时要像写设计文档一样帮助阅读者理解你想要表达的意图，要从程序设计者的角度跳出来，站在使用者的角度来写代码。\n                    </p>\n                    <p data-nodeid=\"185423\">\n                      可以换个角度想想，假如你是代码使用者，你希望看到什么样的代码？很明显，没有人想要看到这样的代码（来自网络的一段烂代码）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">cName = InpList.get(<span class=\"hljs-number\">0</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    cCode = InpList.get(<span class=\"hljs-number\">1</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    cAlpha2 = InpList.get(<span class=\"hljs-number\">2</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    cAbreviation = InpList.get(<span class=\"hljs-number\">3</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dYear = InpList.get(<span class=\"hljs-number\">4</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dPoliticalCompatibility = InpList.get(<span class=\"hljs-number\">5</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankPoliticalCompatibility = InpList.get(<span class=\"hljs-number\">6</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dEconomicCompatibility = InpList.get(<span class=\"hljs-number\">7</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankEconomicCompatibility = InpList.get(<span class=\"hljs-number\">8</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dMilitaryCompatibility = InpList.get(<span class=\"hljs-number\">9</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankMilitaryCompatibility = InpList.get(<span class=\"hljs-number\">10</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dDemoScore = InpList.get(<span class=\"hljs-number\">11</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankDemoScore = InpList.get(<span class=\"hljs-number\">12</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dEnvironmentalCompatibility = InpList.get(<span class=\"hljs-number\">13</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankEnvironmentalCompatibility = InpList.get(<span class=\"hljs-number\">14</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dSumCompatibility = InpList.get(<span class=\"hljs-number\">15</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankCompatibility = InpList.get(<span class=\"hljs-number\">16</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dPoliticalUtility = InpList.get(<span class=\"hljs-number\">17</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankPoliticalUtility = InpList.get(<span class=\"hljs-number\">18</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dEconomicUtility = InpList.get(<span class=\"hljs-number\">19</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankEconomicUtility = InpList.get(<span class=\"hljs-number\">20</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dMilitaryUtility = InpList.get(<span class=\"hljs-number\">21</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankMilitaryUtility = InpList.get(<span class=\"hljs-number\">22</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dEnvironmentalUtility = InpList.get(<span class=\"hljs-number\">23</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankEnvironmentalUtility = InpList.get(<span class=\"hljs-number\">24</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dSumUtility = InpList.get(<span class=\"hljs-number\">25</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankUtility = InpList.get(<span class=\"hljs-number\">26</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dPoliticalScore = InpList.get(<span class=\"hljs-number\">27</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankPoliticalScore = InpList.get(<span class=\"hljs-number\">28</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dEconomicScore = InpList.get(<span class=\"hljs-number\">29</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankEconomicScore = InpList.get(<span class=\"hljs-number\">30</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dMilitaryScore = InpList.get(<span class=\"hljs-number\">31</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankMilitaryScore = InpList.get(<span class=\"hljs-number\">32</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dEnvironmentalScore = InpList.get(<span class=\"hljs-number\">33</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankEnvironmentalScore = InpList.get(<span class=\"hljs-number\">34</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dAggregate = InpList.get(<span class=\"hljs-number\">35</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li><li><div class=\"code-word\">                    dRankAggregate = InpList.get(<span class=\"hljs-number\">36</span>).replace(<span class=\"hljs-string\">\",\"</span>, <span class=\"hljs-string\">\".\"</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"185425\">\n                      而是，希望看到这样的代码（HttpClient 的某个代码片段）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * {<span class=\"hljs-doctag\">@inheritDoc</span>}\n</div></li><li><div class=\"code-word\"> */\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> CloseableHttpResponse <span class=\"hljs-title\">execute</span><span class=\"hljs-params\">(\n</span></span></div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">final</span> HttpUriRequest request,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">final</span> HttpContext context) <span class=\"hljs-keyword\">throws</span> IOException, ClientProtocolException {\n</div></li><li><div class=\"code-word\">    Args.notNull(request, <span class=\"hljs-string\">\"HTTP request\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> doExecute(determineTarget(request), request, context);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> HttpHost <span class=\"hljs-title\">determineTarget</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> HttpUriRequest request)</span> <span class=\"hljs-keyword\">throws</span> ClientProtocolException </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// A null target may be acceptable if there is a default target.</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// Otherwise, the null target is detected in the director.</span>\n</div></li><li><div class=\"code-word\">    HttpHost target = <span class=\"hljs-keyword\">null</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">final</span> URI requestURI = request.getURI();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (requestURI.isAbsolute()) {\n</div></li><li><div class=\"code-word\">        target = URIUtils.extractHost(requestURI);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (target == <span class=\"hljs-keyword\">null</span>) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ClientProtocolException(<span class=\"hljs-string\">\"URI does not specify a valid host name: \"</span>\n</div></li><li><div class=\"code-word\">                    + requestURI);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> target;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"185427\">\n                      所以说，<strong data-nodeid=\"185536\"\n                        >在开发代码时，应该更注重代码表达的意图是否清晰</strong\n                      >，考虑使用一些方法和技巧，虽然会耗费一点时间，但是从整体来看，你会节省很多沟通与解释的时间，做到在真正的提升编码效率。\n                    </p>\n                    <h3 data-nodeid=\"185428\">如何写出有“逻辑线索”的源代码</h3>\n                    <p data-nodeid=\"185429\">\n                      要想写出可读性高的代码，你可以从三个方面来入手。\n                    </p>\n                    <ul data-nodeid=\"185430\">\n                      <li data-nodeid=\"185431\">\n                        <p data-nodeid=\"185432\">\n                          <strong data-nodeid=\"185543\">代码表现形式</strong\n                          >：在命名（变量名、方法名、类名）、代码格式、注释等方面的改进。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"185433\">\n                        <p data-nodeid=\"185434\">\n                          <strong data-nodeid=\"185548\">控制流和逻辑</strong\n                          >：尽量分离控制流和逻辑，让代码变得更容易理解。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"185435\">\n                        <p data-nodeid=\"185436\">\n                          <strong data-nodeid=\"185553\">惯性思维</strong\n                          >：找出常犯的一些惯性思考方式并逐一改进。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"185437\">下面我就来具体解释下。</p>\n                    <h4 data-nodeid=\"186543\" class=\"\">1. 优化代码表现形式</h4>\n\n                    <p data-nodeid=\"185441\">\n                      命名在编程中至关重要，无论是变量名、类名还是方法名，好的名字能快速准确地传达要表达的含义，而缩写、自定义名称会让代码变得难以理解。我们先来看一段代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">T</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> Set&lt;String&gt; pns = <span class=\"hljs-keyword\">new</span> HashSet();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> s = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Boolean <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(String n)</span> </span>{<span class=\"hljs-keyword\">return</span> pns.contains(n);}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getS</span><span class=\"hljs-params\">()</span> </span>{<span class=\"hljs-keyword\">return</span> s;}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">s</span><span class=\"hljs-params\">(List&lt;T&gt; ts, String n)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (T t :ts) \n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (t.f(n)) \n</div></li><li><div class=\"code-word\">                <span class=\"hljs-keyword\">return</span> t.getS();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"185443\">\n                      这段代码到底实现了什么功能？估计没有人能回答出来。如果编写者不是我，我肯定也无法理解这段代码。光凭看代码，几乎是无法理解这段代码的真实含义到底是什么的。\n                    </p>\n                    <p data-nodeid=\"185444\">\n                      实际上，这个类是获取球队比赛得分的，除了通过球队直接获得比赛得分外，还可以通过球队里的某个球员来查找对应得分，具体修改如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * 获取球队比赛得分\n</div></li><li><div class=\"code-word\"> **/\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Team</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> Set&lt;String&gt; playerNames = <span class=\"hljs-keyword\">new</span> HashSet(); <span class=\"hljs-comment\">//保证名字不重复</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> score = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//默认为零</span>\n</div></li><li><div class=\"code-word\">    \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\">     * 判断是否包含球员\n</div></li><li><div class=\"code-word\">     * <span class=\"hljs-doctag\">@param</span> playerName\n</div></li><li><div class=\"code-word\">     * <span class=\"hljs-doctag\">@return</span>\n</div></li><li><div class=\"code-word\">     */\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Boolean <span class=\"hljs-title\">containsPlayer</span><span class=\"hljs-params\">(String playerName)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> playerNames.contains(playerName);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\">     * 知道队伍，直接获取分数\n</div></li><li><div class=\"code-word\">     * <span class=\"hljs-doctag\">@return</span>\n</div></li><li><div class=\"code-word\">     */\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getScore</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> score;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\">     * 通过队员名字查找所属队伍分数\n</div></li><li><div class=\"code-word\">     * <span class=\"hljs-doctag\">@param</span> teams 支持多个队伍\n</div></li><li><div class=\"code-word\">     * <span class=\"hljs-doctag\">@param</span> playerName \n</div></li><li><div class=\"code-word\">     * <span class=\"hljs-doctag\">@return</span> 兜底为0分，不出现负分\n</div></li><li><div class=\"code-word\">     */\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getTeamScoreForPlayer</span><span class=\"hljs-params\">(List&lt;Team&gt; teams, String playerName)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">for</span> (Team team :teams) {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (team.containsPlayer(playerName)) {\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-keyword\">return</span> team.getScore();\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"185446\">\n                      从优化后的代码中，你就能直观地看到，<strong\n                        data-nodeid=\"185564\"\n                        >“命名的优化加上注释的说明”一下子就让源代码的逻辑变得清晰起来</strong\n                      >，即便你没有学过编程，也能大致了解这段代码的逻辑和作用。\n                    </p>\n                    <h4 data-nodeid=\"186997\" class=\"\">2. 改进控制流和逻辑</h4>\n\n                    <p data-nodeid=\"185450\">\n                      这里我们还是直接从一个例子开始，具体代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title\">getUsers</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>{\n</div></li><li><div class=\"code-word\">    List&lt;User&gt; result = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">    User user = getUserById(id);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> != user) {\n</div></li><li><div class=\"code-word\">        Manager manager = user.getManager();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> != manager) {\n</div></li><li><div class=\"code-word\">            List&lt;User&gt; users = manager.getUsers();\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> != users &amp;&amp; users.size() &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-keyword\">for</span> (User user1 : users) {\n</div></li><li><div class=\"code-word\">                    <span class=\"hljs-keyword\">if</span> (user1.getAge() &gt;= <span class=\"hljs-number\">35</span> &amp;&amp; <span class=\"hljs-string\">\"MALE\"</span>.equals(user1.getSex())) {\n</div></li><li><div class=\"code-word\">                        result.add(user1);\n</div></li><li><div class=\"code-word\">                    }\n</div></li><li><div class=\"code-word\">                }\n</div></li><li><div class=\"code-word\">            } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">                System.out.println(<span class=\"hljs-string\">\"获取员工列表失败\"</span>);\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            System.out.println(<span class=\"hljs-string\">\"获取领导信息失败\"</span>);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"获取员工信息失败\"</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> result;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"185452\">\n                      这段代码的含义是：想要通过 id 来查询员工的信息，如果\n                      id找不到，就查询员工的领导，然后通过他领导下的员工信息来寻找，这时还需要判断员工年龄大于\n                      35 岁且为男性。\n                    </p>\n                    <p data-nodeid=\"185453\">\n                      这是我们最常使用的逻辑实现方式，俗称<strong\n                        data-nodeid=\"185573\"\n                        >箭头型代码</strong\n                      >，但是随着判断条件逐渐增多，嵌套就会增多。代码逻辑越多，你就越容易搞不清楚逻辑是什么，因为看到最内层的代码时，你已经忘记前面每一层的条件判断是什么了。\n                    </p>\n                    <p data-nodeid=\"185454\">\n                      那么，我们该如何去优化呢？其实很简单，就是<strong\n                        data-nodeid=\"185579\"\n                        >改变控制流，先判断会出现失败的条件，一旦出现优先推出</strong\n                      >。优化后的代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title\">getStudents</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> uid)</span> </span>{\n</div></li><li><div class=\"code-word\">    List&lt;User&gt; result = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n</div></li><li><div class=\"code-word\">    User user = getUserByUid(uid);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> == user) {\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"获取员工信息失败\"</span>);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> result;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    Manager manager = user.getManager();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> == manager) {\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"获取领导信息失败\"</span>);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> result;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    List&lt;User&gt; users = manager.getUsers();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">null</span> == users || users.size() == <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">        System.out.println(<span class=\"hljs-string\">\"获取员工列表失败\"</span>);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> result;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (User user1 : users) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (user1.getAge() &gt; <span class=\"hljs-number\">35</span> &amp;&amp; <span class=\"hljs-string\">\"MALE\"</span>.equals(user1.getSex())) {\n</div></li><li><div class=\"code-word\">            result.add(user1);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> result;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"185456\">\n                      现在，代码逻辑是不是很清晰了？虽然这个快速失败方法很简单，但是非常有效。实际上，快速失败就是\n                      KISS\n                      原则一个很好的实践，这样能保证条件判断的逻辑简单清晰。只要\n                      if\n                      的嵌套超过三层，你就可以应用这个原则来改进控制流，让逻辑更清晰易懂。\n                    </p>\n                    <h4 data-nodeid=\"187447\" class=\"te-preview-highlight\">\n                      3. 避免惯性思维\n                    </h4>\n\n                    <p data-nodeid=\"185460\">\n                      除了改进表层和逻辑外，我们更应该尽量避免设计代码时的一些惯性思维，这里我总结出了“五个避免”，下面我们就来具体分析一下。\n                    </p>\n                    <p data-nodeid=\"185461\">\n                      <strong data-nodeid=\"185587\"\n                        >第一，要避免一次性代码</strong\n                      >。一次性编码最大的坏处在于，一旦需要修改，多处就得跟着修改，而多次修改又可能会出现遗漏的风险。一次性代码在越来越多的软件代码中出现，一个本质的原因就是多人协作开发的情况越来越多。由于编程是一件非标准化的事情，不同程序员可能对同一个逻辑的理解完全不同，而一旦每个人都只从自己的角度出发写一次性代码，那么同一个系统里的代码很快就会变得冗余与混乱。\n                    </p>\n                    <p data-nodeid=\"185462\">\n                      <strong data-nodeid=\"185592\"\n                        >第二，要避免复制粘贴代码</strong\n                      >。一方面，不同的人编码风格可能会有所不同，这会给阅读者在理解上造成一定的认知负担（需要来回切换判断标准）。另一方面，还会带来未知\n                      Bug的风险。复制过来的代码，更多是关注输入和输出，一旦代码正常运行后，很少会去关注代码的内部逻辑，但是等出现问题后，再想去梳理逻辑反而变得更加困难（因为不知道详细的实现逻辑）。\n                    </p>\n                    <p data-nodeid=\"185463\">\n                      <strong data-nodeid=\"185597\">第三，避免写超长代码</strong\n                      >。超长代码带来的最大问题是：在阅读代码时，函数方法之间的跳转过多，思维很容易发生混乱，尤其对于一些命名相同但参数不同的方法，很容易出现修改错误的情况。从编写者的角度来看，你写超长代码，可能是觉得在一个文件里维护代码比较方便；但对于阅读者来说，他可能并不知道你是如何对代码进行职责划分的，更多时候他都会以为一个类里都是一个职责，但实际上一旦出现多个职责，加上逻辑跳转很多，阅读者基本上是会放弃阅读的。\n                    </p>\n                    <p data-nodeid=\"185464\">\n                      <strong data-nodeid=\"185602\"\n                        >第四，避免过度简化命名和表达式</strong\n                      >。在开发任务重的时候，我们通常会选用一些简化命名的方法，比如，num1、num2、num3\n                      这类变量命名形式。虽然在写代码的时候，我们可能记得这些变量的含义，但是过一段时间后，如果没有注释或说明，几乎是不可能直接通过名字知道它们的作用的，还得借助上下文代码，这样不仅费时，而且还可能会出现理解错误的情况。\n                    </p>\n                    <p data-nodeid=\"185465\">\n                      <strong data-nodeid=\"185607\"\n                        >第五，避免写“是什么”的注释</strong\n                      >。代码的命名和结构如果能直接反映出来“是什么”的话，我们就不应该用注释去表达，因为看代码一眼就能明白，比如，获取用户信息的方法名——get\n                      和 getFromUserInfo。\n                    </p>\n                    <p data-nodeid=\"185466\">\n                      我们应该多写“为什么”的注释，比如，为什么要多加一个适配的方法，原因可能是线上\n                      xxx 问题引起，或临时修复的Bug，后续可能随 xxx\n                      接口调整而废弃，等等。在很多优秀的开源框架中，我们都能看到作者会在\n                      interface\n                      接口上写很多“为什么”的说明，就是为了帮助我们<strong\n                        data-nodeid=\"185613\"\n                        >快速抓住代码的逻辑线索</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"185467\">\n                      另外，写“为什么”的注释还有一个好处：尤其在早期快速迭代过程中，能给后来的维护者提供一个优化的切入点，而不至于交接代码后让维护代码的人看不懂、不敢动。\n                    </p>\n                    <h3 data-nodeid=\"185468\">总结</h3>\n                    <p data-nodeid=\"185469\">\n                      <strong data-nodeid=\"185619\"\n                        >表达原则的核心思想在于：通过代码清晰地表达我们的真实意图。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"185470\">\n                      虽然软件开发过程中会有诸多文档，比如，架构设计文档、流程文档、PRD\n                      文档等，但这些文档并不足以帮助我们正确理解代码是如何运行和组织的，很多时候我们只能通过阅读代码来掌握软件的真实运行情况。\n                    </p>\n                    <p data-nodeid=\"185471\">\n                      我们之所以应该把提高代码可读性作为第一要务，就是因为读代码的次数远比写代码的次数多，包括你正在写的代码也是如此。\n                    </p>\n                    <p data-nodeid=\"185472\">\n                      今天我们学习了三种主要的改进办法：一是表层的改进，从命名、表达式、变量和注释入手去提升代码可读性；二是改进代码逻辑，比如用策略模式替换嵌套过多的if-else\n                      代码；三是改进思维习惯，习惯的改善更多是需要日积月累的坚持。\n                    </p>\n                    <h3 data-nodeid=\"185473\">课后思考</h3>\n                    <p data-nodeid=\"185474\">\n                      学习完表达原则后，你一定意识到编程中表达意图的重要性了，那是不是就应该一味地只重视表达而忽略算法和数据结构呢？还有哪些你认为很重要却在编程中常常被忽略的地方呢？\n                    </p>\n                    <p data-nodeid=\"185475\">\n                      欢迎留言分享，我会第一时间给你回复。\n                    </p>\n                    <p data-nodeid=\"185476\">\n                      在下一讲，我会接着与你分享“职责原则：如何在代码设计中实现职责分离？”的相关内容，记得按时来听课！\n                    </p>\n            "}