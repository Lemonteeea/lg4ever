{"title":"37 | 解释器模式：如何实现一个自定义配置规则功能？","context":"\n                    <p data-nodeid=\"713\" class=\"\">\n                      解释器模式使用频率不算高，通常用来描述如何构建一个简单“语言”的语法解释器。它只在一些非常特定的领域被用到，比如编译器、规则引擎、正则表达式、SQL\n                      解析等。不过，了解它的实现原理同样很重要，能帮助你思考<strong\n                        data-nodeid=\"779\"\n                        >如何通过更简洁的规则来表示复杂的逻辑</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"714\">话不多说，让我们开始今天的学习吧。</p>\n                    <h3 data-nodeid=\"715\">模式原理分析</h3>\n                    <p data-nodeid=\"716\">\n                      解释器模式的原始定义是：用于定义语言的语法规则表示，并提供解释器来处理句子中的语法。\n                    </p>\n                    <p data-nodeid=\"717\">\n                      语法也称文法，在语言学中指任意自然语言中句子、短语以及词等语法单位的语法结构与语法意义的规律。比如，在编程语言中，if-else\n                      用作条件判断的语法，for\n                      用于循环语句的语法标识。再比如，“我爱中国”是一个中文句子，我们可以用名词、动词、形容词等语法规则来直观地描述句子。\n                    </p>\n                    <p data-nodeid=\"1427\">\n                      我们还是直接先来看看解释器模式的 UML 图：\n                    </p>\n                    <p data-nodeid=\"1428\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/4E/05/CioPOWDxTw6Ab2ULAAB6RYJCFSY881.png\"\n                        alt=\"【配图】37 解释器模式.png\"\n                        data-nodeid=\"1433\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1429\">\n                      <p style=\"text-align: center\">解释器模式的 UML 图</p>\n                    </div>\n\n                    <p data-nodeid=\"720\">\n                      从该 UML 图中，我们能看出解释器模式包含的关键角色有四个。\n                    </p>\n                    <ul data-nodeid=\"721\">\n                      <li data-nodeid=\"722\">\n                        <p data-nodeid=\"723\">\n                          <strong data-nodeid=\"790\"\n                            >抽象表达式（AbstractExpression）</strong\n                          >：定义一个解释器有哪些操作，可以是抽象类或接口，同时说明只要继承或实现的子节点都需要实现这些操作方法。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"724\">\n                        <p data-nodeid=\"725\">\n                          <strong data-nodeid=\"795\"\n                            >终结符表达式（TerminalExpression）</strong\n                          >：用于解释所有终结符表达式。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"726\">\n                        <p data-nodeid=\"727\">\n                          <strong data-nodeid=\"800\"\n                            >非终结符表达式（NonterminalExpression）</strong\n                          >：用于解释所有非终结符表达式。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"728\">\n                        <p data-nodeid=\"729\">\n                          <strong data-nodeid=\"805\">上下文（Context）</strong\n                          >：包含解释器全局的信息。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"730\">解释器模式 UML 对应的代码实现如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">//抽象表达式类\n</div></li><li><div class=\"code-word\">public interface AbstractExpression {\n</div></li><li><div class=\"code-word\">    boolean interpreter(Context context);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">//上下文信息类\n</div></li><li><div class=\"code-word\">public class Context {\n</div></li><li><div class=\"code-word\">    private String data;\n</div></li><li><div class=\"code-word\">    public Context(String data) {\n</div></li><li><div class=\"code-word\">        this.data = data;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    public String getData() {\n</div></li><li><div class=\"code-word\">        return data;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    public void setData(String data) {\n</div></li><li><div class=\"code-word\">        this.data = data;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">//终结符表达式类\n</div></li><li><div class=\"code-word\">public class TerminalExpression implements AbstractExpression {\n</div></li><li><div class=\"code-word\">    private String data;\n</div></li><li><div class=\"code-word\">    public TerminalExpression(String data) {\n</div></li><li><div class=\"code-word\">        this.data = data;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    @Override\n</div></li><li><div class=\"code-word\">    public boolean interpreter(Context context) {\n</div></li><li><div class=\"code-word\">        if(context.getData().contains(data)) {\n</div></li><li><div class=\"code-word\">            return true;\n</div></li><li><div class=\"code-word\">        } else {\n</div></li><li><div class=\"code-word\">            return false;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">//非终结符表达式类\n</div></li><li><div class=\"code-word\">public class NonterminalExpression implements AbstractExpression {\n</div></li><li><div class=\"code-word\">    AbstractExpression expr1;\n</div></li><li><div class=\"code-word\">    AbstractExpression expr2;\n</div></li><li><div class=\"code-word\">    public NonterminalExpression(AbstractExpression expr1, AbstractExpression expr2) {\n</div></li><li><div class=\"code-word\">        this.expr1 = expr1;\n</div></li><li><div class=\"code-word\">        this.expr2 = expr2;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    @Override\n</div></li><li><div class=\"code-word\">    public boolean interpreter(Context context) {\n</div></li><li><div class=\"code-word\">        return expr1.interpreter(context) &amp;&amp; expr2.interpreter(context);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">//单元测试类\n</div></li><li><div class=\"code-word\">public class Demo {\n</div></li><li><div class=\"code-word\">    public static void main(String[] args) {\n</div></li><li><div class=\"code-word\">        AbstractExpression person1 = new TerminalExpression(\"mick\");\n</div></li><li><div class=\"code-word\">        AbstractExpression person2 = new TerminalExpression(\"mia\");\n</div></li><li><div class=\"code-word\">        AbstractExpression isSingle = new NonterminalExpression(person1, person2);\n</div></li><li><div class=\"code-word\">        Context context1 = new Context(\"mick,mia\");\n</div></li><li><div class=\"code-word\">        Context context2 = new Context(\"mia,mock\");\n</div></li><li><div class=\"code-word\">        Context context3 = new Context(\"spike\");\n</div></li><li><div class=\"code-word\">        System.out.println(isSingle.interpreter(context1));\n</div></li><li><div class=\"code-word\">        System.out.println(isSingle.interpreter(context2));\n</div></li><li><div class=\"code-word\">        System.out.println(isSingle.interpreter(context3));\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">//输出结果\n</div></li><li><div class=\"code-word\">true\n</div></li><li><div class=\"code-word\">false\n</div></li><li><div class=\"code-word\">false\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"732\">\n                      在上面的代码实现中，NonterminalExpression\n                      用于判断两个表达式是否都存在，存在则在解释器判断时输出\n                      true，如果只有一个则会输出\n                      false。也就是说，表达式解释器的解析逻辑放在了不同的表达式子节点中，这样就能通过增加不同的节点来解析上下文。\n                    </p>\n                    <p data-nodeid=\"733\">\n                      所以说，解释器模式原理的本质就是对语法配备解释器，通过解释器来执行更详细的操作。\n                    </p>\n                    <h3 data-nodeid=\"734\">使用场景分析</h3>\n                    <p data-nodeid=\"735\">\n                      一般来讲，解释器模式常见的使用场景有这样几种。\n                    </p>\n                    <ul data-nodeid=\"736\">\n                      <li data-nodeid=\"737\">\n                        <p data-nodeid=\"738\">\n                          <strong data-nodeid=\"817\"\n                            >当语言的语法较为简单并且对执行效率要求不高时</strong\n                          >。比如，通过正则表达式来寻找 IP\n                          地址，就不需要对四个网段都进行 0~255 的判断，而是满足\n                          IP 地址格式的都能被找出来。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"739\">\n                        <p data-nodeid=\"740\">\n                          <strong data-nodeid=\"822\"\n                            >当问题重复出现，且可以用一种简单的语言来进行表达时</strong\n                          >。比如，使用 if-else 来做条件判断语句，当代码中出现\n                          if-else\n                          的语句块时都统一解释为条件语句而不需要每次都重新定义和解释。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"741\">\n                        <p data-nodeid=\"742\">\n                          <strong data-nodeid=\"829\"\n                            >当一个语言需要解释执行时</strong\n                          >。如 XML 文档中&lt;&gt;括号表示的不同的节点含义。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"743\">\n                      为了方便你更好地理解解释器模式的使用场景，下面我们通过一个简单的例子来详细说明。\n                    </p>\n                    <p data-nodeid=\"744\">\n                      我们创建一个逻辑与的解释器例子。简单来说，就是通过字符串名字来判断表达式是否同时存在，存在则打印\n                      true，存在一个或不存在都打印\n                      false。在下面的代码中，我们会创建一个接口 Expression\n                      和实现 Expression 接口的具体类，并定义一个终结符表达式类\n                      TerminalExpression\n                      作为主解释器，再定义非终结符表达式类，这里\n                      OrExpression、AndExpression\n                      分别是处理不同逻辑的非终结符表达式。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"plain\"><ol><li><div class=\"code-word\">public interface Expression {\n</div></li><li><div class=\"code-word\">    boolean interpreter(String con);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">public class TerminalExpression implements Expression{\n</div></li><li><div class=\"code-word\">    String data;\n</div></li><li><div class=\"code-word\">    public TerminalExpression(String data) {\n</div></li><li><div class=\"code-word\">        this.data = data;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    @Override\n</div></li><li><div class=\"code-word\">    public boolean interpreter(String con) {\n</div></li><li><div class=\"code-word\">        if(con.contains(data)) {\n</div></li><li><div class=\"code-word\">            return true;\n</div></li><li><div class=\"code-word\">        } else {\n</div></li><li><div class=\"code-word\">            return false;\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">public class AndExpression implements Expression {\n</div></li><li><div class=\"code-word\">    Expression expr1;\n</div></li><li><div class=\"code-word\">    Expression expr2;\n</div></li><li><div class=\"code-word\">    public AndExpression(Expression expr1, Expression expr2) {\n</div></li><li><div class=\"code-word\">        this.expr1 = expr1;\n</div></li><li><div class=\"code-word\">        this.expr2 = expr2;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    public boolean interpreter(String con) {\n</div></li><li><div class=\"code-word\">        return expr1.interpreter(con) &amp;&amp; expr2.interpreter(con);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">public class OrExpression implements Expression {\n</div></li><li><div class=\"code-word\">    Expression expr1;\n</div></li><li><div class=\"code-word\">    Expression expr2;\n</div></li><li><div class=\"code-word\">    public OrExpression(Expression expr1, Expression expr2) {\n</div></li><li><div class=\"code-word\">        this.expr1 = expr1;\n</div></li><li><div class=\"code-word\">        this.expr2 = expr2;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    public boolean interpreter(String con) {\n</div></li><li><div class=\"code-word\">        return expr1.interpreter(con) || expr2.interpreter(con);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">public class AndExpression implements Expression {\n</div></li><li><div class=\"code-word\">    Expression expr1;\n</div></li><li><div class=\"code-word\">    Expression expr2;\n</div></li><li><div class=\"code-word\">    public AndExpression(Expression expr1, Expression expr2) {\n</div></li><li><div class=\"code-word\">        this.expr1 = expr1;\n</div></li><li><div class=\"code-word\">        this.expr2 = expr2;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    public boolean interpreter(String con) {\n</div></li><li><div class=\"code-word\">        return expr1.interpreter(con) &amp;&amp; expr2.interpreter(con);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">public class Client {\n</div></li><li><div class=\"code-word\">    public static void main(String[] args) {\n</div></li><li><div class=\"code-word\">        Expression person1 = new TerminalExpression(\"mick\");\n</div></li><li><div class=\"code-word\">        Expression person2 = new TerminalExpression(\"mia\");\n</div></li><li><div class=\"code-word\">        Expression isSingle = new OrExpression(person1, person2);\n</div></li><li><div class=\"code-word\">        Expression spike = new TerminalExpression(\"spike\");\n</div></li><li><div class=\"code-word\">        Expression mock = new TerminalExpression(\"mock\");\n</div></li><li><div class=\"code-word\">        Expression isCommitted = new AndExpression(spike, mock);\n</div></li><li><div class=\"code-word\">        System.out.println(isSingle.interpreter(\"mick\"));\n</div></li><li><div class=\"code-word\">        System.out.println(isSingle.interpreter(\"mia\"));\n</div></li><li><div class=\"code-word\">        System.out.println(isSingle.interpreter(\"max\"));\n</div></li><li><div class=\"code-word\">        System.out.println(isCommitted.interpreter(\"mock, spike\"));\n</div></li><li><div class=\"code-word\">        System.out.println(isCommitted.interpreter(\"Single, mock\"));\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">//输出结果\n</div></li><li><div class=\"code-word\">true\n</div></li><li><div class=\"code-word\">true\n</div></li><li><div class=\"code-word\">false\n</div></li><li><div class=\"code-word\">true\n</div></li><li><div class=\"code-word\">false\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"746\">\n                      在最终单元测试的结果中，我们可以看到：在表达式范围内的单词能获得\n                      true 的返回，没有在表达式范围内的单词则会获得 false\n                      的返回。\n                    </p>\n                    <h3 data-nodeid=\"747\">为什么使用解释器模式？</h3>\n                    <p data-nodeid=\"748\">\n                      分析完解释器模式的原理和使用场景后，我们再来说说使用解释器模式的原因，可总结为以下两个。\n                    </p>\n                    <p data-nodeid=\"749\">\n                      <strong data-nodeid=\"839\"\n                        >第一个，将领域语言（即问题表征）定义为简单的语言语法</strong\n                      >。这样做的目的是通过多个不同规则的简单组合来映射复杂的模型。比如，在中文语法中会定义主谓宾这样的语法规则，当我们写了一段文字后，其实是可以通过主谓宾这个规则来进行匹配的。如果只是一个汉字一个汉字地解析，解析效率会非常低，而且容易出错。同理，在开发中我们可以使用正则表达式来快速匹配IP地址，而不是将所有可能的情况都用\n                      if-else 来进行编写。\n                    </p>\n                    <p data-nodeid=\"750\">\n                      <strong data-nodeid=\"844\"\n                        >第二个，更便捷地提升解释数学公式这一类场景的计算效率</strong\n                      >。我们都知道，计算机在计算加减乘除一类的数学运算时，和人类计算的方式是完全不同的，需要通过一定的规则运算才能得出最后的结果。比如，3+2-（4\n                      X\n                      5)，如果我们不告诉计算机先要运算括号中的表达式，计算机则只会按照顺序进行计算，这显然是错误的。而使用解释器模式，则能很好地通过预置的规则来进行判断和解释。\n                    </p>\n                    <h3 data-nodeid=\"751\">收益什么？损失什么？</h3>\n                    <p data-nodeid=\"752\">\n                      通过前面的分析，我们也就可以总结出使用解释器模式主要有以下优点。\n                    </p>\n                    <ul data-nodeid=\"753\">\n                      <li data-nodeid=\"754\">\n                        <p data-nodeid=\"755\">\n                          <strong data-nodeid=\"851\"\n                            >很容易改变和扩展语法逻辑</strong\n                          >。由于在模式中是使用类来表示语法规则的，因此当我们需要新增或修改规则时，只需要新增或修改类即可。同时，还可以使用继承或组合方式来扩展语法。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"756\">\n                        <p data-nodeid=\"757\">\n                          <strong data-nodeid=\"856\">更容易实现语法</strong\n                          >。我们可以定义节点的类型，并编写通用的规则来实现这些节点类，或者还可以使用编译器来自动生成它们。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"758\">\n                      同样，解释器模式也不是万能的，也有一些缺点。\n                    </p>\n                    <ul data-nodeid=\"759\">\n                      <li data-nodeid=\"760\">\n                        <p data-nodeid=\"761\">\n                          <strong data-nodeid=\"862\">维护成本很高</strong\n                          >。语法中的每个规则至少要定义一个类，因此，语法规则越多，类越难管理和维护。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"762\">\n                        <p data-nodeid=\"763\">\n                          <strong data-nodeid=\"867\">执行效率较低</strong\n                          >。由于解释器模式会使用到树的数据结构，那么就会使用大量的循环和递归调用来访问不同的节点，当需要解释的句子语法比较复杂时，会执行大量的循环语句，性能很低。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"764\">\n                        <p data-nodeid=\"765\">\n                          <strong data-nodeid=\"872\"\n                            >应用场景单一，复用性不高</strong\n                          >。在开发中，除了要发明一种新的编程语言或对某些新硬件进行解释外，解释器模式的应用实例其实非常少，加上特定的数据结构，扩展性很低。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"766\">总结</h3>\n                    <p data-nodeid=\"767\">\n                      在实际的业务开发中，解释器模式很少使用，主要应用于 SQL\n                      解析、符号处理引擎等场景中。\n                    </p>\n                    <p data-nodeid=\"768\">\n                      在解释器模式中通常会使用树的结构，有点类似于组合模式中定义的树结构，<strong\n                        data-nodeid=\"880\"\n                        >终端表达式对象是叶对象，非终端表达式是组合对象</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"769\">\n                      虽然解释器模式很灵活，能够使用语法规则解析很多复杂的句子，比如，编程语法。但是稍不留神就很容易把解释逻辑写在一个类中，进而导致后期难以维护。除此之外，把解析逻辑拆分为单个的子节点后，又会因为类数量的暴增，导致代码的理解难度倍增。\n                    </p>\n                    <p data-nodeid=\"770\">\n                      不过，解释器模式能够通过一些简短的规则来解决复杂的数据匹配问题，比如，正则表达式\n                      [0-9]\n                      就能匹配数字字符串。所以说，理解解释器模式的原理还是很有必要的。\n                    </p>\n                    <h3 data-nodeid=\"771\">课后思考</h3>\n                    <p data-nodeid=\"772\">\n                      在实际的软件开发中，你有用过哪些使用到解释器模式的软件组件？欢迎你在留言区与我分享你的使用感受。\n                    </p>\n                    <p data-nodeid=\"773\" class=\"\">\n                      在下一讲，我会接着与你分享“命令模式与在一次请求中封装多个参数”的相关内容，记得按时来听课！\n                    </p>\n            "}