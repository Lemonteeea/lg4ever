{"title":"14 | AST 转换：AST 节点内部做了哪些转换？（上）","context":"\n                    <p data-nodeid=\"847\">\n                      上一节课，我们学习了 template 的解析过程，最终拿到了一个\n                      AST\n                      节点对象。这个对象是对模板的完整描述，但是它还不能直接拿来生成代码，因为它的语义化还不够，没有包含和编译优化的相关属性，所以还需要进一步转换。\n                    </p>\n\n                    <p data-nodeid=\"217\">\n                      AST\n                      转换过程非常复杂，有非常多的分支逻辑，为了方便你理解它的核心流程，我精心准备了一个示例，我们只分析示例场景在\n                      AST\n                      转换过程中的相关代码逻辑，不过我希望你在学习完之后，可以举一反三，对示例做一些修改，学习更多场景的代码逻辑。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"app\"</span>&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hello</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"flag\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hello</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>&gt;hello {{ msg + test }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>static<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"219\">\n                      示例中，我们有普通的 DOM 节点，有组件节点，有 v-bind\n                      指令，有 v-if 指令，有文本节点，也有表达式节点。\n                    </p>\n                    <p data-nodeid=\"220\">\n                      对于这个模板，我们通过 parse 生成一个 AST\n                      对象，接下来我们就来分析这个 AST\n                      对象的转换都做了哪些事情。\n                    </p>\n                    <p data-nodeid=\"221\">\n                      我们会先通过 getBaseTransformPreset\n                      方法获取节点和指令转换的方法，然后调用 transform 方法做\n                      AST\n                      转换，并且把这些节点和指令的转换方法作为配置的属性参数传入。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 获取节点和指令转换的方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> [nodeTransforms, directiveTransforms] = getBaseTransformPreset()\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// AST 转换</span>\n</div></li><li><div class=\"code-word\">transform(ast, extend({}, options, {\n</div></li><li><div class=\"code-word\">  prefixIdentifiers,\n</div></li><li><div class=\"code-word\">  nodeTransforms: [\n</div></li><li><div class=\"code-word\">    ...nodeTransforms,\n</div></li><li><div class=\"code-word\">    ...(options.nodeTransforms || []) <span class=\"hljs-comment\">// 用户自定义  transforms</span>\n</div></li><li><div class=\"code-word\">  ],\n</div></li><li><div class=\"code-word\">  directiveTransforms: extend({}, directiveTransforms, options.directiveTransforms || {} <span class=\"hljs-comment\">// 用户自定义 transforms</span>\n</div></li><li><div class=\"code-word\">  )\n</div></li><li><div class=\"code-word\">}))\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"223\">\n                      我们先来看一下 getBaseTransformPreset\n                      返回哪些节点和指令的转换方法：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">getBaseTransformPreset</span><span class=\"hljs-params\">(prefixIdentifiers)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> [\n</div></li><li><div class=\"code-word\">    [\n</div></li><li><div class=\"code-word\">      transformOnce,\n</div></li><li><div class=\"code-word\">      transformIf,\n</div></li><li><div class=\"code-word\">      transformFor,\n</div></li><li><div class=\"code-word\">      transformExpression,\n</div></li><li><div class=\"code-word\">      transformSlotOutlet,\n</div></li><li><div class=\"code-word\">      transformElement,\n</div></li><li><div class=\"code-word\">      trackSlotScopes,\n</div></li><li><div class=\"code-word\">      transformText\n</div></li><li><div class=\"code-word\">    ],\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">      on: transformOn,\n</div></li><li><div class=\"code-word\">      bind: transformBind,\n</div></li><li><div class=\"code-word\">      model: transformModel\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  ]\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"225\">\n                      这里并不需要你进一步去看每个转换函数的实现，只要大致了解有哪些转换函数即可，这些转换函数会在后续执行\n                      transform 的时候调用。\n                    </p>\n                    <blockquote data-nodeid=\"226\">\n                      <p data-nodeid=\"227\">\n                        注意这里我们只分析在 Node.js 环境下的编译过程。Web\n                        环境的编译结果可能会有一些差别，我们会在后续章节说明。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"228\">我们主要来看 transform 函数的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">transform</span><span class=\"hljs-params\">(root, options)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> context = createTransformContext(root, options)\n</div></li><li><div class=\"code-word\">  traverseNode(root, context)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (options.hoistStatic) {\n</div></li><li><div class=\"code-word\">    hoistStatic(root, context)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!options.ssr) {\n</div></li><li><div class=\"code-word\">    createRootCodegen(root, context)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  root.helpers = [...context.helpers]\n</div></li><li><div class=\"code-word\">  root.components = [...context.components]\n</div></li><li><div class=\"code-word\">  root.directives = [...context.directives]\n</div></li><li><div class=\"code-word\">  root.imports = [...context.imports]\n</div></li><li><div class=\"code-word\">  root.hoists = context.hoists\n</div></li><li><div class=\"code-word\">  root.temps = context.temps\n</div></li><li><div class=\"code-word\">  root.cached = context.cached\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"230\">\n                      transform 的核心流程主要有四步：创建 transform\n                      上下文、遍历 AST\n                      节点、静态提升以及创建根代码生成节点。接下来，我们就好好分析一下每一步主要做了什么。\n                    </p>\n                    <h3 data-nodeid=\"231\">创建 transform 上下文</h3>\n                    <p data-nodeid=\"232\">\n                      首先，我们来看创建 transform 上下文的过程，其实和 parse\n                      过程一样，在 transform\n                      阶段会创建一个上下文对象，它的实现过程是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createTransformContext</span><span class=\"hljs-params\">(root, { prefixIdentifiers = <span class=\"hljs-keyword\">false</span>, hoistStatic = <span class=\"hljs-keyword\">false</span>, cacheHandlers = <span class=\"hljs-keyword\">false</span>, nodeTransforms = [], directiveTransforms = {}, transformHoist = <span class=\"hljs-keyword\">null</span>, isBuiltInComponent = NOOP, expressionPlugins = [], scopeId = <span class=\"hljs-keyword\">null</span>, ssr = <span class=\"hljs-keyword\">false</span>, onError = defaultOnError })</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> context = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 配置</span>\n</div></li><li><div class=\"code-word\">    prefixIdentifiers,\n</div></li><li><div class=\"code-word\">    hoistStatic,\n</div></li><li><div class=\"code-word\">    cacheHandlers,\n</div></li><li><div class=\"code-word\">    nodeTransforms,\n</div></li><li><div class=\"code-word\">    directiveTransforms,\n</div></li><li><div class=\"code-word\">    transformHoist,\n</div></li><li><div class=\"code-word\">    isBuiltInComponent,\n</div></li><li><div class=\"code-word\">    expressionPlugins,\n</div></li><li><div class=\"code-word\">    scopeId,\n</div></li><li><div class=\"code-word\">    ssr,\n</div></li><li><div class=\"code-word\">    onError,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 状态数据</span>\n</div></li><li><div class=\"code-word\">    root,\n</div></li><li><div class=\"code-word\">    helpers: <span class=\"hljs-keyword\">new</span> Set(),\n</div></li><li><div class=\"code-word\">    components: <span class=\"hljs-keyword\">new</span> Set(),\n</div></li><li><div class=\"code-word\">    directives: <span class=\"hljs-keyword\">new</span> Set(),\n</div></li><li><div class=\"code-word\">    hoists: [],\n</div></li><li><div class=\"code-word\">    imports: <span class=\"hljs-keyword\">new</span> Set(),\n</div></li><li><div class=\"code-word\">    temps: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">    cached: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">    identifiers: {},\n</div></li><li><div class=\"code-word\">    scopes: {\n</div></li><li><div class=\"code-word\">      vFor: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">      vSlot: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">      vPre: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">      vOnce: <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    parent: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">    currentNode: root,\n</div></li><li><div class=\"code-word\">    childIndex: <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// methods</span>\n</div></li><li><div class=\"code-word\">    helper(name) {\n</div></li><li><div class=\"code-word\">      context.helpers.add(name)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> name\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    helperString(name) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> \\`_${helperNameMap[context.helper(name)]}\\`\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    replaceNode(node) {\n</div></li><li><div class=\"code-word\">      context.parent.children[context.childIndex] = context.currentNode = node\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    removeNode(node) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> list = context.parent.children\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> removalIndex = node\n</div></li><li><div class=\"code-word\">        ? list.indexOf(node)\n</div></li><li><div class=\"code-word\">        : context.currentNode\n</div></li><li><div class=\"code-word\">          ? context.childIndex\n</div></li><li><div class=\"code-word\">          : -<span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!node || node === context.currentNode) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 移除当前节点</span>\n</div></li><li><div class=\"code-word\">        context.currentNode = <span class=\"hljs-keyword\">null</span>\n</div></li><li><div class=\"code-word\">        context.onNodeRemoved()\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 移除兄弟节点</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (context.childIndex &gt; removalIndex) {\n</div></li><li><div class=\"code-word\">          context.childIndex--\n</div></li><li><div class=\"code-word\">          context.onNodeRemoved()\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 移除节点</span>\n</div></li><li><div class=\"code-word\">      context.parent.children.splice(removalIndex, <span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    onNodeRemoved: () =&gt; { },\n</div></li><li><div class=\"code-word\">    addIdentifiers(exp) {\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    removeIdentifiers(exp) {\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    hoist(exp) {\n</div></li><li><div class=\"code-word\">      context.hoists.push(exp)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> identifier = createSimpleExpression(\\`_hoisted_${context.hoists.length}\\`, <span class=\"hljs-keyword\">false</span>, exp.loc, <span class=\"hljs-keyword\">true</span>)\n</div></li><li><div class=\"code-word\">      identifier.hoisted = exp\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> identifier\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    cache(exp, isVNode = <span class=\"hljs-keyword\">false</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> createCacheExpression(++context.cached, exp, isVNode)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> context\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"234\">\n                      其实，这个上下文对象 context 维护了 transform\n                      过程的一些配置，比如前面提到的节点和指令的转换函数等；还维护了\n                      transform 过程的一些状态数据，比如当前处理的 AST\n                      节点，当前 AST 节点在子节点中的索引，以及当前 AST\n                      节点的父节点等。此外，context\n                      还包含了在转换过程中可能会调用的一些辅助函数，和一些修改\n                      context 对象的方法。\n                    </p>\n                    <p data-nodeid=\"235\">\n                      你现在也没必要去了解它的每一个属性和方法的含义，只需要你大致有一个印象即可，未来分析某个具体场景，再回过头了解它们的实现即可。\n                    </p>\n                    <p data-nodeid=\"236\">\n                      创建完上下文对象后，接下来就需要遍历 AST 节点。\n                    </p>\n                    <h3 data-nodeid=\"237\">遍历 AST 节点</h3>\n                    <p data-nodeid=\"238\">\n                      遍历 AST\n                      节点的过程很关键，因为核心的转换过程就是在遍历中实现的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">traverseNode</span><span class=\"hljs-params\">(node, context)</span> </span>{\n</div></li><li><div class=\"code-word\">  context.currentNode = node\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 节点转换函数</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { nodeTransforms } = context\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> exitFns = []\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; nodeTransforms.length; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 有些转换函数会设计一个退出函数，在处理完子节点后执行</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> onExit = nodeTransforms[i](node, context)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (onExit) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (isArray(onExit)) {\n</div></li><li><div class=\"code-word\">        exitFns.push(...onExit)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        exitFns.push(onExit)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!context.currentNode) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 节点被移除</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 因为在转换的过程中节点可能被替换，恢复到之前的节点</span>\n</div></li><li><div class=\"code-word\">      node = context.currentNode\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">switch</span> (node.type) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* COMMENT */</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!context.ssr) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 需要导入 createComment 辅助函数</span>\n</div></li><li><div class=\"code-word\">        context.helper(CREATE_COMMENT)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* INTERPOLATION */</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 需要导入 toString 辅助函数</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!context.ssr) {\n</div></li><li><div class=\"code-word\">        context.helper(TO_DISPLAY_STRING)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* IF */</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 递归遍历每个分支节点</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; node.branches.length; i++) {\n</div></li><li><div class=\"code-word\">        traverseNode(node.branches[i], context)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-comment\">/* IF_BRANCH */</span>:\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">11</span> <span class=\"hljs-comment\">/* FOR */</span>:\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>:\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ROOT */</span>:\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 遍历子节点</span>\n</div></li><li><div class=\"code-word\">      traverseChildren(node, context)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 执行转换函数返回的退出函数</span>\n</div></li><li><div class=\"code-word\">  let i = exitFns.<span class=\"hljs-function\">length\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">while</span> <span class=\"hljs-params\">(i--)</span> {\n</div></li><li><div class=\"code-word\">    exitFns[i]()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"240\">\n                      这里，traverseNode 函数的基本思路就是递归遍历 AST\n                      节点，针对每个节点执行一系列的转换函数，有些转换函数还会设计一个退出函数，当你执行转换函数后，它会返回一个新函数，然后在你处理完子节点后再执行这些退出函数，这是因为有些逻辑的处理需要依赖子节点的处理结果才能继续执行。\n                    </p>\n                    <p data-nodeid=\"241\">\n                      Vue.js\n                      内部大概内置了八种转换函数，分别处理指令、表达式、元素节点、文本节点等不同的特性。限于篇幅，我不会介绍所有转换函数，感兴趣的同学可以后续自行分析。\n                    </p>\n                    <p data-nodeid=\"242\">\n                      下面我会介绍四种类型的转换函数，并结合前面的示例来分析。\n                    </p>\n                    <h4 data-nodeid=\"243\">Element 节点转换函数</h4>\n                    <p data-nodeid=\"244\">\n                      首先，我们来看一下 Element 节点转换函数的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> transformElement = (node, context) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!(node.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">    (node.tagType === <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* ELEMENT */</span> ||\n</div></li><li><div class=\"code-word\">      node.tagType === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* COMPONENT */</span>))) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 返回退出函数，在所有子表达式处理并合并后执行</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">function <span class=\"hljs-title\">postTransformElement</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 转换的目标是创建一个实现 VNodeCall 接口的代码生成节点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> { tag, props } = node\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> isComponent = node.tagType === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* COMPONENT */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> vnodeTag = isComponent\n</div></li><li><div class=\"code-word\">      ? resolveComponentType(node, context)\n</div></li><li><div class=\"code-word\">      : \\`<span class=\"hljs-string\">\"${tag}\"</span>\\`\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> isDynamicComponent = isObject(vnodeTag) &amp;&amp; vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 属性</span>\n</div></li><li><div class=\"code-word\">    let vnodeProps\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 子节点</span>\n</div></li><li><div class=\"code-word\">    let vnodeChildren\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 标记更新的类型标识，用于运行时优化</span>\n</div></li><li><div class=\"code-word\">    let vnodePatchFlag\n</div></li><li><div class=\"code-word\">    let patchFlag = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 动态绑定的属性</span>\n</div></li><li><div class=\"code-word\">    let vnodeDynamicProps\n</div></li><li><div class=\"code-word\">    let dynamicPropNames\n</div></li><li><div class=\"code-word\">    let vnodeDirectives\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 动态组件、svg、foreignObject 标签以及动态绑定 key prop 的节点都被视作一个 Block</span>\n</div></li><li><div class=\"code-word\">    let shouldUseBlock =\n</div></li><li><div class=\"code-word\">      isDynamicComponent ||\n</div></li><li><div class=\"code-word\">      (!isComponent &amp;&amp;\n</div></li><li><div class=\"code-word\">        (tag === <span class=\"hljs-string\">'svg'</span> ||\n</div></li><li><div class=\"code-word\">          tag === <span class=\"hljs-string\">'foreignObject'</span> ||\n</div></li><li><div class=\"code-word\">          findProp(node, <span class=\"hljs-string\">'key'</span>, <span class=\"hljs-keyword\">true</span>)))\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理 props</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (props.length &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> propsBuildResult = buildProps(node, context)\n</div></li><li><div class=\"code-word\">      vnodeProps = propsBuildResult.props\n</div></li><li><div class=\"code-word\">      patchFlag = propsBuildResult.patchFlag\n</div></li><li><div class=\"code-word\">      dynamicPropNames = propsBuildResult.dynamicPropNames\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> directives = propsBuildResult.directives\n</div></li><li><div class=\"code-word\">      vnodeDirectives =\n</div></li><li><div class=\"code-word\">        directives &amp;&amp; directives.length\n</div></li><li><div class=\"code-word\">          ? createArrayExpression(directives.map(dir =&gt; buildDirectiveArgs(dir, context)))\n</div></li><li><div class=\"code-word\">          : undefined\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理 children</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (node.children.length &gt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (vnodeTag === KEEP_ALIVE) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 把 KeepAlive 看做是一个 Block，这样可以避免它的子节点的动态节点被父 Block 收集</span>\n</div></li><li><div class=\"code-word\">        shouldUseBlock = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 2. 确保它始终更新</span>\n</div></li><li><div class=\"code-word\">        patchFlag |= <span class=\"hljs-number\">1024</span> <span class=\"hljs-comment\">/* DYNAMIC_SLOTS */</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) &amp;&amp; node.children.length &gt; <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">          context.onError(createCompilerError(<span class=\"hljs-number\">42</span> <span class=\"hljs-comment\">/* X_KEEP_ALIVE_INVALID_CHILDREN */</span>, {\n</div></li><li><div class=\"code-word\">            start: node.children[<span class=\"hljs-number\">0</span>].loc.start,\n</div></li><li><div class=\"code-word\">            end: node.children[node.children.length - <span class=\"hljs-number\">1</span>].loc.end,\n</div></li><li><div class=\"code-word\">            source: <span class=\"hljs-string\">''</span>\n</div></li><li><div class=\"code-word\">          }))\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> shouldBuildAsSlots = isComponent &amp;&amp;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// Teleport不是一个真正的组件，它有专门的运行时处理</span>\n</div></li><li><div class=\"code-word\">        vnodeTag !== TELEPORT &amp;&amp;\n</div></li><li><div class=\"code-word\">        vnodeTag !== <span class=\"hljs-function\">KEEP_ALIVE\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(shouldBuildAsSlots)</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 组件有 children，则处理插槽</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> { slots, hasDynamicSlots } = buildSlots(node, context)\n</div></li><li><div class=\"code-word\">        vnodeChildren = <span class=\"hljs-function\">slots\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(hasDynamicSlots)</span> {\n</div></li><li><div class=\"code-word\">          patchFlag |= <span class=\"hljs-number\">1024</span> <span class=\"hljs-comment\">/* DYNAMIC_SLOTS */</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.children.length === <span class=\"hljs-number\">1</span> &amp;&amp; vnodeTag !== TELEPORT) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> child = node.children[<span class=\"hljs-number\">0</span>]\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> type = child.type\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> hasDynamicTextChild = type === <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* INTERPOLATION */</span> ||\n</div></li><li><div class=\"code-word\">          type === <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* COMPOUND_EXPRESSION */</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (hasDynamicTextChild &amp;&amp; !getStaticType(child)) {\n</div></li><li><div class=\"code-word\">          patchFlag |= <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* TEXT */</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 如果只是一个普通文本节点、插值或者表达式，直接把节点赋值给 vnodeChildren</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (hasDynamicTextChild || type === <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* TEXT */</span>) {\n</div></li><li><div class=\"code-word\">          vnodeChildren = child\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">          vnodeChildren = node.children\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        vnodeChildren = node.children\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理 patchFlag 和 dynamicPropNames</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (patchFlag !== <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>)) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (patchFlag &lt; <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">          vnodePatchFlag = patchFlag + \\` <span class=\"hljs-comment\">/* ${PatchFlagNames[patchFlag]} */</span>\\`\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 获取 flag 对应的名字，生成注释，方便理解生成代码对应节点的 pathFlag</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">const</span> flagNames = Object.keys(PatchFlagNames)\n</div></li><li><div class=\"code-word\">            .map(Number)\n</div></li><li><div class=\"code-word\">            .filter(n =&gt; n &gt; <span class=\"hljs-number\">0</span> &amp;&amp; patchFlag &amp; n)\n</div></li><li><div class=\"code-word\">            .map(n =&gt; PatchFlagNames[n])\n</div></li><li><div class=\"code-word\">            .join(\\`, \\`)\n</div></li><li><div class=\"code-word\">          vnodePatchFlag = patchFlag + \\` <span class=\"hljs-comment\">/* ${flagNames} */</span>\\`\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        vnodePatchFlag = String(patchFlag)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (dynamicPropNames &amp;&amp; dynamicPropNames.length) {\n</div></li><li><div class=\"code-word\">        vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    node.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, <span class=\"hljs-keyword\">false</span> <span class=\"hljs-comment\">/* disableTracking */</span>, node.loc)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"246\">\n                      可以看到，只有当 AST\n                      节点是组件或者普通元素节点时，才会返回一个退出函数，而且它会在该节点的子节点逻辑处理完毕后执行。\n                    </p>\n                    <p data-nodeid=\"247\">\n                      分析这个退出函数前，我们需要知道节点函数的转换目标，即创建一个实现\n                      VNodeCall\n                      接口的代码生成节点，也就是说，生成这个代码生成节点后，后续的代码生成阶段可以根据这个节点对象生成目标代码。\n                    </p>\n                    <p data-nodeid=\"248\">\n                      知道了这个目标，我们再去理解 transformElement\n                      函数的实现就不难了。\n                    </p>\n                    <p data-nodeid=\"249\">\n                      首先，<strong data-nodeid=\"322\"\n                        >判断这个节点是不是一个 Block 节点</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"250\">\n                      为了运行时的更新优化，Vue.js 3.0 设计了一个 Block tree\n                      的概念。Block tree\n                      是一个将模版基于动态节点指令切割的嵌套区块，每个区块只需要以一个\n                      Array 来追踪自身包含的动态节点。借助 Block tree，Vue.js 将\n                      vnode\n                      更新性能由与模版整体大小相关提升为与动态内容的数量相关，极大优化了\n                      diff 的效率，模板的动静比越大，这个优化就会越明显。\n                    </p>\n                    <p data-nodeid=\"251\">\n                      因此在编译阶段，我们需要找出哪些节点可以构成一个\n                      Block，其中动态组件、svg、foreignObject 标签以及动态绑定的\n                      prop 的节点都被视作一个 Block。\n                    </p>\n                    <p data-nodeid=\"252\">\n                      其次，<strong data-nodeid=\"330\">是处理节点的 props</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"253\">\n                      这个过程主要是从 AST 节点的 props 对象中进一步解析出指令\n                      vnodeDirectives、动态属性 dynamicPropNames，以及更新标识\n                      patchFlag。patchFlag\n                      主要用于标识节点更新的类型，在组件更新的优化中会用到，我们在后续章节会详细讲。\n                    </p>\n                    <p data-nodeid=\"254\">\n                      接着，<strong data-nodeid=\"337\"\n                        >是处理节点的 children</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"255\">\n                      对于一个组件节点而言，如果它有子节点，则说明是组件的插槽，另外还会有对一些内置组件比如\n                      KeepAlive、Teleport 的处理逻辑。\n                    </p>\n                    <p data-nodeid=\"256\">\n                      对于一个普通元素节点，我们通常直接拿节点的 children 属性给\n                      vnodeChildren 即可，但有一种特殊情况，<strong\n                        data-nodeid=\"356\"\n                        >如果节点只有一个子节点</strong\n                      >，<strong data-nodeid=\"357\"\n                        >并且是一个普通文本节点</strong\n                      >、<strong data-nodeid=\"358\">插值或者表达式</strong\n                      >，<strong data-nodeid=\"359\"\n                        >那么直接把节点赋值给 vnodeChildren</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"257\">\n                      然后，<strong data-nodeid=\"365\"\n                        >会对前面解析 props 求得的 patchFlag 和 dynamicPropNames\n                        做进一步处理</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"258\">\n                      在这个过程中，我们会根据 patchFlag 的值从 PatchFlagNames\n                      中获取 flag 对应的名字，从而生成注释，因为 patchFlag\n                      本身就是一个个数字，通过名字注释的方式，我们就可以一眼从最终生成的代码中了解到\n                      patchFlag 代表的含义。\n                    </p>\n                    <p data-nodeid=\"259\">\n                      另外，我们还会把数组 dynamicPropNames 转化生成\n                      vnodeDynamicProps\n                      字符串，便于后续对节点生成代码逻辑的处理。\n                    </p>\n                    <p data-nodeid=\"260\">\n                      最后，<strong data-nodeid=\"373\"\n                        >通过 createVNodeCall 创建了实现 VNodeCall\n                        接口的代码生成节点</strong\n                      >，我们来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createVNodeCall</span><span class=\"hljs-params\">(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = <span class=\"hljs-keyword\">false</span>, disableTracking = <span class=\"hljs-keyword\">false</span>, loc = locStub)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (context) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (isBlock) {\n</div></li><li><div class=\"code-word\">      context.helper(OPEN_BLOCK)\n</div></li><li><div class=\"code-word\">      context.helper(CREATE_BLOCK)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      context.helper(CREATE_VNODE)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (directives) {\n</div></li><li><div class=\"code-word\">      context.helper(WITH_DIRECTIVES) \n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-number\">13</span> <span class=\"hljs-comment\">/* VNODE_CALL */</span>,\n</div></li><li><div class=\"code-word\">    tag,\n</div></li><li><div class=\"code-word\">    props,\n</div></li><li><div class=\"code-word\">    children,\n</div></li><li><div class=\"code-word\">    patchFlag,\n</div></li><li><div class=\"code-word\">    dynamicProps,\n</div></li><li><div class=\"code-word\">    directives,\n</div></li><li><div class=\"code-word\">    isBlock,\n</div></li><li><div class=\"code-word\">    disableTracking,\n</div></li><li><div class=\"code-word\">    loc\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"262\">\n                      createVNodeCall\n                      的实现很简单，它最后返回了一个对象，包含了传入的参数数据。这里要注意\n                      context.helper 函数的调用，它会把一些 Symbol 对象添加到\n                      context.helpers\n                      数组中，目的是为了后续代码生成阶段，生成一些辅助代码。\n                    </p>\n                    <p data-nodeid=\"263\">对于我们示例中的根节点：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"app\"</span>&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">&lt;/div&gt;\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"265\">它转换后生成的 node.codegenNode ：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"children\"</span>: [\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 子节点</span>\n</div></li><li><div class=\"code-word\">  ],\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"directives\"</span>: undefined,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"dynamicProps\"</span>: undefined,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"isBlock\"</span>: <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"isForBlock\"</span>: <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"patchFlag\"</span>: undefined,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"props\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 属性相关</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"tag\"</span>: <span class=\"hljs-string\">\"div\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">13</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"267\">\n                      这个 codegenNode 相比之前的 AST\n                      节点对象，多了很多和编译优化相关的属性，它们会在代码生成阶段会起到非常重要作用，在后续的章节你就可以深入了解到。\n                    </p>\n                    <h4 data-nodeid=\"268\">表达式节点转换函数</h4>\n                    <p data-nodeid=\"269\">\n                      接下来，我们来看一下表达式节点转换函数的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> transformExpression = (node, context) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (node.type === <span class=\"hljs-number\">5</span> <span class=\"hljs-comment\">/* INTERPOLATION */</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理插值中的动态表达式</span>\n</div></li><li><div class=\"code-word\">    node.content = processExpression(node.content, context)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.type === <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理元素指令中的动态表达式</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; node.props.length; i++) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> dir = node.props[i]\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// v-on 和 v-for 不处理，因为它们都有各自的处理逻辑</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (dir.type === <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">/* DIRECTIVE */</span> &amp;&amp; dir.name !== <span class=\"hljs-string\">'for'</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> exp = dir.exp\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> arg = dir.<span class=\"hljs-function\">arg\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(exp &amp;&amp;\n</span></div></li><li><div class=\"code-word\">          exp.type === <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span> &amp;&amp;\n</div></li><li><div class=\"code-word\">          !(dir.name === <span class=\"hljs-string\">'on'</span> &amp;&amp; arg)) {\n</div></li><li><div class=\"code-word\">          dir.exp = processExpression(exp, context, dir.name === <span class=\"hljs-string\">'slot'</span>)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (arg &amp;&amp; arg.type === <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">/* SIMPLE_EXPRESSION */</span> &amp;&amp; !arg.isStatic) {\n</div></li><li><div class=\"code-word\">          dir.arg = processExpression(arg, context)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"271\">\n                      由于表达式本身不会再有子节点，所以它也不需要退出函数，直接在进入函数时做转换处理即可。\n                    </p>\n                    <p data-nodeid=\"272\">\n                      需要注意的是，<strong data-nodeid=\"386\"\n                        >只有在 Node.js 环境下的编译或者是 Web\n                        端的非生产环境下才会执行 transformExpression</strong\n                      >，原因我稍后会告诉你。\n                    </p>\n                    <p data-nodeid=\"273\">\n                      transformExpression\n                      主要做的事情就是转换插值和元素指令中的动态表达式，把简单的表达式对象转换成复合表达式对象，内部主要是通过\n                      processExpression 函数完成。举个例子，比如这个模板：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"388\"\n                        >{{ msg + test }}</code\n                      >，它执行 parse 后生成的表达式节点 node.content\n                      值为一个简单的表达式对象：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">4</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"isStatic\"</span>: <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"isConstant\"</span>: <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"msg + test\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"275\">\n                      经过 processExpression 处理后，node.content\n                      的值变成了一个复合表达式对象：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">8</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"children\"</span>: [\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">4</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"isConstant\"</span>: <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"_ctx.msg\"</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"isStatic\"</span>: <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\" + \"</span>,\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"type\"</span>: <span class=\"hljs-number\">4</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"isConstant\"</span>: <span class=\"hljs-literal\">false</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"_ctx.test\"</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">\"isStatic\"</span>: <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  ],\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"identifiers\"</span>: []\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"277\">\n                      这里，我们重点关注对象中的 children 属性，它是一个长度为 3\n                      的数组，其实就是把表达式<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"392\"\n                        >msg + test</code\n                      >拆成了三部分，其中变量 msg 和 test 对应都加上了前缀\n                      _ctx。\n                    </p>\n                    <p data-nodeid=\"278\">那么为什么需要加这个前缀呢？</p>\n                    <p data-nodeid=\"279\">\n                      我们就要想到模板中引用的的 msg 和 test\n                      对象最终都是在组件实例中访问的，但为了书写模板方便，Vue.js\n                      并没有让我们在模板中手动加组件实例的前缀，例如：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"398\"\n                        >{{ this.msg + this.test }}</code\n                      >，这样写起来就会不够方便，但如果用 JSX\n                      写的话，通常要手动写 this。\n                    </p>\n                    <p data-nodeid=\"8324\" class=\"\">\n                      你可能会有疑问，为什么 Vue.js 2.x 编译的结果没有 _ctx\n                      前缀呢？这是因为 Vue.js 2.x 的编译结果使用了”黑魔法“\n                      with，比如上述模板，在 Vue.js 2.x 最终编译的结果：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"8328\"\n                        >with(this){return _s(msg + test)}</code\n                      >。\n                    </p>\n\n                    <p data-nodeid=\"282\">\n                      它利用 with 的特性动态去 this 中查找 msg 和 test\n                      属性，所以不需要手动加前缀。\n                    </p>\n                    <p data-nodeid=\"283\">\n                      但是，Vue.js 3.0 在 Node.js 端的编译结果舍弃了\n                      with，它会在 processExpression\n                      过程中对表达式动态分析，给该加前缀的地方加上前缀。\n                    </p>\n                    <p data-nodeid=\"284\">\n                      processExpression\n                      的详细实现我们不会分析，但你需要知道，这个过程肯定有一定的成本，因为它内部依赖了\n                      @babel/parser 库去解析表达式生成 AST 节点，并依赖了\n                      estree-walker 库去遍历这个 AST\n                      节点，然后对节点分析去判断是否需要加前缀，接着对 AST\n                      节点修改，最终转换生成新的表达式对象。\n                    </p>\n                    <p data-nodeid=\"285\">\n                      @babel/parser 这个库通常是在 Node.js\n                      端用的，而且这库本身体积非常大，如果打包进 Vue.js\n                      的话会让包体积膨胀 4 倍，所以我们并不会在生产环境的 Web\n                      端引入这个库，Web 端生产环境下的运行时编译最终仍然会用\n                      with 的方式。\n                    </p>\n                    <p data-nodeid=\"286\">\n                      因为用 with\n                      的话就完全不需要对表达式做转换了，这也就回答我前面的问题：只有在\n                      Node.js 环境下的编译或者是 Web 端的非生产环境下才会执行\n                      transformExpression。\n                    </p>\n                    <p data-nodeid=\"287\">\n                      这部分内容比较多，所以本课时的内容就先到这。下节课，我们接着分析遍历\n                      AST 节点中的 Text 节点的转换函数。\n                    </p>\n                    <blockquote data-nodeid=\"288\">\n                      <p data-nodeid=\"289\">\n                        <strong data-nodeid=\"424\"\n                          >本节课的相关代码在源代码中的位置如下：</strong\n                        ><br />\n                        packages/compiler-core/src/compile.ts<br />\n                        packages/compiler-core/src/transform.ts<br />\n                        packages/compiler-core/src/ast.ts<br />\n                        packages/compiler-core/src/transforms/transformElement.ts<br />\n                        packages/compiler-core/src/transforms/transformExpression.ts\n                      </p>\n                    </blockquote>\n            "}