{"title":"13 | 异步编程（上）：JS 异步编程都有哪些方案？","context":"\n                    <p data-nodeid=\"549\" class=\"\">\n                      上一个模块我们学习了 JS\n                      数组相关的知识，那么从这一讲开始就进入一个崭新的模块，也是\n                      JS 学习过程中比较重要的部分——JS 异步编程。\n                    </p>\n                    <p data-nodeid=\"550\">\n                      JS\n                      的异步编程可以说在日常的前端业务开发中经常出现，你需要深刻理解其思路，才能更好地加以运用。\n                    </p>\n                    <p data-nodeid=\"551\">\n                      先一起来回想一下，我们在日常开发中都用过哪些 JS\n                      异步编程的方式？总结起来无外乎有这几种：回调函数、事件监听、Promise、Generator、async/await，这几种\n                      JS 的编程方式都是异步编程。回调函数方式是最早的 JS\n                      异步编程的方式，后随着 ES 标准的发展，Promise、Generator\n                      和 async/await\n                      接连出现。关于这几种方式，我会在后面的课时中分别为你介绍。这一讲的目的是帮你回顾，并对此形成一个整体的认识。\n                    </p>\n                    <p data-nodeid=\"552\">那么在课程开始前请你先回想一下：</p>\n                    <ol data-nodeid=\"553\">\n                      <li data-nodeid=\"554\">\n                        <p data-nodeid=\"555\">\n                          同步编程和异步编程的区别在哪里？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"556\">\n                        <p data-nodeid=\"557\">回调地狱有哪些方法可以解决？</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"558\">我首先为你解答与此相关联的问题。</p>\n                    <h3 data-nodeid=\"559\">什么是同步？</h3>\n                    <p data-nodeid=\"560\">\n                      所谓的同步就是在执行某段代码时，在该代码没有得到返回结果之前，其他代码暂时是无法执行的，但是一旦执行完成拿到返回值之后，就可以执行其他代码了。换句话说，在此段代码执行完未返回结果之前，会阻塞之后的代码执行，这样的情况称为同步。\n                    </p>\n                    <h3 data-nodeid=\"561\">什么是异步？</h3>\n                    <p data-nodeid=\"562\">\n                      所谓异步就是当某一代码执行异步过程调用发出后，这段代码不会立刻得到返回结果。而是在异步调用发出之后，一般通过回调函数处理这个调用之后拿到结果。异步调用发出后，不会影响阻塞后面的代码执行，这样的情形称为异步。\n                    </p>\n                    <h3 data-nodeid=\"563\">JS 编程中为什么需要异步？</h3>\n                    <p data-nodeid=\"564\">\n                      我们都知道 JavaScript 是单线程的，如果 JS\n                      都是同步代码执行意味着什么呢？这样可能会造成阻塞，如果当前我们有一段代码需要执行时，如果使用同步的方式，那么就会阻塞后面的代码执行；而如果使用异步则不会阻塞，我们不需要等待异步代码执行的返回结果，可以继续执行该异步任务之后的代码逻辑。因此在\n                      JS\n                      编程中，会大量使用异步来进行编程，这也是我要专门讲解这部分的原因。\n                    </p>\n                    <h3 data-nodeid=\"565\">JS 异步编程方式发展历程</h3>\n                    <p data-nodeid=\"566\">\n                      说完了异步编程的基本概念，下面我们按照时间顺序来看一下 JS\n                      异步编程的实现方式。\n                    </p>\n                    <h4 data-nodeid=\"567\">回调函数</h4>\n                    <p data-nodeid=\"568\">\n                      从历史发展的脉络来看，早些年为了实现 JS\n                      的异步编程，一般都采用回调函数的方式，比如比较典型的事件的回调，或者用\n                      setTimeout/ setInterval\n                      来实现一些异步编程的操作，但是使用回调函数来实现存在一个很常见的问题，那就是回调地狱。\n                    </p>\n                    <p data-nodeid=\"569\">\n                      这里我列举了一种现实开发中会遇到的场景，我们来看一下代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">fs.readFile(A, <span class=\"hljs-string\">'utf-8'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n</div></li><li><div class=\"code-word\">    fs.readFile(B, <span class=\"hljs-string\">'utf-8'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n</div></li><li><div class=\"code-word\">        fs.readFile(C, <span class=\"hljs-string\">'utf-8'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n</div></li><li><div class=\"code-word\">            fs.readFile(D, <span class=\"hljs-string\">'utf-8'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-comment\">//....</span>\n</div></li><li><div class=\"code-word\">            });\n</div></li><li><div class=\"code-word\">        });\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"571\">\n                      从上面的代码可以看出，其逻辑为先读取 A 文本内容，再根据 A\n                      文本内容读取 B，然后再根据 B 的内容读取\n                      C。为了实现这个业务逻辑，上面实现的代码就很容易形成回调地狱。回调实现异步编程的场景也有很多，比如：\n                    </p>\n                    <ol data-nodeid=\"572\">\n                      <li data-nodeid=\"573\">\n                        <p data-nodeid=\"574\">ajax 请求的回调；</p>\n                      </li>\n                      <li data-nodeid=\"575\">\n                        <p data-nodeid=\"576\">定时器中的回调；</p>\n                      </li>\n                      <li data-nodeid=\"577\">\n                        <p data-nodeid=\"578\">事件回调；</p>\n                      </li>\n                      <li data-nodeid=\"579\">\n                        <p data-nodeid=\"580\">Nodejs 中的一些方法回调。</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"581\">\n                      异步回调如果层级很少，可读性和代码的维护性暂时还是可以接受，一旦层级变多就会陷入回调地狱，上面这些异步编程的场景都会涉及回调地狱的问题。下面我们来看一下针对上面这个业务场景，改成\n                      Promise 来实现异步编程，会是什么样子的呢？\n                    </p>\n                    <h4 data-nodeid=\"582\">Promise</h4>\n                    <p data-nodeid=\"583\">\n                      为了解决回调地狱的问题，之后社区提出了 Promise\n                      的解决方案，ES6 又将其写进了语言标准，采用 Promise\n                      的实现方式在一定程度上解决了回调地狱的问题。\n                    </p>\n                    <p data-nodeid=\"584\">\n                      我们还是针对上面的这个场景来看下先读取 A 文本内容，再根据\n                      A 文本内容读取 B 文件，接着再根据 B 文件的内容读取 C\n                      文件。我们看这样的实现通过 Promise\n                      改造之后是什么样的，请看代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">read</span>(<span class=\"hljs-params\">url</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">        fs.readFile(url, <span class=\"hljs-string\">'utf8'</span>, (err, data) =&gt; {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span>(err) reject(err);\n</div></li><li><div class=\"code-word\">            resolve(data);\n</div></li><li><div class=\"code-word\">        });\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">read(A).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> read(B);\n</div></li><li><div class=\"code-word\">}).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> read(C);\n</div></li><li><div class=\"code-word\">}).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> read(D);\n</div></li><li><div class=\"code-word\">}).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">reason</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(reason);\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"586\">\n                      从上面的代码可以看出，针对回调地狱进行这样的改进，可读性的确有一定的提升，优点是可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数，但是\n                      Promise 也存在一些问题，即便是使用 Promise\n                      的链式调用，如果操作过多，其实并没有从根本上解决回调地狱的问题，只是换了一种写法，可读性虽然有所提升，但是依旧很难维护。不过\n                      Promise 又提供了一个 all 方法，对于这个业务场景的代码，用\n                      all 来实现可能效果会更好。\n                    </p>\n                    <p data-nodeid=\"587\">\n                      下面我们就来看一个用 all 来实现的代码片段。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">read</span>(<span class=\"hljs-params\">url</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">        fs.readFile(url, <span class=\"hljs-string\">'utf8'</span>, (err, data) =&gt; {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">if</span>(err) reject(err);\n</div></li><li><div class=\"code-word\">            resolve(data);\n</div></li><li><div class=\"code-word\">        });\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 通过 Promise.all 可以实现多个异步并行执行，同一时刻获取最终结果的问题</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Promise</span>.all([read(A), read(B), read(C)]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(data);\n</div></li><li><div class=\"code-word\">}).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =&gt;</span> \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(err)\n</div></li><li><div class=\"code-word\">);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"589\">\n                      这样改造之后是不是比上面直接使用 Promise\n                      来实现，看起来更清晰一目了然了？下面我们再来看下另外一种\n                      JS 的异步编程方式，同样也是 ES6 才引入的 Generator\n                      的方式。\n                    </p>\n                    <h4 data-nodeid=\"590\">Generator</h4>\n                    <p data-nodeid=\"591\">\n                      Generator\n                      也是一种异步编程解决方案，它最大的特点就是可以交出函数的执行权，Generator\n                      函数可以看出是异步任务的容器，需要暂停的地方，都用 yield\n                      语法来标注。Generator 函数一般配合 yield 使用，Generator\n                      函数最后返回的是迭代器。如果你对迭代器不太了解，可以自行补习一下这部分内容。\n                    </p>\n                    <p data-nodeid=\"592\">\n                      下面我们来看一下 Generator 的简单使用，请看这段代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">gen</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">111</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(a);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">222</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(b);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> c = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">333</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(c);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> d = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">444</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(d);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> t = gen();\n</div></li><li><div class=\"code-word\">t.next(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//第一次调用next函数时，传递的参数无效，故无打印结果</span>\n</div></li><li><div class=\"code-word\">t.next(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// a输出2;</span>\n</div></li><li><div class=\"code-word\">t.next(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// b输出3; </span>\n</div></li><li><div class=\"code-word\">t.next(<span class=\"hljs-number\">4</span>); <span class=\"hljs-comment\">// c输出4;</span>\n</div></li><li><div class=\"code-word\">t.next(<span class=\"hljs-number\">5</span>); <span class=\"hljs-comment\">// d输出5;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"594\">\n                      从上面的代码中可以看到输出结果，第一次的 next\n                      虽然执行了但是并未输出结果，后面的每次执行 next\n                      会把参数传入然后打印出来，等到最后一次 next 对应的 yield\n                      执行完之后，控制台会打印 “{value: undefined, done: true}”\n                      的输出结果，标识该 Generator 函数已经执行完毕，即\n                      done：true。\n                    </p>\n                    <p data-nodeid=\"595\">\n                      那么看完了 Generator 方式之后，我们再来研究最后一种\n                      async/await 的实现方式。\n                    </p>\n                    <h4 data-nodeid=\"596\">async/await</h4>\n                    <p data-nodeid=\"597\">\n                      ES6 之后 ES7\n                      中又提出了新的异步解决方案：async/await，async 是\n                      Generator 函数的语法糖，async/await\n                      的优点是代码清晰（不像使用 Promise 的时候需要写很多 then\n                      的方法链），可以处理回调地狱的问题。async/await 写起来使得\n                      JS\n                      的异步代码看起来像同步代码，其实异步编程发展的目标就是让异步逻辑的代码看起来像同步一样容易理解。\n                    </p>\n                    <p data-nodeid=\"598\">\n                      我们来看下 async/await 的基本用法，代码如下所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testWait</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"testWait\"</span>);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; resolve();\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; }, <span class=\"hljs-number\">1000</span>);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; })\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testAwaitUse</span>(<span class=\"hljs-params\"></span>)</span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">await</span> testWait()\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"hello\"</span>);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">123</span>;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-comment\">// 输出顺序：testWait，hello</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-comment\">// 第十行如果不使用await输出顺序：hello , testWait</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(testAwaitUse());\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"600\">\n                      执行上面的代码，从结果中可以看出，在正常的执行顺序下，testWait\n                      这个函数由于使用的是 setTimeout\n                      的定时器，回调会在一秒之后执行，但是由于执行到这里采用了\n                      await 关键词，testAwaitUse 函数在执行的过程中需要等待\n                      testWait 函数执行完成之后，再执行打印 hello\n                      的操作。但是如果去掉 await ，打印结果的顺序就会变化。\n                    </p>\n                    <p data-nodeid=\"601\">\n                      因此，async/await 不仅仅是 JS\n                      的异步编程的一种方式，其可读性也接近于同步代码，让人更容易理解。\n                    </p>\n                    <h3 data-nodeid=\"602\">总结</h3>\n                    <p data-nodeid=\"603\">\n                      这一讲我带你把 JS\n                      的异步编程方式回顾了一遍。希望通过这几个方式的讲解，你能够对\n                      JS 异步编程形成一个全局的认识，其中关于 Promise、Generator\n                      和 async/await\n                      相关知识点，在后面的课程中我会专门针对每一个知识点进行更详细的剖析和挖掘。\n                    </p>\n                    <p data-nodeid=\"896\">\n                      下面我整理了一个表格，是对本讲内容的简单总结。\n                    </p>\n                    <p data-nodeid=\"897\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/04/78/Cgp9HWAsdpyACe2BAAECu34UBgk670.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"901\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"627\">\n                      现阶段，如果你能自己实现一个完善的\n                      Promise，其实也可以满足面试以及日常工作的基本需求了。\n                    </p>\n                    <p data-nodeid=\"628\">\n                      如果你对此有不理解的地方，可以大致列举出来，在接下来的课程中也好有针对性地进行学习。下一讲我会和你详细聊聊\n                      Promise\n                      相关内容，期待你能从中学到更多的东西，并且能够很好地运用起来。\n                    </p>\n                    <p data-nodeid=\"629\" class=\"\">我们下一讲再见。</p>\n            "}