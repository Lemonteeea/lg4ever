{"title":"05 | 函数类型：返回值类型和参数类型到底如何定义？","context":"\n                    <p data-nodeid=\"36887\">\n                      04\n                      讲我们简单介绍了函数定义时的相关类型推断特性，这一讲将深入介绍一下函数类型。\n                    </p>\n                    <blockquote data-nodeid=\"36888\">\n                      <p data-nodeid=\"36889\">\n                        学习建议：使用 VS Code 新建一个 05.ts\n                        文件，尝试这一讲中所有示例。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"36890\">\n                      在 JavaScript\n                      中，函数是构建应用的一块基石，我们可以使用函数抽离可复用的逻辑、抽象模型、封装过程。在\n                      TypeScript\n                      中，虽然有类、命名空间、模块，但是函数同样是最基本、最重要的元素之一。\n                    </p>\n                    <p data-nodeid=\"36891\">\n                      在 TypeScript 里，我们可以通过 function\n                      字面量和箭头函数的形式定义函数，示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"></span>) </span>{}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> add = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36893\">\n                      我们还可以显式指定函数参数和返回值的类型，示例如下。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> add = (a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">number</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-keyword\">return</span> a + b;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36895\">\n                      如上述示例中，参数名后的 ':number'\n                      表示参数类型都是数字类型，圆括号后的 ': number'\n                      则表示返回值类型也是数字类型。下面我们具体介绍一下返回值类型和参数类型。\n                    </p>\n                    <h3 data-nodeid=\"36896\">返回值类型</h3>\n                    <p data-nodeid=\"36897\">\n                      在 JavaScript 中，我们知道一个函数可以没有显式\n                      return，此时函数的返回值应该是 undefined：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// TODO</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(fn()); <span class=\"hljs-comment\">// =&gt; undefined</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36899\">\n                      <strong data-nodeid=\"37018\"\n                        >需要注意的是，在 TypeScript\n                        中，如果我们显式声明函数的返回值类型为\n                        undfined，将会得到如下所示的错误提醒。</strong\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title\">undefined</span> </span>{ <span class=\"hljs-comment\">// ts(2355) A function whose declared type is neither 'void' nor 'any' must return a value</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// TODO</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36901\">\n                      此时，正确的做法是使用 03 讲介绍的 void\n                      类型来表示函数没有返回值的类型（这是“废柴” void\n                      类型唯一有用的场景），示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn1</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title\">void</span> </span>{\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">fn1().doSomething(); <span class=\"hljs-comment\">// ts(2339) Property 'doSomething' does not exist on type 'void'.</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36903\">\n                      我们可以使用类似定义箭头函数的语法来表示函数类型的参数和返回值类型，此时<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"37021\"\n                        >=&gt; 类型</code\n                      >仅仅用来定义一个函数类型而不用实现这个函数。\n                    </p>\n                    <p data-nodeid=\"36904\">\n                      <strong data-nodeid=\"37040\">需要注意的是，这里的</strong\n                      ><code data-backticks=\"1\" data-nodeid=\"37026\">=&gt;</code\n                      ><strong data-nodeid=\"37041\">与 ES6 中箭头函数的</strong\n                      ><code data-backticks=\"1\" data-nodeid=\"37030\">=&gt;</code\n                      ><strong data-nodeid=\"37042\"\n                        >有所不同。TypeScript 函数类型中的</strong\n                      ><code data-backticks=\"1\" data-nodeid=\"37034\">=&gt;</code\n                      ><strong data-nodeid=\"37043\"\n                        >用来表示函数的定义，其左侧是函数的参数类型，右侧是函数的返回值类型；而\n                        ES6 中的</strong\n                      ><code data-backticks=\"1\" data-nodeid=\"37038\">=&gt;</code\n                      >是函数的实现。\n                    </p>\n                    <p data-nodeid=\"36905\">\n                      如下示例中，我们定义了一个函数类型（这里我们使用了类型别名\n                      type，详见 07 讲），并且使用箭头函数实现了这个类型。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> Adder = <span class=\"hljs-function\">(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// TypeScript 函数类型定义</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> add: Adder = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a + b; <span class=\"hljs-comment\">// ES6 箭头函数</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36907\">\n                      <strong data-nodeid=\"37048\"\n                        >这里请注意：右侧的箭头函数并没有显式声明类型注解，不过可以根据\n                        04 讲中提到的上下文类型进行推断。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"36908\">\n                      在对象（即接口类型，详见 07\n                      讲）中，除了使用这种声明语法，我们还可以使用类似对象属性的简写语法来声明函数类型的属性，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> Entity {\n</div></li><li><div class=\"code-word\">    add: <span class=\"hljs-function\">(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>)&nbsp;=&gt;</span> <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">    del(a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> entity: Entity = {\n</div></li><li><div class=\"code-word\">    add: <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a + b,\n</div></li><li><div class=\"code-word\">    del(a, b) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> a - b;\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36910\">\n                      在某种意义上来说，这两种形式都是等价的。但是很多时候，我们不必或者不能显式地指明返回值的类型，这就涉及可缺省和可推断的返回值类型的讲解。\n                    </p>\n                    <h4 data-nodeid=\"36911\">可缺省和可推断的返回值类型</h4>\n                    <p data-nodeid=\"36912\">\n                      幸运的是，函数返回值的类型可以在 TypeScript\n                      中被推断出来，即可缺省。\n                    </p>\n                    <p data-nodeid=\"36913\">\n                      函数内是一个相对独立的上下文环境，我们可以根据入参对值加工计算，并返回新的值。从类型层面看，我们也可以通过类型推断（回想一下\n                      04\n                      讲中的类型推断、上下文类型推断）加工计算入参的类型，并返回新的类型，示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">computeTypes</span>(<span class=\"hljs-params\">one: <span class=\"hljs-built_in\">string</span>, two: <span class=\"hljs-built_in\">number</span></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> nums = [two];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> strs = [one]\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">    nums,\n</div></li><li><div class=\"code-word\">    strs\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-comment\">// 返回 { nums: number[]; strs: string[] } 的类型 </span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36915\">\n                      <strong data-nodeid=\"37057\"\n                        >请记住：这是一个很重要也很有意思的特性，函数返回值的类型推断结合泛型（我们会在\n                        10\n                        讲中详细介绍）可以实现特别复杂的类型计算（本质是复杂的类型推断，这里称之为计算是为了表明其复杂性），比如\n                        Redux Model 中 State、Reducer、Effect\n                        类型的关联。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"36916\">\n                      一般情况下，TypeScript\n                      中的函数返回值类型是可以缺省和推断出来的，但是有些特例需要我们显式声明返回值类型，比如\n                      Generator 函数的返回值。\n                    </p>\n                    <h4 data-nodeid=\"36917\">Generator 函数的返回值</h4>\n                    <p data-nodeid=\"36918\">\n                      ES6 中新增的 Generator 函数在 TypeScript\n                      中也有对应的类型定义。\n                    </p>\n                    <p data-nodeid=\"36919\">\n                      Generator 函数返回的是一个 Iterator\n                      迭代器对象，我们可以使用 Generator 的同名接口泛型或者\n                      Iterator 的同名接口泛型（在 10\n                      讲会介绍）表示返回值的类型（Generator 类型继承了 Iterator\n                      类型），示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span>&nbsp;AnyType&nbsp;=&nbsp;<span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span>&nbsp;AnyReturnType&nbsp;=&nbsp;<span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span>&nbsp;AnyNextType&nbsp;=&nbsp;<span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;*<span class=\"hljs-title\">gen</span>(<span class=\"hljs-params\"></span>):&nbsp;<span class=\"hljs-title\">Generator</span>&lt;<span class=\"hljs-title\">AnyType</span>, <span class=\"hljs-title\">AnyReturnType</span>, <span class=\"hljs-title\">AnyNextType</span>&gt; </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> nextValue = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// nextValue 类型是 number，yield 后必须是 boolean 类型</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\\`<span class=\"hljs-subst\">${nextValue}</span>\\`</span>; <span class=\"hljs-comment\">// 必须返回 string 类型</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36921\">\n                      <strong data-nodeid=\"37065\"\n                        >注意：TypeScript 3.6 之前的版本不支持指定 next、return\n                        的类型，所以在某些有点历史的代码中，我们可能会看到\n                        Generator 和 Iterator 类型不一样的表述。</strong\n                      >\n                    </p>\n                    <h3 data-nodeid=\"36922\">参数类型</h3>\n                    <p data-nodeid=\"36923\">\n                      了解了定义函数的基本语法以及返回值类型后，我们再来详细看一下可选参数、默认参数、剩余参数的几个特性。\n                    </p>\n                    <h4 data-nodeid=\"36924\">可选参数和默认参数</h4>\n                    <p data-nodeid=\"36925\">\n                      在实际工作中，我们可能经常碰到函数参数可传可不传的情况，当然\n                      TypeScript 也支持这种函数类型表达，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">x?: <span class=\"hljs-built_in\">string</span></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> x;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">log(); <span class=\"hljs-comment\">// =&gt; undefined</span>\n</div></li><li><div class=\"code-word\">log(<span class=\"hljs-string\">'hello world'</span>); <span class=\"hljs-comment\">// =&gt; hello world</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36927\">\n                      在上述代码中，我们在类型标注的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"37071\"\n                        >:</code\n                      >前添加<code data-backticks=\"1\" data-nodeid=\"37073\"\n                        >?</code\n                      >表示 log 函数的参数 x 就是可缺省的。\n                    </p>\n                    <p data-nodeid=\"36928\">\n                      也就是说参数 x 的类型可能是 undefined（第 5 行调用 log\n                      时不传入实参）类型或者是 string 类型（第 6 行调用 log 传入\n                      'hello world' 实参），那是不是意味着可缺省和类型是\n                      undefined 等价呢？我们来看看以下的示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">x?: <span class=\"hljs-built_in\">string</span></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(x);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log1</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-literal\">undefined</span></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(x);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">log();\n</div></li><li><div class=\"code-word\">log(<span class=\"hljs-literal\">undefined</span>);\n</div></li><li><div class=\"code-word\">log1(); <span class=\"hljs-comment\">// ts(2554) Expected 1 arguments, but got 0</span>\n</div></li><li><div class=\"code-word\">log1(<span class=\"hljs-literal\">undefined</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36930\">\n                      <strong data-nodeid=\"37083\"\n                        >答案显而易见：这里的 ?:\n                        表示参数可以缺省、可以不传，也就是说调用函数时，我们可以不显式传入参数。但是，如果我们声明了参数类型为\n                        xxx | undefined（这里使用了联合类型 |，详见 08\n                        讲），就表示函数参数是不可缺省且类型必须是 xxx 或者\n                        undfined。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"36931\">\n                      因此，在上述代码中，log1\n                      函数如果不显示传入函数的参数，TypeScript 就会报一个\n                      ts(2554) 的错误，即函数需要 1 个参数，但是我们只传入了 0\n                      个参数。\n                    </p>\n                    <p data-nodeid=\"36932\">\n                      在 ES6 中支持函数默认参数的功能，而 TypeScript\n                      会根据函数的默认参数的类型来推断函数参数的类型，示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">x = 'hello'</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(x);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">log(); <span class=\"hljs-comment\">// =&gt; 'hello'</span>\n</div></li><li><div class=\"code-word\">log(<span class=\"hljs-string\">'hi'</span>); <span class=\"hljs-comment\">// =&gt; 'hi'</span>\n</div></li><li><div class=\"code-word\">log(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// ts(2345) Argument of type '1' is not assignable to parameter of type 'string | undefined'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36934\">\n                      在上述示例中，根据函数的默认参数 'hello' ，TypeScript\n                      推断出了 x 的类型为 string | undefined。\n                    </p>\n                    <p data-nodeid=\"36935\">\n                      当然，对于默认参数，TypeScript\n                      也可以显式声明参数的类型（一般默认参数的类型是参数类型的子集时，我们才需要这么做）。不过，此时的默认参数只起到参数默认值的作用，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log1</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">string</span> = 'hello'</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(x);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// ts(2322) Type 'string' is not assignable to type 'number'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log2</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span> = 'hello'</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(x);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">log2();\n</div></li><li><div class=\"code-word\">log2(<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">log2(<span class=\"hljs-string\">'1'</span>); <span class=\"hljs-comment\">// ts(2345) Argument of type '\"1\"' is not assignable to parameter of type 'number | undefined'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36937\">\n                      上例函数 log2 中，我们显式声明了函数参数 x 的类型为\n                      number，表示函数参数 x 的类型可以不传或者是 number\n                      类型。因此，如果我们将默认值设置为字符串类型，编译器就会抛出一个\n                      ts(2322) 的错误。\n                    </p>\n                    <p data-nodeid=\"36938\">\n                      同理，如果我们将函数的参数传入了字符串类型，编译器也会抛出一个\n                      ts(2345) 的错误。\n                    </p>\n                    <p data-nodeid=\"36939\">\n                      <strong data-nodeid=\"37098\"\n                        >这里请注意：函数的默认参数类型必须是参数类型的子类型</strong\n                      >，下面我们看一下如下具体示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log3</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">string</span> = 'hello'</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(x);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36941\">\n                      在上述代码中，函数 log3 的函数参数 x\n                      的类型为可选的联合类型 number |\n                      string，但是因为默认参数字符串类型是联合类型 number |\n                      string 的子类型，所以 TypeScript 也会检查通过。\n                    </p>\n                    <h4 data-nodeid=\"36942\">剩余参数</h4>\n                    <p data-nodeid=\"36943\">\n                      在 ES6 中，JavaScript\n                      支持函数参数的剩余参数，它可以把多个参数收集到一个变量中。同样，在TypeScript\n                      中也支持这样的参数类型定义，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">...nums: <span class=\"hljs-built_in\">number</span>[]</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> nums.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a + b, <span class=\"hljs-number\">0</span>);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// =&gt; 3</span>\n</div></li><li><div class=\"code-word\">sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// =&gt; 6</span>\n</div></li><li><div class=\"code-word\">sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'2'</span>); <span class=\"hljs-comment\">// ts(2345) Argument of type 'string' is not assignable to parameter of type 'number'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36945\">\n                      在上述代码中，sum 是一个求和的函数，<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"37103\"\n                        >...nums</code\n                      >将函数的所有参数收集到了变量 nums 中，而 nums\n                      的类型应该是\n                      number[]，表示所有被求和的参数是数字类型。因此，sum(1,\n                      '2') 抛出了一个 ts(2345) 的错误，因为参数 '2' 并不是\n                      number 类型。\n                    </p>\n                    <p data-nodeid=\"36946\">\n                      如果我们将函数参数 nums 聚合的类型定义为 (number |\n                      string)[]，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">...nums: (<span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">string</span>)[]</span>): <span class=\"hljs-title\">number</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> nums.reduce&lt;<span class=\"hljs-built_in\">number</span>&gt;<span class=\"hljs-function\">(<span class=\"hljs-params\">(<span class=\"hljs-params\">a, b</span>) =&gt; a + <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-params\">b</span>), 0</span>);\n</span></div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-params\">sum</span>(<span class=\"hljs-params\">1, '2', 3</span>); // 6\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36948\">\n                      那么，函数的每一个参数的类型就是联合类型 number |\n                      string，因此 sum(1, '2', 3) 的类型检查也就通过了。\n                    </p>\n                    <p data-nodeid=\"36949\">\n                      介绍完函数的参数，我们再来了解一下函数中另外一个重要的知识点\n                      this。\n                    </p>\n                    <h3 data-nodeid=\"40239\" class=\"\">this</h3>\n\n                    <p data-nodeid=\"36951\">\n                      众所周知，在 JavaScript 中，函数 this\n                      的指向一直是一个令人头痛的问题。因为 this\n                      的值需要等到函数被调用时才能被确定，更别说通过一些方法还可以改变\n                      this 的指向。也就是说 this\n                      的类型不固定，它取决于执行时的上下文。\n                    </p>\n                    <p data-nodeid=\"36952\">\n                      但是，使用了 TypeScript\n                      后，我们就不用担心这个问题了。通过指定 this\n                      的类型（严格模式下，必须显式指定 this\n                      的类型），当我们错误使用了 this，TypeScript\n                      就会提示我们，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name); <span class=\"hljs-comment\">// ts(2683) 'this' implicitly has type 'any' because it does not have a type annotation</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">say();\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36954\">\n                      在上述代码中，如果我们直接调用 say 函数，this 应该指向全局\n                      window 或 global（Node 中）。但是，在 strict 模式下的\n                      TypeScript 中，它会提示 this 的类型是\n                      any，此时就需要我们手动显式指定类型了。\n                    </p>\n                    <p data-nodeid=\"36955\">\n                      那么，在 TypeScript 中，我们应该如何声明 this 的类型呢？\n                    </p>\n                    <p data-nodeid=\"36956\">\n                      在 TypeScript 中，我们只需要在函数的第一个参数中声明 this\n                      指代的对象（即函数被调用的方式）即可，比如最简单的作为对象的方法的\n                      this 指向，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span>: Window, name: <span class=\"hljs-built_in\">string</span></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">window</span>.say = say;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">window</span>.say(<span class=\"hljs-string\">'hi'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> obj = {\n</div></li><li><div class=\"code-word\">    say\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\">obj.say(<span class=\"hljs-string\">'hi'</span>); <span class=\"hljs-comment\">// ts(2684) The 'this' context of type '{ say: (this: Window, name: string) =&gt; void; }' is not assignable to method's 'this' of type 'Window'.</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36958\">\n                      在上述代码中，我们在 window 对象上增加 say 的属性为函数\n                      say。那么调用<code data-backticks=\"1\" data-nodeid=\"37136\"\n                        >window.say()</code\n                      >时，this 指向即为 window 对象。\n                    </p>\n                    <p data-nodeid=\"36959\">\n                      调用<code data-backticks=\"1\" data-nodeid=\"37139\"\n                        >obj.say()</code\n                      >后，此时 TypeScript 检测到 this 的指向不是\n                      window，于是抛出了如下所示的一个 ts(2684) 错误。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">say(<span class=\"hljs-string\">'captain'</span>); <span class=\"hljs-comment\">// ts(2684) The 'this' context of type 'void' is not assignable to method's 'this' of type 'Window'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36961\">\n                      <strong data-nodeid=\"37144\"\n                        >需要注意的是，如果我们直接调用 say()，this\n                        实际上应该指向全局变量 window，但是因为 TypeScript\n                        无法确定 say 函数被谁调用，所以将 this 的指向默认为\n                        void，也就提示了一个 ts(2684) 错误。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"36962\">\n                      此时，我们可以通过调用 window.say()\n                      来避免这个错误，这也是一个安全的设计。因为在 JavaScript\n                      的严格模式下，全局作用域函数中 this 的指向是 undefined。\n                    </p>\n                    <p data-nodeid=\"36963\">\n                      <strong data-nodeid=\"37149\"\n                        >同样，定义对象的函数属性时，只要实际调用中 this\n                        的指向与指定的 this 指向不同，TypeScript 就能发现 this\n                        指向的错误，示例代码如下：</strong\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> Person {\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">    say(<span class=\"hljs-keyword\">this</span>: Person): <span class=\"hljs-built_in\">void</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> person: Person = {\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-string\">'captain'</span>,\n</div></li><li><div class=\"code-word\">    say() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name);\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> fn = person.say;\n</div></li><li><div class=\"code-word\">fn(); <span class=\"hljs-comment\">// ts(2684) The 'this' context of type 'void' is not assignable to method's 'this' of type 'Person'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36965\">\n                      <strong data-nodeid=\"37153\"\n                        >注意：显式注解函数中的 this\n                        类型，它表面上占据了第一个形参的位置，但并不意味着函数真的多了一个参数，因为\n                        TypeScript 转译为 JavaScript 后，“伪形参” this\n                        会被抹掉，这算是 TypeScript 为数不多的特有语法。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"36966\">\n                      当然，初次接触这个特性时让人费解，这就需要我们把它铭记于心。前边的\n                      say 函数转译为 JavaScript 后，this\n                      就会被抹掉，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\">name</span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name);\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36968\">\n                      同样，我们也可以显式限定类（class 类的介绍详见 06\n                      讲）函数属性中的 this 类型，TypeScript\n                      也能检查出错误的使用方式，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">class</span> Component {\n</div></li><li><div class=\"code-word\">  onClick(<span class=\"hljs-keyword\">this</span>: Component) {}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> component = <span class=\"hljs-keyword\">new</span> Component();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> UI {\n</div></li><li><div class=\"code-word\">  addClickListener(onClick: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span>: <span class=\"hljs-built_in\">void</span></span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>): <span class=\"hljs-built_in\">void</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> ui: UI = {\n</div></li><li><div class=\"code-word\">  addClickListener() {}\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\">ui.addClickListener(<span class=\"hljs-keyword\">new</span> Component().onClick); <span class=\"hljs-comment\">// ts(2345)</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36970\">\n                      上面示例中，我们定义的 Component 类的 onClick\n                      函数属性（方法）显式指定了 this 类型是 Component，在第 14\n                      行作为入参传递给 ui 的 addClickListener 方法中，它指定的\n                      this 类型是 void，两个 this 类型不匹配，所以抛出了一个\n                      ts(2345) 错误。\n                    </p>\n                    <p data-nodeid=\"36971\">\n                      此外，在链式调用风格的库中，使用 this\n                      也可以很方便地表达出其类型，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">class</span> Container {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">private</span> val: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">val: <span class=\"hljs-built_in\">number</span></span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.val = val;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  map(cb: <span class=\"hljs-function\">(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-keyword\">this</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.val = cb(<span class=\"hljs-keyword\">this</span>.val);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  log(): <span class=\"hljs-keyword\">this</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.val);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> instance = <span class=\"hljs-keyword\">new</span> Container(<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">  .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x + <span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">  .log() <span class=\"hljs-comment\">// =&gt; 2</span>\n</div></li><li><div class=\"code-word\">  .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x * <span class=\"hljs-number\">3</span>)\n</div></li><li><div class=\"code-word\">  .log(); <span class=\"hljs-comment\">// =&gt; 6  </span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36973\">\n                      因为 Container 类中 map、log 等函数属性（方法）未显式指定\n                      this 类型，默认类型是\n                      Container，所以以上方法在被调用时返回的类型也是\n                      Container，this\n                      指向一直是类的实例，它可以一直无限地被链式调用。\n                    </p>\n                    <p data-nodeid=\"36974\">\n                      介绍完函数中 this\n                      的指向和类型后，我们再来了解一下它的另外一个特性函数多态（函数重载）。\n                    </p>\n                    <h3 data-nodeid=\"42652\" class=\"\">函数重载</h3>\n\n                    <p data-nodeid=\"36976\">\n                      JavaScript\n                      是一门动态语言，针对同一个函数，它可以有多种不同类型的参数与返回值，这就是函数的多态。\n                    </p>\n                    <p data-nodeid=\"36977\">\n                      而在 TypeScript\n                      中，也可以相应地表达不同类型的参数和返回值的函数，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convert</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">null</span></span>): <span class=\"hljs-title\">string</span> | <span class=\"hljs-title\">number</span> | -1 </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">'string'</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Number</span>(x);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">'number'</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">String</span>(x);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> x1 = convert(<span class=\"hljs-string\">'1'</span>); <span class=\"hljs-comment\">// =&gt; string | number</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> x2 = convert(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// =&gt; string | number</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> x3 = convert(<span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// =&gt; string | number</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36979\">\n                      在上述代码中，我们把 convert 函数的 string 类型的值转换为\n                      number 类型，number 类型转换为 string 类型，而将 null\n                      类型转换为数字 -1。此时， x1、x2、x3\n                      的返回值类型都会被推断成 string | number 。\n                    </p>\n                    <p data-nodeid=\"36980\">\n                      那么，有没有一种办法可以更精确地描述参数与返回值类型约束关系的函数类型呢？有，这就是函数重载（Function\n                      Overload），如下示例中 1~3\n                      行定义了三种各不相同的函数类型列表，并描述了不同的参数类型对应不同的返回值类型，而从第\n                      4 行开始才是函数的实现。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convert</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">number</span></span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convert</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title\">string</span></span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convert</span>(<span class=\"hljs-params\">x: <span class=\"hljs-literal\">null</span></span>): -1</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convert</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-literal\">null</span></span>): <span class=\"hljs-title\">any</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">'string'</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Number</span>(x);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">'number'</span>) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">String</span>(x);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> x1 = convert(<span class=\"hljs-string\">'1'</span>); <span class=\"hljs-comment\">// =&gt; number</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> x2 = convert(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// =&gt; string</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> x3 = convert(<span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// -1</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"36982\">\n                      <p data-nodeid=\"36983\">\n                        注意：函数重载列表的各个成员（即示例中的 1 ~ 3\n                        行）必须是函数实现（即示例中的第 4 行）的子集，例如\n                        “function convert(x: string): number”是“function\n                        convert(x: string | number | null): any”的子集。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"36984\">\n                      在 convert 函数被调用时，TypeScript\n                      会从上到下查找函数重载列表中与入参类型匹配的类型，并优先使用第一个匹配的重载定义。因此，我们需要把最精确的函数重载放到前面。例如我们在第\n                      14 行传入了字符串 '1'，查找到第 1 行即匹配，而第 15\n                      行传入了数字 1，则查找到第 2 行匹配。\n                    </p>\n                    <p data-nodeid=\"43250\" class=\"te-preview-highlight\">\n                      <strong data-nodeid=\"43255\"\n                        >为了方便你理解这部分内容，</strong\n                      >\n                      下面我们通过以下一个示例进行具体说明。\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> P1 {\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> P2 <span class=\"hljs-keyword\">extends</span> P1 {\n</div></li><li><div class=\"code-word\">    age: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convert</span>(<span class=\"hljs-params\">x: P1</span>): <span class=\"hljs-title\">number</span></span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convert</span>(<span class=\"hljs-params\">x: P2</span>): <span class=\"hljs-title\">string</span></span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convert</span>(<span class=\"hljs-params\">x: P1 | P2</span>): <span class=\"hljs-title\">any</span> </span>{}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> x1 = convert({ name: <span class=\"hljs-string\">\"\"</span> } <span class=\"hljs-keyword\">as</span> P1); <span class=\"hljs-comment\">// =&gt; number</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> x2 = convert({ name: <span class=\"hljs-string\">\"\"</span>, age: <span class=\"hljs-number\">18</span> } <span class=\"hljs-keyword\">as</span> P2); <span class=\"hljs-comment\">// number</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36987\">\n                      因为 P2 继承自 P1，所以类型为 P2 的参数会和类型为 P1\n                      的参数一样匹配到第一个函数重载，此时 x1、x2 的返回值都是\n                      number。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convert</span>(<span class=\"hljs-params\">x: P2</span>): <span class=\"hljs-title\">string</span></span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convert</span>(<span class=\"hljs-params\">x: P1</span>): <span class=\"hljs-title\">number</span></span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">convert</span>(<span class=\"hljs-params\">x: P1 | P2</span>): <span class=\"hljs-title\">any</span> </span>{ }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> x1 = convert({ name: <span class=\"hljs-string\">''</span> } <span class=\"hljs-keyword\">as</span> P1); <span class=\"hljs-comment\">// =&gt; number</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> x2 = convert({ name: <span class=\"hljs-string\">''</span>, age: <span class=\"hljs-number\">18</span> } <span class=\"hljs-keyword\">as</span> P2); <span class=\"hljs-comment\">// =&gt; string</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36989\">\n                      而我们只需要将函数重载列表的顺序调换一下，类型为 P2 和 P1\n                      的参数就可以分别匹配到正确的函数重载了，例如第 5\n                      行匹配到第 2 行，第 6 行匹配到第 1 行。\n                    </p>\n                    <h3 data-nodeid=\"36990\">类型谓词（is）</h3>\n                    <p data-nodeid=\"36991\">\n                      在 TypeScript\n                      中，函数还支持另外一种特殊的类型描述，如下示例 ：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;<span class=\"hljs-title\">isString</span>(<span class=\"hljs-params\">s</span>):&nbsp;<span class=\"hljs-title\">s</span>&nbsp;<span class=\"hljs-title\">is</span>&nbsp;<span class=\"hljs-title\">string</span>&nbsp;</span>{ <span class=\"hljs-comment\">// 类型谓词</span>\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;<span class=\"hljs-keyword\">typeof</span>&nbsp;s&nbsp;===&nbsp;<span class=\"hljs-string\">'string'</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;<span class=\"hljs-title\">isNumber</span>(<span class=\"hljs-params\">n:&nbsp;<span class=\"hljs-built_in\">number</span></span>)&nbsp;</span>{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;<span class=\"hljs-keyword\">typeof</span>&nbsp;n&nbsp;===&nbsp;<span class=\"hljs-string\">'number'</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;<span class=\"hljs-title\">operator</span>(<span class=\"hljs-params\">x:&nbsp;unknown</span>)&nbsp;</span>{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>(isString(x))&nbsp;{&nbsp;<span class=\"hljs-comment\">//&nbsp;ok&nbsp;x&nbsp;类型缩小为&nbsp;string</span>\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;}\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>&nbsp;(isNumber(x))&nbsp;{&nbsp;<span class=\"hljs-comment\">//&nbsp;ts(2345)&nbsp;unknown&nbsp;不能赋值给&nbsp;number</span>\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36993\">\n                      在上述代码中，在添加返回值类型的地方，我们通过“参数名 + is\n                      +\n                      类型”的格式明确表明了参数的类型，进而引起类型缩小，所以类型谓词函数的一个重要的应用场景是实现自定义类型守卫（详见第\n                      11 讲）。\n                    </p>\n                    <h3 data-nodeid=\"36994\">小结与预告</h3>\n                    <p data-nodeid=\"36995\">\n                      函数是 JavaScript 和 TypeScript\n                      中极其重要的基础部分，无论是面向过程，还是面向对象编程，都离不开函数的抽象、封装。静态类型的加持，使得\n                      TypeScript 中的函数相较于 JavaScript\n                      来说，变得更加稳定、精确、安全。\n                    </p>\n                    <p data-nodeid=\"36996\">\n                      这里插播一个思考题：如何注解函数中 this\n                      的类型？函数类型重载的匹配顺序是什么？欢迎你在留言区与我互动、交流。另外，如果你觉得本专栏有价值，欢迎分享给更多好友哦~\n                    </p>\n                    <p data-nodeid=\"36997\">\n                      06 讲我们将了解 TypeScript\n                      另外一个抽象、封装及面向对象编程的利器——类，敬请期待！\n                    </p>\n            "}