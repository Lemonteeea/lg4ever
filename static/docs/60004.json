{"title":"03 | 分层思维：为什么要做代码分层架构？","context":"\n                    <p data-nodeid=\"18048\" class=\"\">\n                      软件程序通常有两个层面的需求：\n                    </p>\n                    <ul data-nodeid=\"18049\">\n                      <li data-nodeid=\"18050\">\n                        <p data-nodeid=\"18051\">\n                          <strong data-nodeid=\"18178\">功能性需求</strong\n                          >，简单来说，就是一个程序能为用户做些什么，比如，文件上传、查询数据等；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18052\">\n                        <p data-nodeid=\"18053\">\n                          <strong data-nodeid=\"18183\">非功能性需求</strong\n                          >，这个是指除功能性需求以外的其他必要需求，比如，性能、安全性、容错与恢复、本地化、国际化等。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"18054\">\n                      事实上，<strong data-nodeid=\"18189\"\n                        >非功能性需求所构建起来的正是我们所熟知的软件架构</strong\n                      >。什么是软件架构？简单来说，就是软件的基本结构，包括三要素：代码、代码之间的关系和两者各自的属性。\n                    </p>\n                    <p data-nodeid=\"19304\">\n                      我们都知道，软件架构非常重要，为什么重要呢？如果把软件比作一座高楼，那么软件架构就是那个钢筋混凝土的框架，代码就是那个框架里的砖石，正是因为有了那个框架，才能让每一个代码都能很好地运行起来。\n                    </p>\n                    <p data-nodeid=\"19305\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/20/53/CioPOWBTAR6AE5_TAAYR2DR14T8759.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"19309\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"18989\">\n                      其中，最为经典的软件架构就是分层架构，也就是将软件系统进行分层，现在几乎已经成为每个程序员最熟悉的思考模式之一。不过，分层架构越是流行，我们的设计越容易僵化。这背后到底有哪些值得我们深思的地方呢？\n                    </p>\n\n                    <p data-nodeid=\"18057\">\n                      所以，今天我就从架构角度来聊聊为什么代码要做分层、主要用于解决什么问题，以及存在优势和劣势有哪些。\n                    </p>\n                    <h3 data-nodeid=\"18058\">代码分层架构是什么</h3>\n                    <p data-nodeid=\"18059\">\n                      要想彻底理解<strong data-nodeid=\"18203\"\n                        >代码分层架构</strong\n                      >，就得从<strong data-nodeid=\"18204\"\n                        >软件部署分层架构</strong\n                      >说起。首先我们来看一下常见的互联网软件部署分层架构，如下图所示：\n                    </p>\n                    <p data-nodeid=\"19942\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/20/53/CioPOWBTAS2ACFHmAAJr8ZVP6AQ135.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"19945\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"18062\">\n                      由图可以看到，软件部署分层架构主要包括以下四个核心部分。\n                    </p>\n                    <ul data-nodeid=\"18063\">\n                      <li data-nodeid=\"18064\">\n                        <p data-nodeid=\"18065\">\n                          客户端层（Client）：调用方，比如浏览器或 App。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18066\">\n                        <p data-nodeid=\"18067\">\n                          应用服务层的网页服务器（Web\n                          Server）：实现程序的运行逻辑，并从下层获取数据，返回给上层的客户端层。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18068\">\n                        <p data-nodeid=\"18069\">\n                          应用服务层的缓存（Cache）：加速访问存储的数据。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18070\">\n                        <p data-nodeid=\"18071\">数据层（DB）：存储数据。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"18072\">\n                      通过上面的分析，现在你应该知道什么是软件分层架构了吧？<strong\n                        data-nodeid=\"18218\"\n                        >软件分层架构是通过层来隔离不同的关注点（变化相似的地方）</strong\n                      >，以此来解决不同需求变化的问题，使得这种变化可以被控制在一个层里。\n                    </p>\n                    <p data-nodeid=\"18073\">\n                      作为软件开发者，我们更关心的其实是应用程序里的分层架构。比如，下图展示的现在流行的一种\n                      MVC 分层架构：\n                    </p>\n                    <p data-nodeid=\"20576\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/20/53/CioPOWBTATWAVRQtAAMPRgLdi1U528.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"20579\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"18076\">\n                      我们能明显看到，MVC\n                      分层架构是作用于程序本身的，程序作为一个整体被发布在服务器上运行使用。而类似\n                      DB\n                      里也有自己的分层架构，这里我们重点介绍应用程序中的代码分层架构，其他架构就不展开讨论了。\n                    </p>\n                    <p data-nodeid=\"18077\">\n                      那么问题来了，什么是代码分层架构呢？\n                    </p>\n                    <p data-nodeid=\"18078\">\n                      <strong data-nodeid=\"18228\"\n                        >代码分层架构就是将软件“元素”（代码）按照“层”（代码关系）的方式组织起来的一种结构。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"18079\">\n                      <strong data-nodeid=\"18233\"\n                        >分层架构核心的原则是：当请求或数据从外部传递过来后，必须是从上一层传递给下一层</strong\n                      >。如下图，一个来自 View 层的数据，必须先通过 Controller\n                      层、Model 层后，才能最终到达数据库层。\n                    </p>\n                    <p data-nodeid=\"21208\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/20/53/CioPOWBTAT2ALtPrAAcIY76Nrg8579.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"21211\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"18082\">\n                      那么你可能会问：“为什么不让 View\n                      层的请求直接到达数据库呢？”这是因为会造成<strong\n                        data-nodeid=\"18242\"\n                        >新的代码耦合，增加代码的复杂度</strong\n                      >。比如说，View 层直接调用 Model 层的组件，当 Model\n                      层上的组件有变化时（比如， SQL 或逻辑修改），既会影响\n                      Controller 层组件的使用，也会影响 View\n                      层组件的使用（可参考下面的示意图）。\n                    </p>\n                    <p data-nodeid=\"21838\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/20/57/Cgp9HWBTAUWAAkVpAAZvbMiI5k8828.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"21841\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"18085\">\n                      所以，分层的本质就是为了让相似变化在各自的层内变化，而不造成层与层之间的相互影响。\n                    </p>\n                    <h3 data-nodeid=\"18086\">代码分层架构解决什么问题</h3>\n                    <p data-nodeid=\"18087\">\n                      代码分层架构主要是为了解决两个问题：\n                    </p>\n                    <ul data-nodeid=\"18088\">\n                      <li data-nodeid=\"18089\">\n                        <p data-nodeid=\"18090\">如何快速拆解功能问题？</p>\n                      </li>\n                      <li data-nodeid=\"18091\">\n                        <p data-nodeid=\"18092\">如何提升代码的可扩展性？</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"18093\">下面我们就来分别解释下。</p>\n                    <h4 data-nodeid=\"18094\">1. 通过分层来拆解问题</h4>\n                    <p data-nodeid=\"18095\">\n                      在软件开发中，一个功能需求问题通常都是笼统的复杂问题，我们一般都会将这个笼统的复杂问题拆分为多个层次的子问题来解决。\n                    </p>\n                    <p data-nodeid=\"18096\">\n                      这里来看一个简单的例子，假定你正在编写一段“通过 HTTP\n                      向服务器发送字符串”的代码，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">//创建HTTP连接</span>\n</div></li><li><div class=\"code-word\">URL url = <span class=\"hljs-keyword\">new</span> URL(<span class=\"hljs-string\">\"http://xxx.test.com/sayHello\"</span>);\n</div></li><li><div class=\"code-word\">HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n</div></li><li><div class=\"code-word\">connection.connect();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//发送数据</span>\n</div></li><li><div class=\"code-word\">OutputStream os = connection.getOutputStream();\n</div></li><li><div class=\"code-word\">os.write(<span class=\"hljs-string\">\"Hello World!\"</span>.getBytes(<span class=\"hljs-string\">\"UTF-8\"</span>));\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//接收响应</span>\n</div></li><li><div class=\"code-word\">InputStream is = connection.getInputStream();\n</div></li><li><div class=\"code-word\">BufferedReader br = <span class=\"hljs-keyword\">new</span> BufferedReader(<span class=\"hljs-keyword\">new</span> InputStreamReader(is, <span class=\"hljs-string\">\"UTF-8\"</span>));\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//……</span>\n</div></li><li><div class=\"code-word\">br.close();\n</div></li><li><div class=\"code-word\">is.close();\n</div></li><li><div class=\"code-word\">os.close();\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//关闭连接</span>\n</div></li><li><div class=\"code-word\">connection.disconnect();\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18098\">\n                      我们将这段代码简单地抽象成一个流程图，如下所示：\n                    </p>\n                    <p data-nodeid=\"23092\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/20/57/Cgp9HWBTAWCAQs0-AAC9nZ19hIM259.png\"\n                        alt=\"Drawing 10.png\"\n                        data-nodeid=\"23095\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"18101\">\n                      这个流程图代表了我们对最初始问题的分层拆分：先创建 HTTP\n                      连接，然后向服务器发送一串字符串，最后关闭 HTTP 连接。\n                    </p>\n                    <p data-nodeid=\"18102\">\n                      于是，原先的“如何通过 HTTP\n                      向服务器发送字符串”的问题就变成了三个新层次的子问题：\n                    </p>\n                    <ul data-nodeid=\"18103\">\n                      <li data-nodeid=\"18104\">\n                        <p data-nodeid=\"18105\">如何创建 HTTP 连接？</p>\n                      </li>\n                      <li data-nodeid=\"18106\">\n                        <p data-nodeid=\"18107\">如何发送字符串？</p>\n                      </li>\n                      <li data-nodeid=\"18108\">\n                        <p data-nodeid=\"18109\">如何关闭连接？</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"18110\">\n                      首先，在思考如何创建 HTTP\n                      连接这个问题的过程中，你会发现，要想通过 HTTP\n                      发送消息，至少得打开 HTTP 连接，建立 HTTP 会话，并使用 TCP\n                      协议，这样才能通过网络发送数据。\n                    </p>\n                    <p data-nodeid=\"18111\">\n                      接着，你又发现，当成功解决了这个问题后，发送字符串和关闭\n                      HTTP\n                      连接还有更多的问题需要解决，于是，你开始一步一步地去分解……最后的分解结果如下图所示：\n                    </p>\n                    <p data-nodeid=\"22466\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/20/53/CioPOWBTAVeAe3_iAALi7XlJ35Y011.png\"\n                        alt=\"Drawing 12.png\"\n                        data-nodeid=\"22469\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"18114\">\n                      当所有子问题都被成功解决以后，最初通过 HTTP\n                      向服务器发送字符串的总问题也就得以解决了。\n                    </p>\n                    <p data-nodeid=\"18115\">\n                      你发现没有，在不知不觉中你就通过分层将一个复杂的大问题分解为多个容易解决的子层问题。而实际上，有的子层问题已经被前人解决过了，比如，如何使用\n                      HTTP 协议来进行网络数据的通信。也就是说，<strong\n                        data-nodeid=\"18277\"\n                        >最后真正需要关注的问题其实变少了</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"18116\">\n                      所以说，从功能性需求角度来看，代码分层本身就是一种拆解复杂问题的好方法。\n                    </p>\n                    <h4 data-nodeid=\"18117\">2. 通过分层来提升代码可扩展性</h4>\n                    <p data-nodeid=\"18118\">\n                      分层架构的出现，除了解决拆分复杂问题的困境外，还解决了代码可扩展性的问题。\n                    </p>\n                    <p data-nodeid=\"23716\">\n                      为什么要提升代码可扩展性？因为真实的系统数据一直在不断增加。比如说，一个电商网站的用户访问数会从一万个并发增长到十万个并发，或者从一百万增长到一千万。过去的单体架构之所以很难承载，是因为当我们需要扩展服务器和数据库功能时，一处的代码修改就会影响所有的功能。\n                    </p>\n                    <p data-nodeid=\"23717\">\n                      分层架构可以将复杂的逻辑切分为多个层，这样大问题就变成了多个小问题，而我们可以很方便地解决每个小问题。每个小问题更容易被抽象为一个组件，当组件功能需要扩充或替换时，修改代码的影响也被有效地控制在有限的范围内，这样<strong\n                        data-nodeid=\"23724\"\n                        >组件自身的复用性也就提高了</strong\n                      >。\n                    </p>\n\n                    <p data-nodeid=\"18121\">\n                      除了提高代码组件之间的复用性外，分层架构还让我们<strong\n                        data-nodeid=\"18299\"\n                        >更容易做服务的横向扩展</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"18122\">\n                      什么是横向扩展？简单来说，就是用多台配置较低的服务器共同提供服务，也就是我们熟知的集群部署服务方式。比如说，将\n                      Model\n                      层抽取出来作为通用的数据服务部署，这样既不影响其他业务层，也能在负载增加时，快速扩展服务的承载能力。\n                    </p>\n                    <h3 data-nodeid=\"18123\">代码分层架构的优势和劣势</h3>\n                    <p data-nodeid=\"18124\">\n                      到这里，代码分层结构的优势体现在哪儿就很清楚了，大致可总结为如下：\n                    </p>\n                    <ul data-nodeid=\"18125\">\n                      <li data-nodeid=\"18126\">\n                        <p data-nodeid=\"18127\">\n                          只用关注整个结构中的其中某一层的具体实现；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18128\">\n                        <p data-nodeid=\"18129\">降低层与层之间的依赖；</p>\n                      </li>\n                      <li data-nodeid=\"18130\">\n                        <p data-nodeid=\"18131\">\n                          很容易用新的实现来替换原有层次的实现；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18132\">\n                        <p data-nodeid=\"18133\">有利于标准化的统一；</p>\n                      </li>\n                      <li data-nodeid=\"18134\">\n                        <p data-nodeid=\"18135\">各层逻辑方便复用。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"18136\">\n                      总结来说，代码分层架构设计主要为了<strong\n                        data-nodeid=\"18313\"\n                        >实现责任分离、解耦、组件复用和标准制定</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"18137\">\n                      如果不使用分层架构的话，我们的代码逻辑一定会紧紧依赖在一起，修改某一处必定影响其他很多处。从软件项目的角度看，这样会造成非常严重的影响。比如，一个上传功能需要存入下载链接到数据库，如果没有分层，那么当修改存储的路径或类型时，还得修改存储数据库的业务逻辑，想想就很麻烦。\n                    </p>\n                    <p data-nodeid=\"18138\">\n                      另外，层与层之间进行划分后，也提高了组件之间的复用性，层本身就是一种组件形式，通过统一的接口来与外界进行交互，而不再是按照功能上的依赖来进行交互。而统一的接口是模块之间相互约定的统一标准，只要按照标准来进行代码实现，就不会因为代码改动而影响接口的使用。\n                    </p>\n                    <p data-nodeid=\"18139\">\n                      虽然代码分层有很多好处，但不可避免地也会有一些劣势。\n                    </p>\n                    <ul data-nodeid=\"18140\">\n                      <li data-nodeid=\"18141\">\n                        <p data-nodeid=\"18142\">\n                          <strong data-nodeid=\"18321\">开发成本变高</strong\n                          >：因为不同层分别承担各自的责任，如果是高层次新增功能，则需要多个低层增加代码，这样难免会增加开发成本。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18143\">\n                        <p data-nodeid=\"18144\">\n                          <strong data-nodeid=\"18326\">性能降低</strong\n                          >：请求数据因为经过多层代码的处理，执行时长加长，性能会有所消耗。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18145\">\n                        <p data-nodeid=\"18146\">\n                          <strong data-nodeid=\"18331\">代码复杂度增加</strong\n                          >：因为层与层之间存在强耦合，所以对于一些组合功能的调用，则需要增加很多层之间的调用。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"18147\">总结</h3>\n                    <p data-nodeid=\"18148\">\n                      软件分层架构是通过层来隔离不同的关注点（变化相似的地方），以此来解决不同需求变化的问题，使得这种变化可以被控制在一个层里。\n                    </p>\n                    <p data-nodeid=\"18149\">代码分层架构的核心作用有两个：</p>\n                    <ul data-nodeid=\"18150\">\n                      <li data-nodeid=\"18151\">\n                        <p data-nodeid=\"18152\">\n                          <strong data-nodeid=\"18338\"\n                            >对于功能性需求，将复杂问题分解为多个容易解决的子层问题；</strong\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18153\">\n                        <p data-nodeid=\"18154\">\n                          <strong data-nodeid=\"18342\"\n                            >对于非功能性需求，可以提升代码可扩展性。</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"18155\">\n                      总结来说，代码分层架构是一种软件架构设计方法。\n                    </p>\n                    <ul data-nodeid=\"18156\">\n                      <li data-nodeid=\"18157\">\n                        <p data-nodeid=\"18158\">\n                          从软件的功能性需求角度看，分层是为了把较大的复杂问题拆分为多个较小的问题，在分散问题风险的同时，让问题更容易被解决，也就是我们常说的解耦。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18159\">\n                        <p data-nodeid=\"18160\">\n                          从架构（非功能性需求）角度看，分层能提升代码可扩展性，帮助开发人员在相似的变化中修改代码。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27074\" class=\"\">\n                      其实，<strong data-nodeid=\"27080\"\n                        >复杂的设计概念和简单的代码之间存在一种平衡</strong\n                      >，这就是分层架构。\n                    </p>\n\n                    <ul data-nodeid=\"18162\">\n                      <li data-nodeid=\"18163\">\n                        <p data-nodeid=\"18164\">\n                          代码分层架构设计的思维模型是简化思维，本质是抽象与拆解。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18165\">\n                        <p data-nodeid=\"18166\">\n                          代码分层架构设计的目的是将复杂问题拆分为更容易解决的小问题，降低实现难度。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"18167\">\n                        <p data-nodeid=\"18168\">\n                          代码分层架构设计的原则和方法是通用方法，可以应用到其他需要分层设计的地方。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"28305\">\n                      所以，分层架构从来不是目的，只是让我们的软件变得更好的其中一种思维方法而已。\n                    </p>\n                    <p data-nodeid=\"28306\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/20/57/Cgp9HWBTAYOAd887AAXbJxXr52U705.png\"\n                        alt=\"Drawing 13.png\"\n                        data-nodeid=\"28310\"\n                      />\n                    </p>\n\n                    <h3 data-nodeid=\"18170\">课后思考</h3>\n                    <p data-nodeid=\"18171\">\n                      除了分层架构外，你还熟悉哪些其他架构设计模式？有哪些优势和劣势？欢迎你在留言区与我分享。\n                    </p>\n                    <p data-nodeid=\"18172\" class=\"\">\n                      在下一讲，我会接着和你分享如何用软件工程方法解决开发难题的相关内容，这用到了工程思维，在开发中也很是重要，记得按时来听课。\n                    </p>\n            "}