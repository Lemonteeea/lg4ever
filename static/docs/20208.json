{"title":"07 | 如何使用 Go 更好地开发并发程序？","context":"\n                    <p data-nodeid=\"126115\" class=\"\">\n                      我们都知道计算机的核心为\n                      CPU，它是计算机的运算和控制核心，承载了所有的计算任务。最近半个世纪以来，由于半导体技术的高速发展，集成电路中晶体管的数量也在大幅度增长，这大大提升了\n                      CPU\n                      的性能。著名的摩尔定律——“集成电路芯片上所集成的电路的数目，每隔18个月就翻一番”，描述的就是该种情形。\n                    </p>\n                    <p data-nodeid=\"126116\" class=\"\">\n                      过于密集的晶体管虽然提高了 CPU\n                      的处理性能，但也带来了单个芯片发热过高和成本过高的问题，与此同时，受限于材料技术的发展，芯片中晶体管数量密度的增加速度已经放缓。也就是说，程序已经无法简单地依赖硬件的提升而提升运行速度。这时，多核\n                      CPU\n                      的出现让我们看到了提升程序运行速度的另一个方向：将程序的执行过程分为多个可并行或并发执行的步骤，让它们分别在不同的\n                      CPU\n                      核心中同时执行，最后将各部分的执行结果进行合并得到最终结果。\n                    </p>\n                    <p data-nodeid=\"126117\">\n                      并行和并发是计算机程序执行的常见概念，它们的区别在于：\n                    </p>\n                    <ul data-nodeid=\"126118\">\n                      <li data-nodeid=\"126119\">\n                        <p data-nodeid=\"126120\">\n                          <strong data-nodeid=\"126219\">并行</strong\n                          >，指两个或多个程序在<strong data-nodeid=\"126220\"\n                            >同一个时刻</strong\n                          >执行；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"126121\">\n                        <p data-nodeid=\"126122\">\n                          <strong data-nodeid=\"126229\">并发</strong\n                          >，指两个或多个程序在<strong data-nodeid=\"126230\"\n                            >同一个时间段内</strong\n                          >执行。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"126123\">\n                      <strong data-nodeid=\"126235\">并行执行的程序</strong\n                      >，无论从宏观还是微观的角度观察，同一时刻内都有多个程序在\n                      CPU 中执行。这就要求 CPU\n                      提供多核计算能力，多个程序被分配到 CPU\n                      的不同的核中被同时执行。\n                    </p>\n                    <p data-nodeid=\"126124\">\n                      而<strong data-nodeid=\"126241\">并发执行的程序</strong\n                      >，仅需要在宏观角度观察到多个程序在 CPU\n                      中同时执行。即使是单核 CPU\n                      也可以通过分时复用的方式，给多个程序分配一定的执行时间片，让它们在\n                      CPU\n                      上被快速轮换执行，从而在宏观上模拟出多个程序同时执行的效果。但从微观角度来看，这些程序其实是在\n                      CPU 中被串行执行。\n                    </p>\n                    <h3 data-nodeid=\"127775\" class=\"\">Go 的 MPG 线程模型</h3>\n\n                    <p data-nodeid=\"126126\">\n                      Go 被认为是一门高性能并发语言，得益于它在原生态支持<strong\n                        data-nodeid=\"126248\"\n                        >协程并发</strong\n                      >。这里我们首先了解进程、线程和协程这三者的联系和区别。\n                    </p>\n                    <p data-nodeid=\"126127\">\n                      在多道程序系统中，<strong data-nodeid=\"126254\"\n                        >进程</strong\n                      >是一个具有独立功能的程序关于某个数据集合的一次动态执行过程，是操作系统进行资源分配和调度的基本单位，是应用程序运行的载体。\n                    </p>\n                    <p data-nodeid=\"126128\">\n                      而<strong data-nodeid=\"126264\">线程</strong\n                      >则是程序执行过程中一个单一的顺序控制流程，是 CPU\n                      调度和分派的基本单位。<strong data-nodeid=\"126265\"\n                        >线程是比进程更小的独立运行基本单位</strong\n                      >，一个进程中可以拥有一个或者以上的线程，这些线程共享进程所持有的资源，在\n                      CPU 中被调度执行，共同完成进程的执行任务。\n                    </p>\n                    <p data-nodeid=\"126129\">\n                      在 Linux\n                      系统中，根据资源访问权限的不同，操作系统会把内存空间分为内核空间和用户空间：内核空间的代码能够直接访问计算机的底层资源，如\n                      CPU 资源、I/O\n                      资源等，为用户空间的代码提供计算机底层资源访问能力；用户空间为上层应用程序的活动空间，无法直接访问计算机底层资源，需要借助“系统调用”“库函数”等方式调用内核空间提供的资源。\n                    </p>\n                    <p data-nodeid=\"126130\">\n                      同样，线程也可以分为内核线程和用户线程。<strong\n                        data-nodeid=\"126276\"\n                        >内核线程</strong\n                      >由操作系统管理和调度，是内核调度实体，它能够直接操作计算机底层资源，可以充分利用\n                      CPU 多核并行计算的优势，但是线程切换时需要 CPU\n                      切换到内核态，存在一定的开销，可创建的线程数量也受到操作系统的限制。<strong\n                        data-nodeid=\"126277\"\n                        >用户线程</strong\n                      >由用户空间的代码创建、管理和调度，无法被操作系统感知。用户线程的数据保存在用户空间中，切换时无须切换到内核态，切换开销小且高效，可创建的线程数量理论上只与内存大小相关。\n                    </p>\n                    <p data-nodeid=\"126131\">\n                      <strong data-nodeid=\"126282\"\n                        >协程是一种用户线程，属于轻量级线程</strong\n                      >。协程的调度，完全由用户空间的代码控制；协程拥有自己的寄存器上下文和栈，并存储在用户空间；协程切换时无须切换到内核态访问内核空间，切换速度极快。但这也给开发人员带来较大的技术挑战：开发人员需要在用户空间处理协程切换时上下文信息的保存和恢复、栈空间大小的管理等问题。\n                    </p>\n                    <p data-nodeid=\"128707\">\n                      Go\n                      是为数不多在语言层次实现协程并发的语言，它采用了一种特殊的两级线程模型：MPG\n                      线程模型（如下图）。\n                    </p>\n                    <p data-nodeid=\"129651\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/36/9A/Ciqc1F8X5ymAf7NvAAE_PDbjFtw120.png\"\n                        alt=\"1.png\"\n                        data-nodeid=\"129654\"\n                      />\n                    </p>\n\n                    <ul data-nodeid=\"126135\">\n                      <li data-nodeid=\"126136\">\n                        <p data-nodeid=\"126137\">\n                          M，即 machine，相当于内核线程在 Go\n                          进程中的映射，它与内核线程一一对应，代表真正执行计算的资源。在\n                          M 的生命周期内，它只会与一个内核线程关联。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"126138\">\n                        <p data-nodeid=\"126139\">\n                          P，即 processor，代表 Go\n                          代码片段执行所需的上下文环境。M 和 P 的结合能够为 G\n                          提供有效的运行环境，它们之间的结合关系不是固定的。P\n                          的最大数量决定了 Go 程序的并发规模，由\n                          runtime.GOMAXPROCS 变量决定。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"126140\">\n                        <p data-nodeid=\"126141\">\n                          G，即\n                          goroutine，是一种轻量级的用户线程，是对代码片段的封装，拥有执行时的栈、状态和代码片段等信息。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"130339\">\n                      在实际执行过程中，M 和 P 共同为 G\n                      提供有效的运行环境（如下图），多个可执行的 G 顺序挂载在 P\n                      的可执行 G 队列下面，等待调度和执行。当 G 中存在一些 I/O\n                      系统调用阻塞了 M 时，P 将会断开与 M 的联系，从调度器空闲 M\n                      队列中获取一个 M 或者创建一个新的 M 组合执行， 保证 P\n                      中可执行 G 队列中其他 G 得到执行，且由于程序中并行执行的 M\n                      数量没变，保证了程序 CPU 的高利用率。\n                    </p>\n                    <p data-nodeid=\"130340\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/36/9A/Ciqc1F8X5zuAQrDLAAEpRhFm8n4546.png\"\n                        alt=\"2.png\"\n                        data-nodeid=\"130344\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"126145\">\n                      当 G 中系统调用执行结束返回时，M 会为 G 捕获一个 P\n                      上下文，如果捕获失败，就把 G 放到全局可执行 G 队列等待其他\n                      P 的获取。新创建的 G 会被放置到全局可执行 G\n                      队列中，等待调度器分发到合适的 P 的可执行 G 队列中。M 和 P\n                      结合后，会从 P 的可执行 G 队列中无锁获取 G 执行。当 P\n                      的可执行 G 队列为空时，P 才会加锁从全局可执行 G 队列获取\n                      G。当全局可执行 G 队列中也没有 G 时，P 会尝试从其他 P\n                      的可执行 G 队列中“剽窃” G 执行。\n                    </p>\n                    <h3 data-nodeid=\"130805\" class=\"\">goroutine 和 channel</h3>\n\n                    <p data-nodeid=\"126147\">\n                      并发程序中的多个线程同时在 CPU\n                      执行，由于资源之间的相互依赖和竞态条件，需要一定的并发模型协作不同线程之间的任务执行。Go\n                      中倡导使用\n                      <strong data-nodeid=\"126303\">CSP 并发模型</strong\n                      >来控制线程之间的任务协作，CSP\n                      倡导使用通信的方式来进行线程之间的内存共享。\n                    </p>\n                    <p data-nodeid=\"126148\">\n                      Go 是通过 goroutine 和 channel 来实现 CSP 并发模型的：\n                    </p>\n                    <ul data-nodeid=\"126149\">\n                      <li data-nodeid=\"126150\">\n                        <p data-nodeid=\"126151\">\n                          <strong data-nodeid=\"126309\">goroutine，即协程</strong\n                          >，Go\n                          中的并发实体，是一种轻量级的用户线程，是消息的发送和接收方；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"126152\">\n                        <p data-nodeid=\"126153\">\n                          <strong data-nodeid=\"126314\">channel，即通道</strong\n                          >， goroutine 使用通道发送和接收消息。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"126154\">\n                      CSP\n                      并发模型类似常用的同步队列，它更加关注消息的传输方式，解耦了发送消息的\n                      goroutine 和接收消息的 goroutine，channel\n                      可以独立创建和存取，在不同的 goroutine 中传递使用。\n                    </p>\n                    <p data-nodeid=\"126155\">\n                      使用关键字 go 即可使用 goroutine\n                      并发执行代码片段，形式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">go</span> expression\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"126157\">\n                      而 channel\n                      作为一种引用类型，声明时需要指定传输数据类型，声明形式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> name <span class=\"hljs-keyword\">chan</span> T <span class=\"hljs-comment\">// 双向 channel</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> name <span class=\"hljs-keyword\">chan</span> &lt;- T <span class=\"hljs-comment\">// 只能发送消息的 channel</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> name T &lt;- <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-comment\">// 只能接收消息的 channel </span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"126159\">\n                      其中，T 即为 channel 可传输的数据类型。channel\n                      作为队列，遵循消息先进先出的顺序，同时保证同一时刻只能有一个\n                      goroutine 发送或者接收消息。<br />\n                      使用 channel 发送和接收消息形式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">channel &lt;- val <span class=\"hljs-comment\">// 发送消息</span>\n</div></li><li><div class=\"code-word\">val := &lt;- channel <span class=\"hljs-comment\">// 接收消息</span>\n</div></li><li><div class=\"code-word\">val, ok := &lt;- channel <span class=\"hljs-comment\">// 非阻塞接收消息</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"131267\">\n                      goroutine 向已经填满信息的 channel 发送信息或从没有数据的\n                      channel 接收信息会阻塞自身。goroutine\n                      接收消息时可以使用非阻塞的方式，无论 channel\n                      中是否存在消息都会立即返回，通过 ok\n                      布尔值判断是否接收成功。\n                    </p>\n                    <p data-nodeid=\"131268\">\n                      创建一个 channel 需要使用 make 函数对 channel\n                      进行初始化，形式如下所示：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\">ch := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> T, sizeOfChan)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"126163\">\n                      初始化 channel 时可以指定 channel 的长度，表示 channel\n                      最多可以缓存多少条信息。下面我们通过一个简单例子演示\n                      goroutine 和 channel 的使用：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> (\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"time\"</span>\n</div></li><li><div class=\"code-word\">)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//生产者</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Producer</span><span class=\"hljs-params\">(begin, end <span class=\"hljs-keyword\">int</span>, queue <span class=\"hljs-keyword\">chan</span>&lt;- <span class=\"hljs-keyword\">int</span>)</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> i:= begin ; i &lt; end ; i++ {\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"produce:\"</span>, i)\n</div></li><li><div class=\"code-word\">\t\tqueue &lt;- i\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//消费者</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Consumer</span><span class=\"hljs-params\">(queue &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> val := <span class=\"hljs-keyword\">range</span> queue  { <span class=\"hljs-comment\">//当前的消费者循环消费</span>\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"consume:\"</span>, val)\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n</div></li><li><div class=\"code-word\">\tqueue := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-built_in\">close</span>(queue)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i++ {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">go</span> Producer(i * <span class=\"hljs-number\">5</span>, (i+<span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">5</span>, queue) <span class=\"hljs-comment\">//多个生产者</span>\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">go</span> Consumer(queue) <span class=\"hljs-comment\">//单个消费者</span>\n</div></li><li><div class=\"code-word\">\ttime.Sleep(time.Second) <span class=\"hljs-comment\">// 避免主 goroutine 结束程序</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"126165\">\n                      这是一个简单的多生产者和单消费的代码例子，生产 goroutine\n                      将生产的数字通过 channel 发送给消费\n                      goroutine。上述例子中，消费 goroutine 使用 for:range 从\n                      channel 中循环接收消息，只有当相应的 channel 被内置函数\n                      close 后，该循环才会结束。channel\n                      在关闭之后不可以再用于发送消息，但是可以继续用于接收消息，从关闭的\n                      channel 中接收消息或者正在被阻塞的 goroutine\n                      将会接收零值并返回。还有一个需要注意的点是，main 函数由主\n                      goroutine 启动，当主 goroutine 即 main 函数执行结束，整个\n                      Go 程序也会直接执行结束，无论是否存在其他未执行完的\n                      goroutine。\n                    </p>\n                    <h4 data-nodeid=\"131731\" class=\"\">1. select 多路复用</h4>\n\n                    <p data-nodeid=\"126169\">\n                      当需要从多个 channel 中接收消息时，可以使用 Go 提供的\n                      select 关键字，它提供类似多路复用的能力，使得 goroutine\n                      可以同时等待多个 channel 的读写操作。select 的形式与\n                      switch 类似，但是要求 case 语句后面必须为 channel\n                      的收发操作，一个简单的例子如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> (\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"time\"</span>\n</div></li><li><div class=\"code-word\">)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">send</span><span class=\"hljs-params\">(ch <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>, begin <span class=\"hljs-keyword\">int</span> )</span></span>  {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 循环向 channel 发送消息</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> i :=begin ; i&lt; begin + <span class=\"hljs-number\">10</span> ;i++{\n</div></li><li><div class=\"code-word\">\t\tch &lt;- i\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">receive</span><span class=\"hljs-params\">(ch &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)</span></span>  {\n</div></li><li><div class=\"code-word\">\tval := &lt;- ch\n</div></li><li><div class=\"code-word\">\tfmt.Println(<span class=\"hljs-string\">\"receive:\"</span>, val)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\tch1 := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)\n</div></li><li><div class=\"code-word\">\tch2 := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">int</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">go</span> send(ch1, <span class=\"hljs-number\">0</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">go</span> receive(ch2)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 主 goroutine 休眠 1s，保证调度成功</span>\n</div></li><li><div class=\"code-word\">\ttime.Sleep(time.Second)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">for</span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">select</span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">case</span> val := &lt;- ch1: <span class=\"hljs-comment\">// 从 ch1 读取数据</span>\n</div></li><li><div class=\"code-word\">\t\t\tfmt.Printf(<span class=\"hljs-string\">\"get value %d from ch1\\n\"</span>, val)\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">case</span> ch2 &lt;- <span class=\"hljs-number\">2</span> : <span class=\"hljs-comment\">// 使用 ch2 发送消息</span>\n</div></li><li><div class=\"code-word\">\t\t\tfmt.Println(<span class=\"hljs-string\">\"send value by ch2\"</span>)\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">case</span> &lt;-time.After(<span class=\"hljs-number\">2</span> * time.Second): <span class=\"hljs-comment\">// 超时设置</span>\n</div></li><li><div class=\"code-word\">\t\t\tfmt.Println(<span class=\"hljs-string\">\"Time out\"</span>)\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"126171\">\n                      在上述例子中，我们使用 select 关键字同时从 ch1\n                      中接收数据和使用 ch2 发送数据，输出的一种可能结果为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">get value <span class=\"hljs-number\">0</span> from ch1\n</div></li><li><div class=\"code-word\">get value <span class=\"hljs-number\">1</span> from ch1\n</div></li><li><div class=\"code-word\">send value by ch2\n</div></li><li><div class=\"code-word\">receive: <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\">get value <span class=\"hljs-number\">2</span> from ch1\n</div></li><li><div class=\"code-word\">get value <span class=\"hljs-number\">3</span> from ch1\n</div></li><li><div class=\"code-word\">get value <span class=\"hljs-number\">4</span> from ch1\n</div></li><li><div class=\"code-word\">get value <span class=\"hljs-number\">5</span> from ch1\n</div></li><li><div class=\"code-word\">get value <span class=\"hljs-number\">6</span> from ch1\n</div></li><li><div class=\"code-word\">get value <span class=\"hljs-number\">7</span> from ch1\n</div></li><li><div class=\"code-word\">get value <span class=\"hljs-number\">8</span> from ch1\n</div></li><li><div class=\"code-word\">get value <span class=\"hljs-number\">9</span> from ch1\n</div></li><li><div class=\"code-word\">Time out\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"126173\">\n                      由于 ch2 中的消息仅被接收一次，所以仅出现一次“send value\n                      by ch2”，后续消息的发送将被阻塞。select 语句分别从 3 个\n                      case 中选取返回的 case 进行处理，当有多个 case\n                      语句同时返回时，select 将会随机选择一个 case\n                      进行处理。如果 select 语句的最后包含 default 语句，该\n                      select 语句将会变为非阻塞型，即当其他所有的 case\n                      语句都被阻塞无法返回时，select 语句将直接执行 default\n                      语句返回结果。在上述例子中，我们在最后的 case 语句使用了\n                      &lt;-time.After(2 * time.Second) 的方式指定了定时返回的\n                      channel，这是一种有效从阻塞的 channel 中超时返回的小技巧。\n                    </p>\n                    <h4 data-nodeid=\"133335\" class=\"\">2. Context 上下文</h4>\n\n                    <p data-nodeid=\"126177\">\n                      当需要在多个 goroutine 中传递上下文信息时，可以使用\n                      Context 实现。Context\n                      除了用来传递上下文信息，还可以用于传递终结执行子任务的相关信号，中止多个执行子任务的\n                      goroutine。Context 中提供以下接口：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> Context <span class=\"hljs-keyword\">interface</span> {\n</div></li><li><div class=\"code-word\">    Deadline() (deadline time.Time, ok <span class=\"hljs-keyword\">bool</span>)\n</div></li><li><div class=\"code-word\">    Done() &lt;-<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>{}\n</div></li><li><div class=\"code-word\">    Err() error\n</div></li><li><div class=\"code-word\">    Value(key <span class=\"hljs-keyword\">interface</span>{}) <span class=\"hljs-keyword\">interface</span>{}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"126179\">\n                      <li data-nodeid=\"126180\">\n                        <p data-nodeid=\"126181\">\n                          Deadline 方法，返回 Context\n                          被取消的时间，也就是完成工作的截止日期；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"126182\">\n                        <p data-nodeid=\"126183\">\n                          Done，返回一个 channel，这个 channel\n                          会在当前工作完成或者上下文被取消之后关闭，多次调用\n                          Done 方法会返回同一个 channel；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"126184\">\n                        <p data-nodeid=\"126185\">\n                          Err 方法，返回 Context 结束的原因，它只会在 Done\n                          返回的 channel 被关闭时才会返回非空的值，如果 Context\n                          被取消，会返回 Canceled 错误；如果 Context\n                          超时，会返回 DeadlineExceeded 错误。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"126186\">\n                        <p data-nodeid=\"126187\">\n                          Value 方法，可用于从 Context 中获取传递的键值信息。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"126188\">\n                      在 Web 请求的处理过程中，一个请求可能启动多个 goroutine\n                      协同工作，这些 goroutine\n                      之间可能需要共享请求的信息，且当请求被取消或者执行超时时，该请求对应的所有\n                      goroutine 都需要快速结束，释放资源。Context\n                      就是为了解决上述场景而开发的，我们通过下面一个例子来演示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">package</span> main\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> (\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"context\"</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"fmt\"</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-string\">\"time\"</span>\n</div></li><li><div class=\"code-word\">)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> DB_ADDRESS  = <span class=\"hljs-string\">\"db_address\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> CALCULATE_VALUE  = <span class=\"hljs-string\">\"calculate_value\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">readDB</span><span class=\"hljs-params\">(ctx context.Context, cost time.Duration)</span></span>  {\n</div></li><li><div class=\"code-word\">\tfmt.Println(<span class=\"hljs-string\">\"db address is\"</span>, ctx.Value(DB_ADDRESS))\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">select</span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">case</span> &lt;- time.After(cost): <span class=\"hljs-comment\">//  模拟数据库读取</span>\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"read data from db\"</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(ctx.Err()) <span class=\"hljs-comment\">// 任务取消的原因</span>\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">// 一些清理工作</span>\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">calculate</span><span class=\"hljs-params\">(ctx context.Context, cost time.Duration)</span></span>  {\n</div></li><li><div class=\"code-word\">\tfmt.Println(<span class=\"hljs-string\">\"calculate value is\"</span>, ctx.Value(CALCULATE_VALUE))\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">select</span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">case</span> &lt;- time.After(cost): <span class=\"hljs-comment\">//  模拟数据计算</span>\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(<span class=\"hljs-string\">\"calculate finish\"</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">case</span> &lt;-ctx.Done():\n</div></li><li><div class=\"code-word\">\t\tfmt.Println(ctx.Err()) <span class=\"hljs-comment\">// 任务取消的原因</span>\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">// 一些清理工作</span>\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>  {\n</div></li><li><div class=\"code-word\">\tctx := context.Background(); <span class=\"hljs-comment\">// 创建一个空的上下文</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 添加上下文信息</span>\n</div></li><li><div class=\"code-word\">\tctx = context.WithValue(ctx, DB_ADDRESS, <span class=\"hljs-string\">\"localhost:10086\"</span>)\n</div></li><li><div class=\"code-word\">\tctx = context.WithValue(ctx, CALCULATE_VALUE, <span class=\"hljs-number\">1234</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 设定子 Context 2s 后执行超时返回</span>\n</div></li><li><div class=\"code-word\">\tctx, cancel := context.WithTimeout(ctx, time.Second * <span class=\"hljs-number\">2</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">defer</span> cancel()\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 设定执行时间为 4 s</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">go</span> readDB(ctx, time.Second * <span class=\"hljs-number\">4</span>)\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">go</span> calculate(ctx, time.Second * <span class=\"hljs-number\">4</span>)\n</div></li><li><div class=\"code-word\">\t\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 充分执行</span>\n</div></li><li><div class=\"code-word\">    time.Sleep(time.Second * <span class=\"hljs-number\">5</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"126190\">\n                      在上述例子中，我们模拟了一个请求中同时进行数据库访问和逻辑计算的操作，在请求执行超时时，及时关闭尚未执行结束\n                      goroutine。我们首先通过 context.WithValue 方法为 context\n                      添加上下文信息，Context 在多个 goroutine\n                      中是并发安全的，可以安全地在多个 goroutine 中对 Context\n                      中的上下文数据进行读取。接着使用 context.WithTimeout\n                      方法设定了 Context 的超时时间为 2s，并传递给 readDB 和\n                      calculate 两个 goroutine 执行子任务。在 readDB 和\n                      calculate 方法中，使用 select 语句对 Context 的 Done\n                      通道进行监控。由于我们设定了子 Context 将在 2s\n                      之后超时，所以它将在 2s 之后关闭 Done\n                      通道；然而预设的子任务执行时间为 4s，对应的 case\n                      语句尚未返回，执行被取消，进入到清理工作的 case\n                      语句中，结束掉当前的 goroutine\n                      所执行的任务。预期的输出结果如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">calculate value is <span class=\"hljs-number\">1234</span>\n</div></li><li><div class=\"code-word\">db address is localhost:<span class=\"hljs-number\">10086</span>\n</div></li><li><div class=\"code-word\">context deadline exceeded\n</div></li><li><div class=\"code-word\">context deadline exceeded\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"126192\">\n                      使用 Context，能够有效地在一组 goroutine\n                      中传递共享值、取消信号、deadline 等信息，及时关闭不需要的\n                      goroutine。\n                    </p>\n                    <h3 data-nodeid=\"134696\" class=\"\">小结</h3>\n\n                    <p data-nodeid=\"126194\">\n                      本节课我们介绍了 Go 语言并发特性，主要包含：\n                    </p>\n                    <ul data-nodeid=\"126195\">\n                      <li data-nodeid=\"126196\">\n                        <p data-nodeid=\"126197\">Go 的 MPG 线程模型；</p>\n                      </li>\n                      <li data-nodeid=\"126198\">\n                        <p data-nodeid=\"126199\">goroutine 和 channel；</p>\n                      </li>\n                      <li data-nodeid=\"126200\">\n                        <p data-nodeid=\"126201\">select 多路复用；</p>\n                      </li>\n                      <li data-nodeid=\"126202\">\n                        <p data-nodeid=\"126203\">Context 上下文。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"126204\">\n                      除了支持 CSP 的并发模型，Go\n                      同样支持传统的线程与锁并发模型，提供了互斥锁、读写锁、并发等待组、同步等待条件等一系列同步工具，这些同步工具的结构体位于\n                      sync 包中，与其他语言的同步工具使用方式相差无几。Go\n                      在语言层次支持协程并发，在并发性能上表现卓越，能够充分挖掘多核\n                      CPU 的运算性能。希望本节课的学习，能够有效提升你对 Go\n                      并发设计和编程的认知。\n                    </p>\n                    <p data-nodeid=\"127067\">最后，欢迎在留言区和我交流分享。</p>\n            "}