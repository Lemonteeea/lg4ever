{"title":"04 | TCP 的稳定性：滑动窗口和流速控制是怎么回事？","context":"\n                    <p data-nodeid=\"26040\" class=\"\">\n                      上一讲我们提到，TCP\n                      利用发送字节数和接收字节数，这个二元组的唯一性保证顺序。今天我们继续“03\n                      | TCP 的封包格式：TCP\n                      为什么要粘包和拆包？”的话题，讨论下保证顺序的具体算法，以及如何在保证顺序的基础上，同时追求更高的吞吐量。我认为，这部分知识也是\n                      TCP 协议中最有趣的部分——TCP 的滑动窗口算法。\n                    </p>\n                    <p data-nodeid=\"26041\">\n                      <strong data-nodeid=\"26110\"\n                        >TCP\n                        作为一个传输层协议，最核心的能力是传输。传输需要保证可靠性，还需要控制流速，这两个核心能力均由滑动窗口提供</strong\n                      >。而滑动窗口中解决的问题，是你在今后的工作中可以长期使用的，比如设计一个分布式的\n                      RPC 框架、实现一个消息队列或者分布式的文件系统等。\n                    </p>\n                    <p data-nodeid=\"26042\">\n                      所以请你带着今天的问题“<strong data-nodeid=\"26116\"\n                        >滑动窗口和流速控制是怎么回事？</strong\n                      >”开始今天的学习吧！\n                    </p>\n                    <h3 data-nodeid=\"26043\">请求/响应模型</h3>\n                    <p data-nodeid=\"26044\">\n                      TCP\n                      中每个发送的请求都需要响应。如果一个请求没有收到响应，发送方就会认为这次发送出现了故障，会触发重发。\n                    </p>\n                    <p data-nodeid=\"26045\">\n                      大体的模型，和下图很像。但是如果完全和下图一样，每一个请求收到响应之后，再发送下一个请求，吞吐量会很低。因为这样的设计，会产生网络的空闲时间，说白了，就是浪费带宽。带宽没有用满，意味着可以同时发送更多的请求，接收更多的响应。\n                    </p>\n                    <p data-nodeid=\"26046\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3A/FA/CioPOWCCKu-AJ2NHAACe0M3wDME839.png\"\n                        alt=\"image (1).png\"\n                        data-nodeid=\"26122\"\n                      />\n                    </p>\n                    <div data-nodeid=\"26047\">\n                      <p style=\"text-align: center\">\n                        TCP 请求/响应模型（吞吐量低）\n                      </p>\n                    </div>\n                    <p data-nodeid=\"26048\">\n                      一种改进的方式，就是让发送方有请求就发送出去，而不是等待响应。通过这样的处理方式，发送的数据连在了一起，响应的数据也连在了一起，吞吐量就提升了。\n                    </p>\n                    <p data-nodeid=\"26049\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3A/F2/Cgp9HWCCKvWAKGcEAACep0GQbI0182.png\"\n                        alt=\"image (2).png\"\n                        data-nodeid=\"26126\"\n                      />\n                    </p>\n                    <p data-nodeid=\"26050\">\n                      但是如果可以同时发送的数据真的非常多呢？比如成百上千个 TCP\n                      段都需要发送，这个时候带宽可能会不足。像下图这样，很多个数据封包都需要发送，该如何处理呢？\n                    </p>\n                    <p data-nodeid=\"26051\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3A/67/CioPOWB_iSGAJrYTAAA1X0Gw-4U285.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"26130\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"26052\">排队（Queuing）</h4>\n                    <p data-nodeid=\"26053\">\n                      在这种情况下，通常我们会考虑<strong data-nodeid=\"26137\"\n                        >排队（Queuing）机制</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"26054\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3A/FA/CioPOWCCKwuAfBn5AABKdgtX54w997.png\"\n                        alt=\"image (3).png\"\n                        data-nodeid=\"26140\"\n                      />\n                    </p>\n                    <p data-nodeid=\"26055\">\n                      考虑这样一个模型，如上图所示，在 TCP\n                      层实现一个队列。新元素从队列的一端（左侧）排队，作为一个未发送的数据封包。开始发送的数据封包，从队列的右侧离开。你可以思考一下，这个模型有什么问题吗？\n                    </p>\n                    <p data-nodeid=\"26056\">\n                      这样做就需要多个队列，我们要将未发送的数据从队列中取出，加入发送中的队列。然后再将发送中的数据，收到\n                      ACK 的部分取出，放入已接收的队列。而发送中的封包，何时收到\n                      ACK 是一件不确定的事情，这样使用队列似乎也有一定的问题。\n                    </p>\n                    <h3 data-nodeid=\"26057\">滑动窗口（Sliding Window）</h3>\n                    <p data-nodeid=\"26058\">\n                      在上面的模型当中，我们之所以觉得算法不好设计，是因为用错了数据结构。有个说法叫作如果程序写复杂了，那就是写错了。这里其实应该用一种叫作<strong\n                        data-nodeid=\"26149\"\n                        >滑动窗口的数据结构</strong\n                      >去实现。\n                    </p>\n                    <p data-nodeid=\"26059\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3A/F2/Cgp9HWCCKxSAROSpAAA_zThgiBA669.png\"\n                        alt=\"image (4).png\"\n                        data-nodeid=\"26152\"\n                      />\n                    </p>\n                    <p data-nodeid=\"26060\">如上图所示：</p>\n                    <ul data-nodeid=\"26061\">\n                      <li data-nodeid=\"26062\">\n                        <p data-nodeid=\"26063\">深绿色代表已经收到 ACK 的段</p>\n                      </li>\n                      <li data-nodeid=\"26064\">\n                        <p data-nodeid=\"26065\">\n                          浅绿色代表发送了，但是没有收到 ACK 的段\n                        </p>\n                      </li>\n                      <li data-nodeid=\"26066\">\n                        <p data-nodeid=\"26067\">白色代表没有发送的段</p>\n                      </li>\n                      <li data-nodeid=\"26068\">\n                        <p data-nodeid=\"26069\">紫色代表暂时不能发送的段</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"26070\">\n                      下面我们重新设计一下不同类型封包的顺序，将已发送的数据放到最左边，发送中的数据放到中间，未发送的数据放到右边。假设我们最多同时发送\n                      5 个封包，也就是窗口大小 =\n                      5。窗口中的数据被同时发送出去，然后等待 ACK。如果一个封包\n                      ACK 到达，我们就将它标记为已接收（深绿色）。\n                    </p>\n                    <p data-nodeid=\"26071\">\n                      如下图所示，有两个封包的 ACK 到达，因此标记为绿色。\n                    </p>\n                    <p data-nodeid=\"26072\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3A/F2/Cgp9HWCCKxuAeVUyAAA_sW29BSM139.png\"\n                        alt=\"image (5).png\"\n                        data-nodeid=\"26162\"\n                      />\n                    </p>\n                    <p data-nodeid=\"26073\">\n                      这个时候滑动窗口可以向右滑动，如下图所示：\n                    </p>\n                    <p data-nodeid=\"26074\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3A/FA/CioPOWCCKyCAMaA7AAA_zxqi_ig808.png\"\n                        alt=\"image (6).png\"\n                        data-nodeid=\"26166\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"26075\">重传</h4>\n                    <p data-nodeid=\"26076\">\n                      如果发送过程中，部分数据没能收到 ACK\n                      会怎样呢？这就可能发生重传。\n                    </p>\n                    <p data-nodeid=\"26077\">\n                      如果发生下图这样的情况，段 4 迟迟没有收到 ACK。\n                    </p>\n                    <p data-nodeid=\"26078\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3A/F2/Cgp9HWCCKyaAcZwMAABGuK2lrZY271.png\"\n                        alt=\"image (7).png\"\n                        data-nodeid=\"26172\"\n                      />\n                    </p>\n                    <p data-nodeid=\"26079\">\n                      这个时候滑动窗口只能右移一个位置，如下图所示：\n                    </p>\n                    <p data-nodeid=\"26080\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3A/FA/CioPOWCCKyuADL6mAABGoEBZ_2Y287.png\"\n                        alt=\"image (8).png\"\n                        data-nodeid=\"26176\"\n                      />\n                    </p>\n                    <p data-nodeid=\"26081\">\n                      在这个过程中，如果后来段 4 重传成功（接收到\n                      ACK），那么窗口就会继续右移。如果段 4\n                      发送失败，还是没能收到 ACK，那么接收方也会抛弃段 5、段\n                      6、段 7。这样从段 4 开始之后的数据都需要重发。\n                    </p>\n                    <h4 data-nodeid=\"26082\">快速重传</h4>\n                    <p data-nodeid=\"26083\">\n                      在 TCP 协议中，如果接收方想丢弃某个段，可以选择不发\n                      ACK。发送端超时后，会重发这个 TCP\n                      段。而有时候，接收方希望催促发送方尽快补发某个 TCP\n                      段，这个时候可以使用<strong data-nodeid=\"26184\"\n                        >快速重传</strong\n                      >能力。\n                    </p>\n                    <p data-nodeid=\"26084\">\n                      例如段 1、段 2、段 4 到了，但是段 3 没有到。\n                      接收方可以发送多次段 3 的 ACK。如果发送方收到多个段 3 的\n                      ACK，就会重发段 3。这个机制称为<strong data-nodeid=\"26190\"\n                        >快速重传</strong\n                      >。这和超时重发不同，是一种催促的机制。\n                    </p>\n                    <p data-nodeid=\"26085\">\n                      为了不让发送方误以为段 3\n                      已经收到了，在快速重传的情况下，接收方即便收到发来的段\n                      4，依然会发段 3 的 ACK（不发段 4 的 ACK），直到发送方把段\n                      3 重传。\n                    </p>\n                    <h4 data-nodeid=\"26086\">思考：窗口大小的单位是？</h4>\n                    <p data-nodeid=\"26087\">\n                      请你思考另一个问题，窗口大小的单位是多少呢？在上面所有的图片中，窗口大小是\n                      TCP 段的数量。<strong data-nodeid=\"26198\"\n                        >实际操作中，每个 TCP\n                        段的大小不同，限制数量会让接收方的缓冲区不好操作，因此实际操作中窗口大小单位是字节数</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"26088\">流速控制</h3>\n                    <p data-nodeid=\"26089\">\n                      <strong data-nodeid=\"26204\"\n                        >发送、接收窗口的大小可以用来控制 TCP 协议的流速</strong\n                      >。窗口越大，同时可以发送、接收的数据就越多，支持的吞吐量也就越大。当然，窗口越大，如果数据发生错误，损失也就越大，因为需要重传越多的数据。\n                    </p>\n                    <p data-nodeid=\"26090\">\n                      举个例子：我们用 RTT 表示 Round Trip\n                      Time，就是消息一去一回的时间。\n                    </p>\n                    <p data-nodeid=\"26091\">\n                      假设 RTT = 1ms，带宽是 1mb/s。如果窗口大小为 1kb，那么 1ms\n                      可以发送一个 1kb 的数据（含 TCP 头），1s 就可以发送 1mb\n                      的数据，刚好可以将带宽用满。如果 RTT 再慢一些，比如 RTT =\n                      10ms，那么这样的设计就只能用完 1/10 的带宽。\n                      当然你可以提高窗口大小提高吞吐量，但是实际的模型会比这个复杂，因为还存在重传、快速重传、丢包等因素。\n                    </p>\n                    <p data-nodeid=\"26092\">\n                      而实际操作中，也不可以真的把带宽用完，所以最终我们会使用折中的方案，在延迟、丢包率、吞吐量中进行选择，毕竟鱼和熊掌不可兼得。\n                    </p>\n                    <h3 data-nodeid=\"26093\">总结</h3>\n                    <p data-nodeid=\"26094\">\n                      为了提高传输速率，TCP\n                      协议选择将多个段同时发送，为了让这些段不至于被接收方拒绝服务，在发送前，双方要协商好发送的速率。但是我们不可能完全确定网速，所以协商的方式，就变成确定窗口大小。\n                    </p>\n                    <p data-nodeid=\"26095\">\n                      有了窗口，发送方利用滑动窗口算法发送消息；接收方构造缓冲区接收消息，并给发送方\n                      ACK。滑动窗口的实现只需要数组和少量的指针即可，是一个非常高效的算法。像这种算法，简单又实用，比如求一个数组中最大的连续\n                      k\n                      项和，就可以使用滑动窗口算法。如果你对这个问题感兴趣，不妨用你最熟悉的语言尝试解决一下。\n                    </p>\n                    <p data-nodeid=\"26096\">\n                      那么，现在你可以尝试来回答本讲关联的面试题目：<strong\n                        data-nodeid=\"26216\"\n                        >滑动窗口和流速控制是怎么回事</strong\n                      >？\n                    </p>\n                    <p data-nodeid=\"26097\">\n                      【<strong data-nodeid=\"26226\">解析</strong>】<strong\n                        data-nodeid=\"26227\"\n                        >滑动窗口是 TCP 协议控制可靠性的核心</strong\n                      >。发送方将数据拆包，变成多个分组。然后将数据放入一个拥有滑动窗口的数组，依次发出，仍然遵循先入先出（FIFO）的顺序，但是窗口中的分组会一次性发送。窗口中序号最小的分组如果收到\n                      ACK，窗口就会发生滑动；如果最小序号的分组长时间没有收到\n                      ACK，就会触发整个窗口的数据重新发送。\n                    </p>\n                    <p data-nodeid=\"26098\">\n                      另一方面，在多次传输中，网络的平均延迟往往是相对固定的，这样\n                      TCP\n                      协议可以通过双方协商窗口大小控制流速。补充下，上面我们说的分组和\n                      TCP 段是一个意思。\n                    </p>\n                    <h3 data-nodeid=\"26099\">思考题</h3>\n                    <p data-nodeid=\"26100\">\n                      <strong data-nodeid=\"26234\"\n                        >最后，再给你出一道思考题：既然发送方有窗口，那么接收方也需要有窗口吗</strong\n                      >？\n                    </p>\n                    <p data-nodeid=\"26101\">\n                      我建议你不要查资料，可以把你的想法写在留言区，我们一起讨论。如果你觉得今天的内容对你有所启发，欢迎分享给身边的朋友。期待看到你的思考！\n                    </p>\n                    <p data-nodeid=\"27445\" class=\"te-preview-highlight\">\n                      这一讲就到这里，发现求知的乐趣，我是林䭽，感谢你学习本次课程，下一讲我们将学习“05&nbsp;\n                      | UDP 协议： TCP 协议和 UDP 协议的优势和劣势？”。\n                    </p>\n            "}