{"title":"32 | 案例：如何保证微服务实例资源安全？","context":"\n                    <p data-nodeid=\"60633\" class=\"\">\n                      今天我和你分享的是如何保证微服务实例资源安全的案例。\n                    </p>\n                    <p data-nodeid=\"60634\">\n                      在上一课时中，我们实践了如何使用 Go 搭建一个基本的<strong\n                        data-nodeid=\"60717\"\n                        >授权服务器</strong\n                      >，它的主要功能是颁发访问令牌和验证访问令牌的有效性。在统一认证与授权服务体系中，还存在<strong\n                        data-nodeid=\"60718\"\n                        >资源服务器</strong\n                      >对用户数据进行保护，它允许携带有效访问令牌的客户端请求用户资源。\n                    </p>\n                    <p data-nodeid=\"60635\">\n                      在本课时，我们将基于 Go\n                      实现一个基本的资源服务器，让其为用户数据保驾护航。\n                    </p>\n                    <h3 data-nodeid=\"60636\">整体结构</h3>\n                    <p data-nodeid=\"60637\">\n                      资源服务器会在请求进入具体的资源端点之前，对请求中携带的访问令牌进行校验，比较常用的做法是<strong\n                        data-nodeid=\"60726\"\n                        >采用拦截器的方式</strong\n                      >实现，如下图所示：\n                    </p>\n                    <p data-nodeid=\"61555\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5F/77/Ciqc1F-JYciAXOBBAACNYK3Blio069.png\"\n                        alt=\"图片11.png\"\n                        data-nodeid=\"61558\"\n                      />\n                    </p>\n\n                    <div data-nodeid=\"61179\">\n                      <p style=\"text-align: center\">资源服务器中请求流程图</p>\n                    </div>\n\n                    <p data-nodeid=\"60640\">\n                      请求在进入具体的资源端点之前，会至少经过<strong\n                        data-nodeid=\"60739\"\n                        >令牌认证拦截器</strong\n                      >和<strong data-nodeid=\"60740\">权限检查拦截器</strong\n                      >这两个拦截器，以及其他发挥重要功能的拦截器，比如限流拦截器等。令牌认证拦截器会解析请求中携带的访问令牌，请求授权服务器验证访问令牌的有效性，明确当前请求的客户端和用户信息，并把这些信息写入请求上下文中，如果访问令牌无效，将会拒绝请求，返回认证错误。权限检查拦截器会按照预设的权限规则对请求上下文中的客户端和用户信息进行权限检查，如果权限不足也会拒绝访问，返回鉴权错误。\n                    </p>\n                    <p data-nodeid=\"60641\">\n                      对此我们可以将资源服务器设计为以下几个模块，如图所示：\n                    </p>\n                    <p data-nodeid=\"62481\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/5F/82/CgqCHl-JYdCAXd-5AACLyd4sStg095.png\"\n                        alt=\"图片12.png\"\n                        data-nodeid=\"62484\"\n                      />\n                    </p>\n\n                    <div data-nodeid=\"62105\">\n                      <p style=\"text-align: center\">资源服务器模块组成图</p>\n                    </div>\n\n                    <ul data-nodeid=\"60644\">\n                      <li data-nodeid=\"60645\">\n                        <p data-nodeid=\"60646\">\n                          <strong data-nodeid=\"60749\"\n                            >OAuth2AuthorizationContext（认证上下文处理器）</strong\n                          >，负责从请求解析出访问令牌，委托\n                          ResourceServerTokenService\n                          验证访问令牌的有效性，获取令牌对应的客户端和用户信息。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"60647\">\n                        <p data-nodeid=\"60648\">\n                          <strong data-nodeid=\"60754\"\n                            >OAuth2AuthorizationMiddleware（认证中间件）</strong\n                          >，检查请求上下文是否存在客户端和用户信息。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"60649\">\n                        <p data-nodeid=\"60650\">\n                          <strong data-nodeid=\"60759\"\n                            >AuthorityAuthorizationMiddleware（权限检查中间件）</strong\n                          >，从请求上下文中获取客户端和用户信息，并根据预设的权限规则对请求的客户端和用户信息进行鉴权。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"60651\">\n                        <p data-nodeid=\"60652\">\n                          <strong data-nodeid=\"60764\"\n                            >ResourceServerTokenService（资源服务器令牌服务）</strong\n                          >，帮助资源服务器检验访问令牌的有效性以及获取访问令牌绑定的客户端和用户信息。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"60653\">\n                      接下来，我们就来详细讲解一下如何实现资源服务器。\n                    </p>\n                    <h3 data-nodeid=\"60654\">认证上下文处理器</h3>\n                    <p data-nodeid=\"60655\">\n                      客户端在请求资源服务器中被保护的端点时，默认会把访问令牌放到\n                      Authorization 请求头，然后资源服务器会在请求进入 Endpoint\n                      之前，从 Authorization\n                      请求头中获取访问令牌用于验证用户身份。\n                    </p>\n                    <p data-nodeid=\"60656\">\n                      OAuth2AuthorizationContext（认证上下文处理器）用于从\n                      Authorization 请求头解析出访问令牌，并使用\n                      ResourceServerTokenService\n                      根据访问令牌获取用户信息和客户端信息。构建\n                      OAuth2AuthorizationContext 的代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">makeOAuth2AuthorizationContext</span><span class=\"hljs-params\">(tokenService service. ResourceServerTokenService, logger log.Logger)</span> <span class=\"hljs-title\">kithttp</span>.<span class=\"hljs-title\">RequestFunc</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, r *http.Request)</span> <span class=\"hljs-title\">context</span>.<span class=\"hljs-title\">Context</span></span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-comment\">// 获取访问令牌</span>\n</div></li><li><div class=\"code-word\">\t\taccessTokenValue := r.Header.Get(<span class=\"hljs-string\">\"Authorization\"</span>)\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">var</span> err error\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">if</span> accessTokenValue != <span class=\"hljs-string\">\"\"</span>{\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-comment\">// 获取令牌对应的用户信息和客户端信息</span>\n</div></li><li><div class=\"code-word\">\t\t\toauth2Details, err := tokenService.GetOAuth2DetailsByAccessToken(accessTokenValue)\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\t\t\t<span class=\"hljs-keyword\">return</span> context.WithValue(ctx, endpoint.OAuth2ErrorKey, err)\n</div></li><li><div class=\"code-word\">\t\t\t}\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">return</span> context.WithValue(ctx, endpoint.OAuth2DetailsKey, oauth2Details)\n</div></li><li><div class=\"code-word\">\t\t}<span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">\t\t\terr = ErrorTokenRequest\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> context.WithValue(ctx, endpoint.OAuth2ErrorKey, err)\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60658\">\n                      在上述代码中，如果 Authorization\n                      请求头不存在访问令牌或者访问令牌无效，将在 context\n                      中设置令牌无效的错误信息。接着OAuth2AuthorizationContext\n                      会使用 ResourceServerTokenService\n                      根据访问令牌解析出令牌对应的用户信息和客户端信息，如果解析成功，说明当前请求的客户端已经得到了用户的授权。最后再把用户信息和客户端信息放入\n                      context 中，便于接下来的认证与鉴权使用。\n                    </p>\n                    <h3 data-nodeid=\"60659\">认证中间件</h3>\n                    <p data-nodeid=\"60660\">\n                      在请求正式进入 Endpoint 之前，我们需要验证请求上下文\n                      context 中是否存在\n                      OAuth2Details，是否存在客户端和用户信息。对此，我们对每个需要进行认证的端点添加认证中间件（OAuth2AuthorizationMiddleware），代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MakeClientAuthorizationMiddleware</span><span class=\"hljs-params\">(logger log.Logger)</span> <span class=\"hljs-title\">endpoint</span>.<span class=\"hljs-title\">Middleware</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(next endpoint.Endpoint)</span> <span class=\"hljs-title\">endpoint</span>.<span class=\"hljs-title\">Endpoint</span></span> {\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, request <span class=\"hljs-keyword\">interface</span>{})</span> <span class=\"hljs-params\">(response <span class=\"hljs-keyword\">interface</span>{}, err error)</span></span> {\n</div></li><li><div class=\"code-word\">         <span class=\"hljs-comment\">// 检查是否出现认证错误</span>\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">if</span> err, ok := ctx.Value(OAuth2ErrorKey).(error); ok{\n</div></li><li><div class=\"code-word\">\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t\t\t}\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-comment\">// 检查请求上下文中是否存在客户端和用户信息</span>\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">if</span> _, ok := ctx.Value(OAuth2ClientDetailsKey).(*model.ClientDetails); !ok{\n</div></li><li><div class=\"code-word\">\t\t\t\t<span class=\"hljs-keyword\">return</span>  <span class=\"hljs-literal\">nil</span>, ErrInvalidClientRequest\n</div></li><li><div class=\"code-word\">\t\t\t}\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">return</span> next(ctx, request)\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60662\">\n                      在上述代码中，在请求进入业务处理的 Endpoint\n                      之前，OAuth2AuthorizationMiddleware 认证中间件会检查\n                      context 中的OAuth2Details\n                      是否存在，如果不存在，说明请求没有经过认证，请求将会被拒绝访问。如果存在，说明请求已经携带了有效的访问令牌，将被允许通过该中间件。\n                    </p>\n                    <h3 data-nodeid=\"60663\">权限检查中间件</h3>\n                    <p data-nodeid=\"60664\">\n                      访问资源服务器受保护资源的端点时，不仅需要请求中携带有效的访问令牌，还需要访问令牌绑定的客户端和用户具备足够的权限。\n                    </p>\n                    <p data-nodeid=\"60665\">\n                      在\n                      OAuth2AuthorizationContext（认证上下文处理器）中我们获取到了用户信息和客户端信息，可以根据它们具备的权限列表和预设的权限规则，判断本次请求是否具备访问端点的权限。对此我们需要添加\n                      AuthorityAuthorizationMiddleware（权限检查中间件），它会根据预设的权限规则，对访问令牌绑定的用户权限进行检查，只有具备足够权限的用户请求，才能够进入\n                      Endpoint 中执行业务逻辑。构建\n                      AuthorityAuthorizationMiddleware的代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">MakeAuthorityAuthorizationMiddleware</span><span class=\"hljs-params\">(authority <span class=\"hljs-keyword\">string</span>, logger log.Logger)</span> <span class=\"hljs-title\">endpoint</span>.<span class=\"hljs-title\">Middleware</span></span>  {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(next endpoint.Endpoint)</span> <span class=\"hljs-title\">endpoint</span>.<span class=\"hljs-title\">Endpoint</span></span> {\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(ctx context.Context, request <span class=\"hljs-keyword\">interface</span>{})</span> <span class=\"hljs-params\">(response <span class=\"hljs-keyword\">interface</span>{}, err error)</span></span> {\n</div></li><li><div class=\"code-word\">         <span class=\"hljs-comment\">// 检查是否出现认证错误</span>\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">if</span> err, ok := ctx.Value(OAuth2ErrorKey).(error); ok{\n</div></li><li><div class=\"code-word\">\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t\t\t}\n</div></li><li><div class=\"code-word\">\t\t   <span class=\"hljs-comment\">// 检查是否具备预设权限</span>\n</div></li><li><div class=\"code-word\">\t\t\t<span class=\"hljs-keyword\">if</span> details, ok := ctx.Value(OAuth2DetailsKey).(*model.OAuth2Details); !ok{\n</div></li><li><div class=\"code-word\">\t\t\t\t<span class=\"hljs-keyword\">return</span>  <span class=\"hljs-literal\">nil</span>, ErrInvalidClientRequest\n</div></li><li><div class=\"code-word\">\t\t\t}<span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">\t\t\t\t<span class=\"hljs-keyword\">for</span> _, value := <span class=\"hljs-keyword\">range</span> details.User.Authorities{\n</div></li><li><div class=\"code-word\">\t\t\t\t\t<span class=\"hljs-keyword\">if</span> value == authority{\n</div></li><li><div class=\"code-word\">\t\t\t\t\t\t<span class=\"hljs-keyword\">return</span> next(ctx, request)\n</div></li><li><div class=\"code-word\">\t\t\t\t\t}\n</div></li><li><div class=\"code-word\">\t\t\t\t}\n</div></li><li><div class=\"code-word\">\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, ErrNotPermit\n</div></li><li><div class=\"code-word\">\t\t\t}\n</div></li><li><div class=\"code-word\">\t\t}\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60667\">\n                      在上述代码中，我们先从 context\n                      中获取到访问令牌中解析出的用户信息和客户端信息，然后对用户的权限进行检查，只有具备预设权限的用户才能继续访问接口，否则返回权限不足的错误。此处实现的权限检查中间件判断逻辑比较单一，用户只需具备对应的权限即可通过判定，但在实际生产环境中，我们可以组合更加复杂的权限判断逻辑以满足业务需求。\n                    </p>\n                    <h3 data-nodeid=\"60668\">资源服务器令牌服务</h3>\n                    <p data-nodeid=\"60669\">\n                      ResourceServerTokenService（资源服务器令牌服务）的作用是资源服务器验证访问令牌的有效性和解析出令牌绑定的客户端和用户信息，它提供以下接口：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> ResourceServerTokenService <span class=\"hljs-keyword\">interface</span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 根据访问令牌获取对应的用户信息和客户端信息</span>\n</div></li><li><div class=\"code-word\">\tGetOAuth2DetailsByAccessToken(tokenValue <span class=\"hljs-keyword\">string</span>) (*OAuth2Details, error)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60671\">\n                      一般来说，资源服务器都是通过远程调用的方式，访问授权服务器的\n                      oauth/check_token\n                      端点来验证访问令牌的有效性。但是由于访问令牌的类型为\n                      JWT，令牌中的信息是自包含的，所以我们在资源服务器中就可以直接验证访问令牌，并从令牌中解析出用户信息和客户端信息，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(tokenService *DefaultTokenService)</span> <span class=\"hljs-title\">GetOAuth2DetailsByAccessToken</span><span class=\"hljs-params\">(tokenValue <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(*OAuth2Details, error)</span></span> {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-comment\">// 借助 JwtTokenStore 从令牌中解析出信息</span>\n</div></li><li><div class=\"code-word\">\taccessToken, err := tokenService.tokenStore.ReadAccessToken(tokenValue)\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span>{\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> accessToken.IsExpired(){\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, ErrExpiredToken\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">return</span> tokenService.tokenStore.ReadOAuth2Details(tokenValue)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60673\">\n                      在上述代码中，我们就是直接通过 JwtTokenStore 从 JWT\n                      样式的令牌中解析出令牌绑定的客户端和用户信息。\n                    </p>\n                    <p data-nodeid=\"60674\">\n                      接下来我们通过构造一些资源端点来验证资源服务器保护受限资源的能力。\n                    </p>\n                    <h3 data-nodeid=\"60675\">访问受限资源端点</h3>\n                    <p data-nodeid=\"60676\">\n                      <strong data-nodeid=\"60789\"\n                        >受保护资源是资源服务器中被保护的用户数据</strong\n                      >。请求必须持有访问令牌，且访问令牌绑定的用户具备足够的权限才允许访问资源端点，也就是说在请求到达受保护资源的端点前，需要被认证中间件和权限检查中间件对请求中携带的访问令牌进行校验。\n                    </p>\n                    <p data-nodeid=\"60677\">我们分别构造以下 3 个端点：</p>\n                    <ul data-nodeid=\"60678\">\n                      <li data-nodeid=\"60679\">\n                        <p data-nodeid=\"60680\">/index，任意请求可访问；</p>\n                      </li>\n                      <li data-nodeid=\"60681\">\n                        <p data-nodeid=\"60682\">\n                          /sample，携带有效访问令牌的请求可访问；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"60683\">\n                        <p data-nodeid=\"60684\">\n                          /admin，携带有效访问令牌，且访问令牌绑定的用户具备\n                          Admin 权限的请求可访问。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"60685\">\n                      在 transport\n                      层，为了保证认证中间件和权限检查中间件能够获取访问令牌绑定的用户和客户端信息，在请求处理前我们添加了OAuth2AuthorizationContext（认证上下文处理器）从请求头中解析并验证token，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 添加认证上下文处理器</span>\n</div></li><li><div class=\"code-word\">oauth2AuthorizationOptions := []kithttp.ServerOption{\n</div></li><li><div class=\"code-word\">\t\tkithttp.ServerBefore(makeOAuth2AuthorizationContext(tokenService, logger)),\n</div></li><li><div class=\"code-word\">\t\tkithttp.ServerErrorHandler(transport.NewLogErrorHandler(logger)),\n</div></li><li><div class=\"code-word\">\t\tkithttp.ServerErrorEncoder(encodeError),\n</div></li><li><div class=\"code-word\">\t}\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-comment\">// index 端点</span>\n</div></li><li><div class=\"code-word\">\tr.Methods(<span class=\"hljs-string\">\"Get\"</span>).Path(<span class=\"hljs-string\">\"/index\"</span>).Handler(kithttp.NewServer(\n</div></li><li><div class=\"code-word\">\t\tendpoints.IndexEndpoint,\n</div></li><li><div class=\"code-word\">\t\tdecodeSimpleRequest,\n</div></li><li><div class=\"code-word\">\t\tencodeJsonResponse,\n</div></li><li><div class=\"code-word\">\t\toauth2AuthorizationOptions...,\n</div></li><li><div class=\"code-word\">\t))\n</div></li><li><div class=\"code-word\">   ...其他端点\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60687\">\n                      接着在 main 函数中，为需要进行认证和权限检查的\n                      SampleEnpoint 和 AdminEndpoint\n                      添加认证中间件和权限检查中间件，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"go\"><ol><li><div class=\"code-word\"> sampleEndpoint := endpoint.MakeSampleEndpoint(srv)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 添加认证中间件</span>\n</div></li><li><div class=\"code-word\">  sampleEndpoint = endpoint.MakeOAuth2AuthorizationMiddleware(config.KitLogger)(sampleEndpoint)\n</div></li><li><div class=\"code-word\">  adminEndpoint := endpoint.MakeAdminEndpoint(srv)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 添加认证中间件和权限检查中间件 </span>\n</div></li><li><div class=\"code-word\">  adminEndpoint = endpoint.MakeOAuth2AuthorizationMiddleware(config.KitLogger)(adminEndpoint)\n</div></li><li><div class=\"code-word\">  adminEndpoint = endpoint.MakeAuthorityAuthorizationMiddleware(<span class=\"hljs-string\">\"Admin\"</span>, config.KitLogger)(adminEndpoint)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60689\">\n                      在上述代码中，我们可以发现 SampleEndpoint 被\n                      OAuth2AuthorizationMiddleware（认证中间件）装饰，而AdminEndpoint被\n                      OAuth2AuthorizationMiddleware（认证中间件）和\n                      AuthorityAuthorizationMiddleware（权限检查中间件）同时装饰。\n                    </p>\n                    <p data-nodeid=\"60690\">\n                      接下来我们在授权服务器内内置两名用户信息：①用户名\n                      aoho1、密码 123456，权限为 sample；②用户名 aoho2、密码\n                      123456，权限为 admin。启动资源服务器，直接访问 /index\n                      端点，可以直接获取到请求结果，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"result\"</span>: <span class=\"hljs-string\">\"hello, wecome to index\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"error\"</span>: <span class=\"hljs-string\">\"\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60692\">\n                      然后我们直接访问 /sample\n                      端点，将会获取到以下拒绝访问的错误：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"error\"</span>: <span class=\"hljs-string\">\"invalid request token\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60694\">\n                      对此，我们需要使用 aoho1\n                      用户的用户名和密码请求授权服务器获取对应的访问令牌。携带访问令牌再次请求\n                      /sample 端点，请求的 curl 命令如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">curl -X GET \\\n</div></li><li><div class=\"code-word\">  http://localhost:10099/simple \\\n</div></li><li><div class=\"code-word\">  -H 'Authorization: ...' \\\n</div></li><li><div class=\"code-word\">  -H 'Host: localhost:10099' \\\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60696\">\n                      我们在 Authorization\n                      请求头中携带了访问令牌，即可获取到期望的请求数据，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"result\"</span>: <span class=\"hljs-string\">\"hello aoho1, welcome to sample\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"error\"</span>: <span class=\"hljs-string\">\"\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60698\">\n                      当我们以同样的访问令牌，即 aoho1 用户授权的访问令牌请求\n                      /admin 端点时将会返回权限不足的错误，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"error\"</span>: <span class=\"hljs-string\">\"not permit\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60700\">\n                      对此，我们需要使用 aoho2 用户授权访问令牌请求 /admin\n                      端点。从授权服务器获取到 aoho2\n                      用户授权的访问令牌后，携带其访问令牌再次访问 /admin\n                      端点，即可获取到如下预期的结果：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"result\"</span>: <span class=\"hljs-string\">\"hello aoho2, welcome to admin\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"error\"</span>: <span class=\"hljs-string\">\"\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"60702\">\n                      通过组合认证中间件和权限检查中间件，我们可以检查请求中是否携带合法的访问令牌以及访问令牌绑定的用户是否具备足够的访问权限，这样就有效地在接口层级保护数据资源了。\n                    </p>\n                    <h3 data-nodeid=\"60703\">小结</h3>\n                    <p data-nodeid=\"60704\">\n                      在统一认证与授权服务体系中，资源服务器的主要职责为<strong\n                        data-nodeid=\"60810\"\n                        >保护用户保存在系统中的数据，允许携带有效访问令牌的客户端请求资源，拒绝无授权的请求访问</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"60705\">\n                      在本课时，我们基于 Go\n                      实现了一个基本的资源服务器。它首先通过认证上下文处理器从请求中解析出访问令牌，并借助资源服务器令牌服务验证访问令牌的有效性；接着再使用认证中间件和权限检查中间件对令牌绑定的客户端和用户信息进行认证和权限检查，允许携带有效访问令牌和满足预设权限的客户端请求获取到数据。希望通过本模块这4\n                      个课时的学习，能帮助你充分了解如何构建微服务中统一认证与授权体系。\n                    </p>\n                    <p data-nodeid=\"60706\" class=\"\">\n                      最后，对于如何实践统一认证与授权服务体系，你还有什么其他见解呢？欢迎在留言区与我分享。\n                    </p>\n            "}