{"title":"第08讲：为什么说函数是 JavaScript 的一等公民？","context":"\n                    <p data-nodeid=\"1361\" class=\"\">\n                      <strong data-nodeid=\"1526\"\n                        >数据类型与函数是很多高级语言中最重要的两个概念</strong\n                      >，前者用来存储数据，后者用来存储代码。JavaScript\n                      中的函数相对于数据类型而言更加复杂，它可以有属性，也可以被赋值给一个变量，还可以作为参数被传递......正是这些强大特性让它成了\n                      JavaScript 的“一等公民”。\n                    </p>\n                    <p data-nodeid=\"1362\">\n                      下面我们就来详细了解函数的重要特性。\n                    </p>\n                    <h3 data-nodeid=\"1363\">this 关键字</h3>\n                    <p data-nodeid=\"1364\">\n                      什么是 this？this 是 JavaScript\n                      的一个关键字，一般指向<strong data-nodeid=\"1534\"\n                        >调用它的对象</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1365\">\n                      这句话其实有两层意思，首先 this\n                      指向的应该是一个对象，更具体地说是函数执行的“上下文对象”。其次这个对象指向的是“调用它”的对象，如果调用它的不是对象或对象不存在，则会指向全局对象（严格模式下为\n                      undefined）。\n                    </p>\n                    <p data-nodeid=\"1366\">下面举几个例子来进行说明。</p>\n                    <ul data-nodeid=\"1367\">\n                      <li data-nodeid=\"1368\">\n                        <p data-nodeid=\"1369\">\n                          当代码 1 执行 fn() 函数时，实际上就是通过对象 o\n                          来调用的，所以 this 指向对象 o。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1370\">\n                        <p data-nodeid=\"1371\">\n                          代码 2 也是同样的道理，通过实例 a 来调用，this\n                          指向类实例 a。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1372\">\n                        <p data-nodeid=\"1373\">\n                          代码 3 则可以看成是通过全局对象来调用，this\n                          会指向全局对象（需要注意的是，严格模式下会是\n                          undefined）。\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 代码 1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> o = {\n</div></li><li><div class=\"code-word\">  fn() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">o.fn() <span class=\"hljs-comment\">// o</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 代码 2</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> </span>{\n</div></li><li><div class=\"code-word\">  fn() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-keyword\">new</span> A() \n</div></li><li><div class=\"code-word\">a.fn()<span class=\"hljs-comment\">// a</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 代码 3</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">fn() <span class=\"hljs-comment\">// 浏览器：Window；Node.js：global</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1375\">\n                      是不是觉得 this\n                      的用法很简单？别着急，我们再来看看其他例子以加深理解。\n                    </p>\n                    <p data-nodeid=\"1376\">\n                      （1）如果在函数 fn2() 中调用函数 fn()，那么当调用函数\n                      fn2() 的时候，函数 fn() 的 this 指向哪里呢？\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\"></span>) </span>{fn()}\n</div></li><li><div class=\"code-word\">fn2() <span class=\"hljs-comment\">// ?</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1378\">\n                      <strong data-nodeid=\"1546\"\n                        >由于没有找到调用 fn 的对象，所以 this\n                        会指向全局对象</strong\n                      >，答案就是 window（Node.js 下是 global）。\n                    </p>\n                    <p data-nodeid=\"1379\">\n                      （2）再把这段代码稍稍改变一下，让函数 fn2() 作为对象 obj\n                      的属性，通过 obj 属性来调用 fn2，此时函数 fn() 的 this\n                      指向哪里呢？\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\"></span>) </span>{fn()}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> obj = {fn2}\n</div></li><li><div class=\"code-word\">obj.fn2() <span class=\"hljs-comment\">// ?</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1381\">\n                      这里需要注意，调用函数 fn() 的是函数 fn2() 而不是\n                      obj。虽然 fn2() 作为 obj 的属性调用，但\n                      <strong data-nodeid=\"1555\"\n                        >fn2()中的 this 指向并不会传递给函数 fn()，</strong\n                      >\n                      所以答案也是 window（Node.js 下是 global）。<br />\n                      （3）对象 dx 拥有数组属性 arr，在属性 arr 的 forEach\n                      回调函数中输出 this，指向的是什么呢？\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> dx = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">arr</span>: [<span class=\"hljs-number\">1</span>]\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">dx.arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)}) <span class=\"hljs-comment\">// ?</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1383\">\n                      按照之前的说法，很多同学可能会觉得输出的应该是对象 dx\n                      的属性 arr 数组。但其实仍然是全局对象。\n                    </p>\n                    <p data-nodeid=\"1384\">\n                      如果你看过 forEach\n                      的说明文档便会知道，它有两个参数，第一个是回调函数，第二个是\n                      this\n                      指向的对象，这里只传入了回调函数，第二个参数没有传入，默认为\n                      undefined，所以正确答案应该是输出全局对象。\n                    </p>\n                    <p data-nodeid=\"1385\">\n                      类似的，需要传入 this\n                      指向的函数还有：every()、find()、findIndex()、map()、some()，在使用的时候需要特别注意。\n                    </p>\n                    <p data-nodeid=\"1386\">\n                      （4）前面提到通过类实例来调用函数时，this\n                      会指向实例。那么如果像下面的代码，创建一个 fun\n                      变量来引用实例 b 的 fn() 函数，当调用 fun() 的时候 this\n                      会指向什么呢？\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> </span>{\n</div></li><li><div class=\"code-word\">  fn() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> B()\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> fun = b.fn\n</div></li><li><div class=\"code-word\">fun() <span class=\"hljs-comment\">// ?</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1388\">\n                      这道题你可能会很容易回答出来：fun 是在全局下调用的，所以\n                      this\n                      应该指向的是全局对象。这个思路没有没问题，但是这里有个隐藏的知识点。那就是\n                      ES6 下的 class\n                      内部默认采用的是严格模式，实际上面代码的类定义部分可以理解为下面的形式。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> </span>{\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">  'use strict'</span>;\n</div></li><li><div class=\"code-word\">  fn() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1390\">\n                      而严格模式下不会指定全局对象为默认调用对象，所以答案是\n                      undefined。\n                    </p>\n                    <p data-nodeid=\"1391\">\n                      （5）ES6 新加入的箭头函数不会创建自己的\n                      this，它只会从自己的作用域链的上一层继承\n                      this。可以简单地理解为<strong data-nodeid=\"1567\"\n                        >箭头函数的 this 继承自上层的 this</strong\n                      >，但在全局环境下定义仍会指向全局对象。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arrow = {<span class=\"hljs-attr\">fn</span>: <span class=\"hljs-function\">() =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)\n</div></li><li><div class=\"code-word\">}}\n</div></li><li><div class=\"code-word\">arrow.fn() <span class=\"hljs-comment\">// ?</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1393\">\n                      所以虽然通过对象 arrow 来调用箭头函数 fn()，那么 this\n                      指向不是 arrow 对象，而是全局对象。如果要让 fn()\n                      箭头函数指向 arrow\n                      对象，我们还需要再加一层函数，让箭头函数的上层 this 指向\n                      arrow 对象。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> arrow = {\n</div></li><li><div class=\"code-word\">  fn() {\n</div></li><li><div class=\"code-word\">  &nbsp; <span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)\n</div></li><li><div class=\"code-word\">&nbsp;   a()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">arrow.fn()  <span class=\"hljs-comment\">// arrow</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1395\">\n                      （6）前面提到 this 指向的要么是调用它的对象，要么是\n                      undefined，那么如果将 this\n                      指向一个基础类型的数据会发生什么呢？\n                    </p>\n                    <p data-nodeid=\"1396\">\n                      比如下面的代码将 this 指向数字 0，打印出的 this 是什么呢？\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">[<span class=\"hljs-number\">0</span>].forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>)}, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// ?</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1398\">\n                      结合上一讲关于数据类型的知识，我们知道基础类型也可以转换成对应的引用对象。所以这里\n                      this 指向的是一个值为 0 的 Number 类型对象。\n                    </p>\n                    <p data-nodeid=\"1399\">\n                      （7）改变 this 指向的常见 3 种方式有 bind、call 和\n                      apply。call 和 apply 用法功能基本类似，都是通过传入 this\n                      指向的对象以及参数来调用函数。区别在于传参方式，前者为逐个参数传递，后者将参数放入一个数组，以数组的形式传递。bind\n                      有些特殊，它不但可以绑定 this\n                      指向也可以绑定函数参数并返回一个新的函数，当 c\n                      调用新的函数时，绑定之后的 this 或参数将无法再被改变。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getName</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.name)}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> b = getName.bind({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'bind'</span>})\n</div></li><li><div class=\"code-word\">b()\n</div></li><li><div class=\"code-word\">getName.call({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'call'</span>})\n</div></li><li><div class=\"code-word\">getName.apply({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'apply'</span>})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1401\">\n                      由于 this\n                      指向的不确定性，所以很容易在调用时发生意想不到的情况。在编写代码时，应尽量避免使用\n                      this，比如可以写成纯函数的形式，也可以通过参数来传递上下文对象。实在要使用\n                      this 的话，可以考虑使用 bind 等方式将其绑定。\n                    </p>\n                    <h3 data-nodeid=\"1402\">补充 1：箭头函数</h3>\n                    <p data-nodeid=\"1403\">\n                      箭头函数和普通函数相比，有以下几个区别，在开发中应特别注意：\n                    </p>\n                    <ul data-nodeid=\"1404\">\n                      <li data-nodeid=\"1405\">\n                        <p data-nodeid=\"1406\">\n                          不绑定 arguments 对象，也就是说在箭头函数内访问\n                          arguments 对象会报错；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1407\">\n                        <p data-nodeid=\"1408\">\n                          不能用作构造器，也就是说不能通过关键字 new\n                          来创建实例；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1409\">\n                        <p data-nodeid=\"1410\">\n                          默认不会创建 prototype 原型属性；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1411\">\n                        <p data-nodeid=\"1412\">\n                          不能用作 Generator() 函数，不能使用 yeild 关键字。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"1413\">函数的转换</h3>\n                    <p data-nodeid=\"1414\">\n                      在讲函数转化之前，先来看一道题：编写一个 add()\n                      函数，支持对多个参数求和以及多次调用求和。示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">add(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// 1</span>\n</div></li><li><div class=\"code-word\">add(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">// 3</span>\n</div></li><li><div class=\"code-word\">add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>)(<span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// 21</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1416\">\n                      对于不定参数的求和处理比较简单，很容易想到通过 arguments\n                      或者扩展符的方式获取数组形式的参数，然后通过 reduce\n                      累加求和。但如果直接返回结果那么后面的调用肯定会报错，所以每次返回的必须是函数，才能保证可以连续调用。也就是说\n                      add 返回值既是一个可调用的函数又是求和的数值结果。\n                    </p>\n                    <p data-nodeid=\"1417\">\n                      要实现这个要求，我们必须知道函数相关的两个隐式转换函数\n                      toString() 和 valueOf()。toString()\n                      函数会在打印函数的时候调用，比如 console.log、valueOf\n                      会在获取函数原始值时调用，比如加法操作。\n                    </p>\n                    <p data-nodeid=\"1418\">\n                      具体代码实现如下，在 add() 函数内部定义一个 fn()\n                      函数并返回。fn()\n                      函数的主要职能就是拼接参数并返回自身，当调用 toString() 和\n                      valueOf() 函数时对拼接好的参数进行累加求和并返回。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">...args</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">let</span> arr = args\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">...newArgs</span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; arr = [...arr, ...newArgs]\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> fn;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; fn.toString = fn.valueOf = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> acc + <span class=\"hljs-built_in\">parseInt</span>(cur))\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> fn\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n\n                    <h3 data-nodeid=\"1420\">原型</h3>\n                    <p data-nodeid=\"1421\">\n                      原型是 JavaScript\n                      的重要特性之一，可以让对象从其他对象继承功能特性，所以\n                      JavaScript 也被称为“<strong data-nodeid=\"1591\"\n                        >基于原型的语言</strong\n                      >”。\n                    </p>\n                    <p data-nodeid=\"1422\">\n                      严格地说，原型应该是对象的特性，但函数其实也是一种特殊的对象。例如，我们对自定义的函数进行\n                      instanceof Object 操作时，其结果是 true。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{} \n</div></li><li><div class=\"code-word\">fn <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span> <span class=\"hljs-comment\">// true</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1424\">\n                      而且我们为了实现类的特性，更多的是在函数中使用它，所以在函数这一课时中来深入讲解原型。\n                    </p>\n                    <h4 data-nodeid=\"1425\">什么是原型和原型链？</h4>\n                    <p data-nodeid=\"1426\">\n                      简单地理解，原型就是对象的属性，包括<strong\n                        data-nodeid=\"1605\"\n                        >被称为隐式原型的\n                        <strong data-nodeid=\"1604\">proto</strong>\n                        属性和被称为显式原型的 prototype 属性</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1427\">\n                      隐式原型通常在创建实例的时候就会自动指向构造函数的显式原型。例如，在下面的示例代码中，当创建对象\n                      a 时，a 的隐式原型会指向构造函数 Object() 的显式原型。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = {}\n</div></li><li><div class=\"code-word\">a.__proto__ === <span class=\"hljs-built_in\">Object</span>.prototype <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> b= <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>()\n</div></li><li><div class=\"code-word\">b.__proto__ === a.__proto__ <span class=\"hljs-comment\">// true</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1429\">\n                      显式原型是内置函数（比如 Date()\n                      函数）的默认属性，在自定义函数时（箭头函数除外）也会默认生成，生成的显式原型对象只有一个属性\n                      constructor ，该属性指向函数自身。通常配合 new\n                      关键字一起使用，当通过 new\n                      关键字创建函数实例时，会将实例的隐式原型指向构造函数的显式原型。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{} \n</div></li><li><div class=\"code-word\">fn.prototype.constructor === fn <span class=\"hljs-comment\">// true</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1431\">\n                      看到这里，不少同学可能会产生一种错觉，那就是隐式原型必须和显式原型配合使用，这种想法是错误的。\n                    </p>\n                    <p data-nodeid=\"1432\">\n                      下面的代码声明了 parent 和 child 两个对象，其中对象 child\n                      定义了属性 name 和隐式原型\n                      <strong data-nodeid=\"1614\">proto</strong\n                      >，隐式原型指向对象 parent，对象 parent 定义了 code 和\n                      name 两个属性。\n                    </p>\n                    <p data-nodeid=\"1433\">\n                      当打印 child.name 的时候会输出对象 child 的 name\n                      属性值，当打印 child.code 时由于对象 child 没有属性\n                      code，所以会找到原型对象 parent 的属性 code，将\n                      parent.code 的值打印出来。同时可以通过打印结果看到，对象\n                      parent 并没有显式原型属性。如果要区分对象 child\n                      的属性是否继承自原型对象，可以通过 hasOwnProperty()\n                      函数来判断。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> parent = {<span class=\"hljs-attr\">code</span>:<span class=\"hljs-string\">'p'</span>,<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">'parent'</span>}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> child = {<span class=\"hljs-attr\">__proto__</span>: parent, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'child'</span>}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(parent.prototype) <span class=\"hljs-comment\">// undefined</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(child.name) <span class=\"hljs-comment\">// \"child\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(child.code) <span class=\"hljs-comment\">// \"p\"</span>\n</div></li><li><div class=\"code-word\">child.hasOwnProperty(<span class=\"hljs-string\">'name'</span>) <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\">child.hasOwnProperty(<span class=\"hljs-string\">'code'</span>) <span class=\"hljs-comment\">// false</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1435\">\n                      在这个例子中，如果对象 parent 也没有属性\n                      code，那么会继续在对象 parent 的原型对象中寻找属性\n                      code，以此类推，逐个原型对象依次进行查找，直到找到属性\n                      code 或原型对象没有指向时停止。\n                    </p>\n                    <p data-nodeid=\"1436\">\n                      这种类似递归的链式查找机制被称作“原型链”。\n                    </p>\n                    <h4 data-nodeid=\"1437\">new 操作符实现了什么？</h4>\n                    <p data-nodeid=\"1438\">\n                      前面提到显式原型对象在使用 new\n                      关键字的时候会被自动创建。现在再来具体分析通过 new\n                      关键字创建函数实例时到底发生了什么。\n                    </p>\n                    <p data-nodeid=\"1439\">\n                      下面的代码通过 new 关键字创建了一个函数 F() 的实例。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">F</span>(<span class=\"hljs-params\">init</span>) </span>{}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-keyword\">new</span> F(args)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1441\">其中主要包含了 3 个步骤：</p>\n                    <ol data-nodeid=\"1442\">\n                      <li data-nodeid=\"1443\">\n                        <p data-nodeid=\"1444\">\n                          创建一个临时的空对象，为了表述方便，我们命名为\n                          fn，让对象 fn 的隐式原型指向函数 F 的显式原型；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1445\">\n                        <p data-nodeid=\"1446\">\n                          执行函数 F()，将 this 指向对象 fn，并传入参数\n                          args，得到执行结果 result；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1447\">\n                        <p data-nodeid=\"1448\">\n                          判断上一步的执行结果 result，如果 result\n                          为非空对象，则返回 result，否则返回 fn。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1449\">具体可以表述为下面的代码：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-built_in\">Object</span>.create(F.prototype)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> obj = F.apply(fn, args)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> f = obj &amp;&amp; <span class=\"hljs-keyword\">typeof</span> obj === <span class=\"hljs-string\">'object'</span> ? obj : fn;\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"1451\">怎么通过原型链实现多层继承？</h4>\n                    <p data-nodeid=\"1452\">\n                      结合原型链和 new\n                      操作符的相关知识，就可以实现多层继承特性了。下面通过一个简单的例子进行说明。\n                    </p>\n                    <p data-nodeid=\"1453\">\n                      假设构造函数 B() 需要继承构造函数 A()，就可以通过将函数\n                      B() 的显式原型指向一个函数 A() 的实例，然后再对 B\n                      的显式原型进行扩展。那么通过函数 B()\n                      创建的实例，既能访问用函数 B() 的属性 b，也能访问函数 A()\n                      的属性 a，从而实现了多层继承。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">A</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">A.prototype.a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'a'</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">B</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">B.prototype = <span class=\"hljs-keyword\">new</span> A()\n</div></li><li><div class=\"code-word\">B.prototype.b = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'b'</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-keyword\">new</span> B()\n</div></li><li><div class=\"code-word\">c.b() <span class=\"hljs-comment\">// 'b'</span>\n</div></li><li><div class=\"code-word\">c.a() <span class=\"hljs-comment\">// 'a'</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"1455\">补充 2：typeof 和 instanceof</h3>\n                    <p data-nodeid=\"1456\">\n                      <strong data-nodeid=\"1633\">typeof</strong>\n                    </p>\n                    <p data-nodeid=\"1457\">\n                      用来获取一个值的类型，可能的结果有下面几种：\n                    </p>\n                    <table data-nodeid=\"1459\">\n                      <thead data-nodeid=\"1460\">\n                        <tr data-nodeid=\"1461\">\n                          <th data-org-content=\"类型\" data-nodeid=\"1463\">\n                            类型\n                          </th>\n                          <th data-org-content=\"结果\" data-nodeid=\"1464\">\n                            结果\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody data-nodeid=\"1467\">\n                        <tr data-nodeid=\"1468\">\n                          <td data-org-content=\"Undefined\" data-nodeid=\"1469\">\n                            Undefined\n                          </td>\n                          <td data-org-content='\"undefined\"' data-nodeid=\"1470\">\n                            \"undefined\"\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"1471\">\n                          <td data-org-content=\"Boolean\" data-nodeid=\"1472\">\n                            Boolean\n                          </td>\n                          <td data-org-content='\"boolean\"' data-nodeid=\"1473\">\n                            \"boolean\"\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"1474\">\n                          <td data-org-content=\"Number\" data-nodeid=\"1475\">\n                            Number\n                          </td>\n                          <td data-org-content='\"number\"' data-nodeid=\"1476\">\n                            \"number\"\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"1477\">\n                          <td data-org-content=\"BigInt\" data-nodeid=\"1478\">\n                            BigInt\n                          </td>\n                          <td data-org-content='\"bigint\"' data-nodeid=\"1479\">\n                            \"bigint\"\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"1480\">\n                          <td data-org-content=\"String\" data-nodeid=\"1481\">\n                            String\n                          </td>\n                          <td data-org-content='\"string\"' data-nodeid=\"1482\">\n                            \"string\"\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"1483\">\n                          <td data-org-content=\"Symbol\" data-nodeid=\"1484\">\n                            Symbol\n                          </td>\n                          <td data-org-content='\"symbol\"' data-nodeid=\"1485\">\n                            \"symbol\"\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"1486\">\n                          <td data-org-content=\"函数对象\" data-nodeid=\"1487\">\n                            函数对象\n                          </td>\n                          <td data-org-content='\"function\"' data-nodeid=\"1488\">\n                            \"function\"\n                          </td>\n                        </tr>\n                        <tr data-nodeid=\"1489\">\n                          <td\n                            data-org-content=\"其他对象及 null\"\n                            data-nodeid=\"1490\"\n                          >\n                            其他对象及 null\n                          </td>\n                          <td data-org-content='\"object\"' data-nodeid=\"1491\">\n                            \"object\"\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                    <p data-nodeid=\"1492\">\n                      <strong data-nodeid=\"1672\">instanceof</strong>\n                    </p>\n                    <p data-nodeid=\"1493\">\n                      用于检测构造函数的 prototype\n                      属性是否出现在某个实例对象的原型链上。例如，在表达式 left\n                      instanceof right 中，会沿着 left\n                      的原型链查找，看看是否存在 right 的 prototype 对象。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">left.__proto__.__proto__... =?= right.prototype\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"1495\">作用域</h3>\n                    <p data-nodeid=\"1496\">\n                      作用域是指赋值、取值操作的执行范围，通过作用域机制可以有效地防止变量、函数的重复定义，以及控制它们的可访问性。\n                    </p>\n                    <p data-nodeid=\"1497\">\n                      虽然在浏览器端和 Node.js\n                      端作用域的处理有所不同，比如对于全局作用域，浏览器会自动将未主动声明的变量提升到全局作用域，而\n                      Node.js 则需要显式的挂载到 global 对象上。又比如在 ES6\n                      之前，浏览器不提供模块级别的作用域，而 Node.js 的 CommonJS\n                      模块机制就提供了模块级别的作用域。但在类型上，可以分为全局作用域（window/global）、块级作用域（let、const、try/catch）、模块作用域（ES6\n                      Module、CommonJS）及本课时重点讨论的函数作用域。\n                    </p>\n                    <h4 data-nodeid=\"1498\">命名提升</h4>\n                    <p data-nodeid=\"1499\">\n                      对于使用 var\n                      关键字声明的变量以及创建命名函数的时候，JavaScript\n                      在解释执行的时候都会将其声明内容提升到作用域顶部，这种机制称为“<strong\n                        data-nodeid=\"1683\"\n                        >命名提升</strong\n                      >”。\n                    </p>\n                    <p data-nodeid=\"1500\">\n                      变量的命名提升允许我们在同（子）级作用域中，在变量声明之前进行引用，但要注意，得到的是未赋值的变量。而且仅限\n                      var 关键字声明的变量，对于 let 和 const\n                      在定义之前引用会报错。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// undefined</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">console</span>.log(b) <span class=\"hljs-comment\">// 报错</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">2</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1502\">\n                      函数的命名提升则意味着可以在同级作用域或者子级作用域里，在函数定义之前进行调用。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">fn() <span class=\"hljs-comment\">// 2</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1504\">\n                      结合以上两点我们再来看看下面两种函数定义的区别，方式 1\n                      将函数赋值给变量 f；方式 2 定义了一个函数 f()。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 方式1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{...}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 方式2</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{...}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1506\">\n                      两种方式对于调用函数方式以及返回结果而言是没有区别的，但根据命名提升的规则，我们可以得知方式\n                      1 创建了一个匿名函数，让变量 f\n                      指向它，这里会发生变量的命名提升；如果我们在定义函数之前调用会报错，而方式\n                      2 则不会。\n                    </p>\n                    <h4 data-nodeid=\"1507\">闭包</h4>\n                    <p data-nodeid=\"1508\">\n                      在函数内部访问外部函数作用域时就会产生闭包。闭包很有用，因为它允许将函数与其所操作的某些数据（环境）关联起来。这种关联不只是跨作用域引用，也可以实现数据与函数的隔离。\n                    </p>\n                    <p data-nodeid=\"1509\">\n                      比如下面的代码就通过闭包来实现单例模式。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> SingleStudent = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{&nbsp;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Student</span>(<span class=\"hljs-params\"></span>) </span>{}\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">var</span> _student;&nbsp;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (_student) <span class=\"hljs-keyword\">return</span> _student;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; _student = <span class=\"hljs-keyword\">new</span> Student()\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> _student;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">}())\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> SingleStudent()\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> s2 = <span class=\"hljs-keyword\">new</span> SingleStudent()\n</div></li><li><div class=\"code-word\">s === s2 <span class=\"hljs-comment\">// true</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1511\">\n                      函数 SingleStudent 内部通过闭包创建了一个私有变量\n                      _student，这个变量只能通过返回的匿名函数来访问，匿名函数在返回变量时对其进行判断，如果存在则直接返回，不存在则在创建保存后返回。\n                    </p>\n                    <h3 data-nodeid=\"1512\">补充 3：经典笔试题</h3>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++ ) {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-built_in\">console</span>.log( i );\n</div></li><li><div class=\"code-word\">\t}, <span class=\"hljs-number\">1000</span> * i)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1514\">\n                      这是一道作用域相关的经典笔试题，需要实现的功能是每隔 1\n                      秒控制台打印数字 0 到\n                      4。但实际执行效果是每隔一秒打印的数字都是\n                      5，为什么会这样呢？\n                    </p>\n                    <p data-nodeid=\"1515\">\n                      如果把这段代码转换一下，手动对变量 i\n                      进行命名提升，你就会发现 for\n                      循环和打印函数共享了同一个变量 i，这就是问题所在。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> i;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++ ) {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-built_in\">console</span>.log(i);\n</div></li><li><div class=\"code-word\">\t}, <span class=\"hljs-number\">1000</span> * i)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1517\">\n                      要修复这段代码方法也有很多，比如将 var 关键字替换成\n                      let，从而创建块级作用域。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++ ) {\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-built_in\">console</span>.log(i);\n</div></li><li><div class=\"code-word\">\t}, <span class=\"hljs-number\">1000</span> * i)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\">等价于\n</div></li><li><div class=\"code-word\">for(var i = 0; i &lt; 5; i++ ) {\n</div></li><li><div class=\"code-word\">    let _i = i\n</div></li><li><div class=\"code-word\">\tsetTimeout(() =&gt; {\n</div></li><li><div class=\"code-word\">\t\tconsole.log(_i);\n</div></li><li><div class=\"code-word\">\t}, 1000 * i)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"> */\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"1519\">总结</h3>\n                    <p data-nodeid=\"1520\">\n                      本课时介绍了函数相关的重要内容，包括 this\n                      关键字的指向、原型与原型链的使用、函数的隐式转换、函数和作用域的关系，希望大家能理解并记忆。\n                    </p>\n                    <p data-nodeid=\"1521\" class=\"\">\n                      最后布置一道思考题：结合本课时的内容，思考一下修改函数的\n                      this 指向，到底有多少种方式呢？\n                    </p>\n            "}