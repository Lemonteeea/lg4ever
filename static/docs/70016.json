{"title":"15 | 递归：如何计算汉诺塔问题的移动步数？","context":"\n                    <p data-nodeid=\"27013\" class=\"\">\n                      递归是重要的程序开发思想，比如程序源代码缩进、树形数据结构、XML\n                      语法、快速排序法等都有递归的影子。\n                    </p>\n                    <p data-nodeid=\"27014\">\n                      那么，递归思维的本质到底是什么呢？递归的理念看似隐讳，实则非常清晰明了。\n                    </p>\n                    <p data-nodeid=\"27015\">\n                      为了让你由浅入深地理解它，这一讲我会先从“汉诺塔问题”入手，带你找出“递归思维”，然后将其应用在两个经典问题中，让你感受递归的作用及其缺点。\n                    </p>\n                    <p data-nodeid=\"27016\">\n                      最后，你便会发现递归与上一讲所学的循环有相似之处，我便会在这两者的对比辨析中，带你探讨它们的本质差异。\n                    </p>\n                    <h3 data-nodeid=\"27017\">汉诺塔问题及其代码实现</h3>\n                    <p data-nodeid=\"27018\">我们先来看下汉诺塔问题的规则。</p>\n                    <blockquote data-nodeid=\"27019\">\n                      <p data-nodeid=\"27020\">\n                        假设有 A、B、C 三根柱子。其中在 A 柱子上，从下往上有 N\n                        个从大到小叠放的盘子。我们的目标是，希望用尽可能少的移动次数，把所有的盘子由\n                        A 柱移动到 C\n                        柱。过程中，每次只能移动一个盘子，且在任何时候，大盘子都不可以在小盘子上面。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"27021\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/7B/CgqCHl_TVDSALxIBAABSKrjlVnE038.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"27167\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"27022\">1.汉诺塔问题解密</h4>\n                    <p data-nodeid=\"27023\">\n                      这个题目需要一定的窍门，否则只能碰运气去乱走了。\n                    </p>\n                    <p data-nodeid=\"27024\">\n                      我们先脑补这样一个画面：假设 A\n                      柱子上除了最后一个大盘子（代号“大盘子”）以外，其他的 N-1\n                      个小盘子都合并起来，成为一个新的盘子（代号为“合并盘”）。那这个问题就简单了，只需要把“合并盘”移动到\n                      B 柱，再把“大盘子”移动到 C 柱，最后把“合并盘”移动到 C 柱。\n                    </p>\n                    <p data-nodeid=\"27025\">上述过程如下图所示：</p>\n                    <p data-nodeid=\"27026\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/70/Ciqc1F_TU_iAUMtzADErA8ghlBo479.gif\"\n                        alt=\"动图GIF.gif\"\n                        data-nodeid=\"27174\"\n                      />\n                    </p>\n                    <p data-nodeid=\"27027\">\n                      在这个过程中，问题由全部 N 个盘子由 A 移动到 C，转变为 N-1\n                      个“合并盘”从 A 移动到 B 再移动\n                      C。新的问题和原问题是完全一致的，但盘子数量由 N 个减少为\n                      N-1 个。如果继续用上面的思想，就能把 N-1\n                      个“合并盘”再度减少为 N-2 个，直到只剩一个。\n                    </p>\n                    <p data-nodeid=\"27028\">\n                      我们用数学重写上面的过程：令 H(x) 表示把某个柱子上的全部 x\n                      个盘子移动到另一个柱子上需要的步数，那么原问题 N 个盘子由\n                      A 柱子移动到 C 柱子的数学表示就是 H(N)。\n                    </p>\n                    <p data-nodeid=\"27029\">\n                      根据我们第一次的分解可知\n                      <strong data-nodeid=\"27182\">H(N)=H(N-1)+1+H(N-1)</strong\n                      >。\n                    </p>\n                    <blockquote data-nodeid=\"27030\">\n                      <p data-nodeid=\"27031\">\n                        也就是，把 N 个盘子从 A 移动到 C=把合并盘从 A 移动到 B +\n                        把大盘子从 A 移动到 C + 把合并盘从 B 移动到 C。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"27032\">\n                      再继续分析，你还会得到 H(N-1)=H(N-2)+1+H(N-2)。\n                    </p>\n                    <p data-nodeid=\"27033\">……</p>\n                    <p data-nodeid=\"27034\">\n                      直到最终 H(2)=H(1)+1+H(1)=1+1+1=3。\n                    </p>\n                    <p data-nodeid=\"27035\">\n                      我们把这个问题的计算过程整理到下面的表中，并尝试求解 H(n)\n                      的表达式。<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/7B/CgqCHl_TVHyAF8NlAAFaKneT0mU188.png\"\n                        alt=\"图片4.png\"\n                        data-nodeid=\"27191\"\n                      />\n                    </p>\n                    <p data-nodeid=\"27036\">\n                      因为 H(N)=1+2H(N-1)，所以可以得到\n                      H(N-1)=1+2H(N-2)，把这两个等式两边分别进行相减，则可以得到\n                      H(N)-H(N-1)=2(H(N-1)-H(N-2))。\n                    </p>\n                    <p data-nodeid=\"27037\">\n                      令 a<sub>N</sub>=H(N)-H(N-1)，则有\n                      a<sub>N</sub>=2a<sub>N-1</sub>，可见 {a<sub>N</sub>}\n                      是个首项为 1、公比为 2 的等比数列，通项公式为 a<sub\n                        >N</sub\n                      >\n                      = 2<sup>N-1</sup>。\n                    </p>\n                    <p data-nodeid=\"27038\">\n                      接着利用这些信息，我们尝试去推导 H(N)，则有<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/7B/CgqCHl_TVE-AVc6tAABmqSmmY4Q925.png\"\n                        alt=\"图片2.png\"\n                        data-nodeid=\"27222\"\n                      />\n                    </p>\n                    <p data-nodeid=\"27039\">\n                      别忘了 H(1)=1，a<sub>1</sub>=1，所以\n                      H(1)=a<sub>1</sub>，则有<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/7B/CgqCHl_TVIyADNOKAABiOs7Ikp0327.png\"\n                        alt=\"图片3.png\"\n                        data-nodeid=\"27235\"\n                      /><br />\n                      因此如果盘子的数量是 5 个，将 5 代入这个\n                      2<sup>N</sup>-1，则最少需要 31 步完成移动。\n                    </p>\n                    <h4 data-nodeid=\"27040\">2.汉诺塔问题的代码实现</h4>\n                    <p data-nodeid=\"27041\">\n                      我们尝试用程序代码来实现汉诺塔问题。不难发现，这里最高频使用的是，把\n                      n 个盘子从某个柱子 x，移动到另一个柱子\n                      z。因此，考虑对这个功能进行函数化的封装，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hanoi</span>(<span class=\"hljs-params\">N,x,y,z</span>):</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> N == <span class=\"hljs-number\">1</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">print</span> x + <span class=\"hljs-string\">'-&gt;'</span> + z\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">else</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; hanoi(N - <span class=\"hljs-number\">1</span>, x, z, y)\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">print</span> x + <span class=\"hljs-string\">'-&gt;'</span> + z\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; hanoi(N - <span class=\"hljs-number\">1</span>, y, x, z)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"27043\">我们对代码进行走读。</p>\n                    <p data-nodeid=\"27044\">\n                      第 2、3 行，如果盘子数量为 1，则直接把盘子从 x 柱子移动到\n                      z 柱子即可；若不为 1，则进行第 4～7 行的处理。\n                    </p>\n                    <blockquote data-nodeid=\"27045\">\n                      <p data-nodeid=\"27046\">\n                        此时盘子数量超过了 1，则拆分为“合并盘”和“大盘子”两部分。\n                      </p>\n                    </blockquote>\n                    <ul data-nodeid=\"27047\">\n                      <li data-nodeid=\"27048\">\n                        <p data-nodeid=\"27049\">\n                          首先，函数调用自己，把“合并盘”从 x 移动到 y；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27050\">\n                        <p data-nodeid=\"27051\">\n                          然后，把“大盘子”从 x 移动到 z；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27052\">\n                        <p data-nodeid=\"27053\">\n                          最后，函数再调用自己，把“合并盘”从 y 移动到 z。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27054\">\n                      想象着会很复杂的代码，实际上非常简单，在主函数中只要执行\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\">hanoi(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"27056\">\n                      就能打印出把 3 个盘子从 a 柱子移动到 c 柱子的详细步骤。\n                    </p>\n                    <p data-nodeid=\"27057\">\n                      每一步的移动结果如下图，执行后需要 7\n                      步，这和我们数学上的计算完全一致。\n                    </p>\n                    <p data-nodeid=\"27058\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/7D/CgqCHl_TVUGAIlaEAABg-6pIFp0225.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"27255\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"27059\">\n                      递归——自己调用自己的程序开发思想\n                    </h3>\n                    <p data-nodeid=\"27060\">\n                      汉诺塔问题解法的核心步骤就是：移动全部盘子，等价于移动“合并盘”，加上移动“大盘子”，加上再移动“合并盘”，然后你需要重复执行这个步骤。\n                    </p>\n                    <p data-nodeid=\"27061\">\n                      <strong data-nodeid=\"27261\"\n                        >用函数表达这个过程，就是 f(全部盘子) = f(合并盘) +\n                        f(大盘子) + f(合并盘)。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"27062\">\n                      为了代码实现这个功能，我们定义这个函数为<strong\n                        data-nodeid=\"27271\"\n                        >hanoi(N,x,y,z)，</strong\n                      >\n                      并且在这个函数中，需要调用自己才能完成“合并盘”的移动，<strong\n                        data-nodeid=\"27272\"\n                        >这种会调用自己的编码方式在程序开发中，就叫作递归</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"27063\">\n                      <strong data-nodeid=\"27276\"\n                        >严格意义来说，递归并不是个算法，它是一种重要的程序开发思想，是某个算法的实现方式。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"27064\">\n                      在使用递归进行程序开发时，需要注意下面两个关键问题。\n                    </p>\n                    <ul data-nodeid=\"27065\">\n                      <li data-nodeid=\"27066\">\n                        <p data-nodeid=\"27067\">\n                          第一个问题，递归必须要有<strong data-nodeid=\"27283\"\n                            >终止条件</strong\n                          >，否则程序就会进入不停调用自己的死循环。\n                        </p>\n                      </li>\n                    </ul>\n                    <blockquote data-nodeid=\"27068\">\n                      <p data-nodeid=\"27069\">\n                        有这样一个故事：从前有座山，山里有个庙，庙里有个和尚讲故事；故事是，从前有座山，山里有个庙，庙里有个和尚讲故事；故事是...\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"27070\">\n                      这就是一个典型的没有终止条件的递归。在汉诺塔问题中，我们的终止条件，就是当盘子数量为\n                      1 时，直接从 x 移动到 z，而不用再递归调用自身。\n                    </p>\n                    <ul data-nodeid=\"27071\">\n                      <li data-nodeid=\"27072\">\n                        <p data-nodeid=\"27073\">\n                          第二个问题，写代码之前需要先写出<strong\n                            data-nodeid=\"27297\"\n                            >递归公式</strong\n                          >。<br />\n                          在汉诺塔问题中，递归公式是<strong data-nodeid=\"27298\"\n                            >H(N)=H(N-1)+1+H(N-1)</strong\n                          >，这也是递归函数代码中除了终止条件以外的部分。\n                        </p>\n                      </li>\n                    </ul>\n                    <blockquote data-nodeid=\"27074\">\n                      <p data-nodeid=\"27075\">\n                        对应于“循环结构”中的循环体，这部分代码对于“递归”而言，偶尔也被人称作“<strong\n                          data-nodeid=\"27304\"\n                          >递归体</strong\n                        >”。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"27076\">递归代码的基本结构如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fun</span>(<span class=\"hljs-params\">N,x</span>):</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> condition(N):\n</div></li><li><div class=\"code-word\">\t\txxx\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">else</span>:\n</div></li><li><div class=\"code-word\">\t\tfun(N1,x)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"27078\">\n                      我们对这个代码结构进行解析。<br />\n                      对某个函数 fun(N,x)\n                      而言，如果要用递归实现它，代码中至少包括<strong\n                        data-nodeid=\"27317\"\n                        >终止条件</strong\n                      >和<strong data-nodeid=\"27318\">递归体</strong>两部分。\n                    </p>\n                    <ul data-nodeid=\"27079\">\n                      <li data-nodeid=\"27080\">\n                        <p data-nodeid=\"27081\">\n                          终止条件的判断基于某个入参\n                          N，如果满足，则函数不再调用自己，终止递归；如果还不满足，则进入到递归体。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27082\">\n                        <p data-nodeid=\"27083\">\n                          在递归体中，终止条件判断的入参 N\n                          一定会发生改变。通常而言，是变成比 N\n                          小的一个数值N<sub>1</sub>。只有这样，递归才能慢慢向终止条件靠近。在递归体中，基于新的参数\n                          N<sub>1</sub>，再调用函数自身\n                          fun(N1,x)，完成一次递归操作。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27084\">\n                      接着我们带着递归思维，去看一下“阶乘问题”和“斐波那契序列问题”。\n                    </p>\n                    <h3 data-nodeid=\"27085\">递归思维的应用</h3>\n                    <h4 data-nodeid=\"27086\">1.阶乘问题</h4>\n                    <p data-nodeid=\"27087\">\n                      数学中，阶乘的定义公式为\n                      n!=1×2×...×(n-2)×(n-1)×n。现在请你用递归来写一个函数，输入是某个<strong\n                        data-nodeid=\"27339\"\n                        >正整数</strong\n                      >n，输出是 n 的阶乘。\n                    </p>\n                    <p data-nodeid=\"27088\">\n                      利用递归写代码时，需要优先处理递归的两个关键问题，那就是终止条件和递归体。\n                    </p>\n                    <ul data-nodeid=\"27089\">\n                      <li data-nodeid=\"27090\">\n                        <p data-nodeid=\"27091\">\n                          对于终止条件而言，当 n=1 时，返回的值为 1!=1。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27092\">\n                        <p data-nodeid=\"27093\">\n                          对于递归体而言，需要先写出递归公式。根据阶乘公式的定义可知，当\n                          n&gt;1 时，H(n)=n!=1×2×...×(n-2)×(n-1)×n=\n                          [1×2×...×(n-2)×(n-1)]×n=n×(n-1)!= n×H(n-1)。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27094\">\n                      有了这些信息后，我们可以尝试写出下面的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">jiecheng</span>(<span class=\"hljs-params\">n</span>):</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span>:\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">else</span>:\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> n * jiecheng(n<span class=\"hljs-number\">-1</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"27096\">\n                      我们对代码进行走读。这段代码的代码量非常少，第 2、3 行判断\n                      n 是否为 1。如果是，则返回1；否则，则跳转到第 5\n                      行，根据递归公式返回 n×(n-1)!，即 n×jiecheng(n-1)。\n                    </p>\n                    <p data-nodeid=\"27097\">\n                      题目中限定了输入参数 n\n                      为正整数，所以一些异常判断可以被忽略。但如果你追求代码的工程完备性，还可以补充\n                      n 为 0、n 为负数、甚至 n 为小数的一些异常判断。\n                    </p>\n                    <blockquote data-nodeid=\"27098\">\n                      <p data-nodeid=\"27099\">在这里，我们就不展开了。</p>\n                    </blockquote>\n                    <h4 data-nodeid=\"27100\">2.斐波那契序列问题</h4>\n                    <p data-nodeid=\"27101\">\n                      在数学上，斐波那契数列定义为\n                      1、1、2、3、5、8、13、21、34……\n                      。简而言之，在斐波那契数列中，除了前两项以外，后续的每一项都是前面两项之和，而前两项的值都定义为\n                      1。\n                    </p>\n                    <p data-nodeid=\"27102\">\n                      我们用 F(n) 表示斐波那契数列中的第 n 项的值，例如：\n                    </p>\n                    <p data-nodeid=\"27103\">F(1)=1</p>\n                    <p data-nodeid=\"27104\">F(2)=1</p>\n                    <p data-nodeid=\"27105\">F(3)=1+1=2</p>\n                    <p data-nodeid=\"27106\">F(4)=1+2=3</p>\n                    <p data-nodeid=\"27107\">\n                      现在希望你用递归来写代码，实现的功能是，输入某个正整数\n                      n，输出斐波那契数列中第 n 项的值。\n                    </p>\n                    <blockquote data-nodeid=\"27108\">\n                      <p data-nodeid=\"27109\">\n                        你可以假设输入的 n 都是合法的，不用做异常判断。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"27110\">\n                      围绕递归的开发逻辑，关键问题仍然是终止条件和递归体：\n                    </p>\n                    <ul data-nodeid=\"27111\">\n                      <li data-nodeid=\"27112\">\n                        <p data-nodeid=\"27113\">\n                          斐波那契数列的<strong data-nodeid=\"27374\"\n                            >终止条件</strong\n                          >很显然，就是当 n 为 1 或 2 时，返回值就是 1；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27114\">\n                        <p data-nodeid=\"27115\">\n                          而它的<strong data-nodeid=\"27380\">递归体</strong\n                          >可以根据斐波那契数列的定义得到，也就是\n                          F(n)=F(n-1)+F(n-2)。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27116\">\n                      我们把以上定义直接翻译成代码，则有\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">def <span class=\"hljs-title\">fib</span><span class=\"hljs-params\">(n)</span>:\n</span></div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> or n == <span class=\"hljs-number\">2</span>:\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">else</span>:\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> fib(n-<span class=\"hljs-number\">1</span>) + fib(n-<span class=\"hljs-number\">2</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"27118\">我们对代码进行走读：</p>\n                    <ul data-nodeid=\"27119\">\n                      <li data-nodeid=\"27120\">\n                        <p data-nodeid=\"27121\">\n                          在第 2 行，判断 n 是否为 1 或 2。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27122\">\n                        <p data-nodeid=\"27123\">如果是，则第 3 行返回 1；</p>\n                      </li>\n                      <li data-nodeid=\"27124\">\n                        <p data-nodeid=\"27125\">\n                          反之，则跳转到第 5 行，返回前两项之和，即\n                          fib(n-1)+fib(n-2)。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27126\">\n                      基于这段代码，主函数中执行 print\n                      fib(10)，即计算斐波那契数列的第 10\n                      位，如下图所示，运行结果为 55。<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/70/Ciqc1F_TVKyAGpYIAAGWje6rD9g967.png\"\n                        alt=\"图片5.png\"\n                        data-nodeid=\"27390\"\n                      />\n                    </p>\n                    <p data-nodeid=\"27127\">\n                      而我们手动计算斐波那契数列的前 10 位发现，结果也是\n                      55，说明我们刚刚的代码实现是正确的。<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/70/Ciqc1F_TVNCAChNqAACHQwln93E852.png\"\n                        alt=\"图片6.png\"\n                        data-nodeid=\"27395\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"27128\">递归的优缺点</h3>\n                    <p data-nodeid=\"27129\">\n                      讲完了递归思维在“阶乘问题”和“斐波那契序列问题”中的应用后，我们总结以下递归的优缺点。\n                    </p>\n                    <p data-nodeid=\"27130\">\n                      递归有很多优势，例如代码结构简单、代码量少、阅读方便、维护简单等；然而递归也有一些缺陷和不足，一个明显的问题就是，递归的计算量非常大，而且存在重复计算的可能性。\n                    </p>\n                    <p data-nodeid=\"27131\">\n                      我们以斐波那契数列问题为例，把代码进行如下修改：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">n</span>):</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">or</span> n == <span class=\"hljs-number\">2</span>:\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">\t<span class=\"hljs-keyword\">else</span>:\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"fib: \"</span> + str(n<span class=\"hljs-number\">-1</span>)\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"fib: \"</span> + str(n<span class=\"hljs-number\">-2</span>)\n</div></li><li><div class=\"code-word\">\t\t<span class=\"hljs-keyword\">return</span> fib(n<span class=\"hljs-number\">-1</span>) + fib(n<span class=\"hljs-number\">-2</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"27133\">\n                      其中，在第 5、6\n                      行插入两个打印的动作。它们的功能，是每次执行递归体之前，打印出要递归计算的内容。\n                    </p>\n                    <p data-nodeid=\"27134\">\n                      这样，在主函数运行 fib(10)\n                      时，你会看到下面的部分运行结果：<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/71/Ciqc1F_TVReAZCcsAADUlplI5dc678.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"27405\"\n                      />\n                    </p>\n                    <p data-nodeid=\"27135\">\n                      很简单，在执行 fib(9) 时，需要递归计算 fib(8) 和\n                      fib(7)；而 fib(8) 的计算，又需要递归计算 fib(7) 和\n                      fib(6)。很可惜，在得到 fib(7)\n                      的时候，结果并不会进行保存；而另一边，也要计算\n                      fib(7)，这只能再整体进行一次递归计算。\n                    </p>\n                    <p data-nodeid=\"27136\">\n                      所以，上图中我们能看到计算 fib(10)\n                      的过程中，存在大量重复的递归计算。\n                    </p>\n                    <p data-nodeid=\"27137\">\n                      重复计算是递归的一个问题，但也并不是绝对会发生，这就需要程序员去综合分析你遇到的具体问题了。\n                    </p>\n                    <blockquote data-nodeid=\"27138\">\n                      <p data-nodeid=\"27139\">\n                        在后面的《17 |\n                        动态规划：如何利用最优子结构解决问题？》我会采用“设置全局变量来缓存中间结果”的方式来避免重复计算，减少计算量。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"27140\">小结——递归与循环</h3>\n                    <p data-nodeid=\"27141\">\n                      学完这一讲，你可能会发现，递归和循环比较<strong\n                        data-nodeid=\"27418\"\n                        >相像</strong\n                      >。确实，递归和循环都是通过解决若干个简单问题来解决复杂问题的，它们也都有自己的终止条件和循环体/递归体，都是重复进行某个步骤。\n                    </p>\n                    <p data-nodeid=\"27142\">\n                      然而，它们也有很多<strong data-nodeid=\"27424\"\n                        >差异性</strong\n                      >，主要体现在以下两方面。\n                    </p>\n                    <p data-nodeid=\"27143\">\n                      <strong data-nodeid=\"27428\">迭代次数</strong>\n                    </p>\n                    <ul data-nodeid=\"27144\">\n                      <li data-nodeid=\"27145\">\n                        <p data-nodeid=\"27146\">\n                          <strong data-nodeid=\"27433\">循环</strong\n                          >对于迭代的次数更敏感，绝大多数场景会定义一个用来计数的变量\n                          i，来控制循环的次数；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27147\">\n                        <p data-nodeid=\"27148\">\n                          而<strong data-nodeid=\"27439\">递归</strong\n                          >对于迭代次数不敏感，取决于什么时候满足终止条件。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27149\">\n                      <strong data-nodeid=\"27443\">问题复杂性</strong>\n                    </p>\n                    <p data-nodeid=\"27150\">\n                      不管是循环还是递归，每一轮迭代处理的问题类型都是非常趋同的，但<strong\n                        data-nodeid=\"27449\"\n                        >问题的复杂性</strong\n                      >却不一样。\n                    </p>\n                    <ul data-nodeid=\"27151\">\n                      <li data-nodeid=\"27152\">\n                        <p data-nodeid=\"27153\">\n                          对于<strong data-nodeid=\"27455\">循环</strong\n                          >而言，每一轮处理的问题难度几乎是一样的；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27154\">\n                        <p data-nodeid=\"27155\">\n                          而<strong data-nodeid=\"27461\">递归</strong\n                          >则是缩小搜索范围（例如二分查找）的思路，一般而言，每轮处理的问题相对上一轮而言是更简单的。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27156\">\n                      最后，我们留一个练习题：利用递归写出下面的函数，输入是个正整数\n                      n，输出是从 3 到 n 的求和。\n                    </p>\n                    <p data-nodeid=\"27917\">\n                      下一讲，我将介绍“二分法：如何利用指数爆炸优化程序？”别忘来听课～\n                    </p>\n                    <hr data-nodeid=\"27918\" />\n                    <p data-nodeid=\"27919\" class=\"te-preview-highlight\">\n                      <a\n                        href=\"https://wj.qq.com/s2/7812549/4cd8/\"\n                        data-nodeid=\"27923\"\n                        >课程评价入口，挑选 5 名小伙伴赠送小礼品～</a\n                      >\n                    </p>\n            "}