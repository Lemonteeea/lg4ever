{"title":"04 | 链表：如何利用“假头、新链表、双指针”解决链表题？（上）","context":"\n                    <p data-nodeid=\"2029\" class=\"\">\n                      大家都知道程咬金的“三板斧”这个绝技，那今天我也给你介绍解决链表问题的“三板斧”：<strong\n                        data-nodeid=\"2210\"\n                        >假头、新链表、双指针</strong\n                      >。由于内容比较多，所以这里拆分了上、下两篇来讲解，通过这一讲的学习，你可以深入理解带假头链表的\n                      6 种最基本的操作。\n                    </p>\n                    <p data-nodeid=\"2030\">\n                      <strong data-nodeid=\"2215\">链表</strong\n                      >作为一种重要的数据结构，无论是在工作中，还是在面试中都经常出现。这种数据结构可以用在很多地方，比如内核的消息队列、缓存管理、跳表，B+\n                      树等。\n                    </p>\n                    <p data-nodeid=\"2031\">\n                      有的面试官非常喜欢考察面试者的链表知识，主要有以下 3\n                      个原因：\n                    </p>\n                    <ol data-nodeid=\"11774\">\n                      <li data-nodeid=\"11775\">\n                        <p data-nodeid=\"11776\">\n                          操作链表需要非常小心，考虑<strong data-nodeid=\"11787\"\n                            >各种边界</strong\n                          >情况；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11777\">\n                        <p data-nodeid=\"11778\">\n                          链表结构简单，但是查找、交换、翻转都非常容易出错；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"11779\">\n                        <p data-nodeid=\"11780\">\n                          解决链表问题，需要有一定的算法思想，但是又并不太难。在面试过程中，需要你想到解题方法并实现出来，更加考察应试者的工程能力。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"11781\" class=\"te-preview-highlight\">\n                      <em data-nodeid=\"11793\"\n                        >注：由于链表题的求解重点不在思路，所以这里，我们不再采用“四步分析法”找规律来讲解链表。</em\n                      >\n                    </p>\n\n                    <p data-nodeid=\"2040\">\n                      在本讲我会介绍一些解决链表的新方法与新思路，带你踏上“链表的奇幻之旅”。\n                    </p>\n                    <h3 data-nodeid=\"2041\">三板斧中的第一斧：假头</h3>\n                    <p data-nodeid=\"2042\">\n                      <strong data-nodeid=\"2239\"\n                        >假头通常也叫作 Dummy Head 或者</strong\n                      >“<strong data-nodeid=\"2240\">哑头</strong\n                      >”。实际上，就是在链表前面，加上一个额外的结点。此时，存放了\n                      N 个数据的带假头的链表，算上假头一共有 N+1 个结点。\n                    </p>\n                    <p data-nodeid=\"2043\">\n                      额外的结点不会存放有意义的数据。那么它的作用是什么呢？\n                    </p>\n                    <p data-nodeid=\"2044\">\n                      你可以这样理解，添加假头后，可以省略掉很多空指针的判断，链表的各种操作会变得更加简洁。接下来，我们看一下关于链表的各种操作，今天主要介绍\n                      6 种最基本的操作：\n                    </p>\n                    <ul data-nodeid=\"2045\">\n                      <li data-nodeid=\"2046\">\n                        <p data-nodeid=\"2047\">初始化</p>\n                      </li>\n                      <li data-nodeid=\"2048\">\n                        <p data-nodeid=\"2049\">追加结点</p>\n                      </li>\n                      <li data-nodeid=\"2050\">\n                        <p data-nodeid=\"2051\">头部插入结点</p>\n                      </li>\n                      <li data-nodeid=\"2052\">\n                        <p data-nodeid=\"2053\">查找结点</p>\n                      </li>\n                      <li data-nodeid=\"2054\">\n                        <p data-nodeid=\"2055\">插入指定位置之前</p>\n                      </li>\n                      <li data-nodeid=\"2056\">\n                        <p data-nodeid=\"2057\">删除结点</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2058\">\n                      为了将这 6 种基本的操作串起来，我想到了一道考察<strong\n                        data-nodeid=\"2258\"\n                        >设计链表的</strong\n                      >面试题，题目要求应试者将这 6\n                      种基本的操作加以实现：注释中的 /<em data-nodeid=\"2259\"\n                        >code here</em\n                      >/ 部分是填写相应的 6 种功能代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 实现单链表</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyLinkedList</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 链表结点的定义</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ListNode</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// val用来存放链表中的数据</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> val = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// next指向下一个结点</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">public</span> ListNode next = <span class=\"hljs-keyword\">null</span>;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ListNode</span><span class=\"hljs-params\">()</span> </span>{}\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ListNode</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x)</span> </span>{\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; val = x;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-comment\">/** code here: 初始化链表*/</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MyLinkedList</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtTail</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/* code here: 将值为 val 的结点追加到链表尾部*/</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtHead</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/* code here: 插入值val的新结点，使它成为链表的第一个结点*/</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/* code here: 获取链表中第index个结点的值。如果索引无效，则返回-1。*/</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// index从0开始。</span>\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index, <span class=\"hljs-keyword\">int</span> val)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// code here:</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 在链表中的第 index 个结点之前添加值为 val  的结点。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 1. 如果 index 等于链表的长度，则该结点将附加到链表的末尾。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 2. 如果 index 大于链表长度，则不会插入结点。</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 3. 如果index小于0，则在头</span>\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteAtIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span> </span>{\n</div></li><li><div class=\"code-word\">  &nbsp;&nbsp;<span class=\"hljs-comment\">/* code here: 如果索引index有效，则删除链表中的第index个结点。*/</span>\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"2060\">初始化</h4>\n                    <p data-nodeid=\"2061\">\n                      初始化假头链表，首先，我们需要 new\n                      出一个链表结点，并且让链表的 dummy 和 tail\n                      指针都指向它，代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&nbsp; <span class=\"hljs-comment\">/** code here: 初始化链表*/</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化dummy</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">private</span> ListNode dummy = <span class=\"hljs-keyword\">new</span> ListNode();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化链表tail指针</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">private</span> ListNode tail = dummy;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化链表的长度，此时为0</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> length = <span class=\"hljs-number\">0</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2063\">\n                      <p data-nodeid=\"2064\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L22-L24\"\n                          data-nodeid=\"2265\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L69-L75\"\n                          data-nodeid=\"2269\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L68-L72\"\n                          data-nodeid=\"2273\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2065\">\n                      初始化完成后，链表已经有了一个结点，但是此时，整个链表中还没有任何数据。因此，在后文中，我们说一个<strong\n                        data-nodeid=\"2279\"\n                        >空链表</strong\n                      >的时候，就是指已经初始化好的带假头链表。\n                    </p>\n                    <p data-nodeid=\"2066\">\n                      相信你已经学会了这几行代码的精髓，下面我要考考你了。\n                    </p>\n                    <p data-nodeid=\"2067\">\n                      <strong data-nodeid=\"2285\"\n                        >小测验：一个带假头的链表初始化的时候，哪个指针是空的</strong\n                      >？\n                    </p>\n                    <ul data-nodeid=\"2068\">\n                      <li data-nodeid=\"2069\">\n                        <p data-nodeid=\"2070\">A. dummy 指针</p>\n                      </li>\n                      <li data-nodeid=\"2071\">\n                        <p data-nodeid=\"2072\">B. tail 指针</p>\n                      </li>\n                      <li data-nodeid=\"2073\">\n                        <p data-nodeid=\"2074\">C. dummy 和 tail 指针</p>\n                      </li>\n                      <li data-nodeid=\"2075\">\n                        <p data-nodeid=\"2076\">D. dummy.next 指针</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2077\">\n                      <strong data-nodeid=\"2293\">正确答案 D</strong>\n                    </p>\n                    <p data-nodeid=\"2078\">\n                      dummy.next 指针。因为带假头的链表初始化以后，dummy 和 tail\n                      都是指向了 new\n                      出来的结点，但是这个时候，还没有任何其他结点进来，所以\n                      dummy.next 为空。\n                    </p>\n                    <p data-nodeid=\"2079\">\n                      虽然 dummy 和 tail\n                      初始化完成之后，都指向同一个结点。但是这两者还有一个有趣的特点，叫“<strong\n                        data-nodeid=\"2300\"\n                        >动静结合</strong\n                      >”。\n                    </p>\n                    <ul data-nodeid=\"2080\">\n                      <li data-nodeid=\"2081\">\n                        <p data-nodeid=\"2082\">\n                          静：dummy\n                          指针初始化好以后，永远都是静止的，再也不会动了。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2083\">\n                        <p data-nodeid=\"2084\">\n                          动：tail 指针在链表发生变动的时候，就需要移动调整。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2085\">接下来，我们再来看看追加结点。</p>\n                    <h4 data-nodeid=\"2086\">追加结点</h4>\n                    <p data-nodeid=\"2087\">\n                      尾部添加新结点操作只有两步，代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtTail</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/* code here: 将值为 val 的结点追加到链表尾部*/</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 尾部添加一个新结点</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; tail.next = <span class=\"hljs-keyword\">new</span> ListNode(val);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 移动tail指针</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; tail = tail.next;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 链表长度+1</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; length++;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2089\">\n                      <p data-nodeid=\"2090\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L62-L67\"\n                          data-nodeid=\"2309\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L108-L113\"\n                          data-nodeid=\"2313\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L68-L72#L98-L101\"\n                          data-nodeid=\"2317\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2091\">这段代码的执行过程如下图所示：</p>\n                    <p data-nodeid=\"2092\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/CA/CioPOWBIMYOASGfSAAfGljWjNtw694.gif\"\n                        alt=\"1.gif\"\n                        data-nodeid=\"2321\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2093\">\n                      <strong data-nodeid=\"2326\">小测验</strong>：这里 tail\n                      指针需要判断是否为空吗？\n                    </p>\n                    <ul data-nodeid=\"9716\">\n                      <li data-nodeid=\"9717\">\n                        <p data-nodeid=\"9718\" class=\"\">A. 需要</p>\n                      </li>\n                      <li data-nodeid=\"9719\">\n                        <p data-nodeid=\"9720\">B. 不需要</p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"2099\">\n                      <strong data-nodeid=\"2332\">正确答案 B</strong>\n                    </p>\n                    <p data-nodeid=\"2100\">\n                      带假头的链表初始化之后，可以保证 tail\n                      指针永远非空，因此，也就可以直接去修改 tail.next\n                      指针，省略掉了关于 tail\n                      指针是否为空的判断。比如，空链表追加新结点时执行过程如下动图所示：\n                    </p>\n                    <p data-nodeid=\"2101\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/CD/Cgp9HWBIMZCAEHw5AAVk4Jb8MEs921.gif\"\n                        alt=\"2.gif\"\n                        data-nodeid=\"2336\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"2102\">头部插入结点</h4>\n                    <p data-nodeid=\"2103\">\n                      需要插入的新结点为 p，插入之后，新结点 p\n                      会成为第一个有意义的数据结点。通过以下 3\n                      步可以完成头部插入：\n                    </p>\n                    <ol data-nodeid=\"2104\">\n                      <li data-nodeid=\"2105\">\n                        <p data-nodeid=\"2106\">\n                          新结点 p.next 指向 dummy.next；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2107\">\n                        <p data-nodeid=\"2108\">dummy.next 指向 p；</p>\n                      </li>\n                      <li data-nodeid=\"2109\">\n                        <p data-nodeid=\"2110\">\n                          如果原来的 tail 指向 dummy，那么将 tail 指向 p。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2111\">对应的代码如下（解析在注释里）：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&nbsp; <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtHead</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val)</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/* code here: 插入值val的新结点，使它成为链表的第一个结点*/</span>\n</div></li><li><div class=\"code-word\">     <span class=\"hljs-comment\">// 生成一个结点，存放的值为val</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; ListNode p = <span class=\"hljs-keyword\">new</span> ListNode(val);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 将p.next指向第一个结点</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; p.next = dummy.next;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// dummy.next指向新结点，使之变成第一个结点</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; dummy.next = p;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-comment\">// 注意动静结合原则，添加结点时，注意修改tail指针。</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (tail == dummy) {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; tail = p;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; length++;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2113\">\n                      <p data-nodeid=\"2114\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L51-L60\"\n                          data-nodeid=\"2346\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L95-L106\"\n                          data-nodeid=\"2350\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L87-L96\"\n                          data-nodeid=\"2354\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2115\">代码执行流程如下动图所示：</p>\n                    <p data-nodeid=\"2116\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/CD/Cgp9HWBIMZ2AEMTiAAoTgPIJPh8420.gif\"\n                        alt=\"3.gif\"\n                        data-nodeid=\"2358\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2117\">\n                      这段代码有趣的地方在于，当链表为空的时候，它依然是可以工作的。因为虽然链表是空的，但是由于有\n                      dummy 结点的存在，代码并不会遇到空指针，此时工作流程如下：\n                    </p>\n                    <p data-nodeid=\"2118\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/CD/Cgp9HWBIMaeAMwi6AAdLTcRFg2U490.gif\"\n                        alt=\"4.gif\"\n                        data-nodeid=\"2362\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2119\">下面请你通过小测验自我检验。</p>\n                    <p data-nodeid=\"2120\">\n                      <strong data-nodeid=\"2368\">小测验</strong\n                      >：在插入结点的时候，哪一步最容易遗忘？\n                    </p>\n                    <ul data-nodeid=\"7668\">\n                      <li data-nodeid=\"7669\">\n                        <p data-nodeid=\"7670\" class=\"\">A. new 一个假头</p>\n                      </li>\n                      <li data-nodeid=\"7671\">\n                        <p data-nodeid=\"7672\">B. new 一个新结点</p>\n                      </li>\n                      <li data-nodeid=\"7673\">\n                        <p data-nodeid=\"7674\">C. 修改 next 指针</p>\n                      </li>\n                      <li data-nodeid=\"7675\">\n                        <p data-nodeid=\"7676\">D. 修改 tail 指针</p>\n                      </li>\n                    </ul>\n\n                    <p data-nodeid=\"3563\" class=\"\">\n                      <strong data-nodeid=\"3572\">正确答案</strong> D\n                    </p>\n\n                    <p data-nodeid=\"2131\">\n                      如果链表添加了结点，或者删除了结点，一定要记得修改 tail\n                      指针。<strong data-nodeid=\"2383\"\n                        >如果忘了修改，那么就不能正确地获取链表的尾指针，从而错误地访问链表中的数据</strong\n                      >。这一点非常重要，无数人在这个坑上翻过车。\n                    </p>\n                    <h4 data-nodeid=\"2132\">查找结点</h4>\n                    <p data-nodeid=\"2133\">\n                      在查找索引值为 index（假设 index 从 0\n                      开始）的结点时，你需要注意，<strong data-nodeid=\"2390\"\n                        >大多数情况下，返回指定结点前面的一个结点 prev\n                        更加有用</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"2134\">好处有以下两个方面：</p>\n                    <ol data-nodeid=\"2135\">\n                      <li data-nodeid=\"2136\">\n                        <p data-nodeid=\"2137\">\n                          通过 prev.next\n                          就可以访问到你想要找到的结点，如果没有找到，那么\n                          prev.next 为 null；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2138\">\n                        <p data-nodeid=\"2139\">\n                          通过 prev 可以方便完成后续操作，比如在 target 前面\n                          insert 一个新结点，或者将 target 结点从链表中移出去。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2140\">\n                      因此，如果要实现 get 函数，我们应该先实现一个 getPrevNode\n                      函数。具体的操作如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> ListNode <span class=\"hljs-title\">getPrevNode</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/*返回index结点的前驱结点，如果index不存在，那么返回dummy*/</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化front与back，分别一前一后</span>\n</div></li><li><div class=\"code-word\"> &nbsp;ListNode front = dummy.next;\n</div></li><li><div class=\"code-word\">&nbsp; ListNode back = dummy;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 在查找的时候，front与back总是一起走</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; index &amp;&amp; front != <span class=\"hljs-keyword\">null</span>; i++) {\n</div></li><li><div class=\"code-word\">&nbsp;   back = front;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; front = front.next;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 把back做为prev并且返回</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> back;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2142\">\n                      <p data-nodeid=\"2143\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L68-L72#L74-L80\"\n                          data-nodeid=\"2398\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L31-L39\"\n                          data-nodeid=\"2402\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L74-L80\"\n                          data-nodeid=\"2406\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2144\">程序的执行过程如下：</p>\n                    <p data-nodeid=\"2145\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/CA/CioPOWBIMbWAZF4OAAuzYmMlByU170.gif\"\n                        alt=\"5.gif\"\n                        data-nodeid=\"2410\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2146\">\n                      有了假头的帮助，这段查找代码就非常健壮了，可以处理以下 2\n                      种情况：\n                    </p>\n                    <ol data-nodeid=\"2147\">\n                      <li data-nodeid=\"2148\">\n                        <p data-nodeid=\"2149\">\n                          如果 target 在链表中不存在，此时 prev\n                          返回链表的最后一个结点；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2150\">\n                        <p data-nodeid=\"2151\">\n                          如果为空链表（空链表指只有一个假头的链表），此时 prev\n                          指向 dummy。也就是说，返回的 prev 指针总是有效的。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2152\">\n                      借助 getPrevNode 函数，我们就可以写出 get\n                      函数了，代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 获取链表中第 index 个结点的值。如果索引无效，则返回-1。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// index从0开始</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> || index &gt;= length) {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 因为getPrevNode总是返回有效的结点，所以可以直接取值。</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">return</span> getPrevNode(index).next.val;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2154\">\n                      <p data-nodeid=\"2155\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L41-L47\"\n                          data-nodeid=\"2418\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L88-L93\"\n                          data-nodeid=\"2422\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L82-L85\"\n                          data-nodeid=\"2426\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h4 data-nodeid=\"2156\">插入指定位置之前</h4>\n                    <p data-nodeid=\"2157\">插入指定位置的前面，有 4 个需求。</p>\n                    <ol data-nodeid=\"2158\">\n                      <li data-nodeid=\"2159\">\n                        <p data-nodeid=\"2160\">\n                          如果 index 大于链表长度，则不会插入结点。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2161\">\n                        <p data-nodeid=\"2162\">\n                          如果 index\n                          等于链表的长度，则该结点将附加到链表的末尾。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2163\">\n                        <p data-nodeid=\"2164\">\n                          如果 index 小于 0，则在头部插入结点。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2165\">\n                        <p data-nodeid=\"2166\">否则在指定位置前面插入结点。</p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2167\">\n                      其中，Case 1~3 较容易处理。可以直接写。重点在于 Case\n                      4。现在你已经有了 getPrevNode() 函数，就可以比较容易地写出\n                      Case 4 的代码，思路如下：\n                    </p>\n                    <ul data-nodeid=\"2168\">\n                      <li data-nodeid=\"2169\">\n                        <p data-nodeid=\"2170\">\n                          使用 getPrevNode() 函数拿到 index 之前的结点 pre；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2171\">\n                        <p data-nodeid=\"2172\">在 pre 的后面添加一个新结点。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"2173\">\n                      以下是具体的 Case 1~4\n                      的操作过程，具体的代码如下（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">addAtIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index, <span class=\"hljs-keyword\">int</span> val)</span> </span>{\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (index &gt; length) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// Case 1.如果 index 大于链表长度，则不会插入结点。</span>\n</div></li><li><div class=\"code-word\">&nbsp;   <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">&nbsp; } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (index == length) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// Case 2.如果 index 等于链表的长度，则该结点将附加到链表的末尾。</span>\n</div></li><li><div class=\"code-word\">&nbsp;   addAtTail(val);\n</div></li><li><div class=\"code-word\">&nbsp; } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (index &lt;= <span class=\"hljs-number\">0</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// Case 3. 如果index小于0，则在头部插入结点。</span>\n</div></li><li><div class=\"code-word\">&nbsp;   addAtHead(val);\n</div></li><li><div class=\"code-word\">&nbsp; } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// Case 4.</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 得到index之前的结点pre</span>\n</div></li><li><div class=\"code-word\">    ListNode pre = getPrevNode(index);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 在pre的后面添加新结点</span>\n</div></li><li><div class=\"code-word\">    ListNode p = <span class=\"hljs-keyword\">new</span> ListNode(val);\n</div></li><li><div class=\"code-word\">    p.next = pre.next;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; pre.next = p;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 注意修改长度</span>\n</div></li><li><div class=\"code-word\">    length++;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2175\">\n                      <p data-nodeid=\"2176\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L69-L89\"\n                          data-nodeid=\"2444\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L115-L135\"\n                          data-nodeid=\"2448\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L103-L123\"\n                          data-nodeid=\"2452\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2177\">\n                      <strong data-nodeid=\"2457\">注意：</strong>\n                      这里有一个新手很容易犯错的地方，我单独给你提取出来：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">    p.next = pre.next;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; pre.next = p;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"2179\">\n                      你一定要记住，这两行代码的顺序打死也不能换。一旦交换，链表的操作就会出现错误，再也不能正常工作了。此时出错的情况就会变成下图这样：\n                    </p>\n                    <p data-nodeid=\"2180\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/CA/CioPOWBIMgiAGcwWAAeNIlv7KX0437.gif\"\n                        alt=\"6.gif\"\n                        data-nodeid=\"2461\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"2181\">删除结点</h4>\n                    <p data-nodeid=\"2182\">\n                      删除结点操作是给定要删除的下标 index（下标从 0\n                      开始），删除的情况分 2 种：\n                    </p>\n                    <ol data-nodeid=\"2183\">\n                      <li data-nodeid=\"2184\">\n                        <p data-nodeid=\"2185\">\n                          如果 index 无效，那么什么也不做；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"2186\">\n                        <p data-nodeid=\"2187\">\n                          如果 index 有效，那么将这个结点删除。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"2188\">\n                      上面这 2 种情况中，Case 1 比较容易处理，相对要麻烦一些的是\n                      Case 2。要删除 index\n                      结点，最好是能找到它前面的结点。有了前面的结点，再删除后面的结点就容易多了。不过我们已经有了\n                      getPrevNode 函数，所以操作起来还是很简单的。\n                    </p>\n                    <p data-nodeid=\"2189\">\n                      以下是具体的操作过程（解析在注释里）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 如果索引 index 有效，则删除链表中的第 index 个节点。</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteAtIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// Case 1. 如果index无效，那么什么也不做。</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> || index &gt;= length) {\n</div></li><li><div class=\"code-word\">&nbsp;   <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// Case 2. 删除index结点</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// step 1. 找到index前面的结点</span>\n</div></li><li><div class=\"code-word\">&nbsp; ListNode pre = getPrevNode(index);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// step 2. 如果要删除的是最后一个结点，那么需要更改tail指针</span>\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-keyword\">if</span> (tail == pre.next) {\n</div></li><li><div class=\"code-word\">&nbsp;   tail = pre;\n</div></li><li><div class=\"code-word\">&nbsp; }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// step. 3 进行删除操作。并修改链表长度。</span>\n</div></li><li><div class=\"code-word\">&nbsp; pre.next = pre.next.next;\n</div></li><li><div class=\"code-word\">&nbsp; length--;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"2191\">\n                      <p data-nodeid=\"2192\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java#L91-L105\"\n                          data-nodeid=\"2471\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp#L137-L150\"\n                          data-nodeid=\"2475\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py#L125-L138\"\n                          data-nodeid=\"2479\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"2193\">总结与延伸</h3>\n                    <p data-nodeid=\"2194\">\n                      在本讲，我向你介绍了三板斧中的第一斧：假头，我们一起成功地设计了一个链表类，其中有\n                      6\n                      种基本操作——初始化、追加结点、头部插入结点、查找结点、插入指定位置前面以及删除结点。你可以参考下图：\n                    </p>\n                    <p data-nodeid=\"2195\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/17/CA/CioPOWBIMhaAJYx8AADVb1uk2iI792.png\"\n                        alt=\"Drawing 13.png\"\n                        data-nodeid=\"2484\"\n                      />\n                    </p>\n                    <p data-nodeid=\"2196\">\n                      这 6\n                      种基本操作是学习链表的基本功，更是解决各种链表题基础的基础！你需要非常熟练地掌握！最后，<strong\n                        data-nodeid=\"2490\"\n                        >设计链表</strong\n                      >完整的代码：\n                    </p>\n                    <blockquote data-nodeid=\"2197\">\n                      <p data-nodeid=\"2198\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/DesignLinkedList.java\"\n                          data-nodeid=\"2494\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.cpp\"\n                          data-nodeid=\"2498\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.py\"\n                          data-nodeid=\"2502\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"2199\">思考题</h3>\n                    <p data-nodeid=\"2200\">\n                      我再给你留一道<strong data-nodeid=\"2509\">思考题</strong\n                      >：如果在链表中进行查找的时候，给定的并不是下标，而是一个数\n                      target，或者是一个结点 ListNode\n                      target，应该如何正确地编写这个查找函数呢？\n                    </p>\n                    <blockquote data-nodeid=\"2201\">\n                      <p data-nodeid=\"2202\">\n                        代码：<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/ans.java\"\n                          data-nodeid=\"2513\"\n                          >Java</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/ans.cpp\"\n                          data-nodeid=\"2517\"\n                          >C++</a\n                        >/<a\n                          href=\"https://github.com/lagoueduCol/Algorithm-Dryad/blob/main/04.LinkedList/ans.py\"\n                          data-nodeid=\"2521\"\n                          >Python</a\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"2203\">\n                      你可以把答案写在评论区，我们一起讨论。接下来请和我一起踏上更加奇妙的算法与数据结构的旅程，继续探索解决链表问题的第二斧<strong\n                        data-nodeid=\"2531\"\n                        >新链表</strong\n                      >、第三斧<strong data-nodeid=\"2532\">双指针</strong\n                      >。让我们继续前进。\n                    </p>\n                    <p data-nodeid=\"2536\" class=\"\">\n                      下一讲将介绍 05 |\n                      链表：如何利用“假头，新链表，双指针”解决链表题？（下）记得按时来探险。\n                    </p>\n            "}