{"title":"13 | 网络安全：常见网络攻击以及防护策略","context":"\n                    <p data-nodeid=\"12942\" class=\"\">\n                      Node.js\n                      作为后台服务，网络相关的安全措施也非常重要，<strong\n                        data-nodeid=\"13019\"\n                        >互联网一些常见的网络攻击策略，我们都应该在框架层面去杜绝</strong\n                      >。本讲就介绍一些常见的网络攻击方式，并介绍如何在框架中增加这类问题的防护措施。我会着重介绍\n                      Node.js\n                      作为后台服务，自身所需要注意的安全问题，为后续我们在线上的应用提供一个参考。\n                    </p>\n                    <h3 data-nodeid=\"12943\">常见的网络攻击</h3>\n                    <p data-nodeid=\"12944\">\n                      这些网络攻击有<strong data-nodeid=\"13026\"\n                        >XSS、CSRF、SQL 注入以及 Dos</strong\n                      >，在 Node.js\n                      作为后台服务时，同样存在这些问题，这里简单演示下可能出现问题的场景，以及如何去防御。\n                    </p>\n                    <h4 data-nodeid=\"12945\">XSS</h4>\n                    <p data-nodeid=\"12946\">\n                      这里就不对概念进行阐述，我们看下下面这段代码。这里尽量不要直接吐出数据，而是统一经过处理层进行转化。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Xss</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Controller</span> </span>{\n</div></li><li><div class=\"code-word\">    index() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> params = querystring.parse(<span class=\"hljs-keyword\">this</span>.ctx.request.querystring);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-built_in\">decodeURI</span>(params[<span class=\"hljs-string\">'name'</span>]);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.ctx.response.body = name;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//return this.resApi(true, 'good', a);</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = Xss;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12948\">\n                      在上面代码中，<strong data-nodeid=\"13038\"\n                        >没有对 name\n                        进行任何处理，就直接返回给接口，并且没有经过我们的\n                        resApi 服务，而是使用 body 直接设置返回</strong\n                      >。这样就会导致，<strong data-nodeid=\"13039\"\n                        >当 name 为一个 HTML 或者 JS 都会被浏览器执行</strong\n                      >。当我们启动服务后，访问以下地址，都会出现一些异常问题。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/v1/xss/index?name=%3Cscript%3Ealert(%27nodejs%27)%3C/script%3E</span>\n</div></li><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/v1/xss/index?name=%3Chtml%3E%3Ch1%3E%E6%88%91%E6%83%B3%E6%89%93%E5%8D%B0%E4%BB%80%E4%B9%88%EF%BC%8C%E5%B0%B1%E6%89%93%E5%8D%B0%E4%BB%80%E4%B9%88%EF%BC%8C%E4%BD%A0%E7%BD%91%E7%AB%99%E8%A2%AB%E6%94%BB%E5%87%BB%E4%BA%86%3C/h1%3E%3C/html%3E</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12950\">\n                      这里<strong data-nodeid=\"13045\"\n                        >最简单的防御方式就是使用我们统一的 resApi\n                        处理响应数据</strong\n                      >，因为在 resApi 中固定了返回结果，进行了 JSON.stringify\n                      处理，所有的返回都会封装为一个 json 字符串，因此不会存在\n                      XSS 的问题。\n                    </p>\n                    <h4 data-nodeid=\"12951\">CSRF</h4>\n                    <p data-nodeid=\"12952\">\n                      <strong data-nodeid=\"13051\">跨站攻击</strong\n                      >，举个简单的例子，在前端一般会将登录态相关的信息保存在\n                      Cookie 中，假设我们已经在 A 站点登录了，接下来我在 B\n                      域名站点，诱骗在 A 站登录的用户，发起一个 A\n                      站点的接口请求，而这时候 A 站请求会携带 Cookie\n                      给到服务端，服务端会正常的响应，从而我在 B\n                      站可以诱骗各种支付或者扣款请求。\n                    </p>\n                    <p data-nodeid=\"12953\">\n                      这种安全问题对后台服务的影响还是非常大的，而 Node.js\n                      作为后台服务也需要做一定的安全校验，其中一个是<strong\n                        data-nodeid=\"13061\"\n                        >对 referer 的校验通用做法</strong\n                      >，也就是只允许我们制定的域名发送的请求，其他站点则认为是非法请求，比如下面我们的中间件，只要存在\n                      referer，并且 referer\n                      不在我们的域名白名单下，那么则<strong data-nodeid=\"13062\"\n                        >直接返回 403 拒绝访问</strong\n                      >。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> baseFun = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../lib/baseFun'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> whiteList = [\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'127.0.0.1:3000'</span>\n</div></li><li><div class=\"code-word\">];\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"> ctx, next </span>) </span>{\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-keyword\">if</span>(ctx.request.headers.referer &amp;&amp; !whiteList.includes(ctx.request.headers.referer)){\n</div></li><li><div class=\"code-word\">            baseFun.setResInfo(ctx, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'access have been forbidden'</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">403</span>);\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">       }\n</div></li><li><div class=\"code-word\">       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">await</span> next();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12955\">\n                      另外一个是<strong data-nodeid=\"13068\"\n                        >后台服务在写操作时，使用 token 校验方式</strong\n                      >，这里我们应用的是 JWT，也就是在用户打开页面时，将 token\n                      写入页面的隐藏元素中，当请求接口时从页面元素中获取\n                      token，再传递到接口参数中，这样第三方站点因为没有打开页面是无法获取到这个\n                      token 的。\n                    </p>\n                    <h4 data-nodeid=\"12956\">SQL 注入</h4>\n                    <p data-nodeid=\"12957\">\n                      在 Node.js 中应用 MySQL 时要特别注意这点，<strong\n                        data-nodeid=\"13075\"\n                        >因为 SQL\n                        语句中包含了外部的参数，如果参数没有做任何处理，将导致用户可以根据自己的意愿拼装\n                        SQL\n                        语句在数据库中执行，从而影响业务服务的正常运行</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"12958\">\n                      假设我们需要查询一个名字为 'Node.js' 的学生，在 Node.js\n                      中，假设我们这样去拼装并执行语句。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Sql</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Controller</span> </span>{\n</div></li><li><div class=\"code-word\">    index() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> params = querystring.parse(<span class=\"hljs-keyword\">this</span>.ctx.request.querystring);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-built_in\">decodeURI</span>(params[<span class=\"hljs-string\">'name'</span>]);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">/// connection 是 mysql 的链接句柄</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> queryStr    = <span class=\"hljs-string\">'SELECT * FROM student WHERE name = \"'</span> + name + <span class=\"hljs-string\">'\"'</span>; \n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">//connection.query(queryStr, function(err, results) {});</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-built_in\">console</span>.log(queryStr);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.resApi(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'good'</span>, queryStr);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = Sql;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12960\">\n                      在上面代码例子中，获取参数 name 的值，然后拼接到 queryStr\n                      中，组装成一个 SQL 语句，这里如果 name\n                      传递正常的值当然是没有问题的，比如下面这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/v1/sql/index?name=Node.js</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12962\">\n                      但是如果我们传递的是下面这样的 name：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/v1/sql/index?name=自定义\";DELETE FROM student;\"</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12964\">\n                      你就会发现其实<strong data-nodeid=\"13088\"\n                        >SQL 语句不仅仅是执行了一条 SELECT 语句，还执行了一个\n                        DELETE student 表的操作</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"12965\">\n                      以上是非常危险的行为，<strong data-nodeid=\"13098\"\n                        >通过这个漏洞可以直接对 SQL 的数据库进行攻击</strong\n                      >。那么如何去防御呢？在 Node.js 中有最常见的方法是<strong\n                        data-nodeid=\"13099\"\n                        >使用占位符的方式</strong\n                      >，也就是使用下面的方式替代拼装 SQL 语法的方法：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">connection.query(<span class=\"hljs-string\">'SELECT * FROM student WHERE name = ?'</span>, [name], function(err, results) {})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12967\">\n                      <strong data-nodeid=\"13104\"\n                        >使用这种方式会自动将 name 进行转译，以防止其他 SQL\n                        语法的混入</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"12968\">Dos</h4>\n                    <p data-nodeid=\"12969\">\n                      <strong data-nodeid=\"13114\"\n                        >这种网络攻击的主要原理就是通过模拟无效的海量用户请求，来导致后台服务的崩溃现象</strong\n                      >。一般这种在后台服务中不需要考虑，可以直接在网关层进行处理，如果真的没有网关层的话，可以考虑使用\n                      NPM 中的一个<a\n                        href=\"https://www.npmjs.com/package/ddos?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"13112\"\n                        >ddos 库</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"12970\">\n                      以上就是常见的互联网的攻击方式，但是在 Node.js\n                      中还存在一些特别的情况，下面我们就来看下这些特殊情况的例子，以及如何去应对。\n                    </p>\n                    <h3 data-nodeid=\"12971\">Node.js 中特有的一些问题</h3>\n                    <p data-nodeid=\"12972\">\n                      在应用 Node.js 作为后台服务时，以下 3\n                      种情况是非常要注意的，不注意的话会严重导致线上安全问题，从而导致公司、企业的严重损失。\n                    </p>\n                    <h4 data-nodeid=\"12973\">eval 函数</h4>\n                    <p data-nodeid=\"12974\">\n                      <strong data-nodeid=\"13123\"\n                        >在任何情况下，都应杜绝使用该函数，因为该函数存在非常不可控的因素，这点和\n                        SQL 注入相似，相当于 JS 代码注入</strong\n                      >，比如下面这段代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> querystring = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'querystring'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> Controller = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../../core/controller'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Eval</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Controller</span> </span>{\n</div></li><li><div class=\"code-word\">    index() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> params = querystring.parse(<span class=\"hljs-keyword\">this</span>.ctx.request.querystring);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 获取参数 r</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> r = <span class=\"hljs-built_in\">decodeURI</span>(params[<span class=\"hljs-string\">'r'</span>]);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 根据参数 r 动态调用 this._p() 获取执行结果</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> ret = <span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\\`this._q() + <span class=\"hljs-subst\">${r}</span>\\`</span>);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.resApi(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'good'</span>, ret);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    _q () {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    _p () {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = Eval;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12976\">\n                      代码比较简单，假设我们希望用 eval\n                      来动态调用内部的一些函数，因此我们使用了 r\n                      这个参数，正常情况下是可以调用，但是如果我们调用下面的地址：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/v1/eval/index?r=this._p();console.log('d');const fs=require('fs');fs.readFileSync(__filename, 'utf8')</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12978\">\n                      访问后，你会发现很恐怖的一幕，源代码直接被返回了，如图 1\n                      所示。\n                    </p>\n                    <p data-nodeid=\"12979\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/20/CioPOWB1u9iAa6CoAAEyQ6iErU8829.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"13128\"\n                      />\n                    </p>\n                    <div data-nodeid=\"12980\">\n                      <p style=\"text-align: center\">图 1 eval 泄漏源代码例子</p>\n                    </div>\n                    <p data-nodeid=\"12981\">\n                      因此<strong data-nodeid=\"13134\"\n                        >无论任何情况下，代码中都不允许 eval\n                        的使用，因为不可控因素太大</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"12982\">文件读写</h4>\n                    <p data-nodeid=\"12983\">\n                      在我们之前设计路由的时候，有讲解过这个路径的问题，就像下面这段代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"> <span class=\"hljs-comment\">// 去除非常规请求路径，将-转化为大写</span>\n</div></li><li><div class=\"code-word\">pathname = pathname.replace(<span class=\"hljs-string\">'..'</span>, <span class=\"hljs-string\">''</span>).replace(<span class=\"hljs-regexp\">/\\-(\\w)/g</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">all,letter</span>)=&gt;</span>letter.toUpperCase());\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12985\">\n                      第一个 replace 的两个点是非常重要的，这样我们才能控制\n                      require 的文件仅仅只在 controller 文件夹下。\n                    </p>\n                    <p data-nodeid=\"12986\">\n                      接下来我们看一个没有控制好目录路径导致的问题，比如下面这段代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Fs</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Controller</span> </span>{\n</div></li><li><div class=\"code-word\">    index() {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> params = querystring.parse(<span class=\"hljs-keyword\">this</span>.ctx.request.querystring);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 根据产品名称获取产品的配置信息</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">let</span> product = <span class=\"hljs-built_in\">decodeURI</span>(params[<span class=\"hljs-string\">'product'</span>]);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">let</span> productInfo = fs.readFileSync(<span class=\"hljs-string\">\\`<span class=\"hljs-subst\">${__dirname}</span>/../../config/products/<span class=\"hljs-subst\">${product}</span>.json\\`</span>, <span class=\"hljs-string\">'utf8'</span>);\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.resApi(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-string\">'good'</span>, productInfo);\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">catch</span>(err){\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.resApi(<span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">'can not find the product'</span>);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12988\">\n                      正常访问以下两个链接都可以拿到我们具体需要的正常逻辑。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/v1/fs/index?product=c</span>\n</div></li><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/v1/fs/index?product=d</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12990\">\n                      如图 2 所示的是一个正常的响应结果。\n                    </p>\n                    <p data-nodeid=\"12991\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/37/18/Cgp9HWB1u-eAICCOAAAyzg3koIs578.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"13143\"\n                      />\n                    </p>\n                    <div data-nodeid=\"12992\">\n                      <p style=\"text-align: center\">图 2 fs 正常响应</p>\n                    </div>\n                    <p data-nodeid=\"12993\">\n                      但是<strong data-nodeid=\"13149\"\n                        >如果我们访问了以下地址，就直接导致了配置文件泄漏，从而引发了数据库账号和密码被泄漏的安全问题</strong\n                      >。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">http:<span class=\"hljs-comment\">//127.0.0.1:3000/v1/fs/index?product=../b</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"12995\">\n                      访问以后，你就可以通过上面代码访问到我们项目中的所有配置文件了，而配置文件中包含了非常多敏感信息，如图\n                      3 所示。\n                    </p>\n                    <p data-nodeid=\"12996\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/20/CioPOWB1u--ARC0iAABHYTevEBU886.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"13153\"\n                      />\n                    </p>\n                    <div data-nodeid=\"12997\">\n                      <p style=\"text-align: center\">图 3 泄漏配置文件响应</p>\n                    </div>\n                    <p data-nodeid=\"12998\">\n                      解决方案的话，就是将访问的配置文件，<strong\n                        data-nodeid=\"13159\"\n                        >控制在当前配置文件目录下</strong\n                      >，因此你需要将这种 ..\n                      路径进行替换，比如使用下面代码修复后，就解决了该问题。你再次启动服务，访问上面路径后，将会提示访问路径异常的信息。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 去掉上层目录访问</span>\n</div></li><li><div class=\"code-word\">product = product.replace(<span class=\"hljs-string\">'..'</span>, <span class=\"hljs-string\">''</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13000\">\n                      但是这里要注意，这样还是可以访问同目录下的文件的，因此最好的方式是，<strong\n                        data-nodeid=\"13165\"\n                        >将配置文件归类，并且做好校验，非范围内的配置文件不允许读取</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"13001\">\n                      其次在写文件时，更加要注意风险问题，一般情况下，<strong\n                        data-nodeid=\"13175\"\n                        >分开写目录和源代码目录</strong\n                      >，例如可以将上传的文件或者日志文件放到另外一个单独目录，并控制权限即可。<strong\n                        data-nodeid=\"13176\"\n                        >以防代码写漏洞，导致本地文件被篡改，或者写入一些脚本文件从而控制服务器</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"13002\">\n                      为了更清晰了解写带来的风险，我们同样写了一个测试代码，你可以看下\n                      Fs 类中的 writeTest\n                      方法，也可以自行地去测试一下，这部分就交给你去实践了。测试时，你需要使用\n                      Postman 来发送数据，例如图 4 所示。\n                    </p>\n                    <p data-nodeid=\"13003\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/37/18/Cgp9HWB1u_eAPII6AAEJsYGMP54262.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"13180\"\n                      />\n                    </p>\n                    <div data-nodeid=\"13004\">\n                      <p style=\"text-align: center\">图 4 测试文件写风险</p>\n                    </div>\n                    <h4 data-nodeid=\"13005\">非 root 用户权限</h4>\n                    <p data-nodeid=\"14254\" class=\"te-preview-highlight\">\n                      <strong data-nodeid=\"14259\"\n                        >在大部分情况下 Node.js\n                        的进程是无须太多权限的，只需要一些固定目录的读写权限，因此我们只需要赋予\n                        Node.js 服务最低的用户权限，一定不要设置为 root\n                        权限</strong\n                      >。比如上面我们的 eval 函数导致的问题，如果你是使用 root\n                      权限，那么就可以通过 Node.js fs\n                      获取主机的登录密码，从而直接控制这台机器。而在大部分公司，主机和主机都是内网互通，如果单台内网机器被攻克后，就相当于整个公司的内网系统沦陷了。\n                    </p>\n\n                    <p data-nodeid=\"13007\">\n                      为了解决这个问题，<strong data-nodeid=\"13192\"\n                        >我们可以新建一个独立的用户，然后创建 Node.js\n                        所需要读写的日志以及其他目录权限赋予读写权限</strong\n                      >，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">adduser username\n</div></li><li><div class=\"code-word\">chown -R /path\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"13009\">\n                      <strong data-nodeid=\"13197\"\n                        >第一步创建用户，第二步为用户归属权限</strong\n                      >，一般情况下只需要归属当前源代码路径和需要写日志的目录。\n                    </p>\n                    <h3 data-nodeid=\"13010\">总结</h3>\n                    <p data-nodeid=\"13011\">\n                      本讲介绍了常见的一些网络攻击方案，其次着重介绍了在 Node.js\n                      中要注意的安全风险问题。网络攻击一般是面试中常被问及的题目，因此我们需要着重学习其原理，其次针对\n                      Node.js\n                      的安全问题则是你在编码过程中非常要注重的，避免在应用\n                      Node.js 的过程中导致企业受到损失。\n                    </p>\n                    <p data-nodeid=\"13012\">\n                      如果你还有其他的一些安全性问题，也可以在本讲下面进行留言，我将和你一起探讨如何解决这些线上安全问题。\n                    </p>\n                    <p data-nodeid=\"13013\" class=\"\">\n                      下一讲我们将介绍一个可以轻松地协助我们来做各种性能提前校验的工具，其次会实践应用该工具融合到我们的框架中。\n                    </p>\n            "}