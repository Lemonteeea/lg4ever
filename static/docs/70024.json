{"title":"23 | 站在生活的十字路口，如何用数学抉择？","context":"\n                    <p data-nodeid=\"3362\" class=\"\">\n                      人的一生需要面临很多重大的选择和决策，举例而言：\n                    </p>\n                    <ul data-nodeid=\"3363\">\n                      <li data-nodeid=\"3364\">\n                        <p data-nodeid=\"3365\">\n                          大漂亮毕业一年后遇到了一个小伙靠谱哥；面对靠谱哥的追求，大漂亮是应该接受还是拒绝？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3366\">\n                        <p data-nodeid=\"3367\">\n                          大迷糊工作 3\n                          年，猎头推荐给他一个不错的工作机会，面对年薪 30%\n                          的涨幅，大迷糊是接受 offer 还是拒绝 offer？\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3368\">\n                      除了这些重大决策以外，我们生活中也需要做一些小的决策。\n                    </p>\n                    <ul data-nodeid=\"3369\">\n                      <li data-nodeid=\"3370\">\n                        <p data-nodeid=\"3371\">\n                          例如，点外卖时遇到满 30 元减 8 元，是强迫自己多消费到\n                          30 元，还是只买自己所需的物品？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3372\">\n                        <p data-nodeid=\"3373\">\n                          打德州扑克的时候，面对对手的加注，是跟注还是弃牌？\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3374\">\n                      其实，当你面对这些选择时，完全可以利用数学知识来做出更合理的决策。这一讲的彩蛋，我们就围绕其中的几个场景，试着从数学的角度来进行解析。\n                    </p>\n                    <h3 data-nodeid=\"3375\">放弃还是继续，如何选择最优？</h3>\n                    <p data-nodeid=\"3376\">\n                      人生充满了不确定性。在面临不确定性的时候，我们经常会面临下面的选择：是珍惜眼前，还是寄希望于未来？\n                    </p>\n                    <p data-nodeid=\"3377\">\n                      举个例子，大漂亮是个各方面条件都很不错的女孩子。工作之后，她遇到一个男生靠谱哥，靠谱哥身上有优点，也有缺点，但综合来看，确实是个靠谱的年轻人。\n                    </p>\n                    <p data-nodeid=\"3378\">\n                      那么，大漂亮是应该放弃靠谱哥，期待以后能遇到更优秀的男生；还是珍惜眼前，接受聪明哥的爱意，继续这段姻缘呢？\n                    </p>\n                    <p data-nodeid=\"3379\">\n                      这就是一个在不确定性环境中，需要做出最优决策的问题。在这里，大漂亮面对的不确定性环境是，拒绝靠谱哥后还能不能遇到更优秀的男生。\n                    </p>\n                    <p data-nodeid=\"3380\">\n                      人生的魅力就在于未来，而未来的特点就是不确定，人生中诸如此类的选择还有很多。而我们的数学家们，对这一类问题进行了抽象，总结出了经典的最优停止问题。\n                    </p>\n                    <h4 data-nodeid=\"3381\">【最优停止问题】</h4>\n                    <p data-nodeid=\"3382\">\n                      最优停止问题有很多中描述方式，我们以“聘请秘书”为例来描述。\n                    </p>\n                    <p data-nodeid=\"3383\">\n                      假设大聪明要聘请一名秘书，现在有 n 人来面试，其中 n\n                      是已知的，每个候选人的能力有量化的得分。现在，这些候选人被按照随机的顺序进行面试，大聪明每次只能面试一个候选人，查看该候选人的能力得分，并需要立即决定是否聘用该候选人。\n                    </p>\n                    <p data-nodeid=\"3384\">\n                      如果决定不聘用该候选人，这个候选人便不会再回来；如果决定聘用该候选人，后续的候选人就没有面试的机会了。\n                    </p>\n                    <p data-nodeid=\"3385\">\n                      <strong data-nodeid=\"3521\"\n                        >问：大聪明用怎样的策略，才能让他有更高的概率选到能力得分最高的候选人？</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"3386\">\n                      顾名思义，最优停止问题，就是面对一个又一个的输入样本，去选择一个最好的停止时刻。它有以下几个特点。\n                    </p>\n                    <ul data-nodeid=\"3387\">\n                      <li data-nodeid=\"3388\">\n                        <p data-nodeid=\"3389\">\n                          第一，候选人只能一个接一个地面试，不能同时参加面试；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3390\">\n                        <p data-nodeid=\"3391\">\n                          第二，面试官大聪明能且只能选择聘用 1 个候选人；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3392\">\n                        <p data-nodeid=\"3393\">\n                          第三，面试当场，大聪明就需要做出聘用与否的决策，不能“骑驴找马”地选择待定。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3394\">\n                      接下来，我们就来通过数学的方式去计算出最优的策略。\n                    </p>\n                    <p data-nodeid=\"3395\">\n                      其实，最优停止问题的答案很简单；有时候，也被人简称为“三七法则”。具体而言，是对前\n                      m 个候选人，不论多么优秀，都拒绝聘用。接着，从第 m+1\n                      个人开始，如果遇到了一个比先前所有面试者都优秀的候选人，那么就聘请这个人。\n                    </p>\n                    <p data-nodeid=\"3396\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/1E/CgqCHl_4On2AWkMfAAFOSLgthls359.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"3530\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3397\">\n                      流程上如上图所示，而之所以被称为“三七法则”，是因为当 m/n\n                      等于 37%\n                      时，选到能力得分最高的候选人的概率是最大的，而且这个选中最优候选人的最大的概率也恰好是\n                      0.37。\n                    </p>\n                    <h4 data-nodeid=\"3398\">【代码实现】</h4>\n                    <p data-nodeid=\"3399\">\n                      我们先试着用代码仿真一下上面的结论。我们假设候选人的人数 n\n                      为 100，每个候选人都有一个能力得分，取值为 0 到 1\n                      之间的小数，则代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"python\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> random\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n</div></li><li><div class=\"code-word\">t = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">f = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1000</span>):\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; a = np.random.random((<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">1</span>))\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; all_max = max(a)\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; get = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; m_max = max(a[<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">37</span>])\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">37</span>,<span class=\"hljs-number\">100</span>):\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> a[k] &gt; m_max:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; get = a[k]\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">break</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> get == all_max:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; t += <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">else</span>:\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; f += <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"true: \"</span> + str(t)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"false: \"</span> + str(f)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">\"percentage: \"</span> + str(<span class=\"hljs-number\">100.0</span>*t/(t+f))\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"3401\">我们对代码进行走读：</p>\n                    <ul data-nodeid=\"3402\">\n                      <li data-nodeid=\"3403\">\n                        <p data-nodeid=\"3404\">\n                          第 4 行和第 5\n                          行，分别定义两个变量，用来存放找到最优候选人的次数和没有找到最优候选人的次数；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3405\">\n                        <p data-nodeid=\"3406\">\n                          第 6 行开始，执行一个 1000 次的循环；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3407\">\n                        <p data-nodeid=\"3408\">\n                          在每次的循环中，第 7 行，调用随机函数生成一个 100\n                          维的数组 a，数组 a 中的每个元素，都是 0 到 1\n                          之间的小数，代表候选人的能力得分；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3409\">\n                        <p data-nodeid=\"3410\">\n                          第 8 行，调用 max 函数，保存好数组 a\n                          中的最大值，也就是能力最高的候选人的能力得分；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3411\">\n                        <p data-nodeid=\"3412\">\n                          第 9 行，定义 get\n                          变量，用来保存用“三七法则”找到的候选人的能力得分；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3413\">\n                        <p data-nodeid=\"3414\">\n                          第 10 行，再调用 max 函数，计算出前 37%\n                          的候选人的能力最大值；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3415\">\n                        <p data-nodeid=\"3416\">\n                          第 11 行开始，对 a 数组的 37% 位置之后的元素，开始执行\n                          for 循环；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3417\">\n                        <p data-nodeid=\"3418\">\n                          第 12 行，判断循环过程中的元素，是否比前 37%\n                          个元素的最大值还要大；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3419\">\n                        <p data-nodeid=\"3420\">\n                          如果是，则执行第 13\n                          行，找到“三七法则”的输出结果，并跳出循环；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3421\">\n                        <p data-nodeid=\"3422\">\n                          接着，第 15\n                          行，判断“三七法则”找到的最大值，和a数组全局视角的最大值是否相等；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3423\">\n                        <p data-nodeid=\"3424\">\n                          如果是，则第 16 行的 t 变量加 1；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3425\">\n                        <p data-nodeid=\"3426\">\n                          否则，则第 18 行的 f 变量加 1；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3427\">\n                        <p data-nodeid=\"3428\">\n                          最后，第 19～21 行，打印 1000 次循环的结果。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3429\">\n                      我们运行代码的结果如下图所示。在 1000\n                      次的试验中，采用“三七法则”找到最大值的次数有 376\n                      次，没有找到最大值有 624 次。综合来看，找到最大值的概率是\n                      37.6%，这远比我们随机去猜（100 个样本选最优，1%\n                      的选中概率）要好得多。\n                    </p>\n                    <p data-nodeid=\"3430\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/F3/Cip5yF_4JNOAZbefAABj-yXEv6M405.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"3551\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3431\">\n                      这里我们通过代码仿真，已经模拟并验证了“三七法则”这一结论；而关于“三七法则”的数学推导，则需要用到调和级数等高等数学的知识，感兴趣的同学可以自己去查阅一些资料来补充学习。\n                    </p>\n                    <h4 data-nodeid=\"3432\">【婚恋中的“三七法则”】</h4>\n                    <p data-nodeid=\"3433\">\n                      在这里，我们给出一些基于“三七法则”的实战建议。老话说，“枪打出头鸟”“万事开头难”，这些话在“三七法则”面前还是有一定道理的。\n                    </p>\n                    <p data-nodeid=\"3434\">\n                      如果最优秀的候选人出现在了前 37%\n                      个样本中，那么无论如何他都是不会被选中的；反过来，躲在最后也不是最好的选择。这是因为，如果最优秀的候选人躲在最后才去参加竞争，很可能被第二优秀或者第三优秀的人，捷足先登抢到了机会。\n                    </p>\n                    <p data-nodeid=\"3435\">\n                      我们回到最开始大漂亮和靠谱哥的故事中，试着用“三七法则”给大漂亮一些建议。我们假设女孩子会在\n                      18～30 岁结婚。那么，这个年龄段的前 37%\n                      的时间内，不论遇到谁、不论他多么优秀，大漂亮都不应该去考虑结婚。\n                    </p>\n                    <p data-nodeid=\"3436\">\n                      而此阶段的终止年龄是 18+(30-18)×0.37=22.44\n                      岁，也就是大漂亮到了 22.44\n                      岁后，如果她遇到了一个比先前所有遇到的人都优秀的男孩子，那么她应该去考虑与这个男孩子相处并结婚。所以，决定大漂亮是否要接受靠谱哥有两个条件，分别是：\n                    </p>\n                    <ul data-nodeid=\"3437\">\n                      <li data-nodeid=\"3438\">\n                        <p data-nodeid=\"3439\">\n                          大漂亮的年龄是否到达了 22.44 岁；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3440\">\n                        <p data-nodeid=\"3441\">\n                          靠谱哥是否比大漂亮之前遇到过的人都优秀。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3442\">\n                      在《王牌对王牌》的一期节目中，韩雪喊出的青春告白，就是“三七法则”的道理。虽然她的表述不完全正确，但她还是准确地提到了\n                      22.44 岁。看来，这背后定有数学高人在指导韩雪和节目组啊。\n                    </p>\n                    <p data-nodeid=\"3443\">\n                      当然啦，你可能认为人在大学四年的时期都过于幼稚迷茫，并不是好的择偶期，那你可以将时间定义为\n                      22～30 岁，那么对应的 37% 就是 25\n                      岁，也刚好是毕业三年后，职场新人蜕变的时期，希望你可以在这时事业、爱情双丰收。\n                    </p>\n                    <p data-nodeid=\"3444\">\n                      又聊回了“职场话题”，我们看看大漂亮的学长“大迷糊”的职业发展情况吧。\n                    </p>\n                    <h3 data-nodeid=\"3445\">涨薪 30%，跳槽吗？</h3>\n                    <p data-nodeid=\"3446\">\n                      很多人，尤其是那些不愁 offer\n                      的优秀的人，常常会纠结要不要跳槽。其实，这也可以用数学去进行一些计算，来辅助做出一些决策的。\n                    </p>\n                    <p data-nodeid=\"3447\">\n                      我们先把所有可能影响跳槽的因素列出来。在这里，我大致总结出以下几个关键因素：薪酬、职级、个人能力成长空间、适应成本、与领导的信任关系、公司发展前景。接着，我们需要对比出新旧两份工作在这些因素上的得失。如果总得比总失多，就可以考虑跳槽；如果总得比总失少，得不偿失，就不应该跳槽。\n                    </p>\n                    <p data-nodeid=\"3448\">\n                      下面给你一个关于跳槽涨薪的案例。大迷糊是一线互联网公司的工程师，他的薪酬在所在职级中是中等偏上的水平。由于多年的刻苦努力工作，大迷糊在公司中与领导的信任关系很好。下半年，因为公司高管调整，大迷糊的主管被调整到其他部门。随之而来的，是一个毫不认识的新主管。\n                    </p>\n                    <p data-nodeid=\"3449\">\n                      在同年 11 月，大迷糊拿到了另一个超一线互联网公司的工程师\n                      offer，获得了 30%\n                      的薪酬涨幅，职级也相应提高了一级。对方要求大迷糊在 11\n                      月内做出决策，是否接受 offer 并入职。\n                    </p>\n                    <h4 data-nodeid=\"3450\">【现在是否应该跳槽？】</h4>\n                    <p data-nodeid=\"3451\">\n                      我们来帮大迷糊计算一下得失吧，以“新\n                      offer”代表新机会，以“旧公司”代表当前的公司。\n                    </p>\n                    <ul data-nodeid=\"3452\">\n                      <li data-nodeid=\"3453\">\n                        <p data-nodeid=\"3454\">\n                          <strong data-nodeid=\"3573\">首先，算一下薪酬</strong>\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3455\">\n                      在 11\n                      月内跳槽，意味着失去了旧公司当年的年终奖，这是“失”。我们假设年终奖是\n                      3 个月，大迷糊在旧公司的月薪是 a 元，那么总“失”为 L=3a；\n                    </p>\n                    <p data-nodeid=\"3456\">\n                      新的 offer 年薪上有 30% 的涨幅，但 11\n                      月入职的员工，却不会被新公司普调覆盖，而旧公司的普调平均值是\n                      8%。那么大迷糊未来一年内的总“得”，为\n                      G=(30%-8%)a×(12+3)=3.3a。\n                    </p>\n                    <p data-nodeid=\"3457\">\n                      这样，总“得”和总“失”的差值为 G-L=0.3a&gt;0。\n                    </p>\n                    <ul data-nodeid=\"3458\">\n                      <li data-nodeid=\"3459\">\n                        <p data-nodeid=\"3460\">\n                          <strong data-nodeid=\"3580\"\n                            >其次，再计算一下职级</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3461\">\n                      新的 offer\n                      涨了一级，这是“得”；然而，旧公司次年也有晋升机会，大迷糊是骨干，我们假设大他在旧公司的晋升概率为\n                      0.7，这显然就是潜在的“失”。\n                    </p>\n                    <p data-nodeid=\"3462\">\n                      那么在职级这里的总“得”和总“失”的差值，为 G-L=1-0.7×1=0.3级\n                      &gt; 0\n                    </p>\n                    <ul data-nodeid=\"3463\">\n                      <li data-nodeid=\"3464\">\n                        <p data-nodeid=\"3465\">\n                          <strong data-nodeid=\"3586\"\n                            >接着，个人能力成长空间</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3466\">\n                      我们假设这一项是差不多的，毕竟在一线互联网公司中，工程师还是比较吃香的。\n                    </p>\n                    <ul data-nodeid=\"3467\">\n                      <li data-nodeid=\"3468\">\n                        <p data-nodeid=\"3469\">\n                          <strong data-nodeid=\"3591\">下一个，适应成本</strong>\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3470\">\n                      大迷糊是旧公司的老员工，对于公司的制度文化、工作环境、同事相处，都必然会更适应，这里没有“得”，因为不跳槽并不会让自己的适应性增强。\n                    </p>\n                    <p data-nodeid=\"3471\">\n                      然而，到了新公司后，新的工作环境、全新的同事、新公司的文化氛围，都是需要一定的时间来适应。这样看，适应成本就由适应期时间长短决定了。\n                    </p>\n                    <p data-nodeid=\"3472\">\n                      因为适应期必然大于零，所以这里一定会有“失”，即 G-L&lt;0。\n                    </p>\n                    <ul data-nodeid=\"3473\">\n                      <li data-nodeid=\"3474\">\n                        <p data-nodeid=\"3475\">\n                          <strong data-nodeid=\"3600\"\n                            >再下一个，与领导的信任关系</strong\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3476\">\n                      很多人会说，旧公司因为高管调整，空降了一个新的主管。这对阿强来说并不是个好消息。然而问题就在于，跳槽也是无法解决这个矛盾的。大迷糊去了一个新的公司，仍然要与一个不认识的领导，要去重新相处，去建立新的信任关系。\n                    </p>\n                    <p data-nodeid=\"3477\">\n                      所以说，在这个维度上，没有“得”，也没有“失”，即 G-L=0。\n                    </p>\n                    <ul data-nodeid=\"3478\">\n                      <li data-nodeid=\"3479\">\n                        <p data-nodeid=\"3480\">\n                          <strong data-nodeid=\"3606\">最后，公司发展前景</strong>\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3481\">\n                      大迷糊由一线公司，跳槽到超一线公司，公司前景必然是更广阔了。然而，公司的前景和个人的回报之间，很难有明确、量化的兑换关系，这里的得和失很难被计算了。\n                    </p>\n                    <p data-nodeid=\"3482\">明确的是，得大于失，G-L&gt;0。</p>\n                    <p data-nodeid=\"3483\">\n                      好了，我们把以上所有的因素总结在下面的表格里，来帮助大迷糊做最后的抉择。\n                    </p>\n                    <p data-nodeid=\"3484\">\n                      |<br />\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8D/13/Ciqc1F_4OgWAEs7eAAIt1zKMAGE193.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"3614\"\n                      /><br />\n                      根据这个表格，我们能发现，任何一个维度都不支持大迷糊做出跳槽的动作。所以，大迷糊更好的选择是，拒绝\n                      offer，继续在旧公司工作。\n                    </p>\n                    <h4 data-nodeid=\"3485\">【跳槽合适的时机？】</h4>\n                    <p data-nodeid=\"3486\">\n                      那么，什么时候大迷糊才能跳槽呢？我们把上面的环境稍稍改动就会得到不一样的结果。假设，新\n                      offer 的时间并不是 11 月，而是次年的 4\n                      月份，此时改变的因素有二：\n                    </p>\n                    <ul data-nodeid=\"3487\">\n                      <li data-nodeid=\"3488\">\n                        <p data-nodeid=\"3489\">\n                          第一，大迷糊已经收到了年终奖，或者旧公司经营惨淡，年终奖几乎为\n                          0；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"3490\">\n                        <p data-nodeid=\"3491\">\n                          第二，大迷糊已经参加了旧公司的晋升，并且晋升失败。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"3492\">\n                      那么上面的表格就要做出下面红色部分的修正。在薪酬和职级上，原本的损失都没了。得失关系，也由原来的“大得大失”变成了“大得无失”。此时的环境，就足够支撑大迷糊去做出跳槽的抉择了。\n                    </p>\n                    <p data-nodeid=\"3493\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/04/F9/CgpVE1_4OhyACU_MAAI3FrPAu7s931.png\"\n                        alt=\"图片2.png\"\n                        data-nodeid=\"3624\"\n                      />\n                    </p>\n                    <p data-nodeid=\"3494\">\n                      最后，我们为跳槽的决策做一些实战性总结。跳槽时，一定要算清楚、想明白“得”和“失”。在考虑跳槽时机的时候，一定要尽量让结果是增加自己的“得”，降低自己的“失”，充分考虑清楚，千万不能因为一时冲动而做出“小得大失”的决定。那样，最终吃亏的还是自己。\n                    </p>\n                    <p data-nodeid=\"3495\">\n                      另外，在薪酬和职级这两个维度上，通常在上半年的 3～4\n                      月是“失”最小的时间。这是因为，你已经拿到了上一年的年终奖，且绝大多数的互联网公司的晋升和普调都是在这个时间点上。这样，不管是钱还是级，你的损失都已经降到了最低。这也是找工作中常说的“金三银四”背后的道理。\n                    </p>\n                    <p data-nodeid=\"3496\">\n                      当然了，如果你决定跳槽，也一定要在拉勾网这样的大平台上去多多寻找机会。大平台有更多一线以上公司的招聘机会，所以你在公司发展前景这个维度上，会有更多收益。\n                    </p>\n                    <h3 data-nodeid=\"3497\">小结</h3>\n                    <p data-nodeid=\"3498\">\n                      人生的魅力来自未来的不确定性。也是因此，人们常常需要在不确定性的环境中，做出选择。在做抉择时，一个通用的思路是计算得失。你所有的决策依据，都应该是尽可能降低自己的“失”，而谋求更多的“得”。\n                    </p>\n                    <p data-nodeid=\"3499\">\n                      与此同时，有了数学武器，不代表你能做出最完美的选择。这是因为，在人生的不确定性中，总有你计算之外的不确定因素。因此，在做抉择时，你还需要调整好心态，做到“不以物喜，不以己悲”。只要你计算的过程是正确的，就不需要因为一时的得失而气馁。\n                    </p>\n                    <p data-nodeid=\"3904\">\n                      因为，只要你坚持这样的思考方式，长期统计看，收益一定是更可观的。相信无论哪个决定，只要你脚踏实地，深耕你的专业，热爱你的生活，你一定会有意外之喜。\n                    </p>\n                    <hr data-nodeid=\"3905\" />\n                    <p data-nodeid=\"3906\" class=\"te-preview-highlight\">\n                      <a\n                        href=\"https://wj.qq.com/s2/7812549/4cd8/\"\n                        data-nodeid=\"3910\"\n                        >课程评价入口，挑选 5 名小伙伴赠送小礼品～</a\n                      >\n                    </p>\n            "}