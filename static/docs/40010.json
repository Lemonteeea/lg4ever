{"title":"09 | Virtual DOM 的工作原理是什么？","context":"\n                    <p data-nodeid=\"27664\" class=\"\">\n                      在面试中，“Virtual DOM\n                      的工作原理是什么？”是经常会被问到的问题。这讲我将带你一起探讨下这个问题应该如何作答。\n                    </p>\n                    <h3 data-nodeid=\"27665\">破题</h3>\n                    <p data-nodeid=\"27666\">\n                      这同样是一个“是什么”的题目。在经过前面多次讲解该类型题后，你应该可以条件反射地想到\n                      “讲说理列”\n                      这个方法论了。那么，初步的答题框架就有了，接下来只需要填空就行了。\n                    </p>\n                    <p data-nodeid=\"27667\">\n                      再回过头来聊聊<strong data-nodeid=\"27770\"\n                        >Virtual DOM</strong\n                      >，简称<strong data-nodeid=\"27771\">VDOM</strong\n                      >，也被称为<strong data-nodeid=\"27772\">虚拟 DOM</strong\n                      >。在<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=566#/detail/pc?id=5792\"\n                        data-nodeid=\"27768\"\n                        >第 02 讲“为什么 React 要用 JSX？”</a\n                      >中，我们提到，为了更便捷高效地使用声明式开发组件，引入了\n                      XML 语法结构的 JSX。JSX 经过编译后会生成类似\n                      React.creatElement 函数包裹标签及属性。那么这里的\n                      React.creatElement 函数所返回的就是一个虚拟 DOM。虚拟 DOM\n                      并不是只有 React 才有，只是经过 React\n                      的发扬光大，变得很是流行。同样 Vue 从 1.0 升级到\n                      2.0，最大的变化就是引入了虚拟 DOM。那虚拟 DOM\n                      为什么能够引起关注，触发流行呢？这是我们在答题时不可回避的点。\n                    </p>\n                    <h3 data-nodeid=\"27668\">承题</h3>\n                    <p data-nodeid=\"27669\">\n                      根据以上的分析，初步的答题框架出来了：基础部分仍然是“讲说理列”，除此之外，我希望你能加入这个核心点的回答，即引发流行的原因。\n                    </p>\n                    <p data-nodeid=\"27670\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/03/E9/Cip5yF_kW-SAOjZHAABUt-IaE0c622.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"27777\"\n                      />\n                    </p>\n                    <p data-nodeid=\"27671\">\n                      当然，在面试中，面试官问到的所有知识点，不可能全都是你知道的内容。这里我们就需要学会推理，即编程开发在答题时应该有自己的<strong\n                        data-nodeid=\"27783\"\n                        >逻辑性</strong\n                      >，通过已知的内容推理出未知的内容。\n                    </p>\n                    <h3 data-nodeid=\"27672\">入手</h3>\n                    <p data-nodeid=\"27673\">\n                      在正式谈论虚拟 DOM 之前，需要先聊一下虚拟 DOM\n                      的由来，以及它是如何出现在 React 中的。\n                    </p>\n                    <h4 data-nodeid=\"27674\">1. 历史</h4>\n                    <p data-nodeid=\"27675\">\n                      React 的原型是 XHP，该框架于 2010 年开源。Facebook 创建\n                      XHP 的目的主要有两点。\n                    </p>\n                    <ul data-nodeid=\"27676\">\n                      <li data-nodeid=\"27677\">\n                        <p data-nodeid=\"27678\">\n                          <strong data-nodeid=\"27794\">简化前端开发</strong\n                          >，按照现在流行的说法叫后端赋能，让后端开发人员能够快速交付页面。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27679\">\n                        <p data-nodeid=\"27680\">\n                          <strong data-nodeid=\"27803\">避免跨站点脚本攻击</strong\n                          >，也就是常说的 XSS， Facebook\n                          拥有庞大的站点，很容易因为一处暴露 XSS\n                          而造成整体风险。XSS 不会直接攻击网页，而是通过嵌入\n                          JavaScript\n                          代码的方式，将恶意攻击附加到用户的请求中来攻击用户。它可以被用作窃取用户信息，或者恶意增删用户的一些资料。而\n                          XHP 的优势就在于可以<strong data-nodeid=\"27804\"\n                            >默认启用 XSS 保护</strong\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27681\">\n                      所有的页面在 XHP 中构建完成，并没有直接的\n                      HTML，都是通过<strong data-nodeid=\"27810\"\n                        >转义的方式</strong\n                      >生成的。这样的过程确保可以在 XHP\n                      中写出安全的静态页面，但如果需要构建动态的网页应用（国内一般称之为\n                      H5 网站），就会有一些问题了。\n                      这意味着，一旦状态发生更改，网页就需要重新渲染，从而丢失之前网页中的信息。Facebook\n                      团队很早就意识到，这个问题对于页面性能和用户体验来说是十分糟糕的。这就使他们产生了思考：为什么仅仅因为状态改变，就不得不重新渲染整个页面？\n                    </p>\n                    <p data-nodeid=\"27682\">\n                      在 2011 年，Facebook 的工程师 Jordan Walke\n                      开始研究能使这个过程更为高效、用户体验更为合理的原型方案。这就出现了\n                      React 最初的构想：不再基于 XHP，而是基于 JavaScript\n                      的用户界面构建库。大神非常高效，仅仅几个月后就完成了 React\n                      的开发工作，并用于 Facebook 主站的“赞”与评论功能。\n                    </p>\n                    <p data-nodeid=\"27683\">\n                      但这个时期的 React 必须基于 Facebook\n                      背后的研发工具链才能工作。将其剥离开来的契机是 Instagram\n                      团队希望能在它们的产品中使用 React。当时是 2012\n                      年，Facebook 才完成 Instagram 的收购，Instagram\n                      希望在技术栈上向 Facebook 进行取经，即使用 React\n                      技术栈。也正因为 Instagram 的这个请求，使得 React 得以从\n                      Facebook 内部的技术栈中剥离出来，成为之后开源的基础。\n                    </p>\n                    <p data-nodeid=\"27684\">\n                      2013 年 5 月，Facebook 正式宣布开源 React 。\n                    </p>\n                    <p data-nodeid=\"27685\">\n                      回顾这段历史，你会发现 Facebook 一开始的初衷就是<strong\n                        data-nodeid=\"27823\"\n                        >简化前端开发</strong\n                      >、<strong data-nodeid=\"27824\">防止 XSS</strong\n                      >。它的解决方案也很粗暴，即不要直接操作 DOM，而是通过虚拟\n                      DOM 规避风险。因为直接操作 DOM 可能会带来 XSS\n                      的风险，也可能因为技术水平的限制，带来性能问题。如果你心爱的东西不喜欢有人去触碰，最好的方法就是把它封起来，与使用者相隔离，因此有了今天所看到的虚拟\n                      DOM。\n                    </p>\n                    <p data-nodeid=\"27686\">\n                      在日常的工作中，我们经常会提到虚拟\n                      DOM，但是很多人对它并没有一个清晰的认识。写了很久 React\n                      的你，是不是也会经常疑惑，它究竟长什么样子呢？\n                    </p>\n                    <h4 data-nodeid=\"27687\">2. 推理</h4>\n                    <p data-nodeid=\"27688\">\n                      要知道编程最有意思的地方是<strong data-nodeid=\"27834\"\n                        >逻辑的严密性</strong\n                      >，即便我们并没有直接阅读源码，也是可以去推理它的结构。所以在面试中即便遇到了知识盲区，也不要急。\n                    </p>\n                    <p data-nodeid=\"27689\">\n                      先整理下之前学过的关于虚拟 DOM 的内容。\n                    </p>\n                    <ul data-nodeid=\"27690\">\n                      <li data-nodeid=\"27691\">\n                        <p data-nodeid=\"27692\">\n                          在 JSX 的使用中，JSX 所描述的结构，会转译成\n                          React.createElement 函数，大致像这样：\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// JSX 描述</span>\n</div></li><li><div class=\"code-word\">&lt;input type=<span class=\"hljs-string\">\"button\"</span>/&gt;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// Babel 转译后</span>\n</div></li><li><div class=\"code-word\">React.createElement(<span class=\"hljs-string\">'input'</span>, { type: <span class=\"hljs-string\">\"button\"</span> })\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"27694\">\n                      <li data-nodeid=\"27695\">\n                        <p data-nodeid=\"27696\">\n                          React 会持有一棵虚拟 DOM 树，在状态变更后，会触发虚拟\n                          DOM 树的修改，再以此为基础修改真实 DOM。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27697\">\n                      根据上面的已知条件，可以很快地得出结论：React.createElement\n                      返回的结果应该是一个 JavaScript\n                      Object。由于是树结构，所以一定包含一个 children\n                      字段，来建立与子级的关联关系。所以可以推测出它的结构像下面这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 想象中的结构</span>\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  tag: <span class=\"hljs-string\">'input'</span>,\n</div></li><li><div class=\"code-word\">  props: {\n</div></li><li><div class=\"code-word\">    type: <span class=\"hljs-string\">'button'</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  children: []\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"27699\">基于基本认知，React 有两个函数：</p>\n                    <ul data-nodeid=\"27700\">\n                      <li data-nodeid=\"27701\">\n                        <p data-nodeid=\"27702\">\n                          diff 函数，去<strong data-nodeid=\"27845\">计算</strong\n                          >状态变更前后的虚拟 DOM 树差异；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27703\">\n                        <p data-nodeid=\"27704\">\n                          渲染函数，<strong data-nodeid=\"27851\">渲染</strong\n                          >整个虚拟 DOM 树或者处理差异点。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27705\">\n                      现在是不是有些理解为什么 React 与 ReactDOM\n                      是两个库了？正是由于计算与渲染的分工。在日常的开发中，就像下面的代码案例一样，需要同时引入\n                      React 与 ReactDOM 两个库：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">import React from 'react';\n</div></li><li><div class=\"code-word\">import ReactDOM from 'react-dom';\n</div></li><li><div class=\"code-word\">ReactDOM.render(&lt;h1&gt;hi!&lt;/h2&gt;, document.getElementById('root'));\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"27707\">\n                      其中 React 主要的工作是组件实现、更新调度等计算工作；而\n                      ReactDOM 提供了在网页上渲染的基础。\n                    </p>\n                    <p data-nodeid=\"27708\">\n                      也正因为这样的拆分，当 React 向 iOS、Android\n                      开发时，只需要通过 React Native 提供 Native\n                      层的元素渲染即可完成。\n                    </p>\n                    <h4 data-nodeid=\"27709\">3. 优势</h4>\n                    <p data-nodeid=\"27710\">\n                      如果将前面的内容稍加整理，可以得出虚拟 DOM\n                      有这样几个优势：\n                    </p>\n                    <ul data-nodeid=\"27711\">\n                      <li data-nodeid=\"27712\">\n                        <p data-nodeid=\"27713\">性能优越；</p>\n                      </li>\n                      <li data-nodeid=\"27714\">\n                        <p data-nodeid=\"27715\">规避 XSS；</p>\n                      </li>\n                      <li data-nodeid=\"27716\">\n                        <p data-nodeid=\"27717\">可跨平台。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"27718\">\n                      但这样的答案是有问题的。因为在谈论优势时一定要讨论它的<strong\n                        data-nodeid=\"27867\"\n                        >边界</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"27719\">\n                      有经验的面试官可能会这样问：“虚拟 DOM 一定比真实的 DOM\n                      操作性能更高吗？”其实不是，如果只修改一个按钮的文案，那么虚拟\n                      DOM 的操作无论如何都不可能比真实的 DOM\n                      操作更快。所以一定要回到<strong data-nodeid=\"27873\"\n                        >具体的场景</strong\n                      >进行探讨。\n                    </p>\n                    <p data-nodeid=\"27720\">\n                      如果大量的直接操作 DOM 则容易引起<strong\n                        data-nodeid=\"27879\"\n                        >网页性能的下降</strong\n                      >，这时 React 基于虚拟 DOM 的 diff\n                      处理与批处理操作，可以降低 DOM\n                      的操作范围与频次，提升页面性能。在这样的场景下虚拟 DOM\n                      就比较快，那什么场景下虚拟 DOM\n                      慢呢？首次渲染或微量操作，虚拟 DOM 的渲染速度就会比真实\n                      DOM 更慢。\n                    </p>\n                    <p data-nodeid=\"27721\">\n                      那虚拟 DOM 一定可以<strong data-nodeid=\"27885\"\n                        >规避 XSS</strong\n                      >吗？虚拟 DOM 内部确保了字符转义，所以确实可以做到这点，但\n                      React 存在风险，因为 React 留有 dangerouslySetInnerHTML\n                      API 绕过转义。\n                    </p>\n                    <p data-nodeid=\"27722\">\n                      没有虚拟 DOM 不能实现<strong data-nodeid=\"27895\"\n                        >跨平台</strong\n                      >吗？比如 NativeScript 没有虚拟 DOM 层\n                      ，它是通过提供兼容原生 API 的 JS API\n                      实现跨平台开发。那虚拟 DOM\n                      的优势在哪里？实际上它的优势在于<strong\n                        data-nodeid=\"27896\"\n                        >跨平台的成本更低</strong\n                      >。在 React Native 之后，前端社区从虚拟 DOM\n                      中体会到了跨平台的无限前景，所以在后续的发展中，都借鉴了虚拟\n                      DOM。比如：社区流行的小程序同构方案，在构建过程中会提供类似虚拟\n                      DOM 的结构描述对象，来支撑多端转换。\n                    </p>\n                    <h4 data-nodeid=\"27723\">4. 缺点</h4>\n                    <p data-nodeid=\"27724\">社区公认虚拟 DOM 的缺点有两个。</p>\n                    <ul data-nodeid=\"27725\">\n                      <li data-nodeid=\"27726\">\n                        <p data-nodeid=\"27727\">\n                          <strong data-nodeid=\"27905\">内存占用较高</strong\n                          >。因为当前网页的虚拟 DOM 包含了真实 DOM\n                          的完整信息，而且由于是\n                          Object，其内存占用肯定会有所上升。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"27728\">\n                        <p data-nodeid=\"27729\">\n                          <strong data-nodeid=\"27910\">无法进行极致优化</strong\n                          >。 虽然虚拟 DOM\n                          足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中，虚拟&nbsp;DOM\n                          无法进行针对性的极致优化，比如实现类似 Google Earth\n                          的场景。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"27730\">答题</h3>\n                    <blockquote data-nodeid=\"27731\">\n                      <p data-nodeid=\"27732\">\n                        虚拟 DOM 的<strong data-nodeid=\"27917\">工作原理</strong\n                        >是通过 JS 对象模拟 DOM 的节点。在 Facebook 构建 React\n                        初期时，考虑到要提升代码抽象能力、避免人为的 DOM\n                        操作、降低代码整体风险等因素，所以引入了虚拟 DOM。\n                      </p>\n                      <p data-nodeid=\"27733\">\n                        虚拟 DOM 在<strong data-nodeid=\"27923\">实现上</strong\n                        >通常是 Plain Object，以 React 为例，在 render\n                        函数中写的 JSX 会在 Babel 插件的作用下，编译为\n                        React.createElement 执行 JSX 中的属性参数。\n                      </p>\n                      <p data-nodeid=\"27734\">\n                        React.createElement 执行后会返回一个 Plain\n                        Object，它会描述自己的 tag 类型、props 属性以及 children\n                        情况等。这些 Plain Object 通过树形结构组成一棵虚拟 DOM\n                        树。当状态发生变更时，将变更前后的虚拟 DOM\n                        树进行差异比较，这个过程称为 diff，生成的结果称为\n                        patch。计算之后，会渲染 Patch 完成对真实 DOM 的操作。\n                      </p>\n                      <p data-nodeid=\"27735\">\n                        虚拟 DOM 的<strong data-nodeid=\"27930\">优点</strong\n                        >主要有三点：改善大规模 DOM 操作的性能、规避 XSS\n                        风险、能以较低的成本实现跨平台开发。\n                      </p>\n                      <p data-nodeid=\"27736\">\n                        虚拟 DOM 的<strong data-nodeid=\"27936\">缺点</strong\n                        >在社区中主要有两点。\n                      </p>\n                      <p data-nodeid=\"27737\">\n                        内存占用较高，因为需要模拟整个网页的真实 DOM。\n                      </p>\n                      <p data-nodeid=\"27738\">\n                        高性能应用场景存在难以优化的情况，类似像 Google Earth\n                        一类的高性能前端应用在技术选型上往往不会选择 React。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"27739\">\n                      整理下答题内容，可以绘制出如下的知识导图。\n                    </p>\n                    <p data-nodeid=\"27740\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/8C/05/Ciqc1F_kXCaAJS7GAACbWvarErs717.png\"\n                        alt=\"虚拟DOM工作原理.png\"\n                        data-nodeid=\"27942\"\n                      />\n                    </p>\n                    <h3 data-nodeid=\"27741\">进阶</h3>\n                    <p data-nodeid=\"27742\">\n                      <strong data-nodeid=\"27947\"\n                        >除了渲染页面，虚拟 DOM 还有哪些应用场景？</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"27743\">\n                      这个问题考验面试者的想象力。通常而言，我们只是将虚拟 DOM\n                      与渲染绑定在一起，但实际上虚拟 DOM\n                      的应用更为广阔。比如，只要你记录了真实 DOM\n                      变更，它甚至可以应用于<strong data-nodeid=\"27961\"\n                        >埋点统计</strong\n                      >与<strong data-nodeid=\"27962\">数据记录</strong\n                      >等。可以往这个方向回答，具体案例可以参考\n                      <a\n                        href=\"https://github.com/rrweb-io/rrweb\"\n                        data-nodeid=\"27959\"\n                        >rrweb</a\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"27744\">总结</h3>\n                    <p data-nodeid=\"27745\">\n                      学完本讲，你可以掌握关于虚拟 DOM\n                      的常规知识点，但有一点没有详细探讨，就是虚拟 DOM 的 diff\n                      究竟是怎么计算的。在下一讲，我将会与你探讨这个问题。\n                    </p>\n                    <hr data-nodeid=\"27746\" class=\"te-preview-highlight\" />\n                    <p data-nodeid=\"27747\" class=\"\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"27969\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image/M00/72/94/Ciqc1F_EZ0eANc6tAASyC72ZqWw643.png\"\n                          alt=\"Drawing 2.png\"\n                          data-nodeid=\"27968\"\n                      /></a>\n                    </p>\n                    <p data-nodeid=\"27748\" class=\"\">《大前端高薪训练营》</p>\n                    <p data-nodeid=\"27749\" class=\"\">\n                      对标阿里 P7 技术需求 + 每月大厂内推，6\n                      个月助你斩获名企高薪 Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"27974\"\n                        >点击链接</a\n                      >，快来领取！\n                    </p>\n            "}