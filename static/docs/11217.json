{"title":"15 | 从编译到运行，跨端解析小程序多端方案","context":"\n                    <p data-nodeid=\"7844\" class=\"\">\n                      客观来说，小程序在用户规模及商业化方面的巨大成功，并不能掩盖其技术环节的设计问题和痛点。从孱弱简陋的小程序开发体验，到整体架构实现，再到小程序\n                      APIs\n                      碎片化现状，就注定了小程序多端方案层出不穷，展现出百家争鸣的局面。\n                    </p>\n                    <p data-nodeid=\"7845\">\n                      欣欣向荣的小程序多端方案背后有着深广且有趣的技术话题，这一讲，就让我们一同解析小程序多端方案技术。\n                    </p>\n                    <p data-nodeid=\"7846\">\n                      小程序生态如今已经如火如荼地开展开来，自腾讯微信小程序后，各巨头也纷纷建立起自己的小程序。这些小程序的设计原理类似，但是对于开发者来说，开发层面并不互通。在此背景下，效率为先，也就有了各种小程序多端方案。\n                    </p>\n                    <p data-nodeid=\"7847\">\n                      小程序多端方案的愿景很简单，就是使用一种 DSL，可以“write\n                      once，run\n                      evrywhere”，这也就不再需要开发完微信小程序，再开发头条小程序、百度小程序。小程序多端方案也许听起来很神奇，但技术实现上我们可以大体划分为三类：\n                    </p>\n                    <ul data-nodeid=\"7848\">\n                      <li data-nodeid=\"7849\">\n                        <p data-nodeid=\"7850\">编译时方案</p>\n                      </li>\n                      <li data-nodeid=\"7851\">\n                        <p data-nodeid=\"7852\">运行时方案</p>\n                      </li>\n                      <li data-nodeid=\"7853\">\n                        <p data-nodeid=\"7854\">编译时和运行时的结合方案</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7855\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/91/75/Ciqc1GAOlPOADUxDAACGGDiNvBo264.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"8041\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7856\">\n                      事实上，单纯的编译时方案或运行时方案都不能完全满足<strong\n                        data-nodeid=\"8047\"\n                        >跨端需求</strong\n                      >，因此两者结合而成的第三种——编译时和运行时的结合方案，是目前的主流技术。\n                    </p>\n                    <p data-nodeid=\"7857\">\n                      基于以上技术方案，小程序多端方案最终对外提供的使用方式可以分为：\n                    </p>\n                    <ul data-nodeid=\"7858\">\n                      <li data-nodeid=\"7859\">\n                        <p data-nodeid=\"7860\">类 Vue 风格框架</p>\n                      </li>\n                      <li data-nodeid=\"7861\">\n                        <p data-nodeid=\"7862\">类 React 风格框架</p>\n                      </li>\n                      <li data-nodeid=\"7863\">\n                        <p data-nodeid=\"7864\">自定义 DSL 框架</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7865\">\n                      下面我们将具体深入小程序多端方案的实现。\n                    </p>\n                    <h3 data-nodeid=\"7866\">小程序多端——编译时方案</h3>\n                    <p data-nodeid=\"7867\">\n                      顾名思义，编译时方案的工作量主要集中在<strong\n                        data-nodeid=\"8063\"\n                        >编译转化环节</strong\n                      >上。这类多端框架在编译阶段，<strong data-nodeid=\"8064\"\n                        >基于 AST（抽象语法树）技术</strong\n                      >进行各平台小程序适配。\n                    </p>\n                    <p data-nodeid=\"7868\">\n                      目前社区上存在较多基于 Vue DSL 和 React DSL\n                      的静态编译方案。其实现理念类似，但也有区别，我们分开来看。\n                    </p>\n                    <h4 data-nodeid=\"7869\">Vue DSL 静态编译</h4>\n                    <p data-nodeid=\"7870\">\n                      Vue 的设计风格和各小程序设计风格更加接近，因此 Vue DSL\n                      静态编译方案相对容易。Vue 中单文件组件主要由：\n                    </p>\n                    <ul data-nodeid=\"7871\">\n                      <li data-nodeid=\"7872\">\n                        <p data-nodeid=\"7873\">template</p>\n                      </li>\n                      <li data-nodeid=\"7874\">\n                        <p data-nodeid=\"7875\">script</p>\n                      </li>\n                      <li data-nodeid=\"7876\">\n                        <p data-nodeid=\"7877\">style</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7878\">组成，它分别对应了小程序中的：</p>\n                    <ul data-nodeid=\"7879\">\n                      <li data-nodeid=\"7880\">\n                        <p data-nodeid=\"7881\">.wxml 文件，template 文件</p>\n                      </li>\n                      <li data-nodeid=\"7882\">\n                        <p data-nodeid=\"7883\">.js 文件，.json 文件</p>\n                      </li>\n                      <li data-nodeid=\"7884\">\n                        <p data-nodeid=\"7885\">.wxss 文件</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7886\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/93/2E/CgqCHmAT7b2AYQJdAADnHNucgjE454.png\"\n                        alt=\"Lark20210129-191128.png\"\n                        data-nodeid=\"8077\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7887\">\n                      其中，因为小程序基本都可以接受 H5 环境中的\n                      CSS，因此<strong data-nodeid=\"8083\"\n                        >style 部分基本可以直接平滑迁移</strong\n                      >。template 转换为 .wxml 文件，需要进行 HTML\n                      标签、模版语法的转换。以微信小程序举例，转换目标如下图：\n                    </p>\n                    <p data-nodeid=\"7888\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/93/23/Ciqc1GAT7auABbA4AAD1EDPUmAQ243.png\"\n                        alt=\"Lark20210129-191131.png\"\n                        data-nodeid=\"8086\"\n                      />\n                    </p>\n                    <div data-nodeid=\"7889\">\n                      <p style=\"text-align: center\">编译过程图</p>\n                    </div>\n                    <p data-nodeid=\"7890\">\n                      那么上图表述的编译过程具体应该如何实现呢？可能你会想到正则，但正则的能力有限，复杂度也较高。更普遍的做法，如\n                      mpvue、uni-app 等，都依赖了\n                      AST（抽象语法树）技术。AST（抽象语法树）其实并不复杂，Babel\n                      生态就为我们提供了很多开箱即用的 AST\n                      分析和操作工具。下图是一个简单的 Vue 模版经过 AST\n                      分析后的产出：\n                    </p>\n                    <p data-nodeid=\"7891\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/91/75/Ciqc1GAOlROAPr2kAAK2OejCvBU840.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"8090\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7892\">对应模版代码：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&lt;a&gt;&lt;b v-if=\"a\" /&gt;&lt;/a&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7894\">经过 AST 解析为：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">type: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">tag: a\n</div></li><li><div class=\"code-word\">attrsList: []\n</div></li><li><div class=\"code-word\">attrsMap: {}\n</div></li><li><div class=\"code-word\">rawAttrsMap: {}\n</div></li><li><div class=\"code-word\">children:\n</div></li><li><div class=\"code-word\">  - type: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">    tag: b\n</div></li><li><div class=\"code-word\">    attrsList: []\n</div></li><li><div class=\"code-word\">    attrsMap:\n</div></li><li><div class=\"code-word\">      v-<span class=\"hljs-keyword\">if</span>: a\n</div></li><li><div class=\"code-word\">    rawAttrsMap: {}\n</div></li><li><div class=\"code-word\">    children: []\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>: a\n</div></li><li><div class=\"code-word\">    ifConditions:\n</div></li><li><div class=\"code-word\">      - exp: a\n</div></li><li><div class=\"code-word\">        block: <span class=\"hljs-string\">'[Circular ~.children.0]'</span>\n</div></li><li><div class=\"code-word\">    plain: <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">static</span>: <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">    staticRoot: <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">    ifProcessed: <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">plain: <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">static</span>: <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">staticRoot: <span class=\"hljs-keyword\">false</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7896\">\n                      基于以上类似 JSON 一般的 AST\n                      产出结果，我们可以生成小程序指定的 DSL。整体流程如图：\n                    </p>\n                    <p data-nodeid=\"7897\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/93/2E/CgqCHmAT7ceAKd6fAACYXlFC1nQ021.png\"\n                        alt=\"Lark20210129-191134.png\"\n                        data-nodeid=\"8096\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7898\">\n                      熟悉 Vue 原理的同学可能会知道，Vue 中 template 会被\n                      vue-loader 编译，我们的小程序多端方案就需要<strong\n                        data-nodeid=\"8102\"\n                        >将 Vue 模版编译为小程序 .wxml 文件</strong\n                      >，思路异曲同工。可是，也许你会有疑问：Vue 中的 script\n                      部分，怎么和小程序结合呢？这就需要在小程序运行时下文章功夫了，请继续阅读。\n                    </p>\n                    <h3 data-nodeid=\"7899\">小程序多端——运行时方案</h3>\n                    <p data-nodeid=\"7900\">\n                      前面我们介绍了 Vue 单文件组件的 template 编译过程，而\n                      script 部分的处理会更加困难。试想，对于一段 Vue\n                      代码，我们通过响应式理念监听数据变化，触发视图修改，放到小程序中，多端方案要做的就是监听数据变化，调用\n                      setData() 方法，触发小程序渲染层变化。\n                    </p>\n                    <p data-nodeid=\"7901\">\n                      一般在 Vue 单文件组件的 script 部分，我们会使用以下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">new</span> Vue({\n</div></li><li><div class=\"code-word\">  data() {},\n</div></li><li><div class=\"code-word\">  methods: {},\n</div></li><li><div class=\"code-word\">  components: {}\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7903\">\n                      来初始化一个 Vue\n                      实例。对于多端方案来说，就完全可以引入一个 Vue\n                      的运行时版，对上述代码进行解析和执行。事实上，mpvue 就是\n                      fork 了一份 Vue.js 的代码，因此内置了 Vue runtime\n                      能力，同时添加了小程序平台的支持。\n                    </p>\n                    <p data-nodeid=\"7904\">\n                      具体还需要做哪些小程序平台特性支持呢？举一个例子，以微信小程序为例，微信小程序平台规定，小程序页面中需要有一个\n                      Page() 方法，以生成一个小程序实例，其中 Page()\n                      方法是小程序官方提供的 API。\n                    </p>\n                    <p data-nodeid=\"7905\">\n                      那么对于业务方写的<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"8109\"\n                        >new Vue()</code\n                      >代码，<strong data-nodeid=\"8115\"\n                        >多端平台要手动执行微信小程序平台的\n                        Page()，完成初始化处理</strong\n                      >，如下：\n                    </p>\n                    <p data-nodeid=\"7906\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/93/2E/CgqCHmAT7dKAGSVzAAEawS6G6xY828.png\"\n                        alt=\"Lark20210129-191136.png\"\n                        data-nodeid=\"8118\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7907\">\n                      经过上述步骤，我们的多端方案内置了 Vue\n                      运行时版，并实例化了一个 Vue\n                      实例，同时在初始阶段调用了小程序平台的 Page()\n                      方法，因此也就有了一个小程序实例。\n                    </p>\n                    <p data-nodeid=\"7908\">\n                      下面的工作，就是<strong data-nodeid=\"8125\"\n                        >在运行时将 Vue 实例和小程序实例进行关联</strong\n                      >，以做到：数据变动时，小程序实例能够调用 setData()\n                      方法，进行渲染层更新。\n                    </p>\n                    <p data-nodeid=\"7909\">\n                      思想确立后，如何实施呢？首先这就需要你对 Vue\n                      原理足够清楚了：Vue\n                      基于响应式，对数据进行监听，在数据改动时，新生成一份虚拟节点\n                      VNode。接下来<strong data-nodeid=\"8131\"\n                        >对比新旧两份虚拟节点，找到 Diff，并进行 patch\n                        操作，最终更新了真实的 DOM 节点</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"7910\">\n                      因为小程序架构中，并没有提供操作小程序节点的 API\n                      方法，因此对于小程序多端方案，我们显然不需要进行 Vue\n                      源码中的 patch\n                      操作。又因为小程序隔离了渲染进程（渲染层）和逻辑进程（逻辑层），我们不需要处理渲染层，只需要调用\n                      setData() 方法，更新一份最新的数据就可以了。\n                    </p>\n                    <p data-nodeid=\"7911\">\n                      因此，借助 Vue 现有的能力，我们秉承“数据部分让 Vue\n                      运行时版接手，渲染部分让小程序架构接手”的理念，就能实现一个类\n                      Vue 风格的多端框架。框架原理如图：\n                    </p>\n                    <p data-nodeid=\"7912\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/94/37/CgqCHmAXmvKAEQr9AAErNUu9oi4120.png\"\n                        alt=\"图片2.png\"\n                        data-nodeid=\"8136\"\n                      />\n                    </p>\n                    <div data-nodeid=\"7913\">\n                      <p style=\"text-align: center\">\n                        类 Vue 风格的多端框架原理图\n                      </p>\n                    </div>\n                    <p data-nodeid=\"7914\">\n                      当然，整个框架的设计还要考虑事件处理等模块，我们就不再具体展开。\n                    </p>\n                    <p data-nodeid=\"7915\">\n                      至此，编译时和运行时方案组合在一起，我们就实现了一个类 Vue\n                      风格的小程序多端框架的技术方案架构。目前社区上都是采用了这一套技术架构方案，但是不同框架有各自的特点，比如<strong\n                        data-nodeid=\"8143\"\n                        >网易考拉 Megalo\n                        在上述方案的基础上，将整个数据结构进行了扁平化，目的是在调用\n                        setData() 方法时，可以获得更好的性能</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"7916\">\n                      探索并没有到此为止，事实上，类 React\n                      的小程序多端方案架构虽然道理和类 Vue\n                      方案差不多，也需要将编译时和运行时相结合，但很多重要环节的处理却更加复杂，这是怎么回事呢？我们继续探索。\n                    </p>\n                    <h3 data-nodeid=\"7917\">\n                      小程序多端——类 React 风格的编译时和运行时结合方案\n                    </h3>\n                    <p data-nodeid=\"7918\">\n                      类 React\n                      风格的小程序多端方案，存在多项棘手的问题，其中之一就是：如何将\n                      JSX 转换为小程序模版？\n                    </p>\n                    <p data-nodeid=\"7919\">\n                      我们知道不同于 Vue 模版理念，React 生态选择了 JSX\n                      来表达视图，但是 JSX 过于灵活，单纯基于\n                      AST（抽象语法树）技术很难进行一对一转换。比如：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">CompParent</span>(<span class=\"hljs-params\">{children, ...props}</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> children === <span class=\"hljs-string\">'function'</span> ? children(props) : <span class=\"hljs-literal\">null</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Comp</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CompParent</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      {props =&gt; <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{props.data}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>}\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">CompParent</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  )\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7921\">\n                      这段代码是 React 中，利用 JSX 表达能力实现的 Render Prop\n                      模式，这也是静态编译的噩梦：<strong data-nodeid=\"8153\"\n                        >如果不将代码运行，很难计算出需要表达的视图结果</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"7922\">\n                      针对这个“JSX 处理”问题，类 React\n                      风格的小程序多端方案就可以分成两个流派：\n                    </p>\n                    <ul data-nodeid=\"7923\">\n                      <li data-nodeid=\"7924\">\n                        <p data-nodeid=\"7925\">\n                          强行静态编译型，代表有：京东的 Taro 1/2，去哪儿的\n                          Nanachi 等；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7926\">\n                        <p data-nodeid=\"7927\">\n                          运行时处理型，代表有：Taro Next，蚂蚁的 Remax。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7928\">\n                      强行静态编译型需要业务使用方在编写代码时，规避掉一些难以在编译阶段处理的动态化的写法，因此这类多端框架说到底是使用了限制的、阉割版的\n                      JSX。比如在早期 Taro 版本的文档中，就有了清晰的说明：\n                    </p>\n                    <p data-nodeid=\"7929\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image2/M01/09/65/Cip5yGAOlUeAEB4oAAO9Arzu18g785.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"8160\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7930\">\n                      因此，我认为强行静态编译 JSX\n                      是一条死胡同，并不是一个完美的解决方案。事实上，Taro\n                      发展到了 v3 版本之后，也意识到了这个问题，所以和蚂蚁 Remax\n                      方案一样，Taro 新版本进行了架构升级，在运行时增加了对\n                      React JSX\n                      以及后续流程处理。具体是怎么做到的呢？请你继续阅读。\n                    </p>\n                    <h4 data-nodeid=\"7931\">React 设计理念助力多端小程序起飞</h4>\n                    <p data-nodeid=\"7932\">\n                      我认为在<strong data-nodeid=\"8168\"\n                        >运行时开发者能够处理 React JSX 的核心基础其实在于 React\n                        的设计理念</strong\n                      >，React\n                      将自身能力充分解耦，并提供给社区接入关键环节。这里我们需要先进行一些\n                      React 原理解析。\n                    </p>\n                    <p data-nodeid=\"7933\">React 核心理念可以分为三大部分：</p>\n                    <ul data-nodeid=\"7934\">\n                      <li data-nodeid=\"7935\">\n                        <p data-nodeid=\"7936\">\n                          React Core：处理最核心的\n                          APIs，与终端平台和渲染解耦，主要提供了下面这些能力：\n                        </p>\n                        <ol data-nodeid=\"7937\">\n                          <li data-nodeid=\"7938\">\n                            <p data-nodeid=\"7939\">React.createElement()</p>\n                          </li>\n                          <li data-nodeid=\"7940\">\n                            <p data-nodeid=\"7941\">React.createClass()</p>\n                          </li>\n                          <li data-nodeid=\"7942\">\n                            <p data-nodeid=\"7943\">React.Component</p>\n                          </li>\n                          <li data-nodeid=\"7944\">\n                            <p data-nodeid=\"7945\">React.Children</p>\n                          </li>\n                          <li data-nodeid=\"7946\">\n                            <p data-nodeid=\"7947\">React.PropTypes</p>\n                          </li>\n                        </ol>\n                      </li>\n                      <li data-nodeid=\"7948\">\n                        <p data-nodeid=\"7949\">\n                          React Renderer：渲染器定义了一个 React Tree\n                          如何构建接轨不同平台，比如：\n                        </p>\n                        <ol data-nodeid=\"7950\">\n                          <li data-nodeid=\"7951\">\n                            <p data-nodeid=\"7952\">\n                              React-dom 渲染组件树为 DOM elements；\n                            </p>\n                          </li>\n                          <li data-nodeid=\"7953\">\n                            <p data-nodeid=\"7954\">\n                              React Native 渲染组件树为不同原生平台视图。\n                            </p>\n                          </li>\n                        </ol>\n                      </li>\n                      <li data-nodeid=\"7955\">\n                        <p data-nodeid=\"7956\">\n                          Reconciler：负责 diff 算法，接驳 patch 行为。可以被\n                          React-dom、React Native、React ART 这些 renderers\n                          共用，并提供基础计算能力。现在 React 主要有两种类型的\n                          reconcilers：\n                        </p>\n                        <ol data-nodeid=\"7957\">\n                          <li data-nodeid=\"7958\">\n                            <p data-nodeid=\"7959\">\n                              Stack reconciler，React 15 以及更早期 React\n                              版本使用；\n                            </p>\n                          </li>\n                          <li data-nodeid=\"7960\">\n                            <p data-nodeid=\"7961\">\n                              Fiber reconciler，新一代的架构。\n                            </p>\n                          </li>\n                        </ol>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7962\">\n                      更多基础内容，如 React Components、React Instances、React\n                      Elements，我们就不再一一展开。这里需要你了解的是：\n                    </p>\n                    <ul data-nodeid=\"7963\">\n                      <li data-nodeid=\"7964\">\n                        <p data-nodeid=\"7965\">\n                          React team 将 Reconciler 部分作为一个独立的 npm 包（<a\n                            href=\"https://www.npmjs.com/package/react-reconciler\"\n                            data-nodeid=\"8186\"\n                            >react-reconciler</a\n                          >\n                          发布）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7966\">\n                        <p data-nodeid=\"7967\">\n                          在 React 环境下，不同平台，可以依赖一个\n                          <a\n                            href=\"https://github.com/facebook/react/tree/master/packages/react-reconciler#api\"\n                            data-nodeid=\"8191\"\n                            >hostConfig</a\n                          >\n                          配置，和 react-reconciler 互动，连接并使用 Reconciler\n                          能力；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"7968\">\n                        <p data-nodeid=\"7969\">\n                          因此，不同平台的 renderers 在 HostConfig\n                          中内置基本方法，即可构造自己的渲染逻辑。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7970\">核心架构可以总结为下图：</p>\n                    <p data-nodeid=\"7971\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/93/2E/CgqCHmAT7hyAENc8AAFoe_ttcg4719.png\"\n                        alt=\"Lark20210129-191112.png\"\n                        data-nodeid=\"8197\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7972\">\n                      React 的 Reconciler 并不关心 renderers\n                      中的节点是什么形状，只会把这个计算结果透传到 HostConfig\n                      中定义的方法中，我们在这些方法（比如\n                      appendChild、removeChild、insertBefore）中，完成渲染的准备和目的。而\n                      HostConfig 其实就是一个对象：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> HostConfig = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">//TODO We will specify all required methods here</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7974\">\n                      翻看\n                      <a\n                        href=\"https://github.com/facebook/react/blob/master/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js\"\n                        data-nodeid=\"8202\"\n                        >react-reconciler</a\n                      >\n                      源码，可以总结出，完整的 hostConfig 包含了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">HostConfig.getPublicInstance\n</div></li><li><div class=\"code-word\">HostConfig.getRootHostContext\n</div></li><li><div class=\"code-word\">HostConfig.getChildHostContext\n</div></li><li><div class=\"code-word\">HostConfig.prepareForCommit\n</div></li><li><div class=\"code-word\">HostConfig.resetAfterCommit\n</div></li><li><div class=\"code-word\">HostConfig.createInstance\n</div></li><li><div class=\"code-word\">HostConfig.appendInitialChild\n</div></li><li><div class=\"code-word\">HostConfig.finalizeInitialChildren\n</div></li><li><div class=\"code-word\">HostConfig.prepareUpdate\n</div></li><li><div class=\"code-word\">HostConfig.shouldSetTextContent\n</div></li><li><div class=\"code-word\">HostConfig.shouldDeprioritizeSubtree\n</div></li><li><div class=\"code-word\">HostConfig.createTextInstance\n</div></li><li><div class=\"code-word\">HostConfig.scheduleDeferredCallback\n</div></li><li><div class=\"code-word\">HostConfig.cancelDeferredCallback\n</div></li><li><div class=\"code-word\">HostConfig.setTimeout\n</div></li><li><div class=\"code-word\">HostConfig.clearTimeout\n</div></li><li><div class=\"code-word\">HostConfig.noTimeout\n</div></li><li><div class=\"code-word\">HostConfig.now\n</div></li><li><div class=\"code-word\">HostConfig.isPrimaryRenderer\n</div></li><li><div class=\"code-word\">HostConfig.supportsMutation\n</div></li><li><div class=\"code-word\">HostConfig.supportsPersistence\n</div></li><li><div class=\"code-word\">HostConfig.supportsHydration\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// -------------------</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//      Mutation</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//     (optional)</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// -------------------</span>\n</div></li><li><div class=\"code-word\">HostConfig.appendChild\n</div></li><li><div class=\"code-word\">HostConfig.appendChildToContainer\n</div></li><li><div class=\"code-word\">HostConfig.commitTextUpdate\n</div></li><li><div class=\"code-word\">HostConfig.commitMount\n</div></li><li><div class=\"code-word\">HostConfig.commitUpdate\n</div></li><li><div class=\"code-word\">HostConfig.insertBefore\n</div></li><li><div class=\"code-word\">HostConfig.insertInContainerBefore\n</div></li><li><div class=\"code-word\">HostConfig.removeChild\n</div></li><li><div class=\"code-word\">HostConfig.removeChildFromContainer\n</div></li><li><div class=\"code-word\">HostConfig.resetTextContent\n</div></li><li><div class=\"code-word\">HostConfig.hideInstance\n</div></li><li><div class=\"code-word\">HostConfig.hideTextInstance\n</div></li><li><div class=\"code-word\">HostConfig.unhideInstance\n</div></li><li><div class=\"code-word\">HostConfig.unhideTextInstance\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// -------------------</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//     Persistence</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//     (optional)</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// -------------------</span>\n</div></li><li><div class=\"code-word\">HostConfig.cloneInstance\n</div></li><li><div class=\"code-word\">HostConfig.createContainerChildSet\n</div></li><li><div class=\"code-word\">HostConfig.appendChildToContainerChildSet\n</div></li><li><div class=\"code-word\">HostConfig.finalizeContainerChildren\n</div></li><li><div class=\"code-word\">HostConfig.replaceContainerChildren\n</div></li><li><div class=\"code-word\">HostConfig.cloneHiddenInstance\n</div></li><li><div class=\"code-word\">HostConfig.cloneUnhiddenInstance\n</div></li><li><div class=\"code-word\">HostConfig.createHiddenTextInstance\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// -------------------</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//     Hydration</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//     (optional)</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// -------------------</span>\n</div></li><li><div class=\"code-word\">HostConfig.canHydrateInstance\n</div></li><li><div class=\"code-word\">HostConfig.canHydrateTextInstance\n</div></li><li><div class=\"code-word\">HostConfig.getNextHydratableSibling\n</div></li><li><div class=\"code-word\">HostConfig.getFirstHydratableChild\n</div></li><li><div class=\"code-word\">HostConfig.hydrateInstance\n</div></li><li><div class=\"code-word\">HostConfig.hydrateTextInstance\n</div></li><li><div class=\"code-word\">HostConfig.didNotMatchHydratedContainerTextInstance\n</div></li><li><div class=\"code-word\">HostConfig.didNotMatchHydratedTextInstance\n</div></li><li><div class=\"code-word\">HostConfig.didNotHydrateContainerInstance\n</div></li><li><div class=\"code-word\">HostConfig.didNotHydrateInstance\n</div></li><li><div class=\"code-word\">HostConfig.didNotFindHydratableContainerInstance\n</div></li><li><div class=\"code-word\">HostConfig.didNotFindHydratableContainerTextInstance\n</div></li><li><div class=\"code-word\">HostConfig.didNotFindHydratableInstance\n</div></li><li><div class=\"code-word\">HostConfig.didNotFindHydratableTextInstance\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7976\">\n                      React reconciler\n                      阶段会在不同的时机，调用上面这些方法。比如在 reconciler\n                      阶段新建节点时会调用 createInstance\n                      等方法；在提交阶段创建新的子节点时，调用 appendChild\n                      方法。\n                    </p>\n                    <p data-nodeid=\"7977\">\n                      依照 React 支持 web 和原生（React Native）的思路，如下图：\n                    </p>\n                    <p data-nodeid=\"7978\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/91/75/Ciqc1GAOlWyAV2OnAADz2iM_2mM698.png\"\n                        alt=\"Drawing 9.png\"\n                        data-nodeid=\"8208\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7979\">\n                      你可以类比出一套更好的 React\n                      支持多端小程序的架构设计，如下图：\n                    </p>\n                    <p data-nodeid=\"7980\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/93/2E/CgqCHmAT8DSAGRn-AAJEN4yKmdI464.png\"\n                        alt=\"Lark20210129-192321.png\"\n                        data-nodeid=\"8212\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7981\">\n                      我们知道类 Vue 风格的多端框架，可以将 Vue template\n                      编译为小程序模版。那么有了数据，类 React\n                      风格的多端框架，在初始化时如何渲染出来页面呢？\n                    </p>\n                    <p data-nodeid=\"7982\">\n                      以 Remax 为例，上图所示 VNodeData\n                      数据中，包含了节点信息，比如 type=“view”，我们可以<strong\n                        data-nodeid=\"8219\"\n                        >通过递归 VNodeData 这个数据结构，根据不同的 type\n                        渲染出不同的小程序模版</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"7983\">\n                      总结一下，在初始化阶段以及第一次 mount 时，我们<strong\n                        data-nodeid=\"8225\"\n                        >通过 setData() 方法初始化小程序</strong\n                      >。具体是通过递归数据结构，渲染小程序页面。接着，在数据发生变化时，我们通过\n                      React reconciler 阶段的计算信息，以及自定义配置的\n                      HostConfig 衔接函数，更新数据，并通过 setData()\n                      方法触发小程序的渲染更新。\n                    </p>\n                    <p data-nodeid=\"7984\">\n                      了解了类 React\n                      风格的多端方案架构设计，我们可以结合实际框架实现，来进一步巩固思想，看一看实践中，开源方案的实施情况，请继续阅读。\n                    </p>\n                    <h4 data-nodeid=\"7985\">剖析一款“网红”框架 —— Taro Next</h4>\n                    <p data-nodeid=\"7986\">\n                      在 2019 年 GMTC 大会上，京东 Taro\n                      团队介绍了《小程序跨框架开发的探索与实践》，其中的 v3\n                      理念就与上述思路吻合（目前仍然在版本开发中：<a\n                        href=\"https://github.com/nervjs/taro\"\n                        data-nodeid=\"8231\"\n                        >NervJS-taro</a\n                      >）。在分享中的一处截图如下：\n                    </p>\n                    <p data-nodeid=\"7987\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/93/23/Ciqc1GAT8D6ADrYMAAICYbpPasw785.png\"\n                        alt=\"Lark20210129-192324.png\"\n                        data-nodeid=\"8235\"\n                      />\n                    </p>\n                    <p data-nodeid=\"7988\">\n                      由上图即可推知：Taro 团队提供的\n                      <a\n                        href=\"https://github.com/NervJS/taro/tree/next/packages/taro-react\"\n                        data-nodeid=\"8239\"\n                        >taro-react</a\n                      >包，是用来连接 React reconciler 和 taro-runtime\n                      的。它主要负责：\n                    </p>\n                    <ul data-nodeid=\"7989\">\n                      <li data-nodeid=\"7990\">\n                        <p data-nodeid=\"7991\">实现 HostConfig 配置</p>\n                      </li>\n                      <li data-nodeid=\"7992\">\n                        <p data-nodeid=\"7993\">实现 render 函数</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"7994\">\n                      比如，HostConfig 在 taro-react 源码中的实现为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> hostConfig: HostConfig&lt;\n</div></li><li><div class=\"code-word\">  string, <span class=\"hljs-comment\">// Type</span>\n</div></li><li><div class=\"code-word\">  Props, <span class=\"hljs-comment\">// Props</span>\n</div></li><li><div class=\"code-word\">  TaroElement, <span class=\"hljs-comment\">// Container</span>\n</div></li><li><div class=\"code-word\">  TaroElement, <span class=\"hljs-comment\">// Instance</span>\n</div></li><li><div class=\"code-word\">  TaroText, <span class=\"hljs-comment\">// TextInstance</span>\n</div></li><li><div class=\"code-word\">  TaroElement, <span class=\"hljs-comment\">// HydratableInstance</span>\n</div></li><li><div class=\"code-word\">  TaroElement, <span class=\"hljs-comment\">// PublicInstance</span>\n</div></li><li><div class=\"code-word\">  object, <span class=\"hljs-comment\">// HostContext</span>\n</div></li><li><div class=\"code-word\">  string[], <span class=\"hljs-comment\">// UpdatePayload</span>\n</div></li><li><div class=\"code-word\">  unknown, <span class=\"hljs-comment\">// ChildSet</span>\n</div></li><li><div class=\"code-word\">  unknown, <span class=\"hljs-comment\">// TimeoutHandle</span>\n</div></li><li><div class=\"code-word\">  unknown <span class=\"hljs-comment\">// NoTimeout</span>\n</div></li><li><div class=\"code-word\">&gt; &amp; {\n</div></li><li><div class=\"code-word\">  hideInstance (instance: TaroElement): <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span>\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">unhideInstance</span> <span class=\"hljs-params\">(instance: TaroElement, props)</span>: <span class=\"hljs-keyword\">void</span>\n</div></li><li><div class=\"code-word\">} = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建 element 实例</span>\n</div></li><li><div class=\"code-word\">  createInstance (type) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> document.createElement(type)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建 text node 实例</span>\n</div></li><li><div class=\"code-word\">  createTextInstance (text) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> document.createTextNode(text)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  getPublicInstance (inst: TaroElement) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> inst\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  getRootHostContext () {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> {}\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  getChildHostContext () {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> {}\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// appendChild 方法实现</span>\n</div></li><li><div class=\"code-word\">  appendChild (parent, child) {\n</div></li><li><div class=\"code-word\">    parent.appendChild(child)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// appendInitialChild 方法实现</span>\n</div></li><li><div class=\"code-word\">  appendInitialChild (parent, child) {\n</div></li><li><div class=\"code-word\">    parent.appendChild(child)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// appendChildToContainer 方法实现</span>\n</div></li><li><div class=\"code-word\">  appendChildToContainer (parent, child) {\n</div></li><li><div class=\"code-word\">    parent.appendChild(child)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// removeChild 方法实现</span>\n</div></li><li><div class=\"code-word\">  removeChild (parent, child) {\n</div></li><li><div class=\"code-word\">    parent.removeChild(child)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// removeChildFromContainer 方法实现</span>\n</div></li><li><div class=\"code-word\">  removeChildFromContainer (parent, child) {\n</div></li><li><div class=\"code-word\">    parent.removeChild(child)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// insertBefore 方法实现</span>\n</div></li><li><div class=\"code-word\">  insertBefore (parent, child, refChild) {\n</div></li><li><div class=\"code-word\">    parent.insertBefore(child, refChild)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// insertInContainerBefore 方法实现</span>\n</div></li><li><div class=\"code-word\">  insertInContainerBefore (parent, child, refChild) {\n</div></li><li><div class=\"code-word\">    parent.insertBefore(child, refChild)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// commitTextUpdate 方法实现</span>\n</div></li><li><div class=\"code-word\">  commitTextUpdate (textInst, _, newText) {\n</div></li><li><div class=\"code-word\">    textInst.nodeValue = newText\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  finalizeInitialChildren (dom, _, props) {\n</div></li><li><div class=\"code-word\">    updateProps(dom, {}, props)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  prepareUpdate () {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> EMPTY_ARR\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  commitUpdate (dom, _payload, _type, oldProps, newProps) {\n</div></li><li><div class=\"code-word\">    updateProps(dom, oldProps, newProps)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  hideInstance (instance) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> style = instance.style\n</div></li><li><div class=\"code-word\">    style.setProperty(<span class=\"hljs-string\">'display'</span>, <span class=\"hljs-string\">'none'</span>)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  unhideInstance (instance, props) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> styleProp = props.style\n</div></li><li><div class=\"code-word\">    let display = styleProp?.hasOwnProperty(<span class=\"hljs-string\">'display'</span>) ? styleProp.display : <span class=\"hljs-keyword\">null</span>\n</div></li><li><div class=\"code-word\">    display = display == <span class=\"hljs-keyword\">null</span> || typeof display === <span class=\"hljs-string\">'boolean'</span> || display === <span class=\"hljs-string\">''</span> ? <span class=\"hljs-string\">''</span> : (<span class=\"hljs-string\">''</span> + display).trim()\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// eslint-disable-next-line dot-notation</span>\n</div></li><li><div class=\"code-word\">    instance.style[<span class=\"hljs-string\">'display'</span>] = display\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  shouldSetTextContent: returnFalse,\n</div></li><li><div class=\"code-word\">  shouldDeprioritizeSubtree: returnFalse,\n</div></li><li><div class=\"code-word\">  prepareForCommit: noop,\n</div></li><li><div class=\"code-word\">  resetAfterCommit: noop,\n</div></li><li><div class=\"code-word\">  commitMount: noop,\n</div></li><li><div class=\"code-word\">  now,\n</div></li><li><div class=\"code-word\">  scheduleDeferredCallback,\n</div></li><li><div class=\"code-word\">  cancelDeferredCallback,\n</div></li><li><div class=\"code-word\">  clearTimeout: clearTimeout,\n</div></li><li><div class=\"code-word\">  setTimeout: setTimeout,\n</div></li><li><div class=\"code-word\">  noTimeout: -<span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">  supportsMutation: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">  supportsPersistence: <span class=\"hljs-keyword\">false</span>,\n</div></li><li><div class=\"code-word\">  isPrimaryRenderer: <span class=\"hljs-keyword\">true</span>,\n</div></li><li><div class=\"code-word\">  supportsHydration: <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7996\">以 insertBefore 方法为例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">insertBefore (parent, child, refChild) {\n</div></li><li><div class=\"code-word\">  parent.insertBefore(child, refChild)\n</div></li><li><div class=\"code-word\">},\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7998\">\n                      parent 实际上是一个 TaroNode 对象，其 insertBefore 方法在\n                      taro-runtime 中给出。<a\n                        href=\"https://github.com/NervJS/taro/tree/next/packages/taro-runtime\"\n                        data-nodeid=\"8248\"\n                        >taro-runtime</a\n                      >\n                      模拟了 DOM/BOM APIs，但是在小程序环境中，它并不能直接操作\n                      DOM 节点，而是操作数据（即<strong data-nodeid=\"8258\"\n                        >前文提到的 VNodeData，对应 Taro 里面的 TaroNode</strong\n                      >）。比如源码中，仍然以 insertBefore 方法举例，<a\n                        href=\"https://github.com/NervJS/taro/blob/aaf9c133907805801803d2cb9d147c952e0b199b/packages/taro-runtime/src/dom/node.ts#L88\"\n                        data-nodeid=\"8256\"\n                        >相关处理逻辑为</a\n                      >：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> insertBefore&lt;T extends TaroNode&gt; (newChild: T, refChild?: TaroNode | <span class=\"hljs-keyword\">null</span>, isReplace?: <span class=\"hljs-keyword\">boolean</span>): T {\n</div></li><li><div class=\"code-word\">    newChild.remove()\n</div></li><li><div class=\"code-word\">    newChild.parentNode = <span class=\"hljs-keyword\">this</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// payload 数据</span>\n</div></li><li><div class=\"code-word\">    let payload: UpdatePayload\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 存在 refChild(TaroNode 类型)</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (refChild) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-keyword\">this</span>.findIndex(<span class=\"hljs-keyword\">this</span>.childNodes, refChild)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.childNodes.splice(index, <span class=\"hljs-number\">0</span>, newChild)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (isReplace === <span class=\"hljs-keyword\">true</span>) {\n</div></li><li><div class=\"code-word\">        payload = {\n</div></li><li><div class=\"code-word\">          path: newChild._path,\n</div></li><li><div class=\"code-word\">          value: <span class=\"hljs-keyword\">this</span>.hydrate(newChild)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        payload = {\n</div></li><li><div class=\"code-word\">          path: \\`${<span class=\"hljs-keyword\">this</span>._path}.${Shortcuts.Childnodes}\\`,\n</div></li><li><div class=\"code-word\">          value: () =&gt; <span class=\"hljs-keyword\">this</span>.childNodes.map(hydrate)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">this</span>.childNodes.push(newChild)\n</div></li><li><div class=\"code-word\">      payload = {\n</div></li><li><div class=\"code-word\">        path: newChild._path,\n</div></li><li><div class=\"code-word\">        value: <span class=\"hljs-keyword\">this</span>.hydrate(newChild)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    CurrentReconciler.insertBefore?.(<span class=\"hljs-keyword\">this</span>, newChild, refChild)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.enqueueUpdate(payload)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> newChild\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8000\">\n                      整体 Taro Next 的类 React\n                      多端方案架构如图，出自《小程序跨框架开发的探索与实践》分享：\n                    </p>\n                    <p data-nodeid=\"9417\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/94/2C/Ciqc1GAXmzmACf4fAAVidO1Nf0U984.png\"\n                        alt=\"图片3.png\"\n                        data-nodeid=\"9420\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"8002\" class=\"te-preview-highlight\">\n                      了解了不同框架风格（Vue 和\n                      React）的多端小程序技术架构方案，并不意味着我们就能直接写出一个新的框架，和社区上成熟方案相争锋指日可待了。一个成熟的技术方案除了实现主体架构，还包括多方面的内容，比如性能优化。\n                    </p>\n                    <p data-nodeid=\"8003\">\n                      如何在已有思路基础上，完成更好的设计，也值得开发者深思，我们将继续展开这个话题。\n                    </p>\n                    <h3 data-nodeid=\"8004\">小程序多端方案优化方向</h3>\n                    <p data-nodeid=\"8005\">\n                      一个成熟的小程序多端方案要考虑的环节是立体的，比如以\n                      <a\n                        href=\"https://developers.weixin.qq.com/miniprogram/dev/extended/kbone/\"\n                        data-nodeid=\"8269\"\n                        >kbone</a\n                      >\n                      为代表，运行时方案都是通过模拟 Web\n                      环境来彻底对接前端生态，而 Remax 只是简单的通过 react\n                      reconciler 连接 React\n                      和小程序。如何从更高的角度，衡量和理解小程序多端方案的更多技术方向，我们从下面几个话题来继续阐述。\n                    </p>\n                    <h4 data-nodeid=\"8006\">性能优化方向</h4>\n                    <p data-nodeid=\"8007\">\n                      从前文我们可以了解到，小程序多端框架主要由编译时和运行时两部分组成，一般来说，<strong\n                        data-nodeid=\"8277\"\n                        >编译时做的事情越多，下的功夫越大，也就意味着运行时越轻量，负担越小，因此性能也就会更好</strong\n                      >。比如，我们可以在编译时做到 AOT（Ahead of\n                      Time）性能调优、Dead Code Elimination\n                      等。而厚重的运行时一般意味着需要将完整的组件树在逻辑层传输到视图层，也就导致数据传输量更大，且页面中会存在更多的监听器。\n                    </p>\n                    <p data-nodeid=\"8008\">\n                      另一方面，随着终端性能的增强，找到编译时和运行时所承担工作的平衡点，也显得至关重要。以\n                      mpvue 框架为主，一般编译时都会完成<strong\n                        data-nodeid=\"8287\"\n                        >静态模版</strong\n                      >的编译工作；而以 Remax 为代表，<strong data-nodeid=\"8288\"\n                        >动态构建视图层表达就放在了运行时完成</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"8009\">\n                      在我看来，关于运行时和编译时的各中取舍，需要基于大量\n                      benchmark\n                      调研，也需要开发设计者广阔的技术视野和选型能力。除此之外，一般我们可以从以下几个方面来进一步实现性能优化。\n                    </p>\n                    <ul data-nodeid=\"8010\">\n                      <li data-nodeid=\"8011\">\n                        <p data-nodeid=\"8012\">\n                          <strong data-nodeid=\"8294\">框架包 size</strong\n                          >。小程序的初始加载性能直接依赖于资源的包大小，因此小程序多端框架的包\n                          size，至关重要。为此，各解决方案都从不同的角度完成瘦身，比如\n                          Taro 力争实现更轻量的 DOM/BOM APIs，不同于\n                          jsdom（size：2.1M），Taro 的核心的 DOM/BOM APIs 代码才\n                          1000 行不到。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8013\">\n                        <p data-nodeid=\"8014\">\n                          <strong data-nodeid=\"8299\">数据更新粒度</strong\n                          >。在数据更新阶段，小程序的 setData()\n                          所负载的数据一直是重要的优化方向，目前已经成为默认的常规手段，那么利用框架来完成\n                          setData()\n                          方法调用优化也就顺其自然了。比如数据负载的扁平化处理和增量处理，都是常见的优化手段。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"8015\">未来发展方向</h4>\n                    <p data-nodeid=\"8016\">\n                      好的技术架构决定着未来发展潜力，上文我们提到了 React 将\n                      React core、React-dom\n                      等解耦，才奠定了现代化小程序多端方案的可行性。而小程序多端方案的设计，也决定着自身的未来应用空间。在此层面上，我认为开发者可重点考虑以下几个方面。\n                    </p>\n                    <ul data-nodeid=\"8017\">\n                      <li data-nodeid=\"8018\">\n                        <p data-nodeid=\"8019\">\n                          <strong data-nodeid=\"8310\">工程化方案</strong\n                          >。小程序多端需要有一体化的工程解决方案，在设计上可以与\n                          Webpack\n                          等工程化工具深度融合绑定，并对外提供服务。但需要<strong\n                            data-nodeid=\"8311\"\n                            >兼顾关键环节的可插拔性</strong\n                          >，能够适应多种工程化工具，对于未来发展和当下应用场景来说，尤其重要。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8020\">\n                        <p data-nodeid=\"8021\">\n                          <strong data-nodeid=\"8320\">框架方案</strong>。React 和\n                          Vue\n                          无疑是当前最重要的前端框架，目前小程序多端方案也都以二者为主。但是<strong\n                            data-nodeid=\"8321\"\n                            >Flutter 和\n                            Angular，甚至更小众的框架也应该得到重视</strong\n                          >。考虑到投入产出比，如果小程序多端团队难以面面俱到地支持这些框架和新\n                          DSL，那么交给社区寻求支持，也是一个思路。比如，Taro\n                          团队将支持的重点放在 React/Vue，而快应用以及 Flutter\n                          和 Angular，暂且交给社区来适配和维护。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8022\">\n                        <p data-nodeid=\"8023\">\n                          <strong data-nodeid=\"8330\">跟进 Web 发展</strong\n                          >。在运行时，小程序多端方案一般需要在小程序逻辑层中运行\n                          React 或者是 Vue\n                          的运行时版，然后通过适配层，实现自定义渲染器。这就要求设计开发者需要<strong\n                            data-nodeid=\"8331\"\n                            >跟进 Web 发展及 Web\n                            框架的运行时能力，且实现适配层</strong\n                          >。这无疑对技术能力和水平提出了较高要求。如何处理 Web\n                          和 Web\n                          框架的关系、如何保持兼容互通，决定了小程序多端方案的生死。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8024\">\n                        <p data-nodeid=\"8025\">\n                          <strong data-nodeid=\"8352\">渐进增强型能力</strong\n                          >。无论是和 Web\n                          兼容互通还是多种小程序之间的差异磨平，对于多端方案来说，很难从理论上彻底实现“write\n                          once，run evrywhere”。因此，这就需<strong\n                            data-nodeid=\"8353\"\n                            >要框架级别上实现一套渐进增强能力</strong\n                          >。这种能力，可以是语法或 DSL\n                          层面的暂时性妥协/便利性扩展，也可以通过暴露全局变量，进行不同环境的业务分发。比如<strong\n                            data-nodeid=\"8354\"\n                            >腾讯开源的</strong\n                          >\n                          <a\n                            href=\"https://github.com/Tencent/omi/tree/master/packages/omix\"\n                            data-nodeid=\"8346\"\n                            >OMIX</a\n                          >\n                          <strong data-nodeid=\"8355\">框架</strong>：OMIX\n                          有自己的一套\n                          DSL，但整体保留小程序已有的语法。在小程序已有语法之上，OMIX\n                          还进行了扩充和增强，比如引入了 Vue 中比较有代表性的\n                          computed。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"8026\">总结</h3>\n                    <p data-nodeid=\"8027\">\n                      这一讲我们针对小程序多端方案进行了原理层面的分析，同时站在更高的视角，对不同方案和多端框架进行了比对和技术展望。实际上，理解全部内容需要你对\n                      React 和 Vue\n                      框架原理有更深入的了解，也需要对编译原理和宿主环境（小程序底层实现架构）有清晰的认知。\n                    </p>\n                    <p data-nodeid=\"8028\">本讲内容如下：</p>\n                    <p data-nodeid=\"8029\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/91/80/CgqCHmAOlbyATtP1AAHVogfDtTQ350.png\"\n                        alt=\"Drawing 13.png\"\n                        data-nodeid=\"8361\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8030\">\n                      从小程序发展元年开始，到 2018\n                      微信小程序的起飞，再到后续各大厂商快速跟进、各大寡头平台自建小程序生态，小程序现象带给我们的不仅仅是业务价值方面的讨论和启迪，也应该是对相关技术架构的巡礼和探索。作为开发者，我认为对技术的深度挖掘和运用，是能够始终矗立在时代风口浪尖的重要根基。\n                    </p>\n                    <p data-nodeid=\"8031\" class=\"\">\n                      下一讲，我将带你分析 Flutter\n                      和原生跨平台技术栈，同时梳理当下相关技术热点。跨平台其实是一个老生常谈的话题，技术方案也是历经变迁，但始终热点不断。下一讲的内容和今天的内容也有着千丝万缕的联系，别走开，我们下一讲再见！\n                    </p>\n            "}