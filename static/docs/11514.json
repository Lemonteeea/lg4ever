{"title":"12 | 性能分析：性能影响的关键路径以及优化策略","context":"\n                    <p data-nodeid=\"191125\">\n                      模块一的<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=694#/detail/pc?id=6788&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"191666\"\n                        >《06 | 哪些因素会影响 Node.js 性能？》</a\n                      >，我们详细讲解了影响到 Node.js\n                      性能的一些因素，但是在实际开发过程中，我们应该如何去定位影响性能的关键因素呢？定位到性能问题后，又该如何去优化这部分功能呢？以上就是本讲要介绍的核心知识点。\n                    </p>\n                    <h3 data-nodeid=\"191126\">工具介绍</h3>\n                    <p data-nodeid=\"191127\">\n                      在讲解性能分析实践之前，我们先来看看性能分析所应用的两个比较关键的工具：\n                    </p>\n                    <ul data-nodeid=\"191128\">\n                      <li data-nodeid=\"191129\">\n                        <p data-nodeid=\"191130\">\n                          压测所使用到的 WRK（Windows Research Kernel）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"191131\">\n                        <p data-nodeid=\"191132\">\n                          性能分析所使用到的 Chrome 分析工具 JavaScript\n                          Profile。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"191133\">WRK 的安装及参数</h4>\n                    <p data-nodeid=\"191134\">\n                      在压测工具上可选择的比较多，比如 Apache-ab 压测工具、Siege\n                      及本讲所应用的 WRK。<strong data-nodeid=\"191678\"\n                        >为了能够更好地利用多核的多线程并发测试，这里我们选择使用\n                        WRK 来作为压测工具</strong\n                      >。我们看下该工具的安装以及一些常用参数。\n                    </p>\n                    <ul data-nodeid=\"191135\">\n                      <li data-nodeid=\"191136\">\n                        <p data-nodeid=\"191137\">\n                          在<strong data-nodeid=\"191684\">Mac</strong\n                          >上使用软件包管理工具 Homebrew\n                          来安装，使用如下命令即可：\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\">brew install wrk\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"191139\">\n                      <li data-nodeid=\"191140\">\n                        <p data-nodeid=\"191141\">\n                          在<strong data-nodeid=\"191690\">Linux</strong\n                          >上依次执行……的命令安装就可以（如果 Linux 上没有安装\n                          GCC、Make 或者 Git，就需要先安装这几个工具）。\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">#下载命令</span>\n</div></li><li><div class=\"code-word\">git clone https://github.com/wg/wrk.git \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">#切换路径到wrk目录下</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">cd</span> wrk  \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">#使用make命令编译环境</span>\n</div></li><li><div class=\"code-word\"> \n</div></li><li><div class=\"code-word\">make \n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"191143\">\n                      <li data-nodeid=\"191144\">\n                        <p data-nodeid=\"191145\">\n                          在<strong data-nodeid=\"191696\">Windows</strong\n                          >上就非常遗憾了，因为这个工具不支持\n                          Windows。但如果你是 Windows 10，可以切换到 Ubuntu\n                          子系统的方式来安装，或者在 Windows 上安装 Linux\n                          虚拟机也是可以的。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"191146\">\n                      成功安装后，你可以在命令行使用……命令查看具体的参数说明和介绍：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\">wrk\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191148\">\n                      这一讲因为需要进行并发请求的验证，所以我们会使用下面的压测命令：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\">wrk <span class=\"hljs-literal\">-t4</span> <span class=\"hljs-literal\">-c300</span> <span class=\"hljs-literal\">-d20s</span> https://www.baidu.com/\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191150\">其参数说明如下：</p>\n                    <ul data-nodeid=\"191151\">\n                      <li data-nodeid=\"191152\">\n                        <p data-nodeid=\"191153\">-t 代表的是启动 4 个线程；</p>\n                      </li>\n                      <li data-nodeid=\"191154\">\n                        <p data-nodeid=\"191155\">\n                          -c 代表的是并发数，300 个并发请求；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"191156\">\n                        <p data-nodeid=\"191157\">\n                          -d 代表的是持续时长，20s 就是 20 秒。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"191158\">\n                      我们运行上面的命令后，会有相应的压测结果，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\">Running <span class=\"hljs-number\">20</span>s test <span class=\"hljs-selector-tag\">@</span> https://www.baidu.com/\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-number\">10</span> threads and <span class=\"hljs-number\">300</span> connections\n</div></li><li><div class=\"code-word\">&nbsp; Thread Stats &nbsp; Avg&nbsp; &nbsp; &nbsp; Stdev &nbsp; &nbsp; Max &nbsp; +/- Stdev\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; Latency &nbsp; <span class=\"hljs-number\">789.93</span>ms&nbsp; <span class=\"hljs-number\">393.84</span>ms &nbsp; <span class=\"hljs-number\">2.00</span>s&nbsp; &nbsp; <span class=\"hljs-number\">76.57</span>%\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; Req/Sec&nbsp; &nbsp; <span class=\"hljs-number\">14.33</span> &nbsp; &nbsp; <span class=\"hljs-number\">10.17</span>&nbsp; &nbsp; <span class=\"hljs-number\">59.00</span> &nbsp; &nbsp; <span class=\"hljs-number\">72.31</span>%\n</div></li><li><div class=\"code-word\">&nbsp; <span class=\"hljs-number\">2252</span> requests <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">20.10</span>s, <span class=\"hljs-number\">34.49</span>MB read\n</div></li><li><div class=\"code-word\">&nbsp; Socket errors: connect <span class=\"hljs-number\">60</span>, read <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">write</span> <span class=\"hljs-number\">0</span>, timeout <span class=\"hljs-number\">481</span>\n</div></li><li><div class=\"code-word\">Requests/sec:&nbsp; &nbsp; <span class=\"hljs-number\">112.05</span>\n</div></li><li><div class=\"code-word\">Transfer/sec:&nbsp; &nbsp; &nbsp; <span class=\"hljs-number\">1.72</span>MB\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191160\">\n                      上面的结果，我们核心应该关注的是 Requests/sec 为\n                      QPS，其次也需要了解平均耗时的情况，也就是上面的 Avg\n                      789.93ms，以及失败超时的情况，即上面 socket errors 的\n                      timeout 481。\n                    </p>\n                    <h4 data-nodeid=\"191161\">\n                      Chrome 分析工具 JavaScript Profiler\n                    </h4>\n                    <p data-nodeid=\"191162\">\n                      在压测下，如果发现请求 QPS\n                      非常低、平均耗时非常长，或者失败率非常高的话，这时就需要将\n                      CPU 信息进行保存，然后用 Chrome 的 JavaScript Profiler\n                      工具来进行分析。\n                    </p>\n                    <p data-nodeid=\"191163\">\n                      方法也很简单，用 Chrome 的开发者工具 More-tools →\n                      JavaScript Profiler → Load，读取 CPU\n                      Profile，查看火焰图（如图 1 所示）。\n                    </p>\n                    <p data-nodeid=\"199540\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD02Ab_ffAAK5Evk7rNM190.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"199544\"\n                      />\n                    </p>\n                    <div data-nodeid=\"199541\">\n                      <p style=\"text-align: center\">\n                        图 1 Chrome 打开 JavaScript Profiler 指引图\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"191166\">\n                      要使用这个功能，需要在 Node.js 中对 CPU\n                      进行采集，采集的方式需要使用 v8-profiler 这个库（如果你的\n                      Node.js 版本大于 10，则需要使用 v8-profiler-next\n                      这个库），在上一讲中已经应用过该工具分析过内存泄漏问题。\n                    </p>\n                    <h4 data-nodeid=\"191167\">简单 Demo 演示</h4>\n                    <p data-nodeid=\"191168\">\n                      为了演示这个分析方式，我们写一个最简单的测试代码，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 引入 v8-profiler 库，可以作为一个中间件来实现</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> v8Profiler = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./lib/v8_profiler'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> * 创建 http 服务，简单返回\n</div></li><li><div class=\"code-word\"> */\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    res.write(<span class=\"hljs-string\">'hello world'</span>);\n</div></li><li><div class=\"code-word\">    res.end();\n</div></li><li><div class=\"code-word\">});\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> * 启动服务，并开始执行 v8 profiler 的采集工作\n</div></li><li><div class=\"code-word\"> */\n</div></li><li><div class=\"code-word\">server.listen(<span class=\"hljs-number\">3000</span>, () =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'server start http://127.0.0.1:3000'</span>);\n</div></li><li><div class=\"code-word\">    v8Profiler.start();\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191170\">\n                      在上面代码中的第二行，我们引入了一个自身写的 v8-profiler\n                      库，接下来看看这个库的逻辑。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-meta\">'use strict'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> v8Profiler = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'v8-profiler-next'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 设置采集数据保存的文件名</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> title = <span class=\"hljs-string\">'example'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'start'</span> : <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 启动采集，如果需要定时采集，可以将 title 设置为一个动态的根据时间变化的值</span>\n</div></li><li><div class=\"code-word\">        v8Profiler.startProfiling(title, <span class=\"hljs-literal\">true</span>);\n</div></li><li><div class=\"code-word\">        setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> { <span class=\"hljs-comment\">// 30 秒后采集并导出</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">const</span> profile = v8Profiler.stopProfiling(title);\n</div></li><li><div class=\"code-word\">          profile.export(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error, result</span>) </span>{ <span class=\"hljs-comment\">// 将内容写入指定文件</span>\n</div></li><li><div class=\"code-word\">            fs.writeFileSync(<span class=\"hljs-string\">\\`./cpu_profiler/<span class=\"hljs-subst\">${title}</span>.cpuprofile\\`</span>, result);\n</div></li><li><div class=\"code-word\">            profile.delete();\n</div></li><li><div class=\"code-word\">          });\n</div></li><li><div class=\"code-word\">        }, <span class=\"hljs-number\">30</span> * <span class=\"hljs-number\">1000</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191172\">\n                      <strong data-nodeid=\"191720\"\n                        >上面代码中的 start 方法，就是核心的采集代码</strong\n                      >。v8-Profiler 开始采集，使用 title 作为唯一标示，在 30\n                      秒后，停止这个 title 的采集，并获取数据保存在文件中。\n                    </p>\n                    <p data-nodeid=\"191173\">\n                      为了验证效果，你可以根据我们下面的步骤来进行分析（代码源码保存在<a\n                        href=\"https://github.com/love-flutter/nodejs-column?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"191724\"\n                        >GitHub</a\n                      >中，自行下载后，可按照下面步骤执行）。\n                    </p>\n                    <p data-nodeid=\"191174\">\n                      （1）打开项目，进入项目根目录，执行命令启动服务。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm run test\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191176\">\n                      （2）打开另外一个命令窗口，开始执行压测程序。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">wrk -t2 -c300 -d20s http:<span class=\"hljs-comment\">//127.0.0.1:3000/</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191178\">\n                      （3）大概 30 秒后，项目目录下的 cpu_profiler\n                      文件夹下会生成 example.cpuprofile 文件。\n                    </p>\n                    <p data-nodeid=\"191179\">\n                      （4）打开 Chrome 工具中的 JavaScript Profiler，然后 load\n                      刚才项目目录下的 cpu_profiler/example.cpuprofile\n                      文件，就可以看到如图 2 所示的结果。\n                    </p>\n                    <p data-nodeid=\"204356\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/33/FF/Cgp9HWBwD1yAaayGAAO16nRrzQQ497.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"204360\"\n                      />\n                    </p>\n                    <div data-nodeid=\"204357\">\n                      <p style=\"text-align: center\">图 2 cpuprofile 演示结果</p>\n                    </div>\n\n                    <p data-nodeid=\"191182\">\n                      从上面的结果可以看到相应的单个执行时间和总的耗时。如果性能较慢，你可以参照标准的结果来进行分析，或者对比一个性能较好、一个性能较差的执行结果。为了让你更清晰地了解这些，下面我将从实践来进行分析。\n                    </p>\n                    <h3 data-nodeid=\"191183\">实践分析</h3>\n                    <p data-nodeid=\"191184\">\n                      在分析任何数据之前，首先必须有一个标准的数据进行比较，如果你用的是\n                      Express、Eggjs\n                      等框架，需要做一个完全空转的数据作为标准分析数据。在本讲，由于我们没有用任何框架，所以需要设计一个完全空转的\n                      HTTP 服务来作为标准的分析数据。\n                    </p>\n                    <h4 data-nodeid=\"191185\">标准数据</h4>\n                    <p data-nodeid=\"191186\">\n                      这里我们还是用上面“简单 Demo 演示”中的代码，然后通过 WRK\n                      下面的压测命令来压测，看下具体的数据情况。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">wrk -t2 -c300 -d20s http:<span class=\"hljs-comment\">//127.0.0.1:3000/</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191188\">压测得到的结果如表 1 所示。</p>\n                    <p data-nodeid=\"209047\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD2aAAtjKAABBXwAaJE8675.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"209050\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"191219\">\n                      有了这份数据后，我们再来逐个分析以下问题。\n                    </p>\n                    <h4 data-nodeid=\"191220\">CPU 计算耗时</h4>\n                    <p data-nodeid=\"191221\">\n                      为了验证效果，这里我们写一个 CPU\n                      计算耗时的逻辑，然后继续压测。这点在模块一的<a\n                        href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=694#/detail/pc?id=6788&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"191788\"\n                        >《06 | 哪些因素会影响 Node.js 性能？》</a\n                      >已经有一些例子，我们拿一个出来尝试一下，比如 MD5\n                      计算的逻辑，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">crypto = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'crypto'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\">(<span class=\"hljs-params\">content</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> crypto.createHash(<span class=\"hljs-string\">'md5'</span>).update(content).digest(<span class=\"hljs-string\">\"hex\"</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191223\">\n                      核心逻辑就是应用 crypto 来生成 MD5\n                      加密数据，为了效果更好，我们在入口文件 index.js\n                      中多调用几次，这里只修改 server 中的代码逻辑，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 设置返回的字符串</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> ret;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 加密一组数据</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> md5List = [<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'Node.js'</span>, <span class=\"hljs-string\">'lagou'</span>, <span class=\"hljs-string\">'is'</span>, <span class=\"hljs-string\">'great'</span>];\n</div></li><li><div class=\"code-word\">    md5List.forEach( <span class=\"hljs-function\">(<span class=\"hljs-params\">str</span>)=&gt;</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span>(ret){\n</div></li><li><div class=\"code-word\">            ret = <span class=\"hljs-string\">\\`<span class=\"hljs-subst\">${ret}</span> <span class=\"hljs-subst\">${getMd5(str)}</span>\\`</span>;\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            ret = getMd5(str)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">    res.write(ret);\n</div></li><li><div class=\"code-word\">    res.end();\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191225\">\n                      修改完成后，我们再按照简单 Demo 中的四个步骤压测数据即可：\n                    </p>\n                    <ul data-nodeid=\"191226\">\n                      <li data-nodeid=\"191227\">\n                        <p data-nodeid=\"191228\">启动服务</p>\n                      </li>\n                      <li data-nodeid=\"191229\">\n                        <p data-nodeid=\"191230\">开始压测</p>\n                      </li>\n                      <li data-nodeid=\"191231\">\n                        <p data-nodeid=\"191232\">等待 CPU 采集</p>\n                      </li>\n                      <li data-nodeid=\"191233\">\n                        <p data-nodeid=\"191234\">分析压测数据</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"191235\">\n                      接下来我们看下压测后的数据，如表 2 所示。\n                    </p>\n                    <p data-nodeid=\"211325\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD3SAIEtvAABS4dW-YPo314.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"211328\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"191274\">\n                      这一对比可以非常清晰地看到，相对于标准服务，CPU\n                      耗时服务在各方面（平均耗时、最低耗时、最大耗时以及失败率）都差很多，在性能上两者是有比较大的落差的，如果我们不知道是因为\n                      MD5 影响到 CPU 计算导致的，那么就需要分析 CPU\n                      耗时的情况了。\n                    </p>\n                    <p data-nodeid=\"191275\">\n                      接下来我们打开 Chrome JavaScript Profiler\n                      工具，可以看到如图 3 所示的结果。\n                    </p>\n                    <p data-nodeid=\"215563\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD3uADtMhAAMNNH1bIOY973.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"215567\"\n                      />\n                    </p>\n                    <div data-nodeid=\"215564\" class=\"\">\n                      <p style=\"text-align: center\">\n                        图 3 CPU 压测 CPU 耗时分析\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"191278\">\n                      几个耗时较长的函数，例如 digest、Hash 以及 update\n                      等，都是在 MD5 计算中的逻辑，因此可以非常清晰地了解到，在\n                      MD5 计算方面会对 Node.js\n                      的服务有一个比较大的性能影响，因此在开发时尽量减少或者避免这种类似的计算服务。\n                    </p>\n                    <h4 data-nodeid=\"191279\">网络 I/O</h4>\n                    <p data-nodeid=\"191280\">\n                      为了演示效果，我们<strong data-nodeid=\"191858\"\n                        >先创建一个新的服务</strong\n                      >，这个服务在原来的“简单 Demo\n                      演示”基础上增加了一个延迟返回的效果，具体代码在 api_server\n                      文件项目中，核心代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> * 创建 http 服务，简单返回\n</div></li><li><div class=\"code-word\"> */\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> { <span class=\"hljs-comment\">// 延迟 1 秒返回</span>\n</div></li><li><div class=\"code-word\">        res.write(<span class=\"hljs-string\">'this is api result'</span>);\n</div></li><li><div class=\"code-word\">        res.end();\n</div></li><li><div class=\"code-word\">    }, <span class=\"hljs-number\">1</span> * <span class=\"hljs-number\">1000</span>);\n</div></li><li><div class=\"code-word\">});\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> * 启动服务，并开始执行 v8 profiler 的采集工作\n</div></li><li><div class=\"code-word\"> */\n</div></li><li><div class=\"code-word\">server.listen(<span class=\"hljs-number\">4000</span>, () =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'server start http://127.0.0.1:4000'</span>);\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191282\">\n                      核心代码是在 setTimeout\n                      延迟返回，其次修改了以下监听端口，从 3000 修改为 4000。\n                    </p>\n                    <p data-nodeid=\"191283\">\n                      <strong data-nodeid=\"191868\"\n                        >接下来我们创建一个 network_io</strong\n                      >，实现调用 http://127.0.0.1:4000 这个服务，从而实现网络\n                      I/O 操作。首先还是实现一个 call_api 的服务，该服务会应用到\n                      request 这个 npm\n                      库（后续这个库不会维护了，暂时还没有替代方案，除非自己手动实现），代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 引入 request 库，需要在 package.json 中申明，并且 npm install</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> request = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'request'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> * request 调用外部 api\n</div></li><li><div class=\"code-word\"> * @param {*} apiLink string\n</div></li><li><div class=\"code-word\"> * @param {*} callback funtion\n</div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> */\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\">(<span class=\"hljs-params\">apiLink, callback</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    request(apiLink, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error, response, body</span>) </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span>(error) {\n</div></li><li><div class=\"code-word\">            callback(<span class=\"hljs-literal\">false</span>);\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            callback(body);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191285\">\n                      这部分代码主要是应用 request 模块调用 apiLink\n                      服务，并获取执行结果。通过回调的方式返回具体的数据，也就是上面的参数\n                      callback。\n                    </p>\n                    <p data-nodeid=\"191286\">\n                      最后我们再来看下 index.js 中的核心部分 server\n                      的修改，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> * 创建 http 服务，简单返回\n</div></li><li><div class=\"code-word\"> */\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    callApi(<span class=\"hljs-string\">'http://127.0.0.1:4000'</span>, (ret) =&gt; { <span class=\"hljs-comment\">// 调用 4000 服务，并显示返回结果</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span>(ret) {\n</div></li><li><div class=\"code-word\">            res.write(ret);\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            res.write(<span class=\"hljs-string\">'call api server error'</span>);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        res.end();\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191288\">\n                      接下来就启动两个服务，分别打开地址：\n                    </p>\n                    <ul data-nodeid=\"191289\">\n                      <li data-nodeid=\"191290\">\n                        <p data-nodeid=\"191291\">\n                          <a\n                            href=\"http://127.0.0.1:4000?fileGuid=xxQTRXtVcqtHK6j8\"\n                            data-nodeid=\"191874\"\n                            >http://127.0.0.1:4000</a\n                          >\n                        </p>\n                      </li>\n                      <li data-nodeid=\"191292\">\n                        <p data-nodeid=\"191293\">\n                          <a\n                            href=\"http://127.0.0.1:3000?fileGuid=xxQTRXtVcqtHK6j8\"\n                            data-nodeid=\"191877\"\n                            >http://127.0.0.1:3000</a\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"191294\">\n                      看下是否正常响应，正常返回数据后，我们再启动对 3000\n                      服务的压测，运行如下命令：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">wrk -t2 -c300 -d20s http:<span class=\"hljs-comment\">//127.0.0.1:3000/</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191296\">\n                      接下来我们看下压测后的数据，如表 3 所示：\n                    </p>\n                    <p data-nodeid=\"217680\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/00/Cgp9HWBwD4-AFJLoAABlk46DdAs957.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"217683\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"191343\">\n                      拿到压测数据后，同样按照 CPU 分析方法，可以看到如图 4\n                      所示的性能分析结果。\n                    </p>\n                    <p data-nodeid=\"221527\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/34/00/Cgp9HWBwD5mAFR0WAAHjSmqkmd0847.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"221531\"\n                      />\n                    </p>\n                    <div data-nodeid=\"221528\">\n                      <p style=\"text-align: center\">\n                        图 4 网络 I/O 性能分析数据\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"191346\">\n                      其中有一个 connect，该模块在 net.js\n                      中，这里就可以得到是网络 I/O 引起的问题。\n                    </p>\n                    <p data-nodeid=\"191347\">\n                      最后我们再来看下 磁盘 I/O 的问题。\n                    </p>\n                    <h4 data-nodeid=\"191348\">磁盘 I/O</h4>\n                    <p data-nodeid=\"191349\">\n                      这里主要使用 Node.js 的 fs\n                      模块来读取本地的文件，并显示返回文件的内容，核心代码是\n                      server 回调部分，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">let</span> ret = fs.readFileSync(<span class=\"hljs-string\">'./test_file.conf'</span>);\n</div></li><li><div class=\"code-word\">    res.write(ret);\n</div></li><li><div class=\"code-word\">    res.end();\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191351\">\n                      接下来，我们同样用如下命令来启动压测服务：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">wrk -t2 -c300 -d20s http:<span class=\"hljs-comment\">//127.0.0.1:3000/</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191353\">\n                      压测后将得到如表格 4 所示的结果。\n                    </p>\n                    <p data-nodeid=\"223452\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD6SAOvwRAAB4GHKuanE270.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"223455\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"191408\">\n                      从结果看也是存在一定损耗的，具体在哪方面影响到性能，同样用\n                      Chrome 工具载入该服务采集的 CPU 信息，如图 5 所示。\n                    </p>\n                    <p data-nodeid=\"226862\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/00/Cgp9HWBwD6yATYtxAAHRgb9iz4o952.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"226866\"\n                      />\n                    </p>\n                    <div data-nodeid=\"226863\" class=\"\">\n                      <p style=\"text-align: center\">\n                        图 5 磁盘 I/O CPU 采集信息\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"191411\">\n                      从图 5\n                      中可以非常清晰地看到前面几个耗时较长的都是关于文件读写相关的模块，如上面红色圈里面的信息。\n                    </p>\n                    <h3 data-nodeid=\"191412\">优化以及效果</h3>\n                    <p data-nodeid=\"191413\">\n                      上面已经介绍到了那么多性能影响的部分，那么接下来看看如何进行一些优化，来提升性能。\n                    </p>\n                    <h4 data-nodeid=\"191414\">CPU 计算耗时</h4>\n                    <p data-nodeid=\"191415\">\n                      这部分只能说减少操作，或者减少运算。像我们上面的例子，如果都是一样的\n                      MD5\n                      计算，那么增加一个短时间的缓存就可以了。当然这里我们可以直接用内存来缓存（实际开发过程中，不能使用内存的方式，因为会造成内存使用越来越大，一般使用共享内存，并短时间保存即可），代码如下（代码保存在\n                      cpu_opt 中）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">crypto = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'crypto'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 保存缓存信息</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> md5Cache = {};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\">(<span class=\"hljs-params\">content</span>) =&gt;</span> { \n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>(md5Cache[content]) { <span class=\"hljs-comment\">// 判断是否存在缓存信息，存在则直接返回</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> md5Cache[content]\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/** 不存在则计算并返回 */</span>\n</div></li><li><div class=\"code-word\">    md5Cache[content] = crypto.createHash(<span class=\"hljs-string\">'md5'</span>).update(content).digest(<span class=\"hljs-string\">\"hex\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> md5Cache[content];\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191417\">\n                      <strong data-nodeid=\"192020\"\n                        >核心就是在原来的基础上，增加计算的缓存，避免多次相同的计算</strong\n                      >，接下来我们压测后看看实际的效果数据，并与之前的进行对比，得到的结果如表\n                      5 所示。\n                    </p>\n                    <p data-nodeid=\"228565\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/34/00/Cgp9HWBwD7aAKWHYAABelIOMBeE096.png\"\n                        alt=\"Drawing 9.png\"\n                        data-nodeid=\"228568\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"191464\">\n                      对比数据后，可以看到已经非常好了，已经和标准数据相差无几，QPS\n                      和\n                      标准服务也基本一致（这里比标准服务高，是因为本机测试，会有一定的起伏，是正常情况）。也就代表本次优化是达到了效果的。\n                    </p>\n                    <h4 data-nodeid=\"191465\">网络 I/O</h4>\n                    <p data-nodeid=\"191466\">\n                      网络 I/O\n                      同样的办法也是增加缓存，避免重复的请求导致的问题。这里我们同样<strong\n                        data-nodeid=\"192085\"\n                        >用缓存的方式来保存请求结果</strong\n                      >，优化的代码如下（代码保存在 network_io_opt 中）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 引入 request 库，需要在 package.json 中申明，并且 npm install</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> request = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'request'</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 缓存 api 请求结果数据</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> apiCacheData = {};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> * request 调用外部 api\n</div></li><li><div class=\"code-word\"> * @param {*} apiLink string\n</div></li><li><div class=\"code-word\"> * @param {*} callback funtion\n</div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> */\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\">(<span class=\"hljs-params\">apiLink, callback</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>(apiCacheData[apiLink]) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> callback(apiCacheData[apiLink]);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    request(apiLink, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error, response, body</span>) </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span>(error) {\n</div></li><li><div class=\"code-word\">            callback(<span class=\"hljs-literal\">false</span>);\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            apiCacheData[apiLink] = body;\n</div></li><li><div class=\"code-word\">            callback(body);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191468\">\n                      <strong data-nodeid=\"192090\"\n                        >其次为了服务性能考虑，我们可以考虑放弃部分超时请求，从而提升服务性能</strong\n                      >。避免因为部分请求返回慢，导致整体服务被 block 住，修改\n                      request 部分增加超时处理，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\">(<span class=\"hljs-params\">apiLink, callback</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>(apiCacheData[apiLink]) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> callback(apiCacheData[apiLink]);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    request(apiLink, {<span class=\"hljs-attr\">timeout</span>: <span class=\"hljs-number\">3000</span>}, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error, response, body</span>) </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span>(error) {\n</div></li><li><div class=\"code-word\">            callback(<span class=\"hljs-literal\">false</span>);\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            apiCacheData[apiLink] = body;\n</div></li><li><div class=\"code-word\">            callback(body);\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191470\">\n                      实际情况需要根据具体的接口性能来设置这个超时时间，避免超时时间过度影响服务，也避免时间过长无法达到效果。\n                    </p>\n                    <p data-nodeid=\"191471\">\n                      优化完成后，同样我们再跑一遍测试数据：\n                    </p>\n                    <ul data-nodeid=\"191472\">\n                      <li data-nodeid=\"191473\">\n                        <p data-nodeid=\"191474\">\n                          首先还是先去 api_server 中启动 api 服务；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"191475\">\n                        <p data-nodeid=\"191476\">\n                          接下来再启动本文件夹 network_io_opt 的服务；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"191477\">\n                        <p data-nodeid=\"191478\">启动完成后，再进行压测。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"191479\" class=\"\">\n                      可以得到表 6 的压测对比数据。\n                    </p>\n                    <p data-nodeid=\"230077\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/00/Cgp9HWBwD8GACAFLAABqJCdynds886.png\"\n                        alt=\"Drawing 10.png\"\n                        data-nodeid=\"230080\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"191526\">\n                      从结果中可以看出优化效果非常明显，一个简单的优化就可以将原来\n                      272.96 的 QPS 提升到 31503.58。\n                    </p>\n                    <p data-nodeid=\"191527\">\n                      最后我们再来看看磁盘 I/O 的优化。\n                    </p>\n                    <h4 data-nodeid=\"191528\">磁盘 I/O</h4>\n                    <p data-nodeid=\"191529\">\n                      <strong data-nodeid=\"192163\"\n                        >磁盘 I/O 的优化分为读优化和写优化</strong\n                      >，优化的策略有：\n                    </p>\n                    <ul data-nodeid=\"191530\">\n                      <li data-nodeid=\"191531\">\n                        <p data-nodeid=\"191532\">\n                          为了提升性能需要将同步修改异步，避免影响主线程的性能；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"191533\">\n                        <p data-nodeid=\"191534\">\n                          读优化，必须增加必要的缓存，减少相同文件的重复读取；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"191535\">\n                        <p data-nodeid=\"191536\">\n                          写优化，可以使用异步写文件的方式，先将写内容缓存到队列（如我们第一部分的第\n                          08 讲的方案）；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"191537\">\n                        <p data-nodeid=\"191538\">\n                          合并多次写操作，避免频繁打开文件，读写文件内容。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"191539\">\n                      当然对于本讲，我们着重优化 2 点：\n                    </p>\n                    <ul data-nodeid=\"191540\">\n                      <li data-nodeid=\"191541\">\n                        <p data-nodeid=\"191542\">修改为异步</p>\n                      </li>\n                      <li data-nodeid=\"191543\">\n                        <p data-nodeid=\"191544\">增加缓存</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"191545\">\n                      优化代码如下（代码在 disk_io_opt 中）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    fs.readFile(<span class=\"hljs-string\">'./test_file.conf'</span>, (err, data) =&gt; {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (err) {\n</div></li><li><div class=\"code-word\">            res.write(<span class=\"hljs-string\">'error read file'</span>);\n</div></li><li><div class=\"code-word\">            res.end();\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            res.write(data);\n</div></li><li><div class=\"code-word\">            res.end();\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191547\">\n                      接下来继续压测看下效果，如表 7 所示：\n                    </p>\n                    <p data-nodeid=\"231399\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/00/Cgp9HWBwD8qATRwGAABrIJLpIKs046.png\"\n                        alt=\"Drawing 11.png\"\n                        data-nodeid=\"231402\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"191594\">\n                      从上面看得出异步 I/O\n                      对服务性能提升还是比较突出，也是比较关键的。如果文件大会更突出，因此在平时代码中要非常注重这点，减少同步读写的操作。\n                    </p>\n                    <p data-nodeid=\"191595\">\n                      那么如果我们继续优化，增加缓存呢？我们来看下效果，修改下面代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 文件缓存</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> fileCache;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/**\n</span></div></li><li><div class=\"code-word\"> * \n</div></li><li><div class=\"code-word\"> * 创建 http 服务，简单返回\n</div></li><li><div class=\"code-word\"> */\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> server = http.createServer(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span>(fileCache) {\n</div></li><li><div class=\"code-word\">        res.write(fileCache);\n</div></li><li><div class=\"code-word\">        res.end();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    fs.readFile(<span class=\"hljs-string\">'./test_file.conf'</span>, (err, data) =&gt; {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (err) {\n</div></li><li><div class=\"code-word\">            res.write(<span class=\"hljs-string\">'error read file'</span>);\n</div></li><li><div class=\"code-word\">            res.end();\n</div></li><li><div class=\"code-word\">        } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            fileCache = data;\n</div></li><li><div class=\"code-word\">            res.write(data);\n</div></li><li><div class=\"code-word\">            res.end();\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"191597\">\n                      并且重新压测看下数据，如表格 8 所示。\n                    </p>\n                    <p data-nodeid=\"232531\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/34/08/CioPOWBwD9KAICB5AAB9TVaRLF4498.png\"\n                        alt=\"Drawing 12.png\"\n                        data-nodeid=\"232534\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"191652\">\n                      从结果看已经和标准的数据非常接近，因此<strong\n                        data-nodeid=\"192298\"\n                        >在 Node.js\n                        开发过程中，要特别注意文件读取，避免相同文件的重复读取</strong\n                      >。从表格 8\n                      中的异步和缓存数据对比来看，通过缓存的处理优化，就可以在\n                      QPS 上从 18353.39 提升至 35058.79，有 91% 以上的性能提升。\n                    </p>\n                    <h3 data-nodeid=\"191653\">总结</h3>\n                    <p data-nodeid=\"191654\">\n                      学完本讲，你应该要掌握两个工具的应用，对于服务端研发来说这些工具是非常重要的，我希望你能深入去实践应用这两个工具。其次了解\n                      3\n                      种影响性能因素的优化策略，同时在日常开发中，应尽量避免影响性能的代码逻辑。\n                    </p>\n                    <p data-nodeid=\"191655\">\n                      那你在实际的工作中，是如何提升性能的呢，欢迎在评论区分享你的经验。\n                    </p>\n                    <p data-nodeid=\"233443\">\n                      这一讲就讲完了，下一讲将讲解“常见网络攻击以及防护策略”，到时见~\n                    </p>\n\n                    <hr data-nodeid=\"191661\" />\n\n                    <p data-nodeid=\"191033\">\n                      <a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"191040\"\n                        ><img\n                          src=\"https://s0.lgstatic.com/i/image6/M00/12/FA/CioPOWBBrAKAAod-AASyC72ZqWw233.png\"\n                          alt=\"Drawing 2.png\"\n                          data-nodeid=\"191039\"\n                      /></a>\n                    </p>\n                    <p data-nodeid=\"191034\">\n                      <strong data-nodeid=\"191044\">《大前端高薪训练营》</strong>\n                    </p>\n                    <p data-nodeid=\"191035\" class=\"\">\n                      对标阿里 P7 技术需求 + 每月大厂内推，6\n                      个月助你斩获名企高薪 Offer。<a\n                        href=\"https://shenceyun.lagou.com/t/mka\"\n                        data-nodeid=\"191048\"\n                        >点击链接</a\n                      >，快来领取！\n                    </p>\n            "}