{"title":"01 | 如何快速搭建 TypeScript 学习开发环境？","context":"\n                    <p data-nodeid=\"1421\" class=\"\">\n                      “工欲善其事，必先利其器。”因此，在正式讲解 TypeScript\n                      之前，我们有必要先掌握 TypeScript\n                      开发环境的搭建及相关注意事项。\n                    </p>\n                    <h3 data-nodeid=\"1422\">IDE for TypeScript</h3>\n                    <p data-nodeid=\"1423\">\n                      在搭建 TypeScript 环境之前，我们需要先认识几款适合\n                      TypeScript 的\n                      IDE。只有这样，在开发时我们才能根据实际情况选择合适的 IDE\n                      进行安装，从而提升工作效率。\n                    </p>\n                    <h4 data-nodeid=\"1424\">VS Code</h4>\n                    <p data-nodeid=\"1425\">\n                      如果让我推荐一款 IDE\n                      的话，我会首推微软的“亲儿子”——开源编辑器 VS Code（Visual\n                      Studio Code），因为它具备以下 4 点优势：\n                    </p>\n                    <ol data-nodeid=\"1426\">\n                      <li data-nodeid=\"1427\">\n                        <p data-nodeid=\"1428\">\n                          在传统语法高亮、自动补全功能的基础上拓展了基于变量类型、函数定义，以及引入模块的智能补全；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1429\">\n                        <p data-nodeid=\"1430\">\n                          支持在编辑器上直接运行和调试应用；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1431\">\n                        <p data-nodeid=\"1432\">\n                          内置了 Git Comands，能大幅提升使用 Git 及其他 SCM\n                          管理工具的协同开发效率；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1433\">\n                        <p data-nodeid=\"1434\">\n                          基于 Electron 开发，具备超强的扩展性和定制性。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1435\">\n                      下面请你<a\n                        href=\"https://code.visualstudio.com/?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"1569\"\n                        >点击这里打开官方网站，并下载安装包进行安装</a\n                      >。安装好后，我们点击启动图标即可启动 VS Code。\n                    </p>\n                    <p data-nodeid=\"1436\">\n                      在 Mac 电脑上，如果你习惯使用命令行，可以将 VS Code bin\n                      目录添加到环境变量 PATH\n                      中，以便更方便地唤起它，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">export PATH=\"$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin\"\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1438\">\n                      然后，在 Mac 命令行工具中，我们使用 Vim 编辑“source\n                      ~/.bash_profile”即可让配置的环境变量生效。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">source ~/.bash_profile\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1440\">\n                      Vim 保存退出后，输入“code\n                      应用路径”（如下所示），我们就可以快速打开和编辑指定路径下的应用了。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">&nbsp;code 应用路径\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1442\">\n                      因为 VS Code 中内置了特定版本的 TypeScript\n                      语言服务，所以它天然支持 TypeScript\n                      语法解析和类型检测，且这个内置的服务与手动安装的\n                      TypeScript 完全隔离。因此，<strong data-nodeid=\"1583\"\n                        >VS Code\n                        支持在内置和手动安装版本之间动态切换语言服务，从而实现对不同版本的\n                        TypeScript 的支持</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"1443\">\n                      如果当前应用目录中安装了与内置服务不同版本的\n                      TypeScript，我们就可以点击 VS Code\n                      底部工具栏的版本号信息，从而实现 “use VS Code's Version”\n                      和 “use Workspace's Version” 两者之间的随意切换。\n                    </p>\n                    <p data-nodeid=\"1444\">\n                      设置当前窗口使用的 TypeScript 版本的具体操作，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1445\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3D/AB/Cgp9HWCV_ZaAcBb0ACrQ7VCdLNg442.gif\"\n                        alt=\"versions.gif\"\n                        data-nodeid=\"1592\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1446\">\n                      <p style=\"text-align: center\">\n                        可随意切换 TypeScript 版本窗口图\n                      </p>\n                    </div>\n                    <p data-nodeid=\"1447\">\n                      我们也可以在当前应用目录下的 “.VS Code/settings.json”\n                      内添加命令（如下所示）配置 VS Code\n                      默认使用应用目录下安装的 TypeScript\n                      版本，以便提供语法解析和类型检测服务。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"typescript.tsdk\"</span>: <span class=\"hljs-string\">\"node_modules/typescript/lib\"</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1449\">\n                      在实际编写 TypeScript 代码时，我们可以使用“Shift + Command\n                      +\n                      M”快捷键打开问题面板查看所有的类型错误信息概览，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1450\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3D/B4/CioPOWCV_aiANRthACtpGH2EbVM328.gif\"\n                        alt=\"problems.gif\"\n                        data-nodeid=\"1597\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1451\">\n                      <p style=\"text-align: center\">\n                        查看所有的类型错误信息概览图\n                      </p>\n                    </div>\n                    <p data-nodeid=\"1452\">\n                      <strong data-nodeid=\"1603\"\n                        >这里请注意：不同操作系统、不同 VS Code\n                        版本的默认快捷键可能不一致，我们可以点击菜单栏中的“视图（View）|\n                        问题（Problems）” 查看具体快捷键。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1453\">\n                      当然，VS Code 也基于 TypeScript\n                      语言服务提供了准确的代码自动补全功能，并显示详细的类型定义信息，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1454\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3D/AB/Cgp9HWCV_bqAahbtAASBXpVdoSk110.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"1607\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1455\">\n                      <p style=\"text-align: center\">自动智能补全功能效果图</p>\n                    </div>\n                    <p data-nodeid=\"1456\">\n                      除了类型定义之外，TypeScript 语言服务还能将使用 JSDoc\n                      语法编写的结构化注释信息提供给 VS\n                      Code，而这些信息将在对应的变量或者类型中通过 hover\n                      展示出来，极大地提升了代码的可读性和开发效率，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1457\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3D/B4/CioPOWCV_c-AUMxiACJEAc_XkjE624.gif\"\n                        alt=\"hover.gif\"\n                        data-nodeid=\"1611\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1458\">\n                      <p style=\"text-align: center\">JSDoc 信息提示图</p>\n                    </div>\n                    <p data-nodeid=\"1459\">\n                      我们还可以通过 “Ctrl + \\`” 快捷键打开 VS Code\n                      内置的命令行工具，以便在当前应用路径下执行各种操作，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1460\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3D/AC/Cgp9HWCV_dqAK7K-AALYUhjm47c225.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"1617\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1461\">\n                      <p style=\"text-align: center\">\n                        VS Code 内置的命令行工具图\n                      </p>\n                    </div>\n                    <p data-nodeid=\"1462\">\n                      以上就是 VS Code\n                      编辑器的基本介绍了，此时有没有蠢蠢欲动的感觉？\n                    </p>\n                    <p data-nodeid=\"1463\">\n                      对于 VS Code 这款 IDE\n                      而言，它比较大众化、开放化，已经能满足我们绝大多数的功能诉求。即便有些需求不能满足，我们也可以通过丰富的插件市场进行实现。\n                    </p>\n                    <p data-nodeid=\"1464\">\n                      而 VS Code\n                      唯一的不足就是需要我们自己手动选择合适的插件拓展功能，对于选择困难症的人来说简直抓狂。\n                    </p>\n                    <h4 data-nodeid=\"1465\">WebStorm</h4>\n                    <p data-nodeid=\"1466\">\n                      另外一款值得推荐的 TypeScript 开发利器是 WebStorm，<strong\n                        data-nodeid=\"1626\"\n                        >它具备开箱即用、无须做任何针对性的配置即可开发、执行和调试\n                        TypeScript 源码这两大优势。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1467\">\n                      下面请<a\n                        href=\"https://www.jetbrains.com/webstorm/?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"1630\"\n                        >点击这里打开官方网站，并下载安装包进行安装</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"1468\">\n                      WebStorm 也是基于标准的 TypeScript Language Service 来支持\n                      TypeScript 的各种特性，与其他 IDE\n                      在类型检测结果、自动完成提示上没有任何差异。\n                    </p>\n                    <p data-nodeid=\"1469\">\n                      比如，它同样可以准确地进行代码自动补全，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1470\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3D/AC/Cgp9HWCV_eqAU4ipAAUcTPGzEyU020.png\"\n                        alt=\"Drawing 8.png\"\n                        data-nodeid=\"1636\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1471\">\n                      <p style=\"text-align: center\">代码自动补全效果图</p>\n                    </div>\n                    <p data-nodeid=\"1472\">\n                      再比如，它同样支持 hover 提示类型及 JSDoc\n                      注释，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1473\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3D/AC/Cgp9HWCV_fyAO4ZRAASrHcWWn8Y686.png\"\n                        alt=\"Drawing 10.png\"\n                        data-nodeid=\"1640\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1474\">\n                      <p style=\"text-align: center\">提示类型及注释效果图</p>\n                    </div>\n                    <p data-nodeid=\"1475\">\n                      因为 WebStorm\n                      毕竟是一款商业化（收钱的）软件，所以它还集成了很多强大的\n                      TypeScript 开发功能，具体内容你<a\n                        href=\"https://www.jetbrains.com/zh-cn/webstorm/features/?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"1644\"\n                        >可点击这里查看</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"1476\">\n                      WebStorm 与 VS Code 相比，最大的<strong data-nodeid=\"1651\"\n                        >优势在于开箱即用</strong\n                      >，这点可谓是选择困难症患者的福音。不过，它对电脑配置要求较高，对于\n                      Mac 用户来说比较适合。\n                    </p>\n                    <h4 data-nodeid=\"1477\">Playground</h4>\n                    <p data-nodeid=\"1478\">\n                      官方也提供了一个在线开发 TypeScript 的云环境——Playground。\n                    </p>\n                    <p data-nodeid=\"1479\">\n                      基于它，我们无须在本地安装环境，只需要一个浏览器即可随时学习和编写\n                      TypeScript，同时还可以方便地选择 TypeScript 版本、配置\n                      tsconfig，并对 TypeScript 实时静态类型检测、转译输出\n                      JavaScript 和在线执行。\n                    </p>\n                    <p data-nodeid=\"1480\">\n                      而且在体验上，它也一点儿不逊色于任何本地的\n                      IDE，对于刚刚学习 TypeScript\n                      的我们来说，算是一个不错的选择。\n                    </p>\n                    <ul data-nodeid=\"1481\">\n                      <li data-nodeid=\"1482\">\n                        <p data-nodeid=\"1483\">\n                          <a\n                            href=\"https://www.typescriptlang.org/zh/play?target=1&amp;module=1&amp;ts=3.9.7#code/Q&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                            data-nodeid=\"1658\"\n                            >点击查看中文版地址</a\n                          >（如下图所示）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1484\">\n                        <p data-nodeid=\"1485\">\n                          <a\n                            href=\"https://www.typescriptlang.org/play?alwaysStrict=false&amp;target=1&amp;module=1&amp;ts=3.9.7#code/Q&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                            data-nodeid=\"1662\"\n                            >点击查看英文版地址</a\n                          >\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1486\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/3D/AC/Cgp9HWCV_gmAJ3BOAAOjOVbf4SY600.png\"\n                        alt=\"Drawing 12.png\"\n                        data-nodeid=\"1665\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1487\">\n                      <p style=\"text-align: center\">\n                        中文版的 TypeScript Playground 效果图\n                      </p>\n                    </div>\n                    <p data-nodeid=\"1488\">\n                      Playground\n                      还为我们提供了分享的功能，比如我们可以把学习成果、遇到的难点通过\n                      URL 的形式分享给他人。\n                    </p>\n                    <p data-nodeid=\"1489\">\n                      不过，<strong data-nodeid=\"1672\"\n                        >在实际开发业务应用中，我们还是极力推荐使用 VS\n                        Code</strong\n                      >，毕竟它是微软的“亲儿子”，与 TypeScript\n                      集成得更好,拥有极其完善的插件体系，更重要的是还完全免费。\n                    </p>\n                    <p data-nodeid=\"1490\">\n                      因此，接下来课程中的<strong data-nodeid=\"1677\"\n                        >所有示例，我们都将使用 VS Code 进行开发和演示。</strong\n                      >\n                    </p>\n                    <h3 data-nodeid=\"1491\">安装 TypeScript</h3>\n                    <p data-nodeid=\"1492\">\n                      接下来，我们继续了解如何基于 VS Code 完善 TypeScript\n                      开发、转译环境。\n                    </p>\n                    <p data-nodeid=\"1493\">\n                      因为 VS Code 只集成了 TypeScript\n                      语言服务，不包含转译器，所以我们还需要单独安装\n                      TypeScript。\n                    </p>\n                    <p data-nodeid=\"1494\">\n                      为了方便快速完成一个入门小示例，这里我们推荐通过命令行工具使用\n                      npm 全局安装 TypeScript。\n                    </p>\n                    <p data-nodeid=\"1495\">\n                      具体操作：使用“Ctrl + \\`”快捷键打开 VS Code\n                      内置命令行工具，然后输入如下所示代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">npm i -g typescript\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1497\">\n                      <strong data-nodeid=\"1691\"\n                        >注意：因为本课程使用示例都是基于 TypeScript 3.9.*\n                        版本，所以建议你在尝试操作时也安装本课程使用的\n                        TypeScript 版本（比如 3.9.2、3.9.3……3.9.7）</strong\n                      >，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">npm i -g typescript@3.9.*\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1499\">\n                      TypeScript\n                      安装完成后，我们输入如下所示命令即可查看当前安装的\n                      TypeScript 版本。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">tsc -v\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1501\">\n                      然后，我们可能会看到输出了我们安装的版本信息：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">Version <span class=\"hljs-number\">3.9</span><span class=\"hljs-number\">.2</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1503\">\n                      我们也可以通过安装在 Terminal 命令行中直接支持运行\n                      TypeScript 代码（Node.js 侧代码）的 ts-node\n                      来获得较好的开发体验。\n                    </p>\n                    <p data-nodeid=\"1504\">\n                      通过 npm 全局安装 ts-node 的操作如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">npm i -g ts-node\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1506\">\n                      如果你是 Mac 或者 Linux 用户，就极有可能在 npm i -g\n                      typescript 中遭遇 “EACCES: permission denied”\n                      错误，此时我们可以通过以下 4 种办法进行解决：\n                    </p>\n                    <ul data-nodeid=\"1507\">\n                      <li data-nodeid=\"1508\">\n                        <p data-nodeid=\"1509\">使用 nvm 重新安装 npm</p>\n                      </li>\n                      <li data-nodeid=\"1510\">\n                        <p data-nodeid=\"1511\">修改 npm 默认安装目录</p>\n                      </li>\n                      <li data-nodeid=\"1512\">\n                        <p data-nodeid=\"1513\">执行 sudo npm i -g xx</p>\n                      </li>\n                      <li data-nodeid=\"1514\">\n                        <p data-nodeid=\"1515\">\n                          执行 sudo chown -R [user]:[user]\n                          /usr/local/lib/node_modules\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1516\">\n                      <a\n                        href=\"https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"1713\"\n                        >你可以点击这里了解更多相关建议</a\n                      >。\n                    </p>\n                    <p data-nodeid=\"1517\">\n                      最后，我们创建了一个 ts-course\n                      的应用目录用来记录学习过程中的各种练习例子，然后使用 VS\n                      Code 即可打开这个应用。\n                    </p>\n                    <h3 data-nodeid=\"1518\">编写 Hello World</h3>\n                    <p data-nodeid=\"1519\">\n                      我们可以在练习目录下输入“tsc --init”命令快速创建一个\n                      tsconfig.json 文件，或者在 VS Code 应用窗口新建一个空的\n                      tsconfg.json<strong data-nodeid=\"1721\"\n                        >配置 TypeScript 的行为。</strong\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">tsc --init\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1521\">\n                      为了让 TypeScript\n                      的行为更加严格、简单易懂，降低学习的心理负担，这就要求我们在\n                      tsconfig.json 中开启如下所示设置，该设置将决定了 VS Code\n                      语言服务如何对当前应用下的 TypeScript\n                      代码进行类型检测。<strong data-nodeid=\"1726\"\n                        >（说明：本课程中涉及的所有示例都是基于如下所示的统一配置编写。）</strong\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"compilerOptions\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">/* Strict Type-Checking Options */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"strict\"</span>: <span class=\"hljs-literal\">true</span>,                           <span class=\"hljs-comment\">/* Enable all strict type-checking options. */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"noImplicitAny\"</span>: <span class=\"hljs-literal\">true</span>,                 <span class=\"hljs-comment\">/* Raise error on expressions and declarations with an implied 'any' type. */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"strictNullChecks\"</span>: <span class=\"hljs-literal\">true</span>,              <span class=\"hljs-comment\">/* Enable strict null checks. */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"strictFunctionTypes\"</span>: <span class=\"hljs-literal\">true</span>,           <span class=\"hljs-comment\">/* Enable strict checking of function types. */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"strictBindCallApply\"</span>: <span class=\"hljs-literal\">true</span>,           <span class=\"hljs-comment\">/* Enable strict 'bind', 'call', and 'apply' methods on functions. */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"strictPropertyInitialization\"</span>: <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">/* Enable strict checking of property initialization in classes. */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"noImplicitThis\"</span>: <span class=\"hljs-literal\">true</span>,                <span class=\"hljs-comment\">/* Raise error on 'this' expressions with an implied 'any' type. */</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"alwaysStrict\"</span>: <span class=\"hljs-literal\">false</span>,                  <span class=\"hljs-comment\">/* Parse in strict mode and emit \"use strict\" for each source file. */</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1523\">\n                      然后，我们输入如下所示代码即可新建一个 HelloWorld.ts\n                      文件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\">word: <span class=\"hljs-built_in\">string</span></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(word);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">say(<span class=\"hljs-string\">'Hello, World'</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1525\">\n                      在以上代码中，word 函数参数后边多出来的 “: string”\n                      注解直观地告诉我们，这个变量的类型就是\n                      string。如果你之前使用过其他强类型的语言（比如\n                      Java），就能快速理解 TypeScript 语法。\n                    </p>\n                    <p data-nodeid=\"1526\">\n                      当然，在当前目录下，我们也可以通过如下代码创建一个同名的\n                      HelloWorld.js 文件，而这个文件中抹掉了类型注解的\n                      TypeScript 代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\">word</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(word);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">say(<span class=\"hljs-string\">'Hello, World'</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1528\">\n                      这里我们可以看到，TypeScript 代码和我们熟悉的 JavaScript\n                      相比，并没有明显的差异。\n                    </p>\n                    <p data-nodeid=\"1529\">\n                      .ts 文件创建完成后，我们就可以使用 tsc（TypeScript\n                      Compiler） 命令将 .ts 文件转译为 .js 文件。\n                    </p>\n                    <p data-nodeid=\"1530\">\n                      <strong data-nodeid=\"1735\"\n                        >注意：指定转译的目标文件后，tsc 将忽略当前应用路径下的\n                        tsconfig.json\n                        配置，因此我们需要通过显式设定如下所示的参数，让 tsc\n                        以严格模式检测并转译 TypeScript 代码。</strong\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">tsc HelloWorld.ts --strict --alwaysStrict false\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1532\">\n                      同时，我们可以给 tsc 设定一个 watch\n                      参数监听文件内容变更，实时进行类型检测和代码转译，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">tsc HelloWorld.ts --strict --alwaysStrict false --watch\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1534\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3D/AC/Cgp9HWCV_iGAYMjOAAVsTWlXVIk512.png\"\n                        alt=\"Drawing 14.png\"\n                        data-nodeid=\"1739\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1535\">\n                      <p style=\"text-align: center\">tsc 转译监听模式效果图</p>\n                    </div>\n                    <p data-nodeid=\"1536\">\n                      我们也可以直接使用 ts-node 运行\n                      HelloWorld.ts，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">ts-node HelloWorld.ts\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"1538\">\n                      运行成功后，ts-node 就会输出如下所示内容：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">Hello, World\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1540\">\n                      当然，我们也可以唤起“直接运行”（本质上是先自动进行转译，再运行）TypeScript\n                      的 ts-node 命令行来编写代码，这就跟我们在 Node.js\n                      命令行或者浏览器中调试工具一样。\n                    </p>\n                    <p data-nodeid=\"1541\">\n                      然后，我们再回车立即执行如下所示代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">&gt;&nbsp;ts-node\n</div></li><li><div class=\"code-word\">&gt;&nbsp;<span class=\"hljs-function\">function <span class=\"hljs-title\">say</span><span class=\"hljs-params\">(word: string)</span> </span>{\n</div></li><li><div class=\"code-word\">&gt;&nbsp;  console.log(word);\n</div></li><li><div class=\"code-word\">&gt;&nbsp;}\n</div></li><li><div class=\"code-word\">&gt; say(<span class=\"hljs-string\">'Hello, World'</span>);\n</div></li><li><div class=\"code-word\">Hello, World\n</div></li><li><div class=\"code-word\">undefined\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1543\">\n                      <strong data-nodeid=\"1747\"\n                        >这里请注意：TypeScript\n                        的类型注解旨在约束函数或者变量，在上面的例子中，我们就是通过约束一个示例函数来接收一个字符串类型（string）的参数。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1544\">\n                      在接下来演示的例子中，我们将故意犯一个低级错误，先传递一个数字类型的参数给如下所示函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\">word: <span class=\"hljs-built_in\">string</span></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(word);\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">say(<span class=\"hljs-number\">1</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1546\">\n                      然后 VS Code\n                      会标红这个错误，并在问题（Problems）面板中显示错误信息，如下图所示：\n                    </p>\n                    <p data-nodeid=\"1547\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/3D/AC/Cgp9HWCV_jOAXmPNAAXOxhMuaTs987.png\"\n                        alt=\"Drawing 16.png\"\n                        data-nodeid=\"1752\"\n                      />\n                    </p>\n                    <div data-nodeid=\"1548\">\n                      <p style=\"text-align: center\">\n                        VS Code 问题面板显示效果图\n                      </p>\n                    </div>\n                    <p data-nodeid=\"1549\">\n                      最后，通过 tsc 转译或者 ts-node\n                      运行这个示例，我们会看到如下所示的报错信息。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">error TS2345: Argument of type <span class=\"hljs-string\">'number'</span> is not assignable to parameter of type <span class=\"hljs-string\">'string'</span>.\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1551\">\n                      这是因为函数 say 限定了形参的类型是 string，而我们调用 say\n                      时传递的实参类型是 number，所以转译阶段抛出了这个错误。\n                    </p>\n                    <h3 data-nodeid=\"1552\">小结与预告</h3>\n                    <p data-nodeid=\"1553\">\n                      VS Code\n                      让我们获得一种较为理想的开发体验，不必等到转译阶段，在编码时就能快速检测、抛出类型错误，极大地提升了\n                      TypeScript 开发体验和效率。\n                    </p>\n                    <p data-nodeid=\"1554\">\n                      特别需要注意的是，VS Code 默认使用自身内置的 TypeScript\n                      语言服务版本，而在应用构建过程中，构建工具使用的却是应用路径下\n                      node_modules/typescript 里的 TypeScript\n                      版本。如果两个版本之间存在不兼容的特性，就会造成开发阶段和构建阶段静态类型检测结论不一致的情况，因此，我们务必将\n                      VS Code 语言服务配置成使用当前工作区的 TypeScript 版本。\n                    </p>\n                    <p data-nodeid=\"1555\">\n                      <strong data-nodeid=\"1764\"\n                        >插播一个思考题：如何选择和设置 VS Code\n                        语言服务需要使用的 TypeScript\n                        版本？欢迎你在留言区与我互动、交流。另外，如果你觉得本专栏有价值，欢迎分享给更多好友哦~</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1556\" class=\"\">\n                      到这里，TypeScript\n                      开发环境就已经搭建好了，万事已具备。接下来我们的\n                      TypeScript\n                      学习开发班车就要发车了，你准备好迎接新的技能和新的挑战了吗？\n                    </p>\n            "}