{"title":"14 | 程序的循环：如何利用数学归纳法进行程序开发？","context":"\n                    <p data-nodeid=\"21346\" class=\"\">\n                      我们在上一讲提到程序有<strong data-nodeid=\"21506\"\n                        >顺序、选择、循环</strong\n                      >这三大基本结构，而在这其中，循环是处理复杂运算最有效的一种结构。\n                    </p>\n                    <p data-nodeid=\"21347\">\n                      <strong data-nodeid=\"21515\">循环结构</strong\n                      >可以用短短几行代码，执行成千上万次的运算。从计算机编程的视角来看，循环结构又有三种实现方法，分别是\n                      for 循环、while 循环和 do while\n                      循环；而从数学视角来看，循环结构很像是<strong\n                        data-nodeid=\"21516\"\n                        >数学归纳法</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"21348\">\n                      所以这一讲，我们就从数学的视角来重新看待循环结构。\n                    </p>\n                    <h3 data-nodeid=\"21349\">从“多米诺骨牌”看循环归纳思想</h3>\n                    <p data-nodeid=\"21350\">\n                      在多米诺骨牌的游戏中，游戏者手动推倒第一个骨牌，接着第一个骨牌就会撞倒第二个骨牌，第二个骨牌还会撞倒第三个骨牌。以此类推，即使骨牌数量再多，也会逐一被放倒。\n                    </p>\n                    <p data-nodeid=\"21351\">\n                      我们对多米诺骨牌全部放倒的结果进行剖析，你会发现它成立的条件有以下两个：\n                    </p>\n                    <ul data-nodeid=\"21352\">\n                      <li data-nodeid=\"21353\">\n                        <p data-nodeid=\"21354\">\n                          第一，对于任意第\n                          <strong data-nodeid=\"21530\">i</strong>\n                          个骨牌而言，它的倒下能带动第\n                          <strong data-nodeid=\"21531\">i+1</strong> 个骨牌倒下；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21355\">\n                        <p data-nodeid=\"21356\">\n                          第二，有一个参与游戏的人手动推倒第一个骨牌。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"21357\">\n                      只要这两个条件都满足，就能让全部的骨牌都倒下。\n                    </p>\n                    <p data-nodeid=\"21358\">\n                      “循环”的思想也存在我们的古文化中，《愚公移山》的“虽我之死，有子存焉。子又生孙，孙又生子；子又有子，子又有孙；子子孙孙无穷匮也。”简而言之就是，我有儿子，我儿子也有儿子，我儿子的儿子也会有儿子。以此类推，子子孙孙无穷尽。\n                    </p>\n                    <p data-nodeid=\"21359\">\n                      在这其中不难发现，子子孙孙无穷匮的条件也有两个：\n                    </p>\n                    <ul data-nodeid=\"21360\">\n                      <li data-nodeid=\"21361\">\n                        <p data-nodeid=\"21362\">\n                          第一，任意一代男子（或者说是儿子），都要再生至少一个儿子；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21363\">\n                        <p data-nodeid=\"21364\">第二，愚公有个儿子。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"21365\">\n                      只要这两个条件都满足，就可以做到子子孙孙无穷匮也。\n                    </p>\n                    <h3 data-nodeid=\"21366\">数学归纳法</h3>\n                    <p data-nodeid=\"21367\">\n                      对这两个例子的两个条件进行抽象，你会发现这就是高中学习的数学归纳法，下面我们用数学语言描述一下。\n                    </p>\n                    <p data-nodeid=\"21368\">\n                      最简单常见的数学归纳法是，用来证明当 n\n                      等于任意一个自然数时某个命题成立，其证明步骤可以分下面两步：\n                    </p>\n                    <ul data-nodeid=\"21369\">\n                      <li data-nodeid=\"21370\">\n                        <p data-nodeid=\"21371\">第一，当 n=1 时，命题成立；</p>\n                      </li>\n                      <li data-nodeid=\"21372\">\n                        <p data-nodeid=\"21373\">\n                          第二，假设对于任意一个数字 i\n                          命题成立，可以推导出在对于\n                          <strong data-nodeid=\"21548\">i+1</strong\n                          >，命题依然成立。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"21374\">\n                      只要这两个条件都满足，命题就得证。\n                    </p>\n                    <p data-nodeid=\"21375\">\n                      例如，要证明所有的多米诺骨牌能倒下，也就是要证明游戏者手动推倒第一个骨牌，且任意一个骨牌倒下能带动下一个骨牌倒下。又比如，要证明愚公子孙无穷匮，也就是要证明愚公有儿子，愚公任意一代后代，至少有一个儿子。\n                    </p>\n                    <p data-nodeid=\"21376\">\n                      接下来，我们利用数学归纳法来处理两个真实的数学问题。\n                    </p>\n                    <p data-nodeid=\"21377\">\n                      【例 1】证明对于任意一个正整数 n，它的 2n 是偶数。\n                    </p>\n                    <ul data-nodeid=\"21378\">\n                      <li data-nodeid=\"21379\">\n                        <p data-nodeid=\"21380\">\n                          第一步，当 n=1 时，2n = 2×1 = 2 是偶数。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21381\">\n                        <p data-nodeid=\"21382\">\n                          第二步，假设对于某个正整数 i 而言，2i 是偶数，则\n                          2(i+1)=2i+2。其中 2i 为偶数，2\n                          为偶数，两个偶数之和也是偶数，因此 2(<strong\n                            data-nodeid=\"21559\"\n                            >i+1</strong\n                          >) 也是偶数。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"21383\">\n                      根据数学归纳法可以知道，对于任意一个正整数 n，2n\n                      是偶数，原命题得证。\n                    </p>\n                    <p data-nodeid=\"21384\">\n                      【例 2】求证 1+3+5+...+(2k-1) =\n                      k<sup>2</sup>，我们依然可以用数学归纳法的思路来证明。\n                    </p>\n                    <ul data-nodeid=\"21385\">\n                      <li data-nodeid=\"21386\">\n                        <p data-nodeid=\"21387\">\n                          第一步，当 k=1 时，1=1<sup>2</sup> 成立。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21388\">\n                        <p data-nodeid=\"21389\">\n                          第二步，假设对于任意一个正整数 i\n                          而言，1+3+5+...+(2i-1) = i<sup>2</sup>，则\n                          1+3+5+...+(2i-1)+[2(i+1)-1] = i<sup>2</sup>+[2(i+1)-1]\n                          = i<sup>2</sup>+2i+2-1 = i<sup>2</sup>+2i+1 = (<strong\n                            data-nodeid=\"21604\"\n                            >i+1</strong\n                          >)<sup>2</sup> 原命题依然成立。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"21390\">\n                      因此 1+3+5+...+(2k-1) = k<sup>2</sup> 这一原命题成立。\n                    </p>\n                    <p data-nodeid=\"21391\">\n                      综上这两个例子，你会发现它们都是要证明“下一张多米诺骨牌”能够倒下，也就是在证明“i\n                      推进到 i+1\n                      的过程”。具体而言，这两个例子的第二步都分别在求证\n                      2(<strong data-nodeid=\"21623\">i+1</strong>) 是偶数，以及\n                      (<strong data-nodeid=\"21624\">i+1</strong>)<sup>2</sup>\n                      成立，这种数学归纳的思想在循环结构中可以得以体现。\n                    </p>\n                    <h3 data-nodeid=\"21392\">循环结构</h3>\n                    <p data-nodeid=\"21393\">\n                      程序中的循环结构完全可以用来表达数学归纳法，利用数学归纳法来处理的数学问题，可以被无缝迁移到一个循环结构的程序中。\n                    </p>\n                    <p data-nodeid=\"21394\">\n                      我们在大学 C\n                      语言的课程中曾经学过，循环结构的实现方法有三种，分别是 for\n                      循环、while 循环和 do-while 循环。为了简洁，下面我们定义\n                      s<sub>1</sub> 是初始表达式，s<sub>2</sub>\n                      是条件表达式，s<sub>3</sub> 叫作末尾循环体，s<sub>4</sub>\n                      是中间循环体，并将其代入这三个循环结构中，对比学习它们之间的联系与不同。\n                    </p>\n                    <h4 data-nodeid=\"21395\">1.for 循环</h4>\n                    <p data-nodeid=\"21396\">for 循环的代码结构如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(s1;s2;s3)\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  s4;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21398\">\n                      如刚刚所定义的，s<sub>1</sub> 是初始表达式，s<sub>2</sub>\n                      是条件表达式，s<sub>3</sub> 叫作末尾循环体，s<sub>4</sub>\n                      是中间循环体。<br />\n                      for 循环的执行顺序是\n                      s<sub>1</sub>、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、...、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、s<sub>2</sub>。\n                    </p>\n                    <p data-nodeid=\"21399\">\n                      例如，求解 1 到 50 所有整数之和，可以用 for\n                      循环这样编写代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i= <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">50</span>; i++)\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  result += i;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21401\">\n                      这段代码的 i=1 对应的是 s<sub>1</sub> 初始表达式，i≤50\n                      对应的是 s<sub>2</sub> 条件表达式，i++对应的是 s<sub\n                        >3</sub\n                      >\n                      末尾循环体，最后第 4 行运算对应的是 s<sub>4</sub>\n                      中间循环体。<br />\n                      这段代码的执行顺序如下：\n                    </p>\n                    <ul data-nodeid=\"21402\">\n                      <li data-nodeid=\"21403\">\n                        <p data-nodeid=\"21404\">\n                          先执行 i=1，再判断 i≤50 与否，如果为真，则执行第 4\n                          行的运算，最后执行 i++；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21405\">\n                        <p data-nodeid=\"21406\">\n                          接着循环，再判断 i≤50 与否，如果为真，则执行第 4\n                          行的运算，最后执行 i++；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21407\">\n                        <p data-nodeid=\"21408\">\n                          经过多次循环后，再判断 i≤50\n                          与否，直到结果为假，跳出循环结束。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"21409\">\n                      for 循环还有很多变种，具体而言就是 s<sub>1</sub>、s<sub\n                        >2</sub\n                      >\n                      和 s<sub>4</sub>\n                      都可以被省略或部分省略。围绕上面的例子，s<sub>1</sub>\n                      的定义可以单独抽出来放在第 2 行；而 for\n                      循环语句中，可以空出 s<sub>1</sub>\n                      的部分，这样新的代码可以写作：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> i= <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(; i &lt;= <span class=\"hljs-number\">50</span>; i++)\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  result += i;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21411\">\n                      根据代码执行的顺序，可以发现 s<sub>3</sub> 的执行永远是在\n                      s<sub>4</sub> 之后。因此，可以把 s<sub>3</sub> 和 s<sub\n                        >4</sub\n                      >\n                      写在一起，再把 s<sub>4</sub>\n                      的位置空出来，这样新的代码可以写作：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> i= <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(; i &lt;= <span class=\"hljs-number\">50</span>; )\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  result += i;\n</div></li><li><div class=\"code-word\">  i++;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21413\">\n                      同样，s<sub>2</sub> 的执行永远在 s<sub>4</sub>\n                      之前，也就意味着s<sub>2</sub> 可以被放在循环体中的 s<sub\n                        >4</sub\n                      >\n                      之前，而把 for 语句中 s<sub>2</sub>\n                      的位置空闲出来。但最后一次的 s<sub>2</sub>\n                      执行，还肩负着结束循环的任务，因此需要结合 if\n                      条件判断语句和 break\n                      语句，完成最后跳出循环的实现，这样新的代码可以写作：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> i= <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(; ; )\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">50</span>){\n</div></li><li><div class=\"code-word\">   <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  result += i;\n</div></li><li><div class=\"code-word\">  i++;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"21415\">2.while 循环</h4>\n                    <p data-nodeid=\"21416\">\n                      循环的另外一个实现方式是 while 循环，while\n                      循环的代码结构如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (s2)\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  s4;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21418\">\n                      如刚刚所定义的，s<sub>2</sub> 是条件表达式，s<sub>4</sub>\n                      是中间循环体。\n                    </p>\n                    <p data-nodeid=\"21419\">\n                      while 循环的执行顺序是\n                      (s<sub>2</sub>,s<sub>4</sub>)、(s<sub>2</sub>,s<sub>4</sub>)...(s<sub>2</sub>,s<sub>4</sub>)、s<sub>2</sub>。具体而言，是首先判断\n                      s<sub>2</sub> 是否成立，如果为真，则执行\n                      s<sub>4</sub>；继续循环判断 s<sub>2</sub>\n                      是否成立，如果为真，则执行\n                      s<sub>4</sub>；如此循环多次后，直到 s<sub>2</sub>\n                      不再成立，跳出循环结束。\n                    </p>\n                    <p data-nodeid=\"21420\">\n                      我们继续使用 while 循环来实现 1～50\n                      所有整数求和，代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (i &lt; =<span class=\"hljs-number\">50</span>)\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  result += i;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21422\">\n                      同样地，如 for 循环一样，while\n                      循环也有一些变种。具体而言，s<sub>2</sub>\n                      也是可以被省略而用其他方法实现。从循环执行的顺序可以发现，s<sub\n                        >2</sub\n                      >\n                      的执行总是在 s<sub>4</sub> 之前；而最后一次 s<sub>2</sub>\n                      的执行，需要肩负起跳出循环的任务。\n                    </p>\n                    <p data-nodeid=\"21423\">\n                      这就需要 if 条件语句和 break\n                      语句了，这样变形之后的代码为：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">50</span>){\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  result += i;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"21425\">3.do while 循环</h4>\n                    <p data-nodeid=\"21426\">\n                      最后一种循环实现的方法是 do while 循环，do while\n                      循环的基本结构如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">do</span> {\n</div></li><li><div class=\"code-word\">  s4;\n</div></li><li><div class=\"code-word\">}<span class=\"hljs-keyword\">while</span>(s2);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21428\">\n                      如刚刚所定义的，s<sub>2</sub> 是条件表达式，s<sub>4</sub>\n                      是中间循环体。\n                    </p>\n                    <p data-nodeid=\"21429\">\n                      do while 循环与 while 循环相比，区别就是执行顺序的调整。do\n                      while 循环中，无论 s<sub>2</sub>\n                      是真是假，都会至少执行一次\n                      s<sub>4</sub>。这样它的执行顺序就是\n                      (s<sub>4</sub>,s<sub>2</sub>)、(s<sub>4</sub>,s<sub>2</sub>)...(s<sub>4</sub>,s<sub>2</sub>)。\n                    </p>\n                    <p data-nodeid=\"21430\">\n                      具体而言就是：先执行s<sub>4</sub>，再来判断 s<sub>2</sub>\n                      是真是假，如果为真，则执行 s<sub>4</sub>；再来判断 s<sub\n                        >2</sub\n                      >\n                      是真是假，如果为真，则执行 s<sub>4</sub>；再来判断 s<sub\n                        >2</sub\n                      >\n                      是真是假……如此循环多次之后，直到 s<sub>2</sub>\n                      为假，跳出循环结束。\n                    </p>\n                    <p data-nodeid=\"21431\">\n                      我们仍以 1～50 所有整数求和为例，看一下 do while\n                      语句实现的代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">do</span> {\n</div></li><li><div class=\"code-word\">  result += i;\n</div></li><li><div class=\"code-word\">}<span class=\"hljs-keyword\">while</span>(i &lt;= <span class=\"hljs-number\">49</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21433\">\n                      do while 循环也有一些变种，其 s<sub>2</sub>\n                      语句也可以被调整到其循环体中，可以考虑用 if 条件语句和\n                      break 语句实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> result = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">do</span> {\n</div></li><li><div class=\"code-word\">  result += i;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">49</span>){\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"21435\">4.三种循环结构的区别</h4>\n                    <p data-nodeid=\"21436\">\n                      这三个循环的基本代码结构如下图所示，我们总结一下这三种循环结构的本质不同。\n                    </p>\n                    <p data-nodeid=\"21437\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/7E/B4/Ciqc1F_PUXeARk9hAAIZa2CbM-w333.png\"\n                        alt=\"Lark20201208-180948.png\"\n                        data-nodeid=\"21961\"\n                      />\n                    </p>\n                    <p data-nodeid=\"21438\">\n                      从代码执行的顺序来看，while 循环与 for\n                      循环都是先判断条件，再执行循环体。在极端情况下，第一次判断条件就不成功，循环体就有可能一次也不被执行；而\n                      do while\n                      循环则相反，它先执行循环体，再判断条件，因此循环体至少会被执行一次。\n                    </p>\n                    <p data-nodeid=\"21439\">\n                      从编码的视角来看，while 循环和 do while\n                      循环，在条件判断的括号中只需要写循环条件；而 for\n                      循环则循环变量赋初值、循环条件、循环变量改变方式都写在一起。\n                    </p>\n                    <p data-nodeid=\"21440\">\n                      最后，从功能上来看，这三个循环结构完全一致，是可以彼此切换的。你可能会有这样的困惑：do\n                      while\n                      循环至少会执行一次循环体，它如何能被其他循环结构替代呢？这就要借助\n                      break\n                      语句提前跳出循环体了，具体如何切换，我接下来就要讲解。\n                    </p>\n                    <h3 data-nodeid=\"21441\">三种循环实现的切换</h3>\n                    <p data-nodeid=\"21442\">\n                      在不考虑代码结构的美观时，这三种循环语句可以在功能上实现彼此之间的切换，我们以\n                      for 向 while 和 do while 的切换为例。\n                    </p>\n                    <p data-nodeid=\"21443\">\n                      如下是任意一个<strong data-nodeid=\"21972\">for 循环</strong\n                      >语句：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span>(s1;s2;s3)\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  s4;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21445\">\n                      其执行顺序为\n                      s<sub>1</sub>、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)...(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、s<sub>2</sub>。\n                    </p>\n                    <p data-nodeid=\"21446\">\n                      它可以用下面的\n                      <strong data-nodeid=\"22023\">while 循环</strong\n                      >语句来实现其功能：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\">s1;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">while</span>(s2)\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  s4;\n</div></li><li><div class=\"code-word\">  s3;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21448\">\n                      根据 while 语句的执行顺序可知，这段代码的执行顺序为\n                      s<sub>1</sub>、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)...(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、s<sub>2</sub>，因此可以得知，两段代码的功能结果完全一致。\n                    </p>\n                    <p data-nodeid=\"21449\">\n                      而如果非要采用\n                      <strong data-nodeid=\"22074\">do while 循环</strong\n                      >，可以按照如下方式实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\">s1;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">do</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span>(!s2)\n</div></li><li><div class=\"code-word\">  {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">break</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  s4;\n</div></li><li><div class=\"code-word\">  s3;\n</div></li><li><div class=\"code-word\">}<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21451\">\n                      在这里，我们补充一下 break 语句的知识。break\n                      语句的作用是，终止并跳出循环，继续执行循环语句后续的代码。\n                    </p>\n                    <p data-nodeid=\"21452\">\n                      以上面的代码为例，一旦第 3 行的条件判断通过，则需要执行\n                      break 语句。break\n                      语句会帮助程序跳出当前循环，这样程序就会从第 4 行跳转至第\n                      10 行继续执行。基于 break 语句，再根据 do while\n                      语句的执行顺序可知，这段代码的执行顺序为\n                      s<sub>1</sub>、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)...(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、s<sub>2</sub>，因此可以得知两段代码的功能结果完全一致。\n                    </p>\n                    <p data-nodeid=\"21453\">\n                      这里要给大家提个醒：如果是在技术面试时，<strong\n                        data-nodeid=\"22126\"\n                        >千万不要说某某功能的开发，只能用 for 循环、while 循环或\n                        do while 循环，这一定是错的</strong\n                      >。因为，功能上这三种循环的实现是完全可以实现互换的；只不过，三者在代码美观上可能是有所区别。\n                    </p>\n                    <h3 data-nodeid=\"21454\">\n                      <strong data-nodeid=\"22130\">数学归纳法与循环结构</strong>\n                    </h3>\n                    <p data-nodeid=\"21455\">\n                      数学归纳法和循环结构有很多相似之处，它们都是<strong\n                        data-nodeid=\"22136\"\n                        >从某个起点开始，不断地重复执行某个或某组相似的动作集合</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"21456\">不过，二者也有一些区别：</p>\n                    <ul data-nodeid=\"21457\">\n                      <li data-nodeid=\"21458\">\n                        <p data-nodeid=\"21459\">\n                          数学归纳法<strong data-nodeid=\"22143\"\n                            >不关注归纳过程的结束</strong\n                          >，它就是用一种重复动作，由有穷尽朝着无穷尽的方向去前进；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21460\">\n                        <p data-nodeid=\"21461\">\n                          而循环结构作为一种程序开发逻辑，则<strong\n                            data-nodeid=\"22149\"\n                            >必须要关注循环过程的结束</strong\n                          >，否则就会造成系统陷入死循环或死机。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"21462\">\n                      接下来，我们试着把一个数学归纳法的计算过程，用循环结构改写。为了让二者没有区别，我们对数学归纳法的问题增加一个截止条件的限制，那就是\n                      k 小于 100 时。\n                    </p>\n                    <p data-nodeid=\"21463\">\n                      这道例题是：证明在 k&lt;100 时，1+3+5+... +(2k-1) = k<sup\n                        >2</sup\n                      >\n                      成立。\n                    </p>\n                    <p data-nodeid=\"21464\">\n                      我们说过，用数学归纳法来证明这个问题需要两个步骤，分别是：\n                    </p>\n                    <ul data-nodeid=\"21465\">\n                      <li data-nodeid=\"21466\">\n                        <p data-nodeid=\"21467\">证明 k=1 时等式成立；</p>\n                      </li>\n                      <li data-nodeid=\"21468\">\n                        <p data-nodeid=\"21469\">\n                          假设 k=i 时等式成立后，k=i+1 等式依然成立。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"21470\">我们把这两个步骤进行拆解。</p>\n                    <p data-nodeid=\"21471\">\n                      令 s<sub>1</sub> 为 k=1，s<sub>4</sub> 为等式成立，s<sub\n                        >3</sub\n                      >\n                      为 k=i 或 k=i+1，再补充题目的终止条件 k&lt;100 为\n                      s<sub>2</sub>。这样，根据 for\n                      循环执行的逻辑，把这些动作按照\n                      s<sub>1</sub>、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)...(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、s<sub\n                        >2</sub\n                      >\n                      串联起来，就得到了基本的 for 循环代码框架。\n                    </p>\n                    <ul data-nodeid=\"21472\">\n                      <li data-nodeid=\"21473\">\n                        <p data-nodeid=\"21474\">\n                          在这个框架中，最开始的\n                          s<sub>1</sub>、s<sub>2</sub>、s<sub>4</sub>，即为当\n                          k=1 时等式成立，对应数学归纳法的第一步。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21475\">\n                        <p data-nodeid=\"21476\">\n                          在这个框架中，任意相邻的两组(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)、(s<sub>2</sub>,s<sub>4</sub>,s<sub>3</sub>)，就是假设\n                          k=i 时等式成立后，k=i+1\n                          等式依然成立，对应数学归纳法的第二步。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"21477\">\n                      也就是说，此时的数学归纳法证明和 for\n                      循环实现，在功能上是等价的，我们给出 for 循环的代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"c++\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> left = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> left_temp = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">int</span> right = <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k = <span class=\"hljs-number\">1</span>; k &lt; <span class=\"hljs-number\">100</span>; k++) <span class=\"hljs-comment\">// s1;s2;s3</span>\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//s4</span>\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; left_temp = <span class=\"hljs-number\">2</span> * k - <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; left += left_temp;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; right = k * k;\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> (left == right)\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; {\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d is right!\\n\"</span>,k);\n</div></li><li><div class=\"code-word\">&nbsp; &nbsp; }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"21479\">我们对代码进行走读：</p>\n                    <ul data-nodeid=\"21480\">\n                      <li data-nodeid=\"21481\">\n                        <p data-nodeid=\"21482\">\n                          代码的前三行定义了 3 个变量，分别是 left、left_temp 和\n                          right，其中 left 和 right\n                          分别用来存储等式两边的结果，left_temp\n                          用来存储公式中每轮增加的一项；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21483\">\n                        <p data-nodeid=\"21484\">\n                          第 4 行，进入 for 循环，得到对应的\n                          s<sub>1</sub>、s<sub>2</sub> 和 s<sub>3</sub>；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21485\">\n                        <p data-nodeid=\"21486\">\n                          第 6 行，计算出当前一轮的 left_temp 值；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21487\">\n                        <p data-nodeid=\"21488\">\n                          第 7 行，把 left_temp 作为增量，增加到 left 的值中；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21489\">\n                        <p data-nodeid=\"21490\">\n                          第 8 行，计算等式右侧的 k<sup>2</sup> 的值；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21491\">\n                        <p data-nodeid=\"21492\">\n                          第 9 行，对等式左边和等式右边是否相等做出判断；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"21493\">\n                        <p data-nodeid=\"21494\">\n                          第 10～12\n                          行进行判断，如果等式相等，打印结果，代码的部分执行结果如下图。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"21495\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/7E/B4/Ciqc1F_PUaGAODzCAADYB9oMxQI862.png\"\n                        alt=\"Lark20201208-180945.png\"\n                        data-nodeid=\"22298\"\n                      />\n                    </p>\n                    <p data-nodeid=\"21496\">可见原命题得到证明。</p>\n                    <h3 data-nodeid=\"21497\">小结</h3>\n                    <p data-nodeid=\"21498\">\n                      这一讲我们学习了数学归纳法的理论知识，以及循环结构的代码开发知识。然后我们从原理上分析了数学归纳法和循环结构的异同，介绍了\n                      for 循环、while 循环和 do while\n                      循环这三种循环结构的实现方法。\n                    </p>\n                    <p data-nodeid=\"21499\">\n                      最后我们留一个练习题：本讲最后一个例题用 for\n                      循环实现了等式的证明，请你试着分别用 while 和 do while\n                      循环再次实现这段代码的功能。\n                    </p>\n                    <p data-nodeid=\"23270\">\n                      下一讲，我们将学习《15 |\n                      递归：如何计算汉诺塔问题的移动步数？》递归与循环之间有什么关联和区别吗？下周我会告诉你哦，别忘来听课～\n                    </p>\n                    <hr data-nodeid=\"23271\" />\n                    <p data-nodeid=\"23272\" class=\"te-preview-highlight\">\n                      <a\n                        href=\"https://wj.qq.com/s2/7812549/4cd8/\"\n                        data-nodeid=\"23278\"\n                        >课程评价入口，挑选 5 名小伙伴赠送小礼品～</a\n                      >\n                    </p>\n            "}