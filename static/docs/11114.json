{"title":"13 | 必备增强类型系统的方式大盘点，让你的开发如虎添翼","context":"\n                    <p data-nodeid=\"1357\" class=\"\">\n                      经过前面入门课程的学习，我们了解了 TypeScript\n                      所特有的类型，比如基础类型、字面量类型、类类型、联合类型和交叉类型等，也在前两讲的课程中学习了关于这些类型使用的一些高级技巧。\n                    </p>\n                    <p data-nodeid=\"1358\">\n                      然而，在平时使用 TypeScript\n                      编写代码的过程中，我们可能会遇到某些库没有提供类型声明、库的版本和类型声明不一致、没有注入全局变量类型等各种问题。因此，这一讲我们将学习\n                      TypeScript\n                      增强类型系统，这样上边提到的问题就能迎刃而解了。\n                    </p>\n                    <p data-nodeid=\"1359\">\n                      在 TypeScript\n                      中预留了一个增强类型的口子，使得我们可以方便地扩展原来的类型系统，以兼容\n                      JavaScript 的代码。\n                    </p>\n                    <h3 data-nodeid=\"1360\">增强类型系统</h3>\n                    <p data-nodeid=\"1361\">\n                      增强类型系统，顾名思义就是对 TypeScript 类型系统的增强。在\n                      npm 中，有很多历史悠久的库都是使用 JavaScript 编写的，而\n                      TypeScript 作为 JavaScript 的超集，设计目标之一就是能在\n                      TypeScript 中安全、方便地使用 JavaScript 库。\n                    </p>\n                    <p data-nodeid=\"1362\">\n                      TypeScript 相较于 JavaScript\n                      而言，其一大特点就是类型。关于类型的定义方法，除了之前学习的内容之外，我们还可以通过以下方式扩展类型系统。\n                    </p>\n                    <h3 data-nodeid=\"1363\">声明</h3>\n                    <p data-nodeid=\"1364\">\n                      那么，我们如何在 TypeScript 中安全地使用 JavaScript\n                      的库呢？关键的步骤就是使用 TypeScript 中的一个 declare\n                      关键字。\n                    </p>\n                    <p data-nodeid=\"1365\">\n                      通过使用 declare\n                      关键字，我们可以声明全局的变量、方法、类、对象。下面我们先说一下如何声明全局的变量。\n                    </p>\n                    <h4 data-nodeid=\"1366\">declare 变量</h4>\n                    <p data-nodeid=\"1367\">\n                      在运行时，前端代码\n                      <code data-backticks=\"1\" data-nodeid=\"1516\"\n                        >&lt;script&gt;</code\n                      >\n                      标签会引入一个全局的库，再导入全局变量。此时，如果你想安全地使用全局变量，那么就需要对变量的类型进行声明。\n                    </p>\n                    <p data-nodeid=\"1368\">\n                      声明变量的语法： declare (var|let|const) 变量名称:\n                      变量类型 ，具体示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">var</span> val1: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">let</span> val2: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">const</span> val3: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">val1 = <span class=\"hljs-string\">'1'</span>;\n</div></li><li><div class=\"code-word\">val1 = <span class=\"hljs-string\">'2'</span>;\n</div></li><li><div class=\"code-word\">val2 = <span class=\"hljs-number\">1</span>;\n</div></li><li><div class=\"code-word\">val2 = <span class=\"hljs-string\">'2'</span>; <span class=\"hljs-comment\">// TS2322: Type 'string' is not assignable to type 'number'.</span>\n</div></li><li><div class=\"code-word\">val3 = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// TS2588: Cannot assign to 'val3' because it is a constant.</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1370\">\n                      在上面的代码示例中，我们分别使用 var、let、const 声明了 3\n                      种不同类型的变量。其中，使用 var、let\n                      声明的变量是可以更改变量赋值的，而使用 const\n                      声明的变量则不可以。同时，对于变量类型不正确的错误，TypeScript\n                      也可以正常检测出来。\n                    </p>\n                    <p data-nodeid=\"1371\">\n                      当然， declare\n                      关键字还可以用来声明函数、类、枚举类型，下面我们一起来看看。\n                    </p>\n                    <h4 data-nodeid=\"1372\">声明函数</h4>\n                    <p data-nodeid=\"1373\">\n                      声明函数的语法与声明变量类型的语法相同，不同的是 declare\n                      关键字后需要跟 function 关键字，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title\">string</span></span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> x = toString(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// =&gt; string</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1375\">\n                      需要注意：使用 declare<strong data-nodeid=\"1536\"\n                        >关键字时，我们不需要编写声明的变量、函数、类的具体实现（因为变量、函数、类在其他库中已经实现了），只需要声明其类型即可</strong\n                      >，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// TS1183: An implementation cannot be declared in ambient contexts.</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">String</span>(x);\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1377\">\n                      在上面的例子中，TypeScript\n                      的报错信息提示：环境声明的上下文不需要实现。也就是说\n                      declare 声明的所有类型只需要表明类型，不需要实现。\n                    </p>\n                    <h4 data-nodeid=\"1378\">声明类</h4>\n                    <p data-nodeid=\"1379\">\n                      声明类时，我们只需要声明类的属性、方法的类型即可。\n                    </p>\n                    <p data-nodeid=\"1380\">\n                      另外，关于类的可见性修饰符我们也可以在此进行声明，下面看一个具体的示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">class</span> Person {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">private</span> age: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>);\n</div></li><li><div class=\"code-word\">  getAge(): <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">'Mike'</span>);\n</div></li><li><div class=\"code-word\">person.name; <span class=\"hljs-comment\">// =&gt; string</span>\n</div></li><li><div class=\"code-word\">person.age; <span class=\"hljs-comment\">// TS2341: Property 'age' is private and only accessible within class 'Person'.</span>\n</div></li><li><div class=\"code-word\">person.getAge(); <span class=\"hljs-comment\">// =&gt; number</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1382\">\n                      在上面的例子中，我们声明了公共属性 name 以及私有属性\n                      age，此时我们看到无法访问私有属性\n                      age。另外，我们还声明了方法 getAge ，并且 getAge\n                      的返回值是 number 类型，所以 Person\n                      实例调用后返回的类型也是 number 类型。\n                    </p>\n                    <h4 data-nodeid=\"1383\">声明枚举</h4>\n                    <p data-nodeid=\"1384\">\n                      声明枚举只需要定义枚举的类型，并不需要定义枚举的值，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">enum</span> Direction {\n</div></li><li><div class=\"code-word\">  Up,\n</div></li><li><div class=\"code-word\">  Down,\n</div></li><li><div class=\"code-word\">  Left,\n</div></li><li><div class=\"code-word\">  Right,\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> directions = [Direction.Up, Direction.Down, Direction.Left, Direction.Right];\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1386\">\n                      在上述示例中的第 1~6 行，我们声明了在其他地方定义的枚举\n                      Direction 类型结构，然后在第 8\n                      行就可以直接访问枚举的成员了（这其实就是我们在 09\n                      讲中学习的外部枚举，Ambient Enums）。\n                    </p>\n                    <p data-nodeid=\"1387\">\n                      <strong data-nodeid=\"1551\"\n                        >注意：声明枚举仅用于编译时的检查，编译完成后，声明文件中的内容在编译结果中会被删除，</strong\n                      >\n                      相当于仅剩下面使用的语句:\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> directions = [Direction.Up, Direction.Down, Direction.Left, Direction.Right];\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1389\">\n                      这里的 Direction 表示引入的全局变量。\n                    </p>\n                    <p data-nodeid=\"1390\">\n                      除了声明变量、函数、类型、枚举之外，我们还可以使用 declare\n                      增强文件、模块的类型系统。\n                    </p>\n                    <h3 data-nodeid=\"1391\">declare 模块</h3>\n                    <p data-nodeid=\"1392\">\n                      在 JavaScript 还没有升级至 ES6 的时候，TypeScript\n                      就提供了一种模块化方案，比如通过使用 module\n                      关键字，我们就可以声明一个内部模块。但是由于 ES6\n                      后来也使用了 module 关键字，为了兼容 ES6，所以 TypeScript\n                      使用 namespace 替代了原来的 module，并更名为命名空间。\n                    </p>\n                    <blockquote data-nodeid=\"1393\">\n                      <p data-nodeid=\"1394\">\n                        <strong data-nodeid=\"1563\"\n                          >需要注意：目前，任何使用</strong\n                        ><code data-backticks=\"1\" data-nodeid=\"1559\"\n                          >module</code\n                        >关键字声明一个内部模块的地方，我们都应该使用<code\n                          data-backticks=\"1\"\n                          data-nodeid=\"1561\"\n                          >namespace</code\n                        >关键字进行替换。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1395\">\n                      TypeScript 与 ES6 一样，任何包含顶级 import 或 export\n                      的文件都会被当作一个模块。我们可以通过声明模块类型，为缺少\n                      TypeScript\n                      类型定义的三方库或者文件补齐类型定义，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// lodash.d.ts</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">module</span> 'lodash' {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">first</span>&lt;<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">extends</span> <span class=\"hljs-title\">unknown</span>&gt;(<span class=\"hljs-params\">array: T[]</span>): <span class=\"hljs-title\">T</span></span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// index.ts</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { first } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lodash'</span>;\n</div></li><li><div class=\"code-word\">first([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// =&gt; number;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1397\">\n                      在上面的例子中，lodash.d.ts 声明了模块 lodash 导出的 first\n                      方法，然后在 TypeScript 文件中使用了模块 lodash 中的 first\n                      方法。\n                    </p>\n                    <blockquote data-nodeid=\"1398\">\n                      <p data-nodeid=\"1399\">\n                        说明：关于声明文件的知识点，我们一会再介绍，目前只需要知道声明文件是一个以<code\n                          data-backticks=\"1\"\n                          data-nodeid=\"1567\"\n                          >.d.ts</code\n                        >为后缀的文件。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1400\">\n                      <strong data-nodeid=\"1574\">声明模块的语法:</strong\n                      ><code data-backticks=\"1\" data-nodeid=\"1572\"\n                        >declare module '模块名' {}</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"1401\">\n                      在模块声明的内部，我们只需要使用 export\n                      导出对应库的类、函数即可。\n                    </p>\n                    <h3 data-nodeid=\"1402\">declare 文件</h3>\n                    <p data-nodeid=\"1403\">\n                      在使用 TypeScript 开发前端应用时，我们可以通过 import\n                      关键字导入文件，比如先使用 import 导入图片文件，再通过\n                      webpack 等工具处理导入的文件。\n                    </p>\n                    <p data-nodeid=\"1404\">\n                      但是，因为 TypeScript 并不知道我们通过 import\n                      导入的文件是什么类型，所以需要使用 declare\n                      声明导入的文件类型，下面看一个具体的示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">module</span> '*.jpg' {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> src: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> src;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">module</span> '*.png' {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> src: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> src;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1406\">\n                      在上面的例子中，我们使用了 *.xxx 模块通配符匹配一类文件。\n                    </p>\n                    <p data-nodeid=\"1407\">\n                      这里标记的图片文件的默认导出的类型是 string ，通过 import\n                      使用图片资源时，TypeScript 会将导入的图片识别为 string\n                      类型，因此也就可以把 import 的图片赋值给 的 src\n                      属性，因为它们的类型都是 string，是匹配的。\n                    </p>\n                    <h3 data-nodeid=\"1408\">declare namespace</h3>\n                    <p data-nodeid=\"1409\">\n                      不同于声明模块，命名空间一般用来表示具有很多子属性或者方法的全局对象变量。\n                    </p>\n                    <p data-nodeid=\"1410\">\n                      我们可以将声明命名空间简单看作是声明一个更复杂的变量，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">namespace</span> $ {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> version: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ajax</span>(<span class=\"hljs-params\">settings?: <span class=\"hljs-built_in\">any</span></span>): <span class=\"hljs-title\">void</span></span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">$.version; <span class=\"hljs-comment\">// =&gt; number</span>\n</div></li><li><div class=\"code-word\">$.ajax();\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1412\">\n                      在上面的例子中，因为我们声明了全局导入的 jQuery 变量\n                      $，所以可以直接使用 $ 变量的 version 属性以及 ajax 方法。\n                    </p>\n                    <p data-nodeid=\"1413\">\n                      在 TypeScript 中，我们还可以编写以 .d.ts\n                      为后缀的声明文件来增强（补齐）类型系统。\n                    </p>\n                    <h3 data-nodeid=\"1414\">声明文件</h3>\n                    <p data-nodeid=\"1415\">\n                      在 TypeScript 中，以 .d.ts\n                      为后缀的文件为声明文件。如果你熟悉 C/C++，那么可以把它当作\n                      .h 文件。 在声明文件时，我们只需要定义三方类库所暴露的 API\n                      接口即可。\n                    </p>\n                    <p data-nodeid=\"1416\">\n                      在 TypeScript 中，存在类型、值、命名空间这 3\n                      个核心概念。如果你掌握了这些核心概念，那么就能够为任何形式的类型书写声明文件了。\n                    </p>\n                    <h4 data-nodeid=\"1417\">类型</h4>\n                    <ul data-nodeid=\"1418\">\n                      <li data-nodeid=\"1419\">\n                        <p data-nodeid=\"1420\">类型别名声明；</p>\n                      </li>\n                      <li data-nodeid=\"1421\">\n                        <p data-nodeid=\"1422\">接口声明；</p>\n                      </li>\n                      <li data-nodeid=\"1423\">\n                        <p data-nodeid=\"1424\">类声明；</p>\n                      </li>\n                      <li data-nodeid=\"1425\">\n                        <p data-nodeid=\"1426\">枚举声明；</p>\n                      </li>\n                      <li data-nodeid=\"1427\">\n                        <p data-nodeid=\"1428\">导入的类型声明。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1429\">\n                      上面的每一个声明都创建了一个类型名称。\n                    </p>\n                    <h4 data-nodeid=\"1430\">值</h4>\n                    <p data-nodeid=\"1431\">值就是在运行时表达式可以赋予的值。</p>\n                    <p data-nodeid=\"1432\">我们可以通过以下 6 种方式创建值：</p>\n                    <ul data-nodeid=\"1433\">\n                      <li data-nodeid=\"1434\">\n                        <p data-nodeid=\"1435\">var、let、const 声明；</p>\n                      </li>\n                      <li data-nodeid=\"1436\">\n                        <p data-nodeid=\"1437\">\n                          namespace、module 包含值的声明；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1438\">\n                        <p data-nodeid=\"1439\">枚举声明；</p>\n                      </li>\n                      <li data-nodeid=\"1440\">\n                        <p data-nodeid=\"1441\">类声明；</p>\n                      </li>\n                      <li data-nodeid=\"1442\">\n                        <p data-nodeid=\"1443\">导入的值；</p>\n                      </li>\n                      <li data-nodeid=\"1444\">\n                        <p data-nodeid=\"1445\">函数声明。</p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"1446\">命名空间</h4>\n                    <p data-nodeid=\"1447\">\n                      在命名空间中，我们也可以声明类型。比如 const x: A.B.C\n                      这个声明，这里的类型 C 就是在 A.B 命名空间下的。\n                    </p>\n                    <blockquote data-nodeid=\"1448\">\n                      <p data-nodeid=\"1449\">\n                        说明：这种区别微妙而重要，这里的<code\n                          data-backticks=\"1\"\n                          data-nodeid=\"1610\"\n                          >A.B</code\n                        >可能代表一个值，也可能代表一个类型。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"1450\">\n                      一个名称 A， 在 TypeScript\n                      中可能表示一个类型、一个值，也可能是一个命名空间。通过类型、值、命名空间的组合，我们也就拥有了表达任意类型的能力。如果你想知道名称A\n                      代表的实际意义，则需要看它所在的上下文。\n                    </p>\n                    <p data-nodeid=\"1451\">\n                      接下来我们通过实际的使用和示例分析来学习声明的书写方式。\n                    </p>\n                    <h3 data-nodeid=\"1452\">使用声明文件</h3>\n                    <p data-nodeid=\"1453\">\n                      安装 TypeScript 依赖后，一般我们会顺带安装一个 lib.d.ts\n                      声明文件，这个文件包含了 JavaScript 运行时以及 DOM\n                      中各种全局变量的声明，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// typescript/lib/lib.d.ts</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/// &lt;reference no-default-lib=\"true\"/&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/// &lt;reference lib=\"es5\" /&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/// &lt;reference lib=\"dom\" /&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/// &lt;reference lib=\"webworker.importscripts\" /&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/// &lt;reference lib=\"scripthost\" /&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1455\">\n                      上面的示例其实就是 TypeScript 中的 lib.d.ts 文件的内容。\n                    </p>\n                    <p data-nodeid=\"1456\">\n                      其中，/// 是 TypeScript 中三斜线指令，后面的内容类似于 XML\n                      标签的语法，用来指代引用其他的声明文件。通过三斜线指令，我们可以更好地复用和拆分类型声明。no-default-lib=\"true\"\n                      表示这个文件是一个默认库。而最后 4 行的lib=\"...\"\n                      表示引用内部的库类型声明。\n                    </p>\n                    <p data-nodeid=\"1457\">\n                      关于更多三斜线指令的内容，你可以查看<a\n                        href=\"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"1629\"\n                        >链接</a\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"1458\">使用 @types</h4>\n                    <p data-nodeid=\"1459\">\n                      前面我们介绍了如何为 JavaScript\n                      库编写类型声明，然而为库编写类型声明非常耗费精力，且难以在多个项目中复用。<a\n                        href=\"https://github.com/DefinitelyTyped/DefinitelyTyped?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"1635\"\n                        >Definitely Typed</a\n                      >是最流行性的高质量 TypeScript\n                      声明文件类库，正是因为有社区维护的这个声明文件类库，大大简化了\n                      JavaScript 项目迁移 TypeScript 的难度。\n                    </p>\n                    <p data-nodeid=\"1460\">\n                      目前，社区已经记录了 90% 的 JavaScript\n                      库的类型声明，意味着如果我们想使用的库有社区维护的类型声明，那么就可以通过安装类型声明文件直接使用\n                      JavaScript 编写的类库了。\n                    </p>\n                    <p data-nodeid=\"1461\">\n                      具体操作：首先，<a\n                        href=\"https://www.typescriptlang.org/dt/search?search=&amp;fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"1641\"\n                        >点击这里的链接</a\n                      >搜索你想要导入的类库的类型声明，如果有社区维护的声明文件。然后，我们只需要安装\n                      @types/xxx 就可以在 TypeScript 中直接使用它了。\n                    </p>\n                    <p data-nodeid=\"1462\">\n                      然而，因为 Definitely Typed\n                      是由社区人员维护的，如果原来的三方库升级，那么 Definitely\n                      Typed 所导出的三方库的类型定义想要升级还需要经过\n                      PR、发布的流程，就会导致无法与原库保持完全同步。针对这个问题，在\n                      TypeScript\n                      中，我们可以通过类型合并、扩充类型定义的技巧临时解决。\n                    </p>\n                    <h3 data-nodeid=\"1463\">类型合并</h3>\n                    <p data-nodeid=\"1464\">\n                      在 TypeScript\n                      中，相同的接口、命名空间会依据一定的规则进行合并。\n                    </p>\n                    <h4 data-nodeid=\"1465\">合并接口</h4>\n                    <p data-nodeid=\"1466\">\n                      最简单、常见的声明合并是接口合并，下面我们看一个具体的示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> Person {\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> Person {\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 相当于</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> Person {\n</div></li><li><div class=\"code-word\">  name: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1468\">\n                      在上面的例子中，我们展示了接口合并最简单的情况，这里的合并相当于把接口的属性放入了一个同名的接口中。\n                    </p>\n                    <p data-nodeid=\"25018\" class=\"te-preview-highlight\">\n                      <strong data-nodeid=\"25023\"\n                        >需要注意的是接口的非函数成员类型必须完全一样</strong\n                      >，如下示例：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> Person {\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> Person {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// TS2717: Subsequent property declarations must have the same type.</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// Property 'age' must be of type 'string', but here has type 'number'.</span>\n</div></li><li><div class=\"code-word\">  age: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1471\">\n                      在上面的例子中，因为存在两个属性相同而类型不同的接口，所以编译器报了一个\n                      ts(2717) 错误 。\n                    </p>\n                    <p data-nodeid=\"1472\">\n                      对于函数成员而言，每个同名的函数声明都会被当作这个函数的重载。\n                    </p>\n                    <p data-nodeid=\"1473\">\n                      <strong data-nodeid=\"1660\"\n                        >需要注意的是后面声明的接口具有更高的优先级</strong\n                      >，下面看一个具体的示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span>&nbsp;Obj&nbsp;{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;identity(val:&nbsp;<span class=\"hljs-built_in\">any</span>):&nbsp;<span class=\"hljs-built_in\">any</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span>&nbsp;Obj&nbsp;{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;identity(val:&nbsp;<span class=\"hljs-built_in\">number</span>):&nbsp;<span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span>&nbsp;Obj&nbsp;{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;identity(val:&nbsp;<span class=\"hljs-built_in\">boolean</span>):&nbsp;<span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//&nbsp;相当于</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span>&nbsp;Obj&nbsp;{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;identity(val:&nbsp;<span class=\"hljs-built_in\">boolean</span>):&nbsp;<span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;identity(val:&nbsp;<span class=\"hljs-built_in\">number</span>):&nbsp;<span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;identity(val:&nbsp;<span class=\"hljs-built_in\">any</span>):&nbsp;<span class=\"hljs-built_in\">any</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;obj:&nbsp;Obj&nbsp;=&nbsp;{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;identity(val:&nbsp;<span class=\"hljs-built_in\">any</span>)&nbsp;{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;val;\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;}\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;t1&nbsp;=&nbsp;obj.identity(<span class=\"hljs-number\">1</span>);&nbsp;<span class=\"hljs-comment\">//&nbsp;=&gt;&nbsp;number</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;t2&nbsp;=&nbsp;obj.identity(<span class=\"hljs-literal\">true</span>);&nbsp;<span class=\"hljs-comment\">//&nbsp;=&gt;&nbsp;boolean</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;t3&nbsp;=&nbsp;obj.identity(<span class=\"hljs-string\">\"t3\"</span>);&nbsp;<span class=\"hljs-comment\">//&nbsp;=&gt;&nbsp;any</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1475\">\n                      在上面的代码中，Obj 类型的 identity 函数成员有 3\n                      个重载，与函数重载的顺序相同，声明在前面的重载类型会匹配。我们分开声明接口的\n                      3 个函数成员，相当于 12~16\n                      行的声明，因为后声明的接口具有更高的优先级，所以 t1、t2\n                      的类型可以被重载为其对应的类型，而不是 any。\n                    </p>\n                    <p data-nodeid=\"1476\">\n                      接下来我们更改一下顺序，再看看结果。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> Obj {\n</div></li><li><div class=\"code-word\">  identity(val: <span class=\"hljs-built_in\">boolean</span>): <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> Obj {\n</div></li><li><div class=\"code-word\">  identity(val: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span> Obj {\n</div></li><li><div class=\"code-word\">  identity(val: <span class=\"hljs-built_in\">any</span>): <span class=\"hljs-built_in\">any</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//&nbsp;相当于</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">interface</span>&nbsp;Obj&nbsp;{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;identity(val:&nbsp;<span class=\"hljs-built_in\">any</span>):&nbsp;<span class=\"hljs-built_in\">any</span>;\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;identity(val:&nbsp;<span class=\"hljs-built_in\">number</span>):&nbsp;<span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;identity(val:&nbsp;<span class=\"hljs-built_in\">boolean</span>):&nbsp;<span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> obj: Obj = {\n</div></li><li><div class=\"code-word\">  identity(val: <span class=\"hljs-built_in\">any</span>) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> val;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">};\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> t1 = obj.identity(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// =&gt; any</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> t2 = obj.identity(<span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// =&gt; any</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> t3 = obj.identity(<span class=\"hljs-string\">\"t3\"</span>); <span class=\"hljs-comment\">// =&gt; any</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1478\">\n                      在上面的代码中，identity 函数参数为 any\n                      的重载在第一位，因此 t1、t2、t3 的返回值类型都被重载成了\n                      any。\n                    </p>\n                    <h4 data-nodeid=\"1479\">合并 namespace</h4>\n                    <p data-nodeid=\"1480\">\n                      合并 namespace\n                      与合并接口类似，命名空间的合并也会合并其导出成员的属性。不同的是，非导出成员仅在原命名空间内可见。\n                    </p>\n                    <p data-nodeid=\"1481\">下面看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">namespace</span> Person {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> age = <span class=\"hljs-number\">18</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getAge</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> age;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">namespace</span> Person {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getMyAge</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> age; <span class=\"hljs-comment\">// TS2304: Cannot find name 'age'.</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1483\">\n                      在上面的例子，同名的命名空间 Person 中，有一个非导出的属性\n                      age，在第二个命名空间 Person 中没有 age 属性却引用了\n                      age，所以 TypeScript 报出了找不到 age\n                      的错误。这是因为非导出成员仅在合并前的命名空间中可见，上例中即\n                      1~6 行的命名空间中可以访问 age 属性。但是对于 8~12\n                      行中的同名命名空间是不可以访问 age 属性的。\n                    </p>\n                    <h4 data-nodeid=\"1484\">不可合并</h4>\n                    <p data-nodeid=\"1485\">\n                      介绍类类型时我们说过，定义一个类类型，相当于定义了一个类，又定义了一个类的类型。因此，对于类这个既是值又是类型的特殊对象不能合并。\n                    </p>\n                    <p data-nodeid=\"1486\">\n                      除了可以通过接口和命名空间合并的方式扩展原来声明的类型外，我们还可以通过扩展模块或扩展全局对象来增强类型系统。\n                    </p>\n                    <h3 data-nodeid=\"1487\">扩充模块</h3>\n                    <p data-nodeid=\"1488\">\n                      JavaScript 是一门动态类型的语言，通过 prototype\n                      我们可以很容易地扩展原来的对象。\n                    </p>\n                    <p data-nodeid=\"1489\">\n                      但是，如果我们直接扩展导入对象的原型链属性，TypeScript\n                      会提示没有该属性的错误，因此我们就需要扩展原模块的属性。\n                    </p>\n                    <p data-nodeid=\"1490\">下面看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// person.ts</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Person {}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// index.ts</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { Person } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./person'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">module</span> './person' {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> Person {\n</div></li><li><div class=\"code-word\">    greet: <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">Person.prototype.greet = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hi!'</span>);\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1492\">\n                      在上面的例子中，我们声明了导入模块 person 中 Person\n                      的属性，TypeScript\n                      会与原模块的类型合并，通过这种方式我们可以扩展导入模块的类型。同时，我们为导入的\n                      Person 类增加了原型链上的 greet 方法。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"diff\"><ol><li><div class=\"code-word\">// person.ts\n</div></li><li><div class=\"code-word\">export class Person {}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">// index.ts\n</div></li><li><div class=\"code-word\">import { Person } from './person';\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">declare module './person' {\n</div></li><li><div class=\"code-word\">  interface Person {\n</div></li><li><div class=\"code-word\"> &nbsp;  greet: () =&gt; void;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-deletion\">- declare module './person' {</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-deletion\">- &nbsp; interface Person {</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-deletion\">- &nbsp; &nbsp; greet: () =&gt; void;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-deletion\">- &nbsp; }</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-deletion\">- }</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-addition\">+ // TS2339: Property 'greet' does not exist on type 'Person'.</span>\n</div></li><li><div class=\"code-word\">Person.prototype.greet = () =&gt; {\n</div></li><li><div class=\"code-word\">  console.log('Hi!');\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1494\">\n                      在上面的例子中，如果我们删除了扩展模块的声明，第 20\n                      行则会报出 ts(2339) 不存在 greet 属性的类型错误。\n                    </p>\n                    <p data-nodeid=\"1495\">\n                      对于导入的三方模块，我们同样可以使用这个方法扩充原模块的属性。\n                    </p>\n                    <h3 data-nodeid=\"1496\">扩充全局</h3>\n                    <p data-nodeid=\"1497\">\n                      全局模块指的是不需要通过 import\n                      导入即可使用的模块，如全局的 window、document 等。\n                    </p>\n                    <p data-nodeid=\"1498\">\n                      对全局对象的扩充与对模块的扩充是一样的，下面看一个具体示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> global {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> Array&lt;T <span class=\"hljs-keyword\">extends</span> unknown&gt; {\n</div></li><li><div class=\"code-word\">    getLen(): <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-built_in\">Array</span>.prototype.getLen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.length;\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1500\">\n                      在上面的例子中，因为我们声明了全局的 Array 对象有一个\n                      getLen 方法，所以为 Array 对象实现 getLen\n                      方法时，TypeScript 不会报错。\n                    </p>\n                    <h3 data-nodeid=\"1501\">小结与预告</h3>\n                    <p data-nodeid=\"1502\">\n                      这一讲我们学习了声明的基本语法和如何使用声明文件，同时还学习了如何扩展类型定义以及模块类型，掌握了这些技巧不但可以扩展增强原模块，还能修改原模块的类型定义。\n                    </p>\n                    <p data-nodeid=\"1503\">\n                      在14 讲中，我们将学习 TypeScript\n                      官方提供的工具类型。<strong data-nodeid=\"1694\"\n                        >通过使用这些内置工具类型，我们可以在不同的项目中轻松地组合出一些复杂的工具类型。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1504\" class=\"\">\n                      最后，如果你觉得本专栏有价值，欢迎分享给更多好友！\n                    </p>\n            "}