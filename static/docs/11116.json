{"title":"15 | 类型编程：如何打造属于自己的工具类型？","context":"\n                    <p data-nodeid=\"18571\">\n                      14 讲我们学习了常见 TypeScript\n                      官方内置的工具类型（官方轮子），它们的本质就是自定义的复杂类型构造器（确切地讲是泛型）。这一讲我们就来学习一下如何自己造轮子，并剖析一些常见第三方轮子的实现。\n                    </p>\n                    <blockquote data-nodeid=\"18572\">\n                      <p data-nodeid=\"18573\">\n                        学习建议：使用 VS Code 新建一个 15.ts\n                        文件，尝试这一讲中出现的所有示例。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"18574\">类型物料</h3>\n                    <p data-nodeid=\"18575\">\n                      在正式造轮子之前，我们先来熟悉一下即将用到的物料，这可能涉及前面每一讲中的知识点和一些新语法。如果你连泛型特性都记不清的话，那么请至少从\n                      10 讲开始温习一遍。\n                    </p>\n                    <p data-nodeid=\"18576\">\n                      言归正传，接下来我们一起看看重度依赖的一些类型物料。\n                    </p>\n                    <h4 data-nodeid=\"18577\">泛型</h4>\n                    <p data-nodeid=\"18578\">\n                      首先是泛型（回顾 10\n                      讲），笔者认为工具类型的本质就是构造复杂类型的泛型。如果一个工具类型不能接受类型入参，那么它和普通的类型别名又有什么区别？因此，使用泛型进行变量抽离、逻辑封装其实就是在造类型的轮子，下面举一个具体的示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isXX = <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">number</span> ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isYY = <span class=\"hljs-string\">'string'</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">string</span> ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18580\">\n                      在示例中的第 1~2 行，我们重复使用了 extends\n                      关键字和三元运算符实现根据类型 1 和 number、'string' 和\n                      string 的子类型关系分别返回布尔字面量 true 或者\n                      false，并给类型起了别名\n                      isXX、isYY，这明显是一种效率低下的做法，因为我们不能把其中的逻辑复用在对其他类型子类型关系的判断上。这时，我们就需要把确切的类型抽离为入参，然后封装成一个可复用的泛型。\n                    </p>\n                    <p data-nodeid=\"18581\">下面一起看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isSubTying&lt;Child, Par&gt; = Child <span class=\"hljs-keyword\">extends</span> Par ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isXX2 = isSubTyping&lt;<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">number</span>&gt;; <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isYY2 = isSubTyping&lt;<span class=\"hljs-string\">'string'</span>, <span class=\"hljs-built_in\">string</span>&gt;; <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isZZ2 = isSubTyping&lt;<span class=\"hljs-literal\">true</span>, <span class=\"hljs-built_in\">boolean</span>&gt;; <span class=\"hljs-comment\">// true</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18583\">\n                      示例中的第 1 行封装出来的工具泛型其实是我们在 12\n                      讲中使用到的工具类型 isSubTyping，如果类型入参 Child 是\n                      Par 的子类型，则返回布尔字面量类型 true，否则返回\n                      false。这样，我们就可以使用 isSubTyping\n                      判断其他任意两个类型之间的子类型关系了。\n                    </p>\n                    <p data-nodeid=\"18584\">\n                      比如示例中的第 2~4 行，因为 1 和 number、'string' 和\n                      string、true 和 boolean\n                      都是子类型和父类型的关系，所以返回的都是布尔字面量类型\n                      true。\n                    </p>\n                    <h4 data-nodeid=\"18585\">条件类型</h4>\n                    <p data-nodeid=\"18586\">\n                      如我们在泛型中提到，TypeScript\n                      支持使用三元运算的条件类型，它可以根据\n                      ？前面的条件判断返回不同的类型。同时，三元运算还支持嵌套。\n                    </p>\n                    <p data-nodeid=\"18587\">\n                      在三元运算的条件判断逻辑中，它主要使用 extends\n                      关键字判断两个类型的子类型关系，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isSubTyping&lt;Child, Par&gt; = Child <span class=\"hljs-keyword\">extends</span> Par ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isAssertable&lt;T, S&gt; = T <span class=\"hljs-keyword\">extends</span> S ? <span class=\"hljs-literal\">true</span> :  S <span class=\"hljs-keyword\">extends</span> T ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isNumAssertable = isAssertable&lt;<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">number</span>&gt;; <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isStrAssertable = isAssertable&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-string\">'string'</span>&gt;; <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isNotAssertable = isAssertable&lt;<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">boolean</span>&gt;; <span class=\"hljs-comment\">// false</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18589\">\n                      以上示例，除了在第 1 行定义了 isSubTyping 之外，我们还在第\n                      2 行定义了使用嵌套的三元运算，用来判断类型入参 T\n                      是否可以被断言成类型 S（T as S）的泛型\n                      isAssertable，并使用 extends 关键字判断入参 T 是否是 S\n                      的子类型或 S 是 T 的子类型，从而判断它们之间的可断言关系。\n                    </p>\n                    <p data-nodeid=\"18590\">\n                      在示例中的第 3~5 行，因为 1 是 number\n                      类型的子类型，满足条件分支 T extends S，所以返回了\n                      true；因为字符串字面量 'string' 是 string\n                      类型的子类型，满足条件分支 S extends T，所以返回了\n                      true；因为 1 既不是 boolean\n                      的子类型，也不是父类型，不满足任何条件分支，所以返回了\n                      false。\n                    </p>\n                    <p data-nodeid=\"18591\">\n                      下面我们一起来看看条件类型的另外一个特性：分配条件类型。\n                    </p>\n                    <h4 data-nodeid=\"18592\">\n                      分配条件类型（Distributive Conditional Types）\n                    </h4>\n                    <p data-nodeid=\"18593\">\n                      如我们在 10\n                      讲中提到，在条件类型中，如果入参是联合类型，则会被拆解为一个个独立的（原子）类型（成员），然后再进行类型运算。\n                    </p>\n                    <p data-nodeid=\"18594\">下面我们看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> BooleanOrString = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> StringOrNumberArray&lt;E&gt; = E <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span> ? E[] : E;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> WhatIsThis = StringOrNumberArray&lt;BooleanOrString&gt;; <span class=\"hljs-comment\">// boolean | string[]</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> BooleanOrStringGot = BooleanOrString <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span> ? BooleanOrString[] : BooleanOrString; <span class=\"hljs-comment\">//  string | boolean</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18596\">\n                      在示例中的第 3 行， string 和 boolean 组成的联合类型\n                      BooleanOrString 作为泛型 StringOrNumberArray\n                      入参的时候，则会被拆解成 string 和 boolean\n                      这两个独立的类型，再通过 extends 关键字判断是否是 string |\n                      number 类型的子类型。\n                    </p>\n                    <p data-nodeid=\"18597\">\n                      因为 string 是子集，而 boolean 不是，所以最终我们得到的\n                      WhatIsThis 的类型是 boolean |\n                      string[]**。**但是，在非泛型条件类型中（示例中的第 4\n                      行），因为 BooleanOrString 被当成了一个整体对待，所以\n                      BooleanOrStringGot 的类型是 string | boolean。\n                    </p>\n                    <p data-nodeid=\"18598\">\n                      同样，通过某些手段强制类型入参被当成一个整体，也可以解除类型分配，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> StringOrNumberArray&lt;E&gt; = [E] <span class=\"hljs-keyword\">extends</span> [<span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>] ? E[] : E;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> WhatIsThis = StringOrNumberArray&lt;<span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">boolean</span>&gt;; <span class=\"hljs-comment\">// string | boolean</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18600\">\n                      在示例中的第 1 行，我们使用 [] 将入参 E\n                      包起来，即便入参是联合类型 string |\n                      boolean，也会被当成一个整体对待，所以第 2 行返回的是\n                      string | boolean。\n                    </p>\n                    <p data-nodeid=\"18601\">\n                      <strong data-nodeid=\"18757\"\n                        >注意：包含条件类型的泛型接收 never\n                        作为泛型入参时，存在一定“陷阱”</strong\n                      >，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> GetSNums = never <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">number</span> ? <span class=\"hljs-built_in\">number</span>[] : never <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">string</span> ? <span class=\"hljs-built_in\">string</span>[] : never; <span class=\"hljs-comment\">// number[];</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> GetNever = StringOrNumberArray&lt;never&gt;; <span class=\"hljs-comment\">// never</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18603\">\n                      在上述示例中的第 1 行，因为 never\n                      是所有类型的子类型，自然也是 number 的子类型，所以返回的是\n                      number 类型的数组；在第 2 行传入 never\n                      作为入参来实例化前面定义的泛型 StringOrNumberArray\n                      时，返回的类型却是 never，而不是 number[]。\n                    </p>\n                    <p data-nodeid=\"18604\">\n                      你要知道，泛型 StringOrNumberArray 的实现与示例第 1\n                      行“=”右侧的逻辑并没有任何区别（除 never\n                      被抽离成入参之外）。这是因为 never\n                      是不能分配的底层类型，如果作为入参以原子形式出现在条件判断\n                      extends 关键字左侧，则实例化得到的类型也是 never。\n                    </p>\n                    <p data-nodeid=\"18605\">下面看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> UsefulNeverX&lt;T&gt; = T <span class=\"hljs-keyword\">extends</span> {} ? T[] : [];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> UselessNeverX&lt;T, S&gt; = S <span class=\"hljs-keyword\">extends</span> {} ? S[] : [];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> UselessNeverY&lt;T, S&gt; = S <span class=\"hljs-keyword\">extends</span> {} ? T[] : [];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> UselessNeverZ&lt;T&gt; = [T] <span class=\"hljs-keyword\">extends</span> [{}] ? T[] : [];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ThisIsNeverX = UsefulNeverX&lt;never&gt;; <span class=\"hljs-comment\">// never</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ThisIsNotNeverX = UselessNeverX&lt;never, <span class=\"hljs-built_in\">string</span>&gt;; <span class=\"hljs-comment\">// string[]</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ThisIsNotNeverY = UselessNeverY&lt;never, <span class=\"hljs-built_in\">string</span>&gt;; <span class=\"hljs-comment\">// never[]</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ThisIsNotNeverZ = UselessNeverZ&lt;never&gt;; <span class=\"hljs-comment\">// never[]</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18607\">\n                      在示例中的第 1 行，因为我们定义的泛型 UsefulNeverX 的入参\n                      T 被三元运算中的 extends 使用，所以第 5 行返回的类型是\n                      never。而第 2 行、第 3 行定义的泛型入参 T\n                      都没有被三元运算中的 extends 使用，所以第 6~7\n                      行所返回的类型分别是 string[] 和 never[]。在第 4\n                      行，因为入参 T 是以 T[] 而不是以原子形式被 extends\n                      使用，所以第 8 行返回的类型也是 never[]。\n                    </p>\n                    <h4 data-nodeid=\"18608\">条件类型中的类型推断 infer</h4>\n                    <p data-nodeid=\"18609\">\n                      另外，我们可以在条件类型中使用类型推断操作符 infer\n                      来获取类型入参的组成部分，比如说获取数组类型入参里元素的类型。\n                    </p>\n                    <p data-nodeid=\"18610\">下面我们来看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ElementTypeOfArray&lt;T&gt; = T <span class=\"hljs-keyword\">extends</span> (infer E)[] ? E : never;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isNumber = ElementTypeOfArray&lt;<span class=\"hljs-built_in\">number</span>[]&gt;; <span class=\"hljs-comment\">// number</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isNever = ElementTypeOfArray&lt;<span class=\"hljs-built_in\">number</span>&gt;; <span class=\"hljs-comment\">// never</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18612\">\n                      在示例中的第 1 行，我们定义了接收入参 T 的泛型\n                      ElementTypeOfArray，并在三元运算的条件判断中，通过 (infer\n                      E)[] 定义了一个有对元素类型推断参数 E 的数组。当入参 T\n                      满足是 (infer E)[] 数组类型的子类型的条件，则返回参数\n                      E，即数组元素类型，所以在第 3 行传入 number[]\n                      入参时返回的是 number 类型，而传入 number 时返回的则是\n                      never。\n                    </p>\n                    <p data-nodeid=\"18613\">\n                      我们还可以通过 infer\n                      创建任意个类型推断参数，以此获取任意的成员类型，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ElementTypeOfObj&lt;T&gt; = T <span class=\"hljs-keyword\">extends</span> { name: infer E; id: infer I } ? [E, I] : never;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isArray = ElementTypeOfObj&lt;{ name: <span class=\"hljs-string\">'name'</span>; id: <span class=\"hljs-number\">1</span>; age: <span class=\"hljs-number\">30</span> }&gt;; <span class=\"hljs-comment\">// ['name', 1]</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isNever = ElementTypeOfObj&lt;<span class=\"hljs-built_in\">number</span>&gt;; <span class=\"hljs-comment\">// never</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18615\">\n                      在示例中的第 1 行，我们定义了入参是 T 的泛型\n                      ElementTypeOfObj，并通过两个 infer 类型推断来获取入参\n                      name、id 属性的类型。在第 3 行，因为入参是包含 name、id\n                      属性的接口类型，所以提取到了元组类型 ['name', 1]。而在第 4\n                      行，因为入参 number 不满足三元运算中的条件判断，所以返回了\n                      never。\n                    </p>\n                    <h4 data-nodeid=\"18616\">索引访问类型</h4>\n                    <p data-nodeid=\"18617\">\n                      索引访问类型其实更像是获取物料的方式，首先我们可以通过属性名、索引、索引签名按需提取对象（接口类型）任意成员的类型（<strong\n                        data-nodeid=\"18811\"\n                        >注意：只能使用 [索引名] 的语法</strong\n                      >），如下示例。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> MixedObject {\n</div></li><li><div class=\"code-word\">    animal: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'animal'</span> | <span class=\"hljs-string\">'dog'</span> | <span class=\"hljs-string\">'cat'</span>;\n</div></li><li><div class=\"code-word\">      age: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">    [name: <span class=\"hljs-built_in\">number</span>]: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">      age: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">      nickname: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">    [name: <span class=\"hljs-built_in\">string</span>]: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">      age: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> animal = MixedObject[<span class=\"hljs-string\">'animal'</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> animalType = MixedObject[<span class=\"hljs-string\">'animal'</span>][<span class=\"hljs-string\">'type'</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> numberIndex = MixedObject[<span class=\"hljs-built_in\">number</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> numberIndex0 = MixedObject[<span class=\"hljs-number\">0</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> stringIndex = MixedObject[<span class=\"hljs-built_in\">string</span>];\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> stringIndex0 = MixedObject[<span class=\"hljs-string\">'string'</span>];\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18619\">\n                      在示例的第 16 行，我们通过 'animal' 索引获取了 MixedObject\n                      接口的 animal 属性的类型。在第 17\n                      行，我们通过多级属性索引获取了更深层级 type 属性的类型。\n                    </p>\n                    <p data-nodeid=\"18620\">\n                      然后，在第 18 行、第 19 行，我们通过 number\n                      类型索引签名和数字索引 0 获取了第 6~10\n                      行定义的同一个接口类型。\n                    </p>\n                    <p data-nodeid=\"18621\">\n                      最后，在第 20 行、第 21 行，我们通过 string\n                      类型索引签名和字符串字面量索引 'string' 获取了第 11~14\n                      行定义的同一个接口类型（回顾 7 讲）。\n                    </p>\n                    <h4 data-nodeid=\"18622\">keyof</h4>\n                    <p data-nodeid=\"18623\">\n                      其次，我们还可以使用 keyof\n                      关键字提取对象属性名、索引名、索引签名的类型，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> MixedObjectKeys = keyof MixedObject; <span class=\"hljs-comment\">// string | number</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> animalKeys = keyof animal; <span class=\"hljs-comment\">// 'type' | 'age'</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> numberIndexKeys = keyof numberIndex; <span class=\"hljs-comment\">// \"type\" | \"age\" | \"nickname\"</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18625\">\n                      在示例中的第 1 行，我们使用 keyof 提取了 MixedObject\n                      接口的属性和索引签名，它是由 string、number 和 'animal'\n                      类型组成的联合类型，缩减之后就是 string | number\n                      联合类型。在第 2 行，我们提取了 'type' 和 'age'\n                      字符串字面量类型组成的联合类型。在第 3 行，我们提取了\n                      'type'、'age' 和 'nickname' 组成的联合类型。\n                    </p>\n                    <h4 data-nodeid=\"18626\">typeof</h4>\n                    <p data-nodeid=\"18627\">最后介绍的操作符物料是 typeof。</p>\n                    <p data-nodeid=\"18628\">\n                      如果我们在表达式上下文中使用\n                      typeof，则是用来获取表达式值的类型，如果在类型上下文中使用，则是用来获取变量或者属性的类型。当然，在\n                      TypeScript 中，typeof\n                      的主要用途是在类型上下文中获取变量或者属性的类型，下面我们通过一个具体示例来理解一下。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> StrA = <span class=\"hljs-string\">'a'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> unions = <span class=\"hljs-keyword\">typeof</span> StrA; <span class=\"hljs-comment\">// unions 类型是 \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\"</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> str: <span class=\"hljs-keyword\">typeof</span> StrA = <span class=\"hljs-string\">'string'</span>; <span class=\"hljs-comment\">// strs 类型是 string</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> DerivedFromStrA = <span class=\"hljs-keyword\">typeof</span> StrA; <span class=\"hljs-comment\">// string</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18630\">\n                      在示例中的第 3 行，typeof 作用在表达式上下文中，获取的是\n                      StrA 值的类型，因为与静态类型上下文无关，所以变量 unions\n                      的类型是 'string'、'number' 等字符串字面量组成的联合类型。\n                    </p>\n                    <p data-nodeid=\"18631\">\n                      而在第 4 行，typeof 作用在类型上下文中，提取的是变量 StrA\n                      的类型，因为第 1 行推断出来 StrA 的类型是\n                      string，所以提取的类型、变量 str 的类型也是 string。\n                    </p>\n                    <p data-nodeid=\"18632\">\n                      当然，我们也可以使用一个类型别名专门接收从变量 StrA\n                      提取的类型，比如示例中的第 5 行，类型别名 DerivedFromStrA\n                      的类型是 string。\n                    </p>\n                    <p data-nodeid=\"18633\">\n                      对于任何未显式添加类型注解或值与类型注解一体（比如函数、类）的变量或属性，我们都可以使用\n                      typeof\n                      提取它们的类型，这是一个十分方便、有用的设计，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> animal = {\n</div></li><li><div class=\"code-word\">    id: <span class=\"hljs-number\">1</span>,\n</div></li><li><div class=\"code-word\">    name: <span class=\"hljs-string\">'animal'</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> Animal = <span class=\"hljs-keyword\">typeof</span> animal;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> animalFun = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> animal;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> AnimalFun = <span class=\"hljs-keyword\">typeof</span> animalFun;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18635\">\n                      在示例中的第 5 行、第 7 行，我们使用 typeof 提取了对象\n                      animal 和函数 animaFun 的类型。\n                    </p>\n                    <h4 data-nodeid=\"18636\">映射类型</h4>\n                    <p data-nodeid=\"18637\">\n                      我们可以使用索引签名语法和 in\n                      关键字限定对象属性的范围，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> SpecifiedKeys = <span class=\"hljs-string\">'id'</span> | <span class=\"hljs-string\">'name'</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetType = {\n</div></li><li><div class=\"code-word\">    [key <span class=\"hljs-keyword\">in</span> SpecifiedKeys]: <span class=\"hljs-built_in\">any</span>;\n</div></li><li><div class=\"code-word\">  };&nbsp;<span class=\"hljs-comment\">// { id: any; name: any; }</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGeneric&lt;O <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span> | symbol&gt; = {\n</div></li><li><div class=\"code-word\">    [key <span class=\"hljs-keyword\">in</span> O]: <span class=\"hljs-built_in\">any</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetInstance = TargetGeneric&lt;SpecifiedKeys&gt;; <span class=\"hljs-comment\">// { id: any; name: any; }</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18639\">\n                      在示例中的第 1 行，我们定义了联合类型\n                      SpecifiedKeys，并在第 3 行、第 6 行使用 in 限定了\n                      AnimalNormal 对象和泛型 AnimalGeneric 的属性必须是\n                      SpecifiedKeys 的成员，所以最终第 2 行、第 8\n                      行得到的类型都是 { id: any; name: any; }。\n                    </p>\n                    <p data-nodeid=\"18640\">\n                      <strong data-nodeid=\"18877\"\n                        >注意：我们只能在类型别名定义中使用\n                        in，如果在接口中使用，则会提示一个 ts(1169)\n                        的错误</strong\n                      >，如下示例第 2 行所示。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> ITargetInterface {\n</div></li><li><div class=\"code-word\">    [key <span class=\"hljs-keyword\">in</span> SpecifiedKeys]: <span class=\"hljs-built_in\">any</span>; <span class=\"hljs-comment\">// ts(1169)</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18642\">\n                      在定义类型时，我们可以组合使用 in 和\n                      keyof，并基于已有的类型创建一个新类型，使得新类型与已有类型保持一致的只读、可选特性，这样的泛型被称之为映射类型。\n                    </p>\n                    <blockquote data-nodeid=\"18643\">\n                      <p data-nodeid=\"18644\">\n                        <strong data-nodeid=\"18882\"\n                          >注意：in 和 keyof\n                          也只能在类型别名定义中组合使用。</strong\n                        >\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"18645\">下面我们看一个具体的示例：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">interface</span> SourceInterface {\n</div></li><li><div class=\"code-word\">    readonly id: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">    name?: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetType = {\n</div></li><li><div class=\"code-word\">    [key <span class=\"hljs-keyword\">in</span> keyof SourceInterface]: SourceInterface[key];\n</div></li><li><div class=\"code-word\">  }; <span class=\"hljs-comment\">// { readonly id: number; name?: string | undefined }</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGenericType&lt;S&gt; = {\n</div></li><li><div class=\"code-word\">    [key <span class=\"hljs-keyword\">in</span> keyof S]: S[key];\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetInstance = TargetGenericType&lt;SourceInterface&gt;; <span class=\"hljs-comment\">// { readonly id: number; name?: string | undefined }</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18647\">\n                      在示例中的第 6 行、第 9 行，我们使用 in 和\n                      keyof，以及基于接口类型 SourceInterface 和泛型入参 S\n                      分别创建了一个新类型，最终第 5 行的 TargetType、第 11\n                      行的TargetInstance 也获得了只读的 id 属性和可选的 name\n                      属性。\n                    </p>\n                    <p data-nodeid=\"18648\">\n                      同样，我们可以在映射类型中使用 readonly、?\n                      修饰符来描述属性的可读性、可选性，也可以在修饰符前添加\n                      +、- 前缀表示添加、移除指定修饰符（默认是\n                      +、添加），如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGenericTypeReadonly&lt;S&gt; = {\n</div></li><li><div class=\"code-word\">    readonly [key <span class=\"hljs-keyword\">in</span> keyof S]: S[key];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGenericTypeReadonlyInstance = TargetGenericTypeReadonly&lt;SourceInterface&gt;; <span class=\"hljs-comment\">// { readonly id: number; readonly name?: string | undefined }</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGenericTypeOptional&lt;S&gt; = {\n</div></li><li><div class=\"code-word\">    [key <span class=\"hljs-keyword\">in</span> keyof S]?: S[key];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGenericTypeOptionalInstance = TargetGenericTypeOptional&lt;SourceInterface&gt;; <span class=\"hljs-comment\">// { readonly id?: number; readonly name?: string | undefined }</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGenericTypeRemoveReadonly&lt;S&gt; = {\n</div></li><li><div class=\"code-word\">    -readonly [key <span class=\"hljs-keyword\">in</span> keyof S]: S[key];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGenericTypeRemoveReadonlyInstance = TargetGenericTypeRemoveReadonly&lt;SourceInterface&gt;; <span class=\"hljs-comment\">// { id: number; name?: string | undefined }</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGenericTypeRemoveOptional&lt;S&gt; = {\n</div></li><li><div class=\"code-word\">    [key <span class=\"hljs-keyword\">in</span> keyof S]-?: S[key];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGenericTypeRemoveOptionalInstance = TargetGenericTypeRemoveOptional&lt;SourceInterface&gt;; <span class=\"hljs-comment\">// { readonly id: number; name: string }</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18650\">\n                      在示例中的第 1~3 行，我们给所有属性添加了 readonly\n                      修饰符，所以第 4 行得到的类型是 { readonly id: number;\n                      readonly name?: string | undefined }。\n                    </p>\n                    <p data-nodeid=\"18651\">\n                      在第 5~7 行，我们给所有属性添加了 ? 可选修饰符，所以第 8\n                      行得到的类型是 { readonly id?: number; readonly name?:\n                      string | undefined }。\n                    </p>\n                    <p data-nodeid=\"18652\">\n                      在第 9~11 行，我们通过 -readonly 移除了只读修饰符，所以第\n                      12 行得到的类型是 { id: number; name?: string | undefined\n                      }。\n                    </p>\n                    <p data-nodeid=\"18653\">\n                      在第 13~15 行，我们通过 -? 移除了可选修饰符，所以第 16\n                      行得到的类型是 { readonly id: number; name: string }。\n                    </p>\n                    <p data-nodeid=\"18654\">\n                      <strong data-nodeid=\"18901\">使用 as 重新映射 key</strong>\n                    </p>\n                    <p data-nodeid=\"18655\">\n                      穿越一下，<strong data-nodeid=\"18907\"\n                        >自 TypeScript 4.1\n                        起，我们可以在映射类型的索引签名中使用类型断言</strong\n                      >，如下示例（TypeScript 4.1 以下则会提示错误）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGenericTypeAssertiony&lt;S&gt; = {\n</div></li><li><div class=\"code-word\">    [key <span class=\"hljs-keyword\">in</span> keyof S <span class=\"hljs-keyword\">as</span> Exclude&lt;key, <span class=\"hljs-string\">'id'</span>&gt;]: S[key];\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> TargetGenericTypeAssertionyInstance = TargetGenericTypeAssertiony&lt;SourceInterface&gt;; <span class=\"hljs-comment\">// { name?: string | undefined; }</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18657\">\n                      在示例中的第 2 行，我们将 key 断言为排除 'id'\n                      以外的联合类型，所以第 4 行实例得到的类型是 { name?:\n                      string | undefined; }。\n                    </p>\n                    <p data-nodeid=\"18658\">\n                      以上就是自定义工具类型所需要的物料。将物料与官方内置工具类型结合起来，我们就可以愉快地造轮子了。\n                    </p>\n                    <h3 data-nodeid=\"18659\">造轮子</h3>\n                    <p data-nodeid=\"18660\">\n                      其实，在前面的示例中，我们已经实现了例如\n                      isAssertable、isSubTyping\n                      等自定义工具类型，接下来再介绍几个第三方自定义工具和类型的实现。\n                    </p>\n                    <h4 data-nodeid=\"18661\">Exclude</h4>\n                    <p data-nodeid=\"18662\">\n                      我们再来复习一下 14 讲中介绍的官方自带工具类型\n                      Exclude&lt;T, U&gt;，它用来排除入参 T 内是入参 U\n                      子类型的成员类型，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ExcludeSpecifiedNumber = Exclude&lt;<span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>&gt;; <span class=\"hljs-comment\">// 2</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ExcludeSpecifiedString = Exclude&lt;<span class=\"hljs-string\">'id'</span> | <span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'id'</span>&gt;; <span class=\"hljs-comment\">// 'name</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ExcludeSpecifiedBoolean = Exclude&lt;<span class=\"hljs-built_in\">boolean</span>, <span class=\"hljs-literal\">true</span>&gt;; <span class=\"hljs-comment\">// false</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18664\">\n                      在示例中的第 1~3 行，排除指定成员类型 1、'id'、true\n                      之后得到的类型是 2、'name'、false。\n                    </p>\n                    <p data-nodeid=\"18665\">\n                      我们可以在 VS Code 中使用快捷键 Ctrl/Command + 点击\n                      Exclude 查看它在 node_modules/typescript/lib/lib.es5.d.ts\n                      中的定义，代码实现如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> Exclude&lt;T, U&gt; = T <span class=\"hljs-keyword\">extends</span> U ? never : T;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18667\">\n                      这里明显利用了分配条件类型的特性，所以入参 T\n                      会被拆解为成员类型。如果成员类型是入参 U 的子类型，则返回\n                      never，否则返回成员类型。\n                    </p>\n                    <p data-nodeid=\"18668\">\n                      当入参分别是联合类型 1 | 2 与字面量类型\n                      1，因为联合类型被拆解后的成员 1 是 1 的子类型，而成员 2\n                      不是 1 的子类型，所以返回的是联合类型 never | 2。由于\n                      never 是 2 的子类型，最终类型缩减后得到的就是 2。\n                    </p>\n                    <p data-nodeid=\"18669\">\n                      接下来我们开始介绍一个自定义工具类型\n                      ReturnTypeOfResolved<f>。</f>\n                    </p>\n                    <h4 data-nodeid=\"18670\">ReturnTypeOfResolved</h4>\n                    <p data-nodeid=\"18671\">\n                      ReturnTypeOfResolved 和官方 ReturnType 的区别：如果入参 F\n                      的返回类型是泛型 Promise 的实例，则返回 Promise\n                      接收的入参。\n                    </p>\n                    <p data-nodeid=\"18672\">\n                      我们可以借鉴 ReturnType 的定义实现 ReturnTypeOfResolved<f\n                        >，如下示例：</f\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-comment\">// type ReturnType&lt;T extends (...args: any) =&gt; any&gt; = T extends (...args: any) =&gt; infer R ? R : any;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ReturnTypeOfResolved&lt;F <span class=\"hljs-keyword\">extends</span> (...args: <span class=\"hljs-built_in\">any</span>) =&gt; <span class=\"hljs-built_in\">any</span>&gt; = F <span class=\"hljs-keyword\">extends</span> (...args: <span class=\"hljs-built_in\">any</span>[]) =&gt; <span class=\"hljs-built_in\">Promise</span>&lt;infer R&gt; ? R : ReturnType&lt;F&gt;;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isNumber = ReturnTypeOfResolved&lt;<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">number</span>&gt;; <span class=\"hljs-comment\">// number</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> isString = ReturnTypeOfResolved&lt;<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">Promise</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;&gt;; <span class=\"hljs-comment\">// string</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18674\">\n                      示例中第 1 行注释的代码是官方工具类型 ReturnType\n                      的实现，第 2 行我们自定义了一个泛型\n                      ReturnTypeOfResolved，并约束了入参 F\n                      必须是函数类型。当入参 F 的返回值是 Promise\n                      类型，通过条件类型，我们推断 infer 获取了 Promise\n                      入参类型，所以第 3 行返回的是入参函数返回值类型 number，第\n                      4 行返回的是入参函数返回 Promise 入参类型 string。\n                    </p>\n                    <h4 data-nodeid=\"18675\">Merge</h4>\n                    <p data-nodeid=\"18676\">\n                      接下来我们再基于映射类型将类型入参 A 和 B\n                      合并为一个类型的泛型 Merge&lt;A, B&gt;，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> Merge&lt;A, B&gt; = {\n</div></li><li><div class=\"code-word\">    [key <span class=\"hljs-keyword\">in</span> keyof A | keyof B]: key <span class=\"hljs-keyword\">extends</span> keyof A\n</div></li><li><div class=\"code-word\">      ? key <span class=\"hljs-keyword\">extends</span> keyof B\n</div></li><li><div class=\"code-word\">        ? A[key] | B[key]\n</div></li><li><div class=\"code-word\">        : A[key]\n</div></li><li><div class=\"code-word\">      : key <span class=\"hljs-keyword\">extends</span> keyof B\n</div></li><li><div class=\"code-word\">      ? B[key]\n</div></li><li><div class=\"code-word\">      : never;\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> Merged = Merge&lt;{ id: <span class=\"hljs-built_in\">number</span>; name: <span class=\"hljs-built_in\">string</span> }, { id: <span class=\"hljs-built_in\">string</span>; age: <span class=\"hljs-built_in\">number</span> }&gt;;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18678\">\n                      在第 2 行，我们限定了返回类型属性 key 为入参 A、B\n                      属性的联合类型。当 key 为 A、B\n                      的同名属性，合并后的属性类型为联合类型 A[key] | B[key]（第\n                      2~4 行）；当 key 为 A 或者 B 的属性，合并后的属性类型为\n                      A[key] 或者 B[key]（第 5~7 行）。\n                    </p>\n                    <p data-nodeid=\"18679\">\n                      最后，我们在第 10 行使用了 Merge\n                      合并两个接口类型，从而得到了 { id: number | string; name:\n                      string; age: number }。\n                    </p>\n                    <h4 data-nodeid=\"18680\">Equal</h4>\n                    <p data-nodeid=\"18681\">\n                      我们再来实现一个自定义工具类型 Equal&lt;S,\n                      T&gt;，它可以用来判断入参 S 和 T\n                      是否是相同的类型。如果相同，则返回布尔字面量类型\n                      true，否则返回 false。\n                    </p>\n                    <p data-nodeid=\"18682\">\n                      此时，我们很容易想到，如果 S 是 T 的子类型且 T 也是 S\n                      的子类型，则说明 S 和 T 是相同的类型，所以 Equal\n                      的实现似乎是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> EqualV1&lt;S, T&gt; = S <span class=\"hljs-keyword\">extends</span> T ? T <span class=\"hljs-keyword\">extends</span> S ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span> : <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> ExampleV11 = EqualV1&lt;<span class=\"hljs-number\">1</span> | <span class=\"hljs-built_in\">number</span> &amp; {}, <span class=\"hljs-built_in\">number</span>&gt;; <span class=\"hljs-comment\">// true but boolean</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">type</span> ExampleV12 = EqualV1&lt;never, never&gt;; <span class=\"hljs-comment\">// true but never</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18684\">\n                      在示例中的第 1 行，我们实现了泛型 EqualV1；第 2\n                      行中的第一个入参是联合类型，因为分配条件类型的设定，所以第一个类型入参被拆解，最终返回类型\n                      boolean（实际上是联合类型 true | false）。同样，在第 3\n                      行中，当入参是 never，则返回类型 never。因此，EqualV1\n                      并不符合我们的预期。\n                    </p>\n                    <p data-nodeid=\"18685\">\n                      **此时，我们需要使用 [] 解除条件分配类型和 never\n                      “陷阱”，**确保自定义泛型仅返回 true 或者\n                      false，所以前面示例的改良版本 EqualV2 如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> EqualV2&lt;S, T&gt; = [S] <span class=\"hljs-keyword\">extends</span> [T] ? [T] <span class=\"hljs-keyword\">extends</span> [S] ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span> : <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ExampleV21 = EqualV2&lt;<span class=\"hljs-number\">1</span> | <span class=\"hljs-built_in\">number</span> &amp; {}, <span class=\"hljs-built_in\">number</span>&gt;; <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ExampleV22 = EqualV2&lt;never, never&gt;; <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ExampleV23 = EqualV2&lt;<span class=\"hljs-built_in\">any</span>, <span class=\"hljs-built_in\">number</span>&gt;; <span class=\"hljs-comment\">// false but true</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18687\">\n                      在示例中的第 2 行、第 3 行，虽然我们解决了联合类型和 never\n                      的问题，但是还是无法区分万金油类型 any 和其他类型。在第 4\n                      行，当入参是 any 和 number，预期应该返回 false，却返回了\n                      true。\n                    </p>\n                    <p data-nodeid=\"18688\">\n                      这时，我们还需要使用一个可以能识别 any 的改良版 EqualV3\n                      如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> IsAny&lt;T&gt; = <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">extends</span> (<span class=\"hljs-number\">1</span> &amp; T) ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> EqualV3&lt;S, T&gt; = IsAny&lt;S&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">    ? IsAny&lt;T&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">      ? <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">      : <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">    : IsAny&lt;T&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">    ? <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">    : [S] <span class=\"hljs-keyword\">extends</span> [T]\n</div></li><li><div class=\"code-word\">    ? [T] <span class=\"hljs-keyword\">extends</span> [S]\n</div></li><li><div class=\"code-word\">      ? <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">      : <span class=\"hljs-literal\">false</span>\n</div></li><li><div class=\"code-word\">    : <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ExampleV31 = EqualV3&lt;<span class=\"hljs-number\">1</span> | <span class=\"hljs-built_in\">number</span> &amp; {}, <span class=\"hljs-built_in\">number</span>&gt;; <span class=\"hljs-comment\">// true but false got</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ExampleV32 = EqualV3&lt;never, never&gt;; <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ExampleV34 = EqualV3&lt;<span class=\"hljs-built_in\">any</span>, <span class=\"hljs-built_in\">any</span>&gt;; <span class=\"hljs-comment\">// true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ExampleV33 = EqualV3&lt;<span class=\"hljs-built_in\">any</span>, <span class=\"hljs-built_in\">number</span>&gt;; <span class=\"hljs-comment\">// false</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">type</span> ExampleV35 = EqualV3&lt;never, <span class=\"hljs-built_in\">any</span>&gt;; <span class=\"hljs-comment\">// false </span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"18690\">\n                      在示例中的第 1 行，我们定义了可以区分 any 和其他类型的泛型\n                      IsAny，<strong data-nodeid=\"18991\"\n                        >因为只有 any 和 1 交叉得到的类型（any）是 0\n                        的父类型，所以如果入参是 any 则会返回 true，否则返回\n                        false</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"18691\">\n                      在第 2~7 行，我们定义了 EqualV3（首先特殊处理了类型入参 S\n                      和 T 至少有一个是 any 的情况），当 S 和 T 都是 any 才返回\n                      true，否则返回 false。因此，在第 15~17 行，EqualV3\n                      是可以区分 any 和其他类型的。\n                    </p>\n                    <p data-nodeid=\"18692\">\n                      在第 8 ~12 行，我们复用了 EqualV2 的逻辑，并通过 []\n                      解除了条件分配类型，所以第 13~14 行 EqualV3\n                      可以判断出联合类型 1 | number &amp; {} 和 number、never 和\n                      never 是相同的类型。\n                    </p>\n                    <p data-nodeid=\"18693\">\n                      至此，我们造的第一个轮子 Equal（实际上，用来区分 any\n                      类型的泛型 IsAny\n                      也可以算一个轮子）基本可以正确地区分大多数类型了。\n                    </p>\n                    <blockquote data-nodeid=\"18694\">\n                      <p data-nodeid=\"18695\">\n                        插播一道思考题：尝试找一个 ExampleV3\n                        不能正确分区类型的反例，并改良 ExampleV3。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"18696\">小结与预告</h3>\n                    <p data-nodeid=\"18697\">\n                      这一讲我们介绍了很多的知识点和特性，在学习时，你可以结合以上知识点、特性、工具类型，以及官方工具类型源码实现剖析。只有这样，我们才能构造出较为复杂的工具类型。\n                    </p>\n                    <p data-nodeid=\"18698\">\n                      这里插播一道思考题：什么是分配条件类型？欢迎你在留言区进行互动、交流。\n                    </p>\n                    <p data-nodeid=\"18699\">\n                      从 16 讲开始，我们将学习本课程的第三部分 TypeScript\n                      实践的经验和建议，敬请期待。\n                    </p>\n                    <p data-nodeid=\"18700\">\n                      最后，如果你觉得本专栏有价值，欢迎分享给更多好友哦~\n                    </p>\n            "}