{"title":"20 | 指令：指令完整的生命周期是怎样的？","context":"\n                    <p data-nodeid=\"436\" class=\"\">\n                      我们知道 Vue.js 的核心思想之一是数据驱动，数据是 DOM\n                      的映射。在大部分情况下，你是不用操作 DOM\n                      的，但是这并不意味着你不能操作 DOM。\n                    </p>\n                    <p data-nodeid=\"437\">\n                      有些时候，我们希望手动去操作某个元素节点的\n                      DOM，比如当这个元素节点挂载到页面的时候通过操作底层的 DOM\n                      来做一些事情。\n                    </p>\n                    <p data-nodeid=\"438\">\n                      为了支持这个需求，Vue.js提供了指令的功能，它允许我们自定义指令，作用在普通的\n                      DOM 元素上。\n                    </p>\n                    <p data-nodeid=\"439\">\n                      举个聚焦输入框的例子，我们希望在页面加载时，输入框自动获得焦点，我们可以全局注册一个\n                      v-focus 指令：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> Vue from <span class=\"hljs-string\">'vue'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> app = Vue.createApp({})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 注册全局 v-focus 指令</span>\n</div></li><li><div class=\"code-word\">app.directive(<span class=\"hljs-string\">'focus'</span>, {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 挂载的钩子函数</span>\n</div></li><li><div class=\"code-word\">  mounted(el) {\n</div></li><li><div class=\"code-word\">    el.focus()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"441\">\n                      当然，我们也可以在组件内部局部注册：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">directives: {\n</div></li><li><div class=\"code-word\">  focus: {\n</div></li><li><div class=\"code-word\">    mounted(el) {\n</div></li><li><div class=\"code-word\">      el.focus()\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"443\">\n                      然后我们就可以在模板中使用这个指令了：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"516\"\n                        >&lt;input v-focus /&gt;</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"444\">\n                      至此我们就大致了解了指令的功能和用法，那么接下来，我们就从指令的定义、指令的注册和指令的应用三个方面来一起探究它的实现原理。\n                    </p>\n                    <h3 data-nodeid=\"445\">指令的定义</h3>\n                    <p data-nodeid=\"1165\" class=\"\">\n                      指令本质上就是一个 JavaScript\n                      对象，对象上挂着一些钩子函数，我们可以举个例子来说明，比如我定义一个\n                      v-log\n                      指令，这个指令做的事情就是在指令的各个生命周期去输出一些\n                      log 信息：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> logDirective = {\n</div></li><li><div class=\"code-word\">  beforeMount() {\n</div></li><li><div class=\"code-word\">    console.log(<span class=\"hljs-string\">'log directive before mount'</span>)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  mounted() {\n</div></li><li><div class=\"code-word\">     console.log(<span class=\"hljs-string\">'log directive mounted'</span>)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  beforeUpdate() {\n</div></li><li><div class=\"code-word\">    console.log(<span class=\"hljs-string\">'log directive before update'</span>)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  updated() {\n</div></li><li><div class=\"code-word\">    console.log(<span class=\"hljs-string\">'log directive updated'</span>)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  beforeUnmount() {\n</div></li><li><div class=\"code-word\">    console.log(<span class=\"hljs-string\">'log directive beforeUnmount'</span>)\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  unmounted() {\n</div></li><li><div class=\"code-word\">    console.log(<span class=\"hljs-string\">'log directive unmounted'</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"448\">然后你可以在创建应用后注册它：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { createApp } from <span class=\"hljs-string\">'vue'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> App from <span class=\"hljs-string\">'./App'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> app = createApp(App)\n</div></li><li><div class=\"code-word\">app.directive(<span class=\"hljs-string\">'log'</span>, logDirective)\n</div></li><li><div class=\"code-word\">app.mount(<span class=\"hljs-string\">'#app'</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"450\">接着在 App 组件中使用这个指令：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"flag\"</span>&gt;</span>{{ msg }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-else</span> <span class=\"hljs-attr\">v-log</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"text\"</span>/&gt;</span></span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"flag=!flag\"</span>&gt;</span>toggle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    data() {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">flag</span>: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">msg</span>: <span class=\"hljs-string\">'Hello Vue'</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">''</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1457\" class=\"\">\n                      我建议你拷贝上述代码运行这个示例，你会发现，当你点击按钮后，会先执行指令定义的\n                      beforeMount 和 mounted 钩子函数，然后你在 input\n                      输入框中输入一些内容，会执行 beforeUpdate 和 updated\n                      钩子函数，然后你再次点击按钮，会执行 beforeUnmount 和\n                      unmounted 钩子函数。\n                    </p>\n\n                    <p data-nodeid=\"453\">\n                      所以一个指令的定义，无非就是在合适的钩子函数中编写一些相关的处理逻辑。我基于\n                      Vue.js 3.0 写过一个简单图片懒加载的插件\n                      <a\n                        href=\"https://github.com/ustbhuangyi/vue3-lazy\"\n                        data-nodeid=\"527\"\n                        >vue3-lazy</a\n                      >，你也可以去看看它的源码，了解一下一个成熟的指令插件是如何编写的。\n                    </p>\n                    <h3 data-nodeid=\"454\">指令的注册</h3>\n                    <p data-nodeid=\"3209\" class=\"\">\n                      所以当我们编写好指令后，在应用它之前，我们需要先注册它。所谓注册，其实就是把指令的定义保存到相应的地方，未来使用的时候我可以从保存的地方拿到它。\n                    </p>\n\n                    <p data-nodeid=\"456\">\n                      指令的注册和组件一样，可以全局注册，也可以局部注册。我们来分别看一下它们的实现原理。\n                    </p>\n                    <p data-nodeid=\"457\">\n                      首先，我们来了解全局注册的方式，它是通过 app.directive\n                      方法去注册的，比如：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">app.directive(<span class=\"hljs-string\">'focus'</span>, {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 挂载的钩子函数</span>\n</div></li><li><div class=\"code-word\">  mounted(el) {\n</div></li><li><div class=\"code-word\">    el.focus()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"459\">我们来看 directive 方法的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">createApp</span><span class=\"hljs-params\">(rootComponent, rootProps = <span class=\"hljs-keyword\">null</span>)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> context = createAppContext()\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> app = {\n</div></li><li><div class=\"code-word\">    _component: rootComponent,\n</div></li><li><div class=\"code-word\">    _props: rootProps,\n</div></li><li><div class=\"code-word\">    directive(name, directive) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>)) {\n</div></li><li><div class=\"code-word\">        validateDirectiveName(name)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!directive) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 没有第二个参数，则获取对应的指令对象</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> context.directives[name]\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) &amp;&amp; context.directives[name]) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 重复注册的警告</span>\n</div></li><li><div class=\"code-word\">        warn(\\`Directive <span class=\"hljs-string\">\"${name}\"</span> has already been registered in target app.\\`)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      context.directives[name] = directive\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> app\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> app\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"461\">\n                      directive 是 app\n                      对象上的一个方法，它接受两个参数，第一个参数是指令的名称，第二个参数就是指令对象。\n                    </p>\n                    <p data-nodeid=\"462\">\n                      指令全局注册方法的实现非常简单，就是把指令对象注册到 app\n                      对象创建的全局上下文 context.directives 中，并用 name 作为\n                      key。\n                    </p>\n                    <p data-nodeid=\"463\">\n                      这里有几个细节要注意一下，validateDirectiveName\n                      是用来检测指令名是否和内置的指令（如\n                      v-model、v-show）冲突；如果不传第二个参数指令对象，表示这是一次指令的获取；指令重复注册会报警告。\n                    </p>\n                    <p data-nodeid=\"464\">\n                      接下来，我们来了解局部注册的方式，它是直接在组件对象中定义的，比如：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">directives: {\n</div></li><li><div class=\"code-word\">  focus: {\n</div></li><li><div class=\"code-word\">    mounted(el) {\n</div></li><li><div class=\"code-word\">      el.focus()\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"466\">\n                      因此全局注册和局部注册的区别是，一个保存在 appContext\n                      中，一个保存在组件对象的定义中。\n                    </p>\n                    <h2 data-nodeid=\"467\">指令的应用</h2>\n                    <p data-nodeid=\"468\">\n                      接下来，我们重点分析指令的应用过程，我们以 v-focus\n                      指令为例，在组件中使用这个指令：<code\n                        data-backticks=\"1\"\n                        data-nodeid=\"541\"\n                        >&lt;input v-focus /&gt;</code\n                      >。\n                    </p>\n                    <p data-nodeid=\"469\">\n                      我们先看这个模板编译后生成的 render 函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { resolveDirective as _resolveDirective, createVNode as _createVNode, withDirectives as _withDirectives, openBlock as _openBlock, createBlock as _createBlock } from <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export function <span class=\"hljs-title\">render</span><span class=\"hljs-params\">(_ctx, _cache, $props, $setup, $data, $options)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> _directive_focus = _resolveDirective(<span class=\"hljs-string\">\"focus\"</span>)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> _withDirectives((_openBlock(), _createBlock(<span class=\"hljs-string\">\"input\"</span>, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-keyword\">null</span>, <span class=\"hljs-number\">512</span> <span class=\"hljs-comment\">/* NEED_PATCH */</span>)), [\n</div></li><li><div class=\"code-word\">    [_directive_focus]\n</div></li><li><div class=\"code-word\">  ])\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"5271\" class=\"\">\n                      我们再来看看如果不使用 v-focus，单个 input 编译生成后的\n                      render 函数是怎样的：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">export function <span class=\"hljs-title\">render</span><span class=\"hljs-params\">(_ctx, _cache, $props, $setup, $data, $options)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"input\"</span>))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"6147\" class=\"\">\n                      对比两个编译结果可以看到，区别在于如果元素节点使用指令，那么它编译生成的\n                      vnode 会用 withDirectives 包装一层。\n                    </p>\n\n                    <p data-nodeid=\"7023\" class=\"\">\n                      在分析 withDirectives 函数的实现之前先来看指令的解析函数\n                      resolveDirective，因为前面我们已经了解指令的注册其实就是把定义的指令对象保存下来，那么\n                      resolveDirective\n                      做的事情就是根据指令的名称找到保存的对应指令对象，我们来看一下它的实现：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> DIRECTIVES = <span class=\"hljs-string\">'directives'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">resolveDirective</span><span class=\"hljs-params\">(name)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> resolveAsset(DIRECTIVES, name)\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">resolveAsset</span><span class=\"hljs-params\">(type, name, warnMissing = <span class=\"hljs-keyword\">true</span>)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 获取当前渲染实例</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> instance = currentRenderingInstance || <span class=\"hljs-function\">currentInstance\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(instance)</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> Component = instance.type\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> res =\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 局部注册</span>\n</div></li><li><div class=\"code-word\">      resolve(Component[type], name) ||\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 全局注册</span>\n</div></li><li><div class=\"code-word\">      resolve(instance.appContext[type], name)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) &amp;&amp; warnMissing &amp;&amp; !res) {\n</div></li><li><div class=\"code-word\">      warn(\\`Failed to resolve ${type.slice(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>)}: ${name}\\`)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> res\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>)) {\n</div></li><li><div class=\"code-word\">    warn(\\`resolve${capitalize(type.slice(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>))} \\` +\n</div></li><li><div class=\"code-word\">      \\`<span class=\"hljs-function\">can only be used in <span class=\"hljs-title\">render</span><span class=\"hljs-params\">()</span> or <span class=\"hljs-title\">setup</span><span class=\"hljs-params\">()</span>.\\`)\n</span></div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">function <span class=\"hljs-title\">resolve</span><span class=\"hljs-params\">(registry, name)</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (registry &amp;&amp;\n</div></li><li><div class=\"code-word\">    (registry[name] ||\n</div></li><li><div class=\"code-word\">      registry[camelize(name)] ||\n</div></li><li><div class=\"code-word\">      registry[capitalize(camelize(name))]))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"7607\" class=\"\">\n                      可以看到，resolveDirective 内部调用了 resolveAsset\n                      函数，传入的类型名称为 directives 字符串。\n                    </p>\n\n                    <p data-nodeid=\"477\">\n                      resolveAsset 内部先通过\n                      resolve函数解析局部注册的资源，由于我们传入的是\n                      directives，所以就从组件定义对象上的 directives\n                      属性中查找对应 name 的指令，如果查找不到则通过\n                      instance.appContext，也就是我们前面提到的全局的\n                      appContext，根据其中的 name查找对应的指令。\n                    </p>\n                    <p data-nodeid=\"478\">\n                      所以 resolveDirective\n                      的实现很简单，优先查找组件是否局部注册该指令，如果没有则看是否全局注册该指令，如果还找不到则在非生产环境下报警告，提示用户没有解析到该指令。如果你平时在开发工作中遇到这个警告，那么你很可能就是没有注册这个指令，或者是\n                      name 写得不对。\n                    </p>\n                    <p data-nodeid=\"8483\" class=\"\">\n                      注意，在 resolve 函数实现的过程中，它会先根据 name\n                      匹配，如果失败则把 name\n                      变成驼峰格式继续匹配，还匹配不到则把 name\n                      首字母大写后继续匹配，这么做是为了让用户编写指令名称的时候可以更加灵活，所以需要多判断几步用户可能编写的指令名称的情况。\n                    </p>\n\n                    <p data-nodeid=\"480\">\n                      接下来，我们来分析 withDirectives 的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">withDirectives</span><span class=\"hljs-params\">(vnode, directives)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> internalInstance = <span class=\"hljs-function\">currentRenderingInstance\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(internalInstance === <span class=\"hljs-keyword\">null</span>)</span> {\n</div></li><li><div class=\"code-word\">    (process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) &amp;&amp; warn(\\`withDirectives can only be used inside render functions.\\`)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> vnode\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> instance = internalInstance.proxy\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> bindings = vnode.dirs || (vnode.dirs = [])\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; directives.length; i++) {\n</div></li><li><div class=\"code-word\">    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i]\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (isFunction(dir)) {\n</div></li><li><div class=\"code-word\">      dir = {\n</div></li><li><div class=\"code-word\">        mounted: dir,\n</div></li><li><div class=\"code-word\">        updated: dir\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    bindings.push({\n</div></li><li><div class=\"code-word\">      dir,\n</div></li><li><div class=\"code-word\">      instance,\n</div></li><li><div class=\"code-word\">      value,\n</div></li><li><div class=\"code-word\">      oldValue: <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span>,\n</div></li><li><div class=\"code-word\">      arg,\n</div></li><li><div class=\"code-word\">      modifiers\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> vnode\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"482\">\n                      withDirectives 函数第一个参数是\n                      vnode，第二个参数是指令构成的数组，因为一个元素节点上是可以应用多个指令的。\n                    </p>\n                    <p data-nodeid=\"483\">\n                      withDirectives 其实就是给 vnode 添加了一个 dirs\n                      属性，属性的值就是这个元素节点上的所有指令构成的对象数组。它通过对\n                      directives 的遍历，拿到每一个指令对象以及指令对应的值\n                      value、参数 arg、修饰符 modifiers 等，然后构造成一个\n                      binding 对象，这个对象还绑定了组件的实例 instance。\n                    </p>\n                    <p data-nodeid=\"484\">\n                      这么做的目的是在元素的生命周期中知道运行哪些指令相关的钩子函数，以及在运行这些钩子函数的时候，还可以往钩子函数中传递一些指令相关的参数。\n                    </p>\n                    <p data-nodeid=\"485\">\n                      那么，接下来我们就来看在元素的生命周期中是如何运行这些钩子函数的。\n                    </p>\n                    <p data-nodeid=\"12017\" class=\"\">\n                      首先，我们来看元素挂载时候会执行哪些指令的钩子函数。通过前面章节的学习我们了解到，一个元素的挂载是通过执行\n                      mountElement 函数完成的，我们再来回顾一下它的实现：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) =&gt; {\n</div></li><li><div class=\"code-word\">  let el\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { type, props, shapeFlag, dirs } = vnode\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建 DOM 元素节点</span>\n</div></li><li><div class=\"code-word\">  el = vnode.el = hostCreateElement(vnode.type, isSVG, props &amp;&amp; props.is)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (props) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理 props，比如 class、style、event 等属性</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* TEXT_CHILDREN */</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理子节点是纯文本的情况</span>\n</div></li><li><div class=\"code-word\">    hostSetElementText(el, vnode.children)\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* ARRAY_CHILDREN */</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 处理子节点是数组的情况，挂载子节点</span>\n</div></li><li><div class=\"code-word\">    mountChildren(vnode.children, el, <span class=\"hljs-keyword\">null</span>, parentComponent, parentSuspense, isSVG &amp;&amp; type !== <span class=\"hljs-string\">'foreignObject'</span>, optimized || !!vnode.dynamicChildren)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (dirs) {\n</div></li><li><div class=\"code-word\">    invokeDirectiveHook(vnode, <span class=\"hljs-keyword\">null</span>, parentComponent, <span class=\"hljs-string\">'beforeMount'</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 把创建的 DOM 元素节点挂载到 container 上</span>\n</div></li><li><div class=\"code-word\">  hostInsert(el, container, anchor)\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (dirs) {\n</div></li><li><div class=\"code-word\">    queuePostRenderEffect(()=&gt;{ \n</div></li><li><div class=\"code-word\">      invokeDirectiveHook(vnode, <span class=\"hljs-keyword\">null</span>, parentComponent, <span class=\"hljs-string\">'mounted'</span>)\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"488\">\n                      这一次，我们添加了元素指令调用的相关代码，可以直观地看到，在元素插入到容器之前会执行指令的\n                      beforeMount 钩子函数，在插入元素之后，会通过\n                      queuePostRenderEffect 的方式执行指令的 mounted 钩子函数。\n                    </p>\n                    <p data-nodeid=\"15551\" class=\"\">\n                      钩子函数的执行，是通过调用 invokeDirectiveHook\n                      方法完成的，我们来看它的实现：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">invokeDirectiveHook</span><span class=\"hljs-params\">(vnode, prevVNode, instance, name)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> bindings = vnode.dirs\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> oldBindings = prevVNode &amp;&amp; prevVNode.<span class=\"hljs-function\">dirs\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">for</span> <span class=\"hljs-params\">(let i = <span class=\"hljs-number\">0</span>; i &lt; bindings.length; i++)</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> binding = bindings[i]\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (oldBindings) {\n</div></li><li><div class=\"code-word\">      binding.oldValue = oldBindings[i].value\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> hook = binding.dir[name]\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (hook) {\n</div></li><li><div class=\"code-word\">      callWithAsyncErrorHandling(hook, instance, <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* DIRECTIVE_HOOK */</span>, [\n</div></li><li><div class=\"code-word\">        vnode.el,\n</div></li><li><div class=\"code-word\">        binding,\n</div></li><li><div class=\"code-word\">        vnode,\n</div></li><li><div class=\"code-word\">        prevVNode\n</div></li><li><div class=\"code-word\">      ])\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"491\">\n                      invokeDirectiveHook\n                      函数有四个参数，第一个和第二个参数分别代表新旧\n                      vnode，第三个参数是组件实例 instance，第四个参数是钩子名称\n                      name。\n                    </p>\n                    <p data-nodeid=\"492\">\n                      invokeDirectiveHook 的实现很简单，通过遍历 vnode.dirs\n                      数组，找到每一个指令对应的 binding 对象，然后从 binding\n                      对象中根据 name\n                      找到指令定义的对应的钩子函数，如果定义了这个钩子函数则执行它，并且传入一些响应的参数，包括元素的\n                      DOM 节点 el，binding 对象，新旧\n                      vnode，这就是我们在执行指令钩子函数的时候，可以访问到这些参数的原因。\n                    </p>\n                    <p data-nodeid=\"493\">\n                      另外我们注意到，mounted 钩子函数会用 queuePostRenderEffect\n                      包一层执行，这么做和组件的初始化过程执行 mounted\n                      钩子函数一样，在整个应用 render 完毕后，同步执行\n                      flushPostFlushCbs 的时候执行元素指令的 mounted 钩子函数。\n                    </p>\n                    <p data-nodeid=\"494\">\n                      接下来，我们来看元素更新时候会执行哪些指令的钩子函数。通过前面章节的学习我们了解到，一个元素的更新是通过执行\n                      patchElement 函数，我们再来回顾一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, optimized) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> el = (n2.el = n1.el)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> oldProps = (n1 &amp;&amp; n1.props) || EMPTY_OBJ\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> newProps = n2.props || EMPTY_OBJ\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { dirs } = n2\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 更新 props</span>\n</div></li><li><div class=\"code-word\">  patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> areChildrenSVG = isSVG &amp;&amp; n2.type !== <span class=\"hljs-string\">'foreignObject'</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (dirs) {\n</div></li><li><div class=\"code-word\">    invokeDirectiveHook(n2, n1, parentComponent, <span class=\"hljs-string\">'beforeUpdate'</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 更新子节点</span>\n</div></li><li><div class=\"code-word\">  patchChildren(n1, n2, el, <span class=\"hljs-keyword\">null</span>, parentComponent, parentSuspense, areChildrenSVG)\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (dirs) {\n</div></li><li><div class=\"code-word\">    queuePostRenderEffect(()=&gt;{\n</div></li><li><div class=\"code-word\">      invokeDirectiveHook(vnode, <span class=\"hljs-keyword\">null</span>, parentComponent, <span class=\"hljs-string\">'updated'</span>)\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"496\">\n                      这一次，我们添加了元素指令调用的相关代码，可以直观地看到，在更新子节点之前会执行指令的\n                      beforeUpdate 钩子函数，在更新完子节点之后，会通过\n                      queuePostRenderEffect 的方式执行指令的 updated 钩子函数。\n                    </p>\n                    <p data-nodeid=\"497\">\n                      最后，我们来看元素卸载时候会执行哪些指令的钩子函数。通过前面章节的学习我们了解到，一个元素的卸载是通过执行\n                      unmount 函数，我们再来回顾一下它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> unmount = (vnode, parentComponent, parentSuspense, doRemove = <span class=\"hljs-keyword\">false</span>) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { type, props, children, dynamicChildren, shapeFlag, patchFlag, dirs } = <span class=\"hljs-function\">vnode\n</span></div></li><li><div class=\"code-word\">  let vnodeHook\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">((vnodeHook = props &amp;&amp; props.onVnodeBeforeUnmount)</span>) {\n</div></li><li><div class=\"code-word\">    invokeVNodeHook(vnodeHook, parentComponent, vnode)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> shouldInvokeDirs = shapeFlag &amp; <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* ELEMENT */</span> &amp;&amp; <span class=\"hljs-function\">dirs\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(shapeFlag &amp; <span class=\"hljs-number\">6</span> <span class=\"hljs-comment\">/* COMPONENT */</span>)</span> {\n</div></li><li><div class=\"code-word\">    unmountComponent(vnode.component, parentSuspense, doRemove)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">128</span> <span class=\"hljs-comment\">/* SUSPENSE */</span>) {\n</div></li><li><div class=\"code-word\">      vnode.suspense.unmount(parentSuspense, doRemove)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (shouldInvokeDirs) {\n</div></li><li><div class=\"code-word\">      invokeDirectiveHook(vnode, <span class=\"hljs-keyword\">null</span>, parentComponent, <span class=\"hljs-string\">'beforeUnmount'</span>)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 卸载子节点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (dynamicChildren &amp;&amp;\n</div></li><li><div class=\"code-word\">      (type !== Fragment ||\n</div></li><li><div class=\"code-word\">        (patchFlag &gt; <span class=\"hljs-number\">0</span> &amp;&amp; patchFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* STABLE_FRAGMENT */</span>))) {\n</div></li><li><div class=\"code-word\">      unmountChildren(dynamicChildren, parentComponent, parentSuspense)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">16</span> <span class=\"hljs-comment\">/* ARRAY_CHILDREN */</span>) {\n</div></li><li><div class=\"code-word\">      unmountChildren(children, parentComponent, parentSuspense)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (shapeFlag &amp; <span class=\"hljs-number\">64</span> <span class=\"hljs-comment\">/* TELEPORT */</span>) {\n</div></li><li><div class=\"code-word\">      vnode.type.remove(vnode, internals)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 移除 DOM 节点</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (doRemove) {\n</div></li><li><div class=\"code-word\">      remove(vnode)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> ((vnodeHook = props &amp;&amp; props.onVnodeUnmounted) || shouldInvokeDirs) {\n</div></li><li><div class=\"code-word\">    queuePostRenderEffect(() =&gt; {\n</div></li><li><div class=\"code-word\">      vnodeHook &amp;&amp; invokeVNodeHook(vnodeHook, parentComponent, vnode)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (shouldInvokeDirs) {\n</div></li><li><div class=\"code-word\">        invokeDirectiveHook(vnode, <span class=\"hljs-keyword\">null</span>, parentComponent, <span class=\"hljs-string\">'unmounted'</span>)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }, parentSuspense)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"499\">\n                      unmount\n                      方法的主要思路就是用递归的方式去遍历删除自身节点和子节点。\n                    </p>\n                    <p data-nodeid=\"500\">\n                      可以看到，在移除元素的子节点之前会执行指令的 beforeUnmount\n                      钩子函数，在移除子节点和当前节点之后，会通过\n                      queuePostRenderEffect 的方式执行指令的 unmounted\n                      钩子函数。\n                    </p>\n                    <h3 data-nodeid=\"501\">总结</h3>\n                    <p data-nodeid=\"502\">\n                      好的，到这里我们这一节的学习也要结束啦，通过这节课的学习，你应该了解指令是如何定义、如何注册，以及如何应用的。指令无非就是给我们提供了在一个元素的生命周期中注入代码的途径，它的本身实现是很简单的。\n                    </p>\n                    <p data-nodeid=\"503\">\n                      最后，给你留一道思考题目，请实现一个 v-uid\n                      指令，实现创建唯一的元素 id，使用方式如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;div v-uid=<span class=\"hljs-string\">\"foo\"</span>&gt;&lt;/div&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-uid</span>=<span class=\"hljs-string\">\"foo\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"505\">最终会在页面上生成的 HTML 如下：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;div id=<span class=\"hljs-string\">\"foo-0\"</span>&gt;&lt;/div&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"foo-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"507\">\n                      你有什么好的思路吗？欢迎你在留言区与我分享。\n                    </p>\n                    <blockquote data-nodeid=\"508\">\n                      <p data-nodeid=\"509\" class=\"\">\n                        本节课的相关代码在源代码中的位置如下：<br />\n                        packages/runtime-core/src/directives.ts<br />\n                        packages/runtime-core/src/apiCreateApp.ts<br />\n                        packages/runtime-core/src/helpers/resolveAssets.ts<br />\n                        packages/runtime-core/src/renderer.ts\n                      </p>\n                    </blockquote>\n            "}