{"title":"18 | 手把手教你使用 TypeScript 开发 Node.js 应用","context":"\n                    <p data-nodeid=\"17551\">\n                      在前面的课程中，我们学习了 TypeScript\n                      的常见配置、错误及相关实践。从这一讲开始，我们将以项目级实践为例，一起学习\n                      TypeScript 在 Node.js、Web 端开发的经验。\n                    </p>\n                    <blockquote data-nodeid=\"17552\">\n                      <p data-nodeid=\"17553\">\n                        学习建议：请按照课程中的操作步骤，实践一个完整的开发流程。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"17554\">\n                      在实际业务中，经常需要使用 Node.js\n                      的场景包括重量级后端应用以及各种 CLI\n                      模块。因此，这一讲我们将引入 TypeScript\n                      开发一个可以指定端口、文件目录、缓存设置等参数的 HTTP\n                      静态文件服务 http-serve CLI NPM 模块。\n                    </p>\n                    <h3 data-nodeid=\"17555\">开发 NPM 模块</h3>\n                    <p data-nodeid=\"17556\">\n                      在开发阶段，我们使用 ts-node 直接运行 TypeScript\n                      源码就行。构建时，我们使用官方转译工具 tsc 将 TypeScript\n                      源码转译为 JavaScript，并使用 TypeScript + Jest\n                      做单元测试。\n                    </p>\n                    <p data-nodeid=\"17557\">\n                      下面我们先看看如何初始化 NPM 模块。\n                    </p>\n                    <h4 data-nodeid=\"17558\">初始化模块</h4>\n                    <p data-nodeid=\"17559\">\n                      首先，我们创建一个 http-serve 目录，然后在 VS Code IDE\n                      中打开目录，再使用“ctrl + \\`”快捷键打开 IDE\n                      内置命令行工具，并执行“npm init”命令初始化 NPM 模块。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\">npm init\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17561\">\n                      因为我们编写的仅仅是一个示例性项目，所以在初始化过程中我们只需要使用默认的模块设置一直回车确认就可以。执行完命令后，NPM\n                      会在当前目录下自动创建一个 package.json。\n                    </p>\n                    <p data-nodeid=\"17562\">\n                      接下来需要划分项目结构，我们可以通过命令行工具或者 IDE\n                      创建 src 目录用来存放所有的 TypeScript 源码。\n                    </p>\n                    <p data-nodeid=\"17563\">\n                      TypeScript 转译为 JavaScript 后，lib\n                      目录一般不需要手动创建，因为转译工具会自动创建，此时我们只需要修改\n                      tsconfig.json 中相应的配置即可。\n                    </p>\n                    <p data-nodeid=\"23178\" class=\"\">\n                      此外，我们还需要按照如下命令手动创建单元测试文件目录\n                      __tests__。\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">mkdir src; <span class=\"hljs-comment\">// 创建放 TypeScript 源码的目录</span>\n</div></li><li><div class=\"code-word\">touch src/cli.ts <span class=\"hljs-comment\">// CLI 命令入口文件</span>\n</div></li><li><div class=\"code-word\">touch src/http-serve.ts <span class=\"hljs-comment\">// CLI 命令入口文件</span>\n</div></li><li><div class=\"code-word\">mkdir lib; <span class=\"hljs-comment\">// 转译工具自动创建放 JavaScript 代码的目录</span>\n</div></li><li><div class=\"code-word\">mkdir __tests__; <span class=\"hljs-comment\">// 单元测试文件目录</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17566\">\n                      这里是 TypeScript\n                      开发模块的一个经典目录结构，极力推荐你使用。\n                    </p>\n                    <p data-nodeid=\"17567\">\n                      接下来我们可以按照如下命令先行安装项目需要的基本依赖。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"shell\"><ol><li><div class=\"code-word\">npm install typescript -D;\n</div></li><li><div class=\"code-word\">npm install ts-node -D;\n</div></li><li><div class=\"code-word\">npm install jest@24 -D;\n</div></li><li><div class=\"code-word\">npm install ts-jest@24 -D;\n</div></li><li><div class=\"code-word\">npm install @types/jest -D;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17569\">\n                      在上述命令中，TypeScript、ts-node、Jest、Jest\n                      类型声明是作为开发依赖 devDependencies 安装的。\n                    </p>\n                    <p data-nodeid=\"17570\">\n                      安装完依赖后，我们需要把模块的 main/bin\n                      等参数、start/build/test 等命令写入 package.json\n                      中，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">  \"bin\": \"lib/bin.js\",\n</div></li><li><div class=\"code-word\">  \"main\": \"lib/http-serve.js\",\n</div></li><li><div class=\"code-word\">  \"files\": [\"lib\"],\n</div></li><li><div class=\"code-word\">  \"scripts\": {\n</div></li><li><div class=\"code-word\">    \"build\": \"tsc -p tsconfig.prod.json\",\n</div></li><li><div class=\"code-word\">    \"start\": \"ts-node src/cli.ts\",\n</div></li><li><div class=\"code-word\">    \"test\": \"jest --all\"\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17572\">\n                      在上述示例第 3 行 bin 参数指定了 CLI\n                      命令可执行文件指向的是转译后的 lib/cli.js；第 4 行 main\n                      参数则指定了模块的主文件是转译后的 lib/http-serve.js；第 5\n                      行指定了发布到 NPM 时包含的文件列表；第 7 行 build\n                      命令则指定了使用 tsc 命令可以基于 tsconfig.prod.json\n                      配置来转译 TypeScript 源码；第 8 行 start 命令则指定了使用\n                      ts-node 可以直接运行 TypeScript 源码；第 9 行 test\n                      命令则表示使用 Jest 可以执行所有单测。\n                    </p>\n                    <p data-nodeid=\"17573\">\n                      如此配置之后，我们就可以通过以下命令进行构建、开发、单测了。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm start; <span class=\"hljs-comment\">// 开发</span>\n</div></li><li><div class=\"code-word\">npm run build; <span class=\"hljs-comment\">// 构建</span>\n</div></li><li><div class=\"code-word\">npm test; <span class=\"hljs-comment\">// 单测</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17575\">\n                      接下来我们需要初始化 tsconfig 配置。\n                    </p>\n                    <h4 data-nodeid=\"17576\">初始化 tsconfig</h4>\n                    <p data-nodeid=\"17577\">\n                      如果我们已经安装了全局的\n                      TypeScript，那么就可以直接使用全局的 tsc 命令初始化。\n                    </p>\n                    <p data-nodeid=\"17578\">\n                      当然，我们也可以直接使用当前模块目录下安装的 TypeScript\n                      来初始化 tsconfig 配置。这里我推荐全局安装\n                      npx，可以更方便地调用安装在当前目录下的各种 CLI\n                      工具，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">tsc --init; <span class=\"hljs-comment\">// 使用全局</span>\n</div></li><li><div class=\"code-word\">npm install npx -g; <span class=\"hljs-comment\">// 安装 npx</span>\n</div></li><li><div class=\"code-word\">npx tsc --init; <span class=\"hljs-comment\">// 或者使用 npx 调用当前目录下 node_modules 目录里安装的 tsc 版本</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17580\">\n                      以上命令会在当前目录下创建一个 tsconfig.json 文件用来定制\n                      TypeScript 的行为。\n                    </p>\n                    <p data-nodeid=\"17581\">\n                      一般来说，我们需要将 declaration、sourceMap\n                      这两个配置设置为\n                      true，这样构建时就会生成类型声明和源码映射文件。此时，即便模块在转译之后被其他项目引用，也能对\n                      TypeScript 类型化和运行环境源码提供调试支持。\n                    </p>\n                    <p data-nodeid=\"17582\">\n                      此外，一般我们会把 target 参数设置为 es5，module\n                      参数设置为\n                      commonjs，这样转译后模块的代码和格式就可以兼容较低版本的\n                      Node.js 了。\n                    </p>\n                    <p data-nodeid=\"17583\">\n                      然后，我们需要把 tsc 转译代码的目标目录 outDir 指定为\n                      \"./lib\"。\n                    </p>\n                    <p data-nodeid=\"17584\">\n                      除了构建行为相关的配置之外，我们还需要按照如下命令将\n                      esModuleInterop 配置为 true，以便在类型检测层面兼容\n                      CommonJS 和 ES 模块的引用关系，最终适用于 Node.js 开发的\n                      tsconfig。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"es5\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"module\"</span>: <span class=\"hljs-string\">\"commonjs\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"declaration\"</span>: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"sourceMap\"</span>: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"outDir\"</span>: <span class=\"hljs-string\">\"./lib\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"rootDir\"</span>: <span class=\"hljs-string\">\"./src\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"strict\"</span>: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"esModuleInterop\"</span>: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"skipLibCheck\"</span>: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"forceConsistentCasingInFileNames\"</span>: <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"24367\" class=\"\">\n                      下面我们需要手动创建一个 tsconfig.prod.json，告诉 tsc\n                      在转译源码时忽略 __tests__\n                      目录。当然，我们也可以根据实际情况把其他文件、目录添加到\n                      exclude 配置中，如下代码所示：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"extends\"</span>: <span class=\"hljs-string\">\"./tsconfig.json\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"exclude\"</span>: [<span class=\"hljs-string\">\"__tests__\"</span>, <span class=\"hljs-string\">\"lib\"</span>]\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"17588\">\n                      <p data-nodeid=\"17589\">\n                        注意：在实际项目中，我们并不经常使用 tsc --init 初始化\n                        tsconfig。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"17590\">\n                      出于统一和可控性考虑，我们可以将通用的 tsconfig\n                      配置抽离为单独的 NPM 或直接使用第三方封装的配置，再通过\n                      extends 参数进行复用，比如可以安装<a\n                        href=\"https://www.npmjs.com/package/@tsconfig/node10\"\n                        data-nodeid=\"17733\"\n                        >https://www.npmjs.com/package/@tsconfig/node10</a\n                      >等，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm install <span class=\"hljs-meta\">@tsconfig</span>/node10 -D;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17592\">\n                      在当前模块的 tsconfig.json\n                      中，我们只需保留路径相关的配置即可，其他配置可以继承自\n                      node_modules 中安装的 tsconfig 模块，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"extends\"</span>: <span class=\"hljs-string\">\"@tsconfig/node10\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"baseUrl\"</span>: <span class=\"hljs-string\">\".\"</span>,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">\"outDir\"</span>: <span class=\"hljs-string\">\"./lib\"</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}&nbsp;\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"17594\">\n                      <p data-nodeid=\"17595\">\n                        插播一个任务：请将你惯用的 tsconfig\n                        配置抽离为公共可复用的 NPM 模块，然后发布到 NPM\n                        中，并在示例里引入。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"17596\">\n                      接下来，我们需要使用 Node.js 内置的 http 模块和第三方\n                      ecstatic、commander 模块实现 http-serve 静态文件服务器。\n                    </p>\n                    <h4 data-nodeid=\"17597\">接口设计和编码实现</h4>\n                    <p data-nodeid=\"17598\">首先，我们需要安装以下相关依赖。</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\">npm install @types/node <span class=\"hljs-literal\">-D</span>;\n</div></li><li><div class=\"code-word\">npm install commander <span class=\"hljs-literal\">-S</span>;\n</div></li><li><div class=\"code-word\">npm install ecstatic <span class=\"hljs-literal\">-S</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17600\">\n                      以上命令第 1 行会把 Node.js\n                      内置模块类型声明文件作为开发依赖安装，第 2 行安装的是 CLI\n                      需要用到的 commander，第 3\n                      行安装的是用来处理静态文件请求的 ecstatic。\n                    </p>\n                    <p data-nodeid=\"17601\">\n                      不幸的是，ecstatic 并不是一个对 TypeScript\n                      友好的模块，因为它没有内置类型声明文件，也没有第三方贡献的\n                      @types/ecstatic 类型声明模块。因此，<strong\n                        data-nodeid=\"17747\"\n                        >我们需要在项目根目录下新建一个 types.d.ts\n                        用来补齐缺失的类型声明，如下代码所示：</strong\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// types.d.ts</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">module</span> 'ecstatic' {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (options?: {\n</div></li><li><div class=\"code-word\">    root?: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">    baseDir?: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">    autoIndex?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    showDir?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    showDotfiles?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    humanReadable?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    hidePermissions?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    si?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    cache?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">    cors?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    gzip?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    brotli?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    defaultExt?: <span class=\"hljs-string\">'html'</span> | <span class=\"hljs-built_in\">string</span> &amp; {};\n</div></li><li><div class=\"code-word\">    handleError?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    serverHeader?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    contentType?: <span class=\"hljs-string\">'application/octet-stream'</span> | <span class=\"hljs-built_in\">string</span> &amp; {};\n</div></li><li><div class=\"code-word\">    weakEtags?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    weakCompare?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">    handleOptionsMethod?: <span class=\"hljs-built_in\">boolean</span>;\n</div></li><li><div class=\"code-word\">  }) =&gt; <span class=\"hljs-built_in\">any</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17603\">\n                      在上述示例中，我们通过 declare module 补齐了 ecstatic\n                      类型声明，这样在引入 ecstatic 的时候就不会再提示一个\n                      ts(2307) 的错误了。同时，IDE 还能自动补全。\n                    </p>\n                    <p data-nodeid=\"17604\">\n                      很多时候因为类型声明补全的成本较高，所以我们也可以通过一行\n                      “declare module 'ecstatic';”快速绕过 ts(2307) 错误提示。\n                    </p>\n                    <blockquote data-nodeid=\"17605\">\n                      <p data-nodeid=\"17606\">\n                        注意：在业务实践中，如果碰到某个模块缺失类型声明文件，则会提示一个\n                        ts(2307) 的错误，此时我们可以先尝试通过 npm i\n                        @types/模块名 -D\n                        安装可能存在的第三方补齐类型声明。如果找不到，再通过\n                        declare module 手动补齐。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"17607\">\n                      接下来，我们在<strong data-nodeid=\"17760\"\n                        >src/http-serve.ts</strong\n                      >中实现主逻辑。\n                    </p>\n                    <p data-nodeid=\"17608\">\n                      首先，我们约定模块接收的参数及需要对外暴露的接口，如下示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> IHttpServerOptions {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 静态文件目录，默认是当前目录 */</span>\n</div></li><li><div class=\"code-word\">  root?: <span class=\"hljs-built_in\">string</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 缓存时间 */</span>\n</div></li><li><div class=\"code-word\">  cache?: <span class=\"hljs-built_in\">number</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">/** 对外暴露的方法 */</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> IHttpServer {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 启动服务 */</span>\n</div></li><li><div class=\"code-word\">  listen(port: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-built_in\">void</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">/** 关闭服务 */</span>\n</div></li><li><div class=\"code-word\">  close(): <span class=\"hljs-built_in\">void</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17610\">\n                      因为这里仅仅需要支持设置文件目录、缓存时间这两个配置项，所以示例第\n                      1～6 行中我们定义的接口类型 IHttpServerOptions\n                      即可满足需求。然后，在第 9～14\n                      行，我们约定了实例对外暴露接收端口参数的 listen\n                      和没有参数的 close 两个方法。\n                    </p>\n                    <p data-nodeid=\"17611\">\n                      以上定义的接口都可以通过 export\n                      关键字对外导出，并基于接口约定实现主逻辑类\n                      HttpServer，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> HttpServer <span class=\"hljs-keyword\">implements</span> IHttpServer {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">private</span> server: http.Server;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">options: IHttpServerOptions</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> root = options.root || process.cwd();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.server = http.createServer(ecstatic({\n</div></li><li><div class=\"code-word\">      root,\n</div></li><li><div class=\"code-word\">      cache: options.cache === <span class=\"hljs-literal\">undefined</span> ? <span class=\"hljs-number\">3600</span> : options.cache,\n</div></li><li><div class=\"code-word\">      showDir: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">      defaultExt: <span class=\"hljs-string\">'html'</span>,\n</div></li><li><div class=\"code-word\">      gzip: <span class=\"hljs-literal\">true</span>,\n</div></li><li><div class=\"code-word\">      contentType: <span class=\"hljs-string\">'application/octet-stream'</span>,\n</div></li><li><div class=\"code-word\">    }));\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> listen(port: <span class=\"hljs-built_in\">number</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.server.listen(port);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">public</span> close() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.server.close();\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17613\">\n                      在示例中的第 1 行，我们定义了 HttpServer 类，它实现了\n                      IHttpServer 接口约定。在第 15～21 行，我们实现了公共开放的\n                      listen 和 close 方法。在第 2 行，因为 HttpServer 的 server\n                      属性是 http.Server\n                      的实例，并且我们希望它对外不可见，所以被标注为成了 private\n                      属性。\n                    </p>\n                    <p data-nodeid=\"17614\">\n                      在第 3～13 行，HttpServer 类的构造器函数接收了\n                      IHttpServerOptions 接口约定的参数，并调用 Node.js 原生\n                      http 模块创建了 Server 实例，再赋值给 server 属性。\n                    </p>\n                    <p data-nodeid=\"17615\">\n                      最后，为了让 TypeScript 代码可以在 ts-node\n                      中顺利跑起来，我们可以在 src/http-serve.ts\n                      引入模块依赖之前，显式地引入手动补齐的缺失的类型声明文件，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">/// &lt;reference path=\"../types.d.ts\" /&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> http <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'http'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> ecstatic <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ecstatic'</span>;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17617\">\n                      在示例中的第 1 行，我们通过相对路径引入了前面定义的\n                      types.d.ts 类型声明。\n                    </p>\n                    <p data-nodeid=\"17618\">\n                      接下来，我们基于上边实现的 http-serve.ts 和 commander\n                      模块编码实现 src/cli.ts，具体示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { program } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'commander'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> HttpServer, { IHttpServerOptions } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./http-serve'</span>;\n</div></li><li><div class=\"code-word\">program\n</div></li><li><div class=\"code-word\">  .option(<span class=\"hljs-string\">'--cache, &lt;cache&gt;'</span>, <span class=\"hljs-string\">'设置缓存时间，秒数'</span>)\n</div></li><li><div class=\"code-word\">  .option(<span class=\"hljs-string\">'--root, &lt;root&gt;'</span>, <span class=\"hljs-string\">'静态文件目录'</span>)\n</div></li><li><div class=\"code-word\">  .option(<span class=\"hljs-string\">'-p, --port, &lt;port&gt;'</span>, <span class=\"hljs-string\">'监听端口'</span>, <span class=\"hljs-string\">'3000'</span>)\n</div></li><li><div class=\"code-word\">  .action(<span class=\"hljs-function\">(<span class=\"hljs-params\">options: Omit&lt;IHttpServerOptions, 'cache'&gt; &amp; { cache?: <span class=\"hljs-built_in\">string</span>; port: <span class=\"hljs-built_in\">string</span> }</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> { root, cache, port } = options;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-keyword\">new</span> HttpServer({\n</div></li><li><div class=\"code-word\">      root,\n</div></li><li><div class=\"code-word\">      cache: cache &amp;&amp; <span class=\"hljs-built_in\">parseInt</span>(cache)\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">    server.listen(+port);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\\`监听 <span class=\"hljs-subst\">${port}</span>\\`</span>);\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">program.parse(process.argv);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17620\">\n                      在示例中的第 5～7 行，首先我们指定了 CLI\n                      支持的参数（commander\n                      的更多用法可以查看其官方文档）。然后，在第 8 行我们通过\n                      Omit 工具类型剔除了 IHttpServerOptions 接口中的 cache\n                      属性，并重新构造 options 参数的类型。最后，在第 10～14\n                      行我们创建了 HttpServer\n                      的实例，并在指定端口启动了服务侦听。\n                    </p>\n                    <p data-nodeid=\"17621\">\n                      接下来我们可以通过 npm start 直接运行 src/cli.ts 或通过\n                      npm run build 将 TypeScript 代码转译为 JavaScript\n                      代码，并运行 node lib/cli.js\n                      启动静态服务，浏览器访问服务效果图如下：\n                    </p>\n                    <p data-nodeid=\"24960\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/49/B6/CioPOWDcIQOAK0rcAAIAVQXojdE355.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"24963\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"17623\">\n                      在实际的开发过程中，我们肯定会碰到各种错误，不可能那么顺利。<strong\n                        data-nodeid=\"17776\"\n                        >因此，在定位错误时，我们除了可以结合之前介绍的\n                        TypeScript 常见错误等实用技能之外，还可以通过 VS Code\n                        免转译直接调试源码。</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"17624\">\n                      <strong data-nodeid=\"17780\"\n                        >下面我们一起看看如何使用 VS Code 调试源码。</strong\n                      >\n                    </p>\n                    <h4 data-nodeid=\"17625\">使用 VS Code 调试</h4>\n                    <p data-nodeid=\"17626\">\n                      首先，我们需要给当前项目创建一个配置文件，具体操作方法为通过\n                      VS Code 左侧或者顶部菜单 Run 选项添加或在 .vscode\n                      目录中手动添加 launch.json，如图例所示：\n                    </p>\n                    <p data-nodeid=\"25554\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/49/AD/Cgp9HWDcIQqAemuKAAwOfFNd21o140.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"25557\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"17628\">\n                      然后，我们将以下配置添加到 launch.json 文件中。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"0.2.0\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"configurations\"</span>: [\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"node\"</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"request\"</span>: <span class=\"hljs-string\">\"launch\"</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"http-serve/cli\"</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"runtimeArgs\"</span>: [<span class=\"hljs-string\">\"-r\"</span>, <span class=\"hljs-string\">\"ts-node/register\"</span>],\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"args\"</span>: [<span class=\"hljs-string\">\"${workspaceFolder}/src/cli.ts\"</span>]\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  ]\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17630\">\n                      在上述配置中，我们唤起了 node 服务，并通过预载\n                      ts-node/register 模块让 node 可以解析执行 TypeScript\n                      文件（转译过程对使用者完全透明）。\n                    </p>\n                    <p data-nodeid=\"17631\">\n                      此时，我们可以在源文件中添加断点，并点击 Run\n                      运行调试，如图例所示：\n                    </p>\n                    <p data-nodeid=\"26152\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/49/AD/Cgp9HWDcIRKAFCLmAAdLT9Jo0xw822.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"26155\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"17633\">\n                      TypeScript\n                      并不是万能的，虽然它可以帮助我们减少低级错误，但是并不能取代单元测试。因此，我们有必要介绍一个单元测试的内容。\n                    </p>\n                    <h4 data-nodeid=\"17634\">单元测试</h4>\n                    <p data-nodeid=\"17635\">\n                      一个健壮的项目往往离不开充分的单元测试，接下来我们将学习如何使用\n                      TypeScript + Jest 为 http-serve 模块编写单测。\n                    </p>\n                    <p data-nodeid=\"17636\">\n                      在前面的步骤中，我们已经安装了 Jest\n                      相关的依赖，并且配置好了 npm run test\n                      命令，此时可以在项目的根目录下通过如下代码新建一个\n                      jest.config.js 配置。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">collectCoverageFrom</span>: [<span class=\"hljs-string\">'src/**/*.{ts}'</span>],\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">setupFiles</span>: [<span class=\"hljs-string\">'&lt;rootDir&gt;/__tests__/setup.ts'</span>],\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">testMatch</span>: [<span class=\"hljs-string\">'&lt;rootDir&gt;/__tests__/**/?(*.)(spec|test).ts'</span>],\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">testEnvironment</span>: <span class=\"hljs-string\">'node'</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">testURL</span>: <span class=\"hljs-string\">'http://localhost:4444'</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">transform</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'^.+\\\\.ts$'</span>: <span class=\"hljs-string\">'ts-jest'</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">transformIgnorePatterns</span>: [\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'[/\\\\\\\\]node_modules[/\\\\\\\\].+\\\\.(js|jsx|mjs|ts|tsx)$'</span>,\n</div></li><li><div class=\"code-word\">  ],\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">moduleNameMapper</span>: {},\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">moduleFileExtensions</span>: [<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-string\">'ts'</span>],\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">globals</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'ts-jest'</span>: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">tsConfig</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>).join(process.cwd(), <span class=\"hljs-string\">'tsconfig.test.json'</span>),\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"27364\" class=\"\">\n                      在配置文件中的第 3 行，我们指定了 setupFiles（需要手动创建\n                      __tests__/setup.ts）初始化单元测试运行环境、加载 polyfill\n                      模块等。在第 4 行，我们指定了查找单测文件的规则。在第 8\n                      行，我们指定了使用 ts-jest 转译 *.ts 文件。在第 16～18\n                      行，我们配置了 ts-jest 基于项目目录下的 tsconfig.test.json\n                      转译为 TypeScript。\n                    </p>\n\n                    <p data-nodeid=\"17639\">\n                      一般来说，运行 Node.js 端的模块转译单测代码使用的\n                      tsconfig.test.json 配置和转译生成代码使用的\n                      tsconfig.prod.json 配置完全一样，因此我们可以直接将\n                      tsconfig.prod.json 复制到 tsconfig.test.json。\n                    </p>\n                    <blockquote data-nodeid=\"17640\">\n                      <p data-nodeid=\"17641\">\n                        注意：以上配置文件依赖 jest@24、ts-jest@24 版本。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"28579\" class=\"te-preview-highlight\">\n                      配置好 Jest 后，我们就可以把 http-serve 模块单元测试编入\\\n                      <em data-nodeid=\"28588\">_tests</em>_/http-serve.test.ts\n                      中，具体示例如下（更多的 Jest 使用说明，请查看官方文档）：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> http <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'http'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> HttpServer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../src/http-serve\"</span>;\n</div></li><li><div class=\"code-word\">describe(<span class=\"hljs-string\">'http-serve'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> server: HttpServer;\n</div></li><li><div class=\"code-word\">  beforeEach(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    server = <span class=\"hljs-keyword\">new</span> HttpServer({});\n</div></li><li><div class=\"code-word\">    server.listen(<span class=\"hljs-number\">8099</span>);\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">  afterEach(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    server.close();\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">  it(<span class=\"hljs-string\">'should listen port'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">done</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">    http.request({\n</div></li><li><div class=\"code-word\">      method: <span class=\"hljs-string\">'GET'</span>,\n</div></li><li><div class=\"code-word\">      hostname: <span class=\"hljs-string\">'localhost'</span>,\n</div></li><li><div class=\"code-word\">      port: <span class=\"hljs-number\">8099</span>,\n</div></li><li><div class=\"code-word\">    }).end(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">      done();\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">});\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17644\">\n                      在示例中的第 6～9 行，我们定义了每个 it\n                      单测开始之前，需要先创建一个 HttpServer 实例，并监听 8099\n                      端口。在第 10～12 行，我们定义了每个 it\n                      单测结束后，需要关闭 HttpServer 实例。在第 13～21\n                      行，我们定义了一个单测，它可以通过发起 HTTP 请求来验证\n                      http-serve 模块功能是否符合预期。\n                    </p>\n                    <blockquote data-nodeid=\"17645\">\n                      <p data-nodeid=\"17646\">\n                        <strong data-nodeid=\"17813\">注意</strong\n                        >：源码中使用的路径别名，比如用“@/module”代替“src/sub-directory/module”，这样可以缩短引用路径，这就需要我们调整相应的配置。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"17647\">\n                      下面我们讲解一下啊如何处理路径别名。\n                    </p>\n                    <h4 data-nodeid=\"17648\">处理路径别名</h4>\n                    <p data-nodeid=\"17649\">\n                      首先，我们需要在 tsconfig.json 中添加如下所示 paths\n                      配置，这样 TypeScript 就可以解析别名模块。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  \"compilerOptions\": {\n</div></li><li><div class=\"code-word\">    ...,\n</div></li><li><div class=\"code-word\">    \"baseUrl\": \"./\",\n</div></li><li><div class=\"code-word\">    \"paths\": {\n</div></li><li><div class=\"code-word\">      \"@/*\": [\"src/sub-directory/*\"]\n</div></li><li><div class=\"code-word\">    },   \n</div></li><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <blockquote data-nodeid=\"17651\">\n                      <p data-nodeid=\"17652\">\n                        注意：需要显式设置\n                        baseUrl，不然会提示一个无法解析相对路径的错误。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"17653\">\n                      接下来我们在 jest.config.js\n                      中通过如下代码配置相应的规则，告知 Jest 如何解析别名模块。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-built_in\">module</span>.exports = {\n</div></li><li><div class=\"code-word\">  ...,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-attr\">moduleNameMapper</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">'^@/(.*)$'</span>: <span class=\"hljs-string\">'&lt;rootDir&gt;/src/sub-directory/$1'</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17655\">\n                      因为 tsc\n                      在转译代码的时候不会把别名替换成真实的路径，所以我们引入额外的工具处理别名。此时我们可以按照如下命令安装\n                      tsc-alias 和 tsconfig-paths 分别供 tsc 和 ts-node\n                      处理别名。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm install tsc-alias -D;\n</div></li><li><div class=\"code-word\">npm install tsconfig-paths -D;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17657\">\n                      最后，我们需要修改 package.json scripts\n                      配置，如下代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"json\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  ...,\n</div></li><li><div class=\"code-word\">  \"scripts\": {\n</div></li><li><div class=\"code-word\">    \"build\": \"tsc -p tsconfig.prod.json &amp;&amp; tsc-alias -p tsconfig.prod.json\",\n</div></li><li><div class=\"code-word\">    \"start\": \"node -r tsconfig-paths/register -r ts-node/register src/cli.ts\",\n</div></li><li><div class=\"code-word\">    ...\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  ...\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17659\">\n                      tsc 构建转译之后，第 4 行的 build 命令会使用 tsc-alias\n                      将别名替换成相对路径。在载入 ts-node/register 模块之前，第\n                      5 行会预载 tsconfig-paths/register，这样 ts-node\n                      也可以解析别名了。\n                    </p>\n                    <p data-nodeid=\"17660\">\n                      当然，除了选择官方工具 tsc\n                      之外，我们也可以选择其他的工具构建 TypeScript 代码，比如说\n                      Rollup、Babel 等，因篇幅有限，这里就不做深入介绍了。\n                    </p>\n                    <h3 data-nodeid=\"17661\">小结和预告</h3>\n                    <p data-nodeid=\"17662\">\n                      以上就是使用 TypeScript 开发一个简单静态文件服务 NPM\n                      模块的全过程，我们充分利用了 TypeScript\n                      生态中的各种工具和特性。\n                    </p>\n                    <p data-nodeid=\"17663\">\n                      关于如何开发基于 TypeScript 的 Node.js\n                      模块和服务，我在下面也总结了一些建议。\n                    </p>\n                    <ul data-nodeid=\"17664\">\n                      <li data-nodeid=\"17665\">\n                        <p data-nodeid=\"17666\">\n                          export\n                          导出模块内的所有必要的类型定义，可以帮助我们减少\n                          ts(4023) 错误。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"17667\">\n                        <p data-nodeid=\"17668\">\n                          我们可以开启 importHelpers 配置，公用 tslib 替代内联\n                          import 等相关 polyfill\n                          代码，从而大大减小生成代码的体积，配置示例如下：\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"typescript\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"extends\"</span>: <span class=\"hljs-string\">\"./tsconfig.json\"</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"compilerOptions\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"importHelpers\"</span>: <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"exclude\"</span>: [<span class=\"hljs-string\">\"__tests__\"</span>, <span class=\"hljs-string\">\"lib\"</span>]\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"17670\">\n                      如以上示例第 4 行，配置 importHelpers 为 true，<strong\n                        data-nodeid=\"17832\"\n                        >此时一定要把 tslib 加入模块依赖中：</strong\n                      >\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"powershell\"><ol><li><div class=\"code-word\">npm install tslib <span class=\"hljs-literal\">-S</span>; // 安装 tslib 依赖\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"17672\">\n                      <li data-nodeid=\"17673\">\n                        <p data-nodeid=\"17674\">\n                          确保 tsconfig.test.json 和 tsconfig.prod.json\n                          中代码转译相关的配置尽可能一致，避免逻辑虽然通过了单测，但是构建之后运行提示错误。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"17675\">\n                        <p data-nodeid=\"17676\">\n                          慎用 import * as ModuleName，因为较低版本的 tslib\n                          实现的 __importStar 补丁有 bug。如果模块 export\n                          是类的实例，经 __importStar\n                          处理后，会造成实例方法丢失。另外一个建议是避免直接\n                          export 一个类的实例，如下代码所示：\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">exports = <span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-keyword\">new</span> Command(); <span class=\"hljs-comment\">// bad</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"17678\">\n                      <li data-nodeid=\"17679\">\n                        <p data-nodeid=\"17680\">\n                          推荐使用完全支持 TypeScript 的 NestJS 框架开发企业级\n                          Node.js 服务端应用。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"17681\">\n                      插播一道思考题：请对这一讲中的静态文件服务示例进行改造，并为\n                      HttpServer 类及 CLI 添加更多的可配置项，然后通过 VS Code\n                      源码调试及其他章节的经验解决改造过程中碰到的问题。\n                    </p>\n                    <p data-nodeid=\"17682\">\n                      19 讲我们将学习 TypeScript 在 Web\n                      端应用开发中的实践，敬请期待。\n                    </p>\n                    <p data-nodeid=\"17683\">\n                      另外，如果你觉得本专栏有价值，欢迎分享给更多好友。\n                    </p>\n            "}