{"title":"07 | React-Hooks 设计动机与工作模式（下）","context":"\n                    <p data-nodeid=\"14029\" class=\"\">\n                      经过第 6 课时的学习，相信你已经清楚了 React-Hooks\n                      的来头，并理解了其背后的“设计动机”。本课时我们的任务是构建对\n                      React-Hooks 的整体认知。\n                    </p>\n                    <p data-nodeid=\"14030\">\n                      在本课时的主体部分，我将通过一系列的编码实例来帮助你认识\n                      useState、useEffect 这两个有代表性的\n                      Hook，这一步意在帮助初学者对 React-Hooks\n                      可以快速上手。在此基础上，我们将重新理解“Why\n                      React-Hooks”这个问题。在课时的最后，我将结合自身的开发体验，和你分享当下这个阶段，我所认识到的\n                      Hooks 的局限性。\n                    </p>\n                    <blockquote data-nodeid=\"14031\">\n                      <p data-nodeid=\"14032\">\n                        注：在学习本课时的过程中，请你摒弃“认识的 API\n                        名字越多就越牛”这种错误的学习理念。如果你希望掌握尽可能多的\n                        Hook 的用法，<a\n                          href=\"https://zh-hans.reactjs.org/docs/hooks-reference.html\"\n                          data-nodeid=\"14155\"\n                          >点击这里</a\n                        >可以一键进入 React-Hooks API\n                        文档的海洋。对本课时来说，所有涉及对 API 用法的介绍都是\n                        <strong data-nodeid=\"14161\">“教具”</strong\n                        >，仅仅是为后续更深层次的知识讲解作铺垫。\n                      </p>\n                    </blockquote>\n                    <h3 data-nodeid=\"14033\">\n                      先导知识：从核心 API 看 Hooks 的基本形态\n                    </h3>\n                    <h4 data-nodeid=\"14034\">useState()：为函数组件引入状态</h4>\n                    <p data-nodeid=\"14035\">\n                      早期的函数组件相比于类组件，其一大劣势是缺乏定义和维护\n                      state 的能力，而 state（状态）作为 React\n                      组件的灵魂，必然是不可省略的。因此 React-Hooks\n                      在诞生之初，就优先考虑了对 state 的支持。useState\n                      正是这样一个能够为函数组件引入状态的 API。\n                    </p>\n                    <h5 data-nodeid=\"14036\">函数组件，真的很轻</h5>\n                    <p data-nodeid=\"14037\">\n                      在过去，你可能会为了使用\n                      state，不得不去编写一个类组件（这里我给出一个\n                      Demo，编码如下所示）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TextButton</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">constructor</span>() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">super</span>();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.state = {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"初始文本\"</span>\n</div></li><li><div class=\"code-word\">    };\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  changeText = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.setState(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">\"修改后的文本\"</span>\n</div></li><li><div class=\"code-word\">      };\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> { text } = <span class=\"hljs-keyword\">this</span>.state;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"textButton\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{text}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.changeText}</span>&gt;</span>点击修改文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    );\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14039\">\n                      有了 useState 后，我们就可以直接在函数组件里引入\n                      state。以下是使用 useState 改造过后的 TextButton 组件：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Button</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> [text, setText] = useState(<span class=\"hljs-string\">\"初始文本\"</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">changeText</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> setText(<span class=\"hljs-string\">\"修改后的文本\"</span>);\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"textButton\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>{text}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{changeText}</span>&gt;</span>点击修改文本<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14041\">\n                      上面两套代码实现的界面交互效果完全一样，而函数组件的代码量几乎是类组件代码量的一半！\n                    </p>\n                    <p data-nodeid=\"14042\">\n                      如果你在第 06\n                      课时曾或多或少地对“类组件太重了”这个观点感到茫然，那么相信眼前这个\n                      Demo\n                      足以让你真真切切地感受到两类组件在复杂度上的差异——<strong\n                        data-nodeid=\"14174\"\n                        >同样逻辑的函数组件相比类组件而言，复杂度要低得多得多</strong\n                      >。\n                    </p>\n                    <h5 data-nodeid=\"14043\">useState 快速上手</h5>\n                    <p data-nodeid=\"14044\">\n                      从用法上看，useState\n                      返回的是一个数组，数组的第一个元素对应的是我们想要的那个\n                      state 变量，第二个元素对应的是能够修改这个变量的\n                      API。我们可以通过数组解构的语法，将这两个元素取出来，并且按照我们自己的想法命名。一个典型的调用示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> [state, setState] = useState(initialState);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14046\">\n                      在这个示例中，我们给自己期望的那个状态变量命名为\n                      state，给修改 state 的 API 命名为 setState。useState\n                      中传入的 initialState 正是 state\n                      的初始值。后续我们可以通过调用 setState，来修改 state\n                      的值，像这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">setState(newState)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14048\">\n                      状态更新后会触发渲染层面的更新，这点和类组件是一致的。\n                    </p>\n                    <p data-nodeid=\"14049\">\n                      这里需要向初学者强调的一点是：<strong data-nodeid=\"14184\"\n                        >状态和修改状态的 API 名都是可以自定义的</strong\n                      >。比如在上文的 Demo 中，就分别将其自定义为 text 和\n                      setText：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> [text, setText] = useState(<span class=\"hljs-string\">\"初始文本\"</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14051\">\n                      “set + 具体变量名”这种命名形式，可以帮助我们快速地将 API\n                      和它对应的状态建立逻辑联系。\n                    </p>\n                    <p data-nodeid=\"14052\">\n                      当我们在函数组件中调用 React.useState\n                      的时候，实际上是给这个组件关联了一个状态——注意，是“一个状态”而不是“一批状态”。这一点是相对于类组件中的\n                      state 来说的。在类组件中，我们定义的 state\n                      通常是一个这样的对象，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">this</span>.state {\n</div></li><li><div class=\"code-word\">  text: <span class=\"hljs-string\">\"初始文本\"</span>,\n</div></li><li><div class=\"code-word\">  length: <span class=\"hljs-number\">10000</span>,\n</div></li><li><div class=\"code-word\">  author: [<span class=\"hljs-string\">\"xiuyan\"</span>, <span class=\"hljs-string\">\"cuicui\"</span>, <span class=\"hljs-string\">\"yisi\"</span>]\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14054\">\n                      这个对象是“包容万物”的：整个组件的状态都在 state\n                      对象内部做收敛，当我们需要某个具体状态的时候，会通过\n                      this.state.xxx 这样的访问对象属性的形式来读取它。\n                    </p>\n                    <p data-nodeid=\"14055\">\n                      而在 useState 这个钩子的使用背景下，state\n                      就是单独的一个状态，它可以是任何你需要的 JS 类型。像这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 定义为数组</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> [author, setAuthor] = useState([<span class=\"hljs-string\">\"xiuyan\"</span>, <span class=\"hljs-string\">\"cuicui\"</span>, <span class=\"hljs-string\">\"yisi\"</span>]);\n</div></li><li><div class=\"code-word\"> \n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 定义为数值</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> [length, setLength] = useState(<span class=\"hljs-number\">100</span>);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 定义为字符串</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> [text, setText] = useState(<span class=\"hljs-string\">\"初始文本\"</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14057\">\n                      你还可以定义为布尔值、对象等，都是没问题的。<strong\n                        data-nodeid=\"14194\"\n                        >它就像类组件中 state\n                        对象的某一个属性一样，对应着一个单独的状态</strong\n                      >，允许你存储任意类型的值。\n                    </p>\n                    <h4 data-nodeid=\"14058\">\n                      useEffect()：允许函数组件执行副作用操作\n                    </h4>\n                    <p data-nodeid=\"14059\">\n                      函数组件相比于类组件来说，最显著的差异就是 state\n                      和生命周期的缺失。useState 为函数组件引入了 state，而\n                      useEffect 则在一定程度上弥补了生命周期的缺席。\n                    </p>\n                    <p data-nodeid=\"14060\">\n                      useEffect 能够为函数组件引入副作用。过去我们习惯放在\n                      componentDidMount、componentDidUpdate 和\n                      componentWillUnmount 三个生命周期里来做的事，现在可以放在\n                      useEffect 里来做，比如操作 DOM、订阅事件、调用外部 API\n                      获取数据等。\n                    </p>\n                    <h5 data-nodeid=\"14061\">\n                      useEffect 和生命周期函数之间的“替换”关系\n                    </h5>\n                    <p data-nodeid=\"14062\">\n                      我们可以通过下面这个例子来理解 useEffect\n                      和生命周期函数之间的替换关系。这里我先给到你一个用\n                      useEffect 编写的函数组件示例：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 注意 hook 在使用之前需要引入</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React, { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 定义函数组件</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">IncreasingTodoList</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建 count 状态及其对应的状态修改函数</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> [count, setCount] = useState(<span class=\"hljs-number\">0</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 此处的定位与 componentDidMount 和 componentDidUpdate 相似</span>\n</div></li><li><div class=\"code-word\">  useEffect(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 每次 count 增加时，都增加对应的待办项</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> todoList = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"todoList\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> newItem = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"li\"</span>);\n</div></li><li><div class=\"code-word\">    newItem.innerHTML = <span class=\"hljs-string\">\\`我是第<span class=\"hljs-subst\">${count}</span>个待办项\\`</span>;\n</div></li><li><div class=\"code-word\">    todoList.append(newItem);\n</div></li><li><div class=\"code-word\">  });\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 编写 UI 逻辑</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>当前共计 {count} 个todo Item<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"todoList\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setCount(count + 1)}&gt;点我增加一个待办项<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14064\">\n                      通过上面这段代码构造出来的界面在刚刚挂载完毕时，就是如下图所示的样子：\n                    </p>\n                    <p data-nodeid=\"14065\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/B1/Ciqc1F-WvXSAQpxnAACHqrwRF3k766.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"14203\"\n                      />\n                    </p>\n                    <p data-nodeid=\"14066\">\n                      IncreasingTodoList 是一个只允许增加 item 的\n                      ToDoList（待办事项列表）。按照 useEffect\n                      的设定，每当我们点击“点我增加一个待办项”这个按钮，驱动\n                      count+1 的同时，DOM 结构里也会被追加一个 li\n                      元素。以下是连击按钮三次之后的效果图：\n                    </p>\n                    <p data-nodeid=\"14067\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/63/BC/CgqCHl-WvXmAFcc7AADFEkuiF7Y038.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"14207\"\n                      />\n                    </p>\n                    <p data-nodeid=\"14068\">\n                      同样的效果，按照注释里的提示，我们也可以通过编写 class\n                      组件来实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 定义类组件</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IncreasingTodoList</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 初始化 state</span>\n</div></li><li><div class=\"code-word\">  state = { <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span> }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 此处调用上个 demo 中 useEffect 中传入的函数</span>\n</div></li><li><div class=\"code-word\">  componentDidMount() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.addTodoItem()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 此处调用上个 demo 中 useEffect 中传入的函数</span>\n</div></li><li><div class=\"code-word\">  componentDidUpdate() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">this</span>.addTodoItem()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 每次 count 增加时，都增加对应的待办项</span>\n</div></li><li><div class=\"code-word\">  addTodoItem = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> { count } = <span class=\"hljs-keyword\">this</span>.state\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> todoList = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"todoList\"</span>)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> newItem = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"li\"</span>)\n</div></li><li><div class=\"code-word\">    newItem.innerHTML = <span class=\"hljs-string\">\\`我是第<span class=\"hljs-subst\">${count}</span>个待办项\\`</span>\n</div></li><li><div class=\"code-word\">    todoList.append(newItem)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 定义渲染内容</span>\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> { count } = <span class=\"hljs-keyword\">this</span>.state\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>当前共计 {count} 个todo Item<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"todoList\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>\n</span></div></li><li><div class=\"code-word\">          <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;\n</div></li><li><div class=\"code-word\">            this.setState({\n</div></li><li><div class=\"code-word\">              count: this.state.count + 1,\n</div></li><li><div class=\"code-word\">            })\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">        &gt;\n</div></li><li><div class=\"code-word\">          点我增加一个待办项\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    )\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14070\">\n                      通过这样一个对比，类组件生命周期和函数组件 useEffect\n                      之间的转换关系可以说是跃然纸上了。\n                    </p>\n                    <p data-nodeid=\"14071\">\n                      在这里，我提个醒：初学 useEffect\n                      时，我们难免习惯于借助对生命周期的理解来推导对 useEffect\n                      的理解。但长期来看，若是执着于这个学习路径，无疑将阻碍你真正从心智模式的层面拥抱\n                      React-Hooks。\n                    </p>\n                    <p data-nodeid=\"14072\">\n                      <strong data-nodeid=\"14219\"\n                        >有时候，我们必须学会忘记旧的知识，才能够更好地拥抱新的知识</strong\n                      >。对于每一个学习 useEffect 的人来说，生命周期到 useEffect\n                      之间的转换关系都不是最重要的，最重要的是在脑海中构建一个“组件有副作用\n                      → 引入 useEffect”这样的条件反射——<strong\n                        data-nodeid=\"14220\"\n                        >当你真正抛却类组件带给你的刻板印象、拥抱函数式编程之后，想必你会更加认同“useEffect\n                        是用于为函数组件引入副作用的钩子”这个定义</strong\n                      >。\n                    </p>\n                    <h5 data-nodeid=\"14073\">useEffect 快速上手</h5>\n                    <p data-nodeid=\"14074\">\n                      useEffect\n                      可以接收两个参数，分别是回调函数与依赖数组，如下面代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">useEffect(callBack, [])\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14076\">\n                      useEffect\n                      用什么姿势来调用，本质上取决于你想用它来达成什么样的效果。下面我们就以效果为线索，简单介绍\n                      useEffect 的调用规则。\n                    </p>\n                    <ul data-nodeid=\"14077\">\n                      <li data-nodeid=\"14078\">\n                        <p data-nodeid=\"14079\">\n                          每一次渲染后都执行的副作用：传入回调函数，不传依赖数组。调用形式如下所示：\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">useEffect(callBack)\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"14081\">\n                      <li data-nodeid=\"14082\">\n                        <p data-nodeid=\"14083\">\n                          仅在挂载阶段执行一次的副作用：传入回调函数，<strong\n                            data-nodeid=\"14230\"\n                            >且这个函数的返回值不是一个函</strong\n                          >数，同时传入一个空数组。调用形式如下所示：\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">useEffect(()=&gt;{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里是业务逻辑 </span>\n</div></li><li><div class=\"code-word\">}, [])\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"14085\">\n                      <li data-nodeid=\"14086\">\n                        <p data-nodeid=\"14087\">\n                          仅在挂载阶段和卸载阶段执行的副作用：传入回调函数，<strong\n                            data-nodeid=\"14236\"\n                            >且这个函数的返回值是一个函数</strong\n                          >，同时传入一个空数组。假如回调函数本身记为 A，\n                          返回的函数记为 B，那么将在挂载阶段执行 A，卸载阶段执行\n                          B。调用形式如下所示：\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">useEffect(()=&gt;{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里是 A 的业务逻辑</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 返回一个函数记为 B</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> ()=&gt;{\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}, [])\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14089\">\n                      这里需要注意，这种调用方式之所以会在卸载阶段去触发 B\n                      函数的逻辑，是由 useEffect 的执行规则决定的：<strong\n                        data-nodeid=\"14246\"\n                        >useEffect 回调中返回的函数被称为“清除函数”</strong\n                      >，当 React 识别到清除函数时，会在调用新的 effect\n                      逻辑之前执行清除函数内部的逻辑。<strong\n                        data-nodeid=\"14247\"\n                        >这个规律不会受第二个参数或者其他因素的影响，只要你在\n                        useEffect\n                        回调中返回了一个函数，它就会被作为清除函数来处理</strong\n                      >。\n                    </p>\n                    <ul data-nodeid=\"14090\">\n                      <li data-nodeid=\"14091\">\n                        <p data-nodeid=\"14092\">\n                          每一次渲染都触发，且卸载阶段也会被触发的副作用：传入回调函数，且这个函数的返回值是一个函数，同时不传第二个参数。如下所示：\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">useEffect(()=&gt;{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里是 A 的业务逻辑</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 返回一个函数记为 B</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> ()=&gt;{\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14094\">\n                      上面这段代码就会使得 React 在每一次渲染都去触发 A\n                      逻辑，并且在下一次 A 逻辑被触发之前去触发 B 逻辑。\n                    </p>\n                    <p data-nodeid=\"14095\">\n                      其实你只要记住，如果你有一段 effect\n                      逻辑，需要在每次调用它之前对上一次的 effect\n                      进行清理，那么把对应的清理逻辑写进 useEffect\n                      回调的返回函数（上面示例中的 B 函数）里就行了。\n                    </p>\n                    <ul data-nodeid=\"15008\">\n                      <li data-nodeid=\"15009\">\n                        <p data-nodeid=\"15010\" class=\"te-preview-highlight\">\n                          根据一定的依赖条件来触发的副作用：传入回调函数，同时传入一个非空的数组，如下所示：\n                        </p>\n                      </li>\n                    </ul>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">useEffect(()=&gt;{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这是回调函数的业务逻辑 </span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 若 xxx 是一个函数，则 xxx 会在组件每次因 num1、num2、num3 的改变而重新渲染时被触发</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> xxx\n</div></li><li><div class=\"code-word\">}, [num1, num2, num3])\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14100\">\n                      这里我给出的一个示意数组是 [num1, num2,\n                      num3]。首先需要说明，数组中的变量一般都是来源于组件本身的数据（props\n                      或者 state）。若数组不为空，那么 React\n                      就会在新的一次渲染后去对比前后两次的渲染，查看数组内是否有变量发生了更新（只要有一个数组元素变了，就会被认为更新发生了），并在有更新的前提下去触发\n                      useEffect 中定义的副作用逻辑。\n                    </p>\n                    <h3 data-nodeid=\"14101\">\n                      Why React-Hooks：Hooks 是如何帮助我们升级工作模式的\n                    </h3>\n                    <p data-nodeid=\"14102\">\n                      在第 06\n                      课时我们已经了解到，函数组件相比类组件来说，有着不少能够利好\n                      React 组件开发的特性，而 React-Hooks\n                      的出现正是为了强化函数组件的能力。现在，基于对 React-Hooks\n                      编码层面的具体认知，想必你对“动机”的理解也已经上了一个台阶。这里我们就趁热打铁，针对“Why\n                      React-Hooks”这个问题，做一个加强版的总结。\n                    </p>\n                    <p data-nodeid=\"14103\">\n                      相信有不少嗅觉敏锐的同学已经感觉到了——没错，这个环节就是手把手教你做“为什么需要\n                      React-Hooks”这道面试题。以“Why\n                      xxx”开头的这种面试题，往往都没有标准答案，但会有一些关键的“点”，只要能答出关键的点，就足以证明你思考的方向是正确的，也就意味着这道题能给你加分。这里，我梳理了以下\n                      4 条答题思路：\n                    </p>\n                    <ul data-nodeid=\"14104\">\n                      <li data-nodeid=\"14105\">\n                        <p data-nodeid=\"14106\">告别难以理解的 Class；</p>\n                      </li>\n                      <li data-nodeid=\"14107\">\n                        <p data-nodeid=\"14108\">解决业务逻辑难以拆分的问题；</p>\n                      </li>\n                      <li data-nodeid=\"14109\">\n                        <p data-nodeid=\"14110\">使状态逻辑复用变得简单可行；</p>\n                      </li>\n                      <li data-nodeid=\"14111\">\n                        <p data-nodeid=\"14112\">\n                          函数组件从设计思想上来看，更加契合 React 的理念。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"14113\">\n                      关于思路\n                      4，我在上个课时已经讲得透透的了，这里我主要是借着代码的东风，把\n                      1、2、3 摊开来给你看一下。\n                    </p>\n                    <h4 data-nodeid=\"14114\">\n                      1. 告别难以理解的 Class：把握 Class 的两大“痛点”\n                    </h4>\n                    <p data-nodeid=\"14115\">\n                      坊间总有传言说 Class 是“难以理解”的，这个说法的背后<strong\n                        data-nodeid=\"14273\"\n                        >是 this 和生命周期这两个痛点</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"14116\">\n                      先来说说 this，在上个课时，你已经初步感受了一把 this\n                      有多么难以捉摸。但那毕竟是个相对特殊的场景，更为我们所熟悉的，可能还是\n                      React 自定义组件方法中的 this。看看下面这段代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">class Example extends Component {\n</div></li><li><div class=\"code-word\">  state = {\n</div></li><li><div class=\"code-word\">    name: '修言',\n</div></li><li><div class=\"code-word\">    age: '99';\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  changeAge() {\n</div></li><li><div class=\"code-word\">    // 这里会报错\n</div></li><li><div class=\"code-word\">    this.setState({\n</div></li><li><div class=\"code-word\">      age: '100'\n</div></li><li><div class=\"code-word\">    });\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  render() {\n</div></li><li><div class=\"code-word\">    return &lt;button onClick={this.changeAge}&gt;{this.state.name}的年龄是{this.state.age}&lt;/button&gt;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14118\">\n                      你先不用关心组件具体的逻辑，就看 changeAge 这个方法：它是\n                      button 按钮的事件监听函数。当我点击 button\n                      按钮时，希望它能够帮我修改状态，但事实是，点击发生后，程序会报错。原因很简单，changeAge\n                      里并不能拿到组件实例的 this，至于为什么拿不到，我们将在第\n                      15课时讲解其背后的原因，现在先不用关心。单就这个现象来说，略有一些\n                      React 开发经验的同学应该都会非常熟悉。\n                    </p>\n                    <p data-nodeid=\"14119\">\n                      为了解决 this\n                      不符合预期的问题，各路前端也是各显神通，之前用\n                      bind、现在推崇箭头函数。但不管什么招数，<strong\n                        data-nodeid=\"14281\"\n                        >本质上都是在用实践层面的约束来解决设计层面的问题</strong\n                      >。好在现在有了\n                      Hooks，一切都不一样了，我们可以在函数组件里放飞自我（毕竟函数组件是不用关心\n                      this 的）哈哈，解放啦！\n                    </p>\n                    <p data-nodeid=\"14120\">\n                      至于生命周期，它带来的麻烦主要有以下两个方面：\n                    </p>\n                    <ul data-nodeid=\"14121\">\n                      <li data-nodeid=\"14122\">\n                        <p data-nodeid=\"14123\">学习成本</p>\n                      </li>\n                      <li data-nodeid=\"14124\">\n                        <p data-nodeid=\"14125\">不合理的逻辑规划方式</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"14126\">\n                      对于第一点，大家都学过生命周期，都懂。下面着重说说这“不合理的逻辑规划方式”是如何被\n                      Hooks 解决掉的。\n                    </p>\n                    <h4 data-nodeid=\"14127\">2. Hooks 如何实现更好的逻辑拆分</h4>\n                    <p data-nodeid=\"14128\">\n                      在过去，你是怎么组织自己的业务逻辑的呢？我想多数情况下应该都是先想清楚业务的需要是什么样的，然后将对应的业务逻辑拆到不同的生命周期函数里去——没错，<strong\n                        data-nodeid=\"14294\"\n                        >逻辑曾经一度与生命周期耦合在一起</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"14129\">\n                      在这样的前提下，生命周期函数常常做一些奇奇怪怪的事情：比如在\n                      componentDidMount 里获取数据，在 componentDidUpdate\n                      里根据数据的变化去更新 DOM\n                      等。如果说你只用一个生命周期做一件事，那好像也还可以接受，但是往往在一个稍微成规模的\n                      React\n                      项目中，一个生命周期不止做一件事情。下面这段伪代码就很好地诠释了这一点：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">componentDidMount() {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 1. 这里发起异步调用</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 2. 这里从 props 里获取某个数据，根据这个数据更新 DOM</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 3. 这里设置一个订阅</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 4. 这里随便干点别的什么 </span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// ...</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">componentWillUnMount() {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 在这里卸载订阅</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">componentDidUpdate() {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 1. 在这里根据 DidMount 获取到的异步数据更新 DOM</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 2. 这里从 props 里获取某个数据，根据这个数据更新 DOM（和 DidMount 的第2步一样）</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"14131\">\n                      像这样的生命周期函数，它的体积过于庞大，做的事情过于复杂，会给阅读和维护者带来很多麻烦。最重要的是，<strong\n                        data-nodeid=\"14301\"\n                        >这些事情之间看上去毫无关联，逻辑就像是被“打散”进生命周期里了一样</strong\n                      >。比如，设置订阅和卸载订阅的逻辑，虽然它们在逻辑上是有强关联的，但是却只能被分散到不同的生命周期函数里去处理，这无论如何也不能算作是一个非常合理的设计。\n                    </p>\n                    <p data-nodeid=\"14132\">\n                      而在 Hooks 的帮助下，我们完全可以把这些繁杂的操作<strong\n                        data-nodeid=\"14312\"\n                        >按照逻辑上的关联拆分进不同的函数组件里：<strong\n                          data-nodeid=\"14311\"\n                          >我们可以有专门管理订阅的函数组件、专门处理 DOM\n                          的函数组件、专门获取数据的函数组件等。Hooks\n                          能够帮助我们</strong\n                        >实现业务逻辑的聚合，避免复杂的组件和冗余的代码</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"14133\">\n                      3. 状态复用：Hooks 将复杂的问题变简单\n                    </h4>\n                    <p data-nodeid=\"14134\">\n                      过去我们复用状态逻辑，靠的是 HOC（高阶组件）和 Render\n                      Props 这些组件设计模式，这是因为 React\n                      在原生层面并没有为我们提供相关的途径。但这些设计模式并非万能，它们在实现逻辑复用的同时，也破坏着组件的结构，其中一个最常见的问题就是“嵌套地狱”现象。\n                    </p>\n                    <p data-nodeid=\"14135\">\n                      Hooks 可以视作是 React\n                      为解决状态逻辑复用这个问题所提供的一个原生途径。现在我们可以通过自定义\n                      Hook，达到既不破坏组件结构、又能够实现逻辑复用的效果。\n                    </p>\n                    <p data-nodeid=\"14136\">\n                      要理解上面这两段话，需要你对组件设计模式有基本的理解和应用。如果你读下来觉得一头雾水，也不必心慌。对于组件状态复用这个问题（包括\n                      HOC、Render Props 和自定义\n                      Hook），现在我对你的预期是“知道有这回事就可以了”。如果你实在着急，可以先通过<a\n                        href=\"https://zh-hans.reactjs.org/docs/hooks-custom.html\"\n                        data-nodeid=\"14321\"\n                        >文档中的相关内容</a\n                      >简单了解一下。在专栏的第三模块，我会专门把这块知识提出来，放在一个更合适的上下文里给你掰开来讲。\n                    </p>\n                    <h3 data-nodeid=\"14137\">保持清醒：Hooks 并非万能</h3>\n                    <p data-nodeid=\"14138\">\n                      尽管我们已经说了这么多 Hooks 的“好话”，尽管 React\n                      团队已经用脚投票表明了对函数组件的积极态度，但我们还是要谨记这样一个基本的认知常识：事事无绝对，凡事皆有两面性。更何况\n                      React\n                      仅仅是推崇函数组件，并没有“拉踩”类组件，甚至还官宣了“类组件和函数组件将继续共存”这件事情。这些都在提醒我们，<strong\n                        data-nodeid=\"14329\"\n                        >在认识到 Hooks\n                        带来的利好的同时，还需要认识到它的局限性</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"14139\">\n                      关于 Hooks\n                      的局限性，目前社区鲜少有人讨论。这里我想结合团队开发过程当中遇到的一些瓶颈，和你分享实践中的几点感受：\n                    </p>\n                    <ul data-nodeid=\"14140\">\n                      <li data-nodeid=\"14141\">\n                        <p data-nodeid=\"14142\">\n                          <strong data-nodeid=\"14335\"\n                            >Hooks\n                            暂时还不能完全地为函数组件补齐类组件的能力</strong\n                          >：比如 getSnapshotBeforeUpdate、componentDidCatch\n                          这些生命周期，目前都还是强依赖类组件的。官方虽然立了“会尽早把它们加进来”的\n                          Flag，但是说真的，这个 Flag 真的立了蛮久了……（扶额）\n                        </p>\n                      </li>\n                      <li data-nodeid=\"14143\">\n                        <p data-nodeid=\"14144\">\n                          <strong data-nodeid=\"14344\"\n                            >“轻量”几乎是函数组件的基因，这可能会使它不能够很好地消化“复杂”</strong\n                          >：我们有时会在类组件中见到一些方法非常繁多的实例，如果用函数组件来解决相同的问题，业务逻辑的拆分和组织会是一个很大的挑战。我个人的感觉是，从头到尾都在“过于复杂”和“过度拆分”之间摇摆不定，哈哈。耦合和内聚的边界，有时候真的很难把握，<strong\n                            data-nodeid=\"14345\"\n                            >函数组件给了我们一定程度的自由，却也对开发者的水平提出了更高的要求</strong\n                          >。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"14145\">\n                        <p data-nodeid=\"14146\">\n                          <strong data-nodeid=\"14350\"\n                            >Hooks 在使用层面有着严格的规则约束</strong\n                          >：这也是我们下个课时要重点讲的内容。对于如今的 React\n                          开发者来说，如果不能牢记并践行 Hooks\n                          的使用原则，如果对 Hooks\n                          的关键原理没有扎实的把握，很容易把自己的 React\n                          项目搞成大型车祸现场。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"14147\">总结</h3>\n                    <p data-nodeid=\"14148\">\n                      在本课时，我们结合编码层面的认知，辩证地探讨了 Hooks\n                      带来的利好与局限性。现在，你对于 React-Hooks\n                      的基本形态和前世今生都已经有了透彻的了解，也真刀真枪地感受到了\n                      Hooks 带来的利好。学习至此，相信你已经建立了对 React-Hooks\n                      的学习自信。\n                    </p>\n                    <p data-nodeid=\"14149\" class=\"\">\n                      接下来，我们将续上本课时结尾处的“悬念”，向 React-Hooks\n                      的执行规则发问，同时也将进入 React-Hooks\n                      知识链路真正的深水区。\n                    </p>\n            "}