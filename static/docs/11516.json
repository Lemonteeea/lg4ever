{"title":"14 | 工具应用：使用 clinicjs 工具实现通用性安全检查","context":"\n                    <p data-nodeid=\"47644\">\n                      在该模块的几讲中，我们都是先有问题，然后再定位分析解决问题，那么是否有方法能够在出现问题之前检测问题呢？那就需要用到本讲要介绍的\n                      clinicjs 工具，在上线之前通过自动化的方式来发现问题。\n                    </p>\n                    <h3 data-nodeid=\"47645\">clinicjs 是什么</h3>\n                    <h4 data-nodeid=\"47646\">介绍</h4>\n                    <p data-nodeid=\"47647\">\n                      clinicjs 是一个 Node.js 的第三方工具，<a\n                        href=\"https://clinicjs.org/?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"47754\"\n                        >clinicjs 官网</a\n                      >介绍了其核心的目的是，<strong data-nodeid=\"47760\"\n                        >帮助诊断和查明 Node.js 性能问题的工具</strong\n                      >。那么它具体能帮助我们定位查询哪些性能问题呢？\n                    </p>\n                    <ul data-nodeid=\"47648\">\n                      <li data-nodeid=\"47649\">\n                        <p data-nodeid=\"47650\">\n                          <strong data-nodeid=\"47765\">CPU 异常问题</strong>，当\n                          CPU 存在密集计算占用时可以检测出来。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47651\">\n                        <p data-nodeid=\"47652\">\n                          <strong data-nodeid=\"47770\">事件循环延迟问题</strong\n                          >，当主线程存在过载时，事件循环的执行时间存在延迟，可以检测出来。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47653\">\n                        <p data-nodeid=\"47654\">\n                          <strong data-nodeid=\"47775\">内存泄漏问题</strong>。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47655\">\n                        <p data-nodeid=\"47656\">\n                          <strong data-nodeid=\"47780\">句柄泄漏问题</strong>。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"47657\">\n                      以上几个问题也是我们非常关注的几个点。\n                    </p>\n                    <p data-nodeid=\"47658\">\n                      我们先使用 npm 来安装该工具，如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm install -g clinic\n</div></li><li><div class=\"code-word\">clinic --help\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47660\">\n                      安装完成后，我们需要把《12 |\n                      性能分析：性能影响的关键路径以及优化策略》中的 wrk\n                      也安装了，因为其需要 wrk\n                      来进行压测，都安装完成后，需要着重掌握以下三个命令。\n                    </p>\n                    <p data-nodeid=\"47661\">\n                      你可以先把我们的服务器启动起来，然后尝试在我们项目根目录去运行下面的命令\n                      1 。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">clinic doctor --on-port <span class=\"hljs-string\">\"wrk http://127.0.0.1:3000/local-cache/no\"</span> -- node app.js\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47663\">\n                      <strong data-nodeid=\"47789\"\n                        >这个命令 1 是指对服务的 local-cache/no\n                        进行性能全局分析</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"47664\">我们再来看下命令 2，如下所示：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">clinic flame --on-port <span class=\"hljs-string\">\"wrk http://127.0.0.1:3000/local-cache/no\"</span> -- node app.js\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47666\">\n                      <strong data-nodeid=\"47799\"\n                        >命令 2 是当全局分析出现事件延迟或者高 CPU\n                        占用时，就需要使用该工具进行具体深入分析</strong\n                      >，关于如何应用，你可以参考<a\n                        href=\"https://clinicjs.org/documentation/flame/?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"47797\"\n                        >clinic flame 官网</a\n                      >说明。\n                    </p>\n                    <p data-nodeid=\"47667\">以下是命令 3：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">clinic bubbleprof --on-port <span class=\"hljs-string\">\"wrk http://127.0.0.1:3000/local-cache/no\"</span> -- node app.js\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47669\">\n                      <strong data-nodeid=\"47809\"\n                        >命令 3 是当全局分析出现 I/O\n                        问题时，我们就需要使用该工具进一步分析</strong\n                      >，关于如何应用，你可以参考<a\n                        href=\"https://clinicjs.org/documentation/doctor/06-fixing-io-problem/?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"47807\"\n                      >\n                        clinic bubbleprof 官网</a\n                      >说明。\n                    </p>\n                    <h4 data-nodeid=\"47670\">示例分析</h4>\n                    <p data-nodeid=\"47671\">\n                      我们来看几个例子，以下例子都是来自 clinicjs 测试的结果。\n                    </p>\n                    <p data-nodeid=\"47672\">我们先来看图 1 所示的结果。</p>\n                    <p data-nodeid=\"49622\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/90/Cgp9HWB37a2AKhPmAAJeXJvA1Tg457.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"49626\"\n                      />\n                    </p>\n                    <div data-nodeid=\"49623\">\n                      <p style=\"text-align: center\">\n                        图 1 clinicjs 无异常检测结果\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"47675\">\n                      从图 1 可以看到一个总结性的话，正如第一行 Detected no\n                      issue\n                      表明，本次测试没有任何问题，具体可以再看下四个结果：<strong\n                        data-nodeid=\"47822\"\n                        >CPU 占用、内存占用、事件延迟和句柄</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"47676\">\n                      我们再来看一种异常的情况，如图 2 所示的结果。\n                    </p>\n                    <p data-nodeid=\"50750\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/98/CioPOWB37bmAOY3WAAKiAW23OY4348.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"50754\"\n                      />\n                    </p>\n                    <div data-nodeid=\"50751\">\n                      <p style=\"text-align: center\">\n                        图 2 clinicjs 异常检测结果\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"47679\">\n                      上图的第一行很清晰地告诉我们，<strong data-nodeid=\"47833\"\n                        >存在 CPU 问题、内存问题和事件延迟的情况</strong\n                      >，看到以上问题后，我们接下来怎么处理呢？\n                    </p>\n                    <p data-nodeid=\"47680\">\n                      在 clinicjs 中如果分析出存在 CPU\n                      和事件延迟，可以使用上面我们所介绍的 clinic flame 工具。而\n                      I/O 问题则使用 clinic bubbleprof 来进一步定位。\n                    </p>\n                    <h3 data-nodeid=\"47681\">框架中接入自动化</h3>\n                    <p data-nodeid=\"47682\">\n                      以上是一个工具的应用，并不是我们本讲的重点，<strong\n                        data-nodeid=\"47841\"\n                        >我们本讲的核心是将该工具作为一个自动化模块接入我们的框架中</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"47683\">框架中测试的思考</h4>\n                    <p data-nodeid=\"47684\">\n                      clinicjs\n                      接入后，使用方法非常简单，我们只需要使用以下命令就可以进行测试检测。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">clinic doctor --on-port <span class=\"hljs-string\">\"wrk http://127.0.0.1:3000/local-cache/no\"</span> -- node app.js\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47686\">\n                      但是需要思考一下，如果每次新接口上线我们都需要一个个跑一遍，那么岂不是很花费人力，这时就需要思考下有没有办法可以自动化地做接口测试，而我们只需要深入分析有问题的接口就可以了。\n                    </p>\n                    <p data-nodeid=\"47687\">\n                      有了以上思考后，我们就开始来规划下，如何进行自动化测试。\n                    </p>\n                    <h4 data-nodeid=\"47688\">自动化</h4>\n                    <p data-nodeid=\"47689\">\n                      首先来整理一个流程图，来分析下我们应该如何实现这个功能。\n                    </p>\n                    <p data-nodeid=\"51874\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/98/CioPOWB37cOAdvHkAAJjWOy1L2Y825.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"51878\"\n                      />\n                    </p>\n                    <div data-nodeid=\"51875\">\n                      <p style=\"text-align: center\">图 3 自动化方案流程图</p>\n                    </div>\n\n                    <p data-nodeid=\"47692\">我们分析一下以上流程的每个过程：</p>\n                    <ol data-nodeid=\"47693\">\n                      <li data-nodeid=\"47694\">\n                        <p data-nodeid=\"47695\">\n                          我们<strong data-nodeid=\"47858\"\n                            >将需要测试的接口组装成一个配置信息</strong\n                          >，其中包含了待测试的请求路径、请求方式以及请求的参数；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47696\">\n                        <p data-nodeid=\"47697\">\n                          因为 clinicjs 生成的是一个 html 文件，并且这个 html\n                          文件是一个 JavaScript\n                          执行生成的结果文件，因此需要启动一个本地服务来读取\n                          html 并解析生成具体的 DOM 结构；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47698\">\n                        <p data-nodeid=\"47699\">\n                          从数组取出一个待测试的接口数据，来开始测试，根据\n                          clinicjs 的命令，生成具体的执行命令行，然后借助 child\n                          process 的 exec 来执行，并获取其执行结果；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47700\">\n                        <p data-nodeid=\"47701\">\n                          最终会生成一个运行期间的结果，在输出的最后一行会提供一个生成后的\n                          html 文件路径地址，一般这个文件都会生成在当前目录下的\n                          .clinic 文件夹中；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47702\">\n                        <p data-nodeid=\"47703\">\n                          使用一个 html 的解析工具 puppeteer 从本地服务中读取\n                          html 文件，并解析获取其中的测试结果的 DOM 信息；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47704\">\n                        <p data-nodeid=\"47705\">\n                          判断 DOM\n                          信息中是否有异常结果，有异常显示异常并记录测试数据，没有则跳过；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"47706\">\n                        <p data-nodeid=\"47707\">\n                          最终测试完成以后，显示所有测试异常的接口，并把测试信息给到开发者。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"47708\">\n                      根据以上的流程，我们画一个逻辑执行过程来更清晰描述下这个过程。\n                    </p>\n                    <p data-nodeid=\"52994\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/90/Cgp9HWB37cyAPGhrAAEXls5qfQY168.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"52998\"\n                      />\n                    </p>\n                    <div data-nodeid=\"52995\">\n                      <p style=\"text-align: center\">\n                        图 4 自动化方案逻辑执行图\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"47711\">\n                      上面的逻辑和流程图基本上是一个过程，<strong\n                        data-nodeid=\"47881\"\n                        >只是这里用函数和模块来表示了</strong\n                      >，具体我们可以看下部分代码的实现，如图 5 所示，源码在<a\n                        href=\"https://github.com/love-flutter/nodejs-column?fileGuid=xxQTRXtVcqtHK6j8\"\n                        data-nodeid=\"47877\"\n                        >GitHub </a\n                      >中的 bin/clinic_test.js 文件中。\n                    </p>\n                    <p data-nodeid=\"54110\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/98/CioPOWB37dKAaCSYAALhCgAFm2U761.png\"\n                        alt=\"Drawing 4.png\"\n                        data-nodeid=\"54114\"\n                      />\n                    </p>\n                    <div data-nodeid=\"54111\">\n                      <p style=\"text-align: center\">\n                        图 5 startTestLink 代码实现\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"47714\">\n                      在图 5 中的第 57-63 行逻辑中，主要是在组装 clinicjs\n                      的测试命令，最终的命令会变成以下的命令行。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">cd ..\n</div></li><li><div class=\"code-word\">clinic doctor --on-port <span class=\"hljs-string\">\"wrk http://127.0.0.1:3000/xxxx\"</span> -- node app.js\n</div></li><li><div class=\"code-word\">exit\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47716\">\n                      以上是 GET 方法，<strong data-nodeid=\"47892\"\n                        >如果是 POST 方法则需要写入 POST\n                        数据，并且需要在命令行中加上 POST 参数</strong\n                      >，如下命令示例结果：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">cd ..\n</div></li><li><div class=\"code-word\">clinic doctor --on-port <span class=\"hljs-string\">\"wrk http://127.0.0.1:3000/xxxx -s ./bin/post_tmp.lua\"</span> -- node app.js\n</div></li><li><div class=\"code-word\">exit\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47718\">\n                      拿到命令以后，再使用 Node.js 的 execSync\n                      方法获取执行结果，请注意这里的执行结果是非常长的日志，但是在最后一行会提示\n                      html 生成的文件地址，在图 5 中的 64 到 67\n                      行就是获取到相应的 html 文件，拿到 html\n                      文件后再向本地服务读取到 html 的内容，最后 parseResult\n                      来分析是否存在性能问题。\n                    </p>\n                    <p data-nodeid=\"47719\">\n                      接下来我们看下 parseResult 的方法实现，代码如图 6 所示。\n                    </p>\n                    <p data-nodeid=\"55779\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/98/CioPOWB37eWAX1KsAAFcIAG2wp8914.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"55783\"\n                      />\n                    </p>\n                    <div data-nodeid=\"55780\">\n                      <p style=\"text-align: center\">\n                        图 6 parseResult 代码实现\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"47722\">\n                      <strong data-nodeid=\"47903\"\n                        >这里有个小技巧，就是在 Node.js\n                        中可以模拟浏览器去读取一个 html 文件，如果 html\n                        文件不是通过 Javascript 动态生成的，那么你可以直接\n                        fs.readFile 去获取，如果是动态生成的则必须用 puppeteer\n                        模拟浏览器解析 html DOM 结构了</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"47723\">\n                      拿到 DOM\n                      结构后，就可以进行分析判断是否存在异常了，后面的逻辑就比较简单，都是一些判断方法了。通过以上方式，我们就可以在配置文件中增加一些接口，从而实现自动化的方式，每次我们在线上发布之前，在测试环境或者预发布环境中跑一遍测试就可以提前发现问题了。接下来我们来演示一下这个功能。\n                    </p>\n                    <h3 data-nodeid=\"47724\">实践测试</h3>\n                    <p data-nodeid=\"47725\">\n                      之前我们的项目中有几个存在 CPU\n                      密集计算的问题，这里我们用这个工具来检测下，看下是否能帮我们定位到问题。我们把配置文件修改为如下内容：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> testMapping = [\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">'urlPath'</span> : <span class=\"hljs-string\">'cache/local'</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">'method'</span> : <span class=\"hljs-string\">'get'</span>,\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">'getParams'</span> : {\n</div></li><li><div class=\"code-word\">        },\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-string\">'postParams'</span> : {\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'urlPath'</span> : <span class=\"hljs-string\">'local-cache/no'</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'method'</span> : <span class=\"hljs-string\">'get'</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'getParams'</span> : {\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'postParams'</span> : {\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'urlPath'</span> : <span class=\"hljs-string\">'local-cache/yes'</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'method'</span> : <span class=\"hljs-string\">'get'</span>,\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'getParams'</span> : {\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'postParams'</span> : {\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">];\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47727\">\n                      接下来我们在项目根目录执行下面两个命令：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">cd bin\n</div></li><li><div class=\"code-word\">node clinic_test.js&nbsp;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47729\">运行完成后，你将会看到如下结果：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">启动服务开始测试...\n</div></li><li><div class=\"code-word\">开始检测 cache/local 的接口性能问题\n</div></li><li><div class=\"code-word\">该接口无任何异常问题\n</div></li><li><div class=\"code-word\">开始检测 local-cache/no 的接口性能问题\n</div></li><li><div class=\"code-word\">该接口存在异常\n</div></li><li><div class=\"code-word\">具体详情请查看项目根目录下的\n</div></li><li><div class=\"code-word\">./.clinic/<span class=\"hljs-number\">21097</span>.clinic-doctor.html\n</div></li><li><div class=\"code-word\">开始检测 local-cache/yes 的接口性能问题\n</div></li><li><div class=\"code-word\">该接口无任何异常问题\n</div></li><li><div class=\"code-word\">你需要处理以下问题汇总，具体请查看下面详细信息\n</div></li><li><div class=\"code-word\">[{<span class=\"hljs-string\">\"resultLink\"</span>:<span class=\"hljs-string\">\"21097.clinic-doctor.html\"</span>,<span class=\"hljs-string\">\"url\"</span>:<span class=\"hljs-string\">\"http://127.0.0.1:3000/local-cache/no\"</span>,<span class=\"hljs-string\">\"command\"</span>:<span class=\"hljs-string\">\"clinic doctor --on-port \\\"wrk http://127.0.0.1:3000/local-cache/no\\\" -- node app.js\"</span>,<span class=\"hljs-string\">\"problem\"</span>:<span class=\"hljs-string\">\"Detected data analysis issue\"</span>}]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47731\">\n                      从原来的分析来看也是这样的结果，因为我们对 cache/local 和\n                      local-cache/yes 做了缓存优化，所以无任何异常问题，而\n                      local-cache/no 存在性能问题，然后我们打开\n                      .clinic/21097.clinic-doctor.html 这个文件，可以看到如图 7\n                      所示的结果。\n                    </p>\n                    <p data-nodeid=\"56887\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/90/Cgp9HWB37e-APupPAAJ0RW3kNww550.png\"\n                        alt=\"Drawing 6.png\"\n                        data-nodeid=\"56891\"\n                      />\n                    </p>\n                    <div data-nodeid=\"56888\">\n                      <p style=\"text-align: center\">\n                        图 7 local-cache/no 检测结果\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"47734\">\n                      如果遇到了 CPU 占用和事件延迟这类问题就使用 clinic flame\n                      来进一步分析，我们从刚才的运行结果中，取出测试方法，把\n                      doctor 修改为 flame\n                      即可，如下命令所示（请注意要回到项目根目录去运行，不要在当前\n                      bin 目录）。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">clinic flame --on-port <span class=\"hljs-string\">\"wrk http://127.0.0.1:3000/local-cache/no\"</span> -- node app.js\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47736\">\n                      成功运行后，打开相应的 html 文件，可以看到如图 8\n                      所示的结果。\n                    </p>\n                    <p data-nodeid=\"57991\" class=\"te-preview-highlight\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M00/37/90/Cgp9HWB37fiAX8tvAAJ_iWJXzkU653.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"57995\"\n                      />\n                    </p>\n                    <div data-nodeid=\"57992\">\n                      <p style=\"text-align: center\">\n                        图 8 clinic flame 运行结果\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"47739\">\n                      在图 8 中我们可以非常清晰地看到提示，具体在 localCache.js\n                      中的第 20\n                      行占用的问题，你都不用去详细分析就可以轻松得到结论。\n                    </p>\n                    <p data-nodeid=\"47740\">\n                      为了使用方便，我们将此工具集成到了 package\n                      中，只需要运行下面命令就可以了。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">npm run clinic-test\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"47742\">以上就完成了该工具的自动化方法。</p>\n                    <h3 data-nodeid=\"47743\">总结</h3>\n                    <p data-nodeid=\"47744\">\n                      你可以想象一下如果没有该工具，我们每次开发完的功能都像是一次冒险，心里很忐忑，但是有了\n                      clinicjs\n                      工具以后，我们再也不需要担心这个事情了，在发布之前就可以预先发现这些问题，我希望如果应用\n                      Node.js 做后台开发时，它都应该作为一个必备的工具。\n                    </p>\n                    <p data-nodeid=\"47745\">\n                      我们本讲实现的自动化工具，还可以继续抽离细化，希望你可以根据自己的想法生成一个比较通用的工具，如果有人抽离出来后，请给出\n                      GitHub 地址，让大家可以一起来使用，一起来维护。\n                    </p>\n                    <p data-nodeid=\"47746\">\n                      下一讲我们将进入实战模块，基本把当前 Node.js\n                      的相关知识都介绍完了，我们也开始进行一些项目尝试。\n                    </p>\n            "}