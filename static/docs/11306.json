{"title":"05 | 编码效率：如何提高编写代码的效率？","context":"\n                    <p data-nodeid=\"1441\">\n                      上一课时我们讨论了开发过程中 Mock 工具的使用。Mock\n                      工具能帮助解决前端开发过程中的接口依赖问题，作为开发流程规范的一环，起到提升整体开发效率的作用。\n                    </p>\n                    <p data-nodeid=\"1442\">\n                      今天我们来聊聊如何提高开发时的编码效率的问题。\n                    </p>\n                    <p data-nodeid=\"1443\">\n                      俗话说，不会“偷懒”的程序员不是好程序员。一名好的程序员会不断地思考如何把重复的流程通过程序来自动化地完成，从而把剩下的时间投入到真正需要思考和有创造性的工作中去。那么如何才能在开发过程中更专业地“偷懒”呢？\n                    </p>\n                    <h3 data-nodeid=\"1444\">提高编码效率的不同方式</h3>\n                    <p data-nodeid=\"1445\">\n                      对于前端同学而言，第一讲<strong data-nodeid=\"1547\"\n                        >脚手架工具</strong\n                      >就是提高编码效率最直接的例子，通过脚手架帮我们生成一个项目的基础代码后，就免去了投入其中的时间。那么在开发过程中又有哪些方式可以帮助我们提高编码的效率呢？\n                    </p>\n                    <p data-nodeid=\"1446\">\n                      以最终实现相同代码产出为目标，开发时提高编码效率的方式大致可以分为两类：\n                    </p>\n                    <ol data-nodeid=\"4042\">\n                      <li data-nodeid=\"4043\">\n                        <p data-nodeid=\"4044\">\n                          通过使用<strong data-nodeid=\"4056\">预处理语言</strong\n                          >：相比原语言来说，预处理语言通常抽象度更高，提供更多封装好的工具方法，更有利于提高编码的效率。可以通过对应的预处理器（Preprocessor）将预处理语言在<strong\n                            data-nodeid=\"4057\"\n                            >编译时</strong\n                          >转换为更完整的普通语法代码（例如 Sass 到 CSS）。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4045\">\n                        <p data-nodeid=\"4046\">\n                          通过<strong data-nodeid=\"4067\">代码生成</strong>（例如\n                          IDE 的自动完成）：以达到在<strong data-nodeid=\"4068\"\n                            >编写时</strong\n                          >自动生成代码的作用，因而无须在编译时进行额外处理。\n                        </p>\n                      </li>\n                    </ol>\n\n                    <p data-nodeid=\"5511\">\n                      下面我们就来分别讨论下这两种方式，以及它们对应的工具。\n                    </p>\n\n                    <h3 data-nodeid=\"1453\">使用预处理语言和预处理器</h3>\n                    <p data-nodeid=\"7677\">\n                      预处理语言指的是在原有语言的语法基础上，提供更多新的内置功能及精简语法，以便提高代码复用性和书写效率。下面我们就列举几个前端开发中涉及的典型预处理语言，来聊一聊它们在功能和使用上的特点，以便在开发中能够更有针对性地选择和使用。\n                    </p>\n\n                    <h4 data-nodeid=\"1455\">Sass/Less/Stylus</h4>\n                    <p data-nodeid=\"11347\">\n                      <strong data-nodeid=\"11363\"\n                        ><a href=\"https://sass-lang.com/\" data-nodeid=\"11351\"\n                          >Sass</a\n                        >（2006），<a\n                          href=\"http://lesscss.org/\"\n                          data-nodeid=\"11355\"\n                          >Less</a\n                        >（2009）和\n                        <a href=\"https://stylus-lang.com/\" data-nodeid=\"11359\"\n                          >Stylus</a\n                        >（2010）</strong\n                      >\n                      是三种目前主流的 CSS\n                      预处理语言，有同学在创建新项目时可能不知道该选择哪一种，下面我会从几个方面对它们做一个比较，来作为你选择使用的参考依据：\n                    </p>\n\n                    <p data-nodeid=\"1457\">\n                      从<strong data-nodeid=\"1596\">流行程度来看</strong>：\n                    </p>\n                    <ul data-nodeid=\"1458\">\n                      <li data-nodeid=\"1459\">\n                        <p data-nodeid=\"1460\">\n                          从第一课时脚手架部分的介绍中能发现，react-scripts\n                          中集成了 sass-loader，而 vue-cli-service\n                          中则同时支持这三种预处理器。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1461\">\n                        <p data-nodeid=\"1462\">\n                          几个主流的 UI 库的使用情况是： Bootstrap4、 Antd 和\n                          iView 使用 Less， ElementUI 使用 Sass。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1463\">\n                        <p data-nodeid=\"1464\">\n                          此外，<a\n                            href=\"https://ashleynolan.co.uk/blog/frontend-tooling-survey-2019-results\"\n                            data-nodeid=\"1602\"\n                            >2019 年的前端工具调查</a\n                          >也显示上面三种工具的使用人数依次递减，即使用人数最多的是\n                          Sass、 其次是 Less、最后是 Stylus。如下图所示：\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1465\">\n                      <img\n                        alt=\"image.png\"\n                        src=\"https://s0.lgstatic.com/i/image/M00/45/D6/Ciqc1F9DimmAXh2DAAGk0RtNvg0192.png\"\n                        data-nodeid=\"1606\"\n                      />\n                    </p>\n                    <p data-nodeid=\"28243\">\n                      在<strong data-nodeid=\"28249\">实现的功能</strong\n                      >方面：这三种 CSS\n                      的预处理语言都实现了变量（Variables）、嵌套（Nesting）、混合\n                      （Mixins）、运算（Operators）、父选择器引用（Parent\n                      Reference）、扩展（Extend）和大量内建函数（Build-in\n                      Functions）。但是与另外两种语言相比，Less\n                      缺少自定义函数的功能（可以使用 Mixins 结合 Guard\n                      实现类似效果），而 Stylus 提供了超过 60\n                      个内建函数，更有利于编写复杂的计算函数。\n                    </p>\n\n                    <p data-nodeid=\"29703\">\n                      在<strong data-nodeid=\"29721\">语法方面</strong>：<strong\n                        data-nodeid=\"29722\"\n                        >Sass</strong\n                      >\n                      支持 .scss 与 .sass 两种文件格式。差异点是 .scss\n                      在语法上更接近 CSS，需要括号、分号等标识符，而 Sass\n                      相比之下，在语法上做了简化，去掉了 CSS 规则的括号分号等\n                      （增加对应标识符会导致报错） 。<strong data-nodeid=\"29723\"\n                        >Less</strong\n                      >\n                      的整体语法更接近 .scss。<strong data-nodeid=\"29724\"\n                        >Stylus</strong\n                      >\n                      则同时支持类似 .sass 的精简语法和普通 CSS\n                      语法。语法细节上也各不相同，示例如下：\n                    </p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">//scss</span>\n</div></li><li><div class=\"code-word\">$red: <span class=\"hljs-string\">'#900'</span>;\n</div></li><li><div class=\"code-word\">div {\n</div></li><li><div class=\"code-word\">  color: $red;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//sass</span>\n</div></li><li><div class=\"code-word\">$red: <span class=\"hljs-string\">'#900'</span>\n</div></li><li><div class=\"code-word\">div\n</div></li><li><div class=\"code-word\">  color: $red\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//less</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-meta\">@green</span>: <span class=\"hljs-string\">'#090'</span>;\n</div></li><li><div class=\"code-word\">div {\n</div></li><li><div class=\"code-word\">  color: <span class=\"hljs-meta\">@green</span>;\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//stylus</span>\n</div></li><li><div class=\"code-word\">$blue = <span class=\"hljs-string\">'#009'</span>\n</div></li><li><div class=\"code-word\">div\n</div></li><li><div class=\"code-word\">  color: $blue\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1469\">\n                      从<strong data-nodeid=\"1639\">安装使用</strong>方面来看：\n                    </p>\n                    <ul data-nodeid=\"38586\">\n                      <li data-nodeid=\"38587\">\n                        <p data-nodeid=\"38588\">\n                          Sass 目前有两种 npm 编译安装包，即基于 LibSass 的\n                          node-sass 和基于 dart-sass 的 Sass。官方推荐为\n                          dart-sass，它不仅在安装速度上更快，而且支持更多 Sass\n                          内置特性，且支持 Yarn 的 PnP 功能。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"38589\">\n                        <p data-nodeid=\"38590\">\n                          如果使用 Webpack 构建，三种语言对应的预处理器分别是\n                          sass-loader、 less-loader、\n                          stylus-loader。需要注意的是 sass-loader 和\n                          stylus-loader 安装时都需要同时安装独立编译包 Sass /\n                          node-sass 和 Stylus，而 less-loader\n                          则不强制要求（也可以单独安装并在配置中指定不同的编译包版本）。此外，如第一课时中提到的，\n                          sass-loader 在处理 Partial 文件中的资源路径时需要增加\n                          resolve-url-loader（以及 sass-loader 中需要<a\n                            href=\"https://www.npmjs.com/package/resolve-url-loader#user-content-configure-webpack\"\n                            data-nodeid=\"38595\"\n                            >开启 sourceMap 参数</a\n                          >） 以避免编译时的报错。对应的，stylus-loader 需要增加\n                          “resolve url” 参数，而 less-loader\n                          则不需要。具体示例参见课件代码<a\n                            href=\"https://github.com/fe-efficiency/lessons_fe_efficiency/tree/master/05_coding_efficiency\"\n                            data-nodeid=\"38603\"\n                            >05_coding_efficiency</a\n                          >。\n                        </p>\n                      </li>\n                    </ul>\n\n                    <h4 data-nodeid=\"1475\">Pug</h4>\n                    <p data-nodeid=\"37102\">\n                      对于 HTML 模板的预处理语言选择而言，目前主流的是<a\n                        href=\"https://pugjs.org/\"\n                        data-nodeid=\"37106\"\n                        >Pug</a\n                      >****（这里考虑的是预处理语言对于效率的提升，因此一些纯模板语言，如<strong\n                        data-nodeid=\"37124\"\n                        >EJS</strong\n                      >，则不在讨论范围内。此外，基于其他技术栈的模板语言，例如\n                      Ruby 的<strong data-nodeid=\"37125\">Haml</strong>和<strong\n                        data-nodeid=\"37126\"\n                        >Slim</strong\n                      >，在前端工程化中的应用也并不多，因此也不在这里讨论）。\n                    </p>\n\n                    <p data-nodeid=\"1477\">\n                      Pug 的前身名叫<strong data-nodeid=\"1684\">Jade</strong\n                      >（2010），2016 年时因为和同名软件商标冲突而改名为了\n                      Pug。语法示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"yaml\"><ol><li><div class=\"code-word\"><span class=\"hljs-string\">//pug</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">html</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">head</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">body</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">p.foo</span> <span class=\"hljs-string\">Hello</span> <span class=\"hljs-string\">World</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">//html</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-string\">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p</span> <span class=\"hljs-string\">class=\"foo\"&gt;Hello</span> <span class=\"hljs-string\">World&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1479\">\n                      在功能方面，除了简化标签书写外，还支持迭代（Iteration）、条件（Condition）、扩展（Extend）、包含（Include）、混合（Mixins）等逻辑功能。\n                    </p>\n                    <p data-nodeid=\"40059\">\n                      在 Vue 开发中，Vue 文件的 template 支持添加\n                      lang=\"pug\"，相应的在 vue-cli-service 的 Webpack\n                      配置中，内置了<a\n                        href=\"https://github.com/pugjs/pug-loader\"\n                        data-nodeid=\"40067\"\n                        >pug-loader</a\n                      >\n                      作为预处理器。而在 React 开发中，则可以通过\n                      <a\n                        href=\"https://github.com/pugjs/babel-plugin-transform-react-pug\"\n                        data-nodeid=\"40071\"\n                        >babel 插件</a\n                      >获得支持。\n                    </p>\n\n                    <h4 data-nodeid=\"1481\">其他</h4>\n                    <p data-nodeid=\"43681\">\n                      上面主要介绍了 CSS 和 HTML\n                      的主流预处理语言，同样具有精简语法功能的还有对应\n                      JavaScript 的 CoffeeScript 和对应 JSON 的 YAML\n                      等。但是，由于 JavaScript\n                      代码本身的逻辑性要重于输入的便捷性，且随着 ES6\n                      语法的普及，原本 CoffeeScript 诞生时要解决的问题已逐渐被\n                      ES6\n                      的语法所取代，因此目前主流的开发技术栈中已不再有它的身影。而\n                      YAML 语言目前主要在一些配置上使用，例如 Dockerfile\n                      和一些持续集成工具（CI）的配置文件，在开发语言中并不涉及，因此这里也不展开介绍了。\n                    </p>\n\n                    <h3 data-nodeid=\"1483\">使用代码生成工具</h3>\n                    <p data-nodeid=\"1484\">\n                      除了使用上面介绍的预处理语言进行开发外，我们也可以使用\n                      IDE（Integrated Development\n                      Environment，集成开发环境，即我们通常说的编辑器）的相关预设功能来帮助生成代码。这些功能主要包括：智能帮助、Snippet\n                      和 Emmet（<strong data-nodeid=\"1707\">注意</strong\n                      >：对于预处理语言文件来说，通常 IDE\n                      中需要安装对应文件类型的识别扩展，才能在文件中使用这些辅助功能）。这里重点介绍后两种。\n                    </p>\n                    <p data-nodeid=\"1485\">\n                      通常在 IDE 中会默认内置一些<strong data-nodeid=\"1717\"\n                        >智能帮助</strong\n                      >（例如 VSCode 中的<strong data-nodeid=\"1718\"\n                        >IntelliSense</strong\n                      >）功能，例如输入时的联想匹配、自动完成、类型提示、语法检查等。但是很多场景下，常常有些固定格式的语句或代码块需要重复输入，这个时候就需要用到下面介绍的功能了。\n                    </p>\n                    <h4 data-nodeid=\"1486\">Snippet</h4>\n                    <p data-nodeid=\"44403\">\n                      <strong data-nodeid=\"44408\">Snippet</strong>\n                      是指开发过程中用户在 IDE\n                      内使用的可复用代码片段，大部分主流的 IDE 中都包含了\n                      Snippet\n                      的功能，就像使用脚手架模板生成一个项目的基础代码那样，开发者可以在\n                      IDE\n                      中通过安装扩展来使用预设的片段，也可以自定义代码片段，并在之后的开发中使用它们。\n                    </p>\n\n                    <p data-nodeid=\"1488\">\n                      以 VS Code 为例，在扩展商店中搜索 Snippet\n                      可以找到各种语言的代码片段包。例如下图中的<a\n                        href=\"https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets\"\n                        data-nodeid=\"1728\"\n                        >Javascript(ES6) code snippets</a\n                      >，提供了 JavaScript 常用的 import 、console\n                      等语句的缩写。安装后，输入缩写就能快速生成对应语句。\n                    </p>\n                    <p data-nodeid=\"1489\">\n                      <img\n                        alt=\"image (1).png\"\n                        src=\"https://s0.lgstatic.com/i/image/M00/45/E2/CgqCHl9Dip2AHL4kAAOw0HH_-JE819.png\"\n                        data-nodeid=\"1732\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1490\">\n                      除了使用扩展包自带的预设片段外，IDE\n                      还提供了用户自定义代码片段的功能。以 VS Code\n                      为例，通过选择菜单中的\"Code-首选项-用户片段\"，即可弹出选择或新增代码片段的弹窗，选择或创建对应\n                      .code-snippets\n                      文件后即可编辑自定义的片段。就像下面示例代码中我们创建了一个简单的生成\n                      TypeScript 接口代码的片段，保存后在项目代码里输入 tif\n                      后再按回车，就能看到对应生成的片段了：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">//sample.code-snippets</span>\n</div></li><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"Typescript Interface\"</span>: { <span class=\"hljs-comment\">//片段名称，下面描述不存在时显示在IDE智能提示中</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"scope\"</span>: <span class=\"hljs-string\">\"typescript\"</span>, <span class=\"hljs-comment\">//语言的作用域，不填写时默认对所有文件有效</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"prefix\"</span>: <span class=\"hljs-string\">\"tif\"</span>,  <span class=\"hljs-comment\">//触发片段的输入前缀字符(输入第一个字符时即开始匹配)</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"body\"</span>: [       <span class=\"hljs-comment\">//片段内容</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"interface ${1:IFName} {\"</span>, <span class=\"hljs-comment\">//$1,$2..为片段生成后光标位置，通过tab切换</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"\\t${2:key}: ${3:value}\"</span>, <span class=\"hljs-comment\">//${n:xx}的xx为占位文本</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"}\"</span>\n</div></li><li><div class=\"code-word\">    ],\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"output typescript interface\"</span> <span class=\"hljs-comment\">//描述，显示在智能提示中</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//任意.ts文件中输入tif+回车后即可生成下面的代码，同时光标停留在IFName处</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">IFName</span> </span>{\n</div></li><li><div class=\"code-word\">  key: value\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1492\">\n                      通过上面演示的自定义功能，我们就可以编写自身开发常用的个性预设片段了。相比使用第三方预设，自定义的预设更灵活也更便于记忆。两者相结合，能够大大提升我们编码的效率。同时，针对实际业务场景定制的自定义片段文件，也可以在团队内共享和共同维护，以提升团队整体的效率。\n                    </p>\n                    <h4 data-nodeid=\"1493\">Emmet</h4>\n                    <p data-nodeid=\"1494\">\n                      <a href=\"https://emmet.io/\" data-nodeid=\"1742\">Emmet</a\n                      >****（前身为 Zen\n                      Coding）是一个面向各种编辑器（几乎所有你见过的前端代码编辑器都支持该插件）的\n                      Web 开发插件，用于高速编写和编辑结构化的代码，例如 Html 、\n                      Xml 、 CSS 等。从下面官方的示例图中可以看到，简单的输入 !\n                      或 html:5 再输入 tab 键，编辑器中就会自动生成完整的 html5\n                      基本标签结构（完整的缩写规则列表可在<a\n                        href=\"https://github.com/emmetio/emmet/tree/master/snippets\"\n                        data-nodeid=\"1752\"\n                        >官方配置</a\n                      >中查找）：\n                    </p>\n                    <p data-nodeid=\"1495\">\n                      <img\n                        alt=\"emmet-sample.gif\"\n                        src=\"https://s0.lgstatic.com/i/image/M00/45/E2/CgqCHl9DiriAZmLsAADAvMd_sH0503.gif\"\n                        data-nodeid=\"1756\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1496\">它的主要功能包括：</p>\n                    <ul data-nodeid=\"1497\">\n                      <li data-nodeid=\"1498\">\n                        <p data-nodeid=\"1499\">缩写代码块：</p>\n                        <ul data-nodeid=\"1500\">\n                          <li data-nodeid=\"1501\">\n                            <p data-nodeid=\"1502\">\n                              支持子节点（&gt;）、兄弟节点（+）、父节点（^）、重复（*）、分组等节点关系运算符。\n                            </p>\n                          </li>\n                          <li data-nodeid=\"1503\">\n                            <p data-nodeid=\"1504\">\n                              支持 id、 class、序号 $\n                              和其他用[]表示的自定义属性。\n                            </p>\n                          </li>\n                          <li data-nodeid=\"1505\">\n                            <p data-nodeid=\"1506\">支持用 {} 表示的内容文本。</p>\n                          </li>\n                          <li data-nodeid=\"1507\">\n                            <p data-nodeid=\"1508\">\n                              支持在不带标签名称时根据父节点标签自动推断子节点。\n                            </p>\n                          </li>\n                        </ul>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"xml\"><ol><li><div class=\"code-word\">#main&gt;h1#header+ol&gt;.item-$${List Item$}*3^footer\n</div></li><li><div class=\"code-word\">//转换为\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"main\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"header\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item-01\"</span>&gt;</span>List Item1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item-02\"</span>&gt;</span>List Item2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item-03\"</span>&gt;</span>List Item3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"1510\">\n                      <li data-nodeid=\"1511\">\n                        <p data-nodeid=\"1512\">\n                          CSS 缩写：支持常用属性和值的联合缩写，例如以下代码：\n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">m10 =&gt; margin:<span class=\"hljs-number\">10</span>px\n</div></li><li><div class=\"code-word\">p100p =&gt; padding: <span class=\"hljs-number\">100</span>%；\n</div></li><li><div class=\"code-word\">bdrs1e =&gt; border-radius: <span class=\"hljs-number\">1</span>em;\n</div></li></ol></code></pre>\n                    </div>\n                    <ul data-nodeid=\"48749\">\n                      <li data-nodeid=\"48750\">\n                        <p data-nodeid=\"48751\">\n                          自定义片段：Emmet 也允许使用用户自定义的缩写规则。以\n                          VS Code 为例，首先修改设定中 emmet.extensionsPath\n                          字段，指向包含自定义规则 snippets.json\n                          文件的目录，然后在对应文件中增加 Emmet\n                          规则即可（保存规则文件后需要 reload\n                          编辑器才能使规则生效）。例如，在下面的示例中分别为\n                          html 和 css 增加了 dltd 和 wsnp 缩写规则：\n                        </p>\n                      </li>\n                    </ul>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"html\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"snippets\"</span>: {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"dltd\"</span>: <span class=\"hljs-string\">\"dl&gt;(dt+dd)*2\"</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"css\"</span>: {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-string\">\"snippets\"</span>:{\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">\"wsnp\"</span>: <span class=\"hljs-string\">\"white-space: no-wrap\"</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h3 data-nodeid=\"1518\">上述工具的一般使用建议</h3>\n                    <p data-nodeid=\"1519\">\n                      在介绍完上面的两类工具的基本信息和一般使用方法后，接下来我们再按照前端开发过程中的基本语言类型来讨论下不同语言的工具选择建议。\n                    </p>\n                    <h4 data-nodeid=\"1520\">Html</h4>\n                    <p data-nodeid=\"1521\">\n                      Html\n                      语言在如今组件化的前端项目中是作为一个组件的模板存在的。而编写组件模板与纯\n                      Html 的区别在于，组件模板中通常已经由框架提供了<strong\n                        data-nodeid=\"1778\"\n                        >数据注入</strong\n                      >（Interpolation）以及循环、条件等语法，组件化本身也解决了包含、混入等代码复用的问题。因此，在使用提效工具时，我们用到的主要还是简化标签书写的功能，而不太涉及工具本身提供的上述逻辑功能（混用逻辑功能可能反而导致代码的混乱和调试的困难）。当然，简化标签书写既可以选择使用\n                      Pug 语言，也可以使用 Emmet。\n                    </p>\n                    <p data-nodeid=\"1522\">\n                      使用 Pug 的好处主要在于，对于习惯书写带缩进的 html\n                      标签的同学而言<strong data-nodeid=\"1784\">上手更快</strong\n                      >，迁移成本低，且整体上阅读体验会更好一些。\n                    </p>\n                    <p data-nodeid=\"1523\">\n                      而 Emmet\n                      则相反，取消缩进后作为替代需要通过关系标识符来作为连接，书写习惯上<strong\n                        data-nodeid=\"1790\"\n                        >迁移成本略高</strong\n                      >一些，且由于是即时转换，转后代码的阅读体验与 Html\n                      没有区别。相对而言，由于可以自定义 Snippet\n                      来使用常用缩写，因此使用熟练后实际效率提升会更明显一些。\n                    </p>\n                    <h4 data-nodeid=\"1524\">CSS</h4>\n                    <p data-nodeid=\"1525\">\n                      毫无疑问，改进 CSS 书写效率就不会出现预处理语言和 Emmet\n                      二选一的情况了：\n                    </p>\n                    <ul data-nodeid=\"1526\">\n                      <li data-nodeid=\"1527\">\n                        <p data-nodeid=\"1528\">\n                          对于项目中需要大量书写 CSS\n                          的情况来说，使用预处理语言赋予的更强的代码抽象和组织能力，同时结合\n                          Emmet 提供的属性缩写功能，能够大大提升整体 CSS\n                          开发的效率。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1529\">\n                        <p data-nodeid=\"1530\">\n                          另一方面，如果项目中主要使用 UI\n                          组件库来呈现界面（例如大部分的中后台系统），而只需要少量编写自定义样式的话，使用\n                          Emmet 的优先级更高。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1531\">\n                        <p data-nodeid=\"1532\">\n                          CSS\n                          预处理语言的选择上，由于主要功能的相似性，团队统一选择其一即可。\n                        </p>\n                      </li>\n                    </ul>\n                    <h4 data-nodeid=\"1533\">JavaScript/TypeScript</h4>\n                    <p data-nodeid=\"51639\">\n                      JS/TS 的开发过程是非结构化的，通常 IDE\n                      自带的一系列智能帮助功能一般情况下就足以提供良好的开发体验。这里可以用到的提效工具主要还是使用\n                      Snippet，第三方扩展提供的常用语句的缩写，结合开发者自定义的常用片段（例如一个特定类型的模块初始化片段等），可以成为我们开发的瑞士军刀，再次提升编码效率。\n                    </p>\n\n                    <h3 data-nodeid=\"1535\">总结</h3>\n                    <p data-nodeid=\"53083\">\n                      这一课时我们讨论了两种类型的提效工具：预处理语言和代码生成工具。这两种工具在一些场景下是功能重叠的，例如\n                      Pug 和 Emmet 中的 html\n                      生成，在其他场合下则各有功效，相辅相成。熟练运用预处理语言提供的各种细节语法功能，善于总结开发中常用的自定义片段，掌握这些技能后，我们的开发效率就能走上一个新的台阶。\n                    </p>\n\n                    <p data-nodeid=\"1537\">\n                      这一课的讨论题是：第一课里我们讨论了用脚手架工具生成整个项目的初始化代码的过程，在这一课里我们也聊了用代码生成工具来生成代码片段的过程，那么在你的项目里有没有使用过其他粒度的代码生成工具呢？例如生成一个完整页面的工具？欢迎留言分享，我们会在之后的课程里再次展开这个话题。\n                    </p>\n            "}