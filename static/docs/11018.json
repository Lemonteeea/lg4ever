{"title":"第15讲：如何让浏览器更快地加载网络资源？","context":"\n                    <h3 data-nodeid=\"140072\">浏览器加载网络资源的速度</h3>\n\n                    <p data-nodeid=\"137891\">\n                      想要加快浏览器加载网络资源的速度，可以通过减少响应内容大小，比如使用\n                      gzip 算法压缩响应体内容和 HTTP/2\n                      的压缩头部功能；另一种更通用也更为重要的技术就是<strong\n                        data-nodeid=\"138007\"\n                        >使用缓存</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"141290\">\n                      下面两张截图分别是未使用缓存以及使用浏览器默认缓存的请求文件所消耗的时间，可以看出使用缓存之后加载时间大大缩短。\n                    </p>\n                    <p data-nodeid=\"141291\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/31/4D/CgqCHl8MKQyAOi4qAAAqnHUKGOQ421.png\"\n                        alt=\"Drawing 0.png\"\n                        data-nodeid=\"141295\"\n                      />\n                    </p>\n\n                    <div data-nodeid=\"144350\" class=\"\">\n                      <p style=\"text-align: center\">\n                        从服务端请求文件所消耗的时间\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"142513\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/31/42/Ciqc1F8MKRaAVJdKAAAsNYhLc68530.png\"\n                        alt=\"Drawing 1.png\"\n                        data-nodeid=\"142517\"\n                      />\n                    </p>\n\n                    <div data-nodeid=\"144959\" class=\"\">\n                      <p style=\"text-align: center\">\n                        从缓存中获取文件所消耗的时间\n                      </p>\n                    </div>\n\n                    <p data-nodeid=\"137897\">\n                      Web 缓存按存储位置来区分，包括<strong data-nodeid=\"138034\"\n                        >数据库缓存</strong\n                      >、<strong data-nodeid=\"138035\">服务端缓存</strong\n                      >、<strong data-nodeid=\"138036\">CDN 缓存</strong>和<strong\n                        data-nodeid=\"138037\"\n                        >浏览器缓存</strong\n                      >。这一课时我们着重介绍浏览器缓存。\n                    </p>\n                    <p data-nodeid=\"137898\">\n                      浏览器缓存的实现方式主要有两种：HTTP 和 ServiceWorker 。\n                    </p>\n                    <h3 data-nodeid=\"137899\">HTTP 缓存</h3>\n                    <p data-nodeid=\"137900\">\n                      使用缓存最大的问题往往不在于将资源缓存在什么位置或者如何读写资源，而在于如何保证缓存与实际资源一致的同时，提高缓存的命中率。也就是说尽可能地让浏览器从缓存中获取资源，但同时又要保证被使用的缓存与服务端最新的资源保持一致。\n                    </p>\n                    <p data-nodeid=\"137901\">\n                      为了达到这个目的，需要制定合适的缓存过期策略（简称“缓存策略”），HTTP\n                      支持的缓存策略有两种：<strong data-nodeid=\"138050\"\n                        >强制缓存</strong\n                      >和<strong data-nodeid=\"138051\">协商缓存</strong>。\n                    </p>\n                    <h4 data-nodeid=\"137902\">强制缓存</h4>\n                    <p data-nodeid=\"137903\">\n                      强制缓存是在浏览器加载资源的时候，先直接从缓存中查找请求结果，如果不存在该缓存结果，则直接向服务端发起请求。\n                    </p>\n                    <p data-nodeid=\"137904\">\n                      <strong data-nodeid=\"138061\">1.</strong>\n                      <strong data-nodeid=\"138062\">Expires</strong>\n                    </p>\n                    <p data-nodeid=\"146168\">\n                      HTTP/1.0 中可以使用响应头部字段 Expires\n                      来设置缓存时间，它对应一个未来的时间戳。客户端第一次请求时，服务端会在响应头部添加\n                      Expires 字段。当浏览器再次发送请求时，先会对比当前时间和\n                      Expires 对应的时间，如果当前时间早于 Expires\n                      时间，那么直接使用缓存；反之，需要再次发送请求。\n                    </p>\n                    <p data-nodeid=\"146169\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/31/42/Ciqc1F8MKT-AbvemAAAGfctSoow363.png\"\n                        alt=\"Drawing 2.png\"\n                        data-nodeid=\"146173\"\n                      />\n                    </p>\n\n                    <div data-nodeid=\"147395\" class=\"\">\n                      <p style=\"text-align: center\">\n                        响应头部中的 Expires 信息\n                      </p>\n                    </div>\n                    <p></p>\n\n                    <p data-nodeid=\"137908\">\n                      上述 Expires 信息告诉浏览器：在 2020.10.10\n                      日之前，可以直接使用该请求的缓存。但是使用 Expires\n                      响应头时容易产生一个问题，那就是服务端和浏览器的时间很可能不同，因此这个缓存过期时间容易出现偏差。同样的，客户端也可以通过修改系统时间来继续使用缓存或提前让缓存失效。\n                    </p>\n                    <p data-nodeid=\"137909\">\n                      为了解决这个问题，HTTP/1.1 提出了 Cache-Control\n                      响应头部字段。\n                    </p>\n                    <p data-nodeid=\"137910\">\n                      <strong data-nodeid=\"138077\">2.</strong>\n                      <strong data-nodeid=\"138078\">Cache-Control</strong>\n                    </p>\n                    <p data-nodeid=\"137911\">它的常用值有下面几个：</p>\n                    <ul data-nodeid=\"137912\">\n                      <li data-nodeid=\"137913\">\n                        <p data-nodeid=\"137914\">\n                          <strong data-nodeid=\"138084\">no-cache</strong\n                          >，表示使用协商缓存，即每次使用缓存前必须向服务端确认缓存资源是否更新；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137915\">\n                        <p data-nodeid=\"137916\">\n                          <strong data-nodeid=\"138089\">no-store</strong\n                          >，禁止浏览器以及所有中间缓存存储响应内容；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137917\">\n                        <p data-nodeid=\"137918\">\n                          <strong data-nodeid=\"138094\">public</strong\n                          >，公有缓存，表示可以被代理服务器缓存，可以被多个用户共享；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137919\">\n                        <p data-nodeid=\"137920\">\n                          <strong data-nodeid=\"138099\">private</strong\n                          >，私有缓存，不能被代理服务器缓存，不可以被多个用户共享；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137921\">\n                        <p data-nodeid=\"137922\">\n                          <strong data-nodeid=\"138104\">max-age</strong\n                          >，以秒为单位的数值，表示缓存的有效时间；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137923\">\n                        <p data-nodeid=\"137924\">\n                          <strong data-nodeid=\"138109\">must-revalidate</strong\n                          >，当缓存过期时，需要去服务端校验缓存的有效性。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"137925\">\n                      这几个值可以组合使用，比如像下面这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">cache-control: <span class=\"hljs-keyword\">public</span>, max-age=<span class=\"hljs-number\">31536000</span>\n</div></li></ol></code></pre>\n                    </div>\n\n                    <p data-nodeid=\"137927\">\n                      告诉浏览器该缓存为公有缓存，有效期 1 年。\n                    </p>\n                    <p data-nodeid=\"137928\">\n                      需要注意的是，cache-control 的 max-age 优先级高于\n                      Expires，也就是说如果它们同时出现，浏览器会使用 max-age\n                      的值。\n                    </p>\n                    <p data-nodeid=\"137929\">\n                      注意，虽然你可能在其他资料中看到可以使用 meta\n                      标签来设置缓存，比如像下面的形式：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"xml\"><ol><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span>&nbsp;<span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"expires\"</span>&nbsp;<span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"Wed,&nbsp;20&nbsp;Jun&nbsp;2021&nbsp;22:33:00&nbsp;GMT\"</span>\n</span></div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"137931\">\n                      但在 HTML5 规范中，并不支持这种方式，所以尽量不要使用 meta\n                      标签来设置缓存。\n                    </p>\n                    <h4 data-nodeid=\"137932\">协商缓存</h4>\n                    <p data-nodeid=\"137933\">\n                      协商缓存的更新策略是不再指定缓存的有效时间了，而是浏览器直接发送请求到服务端进行确认缓存是否更新，如果请求响应返回的\n                      HTTP 状态为\n                      304，则表示缓存仍然有效。控制缓存的难题就是从浏览器端转移到了服务端。\n                    </p>\n                    <p data-nodeid=\"137934\">\n                      <strong data-nodeid=\"138124\">1.</strong>\n                      <strong data-nodeid=\"138125\"\n                        >Last-Modified 和 If-Modified-Since</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"137935\">\n                      服务端要判断缓存有没有过期，只能将双方的资源进行对比。若浏览器直接把资源文件发送给服务端进行比对的话，网络开销太大，而且也会失去缓存的意义，所以显然是不可取的。有一种简单的判断方法，那就是通过响应头部字段\n                      Last-Modified 和请求头部字段 If-Modified-Since\n                      比对双方资源的修改时间。\n                    </p>\n                    <p data-nodeid=\"137936\">具体工作流程如下：</p>\n                    <ul data-nodeid=\"137937\">\n                      <li data-nodeid=\"137938\">\n                        <p data-nodeid=\"137939\">\n                          浏览器第一次请求资源，服务端在返回资源的响应头中加入\n                          Last-Modified\n                          字段，该字段表示这个资源在服务端上的最近修改时间；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137940\">\n                        <p data-nodeid=\"137941\">\n                          当浏览器再次向服务端请求该资源时，请求头部带上之前服务端返回的修改时间，这个请求头叫\n                          If-Modified-Since；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137942\">\n                        <p data-nodeid=\"137943\">\n                          服务端再次收到请求，根据请求头 If-Modified-Since\n                          的值，判断相关资源是否有变化，如果没有，则返回 304 Not\n                          Modified，并且不返回资源内容，浏览器使用资源缓存值；否则正常返回资源内容，且更新\n                          Last-Modified 响应头内容。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"137944\">\n                      这种方式虽然能判断缓存是否失效，但也存在两个问题：\n                    </p>\n                    <ul data-nodeid=\"137945\">\n                      <li data-nodeid=\"137946\">\n                        <p data-nodeid=\"137947\">\n                          <strong data-nodeid=\"138136\">精度问题</strong\n                          >，Last-Modified 的时间精度为秒，如果在 1\n                          秒内发生修改，那么缓存判断可能会失效；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137948\">\n                        <p data-nodeid=\"137949\">\n                          <strong data-nodeid=\"138141\">准度问题</strong\n                          >，考虑这样一种情况，如果一个文件被修改，然后又被还原，内容并没有发生变化，在这种情况下，浏览器的缓存还可以继续使用，但因为修改时间发生变化，也会重新返回重复的内容。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"137950\">\n                      <strong data-nodeid=\"138149\">2.</strong>\n                      <strong data-nodeid=\"138150\"\n                        >ETag 和 If-None-Match</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"137951\">\n                      为了解决精度问题和准度问题，HTTP\n                      提供了另一种不依赖于修改时间，而依赖于文件哈希值的精确判断缓存的方式，那就是响应头部字段\n                      ETag 和请求头部字段 If-None-Match。\n                    </p>\n                    <p data-nodeid=\"137952\">具体工作流程如下：</p>\n                    <ul data-nodeid=\"137953\">\n                      <li data-nodeid=\"137954\">\n                        <p data-nodeid=\"137955\">\n                          浏览器第一次请求资源，服务端在返响应头中加入 Etag\n                          字段，Etag 字段值为该资源的哈希值；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137956\">\n                        <p data-nodeid=\"137957\">\n                          当浏览器再次跟服务端请求这个资源时，在请求头上加上\n                          If-None-Match，值为之前响应头部字段 ETag 的值；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137958\">\n                        <p data-nodeid=\"137959\">\n                          服务端再次收到请求，将请求头 If-None-Match\n                          字段的值和响应资源的哈希值进行比对，如果两个值相同，则说明资源没有变化，返回\n                          304 Not\n                          Modified；否则就正常返回资源内容，无论是否发生变化，都会将计算出的哈希值放入响应头部的\n                          ETag 字段中。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"137960\">\n                      这种缓存比较的方式也会存在一些问题，具体表现在以下两个方面。\n                    </p>\n                    <ul data-nodeid=\"137961\">\n                      <li data-nodeid=\"137962\">\n                        <p data-nodeid=\"137963\">\n                          <strong data-nodeid=\"138161\">计算成本</strong\n                          >。生成哈希值相对于读取文件修改时间而言是一个开销比较大的操作，尤其是对于大文件而言。如果要精确计算则需读取完整的文件内容，如果从性能方面考虑，只读取文件部分内容，又容易判断出错。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"137964\">\n                        <p data-nodeid=\"137965\">\n                          <strong data-nodeid=\"138166\">计算误差</strong>。HTTP\n                          并没有规定哈希值的计算方法，所以不同服务端可能会采用不同的哈希值计算方式。这样带来的问题是，同一个资源，在两台服务端产生的\n                          Etag\n                          可能是不相同的，所以对于使用服务器集群来处理请求的网站来说，使用\n                          Etag 的缓存命中率会有所降低。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"137966\">\n                      需要注意的是，强制缓存的优先级高于协商缓存，在协商缓存中，Etag\n                      优先级比 Last-Modified\n                      高。既然协商缓存策略也存在一些缺陷，那么我们转移到浏览器端看看\n                      ServiceWorker 能不能给我们带来惊喜。\n                    </p>\n                    <h3 data-nodeid=\"137967\">ServiceWorker</h3>\n                    <p data-nodeid=\"137968\">\n                      ServiceWorker\n                      是浏览器在后台独立于网页运行的脚本，也可以这样理解，它是浏览器和服务端之间的代理服务器。ServiceWorker\n                      非常强大，可以实现包括推送通知和后台同步等功能，更多功能还在进一步扩展，但其最主要的功能是<strong\n                        data-nodeid=\"138174\"\n                        >实现离线缓存</strong\n                      >。\n                    </p>\n                    <h4 data-nodeid=\"137969\">1. 使用限制</h4>\n                    <p data-nodeid=\"137970\">\n                      越强大的东西往往越危险，所以浏览器对 ServiceWorker\n                      做了很多限制：\n                    </p>\n                    <ul data-nodeid=\"150719\">\n                      <li data-nodeid=\"150720\">\n                        <p data-nodeid=\"150721\">\n                          在 ServiceWorker 中无法直接访问 DOM，但可以通过\n                          postMessage 接口发送的消息来与其控制的页面进行通信；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"150722\">\n                        <p data-nodeid=\"150723\">\n                          ServiceWorker 只能在本地环境下或 HTTPS 网站中使用；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"150724\">\n                        <p data-nodeid=\"150725\">\n                          ServiceWorker 有作用域的限制，一个 ServiceWorker\n                          脚本只能作用于当前路径及其子路径；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"150726\">\n                        <p data-nodeid=\"150727\" class=\"te-preview-highlight\">\n                          由于 ServiceWorker\n                          属于实验性功能，所以兼容性方面会存在一些问题，具体兼容情况请看下面的截图。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"151340\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/31/43/Ciqc1F8MKYGAMRqhAACGt0bNhOM842.png\"\n                        alt=\"Drawing 3.png\"\n                        data-nodeid=\"151344\"\n                      />\n                    </p>\n                    <div data-nodeid=\"151341\">\n                      <p style=\"text-align: center\">\n                        ServiceWorker 在浏览器中的支持情况\n                      </p>\n                    </div>\n\n                    <h4 data-nodeid=\"137982\">2. 使用方法</h4>\n                    <p data-nodeid=\"137983\">\n                      在使用 ServiceWorker\n                      脚本之前先要通过“注册”的方式加载它。常见的注册代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span>&nbsp;(<span class=\"hljs-string\">'serviceWorker'</span>&nbsp;<span class=\"hljs-keyword\">in</span>&nbsp;<span class=\"hljs-built_in\">window</span>.navigator)&nbsp;{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-built_in\">window</span>.navigator.serviceWorker\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;.register(<span class=\"hljs-string\">'./sw.js'</span>)\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;.then(<span class=\"hljs-built_in\">console</span>.log)\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;.catch(<span class=\"hljs-built_in\">console</span>.error)\n</div></li><li><div class=\"code-word\">}&nbsp;<span class=\"hljs-keyword\">else</span>&nbsp;{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;<span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">'浏览器不支持&nbsp;ServiceWorker!'</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"137985\">\n                      首先考虑到浏览器的兼容性，判断 window.navigator 中是否存在\n                      serviceWorker 属性，然后通过调用这个属性的 register\n                      函数来告诉浏览器 ServiceWorker 脚本的路径。\n                    </p>\n                    <p data-nodeid=\"137986\">\n                      浏览器获取到 ServiceWorker\n                      脚本之后会进行解析，解析完成会进行安装。可以通过监听\n                      “install”\n                      事件来监听安装，但这个事件只会在第一次加载脚本的时候触发。要让脚本能够监听浏览器的网络请求，还需要激活脚本。\n                    </p>\n                    <p data-nodeid=\"137987\">\n                      在脚本被激活之后，我们就可以通过监听 fetch\n                      事件来拦截请求并加载缓存的资源了。\n                    </p>\n                    <p data-nodeid=\"137988\">\n                      下面是一个利用 ServiceWorker 内部的 caches\n                      对象来缓存文件的示例代码。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span>&nbsp;CACHE_NAME&nbsp;=&nbsp;<span class=\"hljs-string\">'ws'</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span>&nbsp;preloadUrls&nbsp;=&nbsp;[<span class=\"hljs-string\">'/index.css'</span>]\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">self.addEventListener(<span class=\"hljs-string\">'install'</span>,&nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;(<span class=\"hljs-params\">event</span>)&nbsp;</span>{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;event.waitUntil(\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;caches.open(CACHE_NAME)\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;(<span class=\"hljs-params\">cache</span>)&nbsp;</span>{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;cache.addAll(preloadUrls);\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;})\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;);\n</div></li><li><div class=\"code-word\">});\n</div></li><li><div class=\"code-word\">self.addEventListener(<span class=\"hljs-string\">'fetch'</span>,&nbsp;<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;(<span class=\"hljs-params\">event</span>)&nbsp;</span>{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;event.respondWith(\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;caches.match(event.request)\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;(<span class=\"hljs-params\">response</span>)&nbsp;</span>{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">if</span>&nbsp;(response)&nbsp;{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;response;\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;caches.open(CACHE_NAME).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>&nbsp;(<span class=\"hljs-params\">cache</span>)&nbsp;</span>{\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">const</span>&nbsp;path&nbsp;=&nbsp;event.request.url.replace(self.location.origin,&nbsp;<span class=\"hljs-string\">''</span>)\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\">return</span>&nbsp;cache.add(path)\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span>&nbsp;=&gt;</span>&nbsp;<span class=\"hljs-built_in\">console</span>.error(e))\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;&nbsp;&nbsp;})\n</div></li><li><div class=\"code-word\">&nbsp;&nbsp;);\n</div></li><li><div class=\"code-word\">})\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"137990\">\n                      这段代码首先监听 install 事件，在回调函数中调用了\n                      event.waitUntil() 函数并传入了一个 Promise\n                      对象。event.waitUntil\n                      用来监听多个异步操作，包括缓存打开和添加缓存路径。如果其中一个操作失败，则整个\n                      ServiceWorker 启动失败。\n                    </p>\n                    <p data-nodeid=\"137991\">\n                      然后监听了 fetch 事件，在回调函数内部调用了函数\n                      event.respondWith() 并传入了一个 Promise 对象，当捕获到\n                      fetch 请求时，会直接返回 event.respondWith 函数中 Promise\n                      对象的结果。\n                    </p>\n                    <p data-nodeid=\"137992\">\n                      在这个 Promise 对象中，我们通过 caches.match\n                      来和当前请求对象进行匹配，如果匹配上则直接返回匹配的缓存结果，否则返回该请求结果并缓存。\n                    </p>\n                    <h3 data-nodeid=\"137993\">总结</h3>\n                    <p data-nodeid=\"137994\">\n                      缓存是解决性能问题的重要手段，使用缓存的好处很多，除了能让浏览器更快地加载网络资源之外，还会带来其他好处，比如节省网络流量和带宽，以及减少服务端的负担。\n                    </p>\n                    <p data-nodeid=\"137995\">\n                      本课时介绍了 HTTP 缓存策略及 ServiceWorker，HTTP\n                      缓存可以分为强制缓存和协商缓存，强制缓存就是在缓存有效期内直接使用浏览器缓存；协商缓存则需要先询问服务端资源是否发生改变，如果未改变再使用浏览器缓存。\n                    </p>\n                    <p data-nodeid=\"137996\">\n                      ServiceWorker\n                      可以用来实现离线缓存，主要实现原理是拦截浏览器请求并返回缓存的资源文件。\n                    </p>\n                    <p data-nodeid=\"139450\">\n                      最后布置一道思考题：如果要让浏览器不缓存资源，你有哪些实现方式？\n                    </p>\n            "}