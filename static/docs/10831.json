{"title":"24 | Transition 组件：过渡动画的实现原理是怎样的？（上）","context":"\n                    <p data-nodeid=\"32454\">\n                      作为一名前端开发工程师，平时开发页面少不了要写一些过渡动画，通常可以用\n                      CSS 脚本来实现，当然一些时候也会使用 JavaScript 操作 DOM\n                      来实现动画。那么，如果我们使用 Vue.js\n                      技术栈，有没有好的实现动画的方式呢？\n                    </p>\n\n                    <p data-nodeid=\"31923\">\n                      答案是肯定的——有，Vue.js 提供了内置的 Transition\n                      组件，它可以让我们轻松实现动画过渡效果。\n                    </p>\n                    <h3 data-nodeid=\"31924\">Transition 组件的用法</h3>\n                    <blockquote data-nodeid=\"33515\">\n                      <p data-nodeid=\"33516\" class=\"\">\n                        如果你还不太熟悉 Transition\n                        组件的使用，我建议你先去看它的<a\n                          href=\"https://v3.vuejs.org/guide/transitions-enterleave.html\"\n                          data-nodeid=\"33520\"\n                          >官网文档</a\n                        >。\n                      </p>\n                    </blockquote>\n\n                    <p data-nodeid=\"31927\">\n                      Transition 组件通常有三类用法：CSS 过渡，CSS 动画和\n                      JavaScript\n                      钩子。我们分别用几个示例来说明，这里我希望你可以敲代码运行感受一下。\n                    </p>\n                    <p data-nodeid=\"34218\">首先来看 CSS 过渡：</p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"show = !show\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      Toggle render\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"fade\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    data() {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.fade-enter-active</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.fade-leave-active</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">transition</span>: opacity <span class=\"hljs-number\">0.5s</span> ease;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.fade-enter-from</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.fade-leave-to</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"34394\">\n                      CSS 过渡主要定义了一些过渡的 CSS\n                      样式，当我们点击按钮切换文本显隐的时候，就会应用这些 CSS\n                      样式，实现过渡效果。\n                    </p>\n                    <p data-nodeid=\"35237\">接着来看 CSS 动画：</p>\n\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"show = !show\"</span>&gt;</span>Toggle show<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"bounce\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>Vue is an awesome front-end MVVM framework. We can use it to build multiple apps.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    data() {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.bounce-enter-active</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">animation</span>: bounce-in <span class=\"hljs-number\">0.5s</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.bounce-leave-active</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">animation</span>: bounce-in <span class=\"hljs-number\">0.5s</span> reverse;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">@keyframes</span> bounce-in {\n</div></li><li><div class=\"code-word\">    0% {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">0</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    50% {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1.5</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    100% {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"34398\">\n                      和 CSS 过渡类似，CSS 动画主要定义了一些动画的 CSS\n                      样式，当我们去点击按钮切换文本显隐的时候，就会应用这些 CSS\n                      样式，实现动画效果。\n                    </p>\n                    <p data-nodeid=\"34399\">最后，是 JavaScript 钩子：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"show = !show\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      Toggle render\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span>\n</span></div></li><li><div class=\"code-word\">      @<span class=\"hljs-attr\">before-enter</span>=<span class=\"hljs-string\">\"beforeEnter\"</span>\n</div></li><li><div class=\"code-word\">      @<span class=\"hljs-attr\">enter</span>=<span class=\"hljs-string\">\"enter\"</span>\n</div></li><li><div class=\"code-word\">      @<span class=\"hljs-attr\">before-leave</span>=<span class=\"hljs-string\">\"beforeLeave\"</span>\n</div></li><li><div class=\"code-word\">      @<span class=\"hljs-attr\">leave</span>=<span class=\"hljs-string\">\"leave\"</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-attr\">css</span>=<span class=\"hljs-string\">\"false\"</span>\n</div></li><li><div class=\"code-word\">    &gt;\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    data() {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attr\">methods</span>: {\n</div></li><li><div class=\"code-word\">      beforeEnter(el) {\n</div></li><li><div class=\"code-word\">        el.style.opacity = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">        el.style.transition = <span class=\"hljs-string\">'opacity 0.5s ease'</span>\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">      enter(el) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-built_in\">this</span>.$el.offsetHeight\n</div></li><li><div class=\"code-word\">        el.style.opacity = <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">      beforeLeave(el) {\n</div></li><li><div class=\"code-word\">        el.style.opacity = <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">      },\n</div></li><li><div class=\"code-word\">      leave(el) {\n</div></li><li><div class=\"code-word\">        el.style.transition = <span class=\"hljs-string\">'opacity 0.5s ease'</span>\n</div></li><li><div class=\"code-word\">        el.style.opacity = <span class=\"hljs-number\">0</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"35411\">\n                      Transition 组件也允许在一个过渡组件中定义它过渡生命周期的\n                      JavaScript 钩子函数，我们可以在这些钩子函数中编写\n                      JavaScript 操作 DOM 来实现过渡动画效果。\n                    </p>\n                    <h3 data-nodeid=\"35412\">Transition 组件的核心思想</h3>\n                    <p data-nodeid=\"35413\">\n                      通过前面三个示例，我们不难发现都是在点击按钮时，通过修改\n                      v-if 的条件值来触发过渡动画的。\n                    </p>\n                    <p data-nodeid=\"35414\">\n                      其实 Transition 组件过渡动画的触发条件有以下四点：\n                    </p>\n                    <ul data-nodeid=\"35415\">\n                      <li data-nodeid=\"35416\">\n                        <p data-nodeid=\"35417\">条件渲染 (使用 v-if)；</p>\n                      </li>\n                      <li data-nodeid=\"35418\">\n                        <p data-nodeid=\"35419\">条件展示 (使用 v-show)；</p>\n                      </li>\n                      <li data-nodeid=\"35420\">\n                        <p data-nodeid=\"35421\">动态组件；</p>\n                      </li>\n                      <li data-nodeid=\"35422\">\n                        <p data-nodeid=\"35423\">组件根节点。</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"35424\">\n                      所以你只能在上述四种情况中使用 Transition\n                      组件，在进入/离开过渡的时候会有 6 个 class 切换。\n                    </p>\n                    <ol data-nodeid=\"36220\">\n                      <li data-nodeid=\"36221\">\n                        <p data-nodeid=\"36222\">\n                          <strong data-nodeid=\"36238\">v-enter-from</strong\n                          >：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"36223\">\n                        <p data-nodeid=\"36224\">\n                          <strong data-nodeid=\"36243\">v-enter-active</strong\n                          >：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"36225\">\n                        <p data-nodeid=\"36226\">\n                          <strong data-nodeid=\"36248\">v-enter-to</strong\n                          >：定义进入过渡的结束状态。在元素被插入之后下一帧生效\n                          (与此同时 v-enter-from\n                          被移除)，在过渡动画完成之后移除。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"36227\">\n                        <p data-nodeid=\"36228\">\n                          <strong data-nodeid=\"36253\">v-leave-from</strong\n                          >：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"36229\">\n                        <p data-nodeid=\"36230\">\n                          <strong data-nodeid=\"36258\">v-leave-active</strong\n                          >：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"36231\">\n                        <p data-nodeid=\"36232\">\n                          <strong data-nodeid=\"36263\">v-leave-to</strong\n                          >：定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效\n                          (与此同时 v-leave-from\n                          被删除)，在过渡动画完成之后移除。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"36233\" class=\"\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/55/F3/CgqCHl9q7XSAZVLbAAIHrhK4PT8658.png\"\n                        alt=\"transitions.png\"\n                        data-nodeid=\"36266\"\n                      />\n                    </p>\n\n                    <p data-nodeid=\"35439\">\n                      其实说白了 Transition 组件的核心思想就是，<strong\n                        data-nodeid=\"35518\"\n                        >Transition 包裹的元素插入删除时</strong\n                      >，<strong data-nodeid=\"35519\"\n                        >在适当的时机插入这些 CSS 样式</strong\n                      >，而这些 CSS 的实现则决定了元素的过渡动画。\n                    </p>\n                    <p data-nodeid=\"35440\">\n                      大致了解了 Transition\n                      组件的用法和核心思想后，接下来我们就来探究 Transition\n                      组件的实现原理。\n                    </p>\n                    <h3 data-nodeid=\"35441\">Transition 组件的实现原理</h3>\n                    <p data-nodeid=\"35442\">\n                      为了方便你的理解，我们还是结合示例来分析：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"show = !show\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      Toggle render\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"fade\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36606\">\n                      先来看模板编译后生成的 render 函数：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> { createVNode <span class=\"hljs-keyword\">as</span> _createVNode, openBlock <span class=\"hljs-keyword\">as</span> _openBlock, createBlock <span class=\"hljs-keyword\">as</span> _createBlock, createCommentVNode <span class=\"hljs-keyword\">as</span> _createCommentVNode, Transition <span class=\"hljs-keyword\">as</span> _Transition, withCtx <span class=\"hljs-keyword\">as</span> _withCtx } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"vue\"</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">_ctx, _cache, $props, $setup, $data, $options</span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (_openBlock(), _createBlock(<span class=\"hljs-string\">\"template\"</span>, <span class=\"hljs-literal\">null</span>, [\n</div></li><li><div class=\"code-word\">    _createVNode(<span class=\"hljs-string\">\"div\"</span>, { <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">\"app\"</span> }, [\n</div></li><li><div class=\"code-word\">      _createVNode(<span class=\"hljs-string\">\"button\"</span>, {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">onClick</span>: $event =&gt; (_ctx.show = !_ctx.show)\n</div></li><li><div class=\"code-word\">      }, <span class=\"hljs-string\">\" Toggle render \"</span>, <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">/* PROPS */</span>, [<span class=\"hljs-string\">\"onClick\"</span>]),\n</div></li><li><div class=\"code-word\">      _createVNode(_Transition, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"fade\"</span> }, {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">default</span>: _withCtx(<span class=\"hljs-function\">() =&gt;</span> [\n</div></li><li><div class=\"code-word\">          (_ctx.show)\n</div></li><li><div class=\"code-word\">            ? (_openBlock(), _createBlock(<span class=\"hljs-string\">\"p\"</span>, { <span class=\"hljs-attr\">key</span>: <span class=\"hljs-number\">0</span> }, <span class=\"hljs-string\">\"hello\"</span>))\n</div></li><li><div class=\"code-word\">            : _createCommentVNode(<span class=\"hljs-string\">\"v-if\"</span>, <span class=\"hljs-literal\">true</span>)\n</div></li><li><div class=\"code-word\">        ]),\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">_</span>: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">    ])\n</div></li><li><div class=\"code-word\">  ]))\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"36997\">\n                      对于 Transition 组件部分，生成的 render\n                      函数主要创建了Transition 组件 vnode，并且有一个默认插槽。\n                    </p>\n                    <p data-nodeid=\"36998\">\n                      我们接着来看 Transition 组件的定义：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> Transition = (props, { slots }) =&gt; h(BaseTransition, resolveTransitionProps(props), slots)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> BaseTransition = {\n</div></li><li><div class=\"code-word\">  name: \\`BaseTransition\\`,\n</div></li><li><div class=\"code-word\">  props: {\n</div></li><li><div class=\"code-word\">    mode: String,\n</div></li><li><div class=\"code-word\">    appear: Boolean,\n</div></li><li><div class=\"code-word\">    persisted: Boolean,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// enter</span>\n</div></li><li><div class=\"code-word\">    onBeforeEnter: TransitionHookValidator,\n</div></li><li><div class=\"code-word\">    onEnter: TransitionHookValidator,\n</div></li><li><div class=\"code-word\">    onAfterEnter: TransitionHookValidator,\n</div></li><li><div class=\"code-word\">    onEnterCancelled: TransitionHookValidator,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// leave</span>\n</div></li><li><div class=\"code-word\">    onBeforeLeave: TransitionHookValidator,\n</div></li><li><div class=\"code-word\">    onLeave: TransitionHookValidator,\n</div></li><li><div class=\"code-word\">    onAfterLeave: TransitionHookValidator,\n</div></li><li><div class=\"code-word\">    onLeaveCancelled: TransitionHookValidator,\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// appear</span>\n</div></li><li><div class=\"code-word\">    onBeforeAppear: TransitionHookValidator,\n</div></li><li><div class=\"code-word\">    onAppear: TransitionHookValidator,\n</div></li><li><div class=\"code-word\">    onAfterAppear: TransitionHookValidator,\n</div></li><li><div class=\"code-word\">    onAppearCancelled: TransitionHookValidator\n</div></li><li><div class=\"code-word\">  },\n</div></li><li><div class=\"code-word\">  setup(props, { slots }) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> instance = getCurrentInstance()\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> state = useTransitionState()\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\">let prevTransitionKey\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">return</span> <span class=\"hljs-params\">()</span> =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> children = slots.<span class=\"hljs-keyword\">default</span> &amp;&amp; getTransitionRawChildren(slots.<span class=\"hljs-keyword\">default</span>(), <span class=\"hljs-keyword\">true</span>)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!children || !children.length) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// Transition 组件只允许一个子元素节点，多个报警告，提示使用 TransitionGroup 组件</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) &amp;&amp; children.length &gt; <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">        warn(<span class=\"hljs-string\">'&lt;transition&gt; can only be used on a single element or component. Use '</span> +\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-string\">'&lt;transition-group&gt; for lists.'</span>)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 不需要追踪响应式，所以改成原始值，提升性能</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> rawProps = toRaw(props)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> { mode } = rawProps\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 检查 mode 是否合法</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> ((process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>) &amp;&amp; mode &amp;&amp; ![<span class=\"hljs-string\">'in-out'</span>, <span class=\"hljs-string\">'out-in'</span>, <span class=\"hljs-string\">'default'</span>].includes(mode)) {\n</div></li><li><div class=\"code-word\">        warn(\\`invalid &lt;transition&gt; mode: ${mode}\\`)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 获取第一个子元素节点</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> child = children[<span class=\"hljs-number\">0</span>]\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (state.isLeaving) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> emptyPlaceholder(child)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-comment\">// 处理 &lt;transition&gt;&lt;keep-alive/&gt;&lt;/transition&gt; 的情况</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> innerChild = getKeepAliveChild(child)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!innerChild) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> emptyPlaceholder(child)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance)\n</div></li><li><div class=\"code-word\">        setTransitionHooks(innerChild, enterHooks)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> oldChild = instance.subTree\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> oldInnerChild = oldChild &amp;&amp; getKeepAliveChild(oldChild)\n</div></li><li><div class=\"code-word\">      let transitionKeyChanged = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> { getTransitionKey } = innerChild.<span class=\"hljs-function\">type\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(getTransitionKey)</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> key = getTransitionKey()\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (prevTransitionKey === undefined) {\n</div></li><li><div class=\"code-word\">          prevTransitionKey = key\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key !== prevTransitionKey) {\n</div></li><li><div class=\"code-word\">          prevTransitionKey = key\n</div></li><li><div class=\"code-word\">          transitionKeyChanged = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (oldInnerChild &amp;&amp;\n</div></li><li><div class=\"code-word\">        oldInnerChild.type !== Comment &amp;&amp;\n</div></li><li><div class=\"code-word\">        (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">const</span> leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 更新旧树的钩子函数</span>\n</div></li><li><div class=\"code-word\">        setTransitionHooks(oldInnerChild, leavingHooks)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-comment\">// 在两个视图之间切换</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (mode === <span class=\"hljs-string\">'out-in'</span>) {\n</div></li><li><div class=\"code-word\">          state.isLeaving = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-comment\">// 返回空的占位符节点，当离开过渡结束后，重新渲染组件</span>\n</div></li><li><div class=\"code-word\">          leavingHooks.afterLeave = () =&gt; {\n</div></li><li><div class=\"code-word\">            state.isLeaving = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">            instance.update()\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span> emptyPlaceholder(child)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mode === <span class=\"hljs-string\">'in-out'</span>) {\n</div></li><li><div class=\"code-word\">          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) =&gt; {\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-keyword\">const</span> leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild)\n</div></li><li><div class=\"code-word\">            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild\n</div></li><li><div class=\"code-word\">            <span class=\"hljs-comment\">// early removal callback</span>\n</div></li><li><div class=\"code-word\">            el._leaveCb = () =&gt; {\n</div></li><li><div class=\"code-word\">              earlyRemove()\n</div></li><li><div class=\"code-word\">              el._leaveCb = undefined\n</div></li><li><div class=\"code-word\">              delete enterHooks.delayedLeave\n</div></li><li><div class=\"code-word\">            }\n</div></li><li><div class=\"code-word\">            enterHooks.delayedLeave = delayedLeave\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> child\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"37000\">\n                      可以看到，Transition 组件是在 BaseTransition\n                      的基础上封装的高阶函数式组件。由于整个 Transition\n                      的实现代码较多，我就挑重点，为你讲清楚整体的实现思路。\n                    </p>\n                    <p data-nodeid=\"37001\">\n                      我把 Transition\n                      组件的实现分成组件的渲染、钩子函数的执行、模式的应用三个部分去详细说明。\n                    </p>\n                    <h4 data-nodeid=\"37002\">组件的渲染</h4>\n                    <p data-nodeid=\"37003\">\n                      先来看 Transition 组件是如何渲染的。我们重点看 setup\n                      函数部分的逻辑。\n                    </p>\n                    <p data-nodeid=\"37004\">\n                      Transition 组件和前面学习的 KeepAlive\n                      组件一样，是一个抽象组件，组件本身不渲染任何实体节点，只渲染第一个子元素节点。\n                    </p>\n                    <blockquote data-nodeid=\"37005\">\n                      <p data-nodeid=\"37006\">\n                        注意，Transition\n                        组件内部只能嵌套一个子元素节点，如果有多个节点需要用\n                        TransitionGroup 组件。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"37007\">\n                      如果 Transition 组件内部嵌套的是 KeepAlive\n                      组件，那么它会继续查找 KeepAlive\n                      组件嵌套的第一个子元素节点，来作为渲染的元素节点。\n                    </p>\n                    <p data-nodeid=\"37008\">\n                      如果 Transition\n                      组件内部没有嵌套任何子节点，那么它会渲染空的注释节点。\n                    </p>\n                    <p data-nodeid=\"37009\">\n                      在渲染的过程中，Transition 组件还会通过\n                      resolveTransitionHooks\n                      去定义组件创建和删除阶段的钩子函数对象，然后再通过\n                      setTransitionHooks函数去把这个钩子函数对象设置到\n                      vnode.transition 上。\n                    </p>\n                    <p data-nodeid=\"37010\">\n                      渲染过程中，还会判断这是否是一次更新渲染，如果是会对不同的模式执行不同的处理逻辑，我会在后续介绍模式的应用时详细说明。\n                    </p>\n                    <p data-nodeid=\"37011\">\n                      以上就是 Transition\n                      组件渲染做的事情，你需要记住的是<strong\n                        data-nodeid=\"37035\"\n                        >Transition 渲染的是组件嵌套的第一个子元素节点</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"37012\">\n                      但是 Transition\n                      是如何在节点的创建和删除过程中设置那些与过渡动画相关的 CSS\n                      的呢？这些都与钩子函数相关，我们先来看 setTransitionHooks\n                      的实现，看看它定义的钩子函数对象是怎样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">resolveTransitionHooks</span><span class=\"hljs-params\">(vnode, props, state, instance)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { appear, mode, persisted = <span class=\"hljs-keyword\">false</span>, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> key = String(vnode.key)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> leavingVNodesCache = getLeavingNodesForType(state, vnode)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> callHook = (hook, args) =&gt; {\n</div></li><li><div class=\"code-word\">    hook &amp;&amp;\n</div></li><li><div class=\"code-word\">    callWithAsyncErrorHandling(hook, instance, <span class=\"hljs-number\">9</span> <span class=\"hljs-comment\">/* TRANSITION_HOOK */</span>, args)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> hooks = {\n</div></li><li><div class=\"code-word\">    mode,\n</div></li><li><div class=\"code-word\">    persisted,\n</div></li><li><div class=\"code-word\">    beforeEnter(el) {\n</div></li><li><div class=\"code-word\">      let hook = <span class=\"hljs-function\">onBeforeEnter\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(!state.isMounted)</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (appear) {\n</div></li><li><div class=\"code-word\">          hook = onBeforeAppear || onBeforeEnter\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (el._leaveCb) {\n</div></li><li><div class=\"code-word\">        el._leaveCb(<span class=\"hljs-keyword\">true</span> <span class=\"hljs-comment\">/* cancelled */</span>)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> leavingVNode = leavingVNodesCache[key]\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (leavingVNode &amp;&amp;\n</div></li><li><div class=\"code-word\">        isSameVNodeType(vnode, leavingVNode) &amp;&amp;\n</div></li><li><div class=\"code-word\">        leavingVNode.el._leaveCb) {\n</div></li><li><div class=\"code-word\">        leavingVNode.el._leaveCb()\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      callHook(hook, [el])\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    enter(el) {\n</div></li><li><div class=\"code-word\">      let hook = onEnter\n</div></li><li><div class=\"code-word\">      let afterHook = onAfterEnter\n</div></li><li><div class=\"code-word\">      let cancelHook = <span class=\"hljs-function\">onEnterCancelled\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(!state.isMounted)</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (appear) {\n</div></li><li><div class=\"code-word\">          hook = onAppear || onEnter\n</div></li><li><div class=\"code-word\">          afterHook = onAfterAppear || onAfterEnter\n</div></li><li><div class=\"code-word\">          cancelHook = onAppearCancelled || onEnterCancelled\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      let called = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> done = (el._enterCb = (cancelled) =&gt; {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (called)\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">        called = <span class=\"hljs-function\"><span class=\"hljs-keyword\">true</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(cancelled)</span> {\n</div></li><li><div class=\"code-word\">          callHook(cancelHook, [el])\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">          callHook(afterHook, [el])\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (hooks.delayedLeave) {\n</div></li><li><div class=\"code-word\">          hooks.delayedLeave()\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        el._enterCb = undefined\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (hook) {\n</div></li><li><div class=\"code-word\">        hook(el, done)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (hook.length &lt;= <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">          done()\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        done()\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    leave(el, remove) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> key = String(vnode.key)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (el._enterCb) {\n</div></li><li><div class=\"code-word\">        el._enterCb(<span class=\"hljs-keyword\">true</span> <span class=\"hljs-comment\">/* cancelled */</span>)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (state.isUnmounting) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> remove()\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      callHook(onBeforeLeave, [el])\n</div></li><li><div class=\"code-word\">      let called = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> done = (el._leaveCb = (cancelled) =&gt; {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (called)\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">        called = <span class=\"hljs-function\"><span class=\"hljs-keyword\">true</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">()</span>\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(cancelled)</span> {\n</div></li><li><div class=\"code-word\">          callHook(onLeaveCancelled, [el])\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">          callHook(onAfterLeave, [el])\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        el._leaveCb = <span class=\"hljs-function\">undefined\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(leavingVNodesCache[key] === vnode)</span> {\n</div></li><li><div class=\"code-word\">          delete leavingVNodesCache[key]\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">      leavingVNodesCache[key] = <span class=\"hljs-function\">vnode\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(onLeave)</span> {\n</div></li><li><div class=\"code-word\">        onLeave(el, done)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (onLeave.length &lt;= <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">          done()\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        done()\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    clone(vnode) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> resolveTransitionHooks(vnode, props, state, instance)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> hooks\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"37014\">\n                      钩子函数对象定义了 4 个钩子函数，分别是\n                      beforeEnter，enter，leave 和\n                      clone，它们的执行时机是什么，又是怎么处理 我们给\n                      Transition 组件传递的一些 Prop\n                      的？其中，beforeEnter、enter 和 leave\n                      发生在元素的插入和删除阶段，接下来我们就来分析这几个钩子函数的执行过程。\n                    </p>\n                    <p data-nodeid=\"37015\">\n                      好的，今天我们就先讲到这里，下节课继续分析钩子函数的执行。\n                    </p>\n                    <blockquote data-nodeid=\"37016\">\n                      <p data-nodeid=\"37017\">\n                        本节课的相关代码在源代码中的位置如下：<br />\n                        packages/runtime-core/src/components/BasetTransition.ts<br />\n                        packages/runtime-core/src/renderer.ts<br />\n                        packages/runtime-dom/src/components/Transition.ts\n                      </p>\n                    </blockquote>\n            "}