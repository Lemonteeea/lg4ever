{"title":"04 | 接口调试：Mock 工具如何快速进行接口调试？","context":"\n                    <p data-nodeid=\"1802\">\n                      上一课时我们讲了 source map 在开发调试中的作用，以及不同的\n                      source map\n                      策略对于构建时间和调试效果的影响。在课后留的讨论题是观察你项目里在开发和生产环境下使用的是哪一种\n                      source map\n                      类型，因为很多时候当我们用了预设好的脚手架工具后，这些细节可能不太关注到，希望借着这个题目能让你对这个方面的细节有更深入的理解。\n                    </p>\n\n                    <p data-nodeid=\"1030\">\n                      今天我们来聊一下前端开发流程中的 Mock 工具使用问题。\n                    </p>\n                    <h3 data-nodeid=\"1031\">什么是 Mock？</h3>\n                    <p data-nodeid=\"1032\">\n                      <a\n                        href=\"https://en.wikipedia.org/wiki/Mock_object\"\n                        data-nodeid=\"1136\"\n                        >Mock</a\n                      >\n                      在程序设计中是指使用模拟（Mock）的对象来替代真实对象，以测试其他对象的行为。而在前端开发流程中，我们说的\n                      Mock\n                      通常是指模拟数据（俗称假数据）以及生成和使用模拟数据的工具与流程。那么为什么要使用\n                      Mock\n                      数据呢？是因为在实际中，我们经常遇到以下令人困扰的问题。\n                    </p>\n                    <p data-nodeid=\"1033\">\n                      在一个前后端分离的项目开发流程中，项目的开发时间通常分为三块：前端开发时间\n                      t1，后端开发时间 t2，前后端联调时间\n                      t3。理想情况下，整体的项目开发时间是\n                      &lt;=max（t1，t2）+t3，即前后端同时开发，两端都开发完成后进入联调。甚至再进一步，为了提高效率，也可以将整个开发流程按功能点进行更细粒度地拆分，即在开发时间内，也可以在部分功能开发完成后立即进行这一部分的联调，以期望利用碎片化的时间来减少后期完整联调的时间。\n                    </p>\n                    <p data-nodeid=\"2318\">\n                      但现实中，随着项目前端交互流程的日益复杂化，在开发流程中，前端往往需要依赖一定的数据模型来组织页面与组件中的交互流程\n                      ，而数模型又依赖着后端提供的 API\n                      接口。也就是说，在新项目新功能的开发流程中，前端的开发时间多少，不只取决于自身开发部分的耗时，还依赖于后端开发完成的时间。那么如何实现前端的无依赖独立开发以提升效率呢？\n                    </p>\n\n                    <p data-nodeid=\"1035\">\n                      假设在后端实际 API\n                      功能完成之前，我们能获得对应的模拟数据作为接口的返回值来处理前端交互中的数据模型，待开发完成进入联调后再将假数据的部分切换到真实的后端服务接口数据，这样开发阶段的阻碍问题就解决了。事实上，使用\n                      Mock 数据已成为前端开发流程中必不可少的一环。\n                    </p>\n                    <h3 data-nodeid=\"1036\">选择 Mock 方案的考量标准</h3>\n                    <p data-nodeid=\"1037\">\n                      对于在前端开发中使用 Mock\n                      数据的需求，实现路径有很多，例如：\n                    </p>\n                    <ol data-nodeid=\"1038\">\n                      <li data-nodeid=\"1039\">\n                        <p data-nodeid=\"1040\">\n                          可以直接在代码中侵入式地书写静态返回数据来调试相关逻辑。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1041\">\n                        <p data-nodeid=\"1042\">\n                          可以使用后端开发服务作为 Mock\n                          服务，将未实现的功能在后端返回 Mock 数据。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1043\">\n                        <p data-nodeid=\"1044\">\n                          可以通过一些本地 Mock 工具，使用项目本地化的 Mock\n                          规则文件来生成 Mock 数据。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1045\">\n                        <p data-nodeid=\"1046\">\n                          可以使用功能更丰富的接口管理工具来提供独立的 Mock\n                          能力。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1047\">\n                      这里面，第一种书写静态返回数据的方式和第二种开发服务端返回假数据的方式可能是前端同学从直觉上最容易理解和实践的。但是对于第一种方案而言，代码的维护成本、复杂接口的数据实现和处理以及特殊字段的额外处理等因素，都导致了它在实际开发过程中的使用场景非常局限；而第二种方案仍然依赖后端提供相应的服务，在独立性、稳定性与灵活性方面也难以达到\n                      Mock 方案达成前端独立开发的要求。\n                    </p>\n                    <p data-nodeid=\"1048\">\n                      剩下的两种实现方式则各有其适用场景和局限性：在后端已提供接口文档，而团队未使用接口管理工具的情况下，第三种本地化的\n                      Mock\n                      工具使用成本更低；而反之，第四种则有一定的前期搭建和维护成本，但在前后端达成一致使用接口管理工具的情况下，整体效率更高。\n                    </p>\n                    <p data-nodeid=\"1049\">\n                      除了考虑不同实现路径外，对于相同的实现方式，可选择的工具也各有不同。在讨论具体的\n                      Mock 方案之前，我们先来聊下选择的参考依据：\n                    </p>\n                    <ol data-nodeid=\"1050\">\n                      <li data-nodeid=\"1051\">\n                        <p data-nodeid=\"1052\">\n                          <strong data-nodeid=\"1156\">仿真度</strong>：Mock\n                          数据作为实际前后端调用时的数据模拟，需要在接口定义上尽可能与后端实际提供接口的各方面保持一致。从接口名称、调用方法、请求头信息到返回头信息，返回值字段一致性越高，在后期切换到联调实际接口时花费的时间越短。因此，使用\n                          Mock\n                          数据前，需要使前后端在事先对接口的定义上达成一致。因此，数据定义的仿真度是决定实际模拟过程效率和质量的首要因素。这部分的工作通常在开发初期通过接口文档的方式来提供，或由提供类似功能的\n                          Mock 工具来提供。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1053\">\n                        <p data-nodeid=\"1054\">\n                          <strong data-nodeid=\"1161\">易用性</strong\n                          >：在定义完接口文档之后，下一步是生成 Mock\n                          数据。通常一个高效的 Mock\n                          工具需要具备将接口文档自动转换为 Mock\n                          接口的能力。接口文档作为前后端联调的一致性保证，当接口发生任何变化时都会首先更新到文档中，并自动反映到提供的\n                          Mock 数据中。同样，后端提供的真实服务也应当完整通过\n                          Mock 接口的测试，而这种自动输出 Mock\n                          数据，以及自动测试接口的能力也是整个 Mock\n                          方案易用性的考量标准之一。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1055\">\n                        <p data-nodeid=\"1056\">\n                          <strong data-nodeid=\"1166\">灵活性</strong\n                          >：通常来说，实际的接口调用中我们会根据不同的调用方式与传入参数等条件来输出不同的返回值，前端根据不同条件下返回值的差异做不同的交互处理。因此，在使用\n                          Mock 工具的过程中，对不同条件下返回不同数据的 Mock\n                          期望能力也是我们选择 Mock 方案的考虑点。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1057\">\n                      以上几点构成我们选择 Mock\n                      方案的基本考虑标准。接下来我们来了解一些前端领域主流的\n                      Mock 工具。\n                    </p>\n                    <h3 data-nodeid=\"1058\">几种主流的 Mock 工具介绍</h3>\n                    <h4 data-nodeid=\"1059\">Mock.js</h4>\n                    <p data-nodeid=\"1060\">\n                      <a\n                        href=\"https://github.com/nuysoft/Mock\"\n                        data-nodeid=\"1172\"\n                        >Mock.js</a\n                      >\n                      是前端领域流行的 Mock\n                      数据生成工具之一，后续许多功能更丰富的工具和系统在各自的\n                      Mock 功能部分都将它作为基础设施。\n                    </p>\n                    <p data-nodeid=\"1061\">\n                      Mock.js 的核心能力是定义了两类生成模拟数据的规范：<strong\n                        data-nodeid=\"1183\"\n                        >数据模板定义规范</strong\n                      >（Data Template Definition, DTD）与<strong\n                        data-nodeid=\"1184\"\n                        >数据占位符定义规范</strong\n                      >（Data Placeholder Definition,\n                      DPD），以及实现了应用相应规范生成模拟数据的方法。\n                    </p>\n                    <p data-nodeid=\"1062\">\n                      <strong data-nodeid=\"1188\"\n                        >数据模板定义规范（DTD）</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1063\">\n                      <strong data-nodeid=\"1201\">数据模板定义规范</strong\n                      >约定了可以通过“属性名|生成规则：属性值”这样的格式来生成模拟数据，例如（完整示例代码参见\n                      <a\n                        href=\"https://github.com/fe-efficiency/lessons_fe_efficiency/tree/master/04_mock\"\n                        data-nodeid=\"1199\"\n                        >04_mock</a\n                      >）：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">Mock.mock({\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"number|1-100\"</span>: <span class=\"hljs-number\">1</span>\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//Result: number为1-100内随机数，例如{number: 73}</span>\n</div></li><li><div class=\"code-word\">Mock.mock({\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"boo|1-100\"</span>: <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//Result: boo为true或false，其中true的概率为1%，例如{boo: false}</span>\n</div></li><li><div class=\"code-word\">Mock.mock({\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-string\">\"str|1-100\"</span>: <span class=\"hljs-string\">'1'</span>\n</div></li><li><div class=\"code-word\">})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//Result: str为1-100个随机长度的字符串'1'。例如{str: '11111'}</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1065\">\n                      从上面的例子可以看到，属性名只是作为生成数据的固定名称，而同样的生成规则下，随着属性值的不同，生成规则对应的内部处理逻辑也不同。在\n                      Mock.js 中，共定义了 7\n                      种生成规则：min-max、min-max.dmin-dmax、min-max.dcount、count、count.dmin-dmax、count.dcount、+step。根据这\n                      7\n                      种规则，再结合不同数据类型的属性值，就可以定义出任意我们所需要的随机数据生成逻辑。\n                    </p>\n                    <p data-nodeid=\"1066\">\n                      <strong data-nodeid=\"1206\"\n                        >数据占位符定义规范 （DPD）</strong\n                      >\n                    </p>\n                    <p data-nodeid=\"1067\">\n                      <strong data-nodeid=\"1219\">数据占位符定义规范</strong\n                      >则是对于随机数据的一系列常用类型预设，书写格式是'@占位符（参数\n                      [, 参数] ）'。如以下例子：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\">Mock.mock(<span class=\"hljs-string\">'@email'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//Result: 随机单词连接成的email数据，例如：\"n.clark@miller.io\"</span>\n</div></li><li><div class=\"code-word\">Mock.mock(<span class=\"hljs-string\">'@city(true)'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//Result: 随机中国省份+省内城市数据，例如：\"吉林省 辽源市\"</span>\n</div></li><li><div class=\"code-word\">Mock.mock({<span class=\"hljs-string\">'aa|1-3'</span>:[<span class=\"hljs-string\">'@cname()'</span>]})\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//Result: aa值为随机3个中文姓名的数组，例如{aa: ['张三','李四','王五']}</span>\n</div></li><li><div class=\"code-word\">Random.image(<span class=\"hljs-string\">'200x100'</span>, <span class=\"hljs-string\">'#894FC4'</span>, <span class=\"hljs-string\">'#FFF'</span>, <span class=\"hljs-string\">'png'</span>, <span class=\"hljs-string\">'!'</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//Result: 利用dummyimage库生成的图片url, \"http://dummyimage.com/200x100/894FC4/FFF.png\"</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1069\">\n                      从这些例子中可以看到，占位符既可以用于单独返回指定类型的随机数据，又能结合数据模板，作为模板中属性值的部分来生成更复杂的数据类型。Mock.js\n                      中定义了 9 大类共 42\n                      种占位符，相关更多占位符的说明和示例可以从官网中查找和使用。\n                    </p>\n                    <p data-nodeid=\"1070\">\n                      <strong data-nodeid=\"1224\">其他功能</strong>\n                    </p>\n                    <p data-nodeid=\"1071\">\n                      除了提供生成模拟数据的规范和方法外，Mock.js\n                      还提供了一些辅助功能，包括：\n                    </p>\n                    <ol data-nodeid=\"4978\">\n                      <li data-nodeid=\"4979\">\n                        <p data-nodeid=\"4980\">\n                          <strong data-nodeid=\"4989\">Ajax 请求拦截</strong\n                          >：Mock.mock 方法中支持传入 Ajax 请求的 url 和\n                          type，用于拦截特定 url\n                          的请求，直接将模拟数据作为响应值返回。这一功能方便我们在项目本地中使用\n                          Mock 数据做调试，其原理是覆盖了原生的 XMLHttpRequest\n                          对象，因此对于使用 fetch 作为接口请求的 API\n                          的项目还不能适用。此外，提供了 Mock.setup\n                          方法来设置拦截 Ajax 请求后的响应时间。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4981\">\n                        <p data-nodeid=\"4982\">\n                          <strong data-nodeid=\"4994\">数据验证</strong\n                          >：Mock.valid\n                          方法，验证指定数据和数据模板是否匹配。这一功能可以用于验证后端\n                          API 接口的返回值与对应 Mock 数据的规则描述是否冲突。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"4983\">\n                        <p data-nodeid=\"4984\">\n                          <strong data-nodeid=\"4999\">模板导出</strong\n                          >：Mock.toJSONSchema，将 Mock.js 风格的数据模板转换为\n                          JSONSchema。可用于将数据模板导入到其他支持 JSON Schema\n                          格式的工具中。\n                        </p>\n                      </li>\n                    </ol>\n\n                    <h4 data-nodeid=\"1079\">Faker.js</h4>\n                    <p data-nodeid=\"1080\">\n                      <a\n                        href=\"https://github.com/Marak/faker.js\"\n                        data-nodeid=\"1244\"\n                        >Faker.js</a\n                      >\n                      是另一个较热门的模拟数据生成工具。与 Mock.js\n                      相比，Faker.js 主要提供的是指定类型的随机数据，对应\n                      Mock.js 中的占位符类型数据。在 API\n                      的使用方面较直观，使用示例如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">//单独使用api方法</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> randomName = faker.name.findName(); <span class=\"hljs-comment\">// Rowan Nikolaus</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> randomEmail = faker.internet.email(); <span class=\"hljs-comment\">// Kassandra.Haley@erich.biz</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">var</span> randomCard = faker.helpers.createCard(); <span class=\"hljs-comment\">// random contact card containing many properties</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//使用fake来组合api</span>\n</div></li><li><div class=\"code-word\">faker.fake(<span class=\"hljs-string\">\"{{name.lastName}}, {{name.firstName}} {{name.suffix}}\"</span>)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// outputs: \"Marks, Dean Sr.\"</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1082\">\n                      除了在数据生成的规则上没有 Mock.js\n                      的数据模板规则那样灵活以外，对于一般的数据模拟需求，\n                      Faker.js\n                      已能很好地满足。此外，它还支持多种语言的本地化包，满足国际化站点开发的需求。\n                    </p>\n                    <p data-nodeid=\"1083\">\n                      以上两种工具在实际项目使用中，都需要在项目本地编写数据生成模板或方法，而后根据一定的方式拦截\n                      API 请求并指向本地生成的 Mock 数据。拦截的方法可以类似\n                      Mock.js 的覆盖 API\n                      调用对象，也可以是通过网络代理将后端域名指向本地目录。\n                    </p>\n                    <p data-nodeid=\"7062\">\n                      这种本地植入模拟数据生成器的方式可以在一定程度上提升前端独立开发调试的效率，但从整体前后端工作的效率上来看，并非最佳选择：\n                    </p>\n\n                    <ol data-nodeid=\"1085\">\n                      <li data-nodeid=\"1086\">\n                        <p data-nodeid=\"1087\">\n                          在使用 TypeScript 的项目中，数据模板和 TypeScript\n                          类型需要通过人工来保持一致，缺乏自动检验的功能。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1088\">\n                        <p data-nodeid=\"1089\">\n                          仍然需要后端编写完整的接口文档后才能开始编写数据生成逻辑。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1090\">\n                        <p data-nodeid=\"1091\">\n                          本地模拟数据规则本质上和接口文档脱离，当后端接口字段发生变化时无法感知，导致沟通调试成本增加，也对基于模拟数据的单元测试的效果产生影响。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"7578\">\n                      对于第一点，有种解决思路是基于 TypeScript\n                      接口类型描述对象来自动生成模拟数据。而对于后面两点，解决方案是将接口文档和\n                      Mock\n                      数据服务，以及接口测试工具结合在一起，合并成相关功能链路集成的平台和工具，例如下面介绍的两个：\n                    </p>\n\n                    <h4 data-nodeid=\"1093\">YApi</h4>\n                    <p data-nodeid=\"1094\">\n                      <a href=\"https://github.com/YMFE/yapi\" data-nodeid=\"1256\"\n                        >YApi</a\n                      >\n                      定义是开发、产品、测试人员共同使用的接口管理服务，其功能特点主要包括：\n                    </p>\n                    <ol data-nodeid=\"1095\">\n                      <li data-nodeid=\"1096\">\n                        <p data-nodeid=\"1097\">\n                          支持接口的定义、修改、运行、集合测试等。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1098\">\n                        <p data-nodeid=\"1099\">\n                          提供 Mock 服务，以定义的接口可以通过服务直接获取 Mock\n                          数据。Mock 定义中支持 JSON Schema 和\n                          Mock.js（不支持函数功能）。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1100\">\n                        <p data-nodeid=\"1101\">\n                          支持 Swagger 多种接口描述的数据导入与导出。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1102\">\n                        <p data-nodeid=\"1103\">\n                          支持部署到内网服务以及自定义插件。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1104\">\n                      <img\n                        alt=\"image.png\"\n                        src=\"https://s0.lgstatic.com/i/image/M00/44/E6/CgqCHl8_hPuAE9TjAALKNihxbeU968.png\"\n                        data-nodeid=\"1264\"\n                      />\n                    </p>\n                    <h4 data-nodeid=\"1105\">Apifox</h4>\n                    <p data-nodeid=\"1106\">\n                      <a href=\"https://www.apifox.cn/\" data-nodeid=\"1268\"\n                        >Apifox</a\n                      >\n                      是一个桌面应用类的接口管理工具。与 YApi\n                      相比，除了使用方式不同外，其主要特点还包括：\n                    </p>\n                    <ol data-nodeid=\"1107\">\n                      <li data-nodeid=\"1108\">\n                        <p data-nodeid=\"1109\">\n                          支持接口调试工具 Postman\n                          的特色功能，例如环境变量、Cookie/Session 全局共享等。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1110\">\n                        <p data-nodeid=\"1111\">\n                          对同一个接口支持多种用例管理（成功用例、错误用例等）。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1112\">\n                        <p data-nodeid=\"1113\">\n                          Mock\n                          数据功能方面支持自定义期望，支持自定义占位符规则等。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1114\">\n                        <p data-nodeid=\"1115\">\n                          支持生成自动业务代码和接口请求代码，支持自定义代码模板等。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1116\">\n                      <img\n                        alt=\"image (1).png\"\n                        src=\"https://s0.lgstatic.com/i/image/M00/44/E6/CgqCHl8_hQ6AR4HvAAWFAyE_iQ0413.png\"\n                        data-nodeid=\"1276\"\n                      />\n                    </p>\n                    <p data-nodeid=\"1117\">\n                      以上两种接口管理工具都包含了提供对应接口的 Mock\n                      服务的能力。相比于单独提供生成 Mock 数据能力的 Mock.js 和\n                      Faker.js，这类工具解决了接口定义与 Mock 数据脱离的问题：\n                    </p>\n                    <ol data-nodeid=\"1118\">\n                      <li data-nodeid=\"1119\">\n                        <p data-nodeid=\"1120\">\n                          在接口定义阶段，支持后端服务内定义的 Swagger 等 OPEN\n                          API\n                          风格的接口定义数据直接导入生成接口文档，也支持在工具界面内填写字段创建，创建时支持设定返回值的\n                          Mock 描述。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1121\">\n                        <p data-nodeid=\"1122\">\n                          在接口定义完成后，即可直接访问工具提供的 Mock\n                          服务接口供前端调用。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1123\">\n                        <p data-nodeid=\"1124\">\n                          在后端接口开发过程中，可通过工具提供的接口调试功能进行开发调试。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1125\">\n                        <p data-nodeid=\"1126\">\n                          在接口完成后的任意时间点，支持接口的自动化测试来保证功能与描述的一致性。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"1127\">\n                      通过这样的流程串联，来解决前后端开发过程中的接口联调效率问题。\n                    </p>\n                    <h3 data-nodeid=\"1128\">总结</h3>\n                    <p data-nodeid=\"1129\">\n                      通过这一课时的学习，我们一起讨论了 Mock\n                      工具在前后端分离开发流程中起到的作用，以及选择 Mock\n                      方案的一般考量标准，并重点介绍了几种 Mock\n                      工具：有专注于提供生成模拟数据这一核心能力的 Mock.js 和\n                      Faker.js，也有更平台化的内置 Mock 功能的 YApi 和\n                      Apifox。大家在项目的开发过程中，可以根据自身项目的情况来选择使用。\n                    </p>\n                    <p data-nodeid=\"1130\">\n                      课后讨论题：在你的项目开发中是否有用到本地或者服务化的\n                      Mock 工具呢？有用到的话谈谈你的使用感受吧。\n                    </p>\n            "}