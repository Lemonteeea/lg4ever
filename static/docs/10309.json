{"title":"08 | 深入 React-Hooks 工作机制：“原则”的背后，是“原理”","context":"\n                    <p data-nodeid=\"8633\" class=\"\">\n                      React 团队面向开发者给出了两条 React-Hooks\n                      的使用原则，原则的内容如下：\n                    </p>\n                    <ol data-nodeid=\"8634\">\n                      <li data-nodeid=\"8635\">\n                        <p data-nodeid=\"8636\">只在 React 函数中调用 Hook；</p>\n                      </li>\n                      <li data-nodeid=\"8637\">\n                        <p data-nodeid=\"8638\">\n                          不要在循环、条件或嵌套函数中调用 Hook。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"8639\">\n                      原则 1 无须多言，React-Hooks 本身就是 React\n                      组件的“钩子”，在普通函数里引入意义不大。我相信更多的人在原则\n                      2 上栽过跟头，或者说至今仍然对它半信半疑。其实，原则 2\n                      中强调的所有“<strong data-nodeid=\"8722\">不要</strong\n                      >”，都是在指向同一个目的，那就是<strong data-nodeid=\"8723\"\n                        >要确保 Hooks 在每次渲染时都保持同样的执行顺序</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"8640\">\n                      为什么顺序如此重要？这就要从 Hooks\n                      的实现机制说起了。这里我就以 useState\n                      为例，带你从现象入手，深度探索一番 React-Hooks\n                      的工作原理。\n                    </p>\n                    <p data-nodeid=\"8641\">\n                      注：本讲 Demo 基于 React 16.8.x 版本进行演示。\n                    </p>\n                    <h3 data-nodeid=\"8642\">\n                      从现象看问题：若不保证 Hooks 执行顺序，会带来什么麻烦？\n                    </h3>\n                    <p data-nodeid=\"8643\">先来看一个小 Demo：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"javascript\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">PersonalInfoComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 集中定义变量</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> name, age, career, setName, setCareer;\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 获取姓名状态</span>\n</div></li><li><div class=\"code-word\">  [name, setName] = useState(<span class=\"hljs-string\">\"修言\"</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 获取年龄状态</span>\n</div></li><li><div class=\"code-word\">  [age] = useState(<span class=\"hljs-string\">\"99\"</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 获取职业状态</span>\n</div></li><li><div class=\"code-word\">  [career, setCareer] = useState(<span class=\"hljs-string\">\"我是一个前端，爱吃小熊饼干\"</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 输出职业信息</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"career\"</span>, career);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 编写 UI 逻辑</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"personalInfo\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>姓名：{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>年龄：{age}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>职业：{career}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt; {\n</div></li><li><div class=\"code-word\">          setName(\"秀妍\");\n</div></li><li><div class=\"code-word\">        }}\n</div></li><li><div class=\"code-word\">      &gt;\n</div></li><li><div class=\"code-word\">        修改姓名\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> PersonalInfoComponent;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8645\">\n                      这个 PersonalInfoComponent 组件渲染出来的界面长这样：\n                    </p>\n                    <p data-nodeid=\"8646\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/89/5F/Ciqc1F_YT0uAT1kZAACw9EfbQe8557.png\"\n                        alt=\"1.png\"\n                        data-nodeid=\"8731\"\n                      />\n                    </p>\n                    <p data-nodeid=\"10684\" class=\"te-preview-highlight\">\n                      PersonalInfoComponent\n                      用于对个人信息进行展示，这里展示的内容包括姓名、年龄、职业。出于测试效果需要，PersonalInfoComponent\n                      还允许你点击“修改姓名”按钮修改姓名信息。点击一次后，“修言”会被修改为“秀妍”，如下图所示：\n                    </p>\n\n                    <p data-nodeid=\"8648\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/89/6A/CgqCHl_YT1qAUSuVAAC-xZcsk54138.png\"\n                        alt=\"2.png\"\n                        data-nodeid=\"8735\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8649\">\n                      到目前为止，组件的行为都是符合我们的预期的，一切看上去都是那么的和谐。但倘若我对代码做一丝小小的改变，把一部分的\n                      useState 操作放进 if\n                      语句里，事情就会变得大不一样。改动后的代码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// isMounted 用于记录是否已挂载（是否是首次渲染）</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> isMounted = <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">PersonalInfoComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 定义变量的逻辑不变</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> name, age, career, setName, setCareer;\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里追加对 isMounted 的输出，这是一个 debug 性质的操作</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"isMounted is\"</span>, isMounted);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里追加 if 逻辑：只有在首次渲染（组件还未挂载）时，才获取 name、age 两个状态</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!isMounted) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// eslint-disable-next-line</span>\n</div></li><li><div class=\"code-word\">    [name, setName] = useState(<span class=\"hljs-string\">\"修言\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// eslint-disable-next-line</span>\n</div></li><li><div class=\"code-word\">    [age] = useState(<span class=\"hljs-string\">\"99\"</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// if 内部的逻辑执行一次后，就将 isMounted 置为 true（说明已挂载，后续都不再是首次渲染了）</span>\n</div></li><li><div class=\"code-word\">    isMounted = <span class=\"hljs-literal\">true</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 对职业信息的获取逻辑不变</span>\n</div></li><li><div class=\"code-word\">  [career, setCareer] = useState(<span class=\"hljs-string\">\"我是一个前端，爱吃小熊饼干\"</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里追加对 career 的输出，这也是一个 debug 性质的操作</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"career\"</span>, career);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// UI 逻辑的改动在于，name和age成了可选的展示项，若值为空，则不展示</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"personalInfo\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      {name ? <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>姓名：{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span> : null}\n</div></li><li><div class=\"code-word\">      {age ? <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>年龄：{age}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span> : null}\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>职业：{career}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt; {\n</div></li><li><div class=\"code-word\">          setName(\"秀妍\");\n</div></li><li><div class=\"code-word\">        }}\n</div></li><li><div class=\"code-word\">      &gt;\n</div></li><li><div class=\"code-word\">        修改姓名\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> PersonalInfoComponent;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8651\">\n                      修改后的组件在初始渲染的时候，界面与上个版本无异：\n                    </p>\n                    <p data-nodeid=\"8652\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/67/64/CgqCHl-hJDaAC6-qAACIdJOIg3E041.png\"\n                        alt=\"Drawing 5.png\"\n                        data-nodeid=\"8740\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8653\">\n                      注意，你在自己电脑上模仿这段代码的时候，千万不要漏掉 if\n                      语句里面<code data-backticks=\"1\" data-nodeid=\"8742\"\n                        >// eslint-disable-next-line</code\n                      >这个注释——因为目前大部分的 React 项目都在内部预置了对\n                      React-Hooks-Rule（React-Hooks\n                      使用规则）的强校验，而示例代码中把 Hooks 放进 if\n                      语句的操作作为一种不合规操作，会被直接识别为 Error\n                      级别的错误，进而导致程序报错。这里我们只有将相关代码的\n                      eslint\n                      校验给禁用掉，才能够避免校验性质的报错，从而更直观地看到错误的效果到底是什么样的，进而理解错误的原因。\n                    </p>\n                    <p data-nodeid=\"8654\">\n                      修改后的组件在初始挂载的时候，实际执行的逻辑内容和上个版本是没有区别的，都涉及对\n                      name、age、career\n                      三个状态的获取和渲染。理论上来说，<strong\n                        data-nodeid=\"8749\"\n                        >变化应该发生在我单击“修改姓名”之后触发的二次渲染里</strong\n                      >：二次渲染时，isMounted 已经被置为 true，if\n                      内部的逻辑会被直接跳过。此时按照代码注释中给出的设计意图，这里我希望在二次渲染时，只获取并展示\n                      career\n                      这一个状态。那么事情是否会如我所愿呢？我们一起来看看单击“修改姓名”按钮后会发生什么：\n                    </p>\n                    <p data-nodeid=\"8655\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/67/64/CgqCHl-hJEOAMfdIAAJ8aDhIGdA549.png\"\n                        alt=\"Drawing 7.png\"\n                        data-nodeid=\"8752\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8656\">\n                      组件不仅没有像预期中一样发生界面变化，甚至直接报错了。报错信息提醒我们，这是因为“<strong\n                        data-nodeid=\"8758\"\n                        >组件渲染的 Hooks 比期望中更少</strong\n                      >”。\n                    </p>\n                    <p data-nodeid=\"8657\">\n                      确实，按照现有的逻辑，初始渲染调用了三次\n                      useState，而二次渲染时只会调用一次。但仅仅因为这个，就要报错吗？\n                    </p>\n                    <p data-nodeid=\"8658\">\n                      按道理来说，二次渲染的时候，只要我获取到的 career\n                      值没有问题，那么渲染就应该是没有问题的（因为二次渲染实际只会渲染\n                      career 这一个状态），React\n                      就没有理由阻止我的渲染动作。啊这……难道是 career\n                      出问题了吗？还好我们预先留了一手 Debug\n                      逻辑，每次渲染的时候都会尝试去输出一次 isMounted 和 career\n                      这两个变量的值。现在我们就赶紧来看看，这两个变量到底是什么情况。\n                    </p>\n                    <p data-nodeid=\"8659\">\n                      首先我将界面重置回初次挂载的状态，观察控制台的输出，如下图所示：\n                    </p>\n                    <p data-nodeid=\"8660\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/67/64/CgqCHl-hJHSAL8SuAAHP-0rTPKY784.png\"\n                        alt=\"Drawing 9.png\"\n                        data-nodeid=\"8764\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8661\">\n                      这里我把关键的 isMounted 和 career\n                      两个变量用红色框框圈了出来：isMounted 值为\n                      false，说明是初次渲染；career\n                      值为“我是一个前端，爱吃小熊饼干”，这也是没有问题的。\n                    </p>\n                    <p data-nodeid=\"8662\">\n                      接下来单击“修改姓名”按钮后，我们再来看一眼两个变量的内容，如下图所示：\n                    </p>\n                    <p data-nodeid=\"8663\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/67/64/CgqCHl-hJRiAP2doAAKt-ZhwxQ0744.png\"\n                        alt=\"图片11.png\"\n                        data-nodeid=\"8769\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8664\">\n                      二次渲染时，isMounted 为 true，这个没毛病。但是 career\n                      竟然被修改为了“秀妍”，这也太诡异了？代码里面可不是这么写的。赶紧回头确认一下按钮单击事件的回调内容，代码如下所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"> &lt;button\n</div></li><li><div class=\"code-word\">   onClick={() =&gt; {\n</div></li><li><div class=\"code-word\">    setName(<span class=\"hljs-string\">\"秀妍\"</span>);\n</div></li><li><div class=\"code-word\">  }}\n</div></li><li><div class=\"code-word\">   &gt;\n</div></li><li><div class=\"code-word\">  修改姓名\n</div></li><li><div class=\"code-word\">&lt;/button&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8666\">\n                      确实，代码是没错的，我们调用的是\n                      setName，那么它修改的状态也应该是 name，而不是 career。\n                    </p>\n                    <p data-nodeid=\"8667\">\n                      那为什么最后发生变化的竟然是 career\n                      呢？年轻人，不如我们一起来看一看 Hooks 的实现机制吧！\n                    </p>\n                    <h3 data-nodeid=\"8668\">\n                      从源码调用流程看原理：Hooks\n                      的正常运作，在底层依赖于顺序链表\n                    </h3>\n                    <p data-nodeid=\"8669\">\n                      这里强调“源码流程”而非“源码”，主要有两方面的考虑：\n                    </p>\n                    <ol data-nodeid=\"8670\">\n                      <li data-nodeid=\"8671\">\n                        <p data-nodeid=\"8672\">\n                          React-Hooks 在源码层面和 Fiber\n                          关联十分密切，我们目前仍然处于基础夯实阶段，对 Fiber\n                          机制相关的底层实现暂时没有讨论，盲目啃源码在这个阶段来说没有意义；\n                        </p>\n                      </li>\n                      <li data-nodeid=\"8673\">\n                        <p data-nodeid=\"8674\">\n                          原理 !==\n                          源码，阅读源码只是掌握原理的一种手段，在某些场景下，阅读源码确实能够迅速帮我们定位到问题的本质（比如\n                          React.createElement 的源码就可以快速帮我们理解 JSX\n                          转换出来的到底是什么东西）；而 React-Hooks\n                          的源码链路相对来说比较长，涉及的关键函数\n                          renderWithHooks\n                          中“脏逻辑”也比较多，整体来说，学习成本比较高，学习效果也难以保证。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"8675\">\n                      综上所述，这里我不会精细地贴出每一行具体的源码，而是针对关键方法做重点分析。同时我也<strong\n                        data-nodeid=\"8788\"\n                        >不建议你在对 Fiber 底层实现没有认知的前提下去和 Hooks\n                        源码死磕</strong\n                      >。对于搞清楚“Hooks\n                      的执行顺序为什么必须一样”这个问题来说，重要的并不是去细抠每一行代码到底都做了什么，而是要搞清楚整个<strong\n                        data-nodeid=\"8789\"\n                        >调用链路</strong\n                      >是什么样的。如果我们能够理解 Hooks\n                      在每个关键环节都做了哪些事情，同时也能理解这些关键环节是如何对最终的渲染结果产生影响的，那么理解\n                      Hooks 的工作机制对于你来说就不在话下了。\n                    </p>\n                    <h4 data-nodeid=\"8676\">\n                      以 useState 为例，分析 React-Hooks 的调用链路\n                    </h4>\n                    <p data-nodeid=\"8677\">\n                      首先要说明的是，React-Hooks\n                      的调用链路在首次渲染和更新阶段是不同的，这里我将两个阶段的链路各总结进了两张大图里，我们依次来看。首先是首次渲染的过程，请看下图：\n                    </p>\n                    <p data-nodeid=\"8678\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/67/59/Ciqc1F-hJYCAWVjCAAEtNT9pGHA170.png\"\n                        alt=\"图片12.png\"\n                        data-nodeid=\"8794\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8679\">\n                      在这个流程中，useState 触发的一系列操作最后会落到\n                      mountState 里面去，所以我们重点需要关注的就是 mountState\n                      做了什么事情。以下我为你提取了 mountState 的源码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 进入 mounState 逻辑</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">mountState</span><span class=\"hljs-params\">(initialState)</span> </span>{\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 将新的 hook 对象追加进链表尾部</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> hook = mountWorkInProgressHook();\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// initialState 可以是一个回调，若是回调，则取回调执行后的值</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (typeof initialState === <span class=\"hljs-string\">'function'</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// $FlowFixMe: Flow doesn't like mixed types</span>\n</div></li><li><div class=\"code-word\">    initialState = initialState();\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 创建当前 hook 对象的更新队列，这一步主要是为了能够依序保留 dispatch</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> queue = hook.queue = {\n</div></li><li><div class=\"code-word\">    last: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">    dispatch: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">    lastRenderedReducer: basicStateReducer,\n</div></li><li><div class=\"code-word\">    lastRenderedState: (initialState: any),\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 将 initialState 作为一个“记忆值”存下来</span>\n</div></li><li><div class=\"code-word\">  hook.memoizedState = hook.baseState = initialState;\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// dispatch 是由上下文中一个叫 dispatchAction 的方法创建的，这里不必纠结这个方法具体做了什么</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> dispatch = queue.dispatch = dispatchAction.bind(<span class=\"hljs-keyword\">null</span>, currentlyRenderingFiber$<span class=\"hljs-number\">1</span>, queue);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 返回目标数组，dispatch 其实就是示例中常常见到的 setXXX 这个函数，想不到吧？哈哈</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> [hook.memoizedState, dispatch];\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8681\">\n                      从这段源码中我们可以看出，<strong data-nodeid=\"8801\"\n                        >mounState 的主要工作是初始化 Hooks</strong\n                      >。在整段源码中，最需要关注的是 mountWorkInProgressHook\n                      方法，它为我们道出了 Hooks 背后的数据结构组织形式。以下是\n                      mountWorkInProgressHook 方法的源码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">mountWorkInProgressHook</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 注意，单个 hook 是以对象的形式存在的</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">var</span> hook = {\n</div></li><li><div class=\"code-word\">    memoizedState: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">    baseState: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">    baseQueue: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">    queue: <span class=\"hljs-keyword\">null</span>,\n</div></li><li><div class=\"code-word\">    next: <span class=\"hljs-keyword\">null</span>\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (workInProgressHook === <span class=\"hljs-keyword\">null</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 这行代码每个 React 版本不太一样，但做的都是同一件事：将 hook 作为链表的头节点处理</span>\n</div></li><li><div class=\"code-word\">    firstWorkInProgressHook = workInProgressHook = hook;\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 若链表不为空，则将 hook 追加到链表尾部</span>\n</div></li><li><div class=\"code-word\">    workInProgressHook = workInProgressHook.next = hook;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 返回当前的 hook</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> workInProgressHook;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8683\">\n                      到这里可以看出，<strong data-nodeid=\"8807\"\n                        >hook 相关的所有信息收敛在一个 hook 对象里，而 hook\n                        对象之间以单向链表的形式相互串联</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"8684\">接下来我们再看更新过程的大图：</p>\n                    <p data-nodeid=\"8685\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/67/59/Ciqc1F-hJTGANs5yAAD4e6ACv8Q643.png\"\n                        alt=\"图片13.png\"\n                        data-nodeid=\"8811\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8686\">\n                      根据图中高亮部分的提示不难看出，首次渲染和更新渲染的区别，在于调用的是\n                      mountState，还是 updateState。mountState\n                      做了什么，你已经非常清楚了；而 updateState\n                      之后的操作链路，虽然涉及的代码有很多，但其实做的事情很容易理解：<strong\n                        data-nodeid=\"8817\"\n                        >按顺序去遍历之前构建好的链表，取出对应的数据信息进行渲染</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"8687\">\n                      我们把 mountState 和 updateState\n                      做的事情放在一起来看：mountState（首次渲染）构建链表并渲染；updateState\n                      依次遍历链表并渲染。\n                    </p>\n                    <p data-nodeid=\"8688\">\n                      看到这里，你是不是已经大概知道怎么回事儿了？没错，<strong\n                        data-nodeid=\"8824\"\n                        >hooks 的渲染是通过“依次遍历”来定位每个 hooks\n                        内容的。如果前后两次读到的链表在顺序上出现差异，那么渲染的结果自然是不可控的</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"8689\">\n                      这个现象有点像我们构建了一个长度确定的数组，数组中的每个坑位都对应着一块确切的信息，后续每次从数组里取值的时候，只能够通过索引（也就是位置）来定位数据。也正因为如此，在许多文章里，都会直截了当地下这样的定义：Hooks\n                      的本质就是数组。但读完这一课时的内容你就会知道，<strong\n                        data-nodeid=\"8830\"\n                        >Hooks 的本质其实是链表</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"8690\">\n                      接下来我们把这个已知的结论还原到 PersonalInfoComponent\n                      里去，看看实际项目中，变量到底是怎么发生变化的。\n                    </p>\n                    <h3 data-nodeid=\"8691\">\n                      站在底层视角，重现 PersonalInfoComponent 组件的执行过程\n                    </h3>\n                    <p data-nodeid=\"8692\">\n                      我们先来复习一下修改过后的 PersonalInfoComponent\n                      组件代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">import</span> React, { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// isMounted 用于记录是否已挂载（是否是首次渲染）</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">let</span> isMounted = <span class=\"hljs-literal\">false</span>;\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">PersonalInfoComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 定义变量的逻辑不变</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">let</span> name, age, career, setName, setCareer;\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里追加对 isMounted 的输出，这是一个 debug 性质的操作</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"isMounted is\"</span>, isMounted);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里追加 if 逻辑：只有在首次渲染（组件还未挂载）时，才获取 name、age 两个状态</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!isMounted) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// eslint-disable-next-line</span>\n</div></li><li><div class=\"code-word\">    [name, setName] = useState(<span class=\"hljs-string\">\"修言\"</span>);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// eslint-disable-next-line</span>\n</div></li><li><div class=\"code-word\">    [age] = useState(<span class=\"hljs-string\">\"99\"</span>);\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// if 内部的逻辑执行一次后，就将 isMounted 置为 true（说明已挂载，后续都不再是首次渲染了）</span>\n</div></li><li><div class=\"code-word\">    isMounted = <span class=\"hljs-literal\">true</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 对职业信息的获取逻辑不变</span>\n</div></li><li><div class=\"code-word\">  [career, setCareer] = useState(<span class=\"hljs-string\">\"我是一个前端，爱吃小熊饼干\"</span>);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 这里追加对 career 的输出，这也是一个 debug 性质的操作</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"career\"</span>, career);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// UI 逻辑的改动在于，name 和 age 成了可选的展示项，若值为空，则不展示</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (\n</div></li><li><div class=\"code-word\">    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"personalInfo\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">      {name ? <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>姓名：{name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span> : null}\n</div></li><li><div class=\"code-word\">      {age ? <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>年龄：{age}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span> : null}\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>职业：{career}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>\n</span></div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt; {\n</div></li><li><div class=\"code-word\">          setName(\"秀妍\");\n</div></li><li><div class=\"code-word\">        }}\n</div></li><li><div class=\"code-word\">      &gt;\n</div></li><li><div class=\"code-word\">        修改姓名\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  );\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> PersonalInfoComponent;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8694\">\n                      从代码里面，我们可以提取出来的 useState 调用有三个：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[name, setName] = useState(<span class=\"hljs-string\">\"修言\"</span>);\n</div></li><li><div class=\"code-word\">[age] = useState(<span class=\"hljs-string\">\"99\"</span>);\n</div></li><li><div class=\"code-word\">[career, setCareer] = useState(<span class=\"hljs-string\">\"我是一个前端，爱吃小熊饼干\"</span>);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8696\">\n                      这三个调用在首次渲染的时候都会发生，伴随而来的链表结构如图所示：\n                    </p>\n                    <p data-nodeid=\"8697\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/67/59/Ciqc1F-hJUWAe27kAAC_6mxli_Q918.png\"\n                        alt=\"图片14.png\"\n                        data-nodeid=\"8838\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8698\">\n                      当首次渲染结束，进行二次渲染的时候，实际发生的 useState\n                      调用只有一个：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">useState(<span class=\"hljs-string\">\"我是一个前端，爱吃小熊饼干\"</span>)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"8700\">而此时的链表情况如下图所示：</p>\n                    <p data-nodeid=\"8701\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/67/65/CgqCHl-hJeCAY_aoAAF7Tt5bK8k880.png\"\n                        alt=\"图片15.png\"\n                        data-nodeid=\"8843\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8702\">\n                      我们再复习一遍更新（二次渲染）的时候会发生什么事情：updateState\n                      会依次遍历链表、读取数据并渲染。注意这个过程就像从数组中依次取值一样，是完全按照顺序（或者说索引）来的。因此\n                      React 不会看你命名的变量名是 career\n                      还是别的什么，它只认你这一次 useState\n                      调用，于是它难免会认为：<strong data-nodeid=\"8849\"\n                        >喔，原来你想要的是第一个位置的 hook 啊</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"8703\">然后就会有下面这样的效果：</p>\n                    <p data-nodeid=\"8704\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/67/65/CgqCHl-hJe2ATIhGAAHpze3gFHg893.png\"\n                        alt=\"图片16.png\"\n                        data-nodeid=\"8853\"\n                      />\n                    </p>\n                    <p data-nodeid=\"8705\">\n                      如此一来，career 就自然而然地取到了链表头节点 hook\n                      对象中的“秀妍”这个值。\n                    </p>\n                    <h3 data-nodeid=\"8706\">总结</h3>\n                    <p data-nodeid=\"8707\">\n                      三个课时学完了，到这里，我们对 React-Hooks\n                      的学习，才终于算是告一段落。\n                    </p>\n                    <p data-nodeid=\"8708\">\n                      在过去的三个课时里，我们摸排了“动机”，认知了“工作模式”，最后更是结合源码、深挖了一把\n                      React-Hooks\n                      的底层原理。我们所做的这所有的努力，都是为了能够真正吃透\n                      React-Hooks，不仅要确保实践中不出错，还要做到面试时有底气。\n                    </p>\n                    <p data-nodeid=\"8709\" class=\"\">\n                      接下来，我们就将进入整个专栏真正的“深水区”，逐步切入“虚拟\n                      DOM → Diff 算法 → Fiber\n                      架构”这个知识链路里来。在后续的学习中，我们将延续并且强化这种“刨根问底”的风格，紧贴源码、原理和面试题来向\n                      React\n                      最为核心的部分发起挑战。真正的战斗，才刚刚开始，大家加油~\n                    </p>\n            "}