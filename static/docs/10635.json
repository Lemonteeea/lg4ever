{"title":"34 | 备忘录模式：如何在聊天会话中记录历史消息？","context":"\n                    <p data-nodeid=\"1422\" class=\"\">\n                      相较于其他的设计模式，备忘录模式不算太常用，但好在这个模式理解、掌握起来并不难，代码实现也比较简单，应用场景就更是比较明确和有限，一般应用于编辑器或会话上下文中防丢失、撤销、恢复等场景中。所以，相较前面的课程来说，今天的内容学起来会比较轻松些。\n                    </p>\n                    <p data-nodeid=\"1423\">话不多说，让我们开始今天的学习吧。</p>\n                    <h3 data-nodeid=\"1424\">模式原理分析</h3>\n                    <p data-nodeid=\"1425\">\n                      备忘录模式的原始定义是：捕获并外部化对象的内部状态，以便以后可以恢复，所有这些都不会违反封装。\n                    </p>\n                    <p data-nodeid=\"1426\">\n                      这个定义是非常简单的，我们可以直接来看看备忘录模式对应的\n                      UML 图：\n                    </p>\n                    <p data-nodeid=\"2229\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image6/M01/4C/04/Cgp9HWDntbSAGwveAAJjXG5FbVg523.png\"\n                        alt=\"图片1.png\"\n                        data-nodeid=\"2232\"\n                      />\n                    </p>\n\n                    <div data-nodeid=\"1899\" class=\"\">\n                      <p style=\"text-align: center\">备忘录模式的 UML 图</p>\n                    </div>\n\n                    <p data-nodeid=\"1429\">\n                      从该 UML 图中，我们能看出备忘录模式包含两个关键角色。\n                    </p>\n                    <ul data-nodeid=\"1430\">\n                      <li data-nodeid=\"1431\">\n                        <p data-nodeid=\"1432\">\n                          原始对象（Originator）：除了创建自身所需要的属性和业务逻辑外，还通过提供方法\n                          create() 和 restore(memento) 来保存和恢复对象副本。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1433\">\n                        <p data-nodeid=\"1434\">\n                          备忘录（Memento）：用于保存原始对象的所有属性状态，以便在未来进行撤销操作。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1435\">\n                      下面我们再来看看 UML\n                      对应的代码实现。首先，我们创建原始对象\n                      Originator，对象中有四个属性，分别是 state\n                      用于显示当前对象状态，id、name、phone\n                      用来模拟业务属性，并添加 get、set 方法、create()\n                      方法用于创建备份对象，restore(memento) 用于恢复对象状态。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Originator</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String state = <span class=\"hljs-string\">\"原始对象\"</span>;  <span class=\"hljs-comment\">//打印当前状态</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String id;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String name;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String phone;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Originator</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//省略get、set方法</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Memento <span class=\"hljs-title\">create</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Memento(id, name, phone);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">restore</span><span class=\"hljs-params\">(Memento m)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.state = m.getState();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.id = m.getId();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.name = m.getName();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.phone = m.getPhone();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Originator{\"</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"state='\"</span> + state + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", id='\"</span> + id + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", name='\"</span> + name + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", phone='\"</span> + phone + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'}'</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1437\">\n                      然后，再来创建备忘录对象\n                      Memento，你会发现备忘录对象几乎就和原始对象的属性一模一样。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Memento</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String state = <span class=\"hljs-string\">\"从备份对象恢复为原始对象\"</span>;  <span class=\"hljs-comment\">//打印当前状态</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String id;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String name;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String phone;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Memento</span><span class=\"hljs-params\">(String id, String name, String phone)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.id = id;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.name = name;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.phone = phone;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">//省略get、set方法</span>\n</div></li><li><div class=\"code-word\">\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Memento{\"</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"state='\"</span> + state + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", id='\"</span> + id + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", name='\"</span> + name + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", phone='\"</span> + phone + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'}'</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1439\">\n                      接着我们运行一个单元测试，如下代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">        Originator originator = <span class=\"hljs-keyword\">new</span> Originator();\n</div></li><li><div class=\"code-word\">        originator.setId(<span class=\"hljs-string\">\"1\"</span>);\n</div></li><li><div class=\"code-word\">        originator.setName(<span class=\"hljs-string\">\"mickjoust\"</span>);\n</div></li><li><div class=\"code-word\">        originator.setPhone(<span class=\"hljs-string\">\"1234567890\"</span>);\n</div></li><li><div class=\"code-word\">        System.out.println(originator);\n</div></li><li><div class=\"code-word\">        Memento memento = originator.create();\n</div></li><li><div class=\"code-word\">        originator.setName(<span class=\"hljs-string\">\"修改\"</span>);\n</div></li><li><div class=\"code-word\">        System.out.println(originator);\n</div></li><li><div class=\"code-word\">        originator.restore(memento);\n</div></li><li><div class=\"code-word\">        System.out.println(originator);\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">//输出结果</span>\n</div></li><li><div class=\"code-word\">Originator{state=<span class=\"hljs-string\">'原始对象'</span>, id=<span class=\"hljs-string\">'1'</span>, name=<span class=\"hljs-string\">'mickjoust'</span>, phone=<span class=\"hljs-string\">'1234567890'</span>}\n</div></li><li><div class=\"code-word\">Originator{state=<span class=\"hljs-string\">'原始对象'</span>, id=<span class=\"hljs-string\">'1'</span>, name=<span class=\"hljs-string\">'修改'</span>, phone=<span class=\"hljs-string\">'1234567890'</span>}\n</div></li><li><div class=\"code-word\">Originator{state=<span class=\"hljs-string\">'从备份对象恢复为原始对象'</span>, id=<span class=\"hljs-string\">'1'</span>, name=<span class=\"hljs-string\">'mickjoust'</span>, phone=<span class=\"hljs-string\">'1234567890'</span>}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1441\">\n                      从上面的代码实现和最后输出的结果可以看出，备忘录模式的代码实现其实是非常简单的，<strong\n                        data-nodeid=\"1504\"\n                        >关键点就在于要能保证原始对象在某一个时刻的对象状态被完整记录下来</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1442\">使用场景分析</h3>\n                    <p data-nodeid=\"1443\">\n                      一般来讲，备忘录模式常用的使用场景有这样几种。\n                    </p>\n                    <ul data-nodeid=\"1444\">\n                      <li data-nodeid=\"1445\">\n                        <p data-nodeid=\"1446\">\n                          <strong data-nodeid=\"1511\"\n                            >需要保存一个对象在某一个时刻的状态时</strong\n                          >。比如，在线编辑器中编写文字时断网，需要恢复为断网前的状态。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1447\">\n                        <p data-nodeid=\"1448\">\n                          <strong data-nodeid=\"1516\"\n                            >不希望外界直接访问对象的内部状态时</strong\n                          >。比如，在包裹配送的过程中，如果从仓库运送到配送站，只需要显示“在运行中”，而具体使用汽车还是飞机，这个用户并不需要知道。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1449\">\n                      为了帮助你更好地理解备忘录模式的适用场景，接下来我们还是通过一个简单的例子来为你演示一下。\n                    </p>\n                    <p data-nodeid=\"1450\">\n                      假设你现在正在管理一个博客系统，你经常需要创建 Blog\n                      对象，但是有一些作者在写 Blog\n                      的过程中可能会出现断网的情况，这时就需要你保存 Blog\n                      对象在这个时刻的状态信息，后续等作者重新联网后，能够及时地恢复其断网前的状态。那具体该怎么来做呢？\n                    </p>\n                    <p data-nodeid=\"1451\">\n                      你可以先创建一个 Blog 对象，该对象中包含 id、title 和\n                      content，分别代表了 Blog\n                      的唯一编号、标题和内容；并提供创建备忘录的 createMemento()\n                      和 restore(BlogMemento m)\n                      方法，分别用于创建备忘录和通过备忘录来恢复原始的 Blog\n                      对象。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Blog</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> id;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String title;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> String content;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Blog</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id, String title)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.id = id;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.title = title;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> id;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.id = id;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getTitle</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> title;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setTitle</span><span class=\"hljs-params\">(String title)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.title = title;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getContent</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> content;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setContent</span><span class=\"hljs-params\">(String content)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.content = content;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> BlogMemento <span class=\"hljs-title\">createMemento</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        BlogMemento m = <span class=\"hljs-keyword\">new</span> BlogMemento(id, title, content);\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> m;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">restore</span><span class=\"hljs-params\">(BlogMemento m)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.id = m.getId();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.title = m.getTitle();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.content = m.getContent();\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-meta\">@Override</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Blog{\"</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\"id=\"</span> + id +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", title='\"</span> + title + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">\", content='\"</span> + content + <span class=\"hljs-string\">'\\''</span> +\n</div></li><li><div class=\"code-word\">                <span class=\"hljs-string\">'}'</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1453\">\n                      然后，再来创建一个 Blog 的备忘录对象\n                      BlogMemento，同样是复制 Blog 所需要的所有属性内容。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BlogMemento</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> id;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> String title;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> String content;\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BlogMemento</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">long</span> id, String title, String content)</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">super</span>();\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.id = id;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.title = title;\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">this</span>.content = content;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">long</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> id;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getTitle</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> title;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getContent</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">return</span> content;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1455\">\n                      这样基于 Blog\n                      对象的备忘录就创建好了。最后，我们依然还是运行一段单元测试代码来看看运行结果。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Client</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n</div></li><li><div class=\"code-word\">        Blog blog = <span class=\"hljs-keyword\">new</span> Blog(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"My Blog\"</span>);\n</div></li><li><div class=\"code-word\">        blog.setContent(<span class=\"hljs-string\">\"ABC\"</span>);      <span class=\"hljs-comment\">//原始的文章内容</span>\n</div></li><li><div class=\"code-word\">        System.out.println(blog);\n</div></li><li><div class=\"code-word\">        BlogMemento memento = blog.createMemento();   <span class=\"hljs-comment\">//创建blog的备忘录</span>\n</div></li><li><div class=\"code-word\">        blog.setContent(<span class=\"hljs-string\">\"123\"</span>);      <span class=\"hljs-comment\">//改变内容</span>\n</div></li><li><div class=\"code-word\">        System.out.println(blog);\n</div></li><li><div class=\"code-word\">        blog.restore(memento);       <span class=\"hljs-comment\">//撤销操作</span>\n</div></li><li><div class=\"code-word\">        System.out.println(blog);    <span class=\"hljs-comment\">//这时会显示原始的内容</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"1457\">\n                      从这个运行结果中，你会发现使用备忘录模式能非常方便地进行撤销操作。当你在编辑文章内容时，其实就是在修改\n                      content\n                      内容，这时备忘录会记录特定时间点里的对象状态，如果这时需要撤销修改，那么就会恢复到原来的对象状态。\n                    </p>\n                    <p data-nodeid=\"1458\">\n                      所以说，<strong data-nodeid=\"1528\"\n                        >备忘录模式在频繁需要撤销与恢复的场景中能够发挥很好的作用</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"1459\">为什么使用备忘录模式？</h3>\n                    <p data-nodeid=\"1460\">\n                      分析完备忘录模式的原理和使用场景后，我们再来说说使用备忘录模式的原因，可总结为以下两个。\n                    </p>\n                    <p data-nodeid=\"1461\">\n                      <strong data-nodeid=\"1535\"\n                        >第一个，为了记录多个时间点的备份数据。</strong\n                      >\n                      与传统备份不同的是，备忘录模式更多是用来记录多个时间点的对象状态数据，比如编辑器、聊天会话中会涉及多次操作和多次交互对话，一方面是为了记录某个时间点数据以便以后运营用来做数据分析，另一方面是为了能够通过多次数据快照，防止客户端篡改数据。\n                    </p>\n                    <p data-nodeid=\"1462\">\n                      <strong data-nodeid=\"1540\"\n                        >第二个，需要快速撤销当前操作并恢复到某对象状态。</strong\n                      >\n                      比如，微信中的撤回功能其实就是备忘录模式的一种体现，用户发错信息后，需要立即恢复到未发送状态。\n                    </p>\n                    <h3 data-nodeid=\"1463\">收益什么？损失什么？</h3>\n                    <p data-nodeid=\"1464\">\n                      通过上述分析，我们也可以得出备忘录模式主要有以下优点。\n                    </p>\n                    <ul data-nodeid=\"1465\">\n                      <li data-nodeid=\"1466\">\n                        <p data-nodeid=\"1467\">\n                          <strong data-nodeid=\"1547\"\n                            >能够快速撤消对对象状态的更改。</strong\n                          >\n                          比如，在编辑器中不小心覆盖了一段重要的文字，使用 undo\n                          操作能够快速恢复这段文字。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1468\">\n                        <p data-nodeid=\"1469\">\n                          <strong data-nodeid=\"1552\"\n                            >能够帮助缓存记录历史对象状态</strong\n                          >。比如，在客服会话聊天中，对于某一些重要的对话（退换货、价保等），我们会记录这些对象数据，传统的做法是调用一次服务接口，一旦服务出现故障就很容易导致聊天回复速度变慢；而使用备忘录模式则能够记录这些重要的数据信息（用户提供的订单数据），而不需要反复查询接口，这样能提升回复客户的效率。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1470\">\n                        <p data-nodeid=\"1471\">\n                          <strong data-nodeid=\"1557\"\n                            >能够提升代码的扩展性。</strong\n                          >\n                          备忘录模式是通过增加外部对象来保存原始对象的状态，而不是在原始对象中新增状态记录，当不再需要保存对象状态时就能很方便地取消这个对象。同理，新增备忘录对象也非常容易。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"1472\">同样，备忘录模式也有一些缺点。</p>\n                    <ul data-nodeid=\"1473\">\n                      <li data-nodeid=\"1474\">\n                        <p data-nodeid=\"1475\">\n                          <strong data-nodeid=\"1563\"\n                            >备忘录会破坏封装性。</strong\n                          >\n                          因为当备忘录在进行恢复的过程中遇见错误时，可能会恢复错误的状态。比如，备份的对象状态中有需要调用数据库等外部服务时，在恢复过程中如果遇见数据库宕机，那么可能恢复的对象数据就会存在错误。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"1476\">\n                        <p data-nodeid=\"1477\">\n                          <strong data-nodeid=\"1568\"\n                            >备忘录的对象数据很大时，读取数据可能出现内存用尽的情况。</strong\n                          >\n                          比如，在编辑器中加入高清的图片，如果直接记录图片本身可能会导致内存被用尽，进而导致系统出现崩溃的情况。\n                        </p>\n                      </li>\n                    </ul>\n                    <h3 data-nodeid=\"1478\">总结</h3>\n                    <p data-nodeid=\"1479\">\n                      备忘录模式也叫快照模式，具体来说，就是通过捕获对象在某一个时刻的对象状态，再将其保存到外部对象，以便在需要的时候恢复对象到指定时刻下的状态。\n                    </p>\n                    <p data-nodeid=\"1480\">\n                      备忘录模式的应用场景比较局限，主要是用来备份、撤销、恢复等，这与平时我们常说的“备份”看上去很相似，但实际上两者的差异是很大的：备忘录模式更侧重于代码的设计和实现，支持简单场景中的应用，比如记录\n                      Web 请求中的 header\n                      信息等；而备份更多是以解决方案的形式出现，比如异地容灾备份、数据库主从备份等所支持的是更复杂的业务场景，备份的数据量往往也更大。\n                    </p>\n                    <p data-nodeid=\"1481\">\n                      <strong data-nodeid=\"1575\"\n                        >因此，你在使用备忘录模式时，一定不要误认为它就是万能的备份模式，要合理评估对象所使用的内存空间，再确定是否使用备忘录模式。</strong\n                      >\n                    </p>\n                    <h3 data-nodeid=\"1482\">课后思考</h3>\n                    <p data-nodeid=\"1483\">\n                      在某些时候，我们可能还是需要使用备忘录模式备份大对象，耗时也可能会很长，你有没有好办法来缩短时间消耗呢？欢迎你在留言区与我分享。\n                    </p>\n                    <p data-nodeid=\"1484\" class=\"\">\n                      在下一讲，我会接着与你分享“中介者模式与解决耦合过多问题”的相关内容，记得按时来听课！\n                    </p>\n            "}