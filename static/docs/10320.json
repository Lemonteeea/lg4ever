{"title":"19 | 揭秘 Redux 设计思想与工作原理（下）","context":"\n                    <p data-nodeid=\"278317\" class=\"\">\n                      在上一讲，我们尝试对 Redux 源码进行拆解，认识了 Redux\n                      源码的基本构成与主要模块，并深入了解了 createStore\n                      这个核心模块的工作逻辑。这一讲，我们将更进一步，针对\n                      dispatch 和 subscribe 这两个具体的方法进行分析，分别认识\n                      Redux 工作流中最为核心的<strong data-nodeid=\"278409\"\n                        >dispatch 动作</strong\n                      >，以及 Redux 自身独特的\n                      <strong data-nodeid=\"278410\">“发布-订阅”模式</strong>。\n                    </p>\n                    <h3 data-nodeid=\"278318\">\n                      Redux 工作流的核心：dispatch 动作\n                    </h3>\n                    <p data-nodeid=\"278319\">\n                      dispatch 应该是大家在使用 Redux 的过程中最为熟悉的 API\n                      了。结合前面对设计思想的解读，我们已经知道，在 Redux\n                      中有这样 3 个关键要素：\n                    </p>\n                    <ul data-nodeid=\"278320\">\n                      <li data-nodeid=\"278321\">\n                        <p data-nodeid=\"278322\">action</p>\n                      </li>\n                      <li data-nodeid=\"278323\">\n                        <p data-nodeid=\"278324\">reducer</p>\n                      </li>\n                      <li data-nodeid=\"278325\">\n                        <p data-nodeid=\"278326\">store</p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"278327\">\n                      之所以说 dispatch 是 Redux 工作流的核心，是因为<strong\n                        data-nodeid=\"278421\"\n                        >dispatch 这个动作刚好能把 action、reducer 和 store\n                        这三位“主角”给串联起来</strong\n                      >。dispatch\n                      的内部逻辑，足以反映了这三者之间“打配合”的过程。\n                    </p>\n                    <p data-nodeid=\"278328\">\n                      这里我把 dispatch 的逻辑从 createStore\n                      中给“揪出来”，请看相关源码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">dispatch</span><span class=\"hljs-params\">(action)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 校验 action 的数据格式是否合法</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!isPlainObject(action)) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Error(\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'Actions must be plain objects. '</span> +\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'Use custom middleware for async actions.'</span>\n</div></li><li><div class=\"code-word\">    )\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 约束 action 中必须有 type 属性作为 action 的唯一标识 </span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (typeof action.type === <span class=\"hljs-string\">'undefined'</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Error(\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'Actions may not have an undefined \"type\" property. '</span> +\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'Have you misspelled a constant?'</span>\n</div></li><li><div class=\"code-word\">    )\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 若当前已经位于 dispatch 的流程中，则不允许再度发起 dispatch（禁止套娃）</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (isDispatching) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Error(<span class=\"hljs-string\">'Reducers may not dispatch actions.'</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 执行 reducer 前，先\"上锁\"，标记当前已经存在 dispatch 执行流程</span>\n</div></li><li><div class=\"code-word\">    isDispatching = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 调用 reducer，计算新的 state</span>\n</div></li><li><div class=\"code-word\">    currentState = currentReducer(currentState, action)\n</div></li><li><div class=\"code-word\">  } <span class=\"hljs-keyword\">finally</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 执行结束后，把\"锁\"打开，允许再次进行 dispatch</span>\n</div></li><li><div class=\"code-word\">    isDispatching = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 触发订阅</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> listeners = (currentListeners = nextListeners);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; listeners.length; i++) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> listener = listeners[i];\n</div></li><li><div class=\"code-word\">    listener();\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> action;\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278330\">\n                      这里我结合源码，帮大家将 dispatch 的工作流程提取如下：\n                    </p>\n                    <p data-nodeid=\"278331\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/07/Ciqc1F_TF96ACQdrAADNE7uQ1fw478.png\"\n                        alt=\"图片2.png\"\n                        data-nodeid=\"278426\"\n                      />\n                    </p>\n                    <p data-nodeid=\"278332\">\n                      在这段工作流中，有两个点值得我们细细回味。\n                    </p>\n                    <h4 data-nodeid=\"278333\">\n                      1. 通过“上锁”避免“套娃式”的 dispatch\n                    </h4>\n                    <p data-nodeid=\"278334\">\n                      dispatch 工作流中最关键的就是执行 reducer\n                      这一步，它对应的是下面这段代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">try</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 执行 reducer 前，先“上锁”，标记当前已经存在 dispatch 执行流程</span>\n</div></li><li><div class=\"code-word\">  isDispatching = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 调用 reducer，计算新的 state </span>\n</div></li><li><div class=\"code-word\">  currentState = currentReducer(currentState, action)\n</div></li><li><div class=\"code-word\">} <span class=\"hljs-keyword\">finally</span> {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 执行结束后，把\"锁\"打开，允许再次进行 dispatch </span>\n</div></li><li><div class=\"code-word\">  isDispatching = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278336\">\n                      <a\n                        href=\"https://www.redux.org.cn/docs/basics/Reducers.html\"\n                        data-nodeid=\"278434\"\n                        >reducer</a\n                      >\n                      的本质是 store 的更新规则，它指定了应用状态的变化如何响应\n                      action 并发送到 store。这段代码中调用 reducer，传入\n                      currentState 和 action，对应的正是第 05 讲中“编码角度看\n                      Redux 工作流”图示中的 action → reducer → store\n                      这个过程，如下图标红处所示：\n                    </p>\n                    <p data-nodeid=\"278337\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/13/CgqCHl_TF-uADepHAADt1xuXiTM684.png\"\n                        alt=\"图片3.png\"\n                        data-nodeid=\"278438\"\n                      />\n                    </p>\n                    <p data-nodeid=\"278338\">\n                      在调用 reducer 之前，Redux 首先会将 isDispatching 变量置为\n                      true，待 reducer 执行完毕后，再将 isDispatching 变量置为\n                      false。这个操作你应该不陌生，因为在第 11 讲中，setState\n                      的“批处理”也是用类似的“上锁”方式来实现的。\n                    </p>\n                    <p data-nodeid=\"278339\">\n                      这里之所以要用 isDispatching 将 dispatch\n                      的过程锁起来，目的是规避“套娃式”的\n                      dispatch。更准确地说，是为了避免开发者在 reducer\n                      中手动调用 dispatch。\n                    </p>\n                    <p data-nodeid=\"278340\">\n                      “禁止套娃”用意何在？首先，从设计的角度来看，<strong\n                        data-nodeid=\"278446\"\n                        >作为一个“计算 state 专用函数”，Redux 在设计 reducer\n                        时就强调了它必须是“纯净”的</strong\n                      >，它不应该执行除了计算之外的任何“脏操作”，dispatch\n                      调用显然是一个“脏操作”；其次，从执行的角度来看，若真的在\n                      reducer 中调用 dispatch，那么 dispatch 又会反过来调用\n                      reducer，reducer 又会再次调用\n                      dispatch......这样反复相互调用下去，就会进入死循环，属于非常严重的误操作。\n                    </p>\n                    <p data-nodeid=\"278341\">\n                      因此，在 dispatch 的前置校验逻辑中，一旦识别出\n                      isDispatching 为 true，就会直接 throw\n                      Error（见下面代码），把死循环扼杀在摇篮里：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (isDispatching) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Error(<span class=\"hljs-string\">'Reducers may not dispatch actions.'</span>)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <h4 data-nodeid=\"278343\">2. 触发订阅的过程</h4>\n                    <p data-nodeid=\"278344\">\n                      在 reducer\n                      执行完毕后，会进入触发订阅的过程，它对应的是下面这段代码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 触发订阅</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> listeners = (currentListeners = nextListeners);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; listeners.length; i++) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> listener = listeners[i];\n</div></li><li><div class=\"code-word\">  listener();\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278346\">\n                      在阅读这段源码的过程中，相信你的疑问点主要在两个方面：\n                    </p>\n                    <ol data-nodeid=\"278347\">\n                      <li data-nodeid=\"278348\">\n                        <p data-nodeid=\"278349\">\n                          第 05 讲我们并没有介绍 subscribe 这个 API，也没有提及\n                          listener 相关的内容，它们到底是如何与 Redux\n                          主流程相结合的呢？\n                        </p>\n                      </li>\n                      <li data-nodeid=\"278350\">\n                        <p data-nodeid=\"278351\">\n                          为什么会有 currentListeners 和 nextListeners 这两个\n                          listeners\n                          数组？这和我们平时见到的“发布-订阅”模式好像不太一样。\n                        </p>\n                      </li>\n                    </ol>\n                    <p data-nodeid=\"278352\">\n                      要弄明白这两个问题，我们需要先了解 subscribe 这个 API。\n                    </p>\n                    <h3 data-nodeid=\"278353\">\n                      Redux 中的“发布-订阅”模式：认识 subscribe\n                    </h3>\n                    <p data-nodeid=\"278354\">\n                      dispatch 中执行的 listeners\n                      数组从订阅中来，而执行订阅需要调用\n                      subscribe。在实际的开发中，subscribe\n                      并不是一个严格必要的方法，<strong data-nodeid=\"278462\"\n                        >只有在需要监听状态的变化时，我们才会调用\n                        subscribe</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"278355\">\n                      subscribe 接收一个 Function 类型的 listener\n                      作为入参，它的返回内容恰恰就是这个 listener\n                      对应的解绑函数。你可以通过下面这段示例代码简单把握一下\n                      subscribe 的使用姿势：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">handleChange</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 函数逻辑</span>\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> unsubscribe = store.subscribe(handleChange)\n</div></li><li><div class=\"code-word\">unsubscribe()\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278357\">\n                      subscribe\n                      在订阅时只需要传入监听函数，而不需要传入事件类型。这是因为\n                      Redux 中已经默认了订阅的对象就是“<strong\n                        data-nodeid=\"278469\"\n                        >状态的变化（准确地说是 dispatch 函数的调用）</strong\n                      >”这个事件。\n                    </p>\n                    <p data-nodeid=\"278358\">\n                      到这里，我们就可以回答上面提出的第一个关于 subscribe\n                      的问题了：<strong data-nodeid=\"278483\"\n                        >subscribe 是如何与 Redux 主流程结合的呢</strong\n                      >？首先，我们可以<strong data-nodeid=\"278484\"\n                        >在 store 对象创建成功后</strong\n                      >，通过调用 store.subscribe 来注册监听函数，也可以通过调用\n                      subscribe 的返回函数来解绑监听函数，监听函数是用 listeners\n                      数组来维护的；当<strong data-nodeid=\"278485\"\n                        >dispatch action 发生时</strong\n                      >，Redux 会在 reducer 执行完毕后，将 listeners\n                      数组中的监听函数逐个执行。这就是 subscribe 与 Redux\n                      主流程之间的关系。\n                    </p>\n                    <p data-nodeid=\"278359\">\n                      接下来我们结合源码来分析一下 subscribe\n                      的内部逻辑，subscribe 源码提取如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">subscribe</span><span class=\"hljs-params\">(listener)</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 校验 listener 的类型</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (typeof listener !== <span class=\"hljs-string\">'function'</span>) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Error(<span class=\"hljs-string\">'Expected the listener to be a function.'</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 禁止在 reducer 中调用 subscribe</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (isDispatching) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> Error(\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'You may not call store.subscribe() while the reducer is executing. '</span> +\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'If you would like to be notified after the store has been updated, subscribe from a '</span> +\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'component and invoke store.getState() in the callback to access the latest state. '</span> +\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-string\">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span>\n</div></li><li><div class=\"code-word\">    )\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 该变量用于防止调用多次 unsubscribe 函数</span>\n</div></li><li><div class=\"code-word\">  let isSubscribed = <span class=\"hljs-keyword\">true</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 确保 nextListeners 与 currentListeners 不指向同一个引用</span>\n</div></li><li><div class=\"code-word\">  ensureCanMutateNextListeners(); \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 注册监听函数</span>\n</div></li><li><div class=\"code-word\">  nextListeners.push(listener); \n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 返回取消订阅当前 listener 的方法</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">function <span class=\"hljs-title\">unsubscribe</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!isSubscribed) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    isSubscribed = <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">    ensureCanMutateNextListeners();\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> index = nextListeners.indexOf(listener);\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 将当前的 listener 从 nextListeners 数组中删除 </span>\n</div></li><li><div class=\"code-word\">    nextListeners.splice(index, <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">  };\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278361\">\n                      结合这段源码，我们可以将 subscribe 的工作流程提取如下：\n                    </p>\n                    <p data-nodeid=\"278362\">\n                      <img\n                        src=\"https://s0.lgstatic.com/i/image/M00/84/13/CgqCHl_TGCiAfm8CAAEEFFa3ZxA563.png\"\n                        alt=\"图片5.png\"\n                        data-nodeid=\"278490\"\n                      />\n                    </p>\n                    <p data-nodeid=\"278363\">\n                      这个工作流中有一个步骤让人很难不在意，那就是对\n                      ensureCanMutateNextListeners\n                      的调用。结合前面整体源码的分析，我们已经知道\n                      ensureCanMutateNextListeners 的作用就是确保 nextListeners\n                      不会和 currentListener 指向同一个引用。\n                      那么为什么要这样做呢？这里就引出了之前提出的关于 subscribe\n                      的第二个问题：<strong data-nodeid=\"278496\"\n                        >为什么会有 currentListeners 和 nextListeners 两个\n                        listeners 数组</strong\n                      >？\n                    </p>\n                    <p data-nodeid=\"278364\">\n                      要理解这个问题，我们首先要搞清楚 Redux\n                      中的订阅过程和发布过程各自是如何处理 listeners 数组的。\n                    </p>\n                    <h4 data-nodeid=\"278365\">1. 订阅过程中的 listeners 数组</h4>\n                    <p data-nodeid=\"278366\">\n                      两个 listeners 之间的第一次“交锋”发生在 createStore\n                      的变量初始化阶段，nextListeners 会被赋值为\n                      currentListeners（见下面代码），这之后两者确实指向同一个引用。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"> let nextListeners = currentListeners\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278368\">\n                      但在 subscribe\n                      第一次被调用时，ensureCanMutateNextListeners\n                      就会发现这一点，然后将 nextListeners 纠正为一个内容与\n                      currentListeners\n                      一致、但引用不同的新对象。对应的逻辑如下面代码所示：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">ensureCanMutateNextListeners</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 若两个数组指向同一个引用</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (nextListeners === currentListeners) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-comment\">// 则将 nextListeners 纠正为一个内容与 currentListeners 一致、但引用不同的新对象</span>\n</div></li><li><div class=\"code-word\">    nextListeners = currentListeners.slice()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278370\">\n                      在 subscribe 的逻辑中，ensureCanMutateNextListeners\n                      每次都会在 listener\n                      注册前被无条件调用，用以确保两个数组引用不同。紧跟在\n                      ensureCanMutateNextListeners 之后执行的是 listener\n                      的注册逻辑，我们可以对应源码中看到 listener 最终会被注册到\n                      nextListeners 数组中去：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">nextListeners.push(listener);\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278372\">接下来我们来看看事件的发布过程。</p>\n                    <h4 data-nodeid=\"278373\">2. 发布过程中的 listeners 数组</h4>\n                    <p data-nodeid=\"278374\">\n                      触发订阅这个动作是由 dispatch 来做的，相关的源码如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 触发订阅</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> listeners = (currentListeners = nextListeners);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; listeners.length; i++) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> listener = listeners[i];\n</div></li><li><div class=\"code-word\">  listener();\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278376\">\n                      这段源码告诉我们，在触发订阅的过程中，currentListeners\n                      会被赋值为 nextListeners，而实际被执行的 listeners\n                      数组又会被赋值为 currentListeners。因此，<strong\n                        data-nodeid=\"278514\"\n                        >最终被执行的 listeners 数组，实际上和当前的\n                        nextListeners 指向同一个引用</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"278377\">\n                      这就有点奇妙了：<strong data-nodeid=\"278520\"\n                        >注册监听也是操作 nextListeners，触发订阅也是读取\n                        nextListeners（实际上，细心的同学会注意到，取消监听操作的也是\n                        nextListeners 数组）。既然如此，要 currentListeners\n                        有何用</strong\n                      >？\n                    </p>\n                    <h4 data-nodeid=\"278378\">\n                      3. currentListeners 数组用于确保监听函数执行过程的稳定性\n                    </h4>\n                    <p data-nodeid=\"278379\">\n                      正因为任何变更都是在 nextListeners\n                      上发生的，我们才需要一个不会被变更的、内容稳定的\n                      currentListeners\n                      ，来确保监听函数在执行过程中不会出幺蛾子。\n                    </p>\n                    <p data-nodeid=\"278380\">\n                      举个例子，下面这种操作在 Redux 中完全是合法的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 定义监听函数 A</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">listenerA</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 订阅 A，并获取 A 的解绑函数</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> unSubscribeA = store.subscribe(listenerA)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 定义监听函数 B</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">listenerB</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 在 B 中解绑 A</span>\n</div></li><li><div class=\"code-word\">  unSubscribeA()\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 定义监听函数 C</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">listenerC</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">}\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 订阅 B</span>\n</div></li><li><div class=\"code-word\">store.subscribe(listenerB)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-comment\">// 订阅 C</span>\n</div></li><li><div class=\"code-word\">store.subscribe(listenerC)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278382\">\n                      在这个 Demo 执行完毕后，nextListeners 数组的内容是 A、B、C\n                      3 个 listener：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[listenerA,  listenerB, listenerC]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278384\">\n                      接下来若调用 dispatch，则会执行下面这段触发订阅的逻辑：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-comment\">// 触发订阅</span>\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> listeners = (currentListeners = nextListeners);\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">for</span> (let i = <span class=\"hljs-number\">0</span>; i &lt; listeners.length; i++) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> listener = listeners[i];\n</div></li><li><div class=\"code-word\">  listener();\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278386\">\n                      当 for 循环执行到索引 i = 1 处，也就是对应的 listener 为\n                      listenerB 时，问题就会出现：listenerB 中执行了\n                      unSubscribeA\n                      这个动作。而结合我们前面的分析，监听函数注册、解绑、触发这些动作实际影响的都是\n                      nextListeners。为了强化对这一点的认知，我们来复习一下\n                      unsubscribe 的源码：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">function <span class=\"hljs-title\">unsubscribe</span><span class=\"hljs-params\">()</span> </span>{\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 避免多次解绑</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!isSubscribed) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  isSubscribed = <span class=\"hljs-keyword\">false</span>;\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 熟悉的操作，调用 ensureCanMutateNextListeners 方法</span>\n</div></li><li><div class=\"code-word\">  ensureCanMutateNextListeners();\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 获取 listener 在 nextListeners 中的索引</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> index = nextListeners.indexOf(listener);\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-comment\">// 将当前的 listener 从 nextListeners 数组中删除 </span>\n</div></li><li><div class=\"code-word\">  nextListeners.splice(index, <span class=\"hljs-number\">1</span>);\n</div></li><li><div class=\"code-word\">};\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278388\">\n                      假如说不存在 currentListeners，那么也就意味着不需要\n                      ensureCanMutateNextListeners 这个动作。若没有\n                      ensureCanMutateNextListeners，unsubscribeA()\n                      执行完之后，listenerA 会同时从 listeners 数组和\n                      nextListeners\n                      数组中消失（因为两者指向的是同一个引用），那么 listeners\n                      数组此时只剩下两个元素 listenerB 和 listenerC，变成这样：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">[listenerB, listenerC]\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278390\">\n                      listeners 数组的长度改变了，<strong data-nodeid=\"278547\"\n                        >但 for\n                        循环却不会感知这一点，它将无情地继续循环下去</strong\n                      >。之前执行到 i = 1 处，listener = listeners[1] ，也就是说\n                      listener === listenerB；下一步理应执行到 i = 2 处，但此时\n                      listeners[2] 已经是 undefined\n                      了，原本应该出现在这个索引位上的\n                      listenerC，此时因为数组长度的变化，被前置到了 i = 1\n                      处！<strong data-nodeid=\"278548\"\n                        >这样一来，undefined 就会代替 listenerC\n                        被执行，进而引发函数异常</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"278391\">\n                      这可怎么办呢？答案当然是<strong data-nodeid=\"278554\"\n                        >将 nextListeners 与当前正在执行中的 listeners\n                        剥离开来</strong\n                      >，将两者指向不同的引用。这也正是\n                      ensureCanMutateNextListeners 所做的事情。\n                    </p>\n                    <p data-nodeid=\"278392\">\n                      在示例的这种场景下，ensureCanMutateNextListeners\n                      执行前，listeners、currentListeners 和 nextListeners\n                      之间的关系是这样的：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">listeners === currentListeners === nextListeners\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278394\">\n                      而 ensureCanMutateNextListeners 执行后，nextListeners\n                      就会被剥离出去：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">nextListeners = currentListeners.slice()\n</div></li><li><div class=\"code-word\">listeners === currentListeners !== nextListeners\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"278396\">\n                      这样一来，nextListeners\n                      上的任何改变，都无法再影响正在执行中的 listeners\n                      了。<strong data-nodeid=\"278566\"\n                        >currentListeners\n                        在此处的作用，就是为了记录下当前正在工作中的 listeners\n                        数组的引用</strong\n                      >，<strong data-nodeid=\"278567\"\n                        >将它与可能发生改变的 nextListeners\n                        区分开来，以确保监听函数在执行过程中的稳定性</strong\n                      >。\n                    </p>\n                    <h3 data-nodeid=\"278397\">总结</h3>\n                    <p data-nodeid=\"278398\">\n                      这两讲，我们对 Redux\n                      的设计思想与实现原理都有了深入的学习。到这里，相信你已经对\n                      Redux\n                      的架构动机、工作原理包括源码的设计依据都有了扎实的掌握。\n                    </p>\n                    <p data-nodeid=\"278399\" class=\"te-preview-highlight\">\n                      在 Redux\n                      主流程之外，还有一个不可小觑的厉害角色，那就是<strong\n                        data-nodeid=\"278575\"\n                        >Redux 中间件</strong\n                      >。在中间件的加持下，Redux\n                      将化身为一条灵活的“变色龙”，自由地穿梭于不同的需求场景之间。在下一讲，我们就将揭开\n                      Redux 中间件的神秘面纱。\n                    </p>\n            "}