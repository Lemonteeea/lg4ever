{"title":"25 | Transition 组件：过渡动画的实现原理是怎样的？（下）","context":"\n                    <p data-nodeid=\"38113\" class=\"\">\n                      上节课，我们已经知道了，Vue.js 提供了内置的 Transition\n                      组件帮我们实现动画过渡效果。在之前的分析中我把 Transition\n                      组件的实现分成了三个部分：组件的渲染、钩子函数的执行、模式的应用。这节课我们从钩子函数的执行继续探究\n                      Transition 组件的实现原理。\n                    </p>\n\n                    <h3 data-nodeid=\"37387\">钩子函数的执行</h3>\n                    <p data-nodeid=\"37388\">\n                      这个部分我们先来看 beforeEnter 钩子函数。\n                    </p>\n                    <p data-nodeid=\"37389\">\n                      在 patch 阶段的 mountElement\n                      函数中，在插入元素节点前且存在过渡的条件下会执行\n                      vnode.transition 中的 beforeEnter 函数，我们来看它的定义：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">beforeEnter(el) {\n</div></li><li><div class=\"code-word\">  let hook = <span class=\"hljs-function\">onBeforeEnter\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(!state.isMounted)</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (appear) {\n</div></li><li><div class=\"code-word\">      hook = onBeforeAppear || onBeforeEnter\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (el._leaveCb) {\n</div></li><li><div class=\"code-word\">    el._leaveCb(<span class=\"hljs-keyword\">true</span> <span class=\"hljs-comment\">/* cancelled */</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> leavingVNode = leavingVNodesCache[key]\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (leavingVNode &amp;&amp;\n</div></li><li><div class=\"code-word\">    isSameVNodeType(vnode, leavingVNode) &amp;&amp;\n</div></li><li><div class=\"code-word\">    leavingVNode.el._leaveCb) {\n</div></li><li><div class=\"code-word\">    leavingVNode.el._leaveCb()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  callHook(hook, [el])\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"37391\">\n                      beforeEnter 钩子函数主要做的事情就是根据 appear 的值和 DOM\n                      是否挂载，来执行 onBeforeEnter 函数或者是 onBeforeAppear\n                      函数，其他的逻辑我们暂时先不看。\n                    </p>\n                    <p data-nodeid=\"37392\">\n                      appear、onBeforeEnter、onBeforeAppear 这些变量都是从 props\n                      中获取的，那么这些 props 是怎么初始化的呢？回到 Transition\n                      组件的定义：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> Transition = (props, { slots }) =&gt; h(BaseTransition, resolveTransitionProps(props), slots)\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"37394\">\n                      可以看到，传递的 props 经过了 resolveTransitionProps\n                      函数的封装，我们来看它的定义：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-function\">function <span class=\"hljs-title\">resolveTransitionProps</span><span class=\"hljs-params\">(rawProps)</span> </span>{\n</div></li><li><div class=\"code-word\">  let { name = <span class=\"hljs-string\">'v'</span>, type, css = <span class=\"hljs-keyword\">true</span>, duration, enterFromClass = \\`${name}-enter-from\\`, enterActiveClass = \\`${name}-enter-active\\`, enterToClass = \\`${name}-enter-to\\`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = \\`${name}-leave-from\\`, leaveActiveClass = \\`${name}-leave-active\\`, leaveToClass = \\`${name}-leave-to\\` } = rawProps\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> baseProps = {}\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> key in rawProps) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!(key in DOMTransitionPropsValidators)) {\n</div></li><li><div class=\"code-word\">      baseProps[key] = rawProps[key]\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (!css) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> baseProps\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> durations = normalizeDuration(duration)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> enterDuration = durations &amp;&amp; durations[<span class=\"hljs-number\">0</span>]\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> leaveDuration = durations &amp;&amp; durations[<span class=\"hljs-number\">1</span>]\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> finishEnter = (el, isAppear, done) =&gt; {\n</div></li><li><div class=\"code-word\">    removeTransitionClass(el, isAppear ? appearToClass : enterToClass)\n</div></li><li><div class=\"code-word\">    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass)\n</div></li><li><div class=\"code-word\">    done &amp;&amp; done()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> finishLeave = (el, done) =&gt; {\n</div></li><li><div class=\"code-word\">    removeTransitionClass(el, leaveToClass)\n</div></li><li><div class=\"code-word\">    removeTransitionClass(el, leaveActiveClass)\n</div></li><li><div class=\"code-word\">    done &amp;&amp; done()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> makeEnterHook = (isAppear) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> (el, done) =&gt; {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> hook = isAppear ? onAppear : onEnter\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> resolve = () =&gt; finishEnter(el, isAppear, done)\n</div></li><li><div class=\"code-word\">      hook &amp;&amp; hook(el, resolve)\n</div></li><li><div class=\"code-word\">      nextFrame(() =&gt; {\n</div></li><li><div class=\"code-word\">        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass)\n</div></li><li><div class=\"code-word\">        addTransitionClass(el, isAppear ? appearToClass : enterToClass)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (!(hook &amp;&amp; hook.length &gt; <span class=\"hljs-number\">1</span>)) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> (enterDuration) {\n</div></li><li><div class=\"code-word\">            setTimeout(resolve, enterDuration)\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            whenTransitionEnds(el, type, resolve)\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> extend(baseProps, {\n</div></li><li><div class=\"code-word\">    onBeforeEnter(el) {\n</div></li><li><div class=\"code-word\">      onBeforeEnter &amp;&amp; onBeforeEnter(el)\n</div></li><li><div class=\"code-word\">      addTransitionClass(el, enterActiveClass)\n</div></li><li><div class=\"code-word\">      addTransitionClass(el, enterFromClass)\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    onBeforeAppear(el) {\n</div></li><li><div class=\"code-word\">      onBeforeAppear &amp;&amp; onBeforeAppear(el)\n</div></li><li><div class=\"code-word\">      addTransitionClass(el, appearActiveClass)\n</div></li><li><div class=\"code-word\">      addTransitionClass(el, appearFromClass)\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    onEnter: makeEnterHook(<span class=\"hljs-keyword\">false</span>),\n</div></li><li><div class=\"code-word\">    onAppear: makeEnterHook(<span class=\"hljs-keyword\">true</span>),\n</div></li><li><div class=\"code-word\">    onLeave(el, done) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">const</span> resolve = () =&gt; finishLeave(el, done)\n</div></li><li><div class=\"code-word\">      addTransitionClass(el, leaveActiveClass)\n</div></li><li><div class=\"code-word\">      addTransitionClass(el, leaveFromClass)\n</div></li><li><div class=\"code-word\">      nextFrame(() =&gt; {\n</div></li><li><div class=\"code-word\">        removeTransitionClass(el, leaveFromClass)\n</div></li><li><div class=\"code-word\">        addTransitionClass(el, leaveToClass)\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (!(onLeave &amp;&amp; onLeave.length &gt; <span class=\"hljs-number\">1</span>)) {\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">if</span> (leaveDuration) {\n</div></li><li><div class=\"code-word\">            setTimeout(resolve, leaveDuration)\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">          <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">            whenTransitionEnds(el, type, resolve)\n</div></li><li><div class=\"code-word\">          }\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      })\n</div></li><li><div class=\"code-word\">      onLeave &amp;&amp; onLeave(el, resolve)\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    onEnterCancelled(el) {\n</div></li><li><div class=\"code-word\">      finishEnter(el, <span class=\"hljs-keyword\">false</span>)\n</div></li><li><div class=\"code-word\">      onEnterCancelled &amp;&amp; onEnterCancelled(el)\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    onAppearCancelled(el) {\n</div></li><li><div class=\"code-word\">      finishEnter(el, <span class=\"hljs-keyword\">true</span>)\n</div></li><li><div class=\"code-word\">      onAppearCancelled &amp;&amp; onAppearCancelled(el)\n</div></li><li><div class=\"code-word\">    },\n</div></li><li><div class=\"code-word\">    onLeaveCancelled(el) {\n</div></li><li><div class=\"code-word\">      finishLeave(el)\n</div></li><li><div class=\"code-word\">      onLeaveCancelled &amp;&amp; onLeaveCancelled(el)\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"37396\">\n                      resolveTransitionProps 函数主要作用是，在我们给 Transition\n                      传递的 Props 基础上做一层封装，然后返回一个新的 Props\n                      对象，由于它包含了所有的 Props\n                      处理，你不需要一下子了解所有的实现，按需分析即可。\n                    </p>\n                    <p data-nodeid=\"37397\">\n                      我们来看 onBeforeEnter 函数，它的内部执行了基础 props\n                      传入的 onBeforeEnter 钩子函数，并且给 DOM 元素 el 添加了\n                      enterActiveClass 和 enterFromClass 样式。\n                    </p>\n                    <p data-nodeid=\"37398\">\n                      其中，props 传入的 onBeforeEnter 函数就是我们写 Transition\n                      组件时添加的 beforeEnter 钩子函数。enterActiveClass\n                      默认值是 v-enter-active，enterFromClass 默认值是\n                      v-enter-from，如果给 Transition 组件传入了 name 的\n                      prop，比如 fade，那么 enterActiveClass 的值就是\n                      fade-enter-active，enterFromClass 的值就是\n                      fade-enter-from。\n                    </p>\n                    <p data-nodeid=\"37399\">\n                      原来这就是在 DOM\n                      元素对象在创建后，插入到页面前做的事情：<strong\n                        data-nodeid=\"37477\"\n                        >执行 beforeEnter 钩子函数</strong\n                      >，<strong data-nodeid=\"37478\"\n                        >以及给元素添加相应的 CSS 样式</strong\n                      >。\n                    </p>\n                    <p data-nodeid=\"37400\">\n                      onBeforeAppear 和 onBeforeEnter\n                      的逻辑类似，就不赘述了，它是在我们给 Transition 组件传入\n                      appear 的 Prop，且首次挂载的时候执行的。\n                    </p>\n                    <p data-nodeid=\"37401\">\n                      执行完 beforeEnter\n                      钩子函数，接着插入元素到页面，然后会执行 vnode.transition\n                      中的enter 钩子函数，我们来看它的定义：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">enter(el) {\n</div></li><li><div class=\"code-word\">  let hook = onEnter\n</div></li><li><div class=\"code-word\">  let afterHook = onAfterEnter\n</div></li><li><div class=\"code-word\">  let cancelHook = <span class=\"hljs-function\">onEnterCancelled\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(!state.isMounted)</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (appear) {\n</div></li><li><div class=\"code-word\">      hook = onAppear || onEnter\n</div></li><li><div class=\"code-word\">      afterHook = onAfterAppear || onAfterEnter\n</div></li><li><div class=\"code-word\">      cancelHook = onAppearCancelled || onEnterCancelled\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  let called = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> done = (el._enterCb = (cancelled) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (called)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">    called = <span class=\"hljs-function\"><span class=\"hljs-keyword\">true</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(cancelled)</span> {\n</div></li><li><div class=\"code-word\">      callHook(cancelHook, [el])\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      callHook(afterHook, [el])\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (hooks.delayedLeave) {\n</div></li><li><div class=\"code-word\">      hooks.delayedLeave()\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    el._enterCb = undefined\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (hook) {\n</div></li><li><div class=\"code-word\">    hook(el, done)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (hook.length &lt;= <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">      done()\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    done()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"37403\">\n                      enter 钩子函数主要做的事情就是根据 appear 的值和 DOM\n                      是否挂载，执行 onEnter 函数或者是 onAppear\n                      函数，并且这个函数的第二个参数是一个 done\n                      函数，表示过渡动画完成后执行的回调函数，它是异步执行的。\n                    </p>\n                    <blockquote data-nodeid=\"37404\">\n                      <p data-nodeid=\"37405\">\n                        注意，当 onEnter 或者 onAppear 函数的参数长度小于等于 1\n                        的时候，done 函数在执行完 hook 函数后同步执行。\n                      </p>\n                    </blockquote>\n                    <p data-nodeid=\"37406\">\n                      在 done 函数的内部，我们会执行 onAfterEnter 函数或者是\n                      onEnterCancelled 函数，其它的逻辑我们也暂时先不看。\n                    </p>\n                    <p data-nodeid=\"37407\">\n                      同理，onEnter、onAppear、onAfterEnter 和 onEnterCancelled\n                      函数也是从 Props 传入的，我们重点看 onEnter 的实现，它是\n                      makeEnterHook(false) 函数执行后的返回值，如下：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> makeEnterHook = (isAppear) =&gt; {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> (el, done) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> hook = isAppear ? onAppear : onEnter\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">const</span> resolve = () =&gt; finishEnter(el, isAppear, done)\n</div></li><li><div class=\"code-word\">    hook &amp;&amp; hook(el, resolve)\n</div></li><li><div class=\"code-word\">    nextFrame(() =&gt; {\n</div></li><li><div class=\"code-word\">      removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass)\n</div></li><li><div class=\"code-word\">      addTransitionClass(el, isAppear ? appearToClass : enterToClass)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (!(hook &amp;&amp; hook.length &gt; <span class=\"hljs-number\">1</span>)) {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">if</span> (enterDuration) {\n</div></li><li><div class=\"code-word\">          setTimeout(resolve, enterDuration)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">          whenTransitionEnds(el, type, resolve)\n</div></li><li><div class=\"code-word\">        }\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    })\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"37409\">\n                      在函数内部，首先执行基础 props 传入的 onEnter\n                      钩子函数，然后在下一帧给 DOM 元素 el 移除了\n                      enterFromClass，同时添加了 enterToClass 样式。\n                    </p>\n                    <p data-nodeid=\"37410\">\n                      其中，props 传入的 onEnter 函数就是我们写 Transition\n                      组件时添加的 enter 钩子函数，enterFromClass 是我们在\n                      beforeEnter 阶段添加的，会在当前阶段移除，新增的\n                      enterToClass 值默认是 v-enter-to，如果给 Transition\n                      组件传入了 name 的 prop，比如 fade，那么 enterToClass\n                      的值就是 fade-enter-to。\n                    </p>\n                    <p data-nodeid=\"37411\">\n                      注意，当我们添加了 enterToClass\n                      后，这个时候浏览器就开始根据我们编写的 CSS\n                      进入过渡动画了，那么动画何时结束呢？\n                    </p>\n                    <p data-nodeid=\"37412\">\n                      Transition 组件允许我们传入 enterDuration 这个\n                      prop，它会指定进入过渡的动画时长，当然如果你不指定，Vue.js\n                      内部会监听动画结束事件，然后在动画结束后，执行 finishEnter\n                      函数，来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> finishEnter = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, isAppear, done</span>) =&gt;</span> {\n</div></li><li><div class=\"code-word\">  removeTransitionClass(el, isAppear ? appearToClass : enterToClass)\n</div></li><li><div class=\"code-word\">  removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass)\n</div></li><li><div class=\"code-word\">  done &amp;&amp; done()\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"38402\">\n                      其实就是给 DOM 元素移除 enterToClass 以及\n                      enterActiveClass，同时执行 done 函数，进而执行\n                      onAfterEnter 钩子函数。\n                    </p>\n                    <p data-nodeid=\"38403\">\n                      至此，元素进入的过渡动画逻辑就分析完了，接下来我们来分析元素离开的过渡动画逻辑。\n                    </p>\n                    <p data-nodeid=\"38404\">\n                      当元素被删除的时候，会执行 remove 方法，在真正从 DOM\n                      移除元素前且存在过渡的情况下，会执行 vnode.transition 中的\n                      leave 钩子函数，并且把移动 DOM\n                      的方法作为第二个参数传入，我们来看它的定义：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">leave(el, remove) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> key = String(vnode.key)\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (el._enterCb) {\n</div></li><li><div class=\"code-word\">    el._enterCb(<span class=\"hljs-keyword\">true</span> <span class=\"hljs-comment\">/* cancelled */</span>)\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">if</span> (state.isUnmounting) {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">return</span> remove()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  callHook(onBeforeLeave, [el])\n</div></li><li><div class=\"code-word\">  let called = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> done = (el._leaveCb = (cancelled) =&gt; {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (called)\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span>\n</div></li><li><div class=\"code-word\">    called = <span class=\"hljs-function\"><span class=\"hljs-keyword\">true</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">()</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(cancelled)</span> {\n</div></li><li><div class=\"code-word\">      callHook(onLeaveCancelled, [el])\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">      callHook(onAfterLeave, [el])\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">    el._leaveCb = <span class=\"hljs-function\">undefined\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(leavingVNodesCache[key] === vnode)</span> {\n</div></li><li><div class=\"code-word\">      delete leavingVNodesCache[key]\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">  leavingVNodesCache[key] = <span class=\"hljs-function\">vnode\n</span></div></li><li><div class=\"code-word\">  <span class=\"hljs-title\">if</span> <span class=\"hljs-params\">(onLeave)</span> {\n</div></li><li><div class=\"code-word\">    onLeave(el, done)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (onLeave.length &lt;= <span class=\"hljs-number\">1</span>) {\n</div></li><li><div class=\"code-word\">      done()\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">    done()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"38406\">\n                      leave 钩子函数主要做的事情就是执行 props 传入的\n                      onBeforeLeave 钩子函数和 onLeave 函数，onLeave\n                      函数的第二个参数是一个 done\n                      函数，它表示离开过渡动画结束后执行的回调函数。\n                    </p>\n                    <p data-nodeid=\"38407\">\n                      done 函数内部主要做的事情就是执行 remove 方法移除\n                      DOM，然后执行 onAfterLeave 钩子函数或者是 onLeaveCancelled\n                      函数，其它的逻辑我们也先不看。\n                    </p>\n                    <p data-nodeid=\"38408\">\n                      接下来，我们重点看一下 onLeave\n                      函数的实现，看看离开过渡动画是如何执行的。\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\">onLeave(el, done) {\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">const</span> resolve = () =&gt; finishLeave(el, done)\n</div></li><li><div class=\"code-word\">  addTransitionClass(el, leaveActiveClass)\n</div></li><li><div class=\"code-word\">  addTransitionClass(el, leaveFromClass)\n</div></li><li><div class=\"code-word\">  nextFrame(() =&gt; {\n</div></li><li><div class=\"code-word\">    removeTransitionClass(el, leaveFromClass)\n</div></li><li><div class=\"code-word\">    addTransitionClass(el, leaveToClass)\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-keyword\">if</span> (!(onLeave &amp;&amp; onLeave.length &gt; <span class=\"hljs-number\">1</span>)) {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">if</span> (leaveDuration) {\n</div></li><li><div class=\"code-word\">        setTimeout(resolve, leaveDuration)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">else</span> {\n</div></li><li><div class=\"code-word\">        whenTransitionEnds(el, type, resolve)\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  })\n</div></li><li><div class=\"code-word\">  onLeave &amp;&amp; onLeave(el, resolve)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"38410\">\n                      onLeave 函数首先给 DOM 元素添加 leaveActiveClass 和\n                      leaveFromClass，并执行基础 props 传入的 onLeave\n                      钩子函数，然后在下一帧移除 leaveFromClass，并添加\n                      leaveToClass。\n                    </p>\n                    <p data-nodeid=\"38411\">\n                      其中，leaveActiveClass 的默认值是\n                      v-leave-active，leaveFromClass 的默认值是\n                      v-leave-from，leaveToClass 的默认值是 v-leave-to。如果给\n                      Transition 组件传入了 name 的 prop，比如 fade，那么\n                      leaveActiveClass 的值就是\n                      fade-leave-active，leaveFromClass 的值就是\n                      fade-leave-from，leaveToClass 的值就是 fade-leave-to。\n                    </p>\n                    <p data-nodeid=\"38412\">\n                      注意，当我们添加 leaveToClass\n                      时，浏览器就开始根据我们编写的 CSS\n                      执行离开过渡动画了，那么动画何时结束呢？\n                    </p>\n                    <p data-nodeid=\"38413\">\n                      和进入动画类似，Transition 组件允许我们传入 leaveDuration\n                      这个 prop，指定过渡的动画时长，当然如果你不指定，Vue.js\n                      内部会监听动画结束事件，然后在动画结束后，执行 resolve\n                      函数，它是执行 finishLeave 函数的返回值，来看它的实现：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> finishLeave = (el, done) =&gt; {\n</div></li><li><div class=\"code-word\">  removeTransitionClass(el, leaveToClass)\n</div></li><li><div class=\"code-word\">  removeTransitionClass(el, leaveActiveClass)\n</div></li><li><div class=\"code-word\">  done &amp;&amp; done()\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"38415\">\n                      其实就是给 DOM 元素移除 leaveToClass 以及\n                      leaveActiveClass，同时执行 done 函数，进而执行\n                      onAfterLeave 钩子函数。\n                    </p>\n                    <p data-nodeid=\"38416\">\n                      至此，元素离开的过渡动画逻辑就分析完了，可以看出离开过渡动画和进入过渡动画是的思路差不多，本质上都是在添加和移除一些\n                      CSS 去执行动画，并且在过程中执行用户传入的钩子函数。\n                    </p>\n                    <h3 data-nodeid=\"38417\">模式的应用</h3>\n                    <p data-nodeid=\"38418\">\n                      前面我们在介绍 Transition\n                      的渲染过程中提到过模式的应用，模式有什么用呢，我们还是通过示例说明，把前面的例子稍加修改：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;template&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"app\"</span>&gt;</span>\n</span></div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"show = !show\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      Toggle render\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transition</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"fade\"</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>hi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">transition</span>&gt;</span>\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</div></li><li><div class=\"code-word\">&lt;/template&gt;\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n</div></li><li><div class=\"code-word\">    data() {\n</div></li><li><div class=\"code-word\">      <span class=\"hljs-keyword\">return</span> {\n</div></li><li><div class=\"code-word\">        <span class=\"hljs-attr\">show</span>: <span class=\"hljs-literal\">true</span>\n</div></li><li><div class=\"code-word\">      }\n</div></li><li><div class=\"code-word\">    }\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</div></li><li><div class=\"code-word\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n</span></span></div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.fade-enter-active</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.fade-leave-active</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">transition</span>: opacity <span class=\"hljs-number\">0.5s</span> ease;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.fade-enter-from</span>,\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-selector-class\">.fade-leave-to</span> {\n</div></li><li><div class=\"code-word\">    <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"38773\">\n                      我们在 show 条件为 false 的情况下，显示字符串\n                      hi，你可以运行这个示例，然后会发现这个过渡效果有点生硬，并不理想。\n                    </p>\n                    <p data-nodeid=\"38774\">\n                      然后，我们给这个 Transition 组件加一个 out-in 的 mode：\n                    </p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"js\"><ol><li><div class=\"code-word\">&lt;transition mode=<span class=\"hljs-string\">\"out-in\"</span> name=<span class=\"hljs-string\">\"fade\"</span>&gt;\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"show\"</span>&gt;</span>hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">v-else</span>&gt;</span>hi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span>\n</div></li><li><div class=\"code-word\">&lt;/transition&gt;\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"39112\">\n                      我们会发现这个过渡效果好多了，hello\n                      文本先完成离开的过渡后，hi 文本开始进入过渡动画。\n                    </p>\n                    <p data-nodeid=\"39113\">\n                      模式非常适合这种两个元素切换的场景，Vue.js 给 Transition\n                      组件提供了两种模式， in-out 和 out-in ，它们有什么区别呢？\n                    </p>\n                    <ul data-nodeid=\"39114\">\n                      <li data-nodeid=\"39115\">\n                        <p data-nodeid=\"39116\">\n                          在 in-out\n                          模式下，新元素先进行过渡，完成之后当前元素过渡离开。\n                        </p>\n                      </li>\n                      <li data-nodeid=\"39117\">\n                        <p data-nodeid=\"39118\">\n                          在 out-in\n                          模式下，当前元素先进行过渡，完成之后新元素过渡进入。\n                        </p>\n                      </li>\n                    </ul>\n                    <p data-nodeid=\"39119\">\n                      在实际工作中，你大部分情况都是在使用 out-in 模式，而\n                      in-out 模式很少用到，所以接下来我们就来分析 out-in\n                      模式的实现原理。\n                    </p>\n                    <p data-nodeid=\"39120\">\n                      我们先不妨思考一下，为什么在不加模式的情况下，会出现示例那样的过渡效果。\n                    </p>\n                    <p data-nodeid=\"39121\">\n                      当我们点击按钮，show 变量由 true 变成\n                      false，会触发当前元素 hello\n                      文本的离开动画，也会同时触发新元素 hi\n                      文本的进入动画。由于动画是同时进行的，而且在离开动画结束之前，当前元素\n                      hello 是没有被移除 DOM 的，所以它还会占位，就把新元素 hi\n                      文本挤到下面去了。当 hello 文本的离开动画执行完毕从 DOM\n                      中删除后，hi 文本才能回到之前的位置。\n                    </p>\n                    <p data-nodeid=\"39122\">\n                      那么，我们怎么做才能做到当前元素过渡动画执行完毕后，再执行新元素的过渡呢？\n                    </p>\n                    <p data-nodeid=\"39123\">我们来看一下 out-in 模式的实现：</p>\n                    <div class=\"course-code-area\">\n                      <div class=\"copy-btn\">\n                        <div class=\"copy-icon\"></div>\n                        复制代码\n                      </div>\n                      <pre><code data-language=\"java\"><ol><li><div class=\"code-word\"><span class=\"hljs-keyword\">const</span> leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance)\n</div></li><li><div class=\"code-word\">setTransitionHooks(oldInnerChild, leavingHooks)\n</div></li><li><div class=\"code-word\"><span class=\"hljs-keyword\">if</span> (mode === <span class=\"hljs-string\">'out-in'</span>) {\n</div></li><li><div class=\"code-word\">  state.isLeaving = <span class=\"hljs-keyword\">true</span>\n</div></li><li><div class=\"code-word\">  leavingHooks.afterLeave = () =&gt; {\n</div></li><li><div class=\"code-word\">    state.isLeaving = <span class=\"hljs-keyword\">false</span>\n</div></li><li><div class=\"code-word\">    instance.update()\n</div></li><li><div class=\"code-word\">  }\n</div></li><li><div class=\"code-word\">  <span class=\"hljs-keyword\">return</span> emptyPlaceholder(child)\n</div></li><li><div class=\"code-word\">}\n</div></li></ol></code></pre>\n                    </div>\n                    <p data-nodeid=\"39125\">\n                      当模式为 out-in 的时候，会标记 state.isLeaving 为\n                      true，然后返回一个空的注释节点，同时更新当前元素的钩子函数中的\n                      afterLeave 函数，内部执行 instance.update 重新渲染组件。\n                    </p>\n                    <p data-nodeid=\"39126\">\n                      这样做就保证了在当前元素执行离开过渡的时候，新元素只渲染成一个注释节点，这样页面上看上去还是只执行当前元素的离开过渡动画。\n                    </p>\n                    <p data-nodeid=\"39127\">\n                      然后当离开动画执行完毕后，触发了 Transition\n                      组件的重新渲染，这个时候就可以如期渲染新元素并执行进入过渡动画了，是不是很巧妙呢？\n                    </p>\n                    <h3 data-nodeid=\"39128\">总结</h3>\n                    <p data-nodeid=\"39129\">\n                      好的，到这里我们这一节的学习就结束啦，通过这节课的学习，你应该了解了\n                      Transition\n                      组件是如何渲染的，如何执行过渡动画和相应的钩子函数的，以及当两个视图切换时，模式的工作原理是怎样的。\n                    </p>\n                    <p data-nodeid=\"39130\">\n                      最后，给你留一道思考题，Transition 组件在 beforeEnter\n                      钩子函数里会判断 el._leaveCb 是否存在，存在则执行，在\n                      leave 钩子函数里会判断 el._enterCb\n                      是否存在，存在则执行，这么做的原因是什么？欢迎你在留言区与我分享。\n                    </p>\n                    <blockquote data-nodeid=\"39131\">\n                      <p data-nodeid=\"39132\">\n                        本节课的相关代码在源代码中的位置如下：<br />\n                        packages/runtime-core/src/components/BasetTransition.ts<br />\n                        packages/runtime-core/src/renderer.ts<br />\n                        packages/runtime-dom/src/components/Transition.ts\n                      </p>\n                    </blockquote>\n            "}